
CANRx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000118f4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000086c  08011af4  08011af4  00021af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012360  08012360  0003016c  2**0
                  CONTENTS
  4 .ARM          00000008  08012360  08012360  00022360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012368  08012368  0003016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012368  08012368  00022368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801236c  0801236c  0002236c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  08012370  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004584  2000016c  080124dc  0003016c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200046f0  080124dc  000346f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003016c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003019a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022e57  00000000  00000000  000301dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005193  00000000  00000000  00053034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c10  00000000  00000000  000581c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001567  00000000  00000000  00059dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e88b  00000000  00000000  0005b33f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002664d  00000000  00000000  00089bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00101f71  00000000  00000000  000b0217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007df4  00000000  00000000  001b2188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  001b9f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000016c 	.word	0x2000016c
 800021c:	00000000 	.word	0x00000000
 8000220:	08011adc 	.word	0x08011adc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000170 	.word	0x20000170
 800023c:	08011adc 	.word	0x08011adc

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005de:	b0cd      	sub	sp, #308	; 0x134
 80005e0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f001 fa96 	bl	8001b12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 faab 	bl	8000b40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 fc03 	bl	8000df4 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ee:	f000 fbdb 	bl	8000da8 <MX_DMA_Init>
  MX_CAN1_Init();
 80005f2:	f000 fb0d 	bl	8000c10 <MX_CAN1_Init>
  MX_SDMMC1_SD_Init();
 80005f6:	f000 fb81 	bl	8000cfc <MX_SDMMC1_SD_Init>
  MX_USART3_UART_Init();
 80005fa:	f000 fba5 	bl	8000d48 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80005fe:	f00a f88b 	bl	800a718 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000602:	f00f fb47 	bl	800fc94 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000606:	f000 fb39 	bl	8000c7c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  DS1307_Init(&hi2c1);
 800060a:	48ad      	ldr	r0, [pc, #692]	; (80008c0 <main+0x2e4>)
 800060c:	f001 f992 	bl	8001934 <DS1307_Init>
		RESET_STATE,
		POWER_OFF
	} state_t;

	//Starting state is PERIPHERAL_INIT
	state_t state = TURN_ON;
 8000610:	2300      	movs	r3, #0
 8000612:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint32_t byteswritten; /* File write/read counts */
#ifdef VERBOSE_DEBUGGING
	uint32_t buffer_emptyings = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint32_t total_size = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		switch (state) {
 8000622:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000626:	2b0c      	cmp	r3, #12
 8000628:	f200 8257 	bhi.w	8000ada <main+0x4fe>
 800062c:	a201      	add	r2, pc, #4	; (adr r2, 8000634 <main+0x58>)
 800062e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000632:	bf00      	nop
 8000634:	08000669 	.word	0x08000669
 8000638:	080006a1 	.word	0x080006a1
 800063c:	0800072d 	.word	0x0800072d
 8000640:	08000895 	.word	0x08000895
 8000644:	08000aef 	.word	0x08000aef
 8000648:	08000aef 	.word	0x08000aef
 800064c:	08000955 	.word	0x08000955
 8000650:	08000aef 	.word	0x08000aef
 8000654:	080009a1 	.word	0x080009a1
 8000658:	08000aef 	.word	0x08000aef
 800065c:	080009d1 	.word	0x080009d1
 8000660:	08000a61 	.word	0x08000a61
 8000664:	08000ac5 	.word	0x08000ac5
		 * Transition out:
		 * 	If power switch is set to on position -> PERIFPHERAL_INIT
		 * 	else (power switch is set to off) -> POWER_OFF
		 */
		case TURN_ON:
			MX_DMA_Init();
 8000668:	f000 fb9e 	bl	8000da8 <MX_DMA_Init>
			MX_SDMMC1_SD_Init();
 800066c:	f000 fb46 	bl	8000cfc <MX_SDMMC1_SD_Init>
			MX_FATFS_Init();
 8000670:	f00a f852 	bl	800a718 <MX_FATFS_Init>
			POWER_STATE = HAL_GPIO_ReadPin(PowerSwitch_GPIO_Port, PowerSwitch_Pin);
 8000674:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000678:	4892      	ldr	r0, [pc, #584]	; (80008c4 <main+0x2e8>)
 800067a:	f002 ff33 	bl	80034e4 <HAL_GPIO_ReadPin>
 800067e:	4603      	mov	r3, r0
 8000680:	461a      	mov	r2, r3
 8000682:	4b91      	ldr	r3, [pc, #580]	; (80008c8 <main+0x2ec>)
 8000684:	701a      	strb	r2, [r3, #0]
			state = POWER_STATE ? PERIPHERAL_INIT : POWER_OFF;
 8000686:	4b90      	ldr	r3, [pc, #576]	; (80008c8 <main+0x2ec>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <main+0xb6>
 800068e:	2301      	movs	r3, #1
 8000690:	e000      	b.n	8000694 <main+0xb8>
 8000692:	230c      	movs	r3, #12
 8000694:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
			NEW_LOG_FLAG = 0;
 8000698:	4b8c      	ldr	r3, [pc, #560]	; (80008cc <main+0x2f0>)
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]
			break;
 800069e:	e22b      	b.n	8000af8 <main+0x51c>
		 * Transition out:
		 * 	Always -> CREATE_LOG_FILE
		 */
		case PERIPHERAL_INIT:
			// Reset both buffers
			data_buffer[0][0] = '\00';
 80006a0:	4b8b      	ldr	r3, [pc, #556]	; (80008d0 <main+0x2f4>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
			data_buffer[1][0] = '\00';
 80006a6:	4b8a      	ldr	r3, [pc, #552]	; (80008d0 <main+0x2f4>)
 80006a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ac:	2200      	movs	r2, #0
 80006ae:	715a      	strb	r2, [r3, #5]
			buffer_fill_level[0] = 0;
 80006b0:	4b88      	ldr	r3, [pc, #544]	; (80008d4 <main+0x2f8>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
			buffer_fill_level[1] = 0;
 80006b6:	4b87      	ldr	r3, [pc, #540]	; (80008d4 <main+0x2f8>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	705a      	strb	r2, [r3, #1]
			current_buffer = 0;
 80006bc:	4b86      	ldr	r3, [pc, #536]	; (80008d8 <main+0x2fc>)
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]

			// Turn Red LED on (Green turns off)
#ifdef VERBOSE_DEBUGGING
			printf("Initializing Peripherals...\r\n");
 80006c2:	4886      	ldr	r0, [pc, #536]	; (80008dc <main+0x300>)
 80006c4:	f010 fa84 	bl	8010bd0 <puts>
#endif
			HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_RESET); //Red LED
 80006c8:	2200      	movs	r2, #0
 80006ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ce:	4884      	ldr	r0, [pc, #528]	; (80008e0 <main+0x304>)
 80006d0:	f002 ff20 	bl	8003514 <HAL_GPIO_WritePin>

			// Initializing CAN
			if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80006d4:	4883      	ldr	r0, [pc, #524]	; (80008e4 <main+0x308>)
 80006d6:	f001 fc85 	bl	8001fe4 <HAL_CAN_Start>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d004      	beq.n	80006ea <main+0x10e>
#ifdef VERBOSE_DEBUGGING
				printf("CAN could not start.\r\n");
 80006e0:	4881      	ldr	r0, [pc, #516]	; (80008e8 <main+0x30c>)
 80006e2:	f010 fa75 	bl	8010bd0 <puts>
#endif
				Error_Handler();
 80006e6:	f000 fd79 	bl	80011dc <Error_Handler>
			}
			if (CAN_Filter_Config() != HAL_OK) {
 80006ea:	f000 fcfd 	bl	80010e8 <CAN_Filter_Config>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d004      	beq.n	80006fe <main+0x122>
#ifdef VERBOSE_DEBUGGING
				printf("CAN filter failed to set.\r\n");
 80006f4:	487d      	ldr	r0, [pc, #500]	; (80008ec <main+0x310>)
 80006f6:	f010 fa6b 	bl	8010bd0 <puts>
#endif
				Error_Handler();
 80006fa:	f000 fd6f 	bl	80011dc <Error_Handler>
			}
#ifdef VERBOSE_DEBUGGING
			printf("CAN initialization succeeded...\r\n");
 80006fe:	487c      	ldr	r0, [pc, #496]	; (80008f0 <main+0x314>)
 8000700:	f010 fa66 	bl	8010bd0 <puts>
#endif

			// Mount and Format SD Card
			if (f_mount(&SDFatFS, SDPath, 0) != FR_OK) {
 8000704:	2200      	movs	r2, #0
 8000706:	497b      	ldr	r1, [pc, #492]	; (80008f4 <main+0x318>)
 8000708:	487b      	ldr	r0, [pc, #492]	; (80008f8 <main+0x31c>)
 800070a:	f00e fc3f 	bl	800ef8c <f_mount>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d004      	beq.n	800071e <main+0x142>
#ifdef VERBOSE_DEBUGGING
				printf("Mounting failed!\r\n");
 8000714:	4879      	ldr	r0, [pc, #484]	; (80008fc <main+0x320>)
 8000716:	f010 fa5b 	bl	8010bd0 <puts>
#endif
				Error_Handler();
 800071a:	f000 fd5f 	bl	80011dc <Error_Handler>
			}
#ifdef VERBOSE_DEBUGGING
			printf("SD initialization succeeded...\r\n");
 800071e:	4878      	ldr	r0, [pc, #480]	; (8000900 <main+0x324>)
 8000720:	f010 fa56 	bl	8010bd0 <puts>
#endif

			state = CREATE_LOG_FILE;
 8000724:	2302      	movs	r3, #2
 8000726:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
			break;
 800072a:	e1e5      	b.n	8000af8 <main+0x51c>
		 * Transition out:
		 * 	Always -> STANDBY
		 */
		case CREATE_LOG_FILE:
#ifdef VERBOSE_DEBUGGING
			printf("Creating new log file...\r\n");
 800072c:	4875      	ldr	r0, [pc, #468]	; (8000904 <main+0x328>)
 800072e:	f010 fa4f 	bl	8010bd0 <puts>
#endif

			// Update current date/time info
			curr_date = DS1307_GetDate();
 8000732:	f001 f971 	bl	8001a18 <DS1307_GetDate>
 8000736:	4603      	mov	r3, r0
 8000738:	461a      	mov	r2, r3
 800073a:	4b73      	ldr	r3, [pc, #460]	; (8000908 <main+0x32c>)
 800073c:	701a      	strb	r2, [r3, #0]
			curr_month = DS1307_GetMonth();
 800073e:	f001 f977 	bl	8001a30 <DS1307_GetMonth>
 8000742:	4603      	mov	r3, r0
 8000744:	461a      	mov	r2, r3
 8000746:	4b71      	ldr	r3, [pc, #452]	; (800090c <main+0x330>)
 8000748:	701a      	strb	r2, [r3, #0]
			curr_year = DS1307_GetYear();
 800074a:	f001 f97d 	bl	8001a48 <DS1307_GetYear>
 800074e:	4603      	mov	r3, r0
 8000750:	b2da      	uxtb	r2, r3
 8000752:	4b6f      	ldr	r3, [pc, #444]	; (8000910 <main+0x334>)
 8000754:	701a      	strb	r2, [r3, #0]
			curr_hour = DS1307_GetHour();
 8000756:	f001 f999 	bl	8001a8c <DS1307_GetHour>
 800075a:	4603      	mov	r3, r0
 800075c:	461a      	mov	r2, r3
 800075e:	4b6d      	ldr	r3, [pc, #436]	; (8000914 <main+0x338>)
 8000760:	701a      	strb	r2, [r3, #0]
			curr_minute = DS1307_GetMinute();
 8000762:	f001 f9a2 	bl	8001aaa <DS1307_GetMinute>
 8000766:	4603      	mov	r3, r0
 8000768:	461a      	mov	r2, r3
 800076a:	4b6b      	ldr	r3, [pc, #428]	; (8000918 <main+0x33c>)
 800076c:	701a      	strb	r2, [r3, #0]
			curr_second = DS1307_GetSecond();
 800076e:	f001 f9a8 	bl	8001ac2 <DS1307_GetSecond>
 8000772:	4603      	mov	r3, r0
 8000774:	461a      	mov	r2, r3
 8000776:	4b69      	ldr	r3, [pc, #420]	; (800091c <main+0x340>)
 8000778:	701a      	strb	r2, [r3, #0]
			starting_tick = HAL_GetTick();
 800077a:	f001 fa1b 	bl	8001bb4 <HAL_GetTick>
 800077e:	4603      	mov	r3, r0
 8000780:	4a67      	ldr	r2, [pc, #412]	; (8000920 <main+0x344>)
 8000782:	6013      	str	r3, [r2, #0]
#ifdef VERBOSE_DEBUGGING
			printf("%02d/%02d/20%02d %02d:%02d:%02d\r\n",
 8000784:	4b61      	ldr	r3, [pc, #388]	; (800090c <main+0x330>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	4618      	mov	r0, r3
 800078a:	4b5f      	ldr	r3, [pc, #380]	; (8000908 <main+0x32c>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	461c      	mov	r4, r3
 8000790:	4b5f      	ldr	r3, [pc, #380]	; (8000910 <main+0x334>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	461d      	mov	r5, r3
 8000796:	4b5f      	ldr	r3, [pc, #380]	; (8000914 <main+0x338>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	461a      	mov	r2, r3
 800079c:	4b5e      	ldr	r3, [pc, #376]	; (8000918 <main+0x33c>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	4619      	mov	r1, r3
 80007a2:	4b5e      	ldr	r3, [pc, #376]	; (800091c <main+0x340>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	9302      	str	r3, [sp, #8]
 80007a8:	9101      	str	r1, [sp, #4]
 80007aa:	9200      	str	r2, [sp, #0]
 80007ac:	462b      	mov	r3, r5
 80007ae:	4622      	mov	r2, r4
 80007b0:	4601      	mov	r1, r0
 80007b2:	485c      	ldr	r0, [pc, #368]	; (8000924 <main+0x348>)
 80007b4:	f010 f9a6 	bl	8010b04 <iprintf>
					curr_month, curr_date, curr_year, curr_hour, curr_minute, curr_second);
#endif
			if (f_stat(data_directory, &fno) != FR_OK) {
 80007b8:	4b5b      	ldr	r3, [pc, #364]	; (8000928 <main+0x34c>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	495b      	ldr	r1, [pc, #364]	; (800092c <main+0x350>)
 80007be:	4618      	mov	r0, r3
 80007c0:	f00f f805 	bl	800f7ce <f_stat>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d00c      	beq.n	80007e4 <main+0x208>
				if (f_mkdir(data_directory) != FR_OK) {
 80007ca:	4b57      	ldr	r3, [pc, #348]	; (8000928 <main+0x34c>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f00f f836 	bl	800f840 <f_mkdir>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d004      	beq.n	80007e4 <main+0x208>
#ifdef VERBOSE_DEBUGGING
					printf("Data directory not present and failed to create it.");
 80007da:	4855      	ldr	r0, [pc, #340]	; (8000930 <main+0x354>)
 80007dc:	f010 f992 	bl	8010b04 <iprintf>
#endif
					Error_Handler();
 80007e0:	f000 fcfc 	bl	80011dc <Error_Handler>
				}
			}

			// Creating new filename
			TCHAR filename[FILENAME_MAX_BYTES];
			snprintf(filename, FILENAME_MAX_BYTES, "%s/%02d-%02d-20%02d_(%02dh-%02dm-%02ds).log",
 80007e4:	4b50      	ldr	r3, [pc, #320]	; (8000928 <main+0x34c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a48      	ldr	r2, [pc, #288]	; (800090c <main+0x330>)
 80007ea:	7812      	ldrb	r2, [r2, #0]
 80007ec:	4611      	mov	r1, r2
 80007ee:	4a46      	ldr	r2, [pc, #280]	; (8000908 <main+0x32c>)
 80007f0:	7812      	ldrb	r2, [r2, #0]
 80007f2:	4614      	mov	r4, r2
 80007f4:	4a46      	ldr	r2, [pc, #280]	; (8000910 <main+0x334>)
 80007f6:	7812      	ldrb	r2, [r2, #0]
 80007f8:	4615      	mov	r5, r2
 80007fa:	4a46      	ldr	r2, [pc, #280]	; (8000914 <main+0x338>)
 80007fc:	7812      	ldrb	r2, [r2, #0]
 80007fe:	4616      	mov	r6, r2
 8000800:	4a45      	ldr	r2, [pc, #276]	; (8000918 <main+0x33c>)
 8000802:	7812      	ldrb	r2, [r2, #0]
 8000804:	607a      	str	r2, [r7, #4]
 8000806:	4a45      	ldr	r2, [pc, #276]	; (800091c <main+0x340>)
 8000808:	7812      	ldrb	r2, [r2, #0]
 800080a:	f107 0008 	add.w	r0, r7, #8
 800080e:	9205      	str	r2, [sp, #20]
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	9204      	str	r2, [sp, #16]
 8000814:	9603      	str	r6, [sp, #12]
 8000816:	9502      	str	r5, [sp, #8]
 8000818:	9401      	str	r4, [sp, #4]
 800081a:	9100      	str	r1, [sp, #0]
 800081c:	4a45      	ldr	r2, [pc, #276]	; (8000934 <main+0x358>)
 800081e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000822:	f010 f86d 	bl	8010900 <sniprintf>
					data_directory,
					curr_month, curr_date, curr_year,
					curr_hour, curr_minute, curr_second);

#ifdef VERBOSE_DEBUGGING
			printf("New log name: %s \r\n", filename);
 8000826:	f107 0308 	add.w	r3, r7, #8
 800082a:	4619      	mov	r1, r3
 800082c:	4842      	ldr	r0, [pc, #264]	; (8000938 <main+0x35c>)
 800082e:	f010 f969 	bl	8010b04 <iprintf>
#endif

			// Open file for writing (Create)
			if (f_open(&SDFile, filename, FA_CREATE_ALWAYS | FA_WRITE)
 8000832:	f107 0308 	add.w	r3, r7, #8
 8000836:	220a      	movs	r2, #10
 8000838:	4619      	mov	r1, r3
 800083a:	4840      	ldr	r0, [pc, #256]	; (800093c <main+0x360>)
 800083c:	f00e fbec 	bl	800f018 <f_open>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d007      	beq.n	8000856 <main+0x27a>
					!= FR_OK) {
#ifdef VERBOSE_DEBUGGING
				printf("Failed to create new log file: %s ...!\r\n", filename);
 8000846:	f107 0308 	add.w	r3, r7, #8
 800084a:	4619      	mov	r1, r3
 800084c:	483c      	ldr	r0, [pc, #240]	; (8000940 <main+0x364>)
 800084e:	f010 f959 	bl	8010b04 <iprintf>
#endif
				Error_Handler();
 8000852:	f000 fcc3 	bl	80011dc <Error_Handler>
			}
#ifdef VERBOSE_DEBUGGING
			printf("Successfully created new log file: %s ...\r\n", filename);
 8000856:	f107 0308 	add.w	r3, r7, #8
 800085a:	4619      	mov	r1, r3
 800085c:	4839      	ldr	r0, [pc, #228]	; (8000944 <main+0x368>)
 800085e:	f010 f951 	bl	8010b04 <iprintf>
#endif

			// Starting CANRx interrupts
			if (HAL_CAN_ActivateNotification(&hcan1,
 8000862:	2102      	movs	r1, #2
 8000864:	481f      	ldr	r0, [pc, #124]	; (80008e4 <main+0x308>)
 8000866:	f001 fd5c 	bl	8002322 <HAL_CAN_ActivateNotification>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d004      	beq.n	800087a <main+0x29e>
					CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
				/* Notification Error */
#ifdef VERBOSE_DEBUGGING
				printf("Failed to activate CAN\r\n");
 8000870:	4835      	ldr	r0, [pc, #212]	; (8000948 <main+0x36c>)
 8000872:	f010 f9ad 	bl	8010bd0 <puts>
#endif
				Error_Handler();
 8000876:	f000 fcb1 	bl	80011dc <Error_Handler>
			}

			// Turn Green LED on (turns Red LED off)
#ifdef VERBOSE_DEBUGGING
			printf("Ready to receive messages!\r\n");
 800087a:	4834      	ldr	r0, [pc, #208]	; (800094c <main+0x370>)
 800087c:	f010 f9a8 	bl	8010bd0 <puts>
#endif
			HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_SET); // Successful LED
 8000880:	2201      	movs	r2, #1
 8000882:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000886:	4816      	ldr	r0, [pc, #88]	; (80008e0 <main+0x304>)
 8000888:	f002 fe44 	bl	8003514 <HAL_GPIO_WritePin>

			state = STANDBY;
 800088c:	2303      	movs	r3, #3
 800088e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
			break;
 8000892:	e131      	b.n	8000af8 <main+0x51c>
		 * 	If power switch is set to off position or the new file button is clicked -> RESET_STATE
		 * 	Else if the current buffer is filled -> SD_CARD_WRITE
		 * 	Else -> STANDBY
		 */
		case STANDBY:
			if (!POWER_STATE || NEW_LOG_FLAG) //Power switch is off or new log file
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <main+0x2ec>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d003      	beq.n	80008a4 <main+0x2c8>
 800089c:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <main+0x2f0>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d003      	beq.n	80008ac <main+0x2d0>
				state = RESET_STATE;
 80008a4:	230b      	movs	r3, #11
 80008a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
			else if (is_buffer_filled) //Buffer is filled
				state = SD_CARD_WRITE;
			break;
 80008aa:	e122      	b.n	8000af2 <main+0x516>
			else if (is_buffer_filled) //Buffer is filled
 80008ac:	4b28      	ldr	r3, [pc, #160]	; (8000950 <main+0x374>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	f000 811e 	beq.w	8000af2 <main+0x516>
				state = SD_CARD_WRITE;
 80008b6:	2306      	movs	r3, #6
 80008b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
			break;
 80008bc:	e119      	b.n	8000af2 <main+0x516>
 80008be:	bf00      	nop
 80008c0:	200001b0 	.word	0x200001b0
 80008c4:	40021000 	.word	0x40021000
 80008c8:	200004e8 	.word	0x200004e8
 80008cc:	200004e9 	.word	0x200004e9
 80008d0:	200004ec 	.word	0x200004ec
 80008d4:	200024f8 	.word	0x200024f8
 80008d8:	200024fa 	.word	0x200024fa
 80008dc:	08011b00 	.word	0x08011b00
 80008e0:	40021400 	.word	0x40021400
 80008e4:	20000188 	.word	0x20000188
 80008e8:	08011b20 	.word	0x08011b20
 80008ec:	08011b38 	.word	0x08011b38
 80008f0:	08011b54 	.word	0x08011b54
 80008f4:	20002518 	.word	0x20002518
 80008f8:	2000251c 	.word	0x2000251c
 80008fc:	08011b78 	.word	0x08011b78
 8000900:	08011b8c 	.word	0x08011b8c
 8000904:	08011bac 	.word	0x08011bac
 8000908:	200024fc 	.word	0x200024fc
 800090c:	200024fd 	.word	0x200024fd
 8000910:	200024fe 	.word	0x200024fe
 8000914:	200024ff 	.word	0x200024ff
 8000918:	20002500 	.word	0x20002500
 800091c:	20002501 	.word	0x20002501
 8000920:	20002504 	.word	0x20002504
 8000924:	08011bc8 	.word	0x08011bc8
 8000928:	20000000 	.word	0x20000000
 800092c:	200003d0 	.word	0x200003d0
 8000930:	08011bec 	.word	0x08011bec
 8000934:	08011c20 	.word	0x08011c20
 8000938:	08011c4c 	.word	0x08011c4c
 800093c:	20002750 	.word	0x20002750
 8000940:	08011c60 	.word	0x08011c60
 8000944:	08011c8c 	.word	0x08011c8c
 8000948:	08011cb8 	.word	0x08011cb8
 800094c:	08011cd0 	.word	0x08011cd0
 8000950:	200024fb 	.word	0x200024fb
		 *
		 * Transition out:
		 *	Always -> USB_TRANSMIT
		 */
		case SD_CARD_WRITE:
			if (f_write(&SDFile, data_buffer[!current_buffer], BUFFER_TOTAL_SIZE, (void*) &byteswritten) != FR_OK || byteswritten == 0) {
 8000954:	4b69      	ldr	r3, [pc, #420]	; (8000afc <main+0x520>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	bf0c      	ite	eq
 800095c:	2301      	moveq	r3, #1
 800095e:	2300      	movne	r3, #0
 8000960:	b2db      	uxtb	r3, r3
 8000962:	461a      	mov	r2, r3
 8000964:	4613      	mov	r3, r2
 8000966:	029b      	lsls	r3, r3, #10
 8000968:	4413      	add	r3, r2
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	4413      	add	r3, r2
 800096e:	4a64      	ldr	r2, [pc, #400]	; (8000b00 <main+0x524>)
 8000970:	1899      	adds	r1, r3, r2
 8000972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000976:	f241 0204 	movw	r2, #4100	; 0x1004
 800097a:	4862      	ldr	r0, [pc, #392]	; (8000b04 <main+0x528>)
 800097c:	f00e fd0a 	bl	800f394 <f_write>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d103      	bne.n	800098e <main+0x3b2>
 8000986:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800098a:	2b00      	cmp	r3, #0
 800098c:	d104      	bne.n	8000998 <main+0x3bc>
#ifdef VERBOSE_DEBUGGING
				printf("Writing Failed!\r\n");
 800098e:	485e      	ldr	r0, [pc, #376]	; (8000b08 <main+0x52c>)
 8000990:	f010 f91e 	bl	8010bd0 <puts>
#endif
				Error_Handler();
 8000994:	f000 fc22 	bl	80011dc <Error_Handler>
			}

			state = USB_TRANSMIT;
 8000998:	2308      	movs	r3, #8
 800099a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
			break;
 800099e:	e0ab      	b.n	8000af8 <main+0x51c>
		 *
		 * Transition out:
		 *	Always -> RESET_BUFFER
		 */
		case USB_TRANSMIT:
			CDC_Transmit_FS(data_buffer[!current_buffer], BUFFER_TOTAL_SIZE);
 80009a0:	4b56      	ldr	r3, [pc, #344]	; (8000afc <main+0x520>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	bf0c      	ite	eq
 80009a8:	2301      	moveq	r3, #1
 80009aa:	2300      	movne	r3, #0
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	461a      	mov	r2, r3
 80009b0:	4613      	mov	r3, r2
 80009b2:	029b      	lsls	r3, r3, #10
 80009b4:	4413      	add	r3, r2
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	4413      	add	r3, r2
 80009ba:	4a51      	ldr	r2, [pc, #324]	; (8000b00 <main+0x524>)
 80009bc:	4413      	add	r3, r2
 80009be:	f241 0104 	movw	r1, #4100	; 0x1004
 80009c2:	4618      	mov	r0, r3
 80009c4:	f00f fa24 	bl	800fe10 <CDC_Transmit_FS>
			state = RESET_BUFFER;
 80009c8:	230a      	movs	r3, #10
 80009ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
			break;
 80009ce:	e093      	b.n	8000af8 <main+0x51c>
		 *	Always -> STANDBY
		 */
		case RESET_BUFFER:
			// bookkeeping information (just for debugging)
#ifdef VERBOSE_DEBUGGING
			buffer_emptyings++;
 80009d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80009d4:	3301      	adds	r3, #1
 80009d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
			total_size += byteswritten;
 80009da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80009de:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80009e2:	4413      	add	r3, r2
 80009e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			printf("emptied buffer %d\r\n", !current_buffer);
 80009e8:	4b44      	ldr	r3, [pc, #272]	; (8000afc <main+0x520>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	bf0c      	ite	eq
 80009f0:	2301      	moveq	r3, #1
 80009f2:	2300      	movne	r3, #0
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	4619      	mov	r1, r3
 80009f8:	4844      	ldr	r0, [pc, #272]	; (8000b0c <main+0x530>)
 80009fa:	f010 f883 	bl	8010b04 <iprintf>
			printf("buffers emptied: %ld\r\n", buffer_emptyings);
 80009fe:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8000a02:	4843      	ldr	r0, [pc, #268]	; (8000b10 <main+0x534>)
 8000a04:	f010 f87e 	bl	8010b04 <iprintf>
			printf("Wrote buffer sizeof: %ld\r\n", byteswritten);
 8000a08:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4841      	ldr	r0, [pc, #260]	; (8000b14 <main+0x538>)
 8000a10:	f010 f878 	bl	8010b04 <iprintf>
#endif
			// Reset buffer that was just sent to SD and USB
			data_buffer[!current_buffer][0] = '\00';
 8000a14:	4b39      	ldr	r3, [pc, #228]	; (8000afc <main+0x520>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	bf0c      	ite	eq
 8000a1c:	2301      	moveq	r3, #1
 8000a1e:	2300      	movne	r3, #0
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	461a      	mov	r2, r3
 8000a24:	4936      	ldr	r1, [pc, #216]	; (8000b00 <main+0x524>)
 8000a26:	4613      	mov	r3, r2
 8000a28:	029b      	lsls	r3, r3, #10
 8000a2a:	4413      	add	r3, r2
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	4413      	add	r3, r2
 8000a30:	440b      	add	r3, r1
 8000a32:	2200      	movs	r2, #0
 8000a34:	701a      	strb	r2, [r3, #0]
			buffer_fill_level[!current_buffer] = 0;
 8000a36:	4b31      	ldr	r3, [pc, #196]	; (8000afc <main+0x520>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2301      	moveq	r3, #1
 8000a40:	2300      	movne	r3, #0
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	461a      	mov	r2, r3
 8000a46:	4b34      	ldr	r3, [pc, #208]	; (8000b18 <main+0x53c>)
 8000a48:	2100      	movs	r1, #0
 8000a4a:	5499      	strb	r1, [r3, r2]
			is_buffer_filled = 0;
 8000a4c:	4b33      	ldr	r3, [pc, #204]	; (8000b1c <main+0x540>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	701a      	strb	r2, [r3, #0]

			byteswritten = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

			state = STANDBY;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
			break;
 8000a5e:	e04b      	b.n	8000af8 <main+0x51c>
		 *	If power switch is in off position -> POWER_OFF
		 *	Else (button was pressed) -> TURN_ON
		 */
		case RESET_STATE:
			// Turn off CAN interrupt
			HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000a60:	2102      	movs	r1, #2
 8000a62:	482f      	ldr	r0, [pc, #188]	; (8000b20 <main+0x544>)
 8000a64:	f001 fc83 	bl	800236e <HAL_CAN_DeactivateNotification>
			HAL_CAN_Stop(&hcan1);
 8000a68:	482d      	ldr	r0, [pc, #180]	; (8000b20 <main+0x544>)
 8000a6a:	f001 faff 	bl	800206c <HAL_CAN_Stop>

			// Turn Red LED on (Green LED turns off)
			HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_RESET); //Red LED
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a74:	482b      	ldr	r0, [pc, #172]	; (8000b24 <main+0x548>)
 8000a76:	f002 fd4d 	bl	8003514 <HAL_GPIO_WritePin>

#ifdef VERBOSE_DEBUGGING
			// Debugging information
			printf("total sizeof: %ld\r\n", total_size);
 8000a7a:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8000a7e:	482a      	ldr	r0, [pc, #168]	; (8000b28 <main+0x54c>)
 8000a80:	f010 f840 	bl	8010b04 <iprintf>
			total_size = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			buffer_emptyings = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
			printf("Unmounting SD Card!\r\n");
 8000a90:	4826      	ldr	r0, [pc, #152]	; (8000b2c <main+0x550>)
 8000a92:	f010 f89d 	bl	8010bd0 <puts>
#endif
			f_close(&SDFile);
 8000a96:	481b      	ldr	r0, [pc, #108]	; (8000b04 <main+0x528>)
 8000a98:	f00e fe6f 	bl	800f77a <f_close>
			f_mount(0, (TCHAR const*) NULL, 0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f00e fa73 	bl	800ef8c <f_mount>

			if (!POWER_STATE) {
 8000aa6:	4b22      	ldr	r3, [pc, #136]	; (8000b30 <main+0x554>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d106      	bne.n	8000abc <main+0x4e0>
				state = POWER_OFF;
 8000aae:	230c      	movs	r3, #12
 8000ab0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
#ifdef VERBOSE_DEBUGGING
				printf("Turning off!\r\n");
 8000ab4:	481f      	ldr	r0, [pc, #124]	; (8000b34 <main+0x558>)
 8000ab6:	f010 f88b 	bl	8010bd0 <puts>
#endif
			}
			else {
				state = TURN_ON; // button was pressed
			}
			break;
 8000aba:	e01d      	b.n	8000af8 <main+0x51c>
				state = TURN_ON; // button was pressed
 8000abc:	2300      	movs	r3, #0
 8000abe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
			break;
 8000ac2:	e019      	b.n	8000af8 <main+0x51c>
		 * Transition out:
		 *	If power switch is in the on position -> TURN_ON
		 *	Else -> POWER_OFF
		 */
		case POWER_OFF:
			if (POWER_STATE) {
 8000ac4:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <main+0x554>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d014      	beq.n	8000af6 <main+0x51a>
				state = TURN_ON;
 8000acc:	2300      	movs	r3, #0
 8000ace:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

#ifdef VERBOSE_DEBUGGING
				printf("\r\nTurning back on!\r\n");
 8000ad2:	4819      	ldr	r0, [pc, #100]	; (8000b38 <main+0x55c>)
 8000ad4:	f010 f87c 	bl	8010bd0 <puts>
#endif
			}
			break;
 8000ad8:	e00d      	b.n	8000af6 <main+0x51a>

		default:
			HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin,
 8000ada:	2200      	movs	r2, #0
 8000adc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ae0:	4810      	ldr	r0, [pc, #64]	; (8000b24 <main+0x548>)
 8000ae2:	f002 fd17 	bl	8003514 <HAL_GPIO_WritePin>
								GPIO_PIN_RESET); // Red LED

#ifdef VERBOSE_DEBUGGING
			printf("CAN logger in unknown state!\r\n");
 8000ae6:	4815      	ldr	r0, [pc, #84]	; (8000b3c <main+0x560>)
 8000ae8:	f010 f872 	bl	8010bd0 <puts>
#endif
			break;
 8000aec:	e004      	b.n	8000af8 <main+0x51c>
			break;
 8000aee:	bf00      	nop
 8000af0:	e597      	b.n	8000622 <main+0x46>
			break;
 8000af2:	bf00      	nop
 8000af4:	e595      	b.n	8000622 <main+0x46>
			break;
 8000af6:	bf00      	nop
		switch (state) {
 8000af8:	e593      	b.n	8000622 <main+0x46>
 8000afa:	bf00      	nop
 8000afc:	200024fa 	.word	0x200024fa
 8000b00:	200004ec 	.word	0x200004ec
 8000b04:	20002750 	.word	0x20002750
 8000b08:	08011cec 	.word	0x08011cec
 8000b0c:	08011d00 	.word	0x08011d00
 8000b10:	08011d14 	.word	0x08011d14
 8000b14:	08011d2c 	.word	0x08011d2c
 8000b18:	200024f8 	.word	0x200024f8
 8000b1c:	200024fb 	.word	0x200024fb
 8000b20:	20000188 	.word	0x20000188
 8000b24:	40021400 	.word	0x40021400
 8000b28:	08011d48 	.word	0x08011d48
 8000b2c:	08011d5c 	.word	0x08011d5c
 8000b30:	200004e8 	.word	0x200004e8
 8000b34:	08011d74 	.word	0x08011d74
 8000b38:	08011d84 	.word	0x08011d84
 8000b3c:	08011d98 	.word	0x08011d98

08000b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b094      	sub	sp, #80	; 0x50
 8000b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	2234      	movs	r2, #52	; 0x34
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f010 f855 	bl	8010bfe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b54:	f107 0308 	add.w	r3, r7, #8
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b64:	4b28      	ldr	r3, [pc, #160]	; (8000c08 <SystemClock_Config+0xc8>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	4a27      	ldr	r2, [pc, #156]	; (8000c08 <SystemClock_Config+0xc8>)
 8000b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b70:	4b25      	ldr	r3, [pc, #148]	; (8000c08 <SystemClock_Config+0xc8>)
 8000b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b7c:	4b23      	ldr	r3, [pc, #140]	; (8000c0c <SystemClock_Config+0xcc>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b84:	4a21      	ldr	r2, [pc, #132]	; (8000c0c <SystemClock_Config+0xcc>)
 8000b86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b8a:	6013      	str	r3, [r2, #0]
 8000b8c:	4b1f      	ldr	r3, [pc, #124]	; (8000c0c <SystemClock_Config+0xcc>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b94:	603b      	str	r3, [r7, #0]
 8000b96:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ba0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ba6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000baa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bac:	2304      	movs	r3, #4
 8000bae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000bb0:	2360      	movs	r3, #96	; 0x60
 8000bb2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000bb4:	2304      	movs	r3, #4
 8000bb6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bb8:	2304      	movs	r3, #4
 8000bba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f004 fd19 	bl	80055fc <HAL_RCC_OscConfig>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bd0:	f000 fb04 	bl	80011dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd4:	230f      	movs	r3, #15
 8000bd6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000be0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bea:	f107 0308 	add.w	r3, r7, #8
 8000bee:	2101      	movs	r1, #1
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f004 ffb1 	bl	8005b58 <HAL_RCC_ClockConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000bfc:	f000 faee 	bl	80011dc <Error_Handler>
  }
}
 8000c00:	bf00      	nop
 8000c02:	3750      	adds	r7, #80	; 0x50
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40007000 	.word	0x40007000

08000c10 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000c14:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <MX_CAN1_Init+0x64>)
 8000c16:	4a18      	ldr	r2, [pc, #96]	; (8000c78 <MX_CAN1_Init+0x68>)
 8000c18:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000c1a:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <MX_CAN1_Init+0x64>)
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <MX_CAN1_Init+0x64>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <MX_CAN1_Init+0x64>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_CAN1_Init+0x64>)
 8000c2e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000c32:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <MX_CAN1_Init+0x64>)
 8000c36:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000c3a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000c3c:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <MX_CAN1_Init+0x64>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <MX_CAN1_Init+0x64>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000c48:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <MX_CAN1_Init+0x64>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <MX_CAN1_Init+0x64>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000c54:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <MX_CAN1_Init+0x64>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <MX_CAN1_Init+0x64>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000c60:	4804      	ldr	r0, [pc, #16]	; (8000c74 <MX_CAN1_Init+0x64>)
 8000c62:	f000 ffd7 	bl	8001c14 <HAL_CAN_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000c6c:	f000 fab6 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000188 	.word	0x20000188
 8000c78:	40006400 	.word	0x40006400

08000c7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c80:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <MX_I2C1_Init+0x74>)
 8000c82:	4a1c      	ldr	r2, [pc, #112]	; (8000cf4 <MX_I2C1_Init+0x78>)
 8000c84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 8000c86:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <MX_I2C1_Init+0x74>)
 8000c88:	4a1b      	ldr	r2, [pc, #108]	; (8000cf8 <MX_I2C1_Init+0x7c>)
 8000c8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c8c:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <MX_I2C1_Init+0x74>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c92:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <MX_I2C1_Init+0x74>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c98:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <MX_I2C1_Init+0x74>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c9e:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <MX_I2C1_Init+0x74>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <MX_I2C1_Init+0x74>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <MX_I2C1_Init+0x74>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <MX_I2C1_Init+0x74>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cb6:	480e      	ldr	r0, [pc, #56]	; (8000cf0 <MX_I2C1_Init+0x74>)
 8000cb8:	f002 fc6a 	bl	8003590 <HAL_I2C_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cc2:	f000 fa8b 	bl	80011dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4809      	ldr	r0, [pc, #36]	; (8000cf0 <MX_I2C1_Init+0x74>)
 8000cca:	f003 f947 	bl	8003f5c <HAL_I2CEx_ConfigAnalogFilter>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cd4:	f000 fa82 	bl	80011dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <MX_I2C1_Init+0x74>)
 8000cdc:	f003 f989 	bl	8003ff2 <HAL_I2CEx_ConfigDigitalFilter>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ce6:	f000 fa79 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200001b0 	.word	0x200001b0
 8000cf4:	40005400 	.word	0x40005400
 8000cf8:	00506682 	.word	0x00506682

08000cfc <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000d00:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <MX_SDMMC1_SD_Init+0x44>)
 8000d02:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <MX_SDMMC1_SD_Init+0x48>)
 8000d04:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <MX_SDMMC1_SD_Init+0x44>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <MX_SDMMC1_SD_Init+0x44>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <MX_SDMMC1_SD_Init+0x44>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000d18:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <MX_SDMMC1_SD_Init+0x44>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8000d1e:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <MX_SDMMC1_SD_Init+0x44>)
 8000d20:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d24:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <MX_SDMMC1_SD_Init+0x44>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
	if (HAL_SD_Init(&hsd1) != HAL_OK) {
 8000d2c:	4804      	ldr	r0, [pc, #16]	; (8000d40 <MX_SDMMC1_SD_Init+0x44>)
 8000d2e:	f005 fd61 	bl	80067f4 <HAL_SD_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_SDMMC1_SD_Init+0x40>
		Error_Handler();
 8000d38:	f000 fa50 	bl	80011dc <Error_Handler>
	}
  /* USER CODE END SDMMC1_Init 2 */

}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000204 	.word	0x20000204
 8000d44:	40012c00 	.word	0x40012c00

08000d48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d4c:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <MX_USART3_UART_Init+0x58>)
 8000d4e:	4a15      	ldr	r2, [pc, #84]	; (8000da4 <MX_USART3_UART_Init+0x5c>)
 8000d50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d52:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <MX_USART3_UART_Init+0x58>)
 8000d54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <MX_USART3_UART_Init+0x58>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d60:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <MX_USART3_UART_Init+0x58>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <MX_USART3_UART_Init+0x58>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <MX_USART3_UART_Init+0x58>)
 8000d6e:	220c      	movs	r2, #12
 8000d70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <MX_USART3_UART_Init+0x58>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d78:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <MX_USART3_UART_Init+0x58>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d7e:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <MX_USART3_UART_Init+0x58>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <MX_USART3_UART_Init+0x58>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d8a:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_USART3_UART_Init+0x58>)
 8000d8c:	f006 fe5a 	bl	8007a44 <HAL_UART_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d96:	f000 fa21 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000348 	.word	0x20000348
 8000da4:	40004800 	.word	0x40004800

08000da8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000dae:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <MX_DMA_Init+0x48>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a0f      	ldr	r2, [pc, #60]	; (8000df0 <MX_DMA_Init+0x48>)
 8000db4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <MX_DMA_Init+0x48>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2100      	movs	r1, #0
 8000dca:	203b      	movs	r0, #59	; 0x3b
 8000dcc:	f001 fe01 	bl	80029d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000dd0:	203b      	movs	r0, #59	; 0x3b
 8000dd2:	f001 fe1a 	bl	8002a0a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2045      	movs	r0, #69	; 0x45
 8000ddc:	f001 fdf9 	bl	80029d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000de0:	2045      	movs	r0, #69	; 0x45
 8000de2:	f001 fe12 	bl	8002a0a <HAL_NVIC_EnableIRQ>

}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40023800 	.word	0x40023800

08000df4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08e      	sub	sp, #56	; 0x38
 8000df8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
 8000e08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0a:	4b73      	ldr	r3, [pc, #460]	; (8000fd8 <MX_GPIO_Init+0x1e4>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a72      	ldr	r2, [pc, #456]	; (8000fd8 <MX_GPIO_Init+0x1e4>)
 8000e10:	f043 0304 	orr.w	r3, r3, #4
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b70      	ldr	r3, [pc, #448]	; (8000fd8 <MX_GPIO_Init+0x1e4>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0304 	and.w	r3, r3, #4
 8000e1e:	623b      	str	r3, [r7, #32]
 8000e20:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e22:	4b6d      	ldr	r3, [pc, #436]	; (8000fd8 <MX_GPIO_Init+0x1e4>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a6c      	ldr	r2, [pc, #432]	; (8000fd8 <MX_GPIO_Init+0x1e4>)
 8000e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b6a      	ldr	r3, [pc, #424]	; (8000fd8 <MX_GPIO_Init+0x1e4>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e36:	61fb      	str	r3, [r7, #28]
 8000e38:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e3a:	4b67      	ldr	r3, [pc, #412]	; (8000fd8 <MX_GPIO_Init+0x1e4>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a66      	ldr	r2, [pc, #408]	; (8000fd8 <MX_GPIO_Init+0x1e4>)
 8000e40:	f043 0320 	orr.w	r3, r3, #32
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b64      	ldr	r3, [pc, #400]	; (8000fd8 <MX_GPIO_Init+0x1e4>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0320 	and.w	r3, r3, #32
 8000e4e:	61bb      	str	r3, [r7, #24]
 8000e50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e52:	4b61      	ldr	r3, [pc, #388]	; (8000fd8 <MX_GPIO_Init+0x1e4>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a60      	ldr	r2, [pc, #384]	; (8000fd8 <MX_GPIO_Init+0x1e4>)
 8000e58:	f043 0310 	orr.w	r3, r3, #16
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b5e      	ldr	r3, [pc, #376]	; (8000fd8 <MX_GPIO_Init+0x1e4>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0310 	and.w	r3, r3, #16
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6a:	4b5b      	ldr	r3, [pc, #364]	; (8000fd8 <MX_GPIO_Init+0x1e4>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a5a      	ldr	r2, [pc, #360]	; (8000fd8 <MX_GPIO_Init+0x1e4>)
 8000e70:	f043 0308 	orr.w	r3, r3, #8
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b58      	ldr	r3, [pc, #352]	; (8000fd8 <MX_GPIO_Init+0x1e4>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0308 	and.w	r3, r3, #8
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e82:	4b55      	ldr	r3, [pc, #340]	; (8000fd8 <MX_GPIO_Init+0x1e4>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a54      	ldr	r2, [pc, #336]	; (8000fd8 <MX_GPIO_Init+0x1e4>)
 8000e88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b52      	ldr	r3, [pc, #328]	; (8000fd8 <MX_GPIO_Init+0x1e4>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	4b4f      	ldr	r3, [pc, #316]	; (8000fd8 <MX_GPIO_Init+0x1e4>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a4e      	ldr	r2, [pc, #312]	; (8000fd8 <MX_GPIO_Init+0x1e4>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b4c      	ldr	r3, [pc, #304]	; (8000fd8 <MX_GPIO_Init+0x1e4>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb2:	4b49      	ldr	r3, [pc, #292]	; (8000fd8 <MX_GPIO_Init+0x1e4>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a48      	ldr	r2, [pc, #288]	; (8000fd8 <MX_GPIO_Init+0x1e4>)
 8000eb8:	f043 0302 	orr.w	r3, r3, #2
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b46      	ldr	r3, [pc, #280]	; (8000fd8 <MX_GPIO_Init+0x1e4>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ed0:	4842      	ldr	r0, [pc, #264]	; (8000fdc <MX_GPIO_Init+0x1e8>)
 8000ed2:	f002 fb1f 	bl	8003514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2140      	movs	r1, #64	; 0x40
 8000eda:	4841      	ldr	r0, [pc, #260]	; (8000fe0 <MX_GPIO_Init+0x1ec>)
 8000edc:	f002 fb1a 	bl	8003514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2180      	movs	r1, #128	; 0x80
 8000ee4:	483f      	ldr	r0, [pc, #252]	; (8000fe4 <MX_GPIO_Init+0x1f0>)
 8000ee6:	f002 fb15 	bl	8003514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Error_LED_Pin */
  GPIO_InitStruct.Pin = Error_LED_Pin;
 8000eea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Error_LED_GPIO_Port, &GPIO_InitStruct);
 8000efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f00:	4619      	mov	r1, r3
 8000f02:	4836      	ldr	r0, [pc, #216]	; (8000fdc <MX_GPIO_Init+0x1e8>)
 8000f04:	f002 f942 	bl	800318c <HAL_GPIO_Init>

  /*Configure GPIO pin : NewLogBtn_Pin */
  GPIO_InitStruct.Pin = NewLogBtn_Pin;
 8000f08:	2380      	movs	r3, #128	; 0x80
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f0c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NewLogBtn_GPIO_Port, &GPIO_InitStruct);
 8000f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4832      	ldr	r0, [pc, #200]	; (8000fe8 <MX_GPIO_Init+0x1f4>)
 8000f1e:	f002 f935 	bl	800318c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000f34:	2306      	movs	r3, #6
 8000f36:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	482a      	ldr	r0, [pc, #168]	; (8000fe8 <MX_GPIO_Init+0x1f4>)
 8000f40:	f002 f924 	bl	800318c <HAL_GPIO_Init>

  /*Configure GPIO pin : PowerSwitch_Pin */
  GPIO_InitStruct.Pin = PowerSwitch_Pin;
 8000f44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f4a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PowerSwitch_GPIO_Port, &GPIO_InitStruct);
 8000f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4823      	ldr	r0, [pc, #140]	; (8000fe8 <MX_GPIO_Init+0x1f4>)
 8000f5c:	f002 f916 	bl	800318c <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CD_Pin USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = SD_CD_Pin|USB_OverCurrent_Pin;
 8000f60:	2384      	movs	r3, #132	; 0x84
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f64:	2300      	movs	r3, #0
 8000f66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f70:	4619      	mov	r1, r3
 8000f72:	481b      	ldr	r0, [pc, #108]	; (8000fe0 <MX_GPIO_Init+0x1ec>)
 8000f74:	f002 f90a 	bl	800318c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f78:	2340      	movs	r3, #64	; 0x40
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f84:	2300      	movs	r3, #0
 8000f86:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4814      	ldr	r0, [pc, #80]	; (8000fe0 <MX_GPIO_Init+0x1ec>)
 8000f90:	f002 f8fc 	bl	800318c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f94:	2380      	movs	r3, #128	; 0x80
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa8:	4619      	mov	r1, r3
 8000faa:	480e      	ldr	r0, [pc, #56]	; (8000fe4 <MX_GPIO_Init+0x1f0>)
 8000fac:	f002 f8ee 	bl	800318c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	2017      	movs	r0, #23
 8000fb6:	f001 fd0c 	bl	80029d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000fba:	2017      	movs	r0, #23
 8000fbc:	f001 fd25 	bl	8002a0a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	2028      	movs	r0, #40	; 0x28
 8000fc6:	f001 fd04 	bl	80029d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fca:	2028      	movs	r0, #40	; 0x28
 8000fcc:	f001 fd1d 	bl	8002a0a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fd0:	bf00      	nop
 8000fd2:	3738      	adds	r7, #56	; 0x38
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40021400 	.word	0x40021400
 8000fe0:	40021800 	.word	0x40021800
 8000fe4:	40020400 	.word	0x40020400
 8000fe8:	40021000 	.word	0x40021000

08000fec <Get_and_Append_CAN_Message_to_Buffer>:

/* USER CODE BEGIN 4 */
void Get_and_Append_CAN_Message_to_Buffer() {
 8000fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fee:	b09d      	sub	sp, #116	; 0x74
 8000ff0:	af06      	add	r7, sp, #24
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rcvd_msg[8];

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_msg)
 8000ff2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ff6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4833      	ldr	r0, [pc, #204]	; (80010cc <Get_and_Append_CAN_Message_to_Buffer+0xe0>)
 8000ffe:	f001 f87e 	bl	80020fe <HAL_CAN_GetRxMessage>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d004      	beq.n	8001012 <Get_and_Append_CAN_Message_to_Buffer+0x26>
			!= HAL_OK){
#ifdef VERBOSE_DEBUGGING
		printf("Failed to get CAN message\r\n");
 8001008:	4831      	ldr	r0, [pc, #196]	; (80010d0 <Get_and_Append_CAN_Message_to_Buffer+0xe4>)
 800100a:	f00f fde1 	bl	8010bd0 <puts>
#endif
		Error_Handler();
 800100e:	f000 f8e5 	bl	80011dc <Error_Handler>
	}

	uint16_t data1 = (rcvd_msg[0] << 8) + rcvd_msg[1];
 8001012:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001016:	b29b      	uxth	r3, r3
 8001018:	021b      	lsls	r3, r3, #8
 800101a:	b29a      	uxth	r2, r3
 800101c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001020:	b29b      	uxth	r3, r3
 8001022:	4413      	add	r3, r2
 8001024:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	uint16_t data2 = (rcvd_msg[2] << 8) + rcvd_msg[3];
 8001028:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800102c:	b29b      	uxth	r3, r3
 800102e:	021b      	lsls	r3, r3, #8
 8001030:	b29a      	uxth	r2, r3
 8001032:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001036:	b29b      	uxth	r3, r3
 8001038:	4413      	add	r3, r2
 800103a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	uint16_t data3 = (rcvd_msg[4] << 8) + rcvd_msg[5];
 800103e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001042:	b29b      	uxth	r3, r3
 8001044:	021b      	lsls	r3, r3, #8
 8001046:	b29a      	uxth	r2, r3
 8001048:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800104c:	b29b      	uxth	r3, r3
 800104e:	4413      	add	r3, r2
 8001050:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	uint16_t data4 = (rcvd_msg[6] << 8) + rcvd_msg[7];
 8001054:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001058:	b29b      	uxth	r3, r3
 800105a:	021b      	lsls	r3, r3, #8
 800105c:	b29a      	uxth	r2, r3
 800105e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001062:	b29b      	uxth	r3, r3
 8001064:	4413      	add	r3, r2
 8001066:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	char encodedData[ENCODED_CAN_SIZE_BYTES];

	// consider writing raw bytes
	snprintf(encodedData, ENCODED_CAN_SIZE_BYTES + 1,
 800106a:	f000 fda3 	bl	8001bb4 <HAL_GetTick>
 800106e:	4606      	mov	r6, r0
 8001070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001072:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8001076:	f8b7 1054 	ldrh.w	r1, [r7, #84]	; 0x54
 800107a:	f8b7 0052 	ldrh.w	r0, [r7, #82]	; 0x52
 800107e:	f8b7 4050 	ldrh.w	r4, [r7, #80]	; 0x50
 8001082:	463d      	mov	r5, r7
 8001084:	9404      	str	r4, [sp, #16]
 8001086:	9003      	str	r0, [sp, #12]
 8001088:	9102      	str	r1, [sp, #8]
 800108a:	9201      	str	r2, [sp, #4]
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	4633      	mov	r3, r6
 8001090:	4a10      	ldr	r2, [pc, #64]	; (80010d4 <Get_and_Append_CAN_Message_to_Buffer+0xe8>)
 8001092:	212a      	movs	r1, #42	; 0x2a
 8001094:	4628      	mov	r0, r5
 8001096:	f00f fc33 	bl	8010900 <sniprintf>
			"(%010ld) X %08lX#%04X%04X%04X%04X\n", HAL_GetTick(),
			RxHeader.ExtId, data1, data2, data3, data4);

	strcat(current_buffer ? data_buffer[1] : data_buffer[0], encodedData);
 800109a:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <Get_and_Append_CAN_Message_to_Buffer+0xec>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <Get_and_Append_CAN_Message_to_Buffer+0xba>
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <Get_and_Append_CAN_Message_to_Buffer+0xf0>)
 80010a4:	e000      	b.n	80010a8 <Get_and_Append_CAN_Message_to_Buffer+0xbc>
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <Get_and_Append_CAN_Message_to_Buffer+0xf4>)
 80010a8:	463a      	mov	r2, r7
 80010aa:	4611      	mov	r1, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f00f fd97 	bl	8010be0 <strcat>
	buffer_fill_level[current_buffer]++;
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <Get_and_Append_CAN_Message_to_Buffer+0xec>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	4a0b      	ldr	r2, [pc, #44]	; (80010e4 <Get_and_Append_CAN_Message_to_Buffer+0xf8>)
 80010b8:	5cd2      	ldrb	r2, [r2, r3]
 80010ba:	3201      	adds	r2, #1
 80010bc:	b2d1      	uxtb	r1, r2
 80010be:	4a09      	ldr	r2, [pc, #36]	; (80010e4 <Get_and_Append_CAN_Message_to_Buffer+0xf8>)
 80010c0:	54d1      	strb	r1, [r2, r3]
}
 80010c2:	bf00      	nop
 80010c4:	375c      	adds	r7, #92	; 0x5c
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000188 	.word	0x20000188
 80010d0:	08011db8 	.word	0x08011db8
 80010d4:	08011dd4 	.word	0x08011dd4
 80010d8:	200024fa 	.word	0x200024fa
 80010dc:	200014f1 	.word	0x200014f1
 80010e0:	200004ec 	.word	0x200004ec
 80010e4:	200024f8 	.word	0x200024f8

080010e8 <CAN_Filter_Config>:

HAL_StatusTypeDef CAN_Filter_Config(void) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08c      	sub	sp, #48	; 0x30
 80010ec:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filter;

	uint32_t filter_mask = 0x00000000;
 80010ee:	2300      	movs	r3, #0
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t filter_id = 0x000A0000;
 80010f2:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28

	filter.FilterIdHigh = ((filter_id << 5) | (filter_id >> (32 - 5))) & 0xFFFF; // STID[10:0] & EXTID[17:13]
 80010f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010fa:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80010fe:	b29b      	uxth	r3, r3
 8001100:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = (filter_id >> (11 - 3)) & 0xFFF8; // EXID[12:5] & 3 Reserved bits
 8001102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001104:	0a1a      	lsrs	r2, r3, #8
 8001106:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800110a:	4013      	ands	r3, r2
 800110c:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = ((filter_mask << 5) | (filter_mask >> (32 - 5)))
 800110e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001110:	ea4f 63f3 	mov.w	r3, r3, ror #27
			& 0xFFFF;
 8001114:	b29b      	uxth	r3, r3
	filter.FilterMaskIdHigh = ((filter_mask << 5) | (filter_mask >> (32 - 5)))
 8001116:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = (filter_mask >> (11 - 3)) & 0xFFF8;
 8001118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800111a:	0a1a      	lsrs	r2, r3, #8
 800111c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001120:	4013      	ands	r3, r2
 8001122:	60fb      	str	r3, [r7, #12]

	filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
	filter.FilterBank = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 800112c:	2300      	movs	r3, #0
 800112e:	61bb      	str	r3, [r7, #24]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001130:	2301      	movs	r3, #1
 8001132:	61fb      	str	r3, [r7, #28]
	filter.FilterActivation = ENABLE;
 8001134:	2301      	movs	r3, #1
 8001136:	623b      	str	r3, [r7, #32]

	return HAL_CAN_ConfigFilter(&hcan1, &filter);
 8001138:	463b      	mov	r3, r7
 800113a:	4619      	mov	r1, r3
 800113c:	4803      	ldr	r0, [pc, #12]	; (800114c <CAN_Filter_Config+0x64>)
 800113e:	f000 fe65 	bl	8001e0c <HAL_CAN_ConfigFilter>
 8001142:	4603      	mov	r3, r0
}
 8001144:	4618      	mov	r0, r3
 8001146:	3730      	adds	r7, #48	; 0x30
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000188 	.word	0x20000188

08001150 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	if (buffer_fill_level[0] == CAN_MESSAGES_TO_BUFFER
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b64      	cmp	r3, #100	; 0x64
 800115e:	d108      	bne.n	8001172 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
			&& buffer_fill_level[1] == CAN_MESSAGES_TO_BUFFER)
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8001162:	785b      	ldrb	r3, [r3, #1]
 8001164:	2b64      	cmp	r3, #100	; 0x64
 8001166:	d104      	bne.n	8001172 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
#ifdef VERBOSE_DEBUGGING
		printf("Buffers are full\r\n");
 8001168:	4810      	ldr	r0, [pc, #64]	; (80011ac <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 800116a:	f00f fd31 	bl	8010bd0 <puts>
#endif
		Error_Handler();
 800116e:	f000 f835 	bl	80011dc <Error_Handler>
	}

	Get_and_Append_CAN_Message_to_Buffer();
 8001172:	f7ff ff3b 	bl	8000fec <Get_and_Append_CAN_Message_to_Buffer>

	if (buffer_fill_level[current_buffer] == CAN_MESSAGES_TO_BUFFER) {
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 800117e:	5c9b      	ldrb	r3, [r3, r2]
 8001180:	2b64      	cmp	r3, #100	; 0x64
 8001182:	d10c      	bne.n	800119e <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
		is_buffer_filled = 1;
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8001186:	2201      	movs	r2, #1
 8001188:	701a      	strb	r2, [r3, #0]
		current_buffer = !current_buffer;
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	bf0c      	ite	eq
 8001192:	2301      	moveq	r3, #1
 8001194:	2300      	movne	r3, #0
 8001196:	b2db      	uxtb	r3, r3
 8001198:	461a      	mov	r2, r3
 800119a:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 800119c:	701a      	strb	r2, [r3, #0]
	}
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200024f8 	.word	0x200024f8
 80011ac:	08011df8 	.word	0x08011df8
 80011b0:	200024fa 	.word	0x200024fa
 80011b4:	200024fb 	.word	0x200024fb

080011b8 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 80011c0:	1d39      	adds	r1, r7, #4
 80011c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011c6:	2201      	movs	r2, #1
 80011c8:	4803      	ldr	r0, [pc, #12]	; (80011d8 <__io_putchar+0x20>)
 80011ca:	f006 fc89 	bl	8007ae0 <HAL_UART_Transmit>

	return ch;
 80011ce:	687b      	ldr	r3, [r7, #4]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000348 	.word	0x20000348

080011dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e0:	b672      	cpsid	i
}
 80011e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
#ifdef VERBOSE_DEBUGGING
	printf("\r\nError Handler Reached\r\n");
 80011e4:	4804      	ldr	r0, [pc, #16]	; (80011f8 <Error_Handler+0x1c>)
 80011e6:	f00f fcf3 	bl	8010bd0 <puts>
#endif
	HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011f0:	4802      	ldr	r0, [pc, #8]	; (80011fc <Error_Handler+0x20>)
 80011f2:	f002 f98f 	bl	8003514 <HAL_GPIO_WritePin>

	while (1) {
 80011f6:	e7fe      	b.n	80011f6 <Error_Handler+0x1a>
 80011f8:	08011e0c 	.word	0x08011e0c
 80011fc:	40021400 	.word	0x40021400

08001200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001206:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <HAL_MspInit+0x44>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	4a0e      	ldr	r2, [pc, #56]	; (8001244 <HAL_MspInit+0x44>)
 800120c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001210:	6413      	str	r3, [r2, #64]	; 0x40
 8001212:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <HAL_MspInit+0x44>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <HAL_MspInit+0x44>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001222:	4a08      	ldr	r2, [pc, #32]	; (8001244 <HAL_MspInit+0x44>)
 8001224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001228:	6453      	str	r3, [r2, #68]	; 0x44
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_MspInit+0x44>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800

08001248 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	; 0x28
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a1b      	ldr	r2, [pc, #108]	; (80012d4 <HAL_CAN_MspInit+0x8c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d12f      	bne.n	80012ca <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800126a:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <HAL_CAN_MspInit+0x90>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	4a1a      	ldr	r2, [pc, #104]	; (80012d8 <HAL_CAN_MspInit+0x90>)
 8001270:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001274:	6413      	str	r3, [r2, #64]	; 0x40
 8001276:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <HAL_CAN_MspInit+0x90>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <HAL_CAN_MspInit+0x90>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a14      	ldr	r2, [pc, #80]	; (80012d8 <HAL_CAN_MspInit+0x90>)
 8001288:	f043 0308 	orr.w	r3, r3, #8
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <HAL_CAN_MspInit+0x90>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0308 	and.w	r3, r3, #8
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800129a:	2303      	movs	r3, #3
 800129c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a6:	2303      	movs	r3, #3
 80012a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80012aa:	2309      	movs	r3, #9
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	4619      	mov	r1, r3
 80012b4:	4809      	ldr	r0, [pc, #36]	; (80012dc <HAL_CAN_MspInit+0x94>)
 80012b6:	f001 ff69 	bl	800318c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2100      	movs	r1, #0
 80012be:	2014      	movs	r0, #20
 80012c0:	f001 fb87 	bl	80029d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80012c4:	2014      	movs	r0, #20
 80012c6:	f001 fba0 	bl	8002a0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80012ca:	bf00      	nop
 80012cc:	3728      	adds	r7, #40	; 0x28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40006400 	.word	0x40006400
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020c00 	.word	0x40020c00

080012e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b0ae      	sub	sp, #184	; 0xb8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	2290      	movs	r2, #144	; 0x90
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f00f fc7c 	bl	8010bfe <memset>
  if(hi2c->Instance==I2C1)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a22      	ldr	r2, [pc, #136]	; (8001394 <HAL_I2C_MspInit+0xb4>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d13c      	bne.n	800138a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001310:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001314:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001316:	2300      	movs	r3, #0
 8001318:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4618      	mov	r0, r3
 8001320:	f004 fe40 	bl	8005fa4 <HAL_RCCEx_PeriphCLKConfig>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800132a:	f7ff ff57 	bl	80011dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <HAL_I2C_MspInit+0xb8>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a19      	ldr	r2, [pc, #100]	; (8001398 <HAL_I2C_MspInit+0xb8>)
 8001334:	f043 0302 	orr.w	r3, r3, #2
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b17      	ldr	r3, [pc, #92]	; (8001398 <HAL_I2C_MspInit+0xb8>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001346:	f44f 7340 	mov.w	r3, #768	; 0x300
 800134a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800134e:	2312      	movs	r3, #18
 8001350:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001360:	2304      	movs	r3, #4
 8001362:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001366:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800136a:	4619      	mov	r1, r3
 800136c:	480b      	ldr	r0, [pc, #44]	; (800139c <HAL_I2C_MspInit+0xbc>)
 800136e:	f001 ff0d 	bl	800318c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <HAL_I2C_MspInit+0xb8>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	4a08      	ldr	r2, [pc, #32]	; (8001398 <HAL_I2C_MspInit+0xb8>)
 8001378:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800137c:	6413      	str	r3, [r2, #64]	; 0x40
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_I2C_MspInit+0xb8>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800138a:	bf00      	nop
 800138c:	37b8      	adds	r7, #184	; 0xb8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40005400 	.word	0x40005400
 8001398:	40023800 	.word	0x40023800
 800139c:	40020400 	.word	0x40020400

080013a0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b0ae      	sub	sp, #184	; 0xb8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	2290      	movs	r2, #144	; 0x90
 80013be:	2100      	movs	r1, #0
 80013c0:	4618      	mov	r0, r3
 80013c2:	f00f fc1c 	bl	8010bfe <memset>
  if(hsd->Instance==SDMMC1)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a73      	ldr	r2, [pc, #460]	; (8001598 <HAL_SD_MspInit+0x1f8>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	f040 80de 	bne.w	800158e <HAL_SD_MspInit+0x1ee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80013d2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80013d6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 80013d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80013dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	4618      	mov	r0, r3
 80013e6:	f004 fddd 	bl	8005fa4 <HAL_RCCEx_PeriphCLKConfig>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80013f0:	f7ff fef4 	bl	80011dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80013f4:	4b69      	ldr	r3, [pc, #420]	; (800159c <HAL_SD_MspInit+0x1fc>)
 80013f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f8:	4a68      	ldr	r2, [pc, #416]	; (800159c <HAL_SD_MspInit+0x1fc>)
 80013fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013fe:	6453      	str	r3, [r2, #68]	; 0x44
 8001400:	4b66      	ldr	r3, [pc, #408]	; (800159c <HAL_SD_MspInit+0x1fc>)
 8001402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800140c:	4b63      	ldr	r3, [pc, #396]	; (800159c <HAL_SD_MspInit+0x1fc>)
 800140e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001410:	4a62      	ldr	r2, [pc, #392]	; (800159c <HAL_SD_MspInit+0x1fc>)
 8001412:	f043 0304 	orr.w	r3, r3, #4
 8001416:	6313      	str	r3, [r2, #48]	; 0x30
 8001418:	4b60      	ldr	r3, [pc, #384]	; (800159c <HAL_SD_MspInit+0x1fc>)
 800141a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001424:	4b5d      	ldr	r3, [pc, #372]	; (800159c <HAL_SD_MspInit+0x1fc>)
 8001426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001428:	4a5c      	ldr	r2, [pc, #368]	; (800159c <HAL_SD_MspInit+0x1fc>)
 800142a:	f043 0308 	orr.w	r3, r3, #8
 800142e:	6313      	str	r3, [r2, #48]	; 0x30
 8001430:	4b5a      	ldr	r3, [pc, #360]	; (800159c <HAL_SD_MspInit+0x1fc>)
 8001432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001434:	f003 0308 	and.w	r3, r3, #8
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800143c:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001440:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2302      	movs	r3, #2
 8001446:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001450:	2303      	movs	r3, #3
 8001452:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001456:	230c      	movs	r3, #12
 8001458:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800145c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001460:	4619      	mov	r1, r3
 8001462:	484f      	ldr	r0, [pc, #316]	; (80015a0 <HAL_SD_MspInit+0x200>)
 8001464:	f001 fe92 	bl	800318c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001468:	2304      	movs	r3, #4
 800146a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001480:	230c      	movs	r3, #12
 8001482:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001486:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800148a:	4619      	mov	r1, r3
 800148c:	4845      	ldr	r0, [pc, #276]	; (80015a4 <HAL_SD_MspInit+0x204>)
 800148e:	f001 fe7d 	bl	800318c <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8001492:	4b45      	ldr	r3, [pc, #276]	; (80015a8 <HAL_SD_MspInit+0x208>)
 8001494:	4a45      	ldr	r2, [pc, #276]	; (80015ac <HAL_SD_MspInit+0x20c>)
 8001496:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001498:	4b43      	ldr	r3, [pc, #268]	; (80015a8 <HAL_SD_MspInit+0x208>)
 800149a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800149e:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014a0:	4b41      	ldr	r3, [pc, #260]	; (80015a8 <HAL_SD_MspInit+0x208>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014a6:	4b40      	ldr	r3, [pc, #256]	; (80015a8 <HAL_SD_MspInit+0x208>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014ac:	4b3e      	ldr	r3, [pc, #248]	; (80015a8 <HAL_SD_MspInit+0x208>)
 80014ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014b2:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014b4:	4b3c      	ldr	r3, [pc, #240]	; (80015a8 <HAL_SD_MspInit+0x208>)
 80014b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014ba:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014bc:	4b3a      	ldr	r3, [pc, #232]	; (80015a8 <HAL_SD_MspInit+0x208>)
 80014be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014c2:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80014c4:	4b38      	ldr	r3, [pc, #224]	; (80015a8 <HAL_SD_MspInit+0x208>)
 80014c6:	2220      	movs	r2, #32
 80014c8:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014ca:	4b37      	ldr	r3, [pc, #220]	; (80015a8 <HAL_SD_MspInit+0x208>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80014d0:	4b35      	ldr	r3, [pc, #212]	; (80015a8 <HAL_SD_MspInit+0x208>)
 80014d2:	2204      	movs	r2, #4
 80014d4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80014d6:	4b34      	ldr	r3, [pc, #208]	; (80015a8 <HAL_SD_MspInit+0x208>)
 80014d8:	2203      	movs	r2, #3
 80014da:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80014dc:	4b32      	ldr	r3, [pc, #200]	; (80015a8 <HAL_SD_MspInit+0x208>)
 80014de:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80014e2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80014e4:	4b30      	ldr	r3, [pc, #192]	; (80015a8 <HAL_SD_MspInit+0x208>)
 80014e6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80014ea:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80014ec:	482e      	ldr	r0, [pc, #184]	; (80015a8 <HAL_SD_MspInit+0x208>)
 80014ee:	f001 faa7 	bl	8002a40 <HAL_DMA_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <HAL_SD_MspInit+0x15c>
    {
      Error_Handler();
 80014f8:	f7ff fe70 	bl	80011dc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a2a      	ldr	r2, [pc, #168]	; (80015a8 <HAL_SD_MspInit+0x208>)
 8001500:	641a      	str	r2, [r3, #64]	; 0x40
 8001502:	4a29      	ldr	r2, [pc, #164]	; (80015a8 <HAL_SD_MspInit+0x208>)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8001508:	4b29      	ldr	r3, [pc, #164]	; (80015b0 <HAL_SD_MspInit+0x210>)
 800150a:	4a2a      	ldr	r2, [pc, #168]	; (80015b4 <HAL_SD_MspInit+0x214>)
 800150c:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800150e:	4b28      	ldr	r3, [pc, #160]	; (80015b0 <HAL_SD_MspInit+0x210>)
 8001510:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001514:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001516:	4b26      	ldr	r3, [pc, #152]	; (80015b0 <HAL_SD_MspInit+0x210>)
 8001518:	2240      	movs	r2, #64	; 0x40
 800151a:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800151c:	4b24      	ldr	r3, [pc, #144]	; (80015b0 <HAL_SD_MspInit+0x210>)
 800151e:	2200      	movs	r2, #0
 8001520:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001522:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <HAL_SD_MspInit+0x210>)
 8001524:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001528:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800152a:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <HAL_SD_MspInit+0x210>)
 800152c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001530:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001532:	4b1f      	ldr	r3, [pc, #124]	; (80015b0 <HAL_SD_MspInit+0x210>)
 8001534:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001538:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 800153a:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <HAL_SD_MspInit+0x210>)
 800153c:	2220      	movs	r2, #32
 800153e:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001540:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <HAL_SD_MspInit+0x210>)
 8001542:	2200      	movs	r2, #0
 8001544:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001546:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <HAL_SD_MspInit+0x210>)
 8001548:	2204      	movs	r2, #4
 800154a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800154c:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <HAL_SD_MspInit+0x210>)
 800154e:	2203      	movs	r2, #3
 8001550:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001552:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <HAL_SD_MspInit+0x210>)
 8001554:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001558:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <HAL_SD_MspInit+0x210>)
 800155c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001560:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8001562:	4813      	ldr	r0, [pc, #76]	; (80015b0 <HAL_SD_MspInit+0x210>)
 8001564:	f001 fa6c 	bl	8002a40 <HAL_DMA_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <HAL_SD_MspInit+0x1d2>
    {
      Error_Handler();
 800156e:	f7ff fe35 	bl	80011dc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a0e      	ldr	r2, [pc, #56]	; (80015b0 <HAL_SD_MspInit+0x210>)
 8001576:	63da      	str	r2, [r3, #60]	; 0x3c
 8001578:	4a0d      	ldr	r2, [pc, #52]	; (80015b0 <HAL_SD_MspInit+0x210>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	2100      	movs	r1, #0
 8001582:	2031      	movs	r0, #49	; 0x31
 8001584:	f001 fa25 	bl	80029d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001588:	2031      	movs	r0, #49	; 0x31
 800158a:	f001 fa3e 	bl	8002a0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800158e:	bf00      	nop
 8001590:	37b8      	adds	r7, #184	; 0xb8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40012c00 	.word	0x40012c00
 800159c:	40023800 	.word	0x40023800
 80015a0:	40020800 	.word	0x40020800
 80015a4:	40020c00 	.word	0x40020c00
 80015a8:	20000288 	.word	0x20000288
 80015ac:	40026458 	.word	0x40026458
 80015b0:	200002e8 	.word	0x200002e8
 80015b4:	400264a0 	.word	0x400264a0

080015b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b0ae      	sub	sp, #184	; 0xb8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	2290      	movs	r2, #144	; 0x90
 80015d6:	2100      	movs	r1, #0
 80015d8:	4618      	mov	r0, r3
 80015da:	f00f fb10 	bl	8010bfe <memset>
  if(huart->Instance==USART3)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a22      	ldr	r2, [pc, #136]	; (800166c <HAL_UART_MspInit+0xb4>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d13c      	bne.n	8001662 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015ec:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015ee:	2300      	movs	r3, #0
 80015f0:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4618      	mov	r0, r3
 80015f8:	f004 fcd4 	bl	8005fa4 <HAL_RCCEx_PeriphCLKConfig>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001602:	f7ff fdeb 	bl	80011dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001606:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <HAL_UART_MspInit+0xb8>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	4a19      	ldr	r2, [pc, #100]	; (8001670 <HAL_UART_MspInit+0xb8>)
 800160c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001610:	6413      	str	r3, [r2, #64]	; 0x40
 8001612:	4b17      	ldr	r3, [pc, #92]	; (8001670 <HAL_UART_MspInit+0xb8>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800161e:	4b14      	ldr	r3, [pc, #80]	; (8001670 <HAL_UART_MspInit+0xb8>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a13      	ldr	r2, [pc, #76]	; (8001670 <HAL_UART_MspInit+0xb8>)
 8001624:	f043 0308 	orr.w	r3, r3, #8
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b11      	ldr	r3, [pc, #68]	; (8001670 <HAL_UART_MspInit+0xb8>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0308 	and.w	r3, r3, #8
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001636:	f44f 7340 	mov.w	r3, #768	; 0x300
 800163a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2302      	movs	r3, #2
 8001640:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164a:	2303      	movs	r3, #3
 800164c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001650:	2307      	movs	r3, #7
 8001652:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001656:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800165a:	4619      	mov	r1, r3
 800165c:	4805      	ldr	r0, [pc, #20]	; (8001674 <HAL_UART_MspInit+0xbc>)
 800165e:	f001 fd95 	bl	800318c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001662:	bf00      	nop
 8001664:	37b8      	adds	r7, #184	; 0xb8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40004800 	.word	0x40004800
 8001670:	40023800 	.word	0x40023800
 8001674:	40020c00 	.word	0x40020c00

08001678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800167c:	e7fe      	b.n	800167c <NMI_Handler+0x4>

0800167e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001682:	e7fe      	b.n	8001682 <HardFault_Handler+0x4>

08001684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001688:	e7fe      	b.n	8001688 <MemManage_Handler+0x4>

0800168a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800168e:	e7fe      	b.n	800168e <BusFault_Handler+0x4>

08001690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001694:	e7fe      	b.n	8001694 <UsageFault_Handler+0x4>

08001696 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016c4:	f000 fa62 	bl	8001b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}

080016cc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80016d0:	4802      	ldr	r0, [pc, #8]	; (80016dc <CAN1_RX0_IRQHandler+0x10>)
 80016d2:	f000 fe73 	bl	80023bc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000188 	.word	0x20000188

080016e0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	NEW_LOG_FLAG = 1;
 80016e4:	4b03      	ldr	r3, [pc, #12]	; (80016f4 <EXTI9_5_IRQHandler+0x14>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NewLogBtn_Pin);
 80016ea:	2080      	movs	r0, #128	; 0x80
 80016ec:	f001 ff2c 	bl	8003548 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	200004e9 	.word	0x200004e9

080016f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	// Debouncing?
//	HAL_Delay(100);
	POWER_STATE = HAL_GPIO_ReadPin(PowerSwitch_GPIO_Port, PowerSwitch_Pin);
 80016fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001700:	4806      	ldr	r0, [pc, #24]	; (800171c <EXTI15_10_IRQHandler+0x24>)
 8001702:	f001 feef 	bl	80034e4 <HAL_GPIO_ReadPin>
 8001706:	4603      	mov	r3, r0
 8001708:	461a      	mov	r2, r3
 800170a:	4b05      	ldr	r3, [pc, #20]	; (8001720 <EXTI15_10_IRQHandler+0x28>)
 800170c:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PowerSwitch_Pin);
 800170e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001712:	f001 ff19 	bl	8003548 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40021000 	.word	0x40021000
 8001720:	200004e8 	.word	0x200004e8

08001724 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <SDMMC1_IRQHandler+0x10>)
 800172a:	f005 fae3 	bl	8006cf4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000204 	.word	0x20000204

08001738 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 800173c:	4802      	ldr	r0, [pc, #8]	; (8001748 <DMA2_Stream3_IRQHandler+0x10>)
 800173e:	f001 faaf 	bl	8002ca0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000288 	.word	0x20000288

0800174c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001750:	4802      	ldr	r0, [pc, #8]	; (800175c <OTG_FS_IRQHandler+0x10>)
 8001752:	f002 fde0 	bl	8004316 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	2000409c 	.word	0x2000409c

08001760 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001764:	4802      	ldr	r0, [pc, #8]	; (8001770 <DMA2_Stream6_IRQHandler+0x10>)
 8001766:	f001 fa9b 	bl	8002ca0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	200002e8 	.word	0x200002e8

08001774 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	e00a      	b.n	800179c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001786:	f3af 8000 	nop.w
 800178a:	4601      	mov	r1, r0
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	60ba      	str	r2, [r7, #8]
 8001792:	b2ca      	uxtb	r2, r1
 8001794:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	3301      	adds	r3, #1
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	dbf0      	blt.n	8001786 <_read+0x12>
  }

  return len;
 80017a4:	687b      	ldr	r3, [r7, #4]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b086      	sub	sp, #24
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	60f8      	str	r0, [r7, #12]
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
 80017be:	e009      	b.n	80017d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	1c5a      	adds	r2, r3, #1
 80017c4:	60ba      	str	r2, [r7, #8]
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fcf5 	bl	80011b8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	3301      	adds	r3, #1
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	429a      	cmp	r2, r3
 80017da:	dbf1      	blt.n	80017c0 <_write+0x12>
  }
  return len;
 80017dc:	687b      	ldr	r3, [r7, #4]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <_close>:

int _close(int file)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800180e:	605a      	str	r2, [r3, #4]
  return 0;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <_isatty>:

int _isatty(int file)
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001826:	2301      	movs	r3, #1
}
 8001828:	4618      	mov	r0, r3
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
	...

08001850 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001858:	4a14      	ldr	r2, [pc, #80]	; (80018ac <_sbrk+0x5c>)
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <_sbrk+0x60>)
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001864:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <_sbrk+0x64>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d102      	bne.n	8001872 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <_sbrk+0x64>)
 800186e:	4a12      	ldr	r2, [pc, #72]	; (80018b8 <_sbrk+0x68>)
 8001870:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	429a      	cmp	r2, r3
 800187e:	d207      	bcs.n	8001890 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001880:	f00f f9d6 	bl	8010c30 <__errno>
 8001884:	4603      	mov	r3, r0
 8001886:	220c      	movs	r2, #12
 8001888:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800188e:	e009      	b.n	80018a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <_sbrk+0x64>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001896:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <_sbrk+0x64>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	4a05      	ldr	r2, [pc, #20]	; (80018b4 <_sbrk+0x64>)
 80018a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018a2:	68fb      	ldr	r3, [r7, #12]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20080000 	.word	0x20080000
 80018b0:	00000400 	.word	0x00000400
 80018b4:	20002508 	.word	0x20002508
 80018b8:	200046f0 	.word	0x200046f0

080018bc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <SystemInit+0x20>)
 80018c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018c6:	4a05      	ldr	r2, [pc, #20]	; (80018dc <SystemInit+0x20>)
 80018c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001918 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018e4:	480d      	ldr	r0, [pc, #52]	; (800191c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018e6:	490e      	ldr	r1, [pc, #56]	; (8001920 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018e8:	4a0e      	ldr	r2, [pc, #56]	; (8001924 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018ec:	e002      	b.n	80018f4 <LoopCopyDataInit>

080018ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018f2:	3304      	adds	r3, #4

080018f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f8:	d3f9      	bcc.n	80018ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018fa:	4a0b      	ldr	r2, [pc, #44]	; (8001928 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018fc:	4c0b      	ldr	r4, [pc, #44]	; (800192c <LoopFillZerobss+0x26>)
  movs r3, #0
 80018fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001900:	e001      	b.n	8001906 <LoopFillZerobss>

08001902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001904:	3204      	adds	r2, #4

08001906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001908:	d3fb      	bcc.n	8001902 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800190a:	f7ff ffd7 	bl	80018bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800190e:	f00f f995 	bl	8010c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001912:	f7fe fe63 	bl	80005dc <main>
  bx  lr    
 8001916:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001918:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800191c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001920:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8001924:	08012370 	.word	0x08012370
  ldr r2, =_sbss
 8001928:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 800192c:	200046f0 	.word	0x200046f0

08001930 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001930:	e7fe      	b.n	8001930 <ADC_IRQHandler>
	...

08001934 <DS1307_Init>:
	
/**
 * @brief Initializes the DS1307 module. Sets clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS1307_Init(I2C_HandleTypeDef *hi2c) {
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	_ds1307_ui2c = hi2c;
 800193c:	4a04      	ldr	r2, [pc, #16]	; (8001950 <DS1307_Init+0x1c>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6013      	str	r3, [r2, #0]
	DS1307_SetClockHalt(0);
 8001942:	2000      	movs	r0, #0
 8001944:	f000 f806 	bl	8001954 <DS1307_SetClockHalt>
}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	2000250c 	.word	0x2000250c

08001954 <DS1307_SetClockHalt>:

/**
 * @brief Sets clock halt bit.
 * @param halt Clock halt bit to set, 0 or 1. 0 to start timing, 0 to stop.
 */
void DS1307_SetClockHalt(uint8_t halt) {
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = (halt ? 1 << 7 : 0);
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <DS1307_SetClockHalt+0x14>
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	e000      	b.n	800196a <DS1307_SetClockHalt+0x16>
 8001968:	2300      	movs	r3, #0
 800196a:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
 800196c:	2000      	movs	r0, #0
 800196e:	f000 f831 	bl	80019d4 <DS1307_GetRegByte>
 8001972:	4603      	mov	r3, r0
 8001974:	b25b      	sxtb	r3, r3
 8001976:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800197a:	b25a      	sxtb	r2, r3
 800197c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001980:	4313      	orrs	r3, r2
 8001982:	b25b      	sxtb	r3, r3
 8001984:	b2db      	uxtb	r3, r3
 8001986:	4619      	mov	r1, r3
 8001988:	2000      	movs	r0, #0
 800198a:	f000 f805 	bl	8001998 <DS1307_SetRegByte>
}
 800198e:	bf00      	nop
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <DS1307_SetRegByte>:
/**
 * @brief Sets the byte in the designated DS1307 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af02      	add	r7, sp, #8
 800199e:	4603      	mov	r3, r0
 80019a0:	460a      	mov	r2, r1
 80019a2:	71fb      	strb	r3, [r7, #7]
 80019a4:	4613      	mov	r3, r2
 80019a6:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	733b      	strb	r3, [r7, #12]
 80019ac:	79bb      	ldrb	r3, [r7, #6]
 80019ae:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 80019b0:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <DS1307_SetRegByte+0x38>)
 80019b2:	6818      	ldr	r0, [r3, #0]
 80019b4:	f107 020c 	add.w	r2, r7, #12
 80019b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	2302      	movs	r3, #2
 80019c0:	21d0      	movs	r1, #208	; 0xd0
 80019c2:	f001 fe75 	bl	80036b0 <HAL_I2C_Master_Transmit>
}
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	2000250c 	.word	0x2000250c

080019d4 <DS1307_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af02      	add	r7, sp, #8
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 80019de:	4b0d      	ldr	r3, [pc, #52]	; (8001a14 <DS1307_GetRegByte+0x40>)
 80019e0:	6818      	ldr	r0, [r3, #0]
 80019e2:	1dfa      	adds	r2, r7, #7
 80019e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	2301      	movs	r3, #1
 80019ec:	21d0      	movs	r1, #208	; 0xd0
 80019ee:	f001 fe5f 	bl	80036b0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 80019f2:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <DS1307_GetRegByte+0x40>)
 80019f4:	6818      	ldr	r0, [r3, #0]
 80019f6:	f107 020f 	add.w	r2, r7, #15
 80019fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	2301      	movs	r3, #1
 8001a02:	21d0      	movs	r1, #208	; 0xd0
 8001a04:	f001 ff48 	bl	8003898 <HAL_I2C_Master_Receive>
	return val;
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	2000250c 	.word	0x2000250c

08001a18 <DS1307_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS1307_GetDate(void) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DATE));
 8001a1c:	2004      	movs	r0, #4
 8001a1e:	f7ff ffd9 	bl	80019d4 <DS1307_GetRegByte>
 8001a22:	4603      	mov	r3, r0
 8001a24:	4618      	mov	r0, r3
 8001a26:	f000 f85b 	bl	8001ae0 <DS1307_DecodeBCD>
 8001a2a:	4603      	mov	r3, r0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <DS1307_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS1307_GetMonth(void) {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MONTH));
 8001a34:	2005      	movs	r0, #5
 8001a36:	f7ff ffcd 	bl	80019d4 <DS1307_GetRegByte>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f000 f84f 	bl	8001ae0 <DS1307_DecodeBCD>
 8001a42:	4603      	mov	r3, r0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <DS1307_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2099.
 */
uint16_t DS1307_GetYear(void) {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
	uint16_t cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 8001a4e:	2010      	movs	r0, #16
 8001a50:	f7ff ffc0 	bl	80019d4 <DS1307_GetRegByte>
 8001a54:	4603      	mov	r3, r0
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	461a      	mov	r2, r3
 8001a5a:	0092      	lsls	r2, r2, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	461a      	mov	r2, r3
 8001a60:	0091      	lsls	r1, r2, #2
 8001a62:	461a      	mov	r2, r3
 8001a64:	460b      	mov	r3, r1
 8001a66:	4413      	add	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	80fb      	strh	r3, [r7, #6]
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 8001a6c:	2006      	movs	r0, #6
 8001a6e:	f7ff ffb1 	bl	80019d4 <DS1307_GetRegByte>
 8001a72:	4603      	mov	r3, r0
 8001a74:	4618      	mov	r0, r3
 8001a76:	f000 f833 	bl	8001ae0 <DS1307_DecodeBCD>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	88fb      	ldrh	r3, [r7, #6]
 8001a80:	4413      	add	r3, r2
 8001a82:	b29b      	uxth	r3, r3
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <DS1307_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS1307_GetHour(void) {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 8001a90:	2002      	movs	r0, #2
 8001a92:	f7ff ff9f 	bl	80019d4 <DS1307_GetRegByte>
 8001a96:	4603      	mov	r3, r0
 8001a98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f000 f81e 	bl	8001ae0 <DS1307_DecodeBCD>
 8001aa4:	4603      	mov	r3, r0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <DS1307_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS1307_GetMinute(void) {
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
 8001aae:	2001      	movs	r0, #1
 8001ab0:	f7ff ff90 	bl	80019d4 <DS1307_GetRegByte>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 f812 	bl	8001ae0 <DS1307_DecodeBCD>
 8001abc:	4603      	mov	r3, r0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <DS1307_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS1307_GetSecond(void) {
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f);
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	f7ff ff84 	bl	80019d4 <DS1307_GetRegByte>
 8001acc:	4603      	mov	r3, r0
 8001ace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f000 f803 	bl	8001ae0 <DS1307_DecodeBCD>
 8001ada:	4603      	mov	r3, r0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <DS1307_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS1307_DecodeBCD(uint8_t bin) {
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	091b      	lsrs	r3, r3, #4
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	461a      	mov	r2, r3
 8001af2:	0092      	lsls	r2, r2, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	f003 030f 	and.w	r3, r3, #15
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	4413      	add	r3, r2
 8001b04:	b2db      	uxtb	r3, r3
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b16:	2003      	movs	r0, #3
 8001b18:	f000 ff50 	bl	80029bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	f000 f805 	bl	8001b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b22:	f7ff fb6d 	bl	8001200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b34:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <HAL_InitTick+0x54>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <HAL_InitTick+0x58>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 ff6b 	bl	8002a26 <HAL_SYSTICK_Config>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e00e      	b.n	8001b78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2b0f      	cmp	r3, #15
 8001b5e:	d80a      	bhi.n	8001b76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b60:	2200      	movs	r2, #0
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b68:	f000 ff33 	bl	80029d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b6c:	4a06      	ldr	r2, [pc, #24]	; (8001b88 <HAL_InitTick+0x5c>)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
 8001b74:	e000      	b.n	8001b78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000004 	.word	0x20000004
 8001b84:	2000000c 	.word	0x2000000c
 8001b88:	20000008 	.word	0x20000008

08001b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <HAL_IncTick+0x20>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	461a      	mov	r2, r3
 8001b96:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <HAL_IncTick+0x24>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	4a04      	ldr	r2, [pc, #16]	; (8001bb0 <HAL_IncTick+0x24>)
 8001b9e:	6013      	str	r3, [r2, #0]
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	2000000c 	.word	0x2000000c
 8001bb0:	20002510 	.word	0x20002510

08001bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb8:	4b03      	ldr	r3, [pc, #12]	; (8001bc8 <HAL_GetTick+0x14>)
 8001bba:	681b      	ldr	r3, [r3, #0]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	20002510 	.word	0x20002510

08001bcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bd4:	f7ff ffee 	bl	8001bb4 <HAL_GetTick>
 8001bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001be4:	d005      	beq.n	8001bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001be6:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <HAL_Delay+0x44>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	461a      	mov	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4413      	add	r3, r2
 8001bf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bf2:	bf00      	nop
 8001bf4:	f7ff ffde 	bl	8001bb4 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d8f7      	bhi.n	8001bf4 <HAL_Delay+0x28>
  {
  }
}
 8001c04:	bf00      	nop
 8001c06:	bf00      	nop
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	2000000c 	.word	0x2000000c

08001c14 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e0ed      	b.n	8001e02 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d102      	bne.n	8001c38 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff fb08 	bl	8001248 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 0201 	orr.w	r2, r2, #1
 8001c46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c48:	f7ff ffb4 	bl	8001bb4 <HAL_GetTick>
 8001c4c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c4e:	e012      	b.n	8001c76 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c50:	f7ff ffb0 	bl	8001bb4 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b0a      	cmp	r3, #10
 8001c5c:	d90b      	bls.n	8001c76 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2205      	movs	r2, #5
 8001c6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e0c5      	b.n	8001e02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0e5      	beq.n	8001c50 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f022 0202 	bic.w	r2, r2, #2
 8001c92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c94:	f7ff ff8e 	bl	8001bb4 <HAL_GetTick>
 8001c98:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c9a:	e012      	b.n	8001cc2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c9c:	f7ff ff8a 	bl	8001bb4 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b0a      	cmp	r3, #10
 8001ca8:	d90b      	bls.n	8001cc2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2205      	movs	r2, #5
 8001cba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e09f      	b.n	8001e02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1e5      	bne.n	8001c9c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	7e1b      	ldrb	r3, [r3, #24]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d108      	bne.n	8001cea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	e007      	b.n	8001cfa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cf8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	7e5b      	ldrb	r3, [r3, #25]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d108      	bne.n	8001d14 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	e007      	b.n	8001d24 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d22:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	7e9b      	ldrb	r3, [r3, #26]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d108      	bne.n	8001d3e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f042 0220 	orr.w	r2, r2, #32
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	e007      	b.n	8001d4e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 0220 	bic.w	r2, r2, #32
 8001d4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	7edb      	ldrb	r3, [r3, #27]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d108      	bne.n	8001d68 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 0210 	bic.w	r2, r2, #16
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	e007      	b.n	8001d78 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 0210 	orr.w	r2, r2, #16
 8001d76:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	7f1b      	ldrb	r3, [r3, #28]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d108      	bne.n	8001d92 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 0208 	orr.w	r2, r2, #8
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	e007      	b.n	8001da2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 0208 	bic.w	r2, r2, #8
 8001da0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	7f5b      	ldrb	r3, [r3, #29]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d108      	bne.n	8001dbc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f042 0204 	orr.w	r2, r2, #4
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	e007      	b.n	8001dcc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0204 	bic.w	r2, r2, #4
 8001dca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	ea42 0103 	orr.w	r1, r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	1e5a      	subs	r2, r3, #1
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b087      	sub	sp, #28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e22:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001e24:	7cfb      	ldrb	r3, [r7, #19]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d003      	beq.n	8001e32 <HAL_CAN_ConfigFilter+0x26>
 8001e2a:	7cfb      	ldrb	r3, [r7, #19]
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	f040 80c7 	bne.w	8001fc0 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a69      	ldr	r2, [pc, #420]	; (8001fdc <HAL_CAN_ConfigFilter+0x1d0>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d001      	beq.n	8001e40 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001e3c:	4b68      	ldr	r3, [pc, #416]	; (8001fe0 <HAL_CAN_ConfigFilter+0x1d4>)
 8001e3e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e46:	f043 0201 	orr.w	r2, r3, #1
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	4a63      	ldr	r2, [pc, #396]	; (8001fe0 <HAL_CAN_ConfigFilter+0x1d4>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d111      	bne.n	8001e7c <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e5e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	021b      	lsls	r3, r3, #8
 8001e74:	431a      	orrs	r2, r3
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	f003 031f 	and.w	r3, r3, #31
 8001e84:	2201      	movs	r2, #1
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	43db      	mvns	r3, r3
 8001e96:	401a      	ands	r2, r3
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d123      	bne.n	8001eee <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	401a      	ands	r2, r3
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ec8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	3248      	adds	r2, #72	; 0x48
 8001ece:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ee2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ee4:	6979      	ldr	r1, [r7, #20]
 8001ee6:	3348      	adds	r3, #72	; 0x48
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	440b      	add	r3, r1
 8001eec:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d122      	bne.n	8001f3c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	431a      	orrs	r2, r3
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f16:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	3248      	adds	r2, #72	; 0x48
 8001f1c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f30:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f32:	6979      	ldr	r1, [r7, #20]
 8001f34:	3348      	adds	r3, #72	; 0x48
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	440b      	add	r3, r1
 8001f3a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d109      	bne.n	8001f58 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	401a      	ands	r2, r3
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001f56:	e007      	b.n	8001f68 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	431a      	orrs	r2, r3
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d109      	bne.n	8001f84 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	401a      	ands	r2, r3
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001f82:	e007      	b.n	8001f94 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d107      	bne.n	8001fac <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fb2:	f023 0201 	bic.w	r2, r3, #1
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	e006      	b.n	8001fce <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
  }
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	371c      	adds	r7, #28
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40003400 	.word	0x40003400
 8001fe0:	40006400 	.word	0x40006400

08001fe4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d12e      	bne.n	8002056 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0201 	bic.w	r2, r2, #1
 800200e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002010:	f7ff fdd0 	bl	8001bb4 <HAL_GetTick>
 8002014:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002016:	e012      	b.n	800203e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002018:	f7ff fdcc 	bl	8001bb4 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b0a      	cmp	r3, #10
 8002024:	d90b      	bls.n	800203e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2205      	movs	r2, #5
 8002036:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e012      	b.n	8002064 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1e5      	bne.n	8002018 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	e006      	b.n	8002064 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
  }
}
 8002064:	4618      	mov	r0, r3
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f893 3020 	ldrb.w	r3, [r3, #32]
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d133      	bne.n	80020e8 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0201 	orr.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002090:	f7ff fd90 	bl	8001bb4 <HAL_GetTick>
 8002094:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002096:	e012      	b.n	80020be <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002098:	f7ff fd8c 	bl	8001bb4 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b0a      	cmp	r3, #10
 80020a4:	d90b      	bls.n	80020be <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2205      	movs	r2, #5
 80020b6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e01b      	b.n	80020f6 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0e5      	beq.n	8002098 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 0202 	bic.w	r2, r2, #2
 80020da:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 80020e4:	2300      	movs	r3, #0
 80020e6:	e006      	b.n	80020f6 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
  }
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80020fe:	b480      	push	{r7}
 8002100:	b087      	sub	sp, #28
 8002102:	af00      	add	r7, sp, #0
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	60b9      	str	r1, [r7, #8]
 8002108:	607a      	str	r2, [r7, #4]
 800210a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002112:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002114:	7dfb      	ldrb	r3, [r7, #23]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d003      	beq.n	8002122 <HAL_CAN_GetRxMessage+0x24>
 800211a:	7dfb      	ldrb	r3, [r7, #23]
 800211c:	2b02      	cmp	r3, #2
 800211e:	f040 80f3 	bne.w	8002308 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d10e      	bne.n	8002146 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d116      	bne.n	8002164 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e0e7      	b.n	8002316 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d107      	bne.n	8002164 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e0d8      	b.n	8002316 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	331b      	adds	r3, #27
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	4413      	add	r3, r2
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0204 	and.w	r2, r3, #4
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10c      	bne.n	800219c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	331b      	adds	r3, #27
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	4413      	add	r3, r2
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	0d5b      	lsrs	r3, r3, #21
 8002192:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	e00b      	b.n	80021b4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	331b      	adds	r3, #27
 80021a4:	011b      	lsls	r3, r3, #4
 80021a6:	4413      	add	r3, r2
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	08db      	lsrs	r3, r3, #3
 80021ac:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	331b      	adds	r3, #27
 80021bc:	011b      	lsls	r3, r3, #4
 80021be:	4413      	add	r3, r2
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0202 	and.w	r2, r3, #2
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	331b      	adds	r3, #27
 80021d2:	011b      	lsls	r3, r3, #4
 80021d4:	4413      	add	r3, r2
 80021d6:	3304      	adds	r3, #4
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 020f 	and.w	r2, r3, #15
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	331b      	adds	r3, #27
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	4413      	add	r3, r2
 80021ee:	3304      	adds	r3, #4
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	0a1b      	lsrs	r3, r3, #8
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	331b      	adds	r3, #27
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	4413      	add	r3, r2
 8002206:	3304      	adds	r3, #4
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	0c1b      	lsrs	r3, r3, #16
 800220c:	b29a      	uxth	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	011b      	lsls	r3, r3, #4
 800221a:	4413      	add	r3, r2
 800221c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	b2da      	uxtb	r2, r3
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	4413      	add	r3, r2
 8002232:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	0a1a      	lsrs	r2, r3, #8
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	3301      	adds	r3, #1
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	4413      	add	r3, r2
 800224c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	0c1a      	lsrs	r2, r3, #16
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	3302      	adds	r3, #2
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	011b      	lsls	r3, r3, #4
 8002264:	4413      	add	r3, r2
 8002266:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	0e1a      	lsrs	r2, r3, #24
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	3303      	adds	r3, #3
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	011b      	lsls	r3, r3, #4
 800227e:	4413      	add	r3, r2
 8002280:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	3304      	adds	r3, #4
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	011b      	lsls	r3, r3, #4
 8002296:	4413      	add	r3, r2
 8002298:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	0a1a      	lsrs	r2, r3, #8
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	3305      	adds	r3, #5
 80022a4:	b2d2      	uxtb	r2, r2
 80022a6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	011b      	lsls	r3, r3, #4
 80022b0:	4413      	add	r3, r2
 80022b2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	0c1a      	lsrs	r2, r3, #16
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	3306      	adds	r3, #6
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	011b      	lsls	r3, r3, #4
 80022ca:	4413      	add	r3, r2
 80022cc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	0e1a      	lsrs	r2, r3, #24
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	3307      	adds	r3, #7
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d108      	bne.n	80022f4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f042 0220 	orr.w	r2, r2, #32
 80022f0:	60da      	str	r2, [r3, #12]
 80022f2:	e007      	b.n	8002304 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	691a      	ldr	r2, [r3, #16]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0220 	orr.w	r2, r2, #32
 8002302:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002304:	2300      	movs	r3, #0
 8002306:	e006      	b.n	8002316 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
  }
}
 8002316:	4618      	mov	r0, r3
 8002318:	371c      	adds	r7, #28
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002322:	b480      	push	{r7}
 8002324:	b085      	sub	sp, #20
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002332:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002334:	7bfb      	ldrb	r3, [r7, #15]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d002      	beq.n	8002340 <HAL_CAN_ActivateNotification+0x1e>
 800233a:	7bfb      	ldrb	r3, [r7, #15]
 800233c:	2b02      	cmp	r3, #2
 800233e:	d109      	bne.n	8002354 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6959      	ldr	r1, [r3, #20]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002350:	2300      	movs	r3, #0
 8002352:	e006      	b.n	8002362 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
  }
}
 8002362:	4618      	mov	r0, r3
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 800236e:	b480      	push	{r7}
 8002370:	b085      	sub	sp, #20
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800237e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002380:	7bfb      	ldrb	r3, [r7, #15]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d002      	beq.n	800238c <HAL_CAN_DeactivateNotification+0x1e>
 8002386:	7bfb      	ldrb	r3, [r7, #15]
 8002388:	2b02      	cmp	r3, #2
 800238a:	d10a      	bne.n	80023a2 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6959      	ldr	r1, [r3, #20]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	43da      	mvns	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	400a      	ands	r2, r1
 800239c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800239e:	2300      	movs	r3, #0
 80023a0:	e006      	b.n	80023b0 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
  }
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b08a      	sub	sp, #40	; 0x28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80023c4:	2300      	movs	r3, #0
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80023f8:	6a3b      	ldr	r3, [r7, #32]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d07c      	beq.n	80024fc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b00      	cmp	r3, #0
 800240a:	d023      	beq.n	8002454 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2201      	movs	r2, #1
 8002412:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f983 	bl	800272a <HAL_CAN_TxMailbox0CompleteCallback>
 8002424:	e016      	b.n	8002454 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	d004      	beq.n	800243a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
 8002438:	e00c      	b.n	8002454 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	2b00      	cmp	r3, #0
 8002442:	d004      	beq.n	800244e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800244a:	627b      	str	r3, [r7, #36]	; 0x24
 800244c:	e002      	b.n	8002454 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f989 	bl	8002766 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245a:	2b00      	cmp	r3, #0
 800245c:	d024      	beq.n	80024a8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002466:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f963 	bl	800273e <HAL_CAN_TxMailbox1CompleteCallback>
 8002478:	e016      	b.n	80024a8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002480:	2b00      	cmp	r3, #0
 8002482:	d004      	beq.n	800248e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
 800248c:	e00c      	b.n	80024a8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002494:	2b00      	cmp	r3, #0
 8002496:	d004      	beq.n	80024a2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
 80024a0:	e002      	b.n	80024a8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f969 	bl	800277a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d024      	beq.n	80024fc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80024ba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f943 	bl	8002752 <HAL_CAN_TxMailbox2CompleteCallback>
 80024cc:	e016      	b.n	80024fc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d004      	beq.n	80024e2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
 80024e0:	e00c      	b.n	80024fc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d004      	beq.n	80024f6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24
 80024f4:	e002      	b.n	80024fc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f949 	bl	800278e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80024fc:	6a3b      	ldr	r3, [r7, #32]
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00c      	beq.n	8002520 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	f003 0310 	and.w	r3, r3, #16
 800250c:	2b00      	cmp	r3, #0
 800250e:	d007      	beq.n	8002520 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002516:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2210      	movs	r2, #16
 800251e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002520:	6a3b      	ldr	r3, [r7, #32]
 8002522:	f003 0304 	and.w	r3, r3, #4
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00b      	beq.n	8002542 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f003 0308 	and.w	r3, r3, #8
 8002530:	2b00      	cmp	r3, #0
 8002532:	d006      	beq.n	8002542 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2208      	movs	r2, #8
 800253a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 f930 	bl	80027a2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d009      	beq.n	8002560 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d002      	beq.n	8002560 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7fe fdf8 	bl	8001150 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002560:	6a3b      	ldr	r3, [r7, #32]
 8002562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00c      	beq.n	8002584 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	f003 0310 	and.w	r3, r3, #16
 8002570:	2b00      	cmp	r3, #0
 8002572:	d007      	beq.n	8002584 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800257a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2210      	movs	r2, #16
 8002582:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002584:	6a3b      	ldr	r3, [r7, #32]
 8002586:	f003 0320 	and.w	r3, r3, #32
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00b      	beq.n	80025a6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	2b00      	cmp	r3, #0
 8002596:	d006      	beq.n	80025a6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2208      	movs	r2, #8
 800259e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 f912 	bl	80027ca <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80025a6:	6a3b      	ldr	r3, [r7, #32]
 80025a8:	f003 0310 	and.w	r3, r3, #16
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d009      	beq.n	80025c4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d002      	beq.n	80025c4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f8f9 	bl	80027b6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80025c4:	6a3b      	ldr	r3, [r7, #32]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00b      	beq.n	80025e6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	f003 0310 	and.w	r3, r3, #16
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d006      	beq.n	80025e6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2210      	movs	r2, #16
 80025de:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 f8fc 	bl	80027de <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80025e6:	6a3b      	ldr	r3, [r7, #32]
 80025e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00b      	beq.n	8002608 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f003 0308 	and.w	r3, r3, #8
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d006      	beq.n	8002608 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2208      	movs	r2, #8
 8002600:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f8f5 	bl	80027f2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002608:	6a3b      	ldr	r3, [r7, #32]
 800260a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d07b      	beq.n	800270a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d072      	beq.n	8002702 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002622:	2b00      	cmp	r3, #0
 8002624:	d008      	beq.n	8002638 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002638:	6a3b      	ldr	r3, [r7, #32]
 800263a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800263e:	2b00      	cmp	r3, #0
 8002640:	d008      	beq.n	8002654 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	f043 0302 	orr.w	r3, r3, #2
 8002652:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800265a:	2b00      	cmp	r3, #0
 800265c:	d008      	beq.n	8002670 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	f043 0304 	orr.w	r3, r3, #4
 800266e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002676:	2b00      	cmp	r3, #0
 8002678:	d043      	beq.n	8002702 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002680:	2b00      	cmp	r3, #0
 8002682:	d03e      	beq.n	8002702 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800268a:	2b60      	cmp	r3, #96	; 0x60
 800268c:	d02b      	beq.n	80026e6 <HAL_CAN_IRQHandler+0x32a>
 800268e:	2b60      	cmp	r3, #96	; 0x60
 8002690:	d82e      	bhi.n	80026f0 <HAL_CAN_IRQHandler+0x334>
 8002692:	2b50      	cmp	r3, #80	; 0x50
 8002694:	d022      	beq.n	80026dc <HAL_CAN_IRQHandler+0x320>
 8002696:	2b50      	cmp	r3, #80	; 0x50
 8002698:	d82a      	bhi.n	80026f0 <HAL_CAN_IRQHandler+0x334>
 800269a:	2b40      	cmp	r3, #64	; 0x40
 800269c:	d019      	beq.n	80026d2 <HAL_CAN_IRQHandler+0x316>
 800269e:	2b40      	cmp	r3, #64	; 0x40
 80026a0:	d826      	bhi.n	80026f0 <HAL_CAN_IRQHandler+0x334>
 80026a2:	2b30      	cmp	r3, #48	; 0x30
 80026a4:	d010      	beq.n	80026c8 <HAL_CAN_IRQHandler+0x30c>
 80026a6:	2b30      	cmp	r3, #48	; 0x30
 80026a8:	d822      	bhi.n	80026f0 <HAL_CAN_IRQHandler+0x334>
 80026aa:	2b10      	cmp	r3, #16
 80026ac:	d002      	beq.n	80026b4 <HAL_CAN_IRQHandler+0x2f8>
 80026ae:	2b20      	cmp	r3, #32
 80026b0:	d005      	beq.n	80026be <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80026b2:	e01d      	b.n	80026f0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	f043 0308 	orr.w	r3, r3, #8
 80026ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026bc:	e019      	b.n	80026f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	f043 0310 	orr.w	r3, r3, #16
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026c6:	e014      	b.n	80026f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	f043 0320 	orr.w	r3, r3, #32
 80026ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026d0:	e00f      	b.n	80026f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026da:	e00a      	b.n	80026f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026e4:	e005      	b.n	80026f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026ee:	e000      	b.n	80026f2 <HAL_CAN_IRQHandler+0x336>
            break;
 80026f0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	699a      	ldr	r2, [r3, #24]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002700:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2204      	movs	r2, #4
 8002708:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	2b00      	cmp	r3, #0
 800270e:	d008      	beq.n	8002722 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 f872 	bl	8002806 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002722:	bf00      	nop
 8002724:	3728      	adds	r7, #40	; 0x28
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002766:	b480      	push	{r7}
 8002768:	b083      	sub	sp, #12
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
	...

0800281c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800282c:	4b0b      	ldr	r3, [pc, #44]	; (800285c <__NVIC_SetPriorityGrouping+0x40>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002838:	4013      	ands	r3, r2
 800283a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002844:	4b06      	ldr	r3, [pc, #24]	; (8002860 <__NVIC_SetPriorityGrouping+0x44>)
 8002846:	4313      	orrs	r3, r2
 8002848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800284a:	4a04      	ldr	r2, [pc, #16]	; (800285c <__NVIC_SetPriorityGrouping+0x40>)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	60d3      	str	r3, [r2, #12]
}
 8002850:	bf00      	nop
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	e000ed00 	.word	0xe000ed00
 8002860:	05fa0000 	.word	0x05fa0000

08002864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002868:	4b04      	ldr	r3, [pc, #16]	; (800287c <__NVIC_GetPriorityGrouping+0x18>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	0a1b      	lsrs	r3, r3, #8
 800286e:	f003 0307 	and.w	r3, r3, #7
}
 8002872:	4618      	mov	r0, r3
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800288a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288e:	2b00      	cmp	r3, #0
 8002890:	db0b      	blt.n	80028aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	f003 021f 	and.w	r2, r3, #31
 8002898:	4907      	ldr	r1, [pc, #28]	; (80028b8 <__NVIC_EnableIRQ+0x38>)
 800289a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289e:	095b      	lsrs	r3, r3, #5
 80028a0:	2001      	movs	r0, #1
 80028a2:	fa00 f202 	lsl.w	r2, r0, r2
 80028a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	e000e100 	.word	0xe000e100

080028bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	6039      	str	r1, [r7, #0]
 80028c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	db0a      	blt.n	80028e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	490c      	ldr	r1, [pc, #48]	; (8002908 <__NVIC_SetPriority+0x4c>)
 80028d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028da:	0112      	lsls	r2, r2, #4
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	440b      	add	r3, r1
 80028e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028e4:	e00a      	b.n	80028fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	4908      	ldr	r1, [pc, #32]	; (800290c <__NVIC_SetPriority+0x50>)
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	3b04      	subs	r3, #4
 80028f4:	0112      	lsls	r2, r2, #4
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	440b      	add	r3, r1
 80028fa:	761a      	strb	r2, [r3, #24]
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	e000e100 	.word	0xe000e100
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002910:	b480      	push	{r7}
 8002912:	b089      	sub	sp, #36	; 0x24
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f1c3 0307 	rsb	r3, r3, #7
 800292a:	2b04      	cmp	r3, #4
 800292c:	bf28      	it	cs
 800292e:	2304      	movcs	r3, #4
 8002930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	3304      	adds	r3, #4
 8002936:	2b06      	cmp	r3, #6
 8002938:	d902      	bls.n	8002940 <NVIC_EncodePriority+0x30>
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	3b03      	subs	r3, #3
 800293e:	e000      	b.n	8002942 <NVIC_EncodePriority+0x32>
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002944:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43da      	mvns	r2, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	401a      	ands	r2, r3
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002958:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	fa01 f303 	lsl.w	r3, r1, r3
 8002962:	43d9      	mvns	r1, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002968:	4313      	orrs	r3, r2
         );
}
 800296a:	4618      	mov	r0, r3
 800296c:	3724      	adds	r7, #36	; 0x24
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
	...

08002978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3b01      	subs	r3, #1
 8002984:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002988:	d301      	bcc.n	800298e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800298a:	2301      	movs	r3, #1
 800298c:	e00f      	b.n	80029ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800298e:	4a0a      	ldr	r2, [pc, #40]	; (80029b8 <SysTick_Config+0x40>)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3b01      	subs	r3, #1
 8002994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002996:	210f      	movs	r1, #15
 8002998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800299c:	f7ff ff8e 	bl	80028bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029a0:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <SysTick_Config+0x40>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029a6:	4b04      	ldr	r3, [pc, #16]	; (80029b8 <SysTick_Config+0x40>)
 80029a8:	2207      	movs	r2, #7
 80029aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	e000e010 	.word	0xe000e010

080029bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff ff29 	bl	800281c <__NVIC_SetPriorityGrouping>
}
 80029ca:	bf00      	nop
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b086      	sub	sp, #24
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	4603      	mov	r3, r0
 80029da:	60b9      	str	r1, [r7, #8]
 80029dc:	607a      	str	r2, [r7, #4]
 80029de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029e0:	2300      	movs	r3, #0
 80029e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029e4:	f7ff ff3e 	bl	8002864 <__NVIC_GetPriorityGrouping>
 80029e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	68b9      	ldr	r1, [r7, #8]
 80029ee:	6978      	ldr	r0, [r7, #20]
 80029f0:	f7ff ff8e 	bl	8002910 <NVIC_EncodePriority>
 80029f4:	4602      	mov	r2, r0
 80029f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029fa:	4611      	mov	r1, r2
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff ff5d 	bl	80028bc <__NVIC_SetPriority>
}
 8002a02:	bf00      	nop
 8002a04:	3718      	adds	r7, #24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b082      	sub	sp, #8
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	4603      	mov	r3, r0
 8002a12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff ff31 	bl	8002880 <__NVIC_EnableIRQ>
}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b082      	sub	sp, #8
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7ff ffa2 	bl	8002978 <SysTick_Config>
 8002a34:	4603      	mov	r3, r0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a4c:	f7ff f8b2 	bl	8001bb4 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e099      	b.n	8002b90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 0201 	bic.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a7c:	e00f      	b.n	8002a9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a7e:	f7ff f899 	bl	8001bb4 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b05      	cmp	r3, #5
 8002a8a:	d908      	bls.n	8002a9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2203      	movs	r2, #3
 8002a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e078      	b.n	8002b90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1e8      	bne.n	8002a7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	4b38      	ldr	r3, [pc, #224]	; (8002b98 <HAL_DMA_Init+0x158>)
 8002ab8:	4013      	ands	r3, r2
 8002aba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ad6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ae2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	d107      	bne.n	8002b08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b00:	4313      	orrs	r3, r2
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f023 0307 	bic.w	r3, r3, #7
 8002b1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d117      	bne.n	8002b62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00e      	beq.n	8002b62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 faa5 	bl	8003094 <DMA_CheckFifoParam>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2240      	movs	r2, #64	; 0x40
 8002b54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e016      	b.n	8002b90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 fa5c 	bl	8003028 <DMA_CalcBaseAndBitshift>
 8002b70:	4603      	mov	r3, r0
 8002b72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b78:	223f      	movs	r2, #63	; 0x3f
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	e010803f 	.word	0xe010803f

08002b9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
 8002ba8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002baa:	2300      	movs	r3, #0
 8002bac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d101      	bne.n	8002bc2 <HAL_DMA_Start_IT+0x26>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	e048      	b.n	8002c54 <HAL_DMA_Start_IT+0xb8>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d137      	bne.n	8002c46 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2202      	movs	r2, #2
 8002bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	68b9      	ldr	r1, [r7, #8]
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 f9ee 	bl	8002fcc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf4:	223f      	movs	r2, #63	; 0x3f
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0216 	orr.w	r2, r2, #22
 8002c0a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	695a      	ldr	r2, [r3, #20]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c1a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d007      	beq.n	8002c34 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0208 	orr.w	r2, r2, #8
 8002c32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0201 	orr.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	e005      	b.n	8002c52 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3718      	adds	r7, #24
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d004      	beq.n	8002c7a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2280      	movs	r2, #128	; 0x80
 8002c74:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e00c      	b.n	8002c94 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2205      	movs	r2, #5
 8002c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0201 	bic.w	r2, r2, #1
 8002c90:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002cac:	4b8e      	ldr	r3, [pc, #568]	; (8002ee8 <HAL_DMA_IRQHandler+0x248>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a8e      	ldr	r2, [pc, #568]	; (8002eec <HAL_DMA_IRQHandler+0x24c>)
 8002cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb6:	0a9b      	lsrs	r3, r3, #10
 8002cb8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cca:	2208      	movs	r2, #8
 8002ccc:	409a      	lsls	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d01a      	beq.n	8002d0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d013      	beq.n	8002d0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0204 	bic.w	r2, r2, #4
 8002cf2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf8:	2208      	movs	r2, #8
 8002cfa:	409a      	lsls	r2, r3
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d04:	f043 0201 	orr.w	r2, r3, #1
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d10:	2201      	movs	r2, #1
 8002d12:	409a      	lsls	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d012      	beq.n	8002d42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00b      	beq.n	8002d42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2e:	2201      	movs	r2, #1
 8002d30:	409a      	lsls	r2, r3
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3a:	f043 0202 	orr.w	r2, r3, #2
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d46:	2204      	movs	r2, #4
 8002d48:	409a      	lsls	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d012      	beq.n	8002d78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00b      	beq.n	8002d78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d64:	2204      	movs	r2, #4
 8002d66:	409a      	lsls	r2, r3
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d70:	f043 0204 	orr.w	r2, r3, #4
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7c:	2210      	movs	r2, #16
 8002d7e:	409a      	lsls	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4013      	ands	r3, r2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d043      	beq.n	8002e10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d03c      	beq.n	8002e10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9a:	2210      	movs	r2, #16
 8002d9c:	409a      	lsls	r2, r3
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d018      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d108      	bne.n	8002dd0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d024      	beq.n	8002e10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	4798      	blx	r3
 8002dce:	e01f      	b.n	8002e10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d01b      	beq.n	8002e10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	4798      	blx	r3
 8002de0:	e016      	b.n	8002e10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d107      	bne.n	8002e00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 0208 	bic.w	r2, r2, #8
 8002dfe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d003      	beq.n	8002e10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e14:	2220      	movs	r2, #32
 8002e16:	409a      	lsls	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 808f 	beq.w	8002f40 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0310 	and.w	r3, r3, #16
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 8087 	beq.w	8002f40 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e36:	2220      	movs	r2, #32
 8002e38:	409a      	lsls	r2, r3
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b05      	cmp	r3, #5
 8002e48:	d136      	bne.n	8002eb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0216 	bic.w	r2, r2, #22
 8002e58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695a      	ldr	r2, [r3, #20]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d103      	bne.n	8002e7a <HAL_DMA_IRQHandler+0x1da>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d007      	beq.n	8002e8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0208 	bic.w	r2, r2, #8
 8002e88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8e:	223f      	movs	r2, #63	; 0x3f
 8002e90:	409a      	lsls	r2, r3
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d07e      	beq.n	8002fac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	4798      	blx	r3
        }
        return;
 8002eb6:	e079      	b.n	8002fac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d01d      	beq.n	8002f02 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10d      	bne.n	8002ef0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d031      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	4798      	blx	r3
 8002ee4:	e02c      	b.n	8002f40 <HAL_DMA_IRQHandler+0x2a0>
 8002ee6:	bf00      	nop
 8002ee8:	20000004 	.word	0x20000004
 8002eec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d023      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	4798      	blx	r3
 8002f00:	e01e      	b.n	8002f40 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10f      	bne.n	8002f30 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0210 	bic.w	r2, r2, #16
 8002f1e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d032      	beq.n	8002fae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d022      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2205      	movs	r2, #5
 8002f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0201 	bic.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d307      	bcc.n	8002f88 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f2      	bne.n	8002f6c <HAL_DMA_IRQHandler+0x2cc>
 8002f86:	e000      	b.n	8002f8a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f88:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d005      	beq.n	8002fae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	4798      	blx	r3
 8002faa:	e000      	b.n	8002fae <HAL_DMA_IRQHandler+0x30e>
        return;
 8002fac:	bf00      	nop
    }
  }
}
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
 8002fd8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fe8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	2b40      	cmp	r3, #64	; 0x40
 8002ff8:	d108      	bne.n	800300c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800300a:	e007      	b.n	800301c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	60da      	str	r2, [r3, #12]
}
 800301c:	bf00      	nop
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	b2db      	uxtb	r3, r3
 8003036:	3b10      	subs	r3, #16
 8003038:	4a13      	ldr	r2, [pc, #76]	; (8003088 <DMA_CalcBaseAndBitshift+0x60>)
 800303a:	fba2 2303 	umull	r2, r3, r2, r3
 800303e:	091b      	lsrs	r3, r3, #4
 8003040:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003042:	4a12      	ldr	r2, [pc, #72]	; (800308c <DMA_CalcBaseAndBitshift+0x64>)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4413      	add	r3, r2
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	461a      	mov	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2b03      	cmp	r3, #3
 8003054:	d908      	bls.n	8003068 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	461a      	mov	r2, r3
 800305c:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <DMA_CalcBaseAndBitshift+0x68>)
 800305e:	4013      	ands	r3, r2
 8003060:	1d1a      	adds	r2, r3, #4
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	659a      	str	r2, [r3, #88]	; 0x58
 8003066:	e006      	b.n	8003076 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	461a      	mov	r2, r3
 800306e:	4b08      	ldr	r3, [pc, #32]	; (8003090 <DMA_CalcBaseAndBitshift+0x68>)
 8003070:	4013      	ands	r3, r2
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800307a:	4618      	mov	r0, r3
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	aaaaaaab 	.word	0xaaaaaaab
 800308c:	08011ed0 	.word	0x08011ed0
 8003090:	fffffc00 	.word	0xfffffc00

08003094 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d11f      	bne.n	80030ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	d856      	bhi.n	8003162 <DMA_CheckFifoParam+0xce>
 80030b4:	a201      	add	r2, pc, #4	; (adr r2, 80030bc <DMA_CheckFifoParam+0x28>)
 80030b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ba:	bf00      	nop
 80030bc:	080030cd 	.word	0x080030cd
 80030c0:	080030df 	.word	0x080030df
 80030c4:	080030cd 	.word	0x080030cd
 80030c8:	08003163 	.word	0x08003163
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d046      	beq.n	8003166 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030dc:	e043      	b.n	8003166 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030e6:	d140      	bne.n	800316a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ec:	e03d      	b.n	800316a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030f6:	d121      	bne.n	800313c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2b03      	cmp	r3, #3
 80030fc:	d837      	bhi.n	800316e <DMA_CheckFifoParam+0xda>
 80030fe:	a201      	add	r2, pc, #4	; (adr r2, 8003104 <DMA_CheckFifoParam+0x70>)
 8003100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003104:	08003115 	.word	0x08003115
 8003108:	0800311b 	.word	0x0800311b
 800310c:	08003115 	.word	0x08003115
 8003110:	0800312d 	.word	0x0800312d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	73fb      	strb	r3, [r7, #15]
      break;
 8003118:	e030      	b.n	800317c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d025      	beq.n	8003172 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800312a:	e022      	b.n	8003172 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003134:	d11f      	bne.n	8003176 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800313a:	e01c      	b.n	8003176 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d903      	bls.n	800314a <DMA_CheckFifoParam+0xb6>
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2b03      	cmp	r3, #3
 8003146:	d003      	beq.n	8003150 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003148:	e018      	b.n	800317c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	73fb      	strb	r3, [r7, #15]
      break;
 800314e:	e015      	b.n	800317c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003154:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00e      	beq.n	800317a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	73fb      	strb	r3, [r7, #15]
      break;
 8003160:	e00b      	b.n	800317a <DMA_CheckFifoParam+0xe6>
      break;
 8003162:	bf00      	nop
 8003164:	e00a      	b.n	800317c <DMA_CheckFifoParam+0xe8>
      break;
 8003166:	bf00      	nop
 8003168:	e008      	b.n	800317c <DMA_CheckFifoParam+0xe8>
      break;
 800316a:	bf00      	nop
 800316c:	e006      	b.n	800317c <DMA_CheckFifoParam+0xe8>
      break;
 800316e:	bf00      	nop
 8003170:	e004      	b.n	800317c <DMA_CheckFifoParam+0xe8>
      break;
 8003172:	bf00      	nop
 8003174:	e002      	b.n	800317c <DMA_CheckFifoParam+0xe8>
      break;   
 8003176:	bf00      	nop
 8003178:	e000      	b.n	800317c <DMA_CheckFifoParam+0xe8>
      break;
 800317a:	bf00      	nop
    }
  } 
  
  return status; 
 800317c:	7bfb      	ldrb	r3, [r7, #15]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop

0800318c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800318c:	b480      	push	{r7}
 800318e:	b089      	sub	sp, #36	; 0x24
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003196:	2300      	movs	r3, #0
 8003198:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800319a:	2300      	movs	r3, #0
 800319c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800319e:	2300      	movs	r3, #0
 80031a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80031a2:	2300      	movs	r3, #0
 80031a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80031a6:	2300      	movs	r3, #0
 80031a8:	61fb      	str	r3, [r7, #28]
 80031aa:	e175      	b.n	8003498 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80031ac:	2201      	movs	r2, #1
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	4013      	ands	r3, r2
 80031be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	f040 8164 	bne.w	8003492 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d005      	beq.n	80031e2 <HAL_GPIO_Init+0x56>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d130      	bne.n	8003244 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	2203      	movs	r2, #3
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	43db      	mvns	r3, r3
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	4013      	ands	r3, r2
 80031f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	68da      	ldr	r2, [r3, #12]
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4313      	orrs	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003218:	2201      	movs	r2, #1
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	43db      	mvns	r3, r3
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4013      	ands	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	091b      	lsrs	r3, r3, #4
 800322e:	f003 0201 	and.w	r2, r3, #1
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4313      	orrs	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f003 0303 	and.w	r3, r3, #3
 800324c:	2b03      	cmp	r3, #3
 800324e:	d017      	beq.n	8003280 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	2203      	movs	r2, #3
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	43db      	mvns	r3, r3
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4013      	ands	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	4313      	orrs	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f003 0303 	and.w	r3, r3, #3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d123      	bne.n	80032d4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	08da      	lsrs	r2, r3, #3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3208      	adds	r2, #8
 8003294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	220f      	movs	r2, #15
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	43db      	mvns	r3, r3
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4013      	ands	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	691a      	ldr	r2, [r3, #16]
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	08da      	lsrs	r2, r3, #3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	3208      	adds	r2, #8
 80032ce:	69b9      	ldr	r1, [r7, #24]
 80032d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	2203      	movs	r2, #3
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	43db      	mvns	r3, r3
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4013      	ands	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f003 0203 	and.w	r2, r3, #3
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4313      	orrs	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 80be 	beq.w	8003492 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003316:	4b66      	ldr	r3, [pc, #408]	; (80034b0 <HAL_GPIO_Init+0x324>)
 8003318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331a:	4a65      	ldr	r2, [pc, #404]	; (80034b0 <HAL_GPIO_Init+0x324>)
 800331c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003320:	6453      	str	r3, [r2, #68]	; 0x44
 8003322:	4b63      	ldr	r3, [pc, #396]	; (80034b0 <HAL_GPIO_Init+0x324>)
 8003324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800332e:	4a61      	ldr	r2, [pc, #388]	; (80034b4 <HAL_GPIO_Init+0x328>)
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	089b      	lsrs	r3, r3, #2
 8003334:	3302      	adds	r3, #2
 8003336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800333a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	220f      	movs	r2, #15
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43db      	mvns	r3, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4013      	ands	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a58      	ldr	r2, [pc, #352]	; (80034b8 <HAL_GPIO_Init+0x32c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d037      	beq.n	80033ca <HAL_GPIO_Init+0x23e>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a57      	ldr	r2, [pc, #348]	; (80034bc <HAL_GPIO_Init+0x330>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d031      	beq.n	80033c6 <HAL_GPIO_Init+0x23a>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a56      	ldr	r2, [pc, #344]	; (80034c0 <HAL_GPIO_Init+0x334>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d02b      	beq.n	80033c2 <HAL_GPIO_Init+0x236>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a55      	ldr	r2, [pc, #340]	; (80034c4 <HAL_GPIO_Init+0x338>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d025      	beq.n	80033be <HAL_GPIO_Init+0x232>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a54      	ldr	r2, [pc, #336]	; (80034c8 <HAL_GPIO_Init+0x33c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d01f      	beq.n	80033ba <HAL_GPIO_Init+0x22e>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a53      	ldr	r2, [pc, #332]	; (80034cc <HAL_GPIO_Init+0x340>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d019      	beq.n	80033b6 <HAL_GPIO_Init+0x22a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a52      	ldr	r2, [pc, #328]	; (80034d0 <HAL_GPIO_Init+0x344>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d013      	beq.n	80033b2 <HAL_GPIO_Init+0x226>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a51      	ldr	r2, [pc, #324]	; (80034d4 <HAL_GPIO_Init+0x348>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d00d      	beq.n	80033ae <HAL_GPIO_Init+0x222>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a50      	ldr	r2, [pc, #320]	; (80034d8 <HAL_GPIO_Init+0x34c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d007      	beq.n	80033aa <HAL_GPIO_Init+0x21e>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a4f      	ldr	r2, [pc, #316]	; (80034dc <HAL_GPIO_Init+0x350>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d101      	bne.n	80033a6 <HAL_GPIO_Init+0x21a>
 80033a2:	2309      	movs	r3, #9
 80033a4:	e012      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033a6:	230a      	movs	r3, #10
 80033a8:	e010      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033aa:	2308      	movs	r3, #8
 80033ac:	e00e      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033ae:	2307      	movs	r3, #7
 80033b0:	e00c      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033b2:	2306      	movs	r3, #6
 80033b4:	e00a      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033b6:	2305      	movs	r3, #5
 80033b8:	e008      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033ba:	2304      	movs	r3, #4
 80033bc:	e006      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033be:	2303      	movs	r3, #3
 80033c0:	e004      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033c2:	2302      	movs	r3, #2
 80033c4:	e002      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033c6:	2301      	movs	r3, #1
 80033c8:	e000      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033ca:	2300      	movs	r3, #0
 80033cc:	69fa      	ldr	r2, [r7, #28]
 80033ce:	f002 0203 	and.w	r2, r2, #3
 80033d2:	0092      	lsls	r2, r2, #2
 80033d4:	4093      	lsls	r3, r2
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	4313      	orrs	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80033dc:	4935      	ldr	r1, [pc, #212]	; (80034b4 <HAL_GPIO_Init+0x328>)
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	089b      	lsrs	r3, r3, #2
 80033e2:	3302      	adds	r3, #2
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033ea:	4b3d      	ldr	r3, [pc, #244]	; (80034e0 <HAL_GPIO_Init+0x354>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	43db      	mvns	r3, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4013      	ands	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800340e:	4a34      	ldr	r2, [pc, #208]	; (80034e0 <HAL_GPIO_Init+0x354>)
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003414:	4b32      	ldr	r3, [pc, #200]	; (80034e0 <HAL_GPIO_Init+0x354>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	43db      	mvns	r3, r3
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4013      	ands	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	4313      	orrs	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003438:	4a29      	ldr	r2, [pc, #164]	; (80034e0 <HAL_GPIO_Init+0x354>)
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800343e:	4b28      	ldr	r3, [pc, #160]	; (80034e0 <HAL_GPIO_Init+0x354>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	43db      	mvns	r3, r3
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	4013      	ands	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	4313      	orrs	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003462:	4a1f      	ldr	r2, [pc, #124]	; (80034e0 <HAL_GPIO_Init+0x354>)
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003468:	4b1d      	ldr	r3, [pc, #116]	; (80034e0 <HAL_GPIO_Init+0x354>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	43db      	mvns	r3, r3
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4013      	ands	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4313      	orrs	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800348c:	4a14      	ldr	r2, [pc, #80]	; (80034e0 <HAL_GPIO_Init+0x354>)
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	3301      	adds	r3, #1
 8003496:	61fb      	str	r3, [r7, #28]
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	2b0f      	cmp	r3, #15
 800349c:	f67f ae86 	bls.w	80031ac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80034a0:	bf00      	nop
 80034a2:	bf00      	nop
 80034a4:	3724      	adds	r7, #36	; 0x24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	40023800 	.word	0x40023800
 80034b4:	40013800 	.word	0x40013800
 80034b8:	40020000 	.word	0x40020000
 80034bc:	40020400 	.word	0x40020400
 80034c0:	40020800 	.word	0x40020800
 80034c4:	40020c00 	.word	0x40020c00
 80034c8:	40021000 	.word	0x40021000
 80034cc:	40021400 	.word	0x40021400
 80034d0:	40021800 	.word	0x40021800
 80034d4:	40021c00 	.word	0x40021c00
 80034d8:	40022000 	.word	0x40022000
 80034dc:	40022400 	.word	0x40022400
 80034e0:	40013c00 	.word	0x40013c00

080034e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	460b      	mov	r3, r1
 80034ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691a      	ldr	r2, [r3, #16]
 80034f4:	887b      	ldrh	r3, [r7, #2]
 80034f6:	4013      	ands	r3, r2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d002      	beq.n	8003502 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034fc:	2301      	movs	r3, #1
 80034fe:	73fb      	strb	r3, [r7, #15]
 8003500:	e001      	b.n	8003506 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003502:	2300      	movs	r3, #0
 8003504:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003506:	7bfb      	ldrb	r3, [r7, #15]
}
 8003508:	4618      	mov	r0, r3
 800350a:	3714      	adds	r7, #20
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	460b      	mov	r3, r1
 800351e:	807b      	strh	r3, [r7, #2]
 8003520:	4613      	mov	r3, r2
 8003522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003524:	787b      	ldrb	r3, [r7, #1]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800352a:	887a      	ldrh	r2, [r7, #2]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003530:	e003      	b.n	800353a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003532:	887b      	ldrh	r3, [r7, #2]
 8003534:	041a      	lsls	r2, r3, #16
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	619a      	str	r2, [r3, #24]
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
	...

08003548 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	4603      	mov	r3, r0
 8003550:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003552:	4b08      	ldr	r3, [pc, #32]	; (8003574 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003554:	695a      	ldr	r2, [r3, #20]
 8003556:	88fb      	ldrh	r3, [r7, #6]
 8003558:	4013      	ands	r3, r2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d006      	beq.n	800356c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800355e:	4a05      	ldr	r2, [pc, #20]	; (8003574 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003560:	88fb      	ldrh	r3, [r7, #6]
 8003562:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003564:	88fb      	ldrh	r3, [r7, #6]
 8003566:	4618      	mov	r0, r3
 8003568:	f000 f806 	bl	8003578 <HAL_GPIO_EXTI_Callback>
  }
}
 800356c:	bf00      	nop
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40013c00 	.word	0x40013c00

08003578 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	4603      	mov	r3, r0
 8003580:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
	...

08003590 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e07f      	b.n	80036a2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d106      	bne.n	80035bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7fd fe92 	bl	80012e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2224      	movs	r2, #36	; 0x24
 80035c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0201 	bic.w	r2, r2, #1
 80035d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d107      	bne.n	800360a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003606:	609a      	str	r2, [r3, #8]
 8003608:	e006      	b.n	8003618 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003616:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	2b02      	cmp	r3, #2
 800361e:	d104      	bne.n	800362a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003628:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6859      	ldr	r1, [r3, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	4b1d      	ldr	r3, [pc, #116]	; (80036ac <HAL_I2C_Init+0x11c>)
 8003636:	430b      	orrs	r3, r1
 8003638:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68da      	ldr	r2, [r3, #12]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003648:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691a      	ldr	r2, [r3, #16]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	69d9      	ldr	r1, [r3, #28]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a1a      	ldr	r2, [r3, #32]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0201 	orr.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2220      	movs	r2, #32
 800368e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	02008000 	.word	0x02008000

080036b0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b088      	sub	sp, #32
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	607a      	str	r2, [r7, #4]
 80036ba:	461a      	mov	r2, r3
 80036bc:	460b      	mov	r3, r1
 80036be:	817b      	strh	r3, [r7, #10]
 80036c0:	4613      	mov	r3, r2
 80036c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b20      	cmp	r3, #32
 80036ce:	f040 80da 	bne.w	8003886 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <HAL_I2C_Master_Transmit+0x30>
 80036dc:	2302      	movs	r3, #2
 80036de:	e0d3      	b.n	8003888 <HAL_I2C_Master_Transmit+0x1d8>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036e8:	f7fe fa64 	bl	8001bb4 <HAL_GetTick>
 80036ec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	2319      	movs	r3, #25
 80036f4:	2201      	movs	r2, #1
 80036f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f000 f9e6 	bl	8003acc <I2C_WaitOnFlagUntilTimeout>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e0be      	b.n	8003888 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2221      	movs	r2, #33	; 0x21
 800370e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2210      	movs	r2, #16
 8003716:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	893a      	ldrh	r2, [r7, #8]
 800372a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003736:	b29b      	uxth	r3, r3
 8003738:	2bff      	cmp	r3, #255	; 0xff
 800373a:	d90e      	bls.n	800375a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	22ff      	movs	r2, #255	; 0xff
 8003740:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003746:	b2da      	uxtb	r2, r3
 8003748:	8979      	ldrh	r1, [r7, #10]
 800374a:	4b51      	ldr	r3, [pc, #324]	; (8003890 <HAL_I2C_Master_Transmit+0x1e0>)
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 fbd0 	bl	8003ef8 <I2C_TransferConfig>
 8003758:	e06c      	b.n	8003834 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375e:	b29a      	uxth	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003768:	b2da      	uxtb	r2, r3
 800376a:	8979      	ldrh	r1, [r7, #10]
 800376c:	4b48      	ldr	r3, [pc, #288]	; (8003890 <HAL_I2C_Master_Transmit+0x1e0>)
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 fbbf 	bl	8003ef8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800377a:	e05b      	b.n	8003834 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	6a39      	ldr	r1, [r7, #32]
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f000 f9e3 	bl	8003b4c <I2C_WaitOnTXISFlagUntilTimeout>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e07b      	b.n	8003888 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	781a      	ldrb	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	1c5a      	adds	r2, r3, #1
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	3b01      	subs	r3, #1
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d034      	beq.n	8003834 <HAL_I2C_Master_Transmit+0x184>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d130      	bne.n	8003834 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	2200      	movs	r2, #0
 80037da:	2180      	movs	r1, #128	; 0x80
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 f975 	bl	8003acc <I2C_WaitOnFlagUntilTimeout>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e04d      	b.n	8003888 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2bff      	cmp	r3, #255	; 0xff
 80037f4:	d90e      	bls.n	8003814 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	22ff      	movs	r2, #255	; 0xff
 80037fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003800:	b2da      	uxtb	r2, r3
 8003802:	8979      	ldrh	r1, [r7, #10]
 8003804:	2300      	movs	r3, #0
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 fb73 	bl	8003ef8 <I2C_TransferConfig>
 8003812:	e00f      	b.n	8003834 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003818:	b29a      	uxth	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003822:	b2da      	uxtb	r2, r3
 8003824:	8979      	ldrh	r1, [r7, #10]
 8003826:	2300      	movs	r3, #0
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 fb62 	bl	8003ef8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003838:	b29b      	uxth	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d19e      	bne.n	800377c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	6a39      	ldr	r1, [r7, #32]
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 f9c2 	bl	8003bcc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e01a      	b.n	8003888 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2220      	movs	r2, #32
 8003858:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6859      	ldr	r1, [r3, #4]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <HAL_I2C_Master_Transmit+0x1e4>)
 8003866:	400b      	ands	r3, r1
 8003868:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2220      	movs	r2, #32
 800386e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003882:	2300      	movs	r3, #0
 8003884:	e000      	b.n	8003888 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003886:	2302      	movs	r3, #2
  }
}
 8003888:	4618      	mov	r0, r3
 800388a:	3718      	adds	r7, #24
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	80002000 	.word	0x80002000
 8003894:	fe00e800 	.word	0xfe00e800

08003898 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b088      	sub	sp, #32
 800389c:	af02      	add	r7, sp, #8
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	607a      	str	r2, [r7, #4]
 80038a2:	461a      	mov	r2, r3
 80038a4:	460b      	mov	r3, r1
 80038a6:	817b      	strh	r3, [r7, #10]
 80038a8:	4613      	mov	r3, r2
 80038aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b20      	cmp	r3, #32
 80038b6:	f040 80db 	bne.w	8003a70 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d101      	bne.n	80038c8 <HAL_I2C_Master_Receive+0x30>
 80038c4:	2302      	movs	r3, #2
 80038c6:	e0d4      	b.n	8003a72 <HAL_I2C_Master_Receive+0x1da>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038d0:	f7fe f970 	bl	8001bb4 <HAL_GetTick>
 80038d4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	2319      	movs	r3, #25
 80038dc:	2201      	movs	r2, #1
 80038de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 f8f2 	bl	8003acc <I2C_WaitOnFlagUntilTimeout>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e0bf      	b.n	8003a72 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2222      	movs	r2, #34	; 0x22
 80038f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2210      	movs	r2, #16
 80038fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	893a      	ldrh	r2, [r7, #8]
 8003912:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391e:	b29b      	uxth	r3, r3
 8003920:	2bff      	cmp	r3, #255	; 0xff
 8003922:	d90e      	bls.n	8003942 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	22ff      	movs	r2, #255	; 0xff
 8003928:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392e:	b2da      	uxtb	r2, r3
 8003930:	8979      	ldrh	r1, [r7, #10]
 8003932:	4b52      	ldr	r3, [pc, #328]	; (8003a7c <HAL_I2C_Master_Receive+0x1e4>)
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f000 fadc 	bl	8003ef8 <I2C_TransferConfig>
 8003940:	e06d      	b.n	8003a1e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003946:	b29a      	uxth	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003950:	b2da      	uxtb	r2, r3
 8003952:	8979      	ldrh	r1, [r7, #10]
 8003954:	4b49      	ldr	r3, [pc, #292]	; (8003a7c <HAL_I2C_Master_Receive+0x1e4>)
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f000 facb 	bl	8003ef8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003962:	e05c      	b.n	8003a1e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	6a39      	ldr	r1, [r7, #32]
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 f96b 	bl	8003c44 <I2C_WaitOnRXNEFlagUntilTimeout>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e07c      	b.n	8003a72 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	3b01      	subs	r3, #1
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d034      	beq.n	8003a1e <HAL_I2C_Master_Receive+0x186>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d130      	bne.n	8003a1e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	2200      	movs	r2, #0
 80039c4:	2180      	movs	r1, #128	; 0x80
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 f880 	bl	8003acc <I2C_WaitOnFlagUntilTimeout>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e04d      	b.n	8003a72 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039da:	b29b      	uxth	r3, r3
 80039dc:	2bff      	cmp	r3, #255	; 0xff
 80039de:	d90e      	bls.n	80039fe <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	22ff      	movs	r2, #255	; 0xff
 80039e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	8979      	ldrh	r1, [r7, #10]
 80039ee:	2300      	movs	r3, #0
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 fa7e 	bl	8003ef8 <I2C_TransferConfig>
 80039fc:	e00f      	b.n	8003a1e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	8979      	ldrh	r1, [r7, #10]
 8003a10:	2300      	movs	r3, #0
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 fa6d 	bl	8003ef8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d19d      	bne.n	8003964 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	6a39      	ldr	r1, [r7, #32]
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f000 f8cd 	bl	8003bcc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e01a      	b.n	8003a72 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2220      	movs	r2, #32
 8003a42:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6859      	ldr	r1, [r3, #4]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	4b0c      	ldr	r3, [pc, #48]	; (8003a80 <HAL_I2C_Master_Receive+0x1e8>)
 8003a50:	400b      	ands	r3, r1
 8003a52:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2220      	movs	r2, #32
 8003a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	e000      	b.n	8003a72 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003a70:	2302      	movs	r3, #2
  }
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3718      	adds	r7, #24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	80002400 	.word	0x80002400
 8003a80:	fe00e800 	.word	0xfe00e800

08003a84 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d103      	bne.n	8003aa2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d007      	beq.n	8003ac0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699a      	ldr	r2, [r3, #24]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f042 0201 	orr.w	r2, r2, #1
 8003abe:	619a      	str	r2, [r3, #24]
  }
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	603b      	str	r3, [r7, #0]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003adc:	e022      	b.n	8003b24 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ae4:	d01e      	beq.n	8003b24 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ae6:	f7fe f865 	bl	8001bb4 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d302      	bcc.n	8003afc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d113      	bne.n	8003b24 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b00:	f043 0220 	orr.w	r2, r3, #32
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e00f      	b.n	8003b44 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	699a      	ldr	r2, [r3, #24]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	bf0c      	ite	eq
 8003b34:	2301      	moveq	r3, #1
 8003b36:	2300      	movne	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	79fb      	ldrb	r3, [r7, #7]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d0cd      	beq.n	8003ade <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b58:	e02c      	b.n	8003bb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	68b9      	ldr	r1, [r7, #8]
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 f8ea 	bl	8003d38 <I2C_IsErrorOccurred>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e02a      	b.n	8003bc4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b74:	d01e      	beq.n	8003bb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b76:	f7fe f81d 	bl	8001bb4 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d302      	bcc.n	8003b8c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d113      	bne.n	8003bb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b90:	f043 0220 	orr.w	r2, r3, #32
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e007      	b.n	8003bc4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d1cb      	bne.n	8003b5a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bd8:	e028      	b.n	8003c2c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	68b9      	ldr	r1, [r7, #8]
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f000 f8aa 	bl	8003d38 <I2C_IsErrorOccurred>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e026      	b.n	8003c3c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bee:	f7fd ffe1 	bl	8001bb4 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d302      	bcc.n	8003c04 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d113      	bne.n	8003c2c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c08:	f043 0220 	orr.w	r2, r3, #32
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2220      	movs	r2, #32
 8003c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e007      	b.n	8003c3c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	f003 0320 	and.w	r3, r3, #32
 8003c36:	2b20      	cmp	r3, #32
 8003c38:	d1cf      	bne.n	8003bda <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c50:	e064      	b.n	8003d1c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	68b9      	ldr	r1, [r7, #8]
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f000 f86e 	bl	8003d38 <I2C_IsErrorOccurred>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e062      	b.n	8003d2c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	2b20      	cmp	r3, #32
 8003c72:	d138      	bne.n	8003ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	f003 0304 	and.w	r3, r3, #4
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d105      	bne.n	8003c8e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	e04e      	b.n	8003d2c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	f003 0310 	and.w	r3, r3, #16
 8003c98:	2b10      	cmp	r3, #16
 8003c9a:	d107      	bne.n	8003cac <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2210      	movs	r2, #16
 8003ca2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2204      	movs	r2, #4
 8003ca8:	645a      	str	r2, [r3, #68]	; 0x44
 8003caa:	e002      	b.n	8003cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6859      	ldr	r1, [r3, #4]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	4b1b      	ldr	r3, [pc, #108]	; (8003d34 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003cc6:	400b      	ands	r3, r1
 8003cc8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2220      	movs	r2, #32
 8003cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e022      	b.n	8003d2c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce6:	f7fd ff65 	bl	8001bb4 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d302      	bcc.n	8003cfc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10f      	bne.n	8003d1c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d00:	f043 0220 	orr.w	r2, r3, #32
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e007      	b.n	8003d2c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	f003 0304 	and.w	r3, r3, #4
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d193      	bne.n	8003c52 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	fe00e800 	.word	0xfe00e800

08003d38 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b08a      	sub	sp, #40	; 0x28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d44:	2300      	movs	r3, #0
 8003d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003d52:	2300      	movs	r3, #0
 8003d54:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	f003 0310 	and.w	r3, r3, #16
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d068      	beq.n	8003e36 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2210      	movs	r2, #16
 8003d6a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d6c:	e049      	b.n	8003e02 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d74:	d045      	beq.n	8003e02 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d76:	f7fd ff1d 	bl	8001bb4 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d302      	bcc.n	8003d8c <I2C_IsErrorOccurred+0x54>
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d13a      	bne.n	8003e02 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d96:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d9e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003daa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dae:	d121      	bne.n	8003df4 <I2C_IsErrorOccurred+0xbc>
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003db6:	d01d      	beq.n	8003df4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003db8:	7cfb      	ldrb	r3, [r7, #19]
 8003dba:	2b20      	cmp	r3, #32
 8003dbc:	d01a      	beq.n	8003df4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dcc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003dce:	f7fd fef1 	bl	8001bb4 <HAL_GetTick>
 8003dd2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dd4:	e00e      	b.n	8003df4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003dd6:	f7fd feed 	bl	8001bb4 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b19      	cmp	r3, #25
 8003de2:	d907      	bls.n	8003df4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003de4:	6a3b      	ldr	r3, [r7, #32]
 8003de6:	f043 0320 	orr.w	r3, r3, #32
 8003dea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003df2:	e006      	b.n	8003e02 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	f003 0320 	and.w	r3, r3, #32
 8003dfe:	2b20      	cmp	r3, #32
 8003e00:	d1e9      	bne.n	8003dd6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	f003 0320 	and.w	r3, r3, #32
 8003e0c:	2b20      	cmp	r3, #32
 8003e0e:	d003      	beq.n	8003e18 <I2C_IsErrorOccurred+0xe0>
 8003e10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0aa      	beq.n	8003d6e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003e18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d103      	bne.n	8003e28 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2220      	movs	r2, #32
 8003e26:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	f043 0304 	orr.w	r3, r3, #4
 8003e2e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00b      	beq.n	8003e60 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	f043 0301 	orr.w	r3, r3, #1
 8003e4e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00b      	beq.n	8003e82 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
 8003e6c:	f043 0308 	orr.w	r3, r3, #8
 8003e70:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e7a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00b      	beq.n	8003ea4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003e8c:	6a3b      	ldr	r3, [r7, #32]
 8003e8e:	f043 0302 	orr.w	r3, r3, #2
 8003e92:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d01c      	beq.n	8003ee6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f7ff fde9 	bl	8003a84 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6859      	ldr	r1, [r3, #4]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	4b0d      	ldr	r3, [pc, #52]	; (8003ef4 <I2C_IsErrorOccurred+0x1bc>)
 8003ebe:	400b      	ands	r3, r1
 8003ec0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003ee6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3728      	adds	r7, #40	; 0x28
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	fe00e800 	.word	0xfe00e800

08003ef8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b087      	sub	sp, #28
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	607b      	str	r3, [r7, #4]
 8003f02:	460b      	mov	r3, r1
 8003f04:	817b      	strh	r3, [r7, #10]
 8003f06:	4613      	mov	r3, r2
 8003f08:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f0a:	897b      	ldrh	r3, [r7, #10]
 8003f0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f10:	7a7b      	ldrb	r3, [r7, #9]
 8003f12:	041b      	lsls	r3, r3, #16
 8003f14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f18:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f26:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	0d5b      	lsrs	r3, r3, #21
 8003f32:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003f36:	4b08      	ldr	r3, [pc, #32]	; (8003f58 <I2C_TransferConfig+0x60>)
 8003f38:	430b      	orrs	r3, r1
 8003f3a:	43db      	mvns	r3, r3
 8003f3c:	ea02 0103 	and.w	r1, r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003f4a:	bf00      	nop
 8003f4c:	371c      	adds	r7, #28
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	03ff63ff 	.word	0x03ff63ff

08003f5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b20      	cmp	r3, #32
 8003f70:	d138      	bne.n	8003fe4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d101      	bne.n	8003f80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e032      	b.n	8003fe6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2224      	movs	r2, #36	; 0x24
 8003f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 0201 	bic.w	r2, r2, #1
 8003f9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6819      	ldr	r1, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0201 	orr.w	r2, r2, #1
 8003fce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	e000      	b.n	8003fe6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003fe4:	2302      	movs	r3, #2
  }
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b085      	sub	sp, #20
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
 8003ffa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b20      	cmp	r3, #32
 8004006:	d139      	bne.n	800407c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004012:	2302      	movs	r3, #2
 8004014:	e033      	b.n	800407e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2224      	movs	r2, #36	; 0x24
 8004022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0201 	bic.w	r2, r2, #1
 8004034:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004044:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	021b      	lsls	r3, r3, #8
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	4313      	orrs	r3, r2
 800404e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0201 	orr.w	r2, r2, #1
 8004066:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2220      	movs	r2, #32
 800406c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004078:	2300      	movs	r3, #0
 800407a:	e000      	b.n	800407e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800407c:	2302      	movs	r3, #2
  }
}
 800407e:	4618      	mov	r0, r3
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800408a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800408c:	b08f      	sub	sp, #60	; 0x3c
 800408e:	af0a      	add	r7, sp, #40	; 0x28
 8004090:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e116      	b.n	80042ca <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d106      	bne.n	80040bc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f00c f804 	bl	80100c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2203      	movs	r2, #3
 80040c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d102      	bne.n	80040d6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4618      	mov	r0, r3
 80040dc:	f004 ffdb 	bl	8009096 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	603b      	str	r3, [r7, #0]
 80040e6:	687e      	ldr	r6, [r7, #4]
 80040e8:	466d      	mov	r5, sp
 80040ea:	f106 0410 	add.w	r4, r6, #16
 80040ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80040fe:	1d33      	adds	r3, r6, #4
 8004100:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004102:	6838      	ldr	r0, [r7, #0]
 8004104:	f004 febc 	bl	8008e80 <USB_CoreInit>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d005      	beq.n	800411a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2202      	movs	r2, #2
 8004112:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e0d7      	b.n	80042ca <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2100      	movs	r1, #0
 8004120:	4618      	mov	r0, r3
 8004122:	f004 ffc9 	bl	80090b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004126:	2300      	movs	r3, #0
 8004128:	73fb      	strb	r3, [r7, #15]
 800412a:	e04a      	b.n	80041c2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800412c:	7bfa      	ldrb	r2, [r7, #15]
 800412e:	6879      	ldr	r1, [r7, #4]
 8004130:	4613      	mov	r3, r2
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	4413      	add	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	333d      	adds	r3, #61	; 0x3d
 800413c:	2201      	movs	r2, #1
 800413e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004140:	7bfa      	ldrb	r2, [r7, #15]
 8004142:	6879      	ldr	r1, [r7, #4]
 8004144:	4613      	mov	r3, r2
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	4413      	add	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	440b      	add	r3, r1
 800414e:	333c      	adds	r3, #60	; 0x3c
 8004150:	7bfa      	ldrb	r2, [r7, #15]
 8004152:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004154:	7bfa      	ldrb	r2, [r7, #15]
 8004156:	7bfb      	ldrb	r3, [r7, #15]
 8004158:	b298      	uxth	r0, r3
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	4613      	mov	r3, r2
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	4413      	add	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	440b      	add	r3, r1
 8004166:	3344      	adds	r3, #68	; 0x44
 8004168:	4602      	mov	r2, r0
 800416a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800416c:	7bfa      	ldrb	r2, [r7, #15]
 800416e:	6879      	ldr	r1, [r7, #4]
 8004170:	4613      	mov	r3, r2
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	4413      	add	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	440b      	add	r3, r1
 800417a:	3340      	adds	r3, #64	; 0x40
 800417c:	2200      	movs	r2, #0
 800417e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004180:	7bfa      	ldrb	r2, [r7, #15]
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	4613      	mov	r3, r2
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	4413      	add	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	440b      	add	r3, r1
 800418e:	3348      	adds	r3, #72	; 0x48
 8004190:	2200      	movs	r2, #0
 8004192:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004194:	7bfa      	ldrb	r2, [r7, #15]
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	4613      	mov	r3, r2
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	4413      	add	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	334c      	adds	r3, #76	; 0x4c
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80041a8:	7bfa      	ldrb	r2, [r7, #15]
 80041aa:	6879      	ldr	r1, [r7, #4]
 80041ac:	4613      	mov	r3, r2
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	4413      	add	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	440b      	add	r3, r1
 80041b6:	3354      	adds	r3, #84	; 0x54
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041bc:	7bfb      	ldrb	r3, [r7, #15]
 80041be:	3301      	adds	r3, #1
 80041c0:	73fb      	strb	r3, [r7, #15]
 80041c2:	7bfa      	ldrb	r2, [r7, #15]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d3af      	bcc.n	800412c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041cc:	2300      	movs	r3, #0
 80041ce:	73fb      	strb	r3, [r7, #15]
 80041d0:	e044      	b.n	800425c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80041d2:	7bfa      	ldrb	r2, [r7, #15]
 80041d4:	6879      	ldr	r1, [r7, #4]
 80041d6:	4613      	mov	r3, r2
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	4413      	add	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	440b      	add	r3, r1
 80041e0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80041e4:	2200      	movs	r2, #0
 80041e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80041e8:	7bfa      	ldrb	r2, [r7, #15]
 80041ea:	6879      	ldr	r1, [r7, #4]
 80041ec:	4613      	mov	r3, r2
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	4413      	add	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	440b      	add	r3, r1
 80041f6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80041fa:	7bfa      	ldrb	r2, [r7, #15]
 80041fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80041fe:	7bfa      	ldrb	r2, [r7, #15]
 8004200:	6879      	ldr	r1, [r7, #4]
 8004202:	4613      	mov	r3, r2
 8004204:	00db      	lsls	r3, r3, #3
 8004206:	4413      	add	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	440b      	add	r3, r1
 800420c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004210:	2200      	movs	r2, #0
 8004212:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004214:	7bfa      	ldrb	r2, [r7, #15]
 8004216:	6879      	ldr	r1, [r7, #4]
 8004218:	4613      	mov	r3, r2
 800421a:	00db      	lsls	r3, r3, #3
 800421c:	4413      	add	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	440b      	add	r3, r1
 8004222:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004226:	2200      	movs	r2, #0
 8004228:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800422a:	7bfa      	ldrb	r2, [r7, #15]
 800422c:	6879      	ldr	r1, [r7, #4]
 800422e:	4613      	mov	r3, r2
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	4413      	add	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	440b      	add	r3, r1
 8004238:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004240:	7bfa      	ldrb	r2, [r7, #15]
 8004242:	6879      	ldr	r1, [r7, #4]
 8004244:	4613      	mov	r3, r2
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	4413      	add	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	440b      	add	r3, r1
 800424e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004252:	2200      	movs	r2, #0
 8004254:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004256:	7bfb      	ldrb	r3, [r7, #15]
 8004258:	3301      	adds	r3, #1
 800425a:	73fb      	strb	r3, [r7, #15]
 800425c:	7bfa      	ldrb	r2, [r7, #15]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	429a      	cmp	r2, r3
 8004264:	d3b5      	bcc.n	80041d2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	603b      	str	r3, [r7, #0]
 800426c:	687e      	ldr	r6, [r7, #4]
 800426e:	466d      	mov	r5, sp
 8004270:	f106 0410 	add.w	r4, r6, #16
 8004274:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004276:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004278:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800427a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800427c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004280:	e885 0003 	stmia.w	r5, {r0, r1}
 8004284:	1d33      	adds	r3, r6, #4
 8004286:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004288:	6838      	ldr	r0, [r7, #0]
 800428a:	f004 ff61 	bl	8009150 <USB_DevInit>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d005      	beq.n	80042a0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e014      	b.n	80042ca <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d102      	bne.n	80042be <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f001 f97b 	bl	80055b4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f006 f8af 	bl	800a426 <USB_DevDisconnect>

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080042d2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b082      	sub	sp, #8
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d101      	bne.n	80042e8 <HAL_PCD_Start+0x16>
 80042e4:	2302      	movs	r3, #2
 80042e6:	e012      	b.n	800430e <HAL_PCD_Start+0x3c>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f004 febd 	bl	8009074 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	f006 f870 	bl	800a3e4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004316:	b590      	push	{r4, r7, lr}
 8004318:	b08d      	sub	sp, #52	; 0x34
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4618      	mov	r0, r3
 800432e:	f006 f92e 	bl	800a58e <USB_GetMode>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	f040 84b7 	bne.w	8004ca8 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f006 f892 	bl	800a468 <USB_ReadInterrupts>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	f000 84ad 	beq.w	8004ca6 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	0a1b      	lsrs	r3, r3, #8
 8004356:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4618      	mov	r0, r3
 8004366:	f006 f87f 	bl	800a468 <USB_ReadInterrupts>
 800436a:	4603      	mov	r3, r0
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b02      	cmp	r3, #2
 8004372:	d107      	bne.n	8004384 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695a      	ldr	r2, [r3, #20]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f002 0202 	and.w	r2, r2, #2
 8004382:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4618      	mov	r0, r3
 800438a:	f006 f86d 	bl	800a468 <USB_ReadInterrupts>
 800438e:	4603      	mov	r3, r0
 8004390:	f003 0310 	and.w	r3, r3, #16
 8004394:	2b10      	cmp	r3, #16
 8004396:	d161      	bne.n	800445c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	699a      	ldr	r2, [r3, #24]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 0210 	bic.w	r2, r2, #16
 80043a6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	f003 020f 	and.w	r2, r3, #15
 80043b4:	4613      	mov	r3, r2
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	4413      	add	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	4413      	add	r3, r2
 80043c4:	3304      	adds	r3, #4
 80043c6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	0c5b      	lsrs	r3, r3, #17
 80043cc:	f003 030f 	and.w	r3, r3, #15
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d124      	bne.n	800441e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80043da:	4013      	ands	r3, r2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d035      	beq.n	800444c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	091b      	lsrs	r3, r3, #4
 80043e8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80043ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	461a      	mov	r2, r3
 80043f2:	6a38      	ldr	r0, [r7, #32]
 80043f4:	f005 fea4 	bl	800a140 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	691a      	ldr	r2, [r3, #16]
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	091b      	lsrs	r3, r3, #4
 8004400:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004404:	441a      	add	r2, r3
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	6a1a      	ldr	r2, [r3, #32]
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	091b      	lsrs	r3, r3, #4
 8004412:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004416:	441a      	add	r2, r3
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	621a      	str	r2, [r3, #32]
 800441c:	e016      	b.n	800444c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	0c5b      	lsrs	r3, r3, #17
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	2b06      	cmp	r3, #6
 8004428:	d110      	bne.n	800444c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004430:	2208      	movs	r2, #8
 8004432:	4619      	mov	r1, r3
 8004434:	6a38      	ldr	r0, [r7, #32]
 8004436:	f005 fe83 	bl	800a140 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	6a1a      	ldr	r2, [r3, #32]
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	091b      	lsrs	r3, r3, #4
 8004442:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004446:	441a      	add	r2, r3
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699a      	ldr	r2, [r3, #24]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f042 0210 	orr.w	r2, r2, #16
 800445a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4618      	mov	r0, r3
 8004462:	f006 f801 	bl	800a468 <USB_ReadInterrupts>
 8004466:	4603      	mov	r3, r0
 8004468:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800446c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004470:	f040 80a7 	bne.w	80045c2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4618      	mov	r0, r3
 800447e:	f006 f806 	bl	800a48e <USB_ReadDevAllOutEpInterrupt>
 8004482:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004484:	e099      	b.n	80045ba <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 808e 	beq.w	80045ae <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004498:	b2d2      	uxtb	r2, r2
 800449a:	4611      	mov	r1, r2
 800449c:	4618      	mov	r0, r3
 800449e:	f006 f82a 	bl	800a4f6 <USB_ReadDevOutEPInterrupt>
 80044a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00c      	beq.n	80044c8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	015a      	lsls	r2, r3, #5
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ba:	461a      	mov	r2, r3
 80044bc:	2301      	movs	r3, #1
 80044be:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80044c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 fef0 	bl	80052a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	f003 0308 	and.w	r3, r3, #8
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00c      	beq.n	80044ec <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	015a      	lsls	r2, r3, #5
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	4413      	add	r3, r2
 80044da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044de:	461a      	mov	r2, r3
 80044e0:	2308      	movs	r3, #8
 80044e2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80044e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 ffc6 	bl	8005478 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	f003 0310 	and.w	r3, r3, #16
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d008      	beq.n	8004508 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	015a      	lsls	r2, r3, #5
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	4413      	add	r3, r2
 80044fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004502:	461a      	mov	r2, r3
 8004504:	2310      	movs	r3, #16
 8004506:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d030      	beq.n	8004574 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800451a:	2b80      	cmp	r3, #128	; 0x80
 800451c:	d109      	bne.n	8004532 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	69fa      	ldr	r2, [r7, #28]
 8004528:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800452c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004530:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004534:	4613      	mov	r3, r2
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	4413      	add	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	4413      	add	r3, r2
 8004544:	3304      	adds	r3, #4
 8004546:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	78db      	ldrb	r3, [r3, #3]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d108      	bne.n	8004562 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2200      	movs	r2, #0
 8004554:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	b2db      	uxtb	r3, r3
 800455a:	4619      	mov	r1, r3
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f00b fed5 	bl	801030c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	015a      	lsls	r2, r3, #5
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	4413      	add	r3, r2
 800456a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800456e:	461a      	mov	r2, r3
 8004570:	2302      	movs	r3, #2
 8004572:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	f003 0320 	and.w	r3, r3, #32
 800457a:	2b00      	cmp	r3, #0
 800457c:	d008      	beq.n	8004590 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	4413      	add	r3, r2
 8004586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800458a:	461a      	mov	r2, r3
 800458c:	2320      	movs	r3, #32
 800458e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d009      	beq.n	80045ae <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a6:	461a      	mov	r2, r3
 80045a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045ac:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	3301      	adds	r3, #1
 80045b2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80045b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b6:	085b      	lsrs	r3, r3, #1
 80045b8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80045ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f47f af62 	bne.w	8004486 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f005 ff4e 	bl	800a468 <USB_ReadInterrupts>
 80045cc:	4603      	mov	r3, r0
 80045ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045d6:	f040 80db 	bne.w	8004790 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f005 ff6f 	bl	800a4c2 <USB_ReadDevAllInEpInterrupt>
 80045e4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80045ea:	e0cd      	b.n	8004788 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80045ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 80c2 	beq.w	800477c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	4611      	mov	r1, r2
 8004602:	4618      	mov	r0, r3
 8004604:	f005 ff95 	bl	800a532 <USB_ReadDevInEPInterrupt>
 8004608:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b00      	cmp	r3, #0
 8004612:	d057      	beq.n	80046c4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	f003 030f 	and.w	r3, r3, #15
 800461a:	2201      	movs	r2, #1
 800461c:	fa02 f303 	lsl.w	r3, r2, r3
 8004620:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	43db      	mvns	r3, r3
 800462e:	69f9      	ldr	r1, [r7, #28]
 8004630:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004634:	4013      	ands	r3, r2
 8004636:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	015a      	lsls	r2, r3, #5
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	4413      	add	r3, r2
 8004640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004644:	461a      	mov	r2, r3
 8004646:	2301      	movs	r3, #1
 8004648:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d132      	bne.n	80046b8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004652:	6879      	ldr	r1, [r7, #4]
 8004654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004656:	4613      	mov	r3, r2
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	4413      	add	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	440b      	add	r3, r1
 8004660:	334c      	adds	r3, #76	; 0x4c
 8004662:	6819      	ldr	r1, [r3, #0]
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004668:	4613      	mov	r3, r2
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	4413      	add	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4403      	add	r3, r0
 8004672:	3348      	adds	r3, #72	; 0x48
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4419      	add	r1, r3
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800467c:	4613      	mov	r3, r2
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	4413      	add	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4403      	add	r3, r0
 8004686:	334c      	adds	r3, #76	; 0x4c
 8004688:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	2b00      	cmp	r3, #0
 800468e:	d113      	bne.n	80046b8 <HAL_PCD_IRQHandler+0x3a2>
 8004690:	6879      	ldr	r1, [r7, #4]
 8004692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004694:	4613      	mov	r3, r2
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	4413      	add	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	3354      	adds	r3, #84	; 0x54
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d108      	bne.n	80046b8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6818      	ldr	r0, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80046b0:	461a      	mov	r2, r3
 80046b2:	2101      	movs	r1, #1
 80046b4:	f005 ff9e 	bl	800a5f4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80046b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	4619      	mov	r1, r3
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f00b fd9f 	bl	8010202 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	f003 0308 	and.w	r3, r3, #8
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d008      	beq.n	80046e0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	015a      	lsls	r2, r3, #5
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	4413      	add	r3, r2
 80046d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046da:	461a      	mov	r2, r3
 80046dc:	2308      	movs	r3, #8
 80046de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	f003 0310 	and.w	r3, r3, #16
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d008      	beq.n	80046fc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	015a      	lsls	r2, r3, #5
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	4413      	add	r3, r2
 80046f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f6:	461a      	mov	r2, r3
 80046f8:	2310      	movs	r3, #16
 80046fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004702:	2b00      	cmp	r3, #0
 8004704:	d008      	beq.n	8004718 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	4413      	add	r3, r2
 800470e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004712:	461a      	mov	r2, r3
 8004714:	2340      	movs	r3, #64	; 0x40
 8004716:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d023      	beq.n	800476a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004722:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004724:	6a38      	ldr	r0, [r7, #32]
 8004726:	f004 fe71 	bl	800940c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800472a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800472c:	4613      	mov	r3, r2
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	4413      	add	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	3338      	adds	r3, #56	; 0x38
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	4413      	add	r3, r2
 800473a:	3304      	adds	r3, #4
 800473c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	78db      	ldrb	r3, [r3, #3]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d108      	bne.n	8004758 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	2200      	movs	r2, #0
 800474a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	b2db      	uxtb	r3, r3
 8004750:	4619      	mov	r1, r3
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f00b fdec 	bl	8010330 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	015a      	lsls	r2, r3, #5
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	4413      	add	r3, r2
 8004760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004764:	461a      	mov	r2, r3
 8004766:	2302      	movs	r3, #2
 8004768:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004770:	2b00      	cmp	r3, #0
 8004772:	d003      	beq.n	800477c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004774:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 fd08 	bl	800518c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	3301      	adds	r3, #1
 8004780:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004784:	085b      	lsrs	r3, r3, #1
 8004786:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478a:	2b00      	cmp	r3, #0
 800478c:	f47f af2e 	bne.w	80045ec <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4618      	mov	r0, r3
 8004796:	f005 fe67 	bl	800a468 <USB_ReadInterrupts>
 800479a:	4603      	mov	r3, r0
 800479c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047a4:	d122      	bne.n	80047ec <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	69fa      	ldr	r2, [r7, #28]
 80047b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047b4:	f023 0301 	bic.w	r3, r3, #1
 80047b8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d108      	bne.n	80047d6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80047cc:	2100      	movs	r1, #0
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f00b ff66 	bl	80106a0 <HAL_PCDEx_LPM_Callback>
 80047d4:	e002      	b.n	80047dc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f00b fd8a 	bl	80102f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	695a      	ldr	r2, [r3, #20]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80047ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f005 fe39 	bl	800a468 <USB_ReadInterrupts>
 80047f6:	4603      	mov	r3, r0
 80047f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004800:	d112      	bne.n	8004828 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b01      	cmp	r3, #1
 8004810:	d102      	bne.n	8004818 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f00b fd46 	bl	80102a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695a      	ldr	r2, [r3, #20]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004826:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4618      	mov	r0, r3
 800482e:	f005 fe1b 	bl	800a468 <USB_ReadInterrupts>
 8004832:	4603      	mov	r3, r0
 8004834:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004838:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800483c:	d121      	bne.n	8004882 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	695a      	ldr	r2, [r3, #20]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800484c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004854:	2b00      	cmp	r3, #0
 8004856:	d111      	bne.n	800487c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004866:	089b      	lsrs	r3, r3, #2
 8004868:	f003 020f 	and.w	r2, r3, #15
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004872:	2101      	movs	r1, #1
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f00b ff13 	bl	80106a0 <HAL_PCDEx_LPM_Callback>
 800487a:	e002      	b.n	8004882 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f00b fd11 	bl	80102a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4618      	mov	r0, r3
 8004888:	f005 fdee 	bl	800a468 <USB_ReadInterrupts>
 800488c:	4603      	mov	r3, r0
 800488e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004896:	f040 80b7 	bne.w	8004a08 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	69fa      	ldr	r2, [r7, #28]
 80048a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048a8:	f023 0301 	bic.w	r3, r3, #1
 80048ac:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2110      	movs	r1, #16
 80048b4:	4618      	mov	r0, r3
 80048b6:	f004 fda9 	bl	800940c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048ba:	2300      	movs	r3, #0
 80048bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048be:	e046      	b.n	800494e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80048c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c2:	015a      	lsls	r2, r3, #5
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	4413      	add	r3, r2
 80048c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048cc:	461a      	mov	r2, r3
 80048ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048d2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80048d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d6:	015a      	lsls	r2, r3, #5
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	4413      	add	r3, r2
 80048dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048e4:	0151      	lsls	r1, r2, #5
 80048e6:	69fa      	ldr	r2, [r7, #28]
 80048e8:	440a      	add	r2, r1
 80048ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80048f2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80048f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004900:	461a      	mov	r2, r3
 8004902:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004906:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	4413      	add	r3, r2
 8004910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004918:	0151      	lsls	r1, r2, #5
 800491a:	69fa      	ldr	r2, [r7, #28]
 800491c:	440a      	add	r2, r1
 800491e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004922:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004926:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004938:	0151      	lsls	r1, r2, #5
 800493a:	69fa      	ldr	r2, [r7, #28]
 800493c:	440a      	add	r2, r1
 800493e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004942:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004946:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494a:	3301      	adds	r3, #1
 800494c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004954:	429a      	cmp	r2, r3
 8004956:	d3b3      	bcc.n	80048c0 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	69fa      	ldr	r2, [r7, #28]
 8004962:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004966:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800496a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004970:	2b00      	cmp	r3, #0
 8004972:	d016      	beq.n	80049a2 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800497a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800497e:	69fa      	ldr	r2, [r7, #28]
 8004980:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004984:	f043 030b 	orr.w	r3, r3, #11
 8004988:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004994:	69fa      	ldr	r2, [r7, #28]
 8004996:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800499a:	f043 030b 	orr.w	r3, r3, #11
 800499e:	6453      	str	r3, [r2, #68]	; 0x44
 80049a0:	e015      	b.n	80049ce <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a8:	695a      	ldr	r2, [r3, #20]
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049b0:	4619      	mov	r1, r3
 80049b2:	f242 032b 	movw	r3, #8235	; 0x202b
 80049b6:	4313      	orrs	r3, r2
 80049b8:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	69fa      	ldr	r2, [r7, #28]
 80049c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049c8:	f043 030b 	orr.w	r3, r3, #11
 80049cc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	69fa      	ldr	r2, [r7, #28]
 80049d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049dc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80049e0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6818      	ldr	r0, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80049f2:	461a      	mov	r2, r3
 80049f4:	f005 fdfe 	bl	800a5f4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	695a      	ldr	r2, [r3, #20]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004a06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f005 fd2b 	bl	800a468 <USB_ReadInterrupts>
 8004a12:	4603      	mov	r3, r0
 8004a14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a1c:	d124      	bne.n	8004a68 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f005 fdc2 	bl	800a5ac <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f004 fd6a 	bl	8009506 <USB_GetDevSpeed>
 8004a32:	4603      	mov	r3, r0
 8004a34:	461a      	mov	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681c      	ldr	r4, [r3, #0]
 8004a3e:	f001 fa7d 	bl	8005f3c <HAL_RCC_GetHCLKFreq>
 8004a42:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	4620      	mov	r0, r4
 8004a4e:	f004 fa6f 	bl	8008f30 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f00b fbfd 	bl	8010252 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695a      	ldr	r2, [r3, #20]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004a66:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f005 fcfb 	bl	800a468 <USB_ReadInterrupts>
 8004a72:	4603      	mov	r3, r0
 8004a74:	f003 0308 	and.w	r3, r3, #8
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d10a      	bne.n	8004a92 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f00b fbda 	bl	8010236 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	695a      	ldr	r2, [r3, #20]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f002 0208 	and.w	r2, r2, #8
 8004a90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f005 fce6 	bl	800a468 <USB_ReadInterrupts>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa2:	2b80      	cmp	r3, #128	; 0x80
 8004aa4:	d122      	bne.n	8004aec <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004aa6:	6a3b      	ldr	r3, [r7, #32]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004aae:	6a3b      	ldr	r3, [r7, #32]
 8004ab0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ab6:	e014      	b.n	8004ae2 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004ab8:	6879      	ldr	r1, [r7, #4]
 8004aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004abc:	4613      	mov	r3, r2
 8004abe:	00db      	lsls	r3, r3, #3
 8004ac0:	4413      	add	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	440b      	add	r3, r1
 8004ac6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d105      	bne.n	8004adc <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 fb27 	bl	800512a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	3301      	adds	r3, #1
 8004ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d3e5      	bcc.n	8004ab8 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f005 fcb9 	bl	800a468 <USB_ReadInterrupts>
 8004af6:	4603      	mov	r3, r0
 8004af8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004afc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b00:	d13b      	bne.n	8004b7a <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b02:	2301      	movs	r3, #1
 8004b04:	627b      	str	r3, [r7, #36]	; 0x24
 8004b06:	e02b      	b.n	8004b60 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	015a      	lsls	r2, r3, #5
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b18:	6879      	ldr	r1, [r7, #4]
 8004b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	4413      	add	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	440b      	add	r3, r1
 8004b26:	3340      	adds	r3, #64	; 0x40
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d115      	bne.n	8004b5a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004b2e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	da12      	bge.n	8004b5a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004b34:	6879      	ldr	r1, [r7, #4]
 8004b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b38:	4613      	mov	r3, r2
 8004b3a:	00db      	lsls	r3, r3, #3
 8004b3c:	4413      	add	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	440b      	add	r3, r1
 8004b42:	333f      	adds	r3, #63	; 0x3f
 8004b44:	2201      	movs	r2, #1
 8004b46:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	4619      	mov	r1, r3
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 fae8 	bl	800512a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d3ce      	bcc.n	8004b08 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	695a      	ldr	r2, [r3, #20]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004b78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f005 fc72 	bl	800a468 <USB_ReadInterrupts>
 8004b84:	4603      	mov	r3, r0
 8004b86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b8e:	d155      	bne.n	8004c3c <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b90:	2301      	movs	r3, #1
 8004b92:	627b      	str	r3, [r7, #36]	; 0x24
 8004b94:	e045      	b.n	8004c22 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ba6:	6879      	ldr	r1, [r7, #4]
 8004ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004baa:	4613      	mov	r3, r2
 8004bac:	00db      	lsls	r3, r3, #3
 8004bae:	4413      	add	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	440b      	add	r3, r1
 8004bb4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d12e      	bne.n	8004c1c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004bbe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	da2b      	bge.n	8004c1c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004bd0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d121      	bne.n	8004c1c <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004bd8:	6879      	ldr	r1, [r7, #4]
 8004bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bdc:	4613      	mov	r3, r2
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	4413      	add	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	440b      	add	r3, r1
 8004be6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004bea:	2201      	movs	r2, #1
 8004bec:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004bf6:	6a3b      	ldr	r3, [r7, #32]
 8004bf8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10a      	bne.n	8004c1c <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	69fa      	ldr	r2, [r7, #28]
 8004c10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c18:	6053      	str	r3, [r2, #4]
            break;
 8004c1a:	e007      	b.n	8004c2c <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	3301      	adds	r3, #1
 8004c20:	627b      	str	r3, [r7, #36]	; 0x24
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d3b4      	bcc.n	8004b96 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	695a      	ldr	r2, [r3, #20]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004c3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f005 fc11 	bl	800a468 <USB_ReadInterrupts>
 8004c46:	4603      	mov	r3, r0
 8004c48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c50:	d10a      	bne.n	8004c68 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f00b fb7e 	bl	8010354 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	695a      	ldr	r2, [r3, #20]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004c66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f005 fbfb 	bl	800a468 <USB_ReadInterrupts>
 8004c72:	4603      	mov	r3, r0
 8004c74:	f003 0304 	and.w	r3, r3, #4
 8004c78:	2b04      	cmp	r3, #4
 8004c7a:	d115      	bne.n	8004ca8 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	f003 0304 	and.w	r3, r3, #4
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d002      	beq.n	8004c94 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f00b fb6e 	bl	8010370 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6859      	ldr	r1, [r3, #4]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	605a      	str	r2, [r3, #4]
 8004ca4:	e000      	b.n	8004ca8 <HAL_PCD_IRQHandler+0x992>
      return;
 8004ca6:	bf00      	nop
    }
  }
}
 8004ca8:	3734      	adds	r7, #52	; 0x34
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd90      	pop	{r4, r7, pc}

08004cae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b082      	sub	sp, #8
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d101      	bne.n	8004cc8 <HAL_PCD_SetAddress+0x1a>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e013      	b.n	8004cf0 <HAL_PCD_SetAddress+0x42>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	78fa      	ldrb	r2, [r7, #3]
 8004cd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	78fa      	ldrb	r2, [r7, #3]
 8004cde:	4611      	mov	r1, r2
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f005 fb59 	bl	800a398 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3708      	adds	r7, #8
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	4608      	mov	r0, r1
 8004d02:	4611      	mov	r1, r2
 8004d04:	461a      	mov	r2, r3
 8004d06:	4603      	mov	r3, r0
 8004d08:	70fb      	strb	r3, [r7, #3]
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	803b      	strh	r3, [r7, #0]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004d12:	2300      	movs	r3, #0
 8004d14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	da0f      	bge.n	8004d3e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d1e:	78fb      	ldrb	r3, [r7, #3]
 8004d20:	f003 020f 	and.w	r2, r3, #15
 8004d24:	4613      	mov	r3, r2
 8004d26:	00db      	lsls	r3, r3, #3
 8004d28:	4413      	add	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	3338      	adds	r3, #56	; 0x38
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	4413      	add	r3, r2
 8004d32:	3304      	adds	r3, #4
 8004d34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	705a      	strb	r2, [r3, #1]
 8004d3c:	e00f      	b.n	8004d5e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d3e:	78fb      	ldrb	r3, [r7, #3]
 8004d40:	f003 020f 	and.w	r2, r3, #15
 8004d44:	4613      	mov	r3, r2
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	4413      	add	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	4413      	add	r3, r2
 8004d54:	3304      	adds	r3, #4
 8004d56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004d5e:	78fb      	ldrb	r3, [r7, #3]
 8004d60:	f003 030f 	and.w	r3, r3, #15
 8004d64:	b2da      	uxtb	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004d6a:	883a      	ldrh	r2, [r7, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	78ba      	ldrb	r2, [r7, #2]
 8004d74:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	785b      	ldrb	r3, [r3, #1]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d004      	beq.n	8004d88 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004d88:	78bb      	ldrb	r3, [r7, #2]
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d102      	bne.n	8004d94 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d101      	bne.n	8004da2 <HAL_PCD_EP_Open+0xaa>
 8004d9e:	2302      	movs	r3, #2
 8004da0:	e00e      	b.n	8004dc0 <HAL_PCD_EP_Open+0xc8>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68f9      	ldr	r1, [r7, #12]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f004 fbcd 	bl	8009550 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004dbe:	7afb      	ldrb	r3, [r7, #11]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004dd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	da0f      	bge.n	8004dfc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ddc:	78fb      	ldrb	r3, [r7, #3]
 8004dde:	f003 020f 	and.w	r2, r3, #15
 8004de2:	4613      	mov	r3, r2
 8004de4:	00db      	lsls	r3, r3, #3
 8004de6:	4413      	add	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	3338      	adds	r3, #56	; 0x38
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	4413      	add	r3, r2
 8004df0:	3304      	adds	r3, #4
 8004df2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2201      	movs	r2, #1
 8004df8:	705a      	strb	r2, [r3, #1]
 8004dfa:	e00f      	b.n	8004e1c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dfc:	78fb      	ldrb	r3, [r7, #3]
 8004dfe:	f003 020f 	and.w	r2, r3, #15
 8004e02:	4613      	mov	r3, r2
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	4413      	add	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	4413      	add	r3, r2
 8004e12:	3304      	adds	r3, #4
 8004e14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004e1c:	78fb      	ldrb	r3, [r7, #3]
 8004e1e:	f003 030f 	and.w	r3, r3, #15
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d101      	bne.n	8004e36 <HAL_PCD_EP_Close+0x6e>
 8004e32:	2302      	movs	r3, #2
 8004e34:	e00e      	b.n	8004e54 <HAL_PCD_EP_Close+0x8c>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68f9      	ldr	r1, [r7, #12]
 8004e44:	4618      	mov	r0, r3
 8004e46:	f004 fc0b 	bl	8009660 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	607a      	str	r2, [r7, #4]
 8004e66:	603b      	str	r3, [r7, #0]
 8004e68:	460b      	mov	r3, r1
 8004e6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e6c:	7afb      	ldrb	r3, [r7, #11]
 8004e6e:	f003 020f 	and.w	r2, r3, #15
 8004e72:	4613      	mov	r3, r2
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	4413      	add	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	4413      	add	r3, r2
 8004e82:	3304      	adds	r3, #4
 8004e84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	2200      	movs	r2, #0
 8004e96:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e9e:	7afb      	ldrb	r3, [r7, #11]
 8004ea0:	f003 030f 	and.w	r3, r3, #15
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d102      	bne.n	8004eb8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004eb8:	7afb      	ldrb	r3, [r7, #11]
 8004eba:	f003 030f 	and.w	r3, r3, #15
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d109      	bne.n	8004ed6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6818      	ldr	r0, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	461a      	mov	r2, r3
 8004ece:	6979      	ldr	r1, [r7, #20]
 8004ed0:	f004 fef2 	bl	8009cb8 <USB_EP0StartXfer>
 8004ed4:	e008      	b.n	8004ee8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6818      	ldr	r0, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	6979      	ldr	r1, [r7, #20]
 8004ee4:	f004 fc98 	bl	8009818 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3718      	adds	r7, #24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b083      	sub	sp, #12
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
 8004efa:	460b      	mov	r3, r1
 8004efc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004efe:	78fb      	ldrb	r3, [r7, #3]
 8004f00:	f003 020f 	and.w	r2, r3, #15
 8004f04:	6879      	ldr	r1, [r7, #4]
 8004f06:	4613      	mov	r3, r2
 8004f08:	00db      	lsls	r3, r3, #3
 8004f0a:	4413      	add	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	440b      	add	r3, r1
 8004f10:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004f14:	681b      	ldr	r3, [r3, #0]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b086      	sub	sp, #24
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	60f8      	str	r0, [r7, #12]
 8004f2a:	607a      	str	r2, [r7, #4]
 8004f2c:	603b      	str	r3, [r7, #0]
 8004f2e:	460b      	mov	r3, r1
 8004f30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f32:	7afb      	ldrb	r3, [r7, #11]
 8004f34:	f003 020f 	and.w	r2, r3, #15
 8004f38:	4613      	mov	r3, r2
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	4413      	add	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	3338      	adds	r3, #56	; 0x38
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	4413      	add	r3, r2
 8004f46:	3304      	adds	r3, #4
 8004f48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	683a      	ldr	r2, [r7, #0]
 8004f54:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f62:	7afb      	ldrb	r3, [r7, #11]
 8004f64:	f003 030f 	and.w	r3, r3, #15
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d102      	bne.n	8004f7c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f7c:	7afb      	ldrb	r3, [r7, #11]
 8004f7e:	f003 030f 	and.w	r3, r3, #15
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d109      	bne.n	8004f9a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6818      	ldr	r0, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	461a      	mov	r2, r3
 8004f92:	6979      	ldr	r1, [r7, #20]
 8004f94:	f004 fe90 	bl	8009cb8 <USB_EP0StartXfer>
 8004f98:	e008      	b.n	8004fac <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6818      	ldr	r0, [r3, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	6979      	ldr	r1, [r7, #20]
 8004fa8:	f004 fc36 	bl	8009818 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b084      	sub	sp, #16
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004fc2:	78fb      	ldrb	r3, [r7, #3]
 8004fc4:	f003 020f 	and.w	r2, r3, #15
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d901      	bls.n	8004fd4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e050      	b.n	8005076 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004fd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	da0f      	bge.n	8004ffc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fdc:	78fb      	ldrb	r3, [r7, #3]
 8004fde:	f003 020f 	and.w	r2, r3, #15
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	00db      	lsls	r3, r3, #3
 8004fe6:	4413      	add	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	3338      	adds	r3, #56	; 0x38
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	4413      	add	r3, r2
 8004ff0:	3304      	adds	r3, #4
 8004ff2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	705a      	strb	r2, [r3, #1]
 8004ffa:	e00d      	b.n	8005018 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ffc:	78fa      	ldrb	r2, [r7, #3]
 8004ffe:	4613      	mov	r3, r2
 8005000:	00db      	lsls	r3, r3, #3
 8005002:	4413      	add	r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	4413      	add	r3, r2
 800500e:	3304      	adds	r3, #4
 8005010:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2201      	movs	r2, #1
 800501c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800501e:	78fb      	ldrb	r3, [r7, #3]
 8005020:	f003 030f 	and.w	r3, r3, #15
 8005024:	b2da      	uxtb	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005030:	2b01      	cmp	r3, #1
 8005032:	d101      	bne.n	8005038 <HAL_PCD_EP_SetStall+0x82>
 8005034:	2302      	movs	r3, #2
 8005036:	e01e      	b.n	8005076 <HAL_PCD_EP_SetStall+0xc0>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68f9      	ldr	r1, [r7, #12]
 8005046:	4618      	mov	r0, r3
 8005048:	f005 f8d2 	bl	800a1f0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800504c:	78fb      	ldrb	r3, [r7, #3]
 800504e:	f003 030f 	and.w	r3, r3, #15
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10a      	bne.n	800506c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6818      	ldr	r0, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	b2d9      	uxtb	r1, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005066:	461a      	mov	r2, r3
 8005068:	f005 fac4 	bl	800a5f4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b084      	sub	sp, #16
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
 8005086:	460b      	mov	r3, r1
 8005088:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800508a:	78fb      	ldrb	r3, [r7, #3]
 800508c:	f003 020f 	and.w	r2, r3, #15
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	429a      	cmp	r2, r3
 8005096:	d901      	bls.n	800509c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e042      	b.n	8005122 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800509c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	da0f      	bge.n	80050c4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050a4:	78fb      	ldrb	r3, [r7, #3]
 80050a6:	f003 020f 	and.w	r2, r3, #15
 80050aa:	4613      	mov	r3, r2
 80050ac:	00db      	lsls	r3, r3, #3
 80050ae:	4413      	add	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	3338      	adds	r3, #56	; 0x38
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	4413      	add	r3, r2
 80050b8:	3304      	adds	r3, #4
 80050ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2201      	movs	r2, #1
 80050c0:	705a      	strb	r2, [r3, #1]
 80050c2:	e00f      	b.n	80050e4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050c4:	78fb      	ldrb	r3, [r7, #3]
 80050c6:	f003 020f 	and.w	r2, r3, #15
 80050ca:	4613      	mov	r3, r2
 80050cc:	00db      	lsls	r3, r3, #3
 80050ce:	4413      	add	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	4413      	add	r3, r2
 80050da:	3304      	adds	r3, #4
 80050dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050ea:	78fb      	ldrb	r3, [r7, #3]
 80050ec:	f003 030f 	and.w	r3, r3, #15
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d101      	bne.n	8005104 <HAL_PCD_EP_ClrStall+0x86>
 8005100:	2302      	movs	r3, #2
 8005102:	e00e      	b.n	8005122 <HAL_PCD_EP_ClrStall+0xa4>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68f9      	ldr	r1, [r7, #12]
 8005112:	4618      	mov	r0, r3
 8005114:	f005 f8da 	bl	800a2cc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b084      	sub	sp, #16
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
 8005132:	460b      	mov	r3, r1
 8005134:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005136:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800513a:	2b00      	cmp	r3, #0
 800513c:	da0c      	bge.n	8005158 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800513e:	78fb      	ldrb	r3, [r7, #3]
 8005140:	f003 020f 	and.w	r2, r3, #15
 8005144:	4613      	mov	r3, r2
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	4413      	add	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	3338      	adds	r3, #56	; 0x38
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	4413      	add	r3, r2
 8005152:	3304      	adds	r3, #4
 8005154:	60fb      	str	r3, [r7, #12]
 8005156:	e00c      	b.n	8005172 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005158:	78fb      	ldrb	r3, [r7, #3]
 800515a:	f003 020f 	and.w	r2, r3, #15
 800515e:	4613      	mov	r3, r2
 8005160:	00db      	lsls	r3, r3, #3
 8005162:	4413      	add	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	4413      	add	r3, r2
 800516e:	3304      	adds	r3, #4
 8005170:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68f9      	ldr	r1, [r7, #12]
 8005178:	4618      	mov	r0, r3
 800517a:	f004 fef9 	bl	8009f70 <USB_EPStopXfer>
 800517e:	4603      	mov	r3, r0
 8005180:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005182:	7afb      	ldrb	r3, [r7, #11]
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b08a      	sub	sp, #40	; 0x28
 8005190:	af02      	add	r7, sp, #8
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	4613      	mov	r3, r2
 80051a4:	00db      	lsls	r3, r3, #3
 80051a6:	4413      	add	r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	3338      	adds	r3, #56	; 0x38
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	4413      	add	r3, r2
 80051b0:	3304      	adds	r3, #4
 80051b2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6a1a      	ldr	r2, [r3, #32]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d901      	bls.n	80051c4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e06c      	b.n	800529e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	699a      	ldr	r2, [r3, #24]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	69fa      	ldr	r2, [r7, #28]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d902      	bls.n	80051e0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	3303      	adds	r3, #3
 80051e4:	089b      	lsrs	r3, r3, #2
 80051e6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80051e8:	e02b      	b.n	8005242 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	699a      	ldr	r2, [r3, #24]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	69fa      	ldr	r2, [r7, #28]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d902      	bls.n	8005206 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	3303      	adds	r3, #3
 800520a:	089b      	lsrs	r3, r3, #2
 800520c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6919      	ldr	r1, [r3, #16]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	b2da      	uxtb	r2, r3
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800521e:	b2db      	uxtb	r3, r3
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	4603      	mov	r3, r0
 8005224:	6978      	ldr	r0, [r7, #20]
 8005226:	f004 ff4d 	bl	800a0c4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	691a      	ldr	r2, [r3, #16]
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	441a      	add	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6a1a      	ldr	r2, [r3, #32]
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	441a      	add	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	4413      	add	r3, r2
 800524a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	429a      	cmp	r2, r3
 8005256:	d809      	bhi.n	800526c <PCD_WriteEmptyTxFifo+0xe0>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6a1a      	ldr	r2, [r3, #32]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005260:	429a      	cmp	r2, r3
 8005262:	d203      	bcs.n	800526c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1be      	bne.n	80051ea <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	699a      	ldr	r2, [r3, #24]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6a1b      	ldr	r3, [r3, #32]
 8005274:	429a      	cmp	r2, r3
 8005276:	d811      	bhi.n	800529c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	f003 030f 	and.w	r3, r3, #15
 800527e:	2201      	movs	r2, #1
 8005280:	fa02 f303 	lsl.w	r3, r2, r3
 8005284:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800528c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	43db      	mvns	r3, r3
 8005292:	6939      	ldr	r1, [r7, #16]
 8005294:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005298:	4013      	ands	r3, r2
 800529a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3720      	adds	r7, #32
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
	...

080052a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b088      	sub	sp, #32
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	333c      	adds	r3, #60	; 0x3c
 80052c0:	3304      	adds	r3, #4
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d17b      	bne.n	80053d6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	f003 0308 	and.w	r3, r3, #8
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d015      	beq.n	8005314 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	4a61      	ldr	r2, [pc, #388]	; (8005470 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	f240 80b9 	bls.w	8005464 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 80b3 	beq.w	8005464 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	015a      	lsls	r2, r3, #5
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	4413      	add	r3, r2
 8005306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800530a:	461a      	mov	r2, r3
 800530c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005310:	6093      	str	r3, [r2, #8]
 8005312:	e0a7      	b.n	8005464 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	f003 0320 	and.w	r3, r3, #32
 800531a:	2b00      	cmp	r3, #0
 800531c:	d009      	beq.n	8005332 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	4413      	add	r3, r2
 8005326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800532a:	461a      	mov	r2, r3
 800532c:	2320      	movs	r3, #32
 800532e:	6093      	str	r3, [r2, #8]
 8005330:	e098      	b.n	8005464 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005338:	2b00      	cmp	r3, #0
 800533a:	f040 8093 	bne.w	8005464 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	4a4b      	ldr	r2, [pc, #300]	; (8005470 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d90f      	bls.n	8005366 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00a      	beq.n	8005366 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	4413      	add	r3, r2
 8005358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800535c:	461a      	mov	r2, r3
 800535e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005362:	6093      	str	r3, [r2, #8]
 8005364:	e07e      	b.n	8005464 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005366:	683a      	ldr	r2, [r7, #0]
 8005368:	4613      	mov	r3, r2
 800536a:	00db      	lsls	r3, r3, #3
 800536c:	4413      	add	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	4413      	add	r3, r2
 8005378:	3304      	adds	r3, #4
 800537a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	69da      	ldr	r2, [r3, #28]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	0159      	lsls	r1, r3, #5
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	440b      	add	r3, r1
 8005388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005392:	1ad2      	subs	r2, r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d114      	bne.n	80053c8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d109      	bne.n	80053ba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6818      	ldr	r0, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80053b0:	461a      	mov	r2, r3
 80053b2:	2101      	movs	r1, #1
 80053b4:	f005 f91e 	bl	800a5f4 <USB_EP0_OutStart>
 80053b8:	e006      	b.n	80053c8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	691a      	ldr	r2, [r3, #16]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6a1b      	ldr	r3, [r3, #32]
 80053c2:	441a      	add	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	4619      	mov	r1, r3
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f00a fefc 	bl	80101cc <HAL_PCD_DataOutStageCallback>
 80053d4:	e046      	b.n	8005464 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	4a26      	ldr	r2, [pc, #152]	; (8005474 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d124      	bne.n	8005428 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00a      	beq.n	80053fe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f4:	461a      	mov	r2, r3
 80053f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053fa:	6093      	str	r3, [r2, #8]
 80053fc:	e032      	b.n	8005464 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	f003 0320 	and.w	r3, r3, #32
 8005404:	2b00      	cmp	r3, #0
 8005406:	d008      	beq.n	800541a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	4413      	add	r3, r2
 8005410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005414:	461a      	mov	r2, r3
 8005416:	2320      	movs	r3, #32
 8005418:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	b2db      	uxtb	r3, r3
 800541e:	4619      	mov	r1, r3
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f00a fed3 	bl	80101cc <HAL_PCD_DataOutStageCallback>
 8005426:	e01d      	b.n	8005464 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d114      	bne.n	8005458 <PCD_EP_OutXfrComplete_int+0x1b0>
 800542e:	6879      	ldr	r1, [r7, #4]
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	4613      	mov	r3, r2
 8005434:	00db      	lsls	r3, r3, #3
 8005436:	4413      	add	r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	440b      	add	r3, r1
 800543c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d108      	bne.n	8005458 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6818      	ldr	r0, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005450:	461a      	mov	r2, r3
 8005452:	2100      	movs	r1, #0
 8005454:	f005 f8ce 	bl	800a5f4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	b2db      	uxtb	r3, r3
 800545c:	4619      	mov	r1, r3
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f00a feb4 	bl	80101cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3720      	adds	r7, #32
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	4f54300a 	.word	0x4f54300a
 8005474:	4f54310a 	.word	0x4f54310a

08005478 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	333c      	adds	r3, #60	; 0x3c
 8005490:	3304      	adds	r3, #4
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	4413      	add	r3, r2
 800549e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	4a15      	ldr	r2, [pc, #84]	; (8005500 <PCD_EP_OutSetupPacket_int+0x88>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d90e      	bls.n	80054cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d009      	beq.n	80054cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c4:	461a      	mov	r2, r3
 80054c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f00a fe6b 	bl	80101a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	4a0a      	ldr	r2, [pc, #40]	; (8005500 <PCD_EP_OutSetupPacket_int+0x88>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d90c      	bls.n	80054f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d108      	bne.n	80054f4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6818      	ldr	r0, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80054ec:	461a      	mov	r2, r3
 80054ee:	2101      	movs	r1, #1
 80054f0:	f005 f880 	bl	800a5f4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3718      	adds	r7, #24
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	4f54300a 	.word	0x4f54300a

08005504 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	460b      	mov	r3, r1
 800550e:	70fb      	strb	r3, [r7, #3]
 8005510:	4613      	mov	r3, r2
 8005512:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800551c:	78fb      	ldrb	r3, [r7, #3]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d107      	bne.n	8005532 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005522:	883b      	ldrh	r3, [r7, #0]
 8005524:	0419      	lsls	r1, r3, #16
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	430a      	orrs	r2, r1
 800552e:	629a      	str	r2, [r3, #40]	; 0x28
 8005530:	e028      	b.n	8005584 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005538:	0c1b      	lsrs	r3, r3, #16
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	4413      	add	r3, r2
 800553e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005540:	2300      	movs	r3, #0
 8005542:	73fb      	strb	r3, [r7, #15]
 8005544:	e00d      	b.n	8005562 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	7bfb      	ldrb	r3, [r7, #15]
 800554c:	3340      	adds	r3, #64	; 0x40
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	0c1b      	lsrs	r3, r3, #16
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	4413      	add	r3, r2
 800555a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800555c:	7bfb      	ldrb	r3, [r7, #15]
 800555e:	3301      	adds	r3, #1
 8005560:	73fb      	strb	r3, [r7, #15]
 8005562:	7bfa      	ldrb	r2, [r7, #15]
 8005564:	78fb      	ldrb	r3, [r7, #3]
 8005566:	3b01      	subs	r3, #1
 8005568:	429a      	cmp	r2, r3
 800556a:	d3ec      	bcc.n	8005546 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800556c:	883b      	ldrh	r3, [r7, #0]
 800556e:	0418      	lsls	r0, r3, #16
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6819      	ldr	r1, [r3, #0]
 8005574:	78fb      	ldrb	r3, [r7, #3]
 8005576:	3b01      	subs	r3, #1
 8005578:	68ba      	ldr	r2, [r7, #8]
 800557a:	4302      	orrs	r2, r0
 800557c:	3340      	adds	r3, #64	; 0x40
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	440b      	add	r3, r1
 8005582:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005592:	b480      	push	{r7}
 8005594:	b083      	sub	sp, #12
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
 800559a:	460b      	mov	r3, r1
 800559c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	887a      	ldrh	r2, [r7, #2]
 80055a4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055e2:	4b05      	ldr	r3, [pc, #20]	; (80055f8 <HAL_PCDEx_ActivateLPM+0x44>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3714      	adds	r7, #20
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	10000003 	.word	0x10000003

080055fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005604:	2300      	movs	r3, #0
 8005606:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e29b      	b.n	8005b4a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	2b00      	cmp	r3, #0
 800561c:	f000 8087 	beq.w	800572e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005620:	4b96      	ldr	r3, [pc, #600]	; (800587c <HAL_RCC_OscConfig+0x280>)
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f003 030c 	and.w	r3, r3, #12
 8005628:	2b04      	cmp	r3, #4
 800562a:	d00c      	beq.n	8005646 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800562c:	4b93      	ldr	r3, [pc, #588]	; (800587c <HAL_RCC_OscConfig+0x280>)
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f003 030c 	and.w	r3, r3, #12
 8005634:	2b08      	cmp	r3, #8
 8005636:	d112      	bne.n	800565e <HAL_RCC_OscConfig+0x62>
 8005638:	4b90      	ldr	r3, [pc, #576]	; (800587c <HAL_RCC_OscConfig+0x280>)
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005640:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005644:	d10b      	bne.n	800565e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005646:	4b8d      	ldr	r3, [pc, #564]	; (800587c <HAL_RCC_OscConfig+0x280>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d06c      	beq.n	800572c <HAL_RCC_OscConfig+0x130>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d168      	bne.n	800572c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e275      	b.n	8005b4a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005666:	d106      	bne.n	8005676 <HAL_RCC_OscConfig+0x7a>
 8005668:	4b84      	ldr	r3, [pc, #528]	; (800587c <HAL_RCC_OscConfig+0x280>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a83      	ldr	r2, [pc, #524]	; (800587c <HAL_RCC_OscConfig+0x280>)
 800566e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005672:	6013      	str	r3, [r2, #0]
 8005674:	e02e      	b.n	80056d4 <HAL_RCC_OscConfig+0xd8>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10c      	bne.n	8005698 <HAL_RCC_OscConfig+0x9c>
 800567e:	4b7f      	ldr	r3, [pc, #508]	; (800587c <HAL_RCC_OscConfig+0x280>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a7e      	ldr	r2, [pc, #504]	; (800587c <HAL_RCC_OscConfig+0x280>)
 8005684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005688:	6013      	str	r3, [r2, #0]
 800568a:	4b7c      	ldr	r3, [pc, #496]	; (800587c <HAL_RCC_OscConfig+0x280>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a7b      	ldr	r2, [pc, #492]	; (800587c <HAL_RCC_OscConfig+0x280>)
 8005690:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005694:	6013      	str	r3, [r2, #0]
 8005696:	e01d      	b.n	80056d4 <HAL_RCC_OscConfig+0xd8>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056a0:	d10c      	bne.n	80056bc <HAL_RCC_OscConfig+0xc0>
 80056a2:	4b76      	ldr	r3, [pc, #472]	; (800587c <HAL_RCC_OscConfig+0x280>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a75      	ldr	r2, [pc, #468]	; (800587c <HAL_RCC_OscConfig+0x280>)
 80056a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	4b73      	ldr	r3, [pc, #460]	; (800587c <HAL_RCC_OscConfig+0x280>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a72      	ldr	r2, [pc, #456]	; (800587c <HAL_RCC_OscConfig+0x280>)
 80056b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056b8:	6013      	str	r3, [r2, #0]
 80056ba:	e00b      	b.n	80056d4 <HAL_RCC_OscConfig+0xd8>
 80056bc:	4b6f      	ldr	r3, [pc, #444]	; (800587c <HAL_RCC_OscConfig+0x280>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a6e      	ldr	r2, [pc, #440]	; (800587c <HAL_RCC_OscConfig+0x280>)
 80056c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056c6:	6013      	str	r3, [r2, #0]
 80056c8:	4b6c      	ldr	r3, [pc, #432]	; (800587c <HAL_RCC_OscConfig+0x280>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a6b      	ldr	r2, [pc, #428]	; (800587c <HAL_RCC_OscConfig+0x280>)
 80056ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d013      	beq.n	8005704 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056dc:	f7fc fa6a 	bl	8001bb4 <HAL_GetTick>
 80056e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056e2:	e008      	b.n	80056f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056e4:	f7fc fa66 	bl	8001bb4 <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	2b64      	cmp	r3, #100	; 0x64
 80056f0:	d901      	bls.n	80056f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e229      	b.n	8005b4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056f6:	4b61      	ldr	r3, [pc, #388]	; (800587c <HAL_RCC_OscConfig+0x280>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d0f0      	beq.n	80056e4 <HAL_RCC_OscConfig+0xe8>
 8005702:	e014      	b.n	800572e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005704:	f7fc fa56 	bl	8001bb4 <HAL_GetTick>
 8005708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800570a:	e008      	b.n	800571e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800570c:	f7fc fa52 	bl	8001bb4 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b64      	cmp	r3, #100	; 0x64
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e215      	b.n	8005b4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800571e:	4b57      	ldr	r3, [pc, #348]	; (800587c <HAL_RCC_OscConfig+0x280>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1f0      	bne.n	800570c <HAL_RCC_OscConfig+0x110>
 800572a:	e000      	b.n	800572e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800572c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	2b00      	cmp	r3, #0
 8005738:	d069      	beq.n	800580e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800573a:	4b50      	ldr	r3, [pc, #320]	; (800587c <HAL_RCC_OscConfig+0x280>)
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f003 030c 	and.w	r3, r3, #12
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00b      	beq.n	800575e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005746:	4b4d      	ldr	r3, [pc, #308]	; (800587c <HAL_RCC_OscConfig+0x280>)
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f003 030c 	and.w	r3, r3, #12
 800574e:	2b08      	cmp	r3, #8
 8005750:	d11c      	bne.n	800578c <HAL_RCC_OscConfig+0x190>
 8005752:	4b4a      	ldr	r3, [pc, #296]	; (800587c <HAL_RCC_OscConfig+0x280>)
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d116      	bne.n	800578c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800575e:	4b47      	ldr	r3, [pc, #284]	; (800587c <HAL_RCC_OscConfig+0x280>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0302 	and.w	r3, r3, #2
 8005766:	2b00      	cmp	r3, #0
 8005768:	d005      	beq.n	8005776 <HAL_RCC_OscConfig+0x17a>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d001      	beq.n	8005776 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e1e9      	b.n	8005b4a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005776:	4b41      	ldr	r3, [pc, #260]	; (800587c <HAL_RCC_OscConfig+0x280>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	00db      	lsls	r3, r3, #3
 8005784:	493d      	ldr	r1, [pc, #244]	; (800587c <HAL_RCC_OscConfig+0x280>)
 8005786:	4313      	orrs	r3, r2
 8005788:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800578a:	e040      	b.n	800580e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d023      	beq.n	80057dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005794:	4b39      	ldr	r3, [pc, #228]	; (800587c <HAL_RCC_OscConfig+0x280>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a38      	ldr	r2, [pc, #224]	; (800587c <HAL_RCC_OscConfig+0x280>)
 800579a:	f043 0301 	orr.w	r3, r3, #1
 800579e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a0:	f7fc fa08 	bl	8001bb4 <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057a8:	f7fc fa04 	bl	8001bb4 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e1c7      	b.n	8005b4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057ba:	4b30      	ldr	r3, [pc, #192]	; (800587c <HAL_RCC_OscConfig+0x280>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d0f0      	beq.n	80057a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057c6:	4b2d      	ldr	r3, [pc, #180]	; (800587c <HAL_RCC_OscConfig+0x280>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	00db      	lsls	r3, r3, #3
 80057d4:	4929      	ldr	r1, [pc, #164]	; (800587c <HAL_RCC_OscConfig+0x280>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	600b      	str	r3, [r1, #0]
 80057da:	e018      	b.n	800580e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057dc:	4b27      	ldr	r3, [pc, #156]	; (800587c <HAL_RCC_OscConfig+0x280>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a26      	ldr	r2, [pc, #152]	; (800587c <HAL_RCC_OscConfig+0x280>)
 80057e2:	f023 0301 	bic.w	r3, r3, #1
 80057e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e8:	f7fc f9e4 	bl	8001bb4 <HAL_GetTick>
 80057ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057ee:	e008      	b.n	8005802 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057f0:	f7fc f9e0 	bl	8001bb4 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e1a3      	b.n	8005b4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005802:	4b1e      	ldr	r3, [pc, #120]	; (800587c <HAL_RCC_OscConfig+0x280>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1f0      	bne.n	80057f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0308 	and.w	r3, r3, #8
 8005816:	2b00      	cmp	r3, #0
 8005818:	d038      	beq.n	800588c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d019      	beq.n	8005856 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005822:	4b16      	ldr	r3, [pc, #88]	; (800587c <HAL_RCC_OscConfig+0x280>)
 8005824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005826:	4a15      	ldr	r2, [pc, #84]	; (800587c <HAL_RCC_OscConfig+0x280>)
 8005828:	f043 0301 	orr.w	r3, r3, #1
 800582c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800582e:	f7fc f9c1 	bl	8001bb4 <HAL_GetTick>
 8005832:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005834:	e008      	b.n	8005848 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005836:	f7fc f9bd 	bl	8001bb4 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	2b02      	cmp	r3, #2
 8005842:	d901      	bls.n	8005848 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e180      	b.n	8005b4a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005848:	4b0c      	ldr	r3, [pc, #48]	; (800587c <HAL_RCC_OscConfig+0x280>)
 800584a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800584c:	f003 0302 	and.w	r3, r3, #2
 8005850:	2b00      	cmp	r3, #0
 8005852:	d0f0      	beq.n	8005836 <HAL_RCC_OscConfig+0x23a>
 8005854:	e01a      	b.n	800588c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005856:	4b09      	ldr	r3, [pc, #36]	; (800587c <HAL_RCC_OscConfig+0x280>)
 8005858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800585a:	4a08      	ldr	r2, [pc, #32]	; (800587c <HAL_RCC_OscConfig+0x280>)
 800585c:	f023 0301 	bic.w	r3, r3, #1
 8005860:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005862:	f7fc f9a7 	bl	8001bb4 <HAL_GetTick>
 8005866:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005868:	e00a      	b.n	8005880 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800586a:	f7fc f9a3 	bl	8001bb4 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d903      	bls.n	8005880 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e166      	b.n	8005b4a <HAL_RCC_OscConfig+0x54e>
 800587c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005880:	4b92      	ldr	r3, [pc, #584]	; (8005acc <HAL_RCC_OscConfig+0x4d0>)
 8005882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1ee      	bne.n	800586a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0304 	and.w	r3, r3, #4
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 80a4 	beq.w	80059e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800589a:	4b8c      	ldr	r3, [pc, #560]	; (8005acc <HAL_RCC_OscConfig+0x4d0>)
 800589c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10d      	bne.n	80058c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80058a6:	4b89      	ldr	r3, [pc, #548]	; (8005acc <HAL_RCC_OscConfig+0x4d0>)
 80058a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058aa:	4a88      	ldr	r2, [pc, #544]	; (8005acc <HAL_RCC_OscConfig+0x4d0>)
 80058ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058b0:	6413      	str	r3, [r2, #64]	; 0x40
 80058b2:	4b86      	ldr	r3, [pc, #536]	; (8005acc <HAL_RCC_OscConfig+0x4d0>)
 80058b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ba:	60bb      	str	r3, [r7, #8]
 80058bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058be:	2301      	movs	r3, #1
 80058c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058c2:	4b83      	ldr	r3, [pc, #524]	; (8005ad0 <HAL_RCC_OscConfig+0x4d4>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d118      	bne.n	8005900 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80058ce:	4b80      	ldr	r3, [pc, #512]	; (8005ad0 <HAL_RCC_OscConfig+0x4d4>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a7f      	ldr	r2, [pc, #508]	; (8005ad0 <HAL_RCC_OscConfig+0x4d4>)
 80058d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058da:	f7fc f96b 	bl	8001bb4 <HAL_GetTick>
 80058de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058e0:	e008      	b.n	80058f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058e2:	f7fc f967 	bl	8001bb4 <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	2b64      	cmp	r3, #100	; 0x64
 80058ee:	d901      	bls.n	80058f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e12a      	b.n	8005b4a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058f4:	4b76      	ldr	r3, [pc, #472]	; (8005ad0 <HAL_RCC_OscConfig+0x4d4>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d0f0      	beq.n	80058e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d106      	bne.n	8005916 <HAL_RCC_OscConfig+0x31a>
 8005908:	4b70      	ldr	r3, [pc, #448]	; (8005acc <HAL_RCC_OscConfig+0x4d0>)
 800590a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590c:	4a6f      	ldr	r2, [pc, #444]	; (8005acc <HAL_RCC_OscConfig+0x4d0>)
 800590e:	f043 0301 	orr.w	r3, r3, #1
 8005912:	6713      	str	r3, [r2, #112]	; 0x70
 8005914:	e02d      	b.n	8005972 <HAL_RCC_OscConfig+0x376>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10c      	bne.n	8005938 <HAL_RCC_OscConfig+0x33c>
 800591e:	4b6b      	ldr	r3, [pc, #428]	; (8005acc <HAL_RCC_OscConfig+0x4d0>)
 8005920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005922:	4a6a      	ldr	r2, [pc, #424]	; (8005acc <HAL_RCC_OscConfig+0x4d0>)
 8005924:	f023 0301 	bic.w	r3, r3, #1
 8005928:	6713      	str	r3, [r2, #112]	; 0x70
 800592a:	4b68      	ldr	r3, [pc, #416]	; (8005acc <HAL_RCC_OscConfig+0x4d0>)
 800592c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800592e:	4a67      	ldr	r2, [pc, #412]	; (8005acc <HAL_RCC_OscConfig+0x4d0>)
 8005930:	f023 0304 	bic.w	r3, r3, #4
 8005934:	6713      	str	r3, [r2, #112]	; 0x70
 8005936:	e01c      	b.n	8005972 <HAL_RCC_OscConfig+0x376>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	2b05      	cmp	r3, #5
 800593e:	d10c      	bne.n	800595a <HAL_RCC_OscConfig+0x35e>
 8005940:	4b62      	ldr	r3, [pc, #392]	; (8005acc <HAL_RCC_OscConfig+0x4d0>)
 8005942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005944:	4a61      	ldr	r2, [pc, #388]	; (8005acc <HAL_RCC_OscConfig+0x4d0>)
 8005946:	f043 0304 	orr.w	r3, r3, #4
 800594a:	6713      	str	r3, [r2, #112]	; 0x70
 800594c:	4b5f      	ldr	r3, [pc, #380]	; (8005acc <HAL_RCC_OscConfig+0x4d0>)
 800594e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005950:	4a5e      	ldr	r2, [pc, #376]	; (8005acc <HAL_RCC_OscConfig+0x4d0>)
 8005952:	f043 0301 	orr.w	r3, r3, #1
 8005956:	6713      	str	r3, [r2, #112]	; 0x70
 8005958:	e00b      	b.n	8005972 <HAL_RCC_OscConfig+0x376>
 800595a:	4b5c      	ldr	r3, [pc, #368]	; (8005acc <HAL_RCC_OscConfig+0x4d0>)
 800595c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800595e:	4a5b      	ldr	r2, [pc, #364]	; (8005acc <HAL_RCC_OscConfig+0x4d0>)
 8005960:	f023 0301 	bic.w	r3, r3, #1
 8005964:	6713      	str	r3, [r2, #112]	; 0x70
 8005966:	4b59      	ldr	r3, [pc, #356]	; (8005acc <HAL_RCC_OscConfig+0x4d0>)
 8005968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596a:	4a58      	ldr	r2, [pc, #352]	; (8005acc <HAL_RCC_OscConfig+0x4d0>)
 800596c:	f023 0304 	bic.w	r3, r3, #4
 8005970:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d015      	beq.n	80059a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800597a:	f7fc f91b 	bl	8001bb4 <HAL_GetTick>
 800597e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005980:	e00a      	b.n	8005998 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005982:	f7fc f917 	bl	8001bb4 <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005990:	4293      	cmp	r3, r2
 8005992:	d901      	bls.n	8005998 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e0d8      	b.n	8005b4a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005998:	4b4c      	ldr	r3, [pc, #304]	; (8005acc <HAL_RCC_OscConfig+0x4d0>)
 800599a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599c:	f003 0302 	and.w	r3, r3, #2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d0ee      	beq.n	8005982 <HAL_RCC_OscConfig+0x386>
 80059a4:	e014      	b.n	80059d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a6:	f7fc f905 	bl	8001bb4 <HAL_GetTick>
 80059aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059ac:	e00a      	b.n	80059c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059ae:	f7fc f901 	bl	8001bb4 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80059bc:	4293      	cmp	r3, r2
 80059be:	d901      	bls.n	80059c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e0c2      	b.n	8005b4a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059c4:	4b41      	ldr	r3, [pc, #260]	; (8005acc <HAL_RCC_OscConfig+0x4d0>)
 80059c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1ee      	bne.n	80059ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80059d0:	7dfb      	ldrb	r3, [r7, #23]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d105      	bne.n	80059e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059d6:	4b3d      	ldr	r3, [pc, #244]	; (8005acc <HAL_RCC_OscConfig+0x4d0>)
 80059d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059da:	4a3c      	ldr	r2, [pc, #240]	; (8005acc <HAL_RCC_OscConfig+0x4d0>)
 80059dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f000 80ae 	beq.w	8005b48 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059ec:	4b37      	ldr	r3, [pc, #220]	; (8005acc <HAL_RCC_OscConfig+0x4d0>)
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f003 030c 	and.w	r3, r3, #12
 80059f4:	2b08      	cmp	r3, #8
 80059f6:	d06d      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d14b      	bne.n	8005a98 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a00:	4b32      	ldr	r3, [pc, #200]	; (8005acc <HAL_RCC_OscConfig+0x4d0>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a31      	ldr	r2, [pc, #196]	; (8005acc <HAL_RCC_OscConfig+0x4d0>)
 8005a06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a0c:	f7fc f8d2 	bl	8001bb4 <HAL_GetTick>
 8005a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a12:	e008      	b.n	8005a26 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a14:	f7fc f8ce 	bl	8001bb4 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e091      	b.n	8005b4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a26:	4b29      	ldr	r3, [pc, #164]	; (8005acc <HAL_RCC_OscConfig+0x4d0>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1f0      	bne.n	8005a14 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	69da      	ldr	r2, [r3, #28]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a40:	019b      	lsls	r3, r3, #6
 8005a42:	431a      	orrs	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a48:	085b      	lsrs	r3, r3, #1
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	041b      	lsls	r3, r3, #16
 8005a4e:	431a      	orrs	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a54:	061b      	lsls	r3, r3, #24
 8005a56:	431a      	orrs	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5c:	071b      	lsls	r3, r3, #28
 8005a5e:	491b      	ldr	r1, [pc, #108]	; (8005acc <HAL_RCC_OscConfig+0x4d0>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a64:	4b19      	ldr	r3, [pc, #100]	; (8005acc <HAL_RCC_OscConfig+0x4d0>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a18      	ldr	r2, [pc, #96]	; (8005acc <HAL_RCC_OscConfig+0x4d0>)
 8005a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a70:	f7fc f8a0 	bl	8001bb4 <HAL_GetTick>
 8005a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a76:	e008      	b.n	8005a8a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a78:	f7fc f89c 	bl	8001bb4 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e05f      	b.n	8005b4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a8a:	4b10      	ldr	r3, [pc, #64]	; (8005acc <HAL_RCC_OscConfig+0x4d0>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d0f0      	beq.n	8005a78 <HAL_RCC_OscConfig+0x47c>
 8005a96:	e057      	b.n	8005b48 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a98:	4b0c      	ldr	r3, [pc, #48]	; (8005acc <HAL_RCC_OscConfig+0x4d0>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a0b      	ldr	r2, [pc, #44]	; (8005acc <HAL_RCC_OscConfig+0x4d0>)
 8005a9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005aa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa4:	f7fc f886 	bl	8001bb4 <HAL_GetTick>
 8005aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aaa:	e008      	b.n	8005abe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aac:	f7fc f882 	bl	8001bb4 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d901      	bls.n	8005abe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e045      	b.n	8005b4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005abe:	4b03      	ldr	r3, [pc, #12]	; (8005acc <HAL_RCC_OscConfig+0x4d0>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1f0      	bne.n	8005aac <HAL_RCC_OscConfig+0x4b0>
 8005aca:	e03d      	b.n	8005b48 <HAL_RCC_OscConfig+0x54c>
 8005acc:	40023800 	.word	0x40023800
 8005ad0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005ad4:	4b1f      	ldr	r3, [pc, #124]	; (8005b54 <HAL_RCC_OscConfig+0x558>)
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d030      	beq.n	8005b44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d129      	bne.n	8005b44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d122      	bne.n	8005b44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b04:	4013      	ands	r3, r2
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b0a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d119      	bne.n	8005b44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1a:	085b      	lsrs	r3, r3, #1
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d10f      	bne.n	8005b44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d107      	bne.n	8005b44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d001      	beq.n	8005b48 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e000      	b.n	8005b4a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3718      	adds	r7, #24
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	40023800 	.word	0x40023800

08005b58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005b62:	2300      	movs	r3, #0
 8005b64:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d101      	bne.n	8005b70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e0d0      	b.n	8005d12 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b70:	4b6a      	ldr	r3, [pc, #424]	; (8005d1c <HAL_RCC_ClockConfig+0x1c4>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 030f 	and.w	r3, r3, #15
 8005b78:	683a      	ldr	r2, [r7, #0]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d910      	bls.n	8005ba0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b7e:	4b67      	ldr	r3, [pc, #412]	; (8005d1c <HAL_RCC_ClockConfig+0x1c4>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f023 020f 	bic.w	r2, r3, #15
 8005b86:	4965      	ldr	r1, [pc, #404]	; (8005d1c <HAL_RCC_ClockConfig+0x1c4>)
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b8e:	4b63      	ldr	r3, [pc, #396]	; (8005d1c <HAL_RCC_ClockConfig+0x1c4>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 030f 	and.w	r3, r3, #15
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d001      	beq.n	8005ba0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e0b8      	b.n	8005d12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0302 	and.w	r3, r3, #2
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d020      	beq.n	8005bee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0304 	and.w	r3, r3, #4
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d005      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bb8:	4b59      	ldr	r3, [pc, #356]	; (8005d20 <HAL_RCC_ClockConfig+0x1c8>)
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	4a58      	ldr	r2, [pc, #352]	; (8005d20 <HAL_RCC_ClockConfig+0x1c8>)
 8005bbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005bc2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0308 	and.w	r3, r3, #8
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d005      	beq.n	8005bdc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bd0:	4b53      	ldr	r3, [pc, #332]	; (8005d20 <HAL_RCC_ClockConfig+0x1c8>)
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	4a52      	ldr	r2, [pc, #328]	; (8005d20 <HAL_RCC_ClockConfig+0x1c8>)
 8005bd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005bda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bdc:	4b50      	ldr	r3, [pc, #320]	; (8005d20 <HAL_RCC_ClockConfig+0x1c8>)
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	494d      	ldr	r1, [pc, #308]	; (8005d20 <HAL_RCC_ClockConfig+0x1c8>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d040      	beq.n	8005c7c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d107      	bne.n	8005c12 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c02:	4b47      	ldr	r3, [pc, #284]	; (8005d20 <HAL_RCC_ClockConfig+0x1c8>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d115      	bne.n	8005c3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e07f      	b.n	8005d12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d107      	bne.n	8005c2a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c1a:	4b41      	ldr	r3, [pc, #260]	; (8005d20 <HAL_RCC_ClockConfig+0x1c8>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d109      	bne.n	8005c3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e073      	b.n	8005d12 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c2a:	4b3d      	ldr	r3, [pc, #244]	; (8005d20 <HAL_RCC_ClockConfig+0x1c8>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e06b      	b.n	8005d12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c3a:	4b39      	ldr	r3, [pc, #228]	; (8005d20 <HAL_RCC_ClockConfig+0x1c8>)
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f023 0203 	bic.w	r2, r3, #3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	4936      	ldr	r1, [pc, #216]	; (8005d20 <HAL_RCC_ClockConfig+0x1c8>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c4c:	f7fb ffb2 	bl	8001bb4 <HAL_GetTick>
 8005c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c52:	e00a      	b.n	8005c6a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c54:	f7fb ffae 	bl	8001bb4 <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e053      	b.n	8005d12 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c6a:	4b2d      	ldr	r3, [pc, #180]	; (8005d20 <HAL_RCC_ClockConfig+0x1c8>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f003 020c 	and.w	r2, r3, #12
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d1eb      	bne.n	8005c54 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c7c:	4b27      	ldr	r3, [pc, #156]	; (8005d1c <HAL_RCC_ClockConfig+0x1c4>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 030f 	and.w	r3, r3, #15
 8005c84:	683a      	ldr	r2, [r7, #0]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d210      	bcs.n	8005cac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c8a:	4b24      	ldr	r3, [pc, #144]	; (8005d1c <HAL_RCC_ClockConfig+0x1c4>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f023 020f 	bic.w	r2, r3, #15
 8005c92:	4922      	ldr	r1, [pc, #136]	; (8005d1c <HAL_RCC_ClockConfig+0x1c4>)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c9a:	4b20      	ldr	r3, [pc, #128]	; (8005d1c <HAL_RCC_ClockConfig+0x1c4>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 030f 	and.w	r3, r3, #15
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d001      	beq.n	8005cac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e032      	b.n	8005d12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0304 	and.w	r3, r3, #4
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d008      	beq.n	8005cca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cb8:	4b19      	ldr	r3, [pc, #100]	; (8005d20 <HAL_RCC_ClockConfig+0x1c8>)
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	4916      	ldr	r1, [pc, #88]	; (8005d20 <HAL_RCC_ClockConfig+0x1c8>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0308 	and.w	r3, r3, #8
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d009      	beq.n	8005cea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005cd6:	4b12      	ldr	r3, [pc, #72]	; (8005d20 <HAL_RCC_ClockConfig+0x1c8>)
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	490e      	ldr	r1, [pc, #56]	; (8005d20 <HAL_RCC_ClockConfig+0x1c8>)
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005cea:	f000 f821 	bl	8005d30 <HAL_RCC_GetSysClockFreq>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	4b0b      	ldr	r3, [pc, #44]	; (8005d20 <HAL_RCC_ClockConfig+0x1c8>)
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	091b      	lsrs	r3, r3, #4
 8005cf6:	f003 030f 	and.w	r3, r3, #15
 8005cfa:	490a      	ldr	r1, [pc, #40]	; (8005d24 <HAL_RCC_ClockConfig+0x1cc>)
 8005cfc:	5ccb      	ldrb	r3, [r1, r3]
 8005cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8005d02:	4a09      	ldr	r2, [pc, #36]	; (8005d28 <HAL_RCC_ClockConfig+0x1d0>)
 8005d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005d06:	4b09      	ldr	r3, [pc, #36]	; (8005d2c <HAL_RCC_ClockConfig+0x1d4>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7fb ff0e 	bl	8001b2c <HAL_InitTick>

  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	40023c00 	.word	0x40023c00
 8005d20:	40023800 	.word	0x40023800
 8005d24:	08011eb8 	.word	0x08011eb8
 8005d28:	20000004 	.word	0x20000004
 8005d2c:	20000008 	.word	0x20000008

08005d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d34:	b094      	sub	sp, #80	; 0x50
 8005d36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	647b      	str	r3, [r7, #68]	; 0x44
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d40:	2300      	movs	r3, #0
 8005d42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005d44:	2300      	movs	r3, #0
 8005d46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d48:	4b79      	ldr	r3, [pc, #484]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f003 030c 	and.w	r3, r3, #12
 8005d50:	2b08      	cmp	r3, #8
 8005d52:	d00d      	beq.n	8005d70 <HAL_RCC_GetSysClockFreq+0x40>
 8005d54:	2b08      	cmp	r3, #8
 8005d56:	f200 80e1 	bhi.w	8005f1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d002      	beq.n	8005d64 <HAL_RCC_GetSysClockFreq+0x34>
 8005d5e:	2b04      	cmp	r3, #4
 8005d60:	d003      	beq.n	8005d6a <HAL_RCC_GetSysClockFreq+0x3a>
 8005d62:	e0db      	b.n	8005f1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d64:	4b73      	ldr	r3, [pc, #460]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d68:	e0db      	b.n	8005f22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d6a:	4b73      	ldr	r3, [pc, #460]	; (8005f38 <HAL_RCC_GetSysClockFreq+0x208>)
 8005d6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d6e:	e0d8      	b.n	8005f22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d70:	4b6f      	ldr	r3, [pc, #444]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d78:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005d7a:	4b6d      	ldr	r3, [pc, #436]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d063      	beq.n	8005e4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d86:	4b6a      	ldr	r3, [pc, #424]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	099b      	lsrs	r3, r3, #6
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d98:	633b      	str	r3, [r7, #48]	; 0x30
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005da2:	4622      	mov	r2, r4
 8005da4:	462b      	mov	r3, r5
 8005da6:	f04f 0000 	mov.w	r0, #0
 8005daa:	f04f 0100 	mov.w	r1, #0
 8005dae:	0159      	lsls	r1, r3, #5
 8005db0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005db4:	0150      	lsls	r0, r2, #5
 8005db6:	4602      	mov	r2, r0
 8005db8:	460b      	mov	r3, r1
 8005dba:	4621      	mov	r1, r4
 8005dbc:	1a51      	subs	r1, r2, r1
 8005dbe:	6139      	str	r1, [r7, #16]
 8005dc0:	4629      	mov	r1, r5
 8005dc2:	eb63 0301 	sbc.w	r3, r3, r1
 8005dc6:	617b      	str	r3, [r7, #20]
 8005dc8:	f04f 0200 	mov.w	r2, #0
 8005dcc:	f04f 0300 	mov.w	r3, #0
 8005dd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005dd4:	4659      	mov	r1, fp
 8005dd6:	018b      	lsls	r3, r1, #6
 8005dd8:	4651      	mov	r1, sl
 8005dda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005dde:	4651      	mov	r1, sl
 8005de0:	018a      	lsls	r2, r1, #6
 8005de2:	4651      	mov	r1, sl
 8005de4:	ebb2 0801 	subs.w	r8, r2, r1
 8005de8:	4659      	mov	r1, fp
 8005dea:	eb63 0901 	sbc.w	r9, r3, r1
 8005dee:	f04f 0200 	mov.w	r2, #0
 8005df2:	f04f 0300 	mov.w	r3, #0
 8005df6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005dfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005dfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e02:	4690      	mov	r8, r2
 8005e04:	4699      	mov	r9, r3
 8005e06:	4623      	mov	r3, r4
 8005e08:	eb18 0303 	adds.w	r3, r8, r3
 8005e0c:	60bb      	str	r3, [r7, #8]
 8005e0e:	462b      	mov	r3, r5
 8005e10:	eb49 0303 	adc.w	r3, r9, r3
 8005e14:	60fb      	str	r3, [r7, #12]
 8005e16:	f04f 0200 	mov.w	r2, #0
 8005e1a:	f04f 0300 	mov.w	r3, #0
 8005e1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e22:	4629      	mov	r1, r5
 8005e24:	024b      	lsls	r3, r1, #9
 8005e26:	4621      	mov	r1, r4
 8005e28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e2c:	4621      	mov	r1, r4
 8005e2e:	024a      	lsls	r2, r1, #9
 8005e30:	4610      	mov	r0, r2
 8005e32:	4619      	mov	r1, r3
 8005e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e36:	2200      	movs	r2, #0
 8005e38:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e40:	f7fa fa4e 	bl	80002e0 <__aeabi_uldivmod>
 8005e44:	4602      	mov	r2, r0
 8005e46:	460b      	mov	r3, r1
 8005e48:	4613      	mov	r3, r2
 8005e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e4c:	e058      	b.n	8005f00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e4e:	4b38      	ldr	r3, [pc, #224]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	099b      	lsrs	r3, r3, #6
 8005e54:	2200      	movs	r2, #0
 8005e56:	4618      	mov	r0, r3
 8005e58:	4611      	mov	r1, r2
 8005e5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e5e:	623b      	str	r3, [r7, #32]
 8005e60:	2300      	movs	r3, #0
 8005e62:	627b      	str	r3, [r7, #36]	; 0x24
 8005e64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e68:	4642      	mov	r2, r8
 8005e6a:	464b      	mov	r3, r9
 8005e6c:	f04f 0000 	mov.w	r0, #0
 8005e70:	f04f 0100 	mov.w	r1, #0
 8005e74:	0159      	lsls	r1, r3, #5
 8005e76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e7a:	0150      	lsls	r0, r2, #5
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	460b      	mov	r3, r1
 8005e80:	4641      	mov	r1, r8
 8005e82:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e86:	4649      	mov	r1, r9
 8005e88:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e8c:	f04f 0200 	mov.w	r2, #0
 8005e90:	f04f 0300 	mov.w	r3, #0
 8005e94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ea0:	ebb2 040a 	subs.w	r4, r2, sl
 8005ea4:	eb63 050b 	sbc.w	r5, r3, fp
 8005ea8:	f04f 0200 	mov.w	r2, #0
 8005eac:	f04f 0300 	mov.w	r3, #0
 8005eb0:	00eb      	lsls	r3, r5, #3
 8005eb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005eb6:	00e2      	lsls	r2, r4, #3
 8005eb8:	4614      	mov	r4, r2
 8005eba:	461d      	mov	r5, r3
 8005ebc:	4643      	mov	r3, r8
 8005ebe:	18e3      	adds	r3, r4, r3
 8005ec0:	603b      	str	r3, [r7, #0]
 8005ec2:	464b      	mov	r3, r9
 8005ec4:	eb45 0303 	adc.w	r3, r5, r3
 8005ec8:	607b      	str	r3, [r7, #4]
 8005eca:	f04f 0200 	mov.w	r2, #0
 8005ece:	f04f 0300 	mov.w	r3, #0
 8005ed2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ed6:	4629      	mov	r1, r5
 8005ed8:	028b      	lsls	r3, r1, #10
 8005eda:	4621      	mov	r1, r4
 8005edc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ee0:	4621      	mov	r1, r4
 8005ee2:	028a      	lsls	r2, r1, #10
 8005ee4:	4610      	mov	r0, r2
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eea:	2200      	movs	r2, #0
 8005eec:	61bb      	str	r3, [r7, #24]
 8005eee:	61fa      	str	r2, [r7, #28]
 8005ef0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ef4:	f7fa f9f4 	bl	80002e0 <__aeabi_uldivmod>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	460b      	mov	r3, r1
 8005efc:	4613      	mov	r3, r2
 8005efe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005f00:	4b0b      	ldr	r3, [pc, #44]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	0c1b      	lsrs	r3, r3, #16
 8005f06:	f003 0303 	and.w	r3, r3, #3
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	005b      	lsls	r3, r3, #1
 8005f0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005f10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f1a:	e002      	b.n	8005f22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f1c:	4b05      	ldr	r3, [pc, #20]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3750      	adds	r7, #80	; 0x50
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f2e:	bf00      	nop
 8005f30:	40023800 	.word	0x40023800
 8005f34:	00f42400 	.word	0x00f42400
 8005f38:	007a1200 	.word	0x007a1200

08005f3c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f40:	4b03      	ldr	r3, [pc, #12]	; (8005f50 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f42:	681b      	ldr	r3, [r3, #0]
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	20000004 	.word	0x20000004

08005f54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f58:	f7ff fff0 	bl	8005f3c <HAL_RCC_GetHCLKFreq>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	4b05      	ldr	r3, [pc, #20]	; (8005f74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	0a9b      	lsrs	r3, r3, #10
 8005f64:	f003 0307 	and.w	r3, r3, #7
 8005f68:	4903      	ldr	r1, [pc, #12]	; (8005f78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f6a:	5ccb      	ldrb	r3, [r1, r3]
 8005f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	40023800 	.word	0x40023800
 8005f78:	08011ec8 	.word	0x08011ec8

08005f7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f80:	f7ff ffdc 	bl	8005f3c <HAL_RCC_GetHCLKFreq>
 8005f84:	4602      	mov	r2, r0
 8005f86:	4b05      	ldr	r3, [pc, #20]	; (8005f9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	0b5b      	lsrs	r3, r3, #13
 8005f8c:	f003 0307 	and.w	r3, r3, #7
 8005f90:	4903      	ldr	r1, [pc, #12]	; (8005fa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f92:	5ccb      	ldrb	r3, [r1, r3]
 8005f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	40023800 	.word	0x40023800
 8005fa0:	08011ec8 	.word	0x08011ec8

08005fa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b088      	sub	sp, #32
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005fac:	2300      	movs	r3, #0
 8005fae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d012      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005fcc:	4b69      	ldr	r3, [pc, #420]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	4a68      	ldr	r2, [pc, #416]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fd2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005fd6:	6093      	str	r3, [r2, #8]
 8005fd8:	4b66      	ldr	r3, [pc, #408]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fda:	689a      	ldr	r2, [r3, #8]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe0:	4964      	ldr	r1, [pc, #400]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d017      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ffe:	4b5d      	ldr	r3, [pc, #372]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006000:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006004:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800600c:	4959      	ldr	r1, [pc, #356]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800600e:	4313      	orrs	r3, r2
 8006010:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006018:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800601c:	d101      	bne.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800601e:	2301      	movs	r3, #1
 8006020:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800602a:	2301      	movs	r3, #1
 800602c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d017      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800603a:	4b4e      	ldr	r3, [pc, #312]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800603c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006040:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006048:	494a      	ldr	r1, [pc, #296]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800604a:	4313      	orrs	r3, r2
 800604c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006054:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006058:	d101      	bne.n	800605e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800605a:	2301      	movs	r3, #1
 800605c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006066:	2301      	movs	r3, #1
 8006068:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d001      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006076:	2301      	movs	r3, #1
 8006078:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0320 	and.w	r3, r3, #32
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 808b 	beq.w	800619e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006088:	4b3a      	ldr	r3, [pc, #232]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800608a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608c:	4a39      	ldr	r2, [pc, #228]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800608e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006092:	6413      	str	r3, [r2, #64]	; 0x40
 8006094:	4b37      	ldr	r3, [pc, #220]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800609c:	60bb      	str	r3, [r7, #8]
 800609e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80060a0:	4b35      	ldr	r3, [pc, #212]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a34      	ldr	r2, [pc, #208]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80060a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060ac:	f7fb fd82 	bl	8001bb4 <HAL_GetTick>
 80060b0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80060b2:	e008      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060b4:	f7fb fd7e 	bl	8001bb4 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	2b64      	cmp	r3, #100	; 0x64
 80060c0:	d901      	bls.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e38f      	b.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80060c6:	4b2c      	ldr	r3, [pc, #176]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d0f0      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80060d2:	4b28      	ldr	r3, [pc, #160]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060da:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d035      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ea:	693a      	ldr	r2, [r7, #16]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d02e      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060f0:	4b20      	ldr	r3, [pc, #128]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060f8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80060fa:	4b1e      	ldr	r3, [pc, #120]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060fe:	4a1d      	ldr	r2, [pc, #116]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006104:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006106:	4b1b      	ldr	r3, [pc, #108]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800610a:	4a1a      	ldr	r2, [pc, #104]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800610c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006110:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006112:	4a18      	ldr	r2, [pc, #96]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006118:	4b16      	ldr	r3, [pc, #88]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800611a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800611c:	f003 0301 	and.w	r3, r3, #1
 8006120:	2b01      	cmp	r3, #1
 8006122:	d114      	bne.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006124:	f7fb fd46 	bl	8001bb4 <HAL_GetTick>
 8006128:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800612a:	e00a      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800612c:	f7fb fd42 	bl	8001bb4 <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	f241 3288 	movw	r2, #5000	; 0x1388
 800613a:	4293      	cmp	r3, r2
 800613c:	d901      	bls.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e351      	b.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006142:	4b0c      	ldr	r3, [pc, #48]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006146:	f003 0302 	and.w	r3, r3, #2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d0ee      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006156:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800615a:	d111      	bne.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800615c:	4b05      	ldr	r3, [pc, #20]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006168:	4b04      	ldr	r3, [pc, #16]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800616a:	400b      	ands	r3, r1
 800616c:	4901      	ldr	r1, [pc, #4]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800616e:	4313      	orrs	r3, r2
 8006170:	608b      	str	r3, [r1, #8]
 8006172:	e00b      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006174:	40023800 	.word	0x40023800
 8006178:	40007000 	.word	0x40007000
 800617c:	0ffffcff 	.word	0x0ffffcff
 8006180:	4bac      	ldr	r3, [pc, #688]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	4aab      	ldr	r2, [pc, #684]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006186:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800618a:	6093      	str	r3, [r2, #8]
 800618c:	4ba9      	ldr	r3, [pc, #676]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800618e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006198:	49a6      	ldr	r1, [pc, #664]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800619a:	4313      	orrs	r3, r2
 800619c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0310 	and.w	r3, r3, #16
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d010      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80061aa:	4ba2      	ldr	r3, [pc, #648]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061b0:	4aa0      	ldr	r2, [pc, #640]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80061ba:	4b9e      	ldr	r3, [pc, #632]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c4:	499b      	ldr	r1, [pc, #620]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061c6:	4313      	orrs	r3, r2
 80061c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00a      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80061d8:	4b96      	ldr	r3, [pc, #600]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061e6:	4993      	ldr	r1, [pc, #588]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061e8:	4313      	orrs	r3, r2
 80061ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00a      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80061fa:	4b8e      	ldr	r3, [pc, #568]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006200:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006208:	498a      	ldr	r1, [pc, #552]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800620a:	4313      	orrs	r3, r2
 800620c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00a      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800621c:	4b85      	ldr	r3, [pc, #532]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800621e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006222:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800622a:	4982      	ldr	r1, [pc, #520]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800622c:	4313      	orrs	r3, r2
 800622e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00a      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800623e:	4b7d      	ldr	r3, [pc, #500]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006244:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800624c:	4979      	ldr	r1, [pc, #484]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800624e:	4313      	orrs	r3, r2
 8006250:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00a      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006260:	4b74      	ldr	r3, [pc, #464]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006266:	f023 0203 	bic.w	r2, r3, #3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800626e:	4971      	ldr	r1, [pc, #452]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006270:	4313      	orrs	r3, r2
 8006272:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00a      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006282:	4b6c      	ldr	r3, [pc, #432]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006288:	f023 020c 	bic.w	r2, r3, #12
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006290:	4968      	ldr	r1, [pc, #416]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006292:	4313      	orrs	r3, r2
 8006294:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00a      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80062a4:	4b63      	ldr	r3, [pc, #396]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062b2:	4960      	ldr	r1, [pc, #384]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00a      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80062c6:	4b5b      	ldr	r3, [pc, #364]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062cc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062d4:	4957      	ldr	r1, [pc, #348]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00a      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80062e8:	4b52      	ldr	r3, [pc, #328]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f6:	494f      	ldr	r1, [pc, #316]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062f8:	4313      	orrs	r3, r2
 80062fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00a      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800630a:	4b4a      	ldr	r3, [pc, #296]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800630c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006310:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006318:	4946      	ldr	r1, [pc, #280]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800631a:	4313      	orrs	r3, r2
 800631c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00a      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800632c:	4b41      	ldr	r3, [pc, #260]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800632e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006332:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800633a:	493e      	ldr	r1, [pc, #248]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800633c:	4313      	orrs	r3, r2
 800633e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00a      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800634e:	4b39      	ldr	r3, [pc, #228]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006354:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800635c:	4935      	ldr	r1, [pc, #212]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800635e:	4313      	orrs	r3, r2
 8006360:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00a      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006370:	4b30      	ldr	r3, [pc, #192]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006376:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800637e:	492d      	ldr	r1, [pc, #180]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006380:	4313      	orrs	r3, r2
 8006382:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d011      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006392:	4b28      	ldr	r3, [pc, #160]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006398:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063a0:	4924      	ldr	r1, [pc, #144]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063b0:	d101      	bne.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80063b2:	2301      	movs	r3, #1
 80063b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0308 	and.w	r3, r3, #8
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80063c2:	2301      	movs	r3, #1
 80063c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00a      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063d2:	4b18      	ldr	r3, [pc, #96]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063e0:	4914      	ldr	r1, [pc, #80]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00b      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80063f4:	4b0f      	ldr	r3, [pc, #60]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006404:	490b      	ldr	r1, [pc, #44]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006406:	4313      	orrs	r3, r2
 8006408:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00f      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006418:	4b06      	ldr	r3, [pc, #24]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800641a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800641e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006428:	4902      	ldr	r1, [pc, #8]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800642a:	4313      	orrs	r3, r2
 800642c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006430:	e002      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8006432:	bf00      	nop
 8006434:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00b      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006444:	4b8a      	ldr	r3, [pc, #552]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006446:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800644a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006454:	4986      	ldr	r1, [pc, #536]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006456:	4313      	orrs	r3, r2
 8006458:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00b      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006468:	4b81      	ldr	r3, [pc, #516]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800646a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800646e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006478:	497d      	ldr	r1, [pc, #500]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800647a:	4313      	orrs	r3, r2
 800647c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d006      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800648e:	2b00      	cmp	r3, #0
 8006490:	f000 80d6 	beq.w	8006640 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006494:	4b76      	ldr	r3, [pc, #472]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a75      	ldr	r2, [pc, #468]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800649a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800649e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064a0:	f7fb fb88 	bl	8001bb4 <HAL_GetTick>
 80064a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80064a6:	e008      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80064a8:	f7fb fb84 	bl	8001bb4 <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	2b64      	cmp	r3, #100	; 0x64
 80064b4:	d901      	bls.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e195      	b.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80064ba:	4b6d      	ldr	r3, [pc, #436]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1f0      	bne.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d021      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d11d      	bne.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80064da:	4b65      	ldr	r3, [pc, #404]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064e0:	0c1b      	lsrs	r3, r3, #16
 80064e2:	f003 0303 	and.w	r3, r3, #3
 80064e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80064e8:	4b61      	ldr	r3, [pc, #388]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064ee:	0e1b      	lsrs	r3, r3, #24
 80064f0:	f003 030f 	and.w	r3, r3, #15
 80064f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	019a      	lsls	r2, r3, #6
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	041b      	lsls	r3, r3, #16
 8006500:	431a      	orrs	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	061b      	lsls	r3, r3, #24
 8006506:	431a      	orrs	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	071b      	lsls	r3, r3, #28
 800650e:	4958      	ldr	r1, [pc, #352]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006510:	4313      	orrs	r3, r2
 8006512:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d004      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800652a:	d00a      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006534:	2b00      	cmp	r3, #0
 8006536:	d02e      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006540:	d129      	bne.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006542:	4b4b      	ldr	r3, [pc, #300]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006544:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006548:	0c1b      	lsrs	r3, r3, #16
 800654a:	f003 0303 	and.w	r3, r3, #3
 800654e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006550:	4b47      	ldr	r3, [pc, #284]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006552:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006556:	0f1b      	lsrs	r3, r3, #28
 8006558:	f003 0307 	and.w	r3, r3, #7
 800655c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	019a      	lsls	r2, r3, #6
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	041b      	lsls	r3, r3, #16
 8006568:	431a      	orrs	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	061b      	lsls	r3, r3, #24
 8006570:	431a      	orrs	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	071b      	lsls	r3, r3, #28
 8006576:	493e      	ldr	r1, [pc, #248]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006578:	4313      	orrs	r3, r2
 800657a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800657e:	4b3c      	ldr	r3, [pc, #240]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006580:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006584:	f023 021f 	bic.w	r2, r3, #31
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658c:	3b01      	subs	r3, #1
 800658e:	4938      	ldr	r1, [pc, #224]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006590:	4313      	orrs	r3, r2
 8006592:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d01d      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80065a2:	4b33      	ldr	r3, [pc, #204]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065a8:	0e1b      	lsrs	r3, r3, #24
 80065aa:	f003 030f 	and.w	r3, r3, #15
 80065ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80065b0:	4b2f      	ldr	r3, [pc, #188]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065b6:	0f1b      	lsrs	r3, r3, #28
 80065b8:	f003 0307 	and.w	r3, r3, #7
 80065bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	019a      	lsls	r2, r3, #6
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	041b      	lsls	r3, r3, #16
 80065ca:	431a      	orrs	r2, r3
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	061b      	lsls	r3, r3, #24
 80065d0:	431a      	orrs	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	071b      	lsls	r3, r3, #28
 80065d6:	4926      	ldr	r1, [pc, #152]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d011      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	019a      	lsls	r2, r3, #6
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	041b      	lsls	r3, r3, #16
 80065f6:	431a      	orrs	r2, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	061b      	lsls	r3, r3, #24
 80065fe:	431a      	orrs	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	071b      	lsls	r3, r3, #28
 8006606:	491a      	ldr	r1, [pc, #104]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006608:	4313      	orrs	r3, r2
 800660a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800660e:	4b18      	ldr	r3, [pc, #96]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a17      	ldr	r2, [pc, #92]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006614:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006618:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800661a:	f7fb facb 	bl	8001bb4 <HAL_GetTick>
 800661e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006620:	e008      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006622:	f7fb fac7 	bl	8001bb4 <HAL_GetTick>
 8006626:	4602      	mov	r2, r0
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	2b64      	cmp	r3, #100	; 0x64
 800662e:	d901      	bls.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e0d8      	b.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006634:	4b0e      	ldr	r3, [pc, #56]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d0f0      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	2b01      	cmp	r3, #1
 8006644:	f040 80ce 	bne.w	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006648:	4b09      	ldr	r3, [pc, #36]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a08      	ldr	r2, [pc, #32]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800664e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006652:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006654:	f7fb faae 	bl	8001bb4 <HAL_GetTick>
 8006658:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800665a:	e00b      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800665c:	f7fb faaa 	bl	8001bb4 <HAL_GetTick>
 8006660:	4602      	mov	r2, r0
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	2b64      	cmp	r3, #100	; 0x64
 8006668:	d904      	bls.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e0bb      	b.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800666e:	bf00      	nop
 8006670:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006674:	4b5e      	ldr	r3, [pc, #376]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800667c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006680:	d0ec      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006692:	2b00      	cmp	r3, #0
 8006694:	d009      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d02e      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d12a      	bne.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80066aa:	4b51      	ldr	r3, [pc, #324]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b0:	0c1b      	lsrs	r3, r3, #16
 80066b2:	f003 0303 	and.w	r3, r3, #3
 80066b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80066b8:	4b4d      	ldr	r3, [pc, #308]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066be:	0f1b      	lsrs	r3, r3, #28
 80066c0:	f003 0307 	and.w	r3, r3, #7
 80066c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	695b      	ldr	r3, [r3, #20]
 80066ca:	019a      	lsls	r2, r3, #6
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	041b      	lsls	r3, r3, #16
 80066d0:	431a      	orrs	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	061b      	lsls	r3, r3, #24
 80066d8:	431a      	orrs	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	071b      	lsls	r3, r3, #28
 80066de:	4944      	ldr	r1, [pc, #272]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066e0:	4313      	orrs	r3, r2
 80066e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80066e6:	4b42      	ldr	r3, [pc, #264]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f4:	3b01      	subs	r3, #1
 80066f6:	021b      	lsls	r3, r3, #8
 80066f8:	493d      	ldr	r1, [pc, #244]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d022      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006710:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006714:	d11d      	bne.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006716:	4b36      	ldr	r3, [pc, #216]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800671c:	0e1b      	lsrs	r3, r3, #24
 800671e:	f003 030f 	and.w	r3, r3, #15
 8006722:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006724:	4b32      	ldr	r3, [pc, #200]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800672a:	0f1b      	lsrs	r3, r3, #28
 800672c:	f003 0307 	and.w	r3, r3, #7
 8006730:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	019a      	lsls	r2, r3, #6
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a1b      	ldr	r3, [r3, #32]
 800673c:	041b      	lsls	r3, r3, #16
 800673e:	431a      	orrs	r2, r3
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	061b      	lsls	r3, r3, #24
 8006744:	431a      	orrs	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	071b      	lsls	r3, r3, #28
 800674a:	4929      	ldr	r1, [pc, #164]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800674c:	4313      	orrs	r3, r2
 800674e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0308 	and.w	r3, r3, #8
 800675a:	2b00      	cmp	r3, #0
 800675c:	d028      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800675e:	4b24      	ldr	r3, [pc, #144]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006764:	0e1b      	lsrs	r3, r3, #24
 8006766:	f003 030f 	and.w	r3, r3, #15
 800676a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800676c:	4b20      	ldr	r3, [pc, #128]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800676e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006772:	0c1b      	lsrs	r3, r3, #16
 8006774:	f003 0303 	and.w	r3, r3, #3
 8006778:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	019a      	lsls	r2, r3, #6
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	041b      	lsls	r3, r3, #16
 8006784:	431a      	orrs	r2, r3
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	061b      	lsls	r3, r3, #24
 800678a:	431a      	orrs	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	69db      	ldr	r3, [r3, #28]
 8006790:	071b      	lsls	r3, r3, #28
 8006792:	4917      	ldr	r1, [pc, #92]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006794:	4313      	orrs	r3, r2
 8006796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800679a:	4b15      	ldr	r3, [pc, #84]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800679c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a8:	4911      	ldr	r1, [pc, #68]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067aa:	4313      	orrs	r3, r2
 80067ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80067b0:	4b0f      	ldr	r3, [pc, #60]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a0e      	ldr	r2, [pc, #56]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067bc:	f7fb f9fa 	bl	8001bb4 <HAL_GetTick>
 80067c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80067c2:	e008      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80067c4:	f7fb f9f6 	bl	8001bb4 <HAL_GetTick>
 80067c8:	4602      	mov	r2, r0
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	2b64      	cmp	r3, #100	; 0x64
 80067d0:	d901      	bls.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e007      	b.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80067d6:	4b06      	ldr	r3, [pc, #24]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067e2:	d1ef      	bne.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3720      	adds	r7, #32
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	40023800 	.word	0x40023800

080067f4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d101      	bne.n	8006806 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e022      	b.n	800684c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b00      	cmp	r3, #0
 8006810:	d105      	bne.n	800681e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f7fa fdc1 	bl	80013a0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2203      	movs	r2, #3
 8006822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f814 	bl	8006854 <HAL_SD_InitCard>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d001      	beq.n	8006836 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e00a      	b.n	800684c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2201      	movs	r2, #1
 8006846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3708      	adds	r7, #8
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006854:	b5b0      	push	{r4, r5, r7, lr}
 8006856:	b08e      	sub	sp, #56	; 0x38
 8006858:	af04      	add	r7, sp, #16
 800685a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800685c:	2300      	movs	r3, #0
 800685e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8006860:	2300      	movs	r3, #0
 8006862:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006864:	2300      	movs	r3, #0
 8006866:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006868:	2300      	movs	r3, #0
 800686a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800686c:	2300      	movs	r3, #0
 800686e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8006870:	2376      	movs	r3, #118	; 0x76
 8006872:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681d      	ldr	r5, [r3, #0]
 8006878:	466c      	mov	r4, sp
 800687a:	f107 0314 	add.w	r3, r7, #20
 800687e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006882:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006886:	f107 0308 	add.w	r3, r7, #8
 800688a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800688c:	4628      	mov	r0, r5
 800688e:	f001 fdc5 	bl	800841c <SDMMC_Init>
 8006892:	4603      	mov	r3, r0
 8006894:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006898:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800689c:	2b00      	cmp	r3, #0
 800689e:	d001      	beq.n	80068a4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e059      	b.n	8006958 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	685a      	ldr	r2, [r3, #4]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068b2:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4618      	mov	r0, r3
 80068ba:	f001 fdf9 	bl	80084b0 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	685a      	ldr	r2, [r3, #4]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068cc:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80068ce:	2002      	movs	r0, #2
 80068d0:	f7fb f97c 	bl	8001bcc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 ff59 	bl	800778c <SD_PowerON>
 80068da:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068dc:	6a3b      	ldr	r3, [r7, #32]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00b      	beq.n	80068fa <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068ee:	6a3b      	ldr	r3, [r7, #32]
 80068f0:	431a      	orrs	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e02e      	b.n	8006958 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 fe78 	bl	80075f0 <SD_InitCard>
 8006900:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006902:	6a3b      	ldr	r3, [r7, #32]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00b      	beq.n	8006920 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006914:	6a3b      	ldr	r3, [r7, #32]
 8006916:	431a      	orrs	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e01b      	b.n	8006958 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006928:	4618      	mov	r0, r3
 800692a:	f001 fe53 	bl	80085d4 <SDMMC_CmdBlockLength>
 800692e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006930:	6a3b      	ldr	r3, [r7, #32]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00f      	beq.n	8006956 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a09      	ldr	r2, [pc, #36]	; (8006960 <HAL_SD_InitCard+0x10c>)
 800693c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006942:	6a3b      	ldr	r3, [r7, #32]
 8006944:	431a      	orrs	r2, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e000      	b.n	8006958 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3728      	adds	r7, #40	; 0x28
 800695c:	46bd      	mov	sp, r7
 800695e:	bdb0      	pop	{r4, r5, r7, pc}
 8006960:	004005ff 	.word	0x004005ff

08006964 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b08c      	sub	sp, #48	; 0x30
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
 8006970:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d107      	bne.n	800698c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006980:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e0c3      	b.n	8006b14 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006992:	b2db      	uxtb	r3, r3
 8006994:	2b01      	cmp	r3, #1
 8006996:	f040 80bc 	bne.w	8006b12 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80069a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	441a      	add	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d907      	bls.n	80069be <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e0aa      	b.n	8006b14 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2203      	movs	r2, #3
 80069c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2200      	movs	r2, #0
 80069cc:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80069dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e2:	4a4e      	ldr	r2, [pc, #312]	; (8006b1c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80069e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ea:	4a4d      	ldr	r2, [pc, #308]	; (8006b20 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80069ec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f2:	2200      	movs	r2, #0
 80069f4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fa:	2200      	movs	r2, #0
 80069fc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0e:	689a      	ldr	r2, [r3, #8]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	430a      	orrs	r2, r1
 8006a18:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	3380      	adds	r3, #128	; 0x80
 8006a24:	4619      	mov	r1, r3
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	025b      	lsls	r3, r3, #9
 8006a2c:	089b      	lsrs	r3, r3, #2
 8006a2e:	f7fc f8b5 	bl	8002b9c <HAL_DMA_Start_IT>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d017      	beq.n	8006a68 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8006a46:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a35      	ldr	r2, [pc, #212]	; (8006b24 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8006a4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a54:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e055      	b.n	8006b14 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f042 0208 	orr.w	r2, r2, #8
 8006a76:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d002      	beq.n	8006a86 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8006a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a82:	025b      	lsls	r3, r3, #9
 8006a84:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006a86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a8a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	025b      	lsls	r3, r3, #9
 8006a90:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006a92:	2390      	movs	r3, #144	; 0x90
 8006a94:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006a96:	2302      	movs	r3, #2
 8006a98:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f107 0210 	add.w	r2, r7, #16
 8006aaa:	4611      	mov	r1, r2
 8006aac:	4618      	mov	r0, r3
 8006aae:	f001 fd65 	bl	800857c <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d90a      	bls.n	8006ace <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2282      	movs	r2, #130	; 0x82
 8006abc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f001 fdc9 	bl	800865c <SDMMC_CmdReadMultiBlock>
 8006aca:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006acc:	e009      	b.n	8006ae2 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2281      	movs	r2, #129	; 0x81
 8006ad2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ada:	4618      	mov	r0, r3
 8006adc:	f001 fd9c 	bl	8008618 <SDMMC_CmdReadSingleBlock>
 8006ae0:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d012      	beq.n	8006b0e <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a0d      	ldr	r2, [pc, #52]	; (8006b24 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8006aee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af6:	431a      	orrs	r2, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e002      	b.n	8006b14 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	e000      	b.n	8006b14 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8006b12:	2302      	movs	r3, #2
  }
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3730      	adds	r7, #48	; 0x30
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	080073ff 	.word	0x080073ff
 8006b20:	08007471 	.word	0x08007471
 8006b24:	004005ff 	.word	0x004005ff

08006b28 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b08c      	sub	sp, #48	; 0x30
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
 8006b34:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d107      	bne.n	8006b50 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b44:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e0c6      	b.n	8006cde <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	f040 80bf 	bne.w	8006cdc <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2200      	movs	r2, #0
 8006b62:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006b64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	441a      	add	r2, r3
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d907      	bls.n	8006b82 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b76:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e0ad      	b.n	8006cde <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2203      	movs	r2, #3
 8006b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f042 021a 	orr.w	r2, r2, #26
 8006ba0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba6:	4a50      	ldr	r2, [pc, #320]	; (8006ce8 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8006ba8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bae:	4a4f      	ldr	r2, [pc, #316]	; (8006cec <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8006bb0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d002      	beq.n	8006bc8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8006bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc4:	025b      	lsls	r3, r3, #9
 8006bc6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d90a      	bls.n	8006be4 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	22a0      	movs	r2, #160	; 0xa0
 8006bd2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f001 fd82 	bl	80086e4 <SDMMC_CmdWriteMultiBlock>
 8006be0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006be2:	e009      	b.n	8006bf8 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2290      	movs	r2, #144	; 0x90
 8006be8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f001 fd55 	bl	80086a0 <SDMMC_CmdWriteSingleBlock>
 8006bf6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d012      	beq.n	8006c24 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a3b      	ldr	r2, [pc, #236]	; (8006cf0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006c04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0c:	431a      	orrs	r2, r3
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e05c      	b.n	8006cde <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f042 0208 	orr.w	r2, r2, #8
 8006c32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c38:	2240      	movs	r2, #64	; 0x40
 8006c3a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c4c:	689a      	ldr	r2, [r3, #8]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	430a      	orrs	r2, r1
 8006c56:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006c5c:	68b9      	ldr	r1, [r7, #8]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	3380      	adds	r3, #128	; 0x80
 8006c64:	461a      	mov	r2, r3
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	025b      	lsls	r3, r3, #9
 8006c6a:	089b      	lsrs	r3, r3, #2
 8006c6c:	f7fb ff96 	bl	8002b9c <HAL_DMA_Start_IT>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d01a      	beq.n	8006cac <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f022 021a 	bic.w	r2, r2, #26
 8006c84:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a19      	ldr	r2, [pc, #100]	; (8006cf0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006c8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c92:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e018      	b.n	8006cde <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006cac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cb0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	025b      	lsls	r3, r3, #9
 8006cb6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006cb8:	2390      	movs	r3, #144	; 0x90
 8006cba:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f107 0210 	add.w	r2, r7, #16
 8006cd0:	4611      	mov	r1, r2
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f001 fc52 	bl	800857c <SDMMC_ConfigData>

      return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	e000      	b.n	8006cde <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8006cdc:	2302      	movs	r3, #2
  }
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3730      	adds	r7, #48	; 0x30
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	080073d5 	.word	0x080073d5
 8006cec:	08007471 	.word	0x08007471
 8006cf0:	004005ff 	.word	0x004005ff

08006cf4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d00:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d008      	beq.n	8006d22 <HAL_SD_IRQHandler+0x2e>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f003 0308 	and.w	r3, r3, #8
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d003      	beq.n	8006d22 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fdec 	bl	80078f8 <SD_Read_IT>
 8006d20:	e15a      	b.n	8006fd8 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f000 808d 	beq.w	8006e4c <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d3a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	4b9a      	ldr	r3, [pc, #616]	; (8006fb0 <HAL_SD_IRQHandler+0x2bc>)
 8006d48:	400b      	ands	r3, r1
 8006d4a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f022 0201 	bic.w	r2, r2, #1
 8006d5a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f003 0308 	and.w	r3, r3, #8
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d039      	beq.n	8006dda <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f003 0302 	and.w	r3, r3, #2
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d104      	bne.n	8006d7a <HAL_SD_IRQHandler+0x86>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f003 0320 	and.w	r3, r3, #32
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d011      	beq.n	8006d9e <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f001 fcd2 	bl	8008728 <SDMMC_CmdStopTransfer>
 8006d84:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d008      	beq.n	8006d9e <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	431a      	orrs	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 f921 	bl	8006fe0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f240 523a 	movw	r2, #1338	; 0x53a
 8006da6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f003 0301 	and.w	r3, r3, #1
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d104      	bne.n	8006dca <HAL_SD_IRQHandler+0xd6>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f003 0302 	and.w	r3, r3, #2
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d003      	beq.n	8006dd2 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f003 fd3c 	bl	800a848 <HAL_SD_RxCpltCallback>
 8006dd0:	e102      	b.n	8006fd8 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f003 fd2e 	bl	800a834 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006dd8:	e0fe      	b.n	8006fd8 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 80f9 	beq.w	8006fd8 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f003 0320 	and.w	r3, r3, #32
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d011      	beq.n	8006e14 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4618      	mov	r0, r3
 8006df6:	f001 fc97 	bl	8008728 <SDMMC_CmdStopTransfer>
 8006dfa:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d008      	beq.n	8006e14 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	431a      	orrs	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 f8e6 	bl	8006fe0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f003 0301 	and.w	r3, r3, #1
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f040 80dc 	bne.w	8006fd8 <HAL_SD_IRQHandler+0x2e4>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f003 0302 	and.w	r3, r3, #2
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f040 80d6 	bne.w	8006fd8 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f022 0208 	bic.w	r2, r2, #8
 8006e3a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f003 fcf5 	bl	800a834 <HAL_SD_TxCpltCallback>
}
 8006e4a:	e0c5      	b.n	8006fd8 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d008      	beq.n	8006e6c <HAL_SD_IRQHandler+0x178>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f003 0308 	and.w	r3, r3, #8
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d003      	beq.n	8006e6c <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 fd98 	bl	800799a <SD_Write_IT>
 8006e6a:	e0b5      	b.n	8006fd8 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e72:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f000 80ae 	beq.w	8006fd8 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e82:	f003 0302 	and.w	r3, r3, #2
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d005      	beq.n	8006e96 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8e:	f043 0202 	orr.w	r2, r3, #2
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e9c:	f003 0308 	and.w	r3, r3, #8
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d005      	beq.n	8006eb0 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea8:	f043 0208 	orr.w	r2, r3, #8
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eb6:	f003 0320 	and.w	r3, r3, #32
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d005      	beq.n	8006eca <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec2:	f043 0220 	orr.w	r2, r3, #32
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ed0:	f003 0310 	and.w	r3, r3, #16
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d005      	beq.n	8006ee4 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006edc:	f043 0210 	orr.w	r2, r3, #16
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f240 523a 	movw	r2, #1338	; 0x53a
 8006eec:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006efc:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4618      	mov	r0, r3
 8006f04:	f001 fc10 	bl	8008728 <SDMMC_CmdStopTransfer>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0e:	431a      	orrs	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f003 0308 	and.w	r3, r3, #8
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00a      	beq.n	8006f34 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 f857 	bl	8006fe0 <HAL_SD_ErrorCallback>
}
 8006f32:	e051      	b.n	8006fd8 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d04c      	beq.n	8006fd8 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f003 0310 	and.w	r3, r3, #16
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d104      	bne.n	8006f52 <HAL_SD_IRQHandler+0x25e>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f003 0320 	and.w	r3, r3, #32
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d011      	beq.n	8006f76 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f56:	4a17      	ldr	r2, [pc, #92]	; (8006fb4 <HAL_SD_IRQHandler+0x2c0>)
 8006f58:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7fb fe7c 	bl	8002c5c <HAL_DMA_Abort_IT>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d036      	beq.n	8006fd8 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f000 fad0 	bl	8007514 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006f74:	e030      	b.n	8006fd8 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f003 0301 	and.w	r3, r3, #1
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d104      	bne.n	8006f8a <HAL_SD_IRQHandler+0x296>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f003 0302 	and.w	r3, r3, #2
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d018      	beq.n	8006fbc <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8e:	4a0a      	ldr	r2, [pc, #40]	; (8006fb8 <HAL_SD_IRQHandler+0x2c4>)
 8006f90:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7fb fe60 	bl	8002c5c <HAL_DMA_Abort_IT>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d01a      	beq.n	8006fd8 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f000 faeb 	bl	8007582 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006fac:	e014      	b.n	8006fd8 <HAL_SD_IRQHandler+0x2e4>
 8006fae:	bf00      	nop
 8006fb0:	ffff3ec5 	.word	0xffff3ec5
 8006fb4:	08007515 	.word	0x08007515
 8006fb8:	08007583 	.word	0x08007583
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f003 fc25 	bl	800a820 <HAL_SD_AbortCallback>
}
 8006fd6:	e7ff      	b.n	8006fd8 <HAL_SD_IRQHandler+0x2e4>
 8006fd8:	bf00      	nop
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006fe8:	bf00      	nop
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007002:	0f9b      	lsrs	r3, r3, #30
 8007004:	b2da      	uxtb	r2, r3
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800700e:	0e9b      	lsrs	r3, r3, #26
 8007010:	b2db      	uxtb	r3, r3
 8007012:	f003 030f 	and.w	r3, r3, #15
 8007016:	b2da      	uxtb	r2, r3
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007020:	0e1b      	lsrs	r3, r3, #24
 8007022:	b2db      	uxtb	r3, r3
 8007024:	f003 0303 	and.w	r3, r3, #3
 8007028:	b2da      	uxtb	r2, r3
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007032:	0c1b      	lsrs	r3, r3, #16
 8007034:	b2da      	uxtb	r2, r3
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800703e:	0a1b      	lsrs	r3, r3, #8
 8007040:	b2da      	uxtb	r2, r3
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800704a:	b2da      	uxtb	r2, r3
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007054:	0d1b      	lsrs	r3, r3, #20
 8007056:	b29a      	uxth	r2, r3
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007060:	0c1b      	lsrs	r3, r3, #16
 8007062:	b2db      	uxtb	r3, r3
 8007064:	f003 030f 	and.w	r3, r3, #15
 8007068:	b2da      	uxtb	r2, r3
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007072:	0bdb      	lsrs	r3, r3, #15
 8007074:	b2db      	uxtb	r3, r3
 8007076:	f003 0301 	and.w	r3, r3, #1
 800707a:	b2da      	uxtb	r2, r3
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007084:	0b9b      	lsrs	r3, r3, #14
 8007086:	b2db      	uxtb	r3, r3
 8007088:	f003 0301 	and.w	r3, r3, #1
 800708c:	b2da      	uxtb	r2, r3
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007096:	0b5b      	lsrs	r3, r3, #13
 8007098:	b2db      	uxtb	r3, r3
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	b2da      	uxtb	r2, r3
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070a8:	0b1b      	lsrs	r3, r3, #12
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	f003 0301 	and.w	r3, r3, #1
 80070b0:	b2da      	uxtb	r2, r3
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	2200      	movs	r2, #0
 80070ba:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d163      	bne.n	800718c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070c8:	009a      	lsls	r2, r3, #2
 80070ca:	f640 73fc 	movw	r3, #4092	; 0xffc
 80070ce:	4013      	ands	r3, r2
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80070d4:	0f92      	lsrs	r2, r2, #30
 80070d6:	431a      	orrs	r2, r3
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070e0:	0edb      	lsrs	r3, r3, #27
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	f003 0307 	and.w	r3, r3, #7
 80070e8:	b2da      	uxtb	r2, r3
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070f2:	0e1b      	lsrs	r3, r3, #24
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	f003 0307 	and.w	r3, r3, #7
 80070fa:	b2da      	uxtb	r2, r3
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007104:	0d5b      	lsrs	r3, r3, #21
 8007106:	b2db      	uxtb	r3, r3
 8007108:	f003 0307 	and.w	r3, r3, #7
 800710c:	b2da      	uxtb	r2, r3
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007116:	0c9b      	lsrs	r3, r3, #18
 8007118:	b2db      	uxtb	r3, r3
 800711a:	f003 0307 	and.w	r3, r3, #7
 800711e:	b2da      	uxtb	r2, r3
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007128:	0bdb      	lsrs	r3, r3, #15
 800712a:	b2db      	uxtb	r3, r3
 800712c:	f003 0307 	and.w	r3, r3, #7
 8007130:	b2da      	uxtb	r2, r3
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	1c5a      	adds	r2, r3, #1
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	7e1b      	ldrb	r3, [r3, #24]
 8007144:	b2db      	uxtb	r3, r3
 8007146:	f003 0307 	and.w	r3, r3, #7
 800714a:	3302      	adds	r3, #2
 800714c:	2201      	movs	r2, #1
 800714e:	fa02 f303 	lsl.w	r3, r2, r3
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007156:	fb03 f202 	mul.w	r2, r3, r2
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	7a1b      	ldrb	r3, [r3, #8]
 8007162:	b2db      	uxtb	r3, r3
 8007164:	f003 030f 	and.w	r3, r3, #15
 8007168:	2201      	movs	r2, #1
 800716a:	409a      	lsls	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007178:	0a52      	lsrs	r2, r2, #9
 800717a:	fb03 f202 	mul.w	r2, r3, r2
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007188:	661a      	str	r2, [r3, #96]	; 0x60
 800718a:	e031      	b.n	80071f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007190:	2b01      	cmp	r3, #1
 8007192:	d11d      	bne.n	80071d0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007198:	041b      	lsls	r3, r3, #16
 800719a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071a2:	0c1b      	lsrs	r3, r3, #16
 80071a4:	431a      	orrs	r2, r3
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	3301      	adds	r3, #1
 80071b0:	029a      	lsls	r2, r3, #10
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071c4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	661a      	str	r2, [r3, #96]	; 0x60
 80071ce:	e00f      	b.n	80071f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a58      	ldr	r2, [pc, #352]	; (8007338 <HAL_SD_GetCardCSD+0x344>)
 80071d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e09d      	b.n	800732c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071f4:	0b9b      	lsrs	r3, r3, #14
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	f003 0301 	and.w	r3, r3, #1
 80071fc:	b2da      	uxtb	r2, r3
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007206:	09db      	lsrs	r3, r3, #7
 8007208:	b2db      	uxtb	r3, r3
 800720a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800720e:	b2da      	uxtb	r2, r3
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007218:	b2db      	uxtb	r3, r3
 800721a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800721e:	b2da      	uxtb	r2, r3
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007228:	0fdb      	lsrs	r3, r3, #31
 800722a:	b2da      	uxtb	r2, r3
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007234:	0f5b      	lsrs	r3, r3, #29
 8007236:	b2db      	uxtb	r3, r3
 8007238:	f003 0303 	and.w	r3, r3, #3
 800723c:	b2da      	uxtb	r2, r3
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007246:	0e9b      	lsrs	r3, r3, #26
 8007248:	b2db      	uxtb	r3, r3
 800724a:	f003 0307 	and.w	r3, r3, #7
 800724e:	b2da      	uxtb	r2, r3
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007258:	0d9b      	lsrs	r3, r3, #22
 800725a:	b2db      	uxtb	r3, r3
 800725c:	f003 030f 	and.w	r3, r3, #15
 8007260:	b2da      	uxtb	r2, r3
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800726a:	0d5b      	lsrs	r3, r3, #21
 800726c:	b2db      	uxtb	r3, r3
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	b2da      	uxtb	r2, r3
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	2200      	movs	r2, #0
 800727e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007286:	0c1b      	lsrs	r3, r3, #16
 8007288:	b2db      	uxtb	r3, r3
 800728a:	f003 0301 	and.w	r3, r3, #1
 800728e:	b2da      	uxtb	r2, r3
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800729a:	0bdb      	lsrs	r3, r3, #15
 800729c:	b2db      	uxtb	r3, r3
 800729e:	f003 0301 	and.w	r3, r3, #1
 80072a2:	b2da      	uxtb	r2, r3
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ae:	0b9b      	lsrs	r3, r3, #14
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	f003 0301 	and.w	r3, r3, #1
 80072b6:	b2da      	uxtb	r2, r3
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c2:	0b5b      	lsrs	r3, r3, #13
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	f003 0301 	and.w	r3, r3, #1
 80072ca:	b2da      	uxtb	r2, r3
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d6:	0b1b      	lsrs	r3, r3, #12
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	f003 0301 	and.w	r3, r3, #1
 80072de:	b2da      	uxtb	r2, r3
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ea:	0a9b      	lsrs	r3, r3, #10
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	f003 0303 	and.w	r3, r3, #3
 80072f2:	b2da      	uxtb	r2, r3
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072fe:	0a1b      	lsrs	r3, r3, #8
 8007300:	b2db      	uxtb	r3, r3
 8007302:	f003 0303 	and.w	r3, r3, #3
 8007306:	b2da      	uxtb	r2, r3
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007312:	085b      	lsrs	r3, r3, #1
 8007314:	b2db      	uxtb	r3, r3
 8007316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800731a:	b2da      	uxtb	r2, r3
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	2201      	movs	r2, #1
 8007326:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr
 8007338:	004005ff 	.word	0x004005ff

0800733c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b086      	sub	sp, #24
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800739c:	2300      	movs	r3, #0
 800739e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80073a0:	f107 030c 	add.w	r3, r7, #12
 80073a4:	4619      	mov	r1, r3
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fa7e 	bl	80078a8 <SD_SendStatus>
 80073ac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d005      	beq.n	80073c0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	431a      	orrs	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	0a5b      	lsrs	r3, r3, #9
 80073c4:	f003 030f 	and.w	r3, r3, #15
 80073c8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80073ca:	693b      	ldr	r3, [r7, #16]
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3718      	adds	r7, #24
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b085      	sub	sp, #20
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073f0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80073f2:	bf00      	nop
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b084      	sub	sp, #16
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007410:	2b82      	cmp	r3, #130	; 0x82
 8007412:	d111      	bne.n	8007438 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4618      	mov	r0, r3
 800741a:	f001 f985 	bl	8008728 <SDMMC_CmdStopTransfer>
 800741e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d008      	beq.n	8007438 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	431a      	orrs	r2, r3
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	f7ff fdd4 	bl	8006fe0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f022 0208 	bic.w	r2, r2, #8
 8007446:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f240 523a 	movw	r2, #1338	; 0x53a
 8007450:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f003 f9f1 	bl	800a848 <HAL_SD_RxCpltCallback>
#endif
}
 8007466:	bf00      	nop
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
	...

08007470 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b086      	sub	sp, #24
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f7fb fd98 	bl	8002fb4 <HAL_DMA_GetError>
 8007484:	4603      	mov	r3, r0
 8007486:	2b02      	cmp	r3, #2
 8007488:	d03e      	beq.n	8007508 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007490:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007498:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	2b01      	cmp	r3, #1
 800749e:	d002      	beq.n	80074a6 <SD_DMAError+0x36>
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d12d      	bne.n	8007502 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a19      	ldr	r2, [pc, #100]	; (8007510 <SD_DMAError+0xa0>)
 80074ac:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80074bc:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80074ca:	6978      	ldr	r0, [r7, #20]
 80074cc:	f7ff ff62 	bl	8007394 <HAL_SD_GetCardState>
 80074d0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	2b06      	cmp	r3, #6
 80074d6:	d002      	beq.n	80074de <SD_DMAError+0x6e>
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	2b05      	cmp	r3, #5
 80074dc:	d10a      	bne.n	80074f4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4618      	mov	r0, r3
 80074e4:	f001 f920 	bl	8008728 <SDMMC_CmdStopTransfer>
 80074e8:	4602      	mov	r2, r0
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ee:	431a      	orrs	r2, r3
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	2200      	movs	r2, #0
 8007500:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8007502:	6978      	ldr	r0, [r7, #20]
 8007504:	f7ff fd6c 	bl	8006fe0 <HAL_SD_ErrorCallback>
#endif
  }
}
 8007508:	bf00      	nop
 800750a:	3718      	adds	r7, #24
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	004005ff 	.word	0x004005ff

08007514 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007520:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f240 523a 	movw	r2, #1338	; 0x53a
 800752a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f7ff ff31 	bl	8007394 <HAL_SD_GetCardState>
 8007532:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2200      	movs	r2, #0
 8007540:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	2b06      	cmp	r3, #6
 8007546:	d002      	beq.n	800754e <SD_DMATxAbort+0x3a>
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	2b05      	cmp	r3, #5
 800754c:	d10a      	bne.n	8007564 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4618      	mov	r0, r3
 8007554:	f001 f8e8 	bl	8008728 <SDMMC_CmdStopTransfer>
 8007558:	4602      	mov	r2, r0
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755e:	431a      	orrs	r2, r3
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007568:	2b00      	cmp	r3, #0
 800756a:	d103      	bne.n	8007574 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800756c:	68f8      	ldr	r0, [r7, #12]
 800756e:	f003 f957 	bl	800a820 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007572:	e002      	b.n	800757a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	f7ff fd33 	bl	8006fe0 <HAL_SD_ErrorCallback>
}
 800757a:	bf00      	nop
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b084      	sub	sp, #16
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f240 523a 	movw	r2, #1338	; 0x53a
 8007598:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f7ff fefa 	bl	8007394 <HAL_SD_GetCardState>
 80075a0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	2b06      	cmp	r3, #6
 80075b4:	d002      	beq.n	80075bc <SD_DMARxAbort+0x3a>
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	2b05      	cmp	r3, #5
 80075ba:	d10a      	bne.n	80075d2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4618      	mov	r0, r3
 80075c2:	f001 f8b1 	bl	8008728 <SDMMC_CmdStopTransfer>
 80075c6:	4602      	mov	r2, r0
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075cc:	431a      	orrs	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d103      	bne.n	80075e2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f003 f920 	bl	800a820 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80075e0:	e002      	b.n	80075e8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f7ff fcfc 	bl	8006fe0 <HAL_SD_ErrorCallback>
}
 80075e8:	bf00      	nop
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80075f0:	b5b0      	push	{r4, r5, r7, lr}
 80075f2:	b094      	sub	sp, #80	; 0x50
 80075f4:	af04      	add	r7, sp, #16
 80075f6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80075f8:	2301      	movs	r3, #1
 80075fa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4618      	mov	r0, r3
 8007602:	f000 ff63 	bl	80084cc <SDMMC_GetPowerState>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d102      	bne.n	8007612 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800760c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007610:	e0b8      	b.n	8007784 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007616:	2b03      	cmp	r3, #3
 8007618:	d02f      	beq.n	800767a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4618      	mov	r0, r3
 8007620:	f001 f94a 	bl	80088b8 <SDMMC_CmdSendCID>
 8007624:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007628:	2b00      	cmp	r3, #0
 800762a:	d001      	beq.n	8007630 <SD_InitCard+0x40>
    {
      return errorstate;
 800762c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800762e:	e0a9      	b.n	8007784 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2100      	movs	r1, #0
 8007636:	4618      	mov	r0, r3
 8007638:	f000 ff8d 	bl	8008556 <SDMMC_GetResponse>
 800763c:	4602      	mov	r2, r0
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2104      	movs	r1, #4
 8007648:	4618      	mov	r0, r3
 800764a:	f000 ff84 	bl	8008556 <SDMMC_GetResponse>
 800764e:	4602      	mov	r2, r0
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2108      	movs	r1, #8
 800765a:	4618      	mov	r0, r3
 800765c:	f000 ff7b 	bl	8008556 <SDMMC_GetResponse>
 8007660:	4602      	mov	r2, r0
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	210c      	movs	r1, #12
 800766c:	4618      	mov	r0, r3
 800766e:	f000 ff72 	bl	8008556 <SDMMC_GetResponse>
 8007672:	4602      	mov	r2, r0
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800767e:	2b03      	cmp	r3, #3
 8007680:	d00d      	beq.n	800769e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f107 020e 	add.w	r2, r7, #14
 800768a:	4611      	mov	r1, r2
 800768c:	4618      	mov	r0, r3
 800768e:	f001 f950 	bl	8008932 <SDMMC_CmdSetRelAdd>
 8007692:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007696:	2b00      	cmp	r3, #0
 8007698:	d001      	beq.n	800769e <SD_InitCard+0xae>
    {
      return errorstate;
 800769a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800769c:	e072      	b.n	8007784 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076a2:	2b03      	cmp	r3, #3
 80076a4:	d036      	beq.n	8007714 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80076a6:	89fb      	ldrh	r3, [r7, #14]
 80076a8:	461a      	mov	r2, r3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076b6:	041b      	lsls	r3, r3, #16
 80076b8:	4619      	mov	r1, r3
 80076ba:	4610      	mov	r0, r2
 80076bc:	f001 f91a 	bl	80088f4 <SDMMC_CmdSendCSD>
 80076c0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80076c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d001      	beq.n	80076cc <SD_InitCard+0xdc>
    {
      return errorstate;
 80076c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076ca:	e05b      	b.n	8007784 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2100      	movs	r1, #0
 80076d2:	4618      	mov	r0, r3
 80076d4:	f000 ff3f 	bl	8008556 <SDMMC_GetResponse>
 80076d8:	4602      	mov	r2, r0
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2104      	movs	r1, #4
 80076e4:	4618      	mov	r0, r3
 80076e6:	f000 ff36 	bl	8008556 <SDMMC_GetResponse>
 80076ea:	4602      	mov	r2, r0
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2108      	movs	r1, #8
 80076f6:	4618      	mov	r0, r3
 80076f8:	f000 ff2d 	bl	8008556 <SDMMC_GetResponse>
 80076fc:	4602      	mov	r2, r0
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	210c      	movs	r1, #12
 8007708:	4618      	mov	r0, r3
 800770a:	f000 ff24 	bl	8008556 <SDMMC_GetResponse>
 800770e:	4602      	mov	r2, r0
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2104      	movs	r1, #4
 800771a:	4618      	mov	r0, r3
 800771c:	f000 ff1b 	bl	8008556 <SDMMC_GetResponse>
 8007720:	4603      	mov	r3, r0
 8007722:	0d1a      	lsrs	r2, r3, #20
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007728:	f107 0310 	add.w	r3, r7, #16
 800772c:	4619      	mov	r1, r3
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f7ff fc60 	bl	8006ff4 <HAL_SD_GetCardCSD>
 8007734:	4603      	mov	r3, r0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d002      	beq.n	8007740 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800773a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800773e:	e021      	b.n	8007784 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6819      	ldr	r1, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007748:	041b      	lsls	r3, r3, #16
 800774a:	2200      	movs	r2, #0
 800774c:	461c      	mov	r4, r3
 800774e:	4615      	mov	r5, r2
 8007750:	4622      	mov	r2, r4
 8007752:	462b      	mov	r3, r5
 8007754:	4608      	mov	r0, r1
 8007756:	f001 f809 	bl	800876c <SDMMC_CmdSelDesel>
 800775a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800775c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800775e:	2b00      	cmp	r3, #0
 8007760:	d001      	beq.n	8007766 <SD_InitCard+0x176>
  {
    return errorstate;
 8007762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007764:	e00e      	b.n	8007784 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681d      	ldr	r5, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	466c      	mov	r4, sp
 800776e:	f103 0210 	add.w	r2, r3, #16
 8007772:	ca07      	ldmia	r2, {r0, r1, r2}
 8007774:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007778:	3304      	adds	r3, #4
 800777a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800777c:	4628      	mov	r0, r5
 800777e:	f000 fe4d 	bl	800841c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3740      	adds	r7, #64	; 0x40
 8007788:	46bd      	mov	sp, r7
 800778a:	bdb0      	pop	{r4, r5, r7, pc}

0800778c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007794:	2300      	movs	r3, #0
 8007796:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007798:	2300      	movs	r3, #0
 800779a:	617b      	str	r3, [r7, #20]
 800779c:	2300      	movs	r3, #0
 800779e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4618      	mov	r0, r3
 80077a6:	f001 f804 	bl	80087b2 <SDMMC_CmdGoIdleState>
 80077aa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d001      	beq.n	80077b6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	e072      	b.n	800789c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4618      	mov	r0, r3
 80077bc:	f001 f817 	bl	80087ee <SDMMC_CmdOperCond>
 80077c0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00d      	beq.n	80077e4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4618      	mov	r0, r3
 80077d4:	f000 ffed 	bl	80087b2 <SDMMC_CmdGoIdleState>
 80077d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d004      	beq.n	80077ea <SD_PowerON+0x5e>
    {
      return errorstate;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	e05b      	b.n	800789c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d137      	bne.n	8007862 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2100      	movs	r1, #0
 80077f8:	4618      	mov	r0, r3
 80077fa:	f001 f817 	bl	800882c <SDMMC_CmdAppCommand>
 80077fe:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d02d      	beq.n	8007862 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007806:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800780a:	e047      	b.n	800789c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2100      	movs	r1, #0
 8007812:	4618      	mov	r0, r3
 8007814:	f001 f80a 	bl	800882c <SDMMC_CmdAppCommand>
 8007818:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d001      	beq.n	8007824 <SD_PowerON+0x98>
    {
      return errorstate;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	e03b      	b.n	800789c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	491e      	ldr	r1, [pc, #120]	; (80078a4 <SD_PowerON+0x118>)
 800782a:	4618      	mov	r0, r3
 800782c:	f001 f820 	bl	8008870 <SDMMC_CmdAppOperCommand>
 8007830:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d002      	beq.n	800783e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007838:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800783c:	e02e      	b.n	800789c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2100      	movs	r1, #0
 8007844:	4618      	mov	r0, r3
 8007846:	f000 fe86 	bl	8008556 <SDMMC_GetResponse>
 800784a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	0fdb      	lsrs	r3, r3, #31
 8007850:	2b01      	cmp	r3, #1
 8007852:	d101      	bne.n	8007858 <SD_PowerON+0xcc>
 8007854:	2301      	movs	r3, #1
 8007856:	e000      	b.n	800785a <SD_PowerON+0xce>
 8007858:	2300      	movs	r3, #0
 800785a:	613b      	str	r3, [r7, #16]

    count++;
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	3301      	adds	r3, #1
 8007860:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007868:	4293      	cmp	r3, r2
 800786a:	d802      	bhi.n	8007872 <SD_PowerON+0xe6>
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d0cc      	beq.n	800780c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007878:	4293      	cmp	r3, r2
 800787a:	d902      	bls.n	8007882 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800787c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007880:	e00c      	b.n	800789c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007888:	2b00      	cmp	r3, #0
 800788a:	d003      	beq.n	8007894 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	645a      	str	r2, [r3, #68]	; 0x44
 8007892:	e002      	b.n	800789a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3718      	adds	r7, #24
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	c1100000 	.word	0xc1100000

080078a8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d102      	bne.n	80078be <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80078b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80078bc:	e018      	b.n	80078f0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078c6:	041b      	lsls	r3, r3, #16
 80078c8:	4619      	mov	r1, r3
 80078ca:	4610      	mov	r0, r2
 80078cc:	f001 f852 	bl	8008974 <SDMMC_CmdSendStatus>
 80078d0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d001      	beq.n	80078dc <SD_SendStatus+0x34>
  {
    return errorstate;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	e009      	b.n	80078f0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2100      	movs	r1, #0
 80078e2:	4618      	mov	r0, r3
 80078e4:	f000 fe37 	bl	8008556 <SDMMC_GetResponse>
 80078e8:	4602      	mov	r2, r0
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b086      	sub	sp, #24
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007904:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800790a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d03f      	beq.n	8007992 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007912:	2300      	movs	r3, #0
 8007914:	617b      	str	r3, [r7, #20]
 8007916:	e033      	b.n	8007980 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4618      	mov	r0, r3
 800791e:	f000 fda9 	bl	8008474 <SDMMC_ReadFIFO>
 8007922:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	b2da      	uxtb	r2, r3
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	3301      	adds	r3, #1
 8007930:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	3b01      	subs	r3, #1
 8007936:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	0a1b      	lsrs	r3, r3, #8
 800793c:	b2da      	uxtb	r2, r3
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	3301      	adds	r3, #1
 8007946:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	3b01      	subs	r3, #1
 800794c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	0c1b      	lsrs	r3, r3, #16
 8007952:	b2da      	uxtb	r2, r3
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	3301      	adds	r3, #1
 800795c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	3b01      	subs	r3, #1
 8007962:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	0e1b      	lsrs	r3, r3, #24
 8007968:	b2da      	uxtb	r2, r3
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	3301      	adds	r3, #1
 8007972:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	3b01      	subs	r3, #1
 8007978:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	3301      	adds	r3, #1
 800797e:	617b      	str	r3, [r7, #20]
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	2b07      	cmp	r3, #7
 8007984:	d9c8      	bls.n	8007918 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	693a      	ldr	r2, [r7, #16]
 8007990:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007992:	bf00      	nop
 8007994:	3718      	adds	r7, #24
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b086      	sub	sp, #24
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a1b      	ldr	r3, [r3, #32]
 80079a6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ac:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d043      	beq.n	8007a3c <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80079b4:	2300      	movs	r3, #0
 80079b6:	617b      	str	r3, [r7, #20]
 80079b8:	e037      	b.n	8007a2a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	60bb      	str	r3, [r7, #8]
      tmp++;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	3301      	adds	r3, #1
 80079c4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	3b01      	subs	r3, #1
 80079ca:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	021a      	lsls	r2, r3, #8
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	3301      	adds	r3, #1
 80079dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	3b01      	subs	r3, #1
 80079e2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	041a      	lsls	r2, r3, #16
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	60bb      	str	r3, [r7, #8]
      tmp++;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	3301      	adds	r3, #1
 80079f4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	3b01      	subs	r3, #1
 80079fa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	061a      	lsls	r2, r3, #24
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	3b01      	subs	r3, #1
 8007a12:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f107 0208 	add.w	r2, r7, #8
 8007a1c:	4611      	mov	r1, r2
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f000 fd35 	bl	800848e <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	3301      	adds	r3, #1
 8007a28:	617b      	str	r3, [r7, #20]
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	2b07      	cmp	r3, #7
 8007a2e:	d9c4      	bls.n	80079ba <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	693a      	ldr	r2, [r7, #16]
 8007a3a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007a3c:	bf00      	nop
 8007a3e:	3718      	adds	r7, #24
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d101      	bne.n	8007a56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e040      	b.n	8007ad8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d106      	bne.n	8007a6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7f9 fda6 	bl	80015b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2224      	movs	r2, #36	; 0x24
 8007a70:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f022 0201 	bic.w	r2, r2, #1
 8007a80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f8b0 	bl	8007be8 <UART_SetConfig>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d101      	bne.n	8007a92 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e022      	b.n	8007ad8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d002      	beq.n	8007aa0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 fb08 	bl	80080b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	685a      	ldr	r2, [r3, #4]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007aae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	689a      	ldr	r2, [r3, #8]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007abe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f042 0201 	orr.w	r2, r2, #1
 8007ace:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 fb8f 	bl	80081f4 <UART_CheckIdleState>
 8007ad6:	4603      	mov	r3, r0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3708      	adds	r7, #8
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b08a      	sub	sp, #40	; 0x28
 8007ae4:	af02      	add	r7, sp, #8
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	603b      	str	r3, [r7, #0]
 8007aec:	4613      	mov	r3, r2
 8007aee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007af4:	2b20      	cmp	r3, #32
 8007af6:	d171      	bne.n	8007bdc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d002      	beq.n	8007b04 <HAL_UART_Transmit+0x24>
 8007afe:	88fb      	ldrh	r3, [r7, #6]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d101      	bne.n	8007b08 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e06a      	b.n	8007bde <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2221      	movs	r2, #33	; 0x21
 8007b14:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b16:	f7fa f84d 	bl	8001bb4 <HAL_GetTick>
 8007b1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	88fa      	ldrh	r2, [r7, #6]
 8007b20:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	88fa      	ldrh	r2, [r7, #6]
 8007b28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b34:	d108      	bne.n	8007b48 <HAL_UART_Transmit+0x68>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d104      	bne.n	8007b48 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	61bb      	str	r3, [r7, #24]
 8007b46:	e003      	b.n	8007b50 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007b50:	e02c      	b.n	8007bac <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	9300      	str	r3, [sp, #0]
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	2180      	movs	r1, #128	; 0x80
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f000 fb96 	bl	800828e <UART_WaitOnFlagUntilTimeout>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d001      	beq.n	8007b6c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	e038      	b.n	8007bde <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d10b      	bne.n	8007b8a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	881b      	ldrh	r3, [r3, #0]
 8007b76:	461a      	mov	r2, r3
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b80:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	3302      	adds	r3, #2
 8007b86:	61bb      	str	r3, [r7, #24]
 8007b88:	e007      	b.n	8007b9a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	781a      	ldrb	r2, [r3, #0]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	3301      	adds	r3, #1
 8007b98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	3b01      	subs	r3, #1
 8007ba4:	b29a      	uxth	r2, r3
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d1cc      	bne.n	8007b52 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	9300      	str	r3, [sp, #0]
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	2140      	movs	r1, #64	; 0x40
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f000 fb63 	bl	800828e <UART_WaitOnFlagUntilTimeout>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d001      	beq.n	8007bd2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8007bce:	2303      	movs	r3, #3
 8007bd0:	e005      	b.n	8007bde <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2220      	movs	r2, #32
 8007bd6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	e000      	b.n	8007bde <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007bdc:	2302      	movs	r3, #2
  }
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3720      	adds	r7, #32
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
	...

08007be8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b088      	sub	sp, #32
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	689a      	ldr	r2, [r3, #8]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	431a      	orrs	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	695b      	ldr	r3, [r3, #20]
 8007c02:	431a      	orrs	r2, r3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	69db      	ldr	r3, [r3, #28]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	4ba6      	ldr	r3, [pc, #664]	; (8007eac <UART_SetConfig+0x2c4>)
 8007c14:	4013      	ands	r3, r2
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	6812      	ldr	r2, [r2, #0]
 8007c1a:	6979      	ldr	r1, [r7, #20]
 8007c1c:	430b      	orrs	r3, r1
 8007c1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	68da      	ldr	r2, [r3, #12]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	430a      	orrs	r2, r1
 8007c34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	699b      	ldr	r3, [r3, #24]
 8007c3a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a1b      	ldr	r3, [r3, #32]
 8007c40:	697a      	ldr	r2, [r7, #20]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	697a      	ldr	r2, [r7, #20]
 8007c56:	430a      	orrs	r2, r1
 8007c58:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a94      	ldr	r2, [pc, #592]	; (8007eb0 <UART_SetConfig+0x2c8>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d120      	bne.n	8007ca6 <UART_SetConfig+0xbe>
 8007c64:	4b93      	ldr	r3, [pc, #588]	; (8007eb4 <UART_SetConfig+0x2cc>)
 8007c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c6a:	f003 0303 	and.w	r3, r3, #3
 8007c6e:	2b03      	cmp	r3, #3
 8007c70:	d816      	bhi.n	8007ca0 <UART_SetConfig+0xb8>
 8007c72:	a201      	add	r2, pc, #4	; (adr r2, 8007c78 <UART_SetConfig+0x90>)
 8007c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c78:	08007c89 	.word	0x08007c89
 8007c7c:	08007c95 	.word	0x08007c95
 8007c80:	08007c8f 	.word	0x08007c8f
 8007c84:	08007c9b 	.word	0x08007c9b
 8007c88:	2301      	movs	r3, #1
 8007c8a:	77fb      	strb	r3, [r7, #31]
 8007c8c:	e150      	b.n	8007f30 <UART_SetConfig+0x348>
 8007c8e:	2302      	movs	r3, #2
 8007c90:	77fb      	strb	r3, [r7, #31]
 8007c92:	e14d      	b.n	8007f30 <UART_SetConfig+0x348>
 8007c94:	2304      	movs	r3, #4
 8007c96:	77fb      	strb	r3, [r7, #31]
 8007c98:	e14a      	b.n	8007f30 <UART_SetConfig+0x348>
 8007c9a:	2308      	movs	r3, #8
 8007c9c:	77fb      	strb	r3, [r7, #31]
 8007c9e:	e147      	b.n	8007f30 <UART_SetConfig+0x348>
 8007ca0:	2310      	movs	r3, #16
 8007ca2:	77fb      	strb	r3, [r7, #31]
 8007ca4:	e144      	b.n	8007f30 <UART_SetConfig+0x348>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a83      	ldr	r2, [pc, #524]	; (8007eb8 <UART_SetConfig+0x2d0>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d132      	bne.n	8007d16 <UART_SetConfig+0x12e>
 8007cb0:	4b80      	ldr	r3, [pc, #512]	; (8007eb4 <UART_SetConfig+0x2cc>)
 8007cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cb6:	f003 030c 	and.w	r3, r3, #12
 8007cba:	2b0c      	cmp	r3, #12
 8007cbc:	d828      	bhi.n	8007d10 <UART_SetConfig+0x128>
 8007cbe:	a201      	add	r2, pc, #4	; (adr r2, 8007cc4 <UART_SetConfig+0xdc>)
 8007cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc4:	08007cf9 	.word	0x08007cf9
 8007cc8:	08007d11 	.word	0x08007d11
 8007ccc:	08007d11 	.word	0x08007d11
 8007cd0:	08007d11 	.word	0x08007d11
 8007cd4:	08007d05 	.word	0x08007d05
 8007cd8:	08007d11 	.word	0x08007d11
 8007cdc:	08007d11 	.word	0x08007d11
 8007ce0:	08007d11 	.word	0x08007d11
 8007ce4:	08007cff 	.word	0x08007cff
 8007ce8:	08007d11 	.word	0x08007d11
 8007cec:	08007d11 	.word	0x08007d11
 8007cf0:	08007d11 	.word	0x08007d11
 8007cf4:	08007d0b 	.word	0x08007d0b
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	77fb      	strb	r3, [r7, #31]
 8007cfc:	e118      	b.n	8007f30 <UART_SetConfig+0x348>
 8007cfe:	2302      	movs	r3, #2
 8007d00:	77fb      	strb	r3, [r7, #31]
 8007d02:	e115      	b.n	8007f30 <UART_SetConfig+0x348>
 8007d04:	2304      	movs	r3, #4
 8007d06:	77fb      	strb	r3, [r7, #31]
 8007d08:	e112      	b.n	8007f30 <UART_SetConfig+0x348>
 8007d0a:	2308      	movs	r3, #8
 8007d0c:	77fb      	strb	r3, [r7, #31]
 8007d0e:	e10f      	b.n	8007f30 <UART_SetConfig+0x348>
 8007d10:	2310      	movs	r3, #16
 8007d12:	77fb      	strb	r3, [r7, #31]
 8007d14:	e10c      	b.n	8007f30 <UART_SetConfig+0x348>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a68      	ldr	r2, [pc, #416]	; (8007ebc <UART_SetConfig+0x2d4>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d120      	bne.n	8007d62 <UART_SetConfig+0x17a>
 8007d20:	4b64      	ldr	r3, [pc, #400]	; (8007eb4 <UART_SetConfig+0x2cc>)
 8007d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d26:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007d2a:	2b30      	cmp	r3, #48	; 0x30
 8007d2c:	d013      	beq.n	8007d56 <UART_SetConfig+0x16e>
 8007d2e:	2b30      	cmp	r3, #48	; 0x30
 8007d30:	d814      	bhi.n	8007d5c <UART_SetConfig+0x174>
 8007d32:	2b20      	cmp	r3, #32
 8007d34:	d009      	beq.n	8007d4a <UART_SetConfig+0x162>
 8007d36:	2b20      	cmp	r3, #32
 8007d38:	d810      	bhi.n	8007d5c <UART_SetConfig+0x174>
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d002      	beq.n	8007d44 <UART_SetConfig+0x15c>
 8007d3e:	2b10      	cmp	r3, #16
 8007d40:	d006      	beq.n	8007d50 <UART_SetConfig+0x168>
 8007d42:	e00b      	b.n	8007d5c <UART_SetConfig+0x174>
 8007d44:	2300      	movs	r3, #0
 8007d46:	77fb      	strb	r3, [r7, #31]
 8007d48:	e0f2      	b.n	8007f30 <UART_SetConfig+0x348>
 8007d4a:	2302      	movs	r3, #2
 8007d4c:	77fb      	strb	r3, [r7, #31]
 8007d4e:	e0ef      	b.n	8007f30 <UART_SetConfig+0x348>
 8007d50:	2304      	movs	r3, #4
 8007d52:	77fb      	strb	r3, [r7, #31]
 8007d54:	e0ec      	b.n	8007f30 <UART_SetConfig+0x348>
 8007d56:	2308      	movs	r3, #8
 8007d58:	77fb      	strb	r3, [r7, #31]
 8007d5a:	e0e9      	b.n	8007f30 <UART_SetConfig+0x348>
 8007d5c:	2310      	movs	r3, #16
 8007d5e:	77fb      	strb	r3, [r7, #31]
 8007d60:	e0e6      	b.n	8007f30 <UART_SetConfig+0x348>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a56      	ldr	r2, [pc, #344]	; (8007ec0 <UART_SetConfig+0x2d8>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d120      	bne.n	8007dae <UART_SetConfig+0x1c6>
 8007d6c:	4b51      	ldr	r3, [pc, #324]	; (8007eb4 <UART_SetConfig+0x2cc>)
 8007d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007d76:	2bc0      	cmp	r3, #192	; 0xc0
 8007d78:	d013      	beq.n	8007da2 <UART_SetConfig+0x1ba>
 8007d7a:	2bc0      	cmp	r3, #192	; 0xc0
 8007d7c:	d814      	bhi.n	8007da8 <UART_SetConfig+0x1c0>
 8007d7e:	2b80      	cmp	r3, #128	; 0x80
 8007d80:	d009      	beq.n	8007d96 <UART_SetConfig+0x1ae>
 8007d82:	2b80      	cmp	r3, #128	; 0x80
 8007d84:	d810      	bhi.n	8007da8 <UART_SetConfig+0x1c0>
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d002      	beq.n	8007d90 <UART_SetConfig+0x1a8>
 8007d8a:	2b40      	cmp	r3, #64	; 0x40
 8007d8c:	d006      	beq.n	8007d9c <UART_SetConfig+0x1b4>
 8007d8e:	e00b      	b.n	8007da8 <UART_SetConfig+0x1c0>
 8007d90:	2300      	movs	r3, #0
 8007d92:	77fb      	strb	r3, [r7, #31]
 8007d94:	e0cc      	b.n	8007f30 <UART_SetConfig+0x348>
 8007d96:	2302      	movs	r3, #2
 8007d98:	77fb      	strb	r3, [r7, #31]
 8007d9a:	e0c9      	b.n	8007f30 <UART_SetConfig+0x348>
 8007d9c:	2304      	movs	r3, #4
 8007d9e:	77fb      	strb	r3, [r7, #31]
 8007da0:	e0c6      	b.n	8007f30 <UART_SetConfig+0x348>
 8007da2:	2308      	movs	r3, #8
 8007da4:	77fb      	strb	r3, [r7, #31]
 8007da6:	e0c3      	b.n	8007f30 <UART_SetConfig+0x348>
 8007da8:	2310      	movs	r3, #16
 8007daa:	77fb      	strb	r3, [r7, #31]
 8007dac:	e0c0      	b.n	8007f30 <UART_SetConfig+0x348>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a44      	ldr	r2, [pc, #272]	; (8007ec4 <UART_SetConfig+0x2dc>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d125      	bne.n	8007e04 <UART_SetConfig+0x21c>
 8007db8:	4b3e      	ldr	r3, [pc, #248]	; (8007eb4 <UART_SetConfig+0x2cc>)
 8007dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dc6:	d017      	beq.n	8007df8 <UART_SetConfig+0x210>
 8007dc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dcc:	d817      	bhi.n	8007dfe <UART_SetConfig+0x216>
 8007dce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dd2:	d00b      	beq.n	8007dec <UART_SetConfig+0x204>
 8007dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dd8:	d811      	bhi.n	8007dfe <UART_SetConfig+0x216>
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d003      	beq.n	8007de6 <UART_SetConfig+0x1fe>
 8007dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007de2:	d006      	beq.n	8007df2 <UART_SetConfig+0x20a>
 8007de4:	e00b      	b.n	8007dfe <UART_SetConfig+0x216>
 8007de6:	2300      	movs	r3, #0
 8007de8:	77fb      	strb	r3, [r7, #31]
 8007dea:	e0a1      	b.n	8007f30 <UART_SetConfig+0x348>
 8007dec:	2302      	movs	r3, #2
 8007dee:	77fb      	strb	r3, [r7, #31]
 8007df0:	e09e      	b.n	8007f30 <UART_SetConfig+0x348>
 8007df2:	2304      	movs	r3, #4
 8007df4:	77fb      	strb	r3, [r7, #31]
 8007df6:	e09b      	b.n	8007f30 <UART_SetConfig+0x348>
 8007df8:	2308      	movs	r3, #8
 8007dfa:	77fb      	strb	r3, [r7, #31]
 8007dfc:	e098      	b.n	8007f30 <UART_SetConfig+0x348>
 8007dfe:	2310      	movs	r3, #16
 8007e00:	77fb      	strb	r3, [r7, #31]
 8007e02:	e095      	b.n	8007f30 <UART_SetConfig+0x348>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a2f      	ldr	r2, [pc, #188]	; (8007ec8 <UART_SetConfig+0x2e0>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d125      	bne.n	8007e5a <UART_SetConfig+0x272>
 8007e0e:	4b29      	ldr	r3, [pc, #164]	; (8007eb4 <UART_SetConfig+0x2cc>)
 8007e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007e18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e1c:	d017      	beq.n	8007e4e <UART_SetConfig+0x266>
 8007e1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e22:	d817      	bhi.n	8007e54 <UART_SetConfig+0x26c>
 8007e24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e28:	d00b      	beq.n	8007e42 <UART_SetConfig+0x25a>
 8007e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e2e:	d811      	bhi.n	8007e54 <UART_SetConfig+0x26c>
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d003      	beq.n	8007e3c <UART_SetConfig+0x254>
 8007e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e38:	d006      	beq.n	8007e48 <UART_SetConfig+0x260>
 8007e3a:	e00b      	b.n	8007e54 <UART_SetConfig+0x26c>
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	77fb      	strb	r3, [r7, #31]
 8007e40:	e076      	b.n	8007f30 <UART_SetConfig+0x348>
 8007e42:	2302      	movs	r3, #2
 8007e44:	77fb      	strb	r3, [r7, #31]
 8007e46:	e073      	b.n	8007f30 <UART_SetConfig+0x348>
 8007e48:	2304      	movs	r3, #4
 8007e4a:	77fb      	strb	r3, [r7, #31]
 8007e4c:	e070      	b.n	8007f30 <UART_SetConfig+0x348>
 8007e4e:	2308      	movs	r3, #8
 8007e50:	77fb      	strb	r3, [r7, #31]
 8007e52:	e06d      	b.n	8007f30 <UART_SetConfig+0x348>
 8007e54:	2310      	movs	r3, #16
 8007e56:	77fb      	strb	r3, [r7, #31]
 8007e58:	e06a      	b.n	8007f30 <UART_SetConfig+0x348>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a1b      	ldr	r2, [pc, #108]	; (8007ecc <UART_SetConfig+0x2e4>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d138      	bne.n	8007ed6 <UART_SetConfig+0x2ee>
 8007e64:	4b13      	ldr	r3, [pc, #76]	; (8007eb4 <UART_SetConfig+0x2cc>)
 8007e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e6a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007e6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e72:	d017      	beq.n	8007ea4 <UART_SetConfig+0x2bc>
 8007e74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e78:	d82a      	bhi.n	8007ed0 <UART_SetConfig+0x2e8>
 8007e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e7e:	d00b      	beq.n	8007e98 <UART_SetConfig+0x2b0>
 8007e80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e84:	d824      	bhi.n	8007ed0 <UART_SetConfig+0x2e8>
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d003      	beq.n	8007e92 <UART_SetConfig+0x2aa>
 8007e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e8e:	d006      	beq.n	8007e9e <UART_SetConfig+0x2b6>
 8007e90:	e01e      	b.n	8007ed0 <UART_SetConfig+0x2e8>
 8007e92:	2300      	movs	r3, #0
 8007e94:	77fb      	strb	r3, [r7, #31]
 8007e96:	e04b      	b.n	8007f30 <UART_SetConfig+0x348>
 8007e98:	2302      	movs	r3, #2
 8007e9a:	77fb      	strb	r3, [r7, #31]
 8007e9c:	e048      	b.n	8007f30 <UART_SetConfig+0x348>
 8007e9e:	2304      	movs	r3, #4
 8007ea0:	77fb      	strb	r3, [r7, #31]
 8007ea2:	e045      	b.n	8007f30 <UART_SetConfig+0x348>
 8007ea4:	2308      	movs	r3, #8
 8007ea6:	77fb      	strb	r3, [r7, #31]
 8007ea8:	e042      	b.n	8007f30 <UART_SetConfig+0x348>
 8007eaa:	bf00      	nop
 8007eac:	efff69f3 	.word	0xefff69f3
 8007eb0:	40011000 	.word	0x40011000
 8007eb4:	40023800 	.word	0x40023800
 8007eb8:	40004400 	.word	0x40004400
 8007ebc:	40004800 	.word	0x40004800
 8007ec0:	40004c00 	.word	0x40004c00
 8007ec4:	40005000 	.word	0x40005000
 8007ec8:	40011400 	.word	0x40011400
 8007ecc:	40007800 	.word	0x40007800
 8007ed0:	2310      	movs	r3, #16
 8007ed2:	77fb      	strb	r3, [r7, #31]
 8007ed4:	e02c      	b.n	8007f30 <UART_SetConfig+0x348>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a72      	ldr	r2, [pc, #456]	; (80080a4 <UART_SetConfig+0x4bc>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d125      	bne.n	8007f2c <UART_SetConfig+0x344>
 8007ee0:	4b71      	ldr	r3, [pc, #452]	; (80080a8 <UART_SetConfig+0x4c0>)
 8007ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ee6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007eea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007eee:	d017      	beq.n	8007f20 <UART_SetConfig+0x338>
 8007ef0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007ef4:	d817      	bhi.n	8007f26 <UART_SetConfig+0x33e>
 8007ef6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007efa:	d00b      	beq.n	8007f14 <UART_SetConfig+0x32c>
 8007efc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f00:	d811      	bhi.n	8007f26 <UART_SetConfig+0x33e>
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d003      	beq.n	8007f0e <UART_SetConfig+0x326>
 8007f06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f0a:	d006      	beq.n	8007f1a <UART_SetConfig+0x332>
 8007f0c:	e00b      	b.n	8007f26 <UART_SetConfig+0x33e>
 8007f0e:	2300      	movs	r3, #0
 8007f10:	77fb      	strb	r3, [r7, #31]
 8007f12:	e00d      	b.n	8007f30 <UART_SetConfig+0x348>
 8007f14:	2302      	movs	r3, #2
 8007f16:	77fb      	strb	r3, [r7, #31]
 8007f18:	e00a      	b.n	8007f30 <UART_SetConfig+0x348>
 8007f1a:	2304      	movs	r3, #4
 8007f1c:	77fb      	strb	r3, [r7, #31]
 8007f1e:	e007      	b.n	8007f30 <UART_SetConfig+0x348>
 8007f20:	2308      	movs	r3, #8
 8007f22:	77fb      	strb	r3, [r7, #31]
 8007f24:	e004      	b.n	8007f30 <UART_SetConfig+0x348>
 8007f26:	2310      	movs	r3, #16
 8007f28:	77fb      	strb	r3, [r7, #31]
 8007f2a:	e001      	b.n	8007f30 <UART_SetConfig+0x348>
 8007f2c:	2310      	movs	r3, #16
 8007f2e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	69db      	ldr	r3, [r3, #28]
 8007f34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f38:	d15b      	bne.n	8007ff2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007f3a:	7ffb      	ldrb	r3, [r7, #31]
 8007f3c:	2b08      	cmp	r3, #8
 8007f3e:	d828      	bhi.n	8007f92 <UART_SetConfig+0x3aa>
 8007f40:	a201      	add	r2, pc, #4	; (adr r2, 8007f48 <UART_SetConfig+0x360>)
 8007f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f46:	bf00      	nop
 8007f48:	08007f6d 	.word	0x08007f6d
 8007f4c:	08007f75 	.word	0x08007f75
 8007f50:	08007f7d 	.word	0x08007f7d
 8007f54:	08007f93 	.word	0x08007f93
 8007f58:	08007f83 	.word	0x08007f83
 8007f5c:	08007f93 	.word	0x08007f93
 8007f60:	08007f93 	.word	0x08007f93
 8007f64:	08007f93 	.word	0x08007f93
 8007f68:	08007f8b 	.word	0x08007f8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f6c:	f7fd fff2 	bl	8005f54 <HAL_RCC_GetPCLK1Freq>
 8007f70:	61b8      	str	r0, [r7, #24]
        break;
 8007f72:	e013      	b.n	8007f9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f74:	f7fe f802 	bl	8005f7c <HAL_RCC_GetPCLK2Freq>
 8007f78:	61b8      	str	r0, [r7, #24]
        break;
 8007f7a:	e00f      	b.n	8007f9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f7c:	4b4b      	ldr	r3, [pc, #300]	; (80080ac <UART_SetConfig+0x4c4>)
 8007f7e:	61bb      	str	r3, [r7, #24]
        break;
 8007f80:	e00c      	b.n	8007f9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f82:	f7fd fed5 	bl	8005d30 <HAL_RCC_GetSysClockFreq>
 8007f86:	61b8      	str	r0, [r7, #24]
        break;
 8007f88:	e008      	b.n	8007f9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f8e:	61bb      	str	r3, [r7, #24]
        break;
 8007f90:	e004      	b.n	8007f9c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007f92:	2300      	movs	r3, #0
 8007f94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	77bb      	strb	r3, [r7, #30]
        break;
 8007f9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d074      	beq.n	800808c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	005a      	lsls	r2, r3, #1
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	085b      	lsrs	r3, r3, #1
 8007fac:	441a      	add	r2, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fb6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	2b0f      	cmp	r3, #15
 8007fbc:	d916      	bls.n	8007fec <UART_SetConfig+0x404>
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fc4:	d212      	bcs.n	8007fec <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	f023 030f 	bic.w	r3, r3, #15
 8007fce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	085b      	lsrs	r3, r3, #1
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	f003 0307 	and.w	r3, r3, #7
 8007fda:	b29a      	uxth	r2, r3
 8007fdc:	89fb      	ldrh	r3, [r7, #14]
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	89fa      	ldrh	r2, [r7, #14]
 8007fe8:	60da      	str	r2, [r3, #12]
 8007fea:	e04f      	b.n	800808c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	77bb      	strb	r3, [r7, #30]
 8007ff0:	e04c      	b.n	800808c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ff2:	7ffb      	ldrb	r3, [r7, #31]
 8007ff4:	2b08      	cmp	r3, #8
 8007ff6:	d828      	bhi.n	800804a <UART_SetConfig+0x462>
 8007ff8:	a201      	add	r2, pc, #4	; (adr r2, 8008000 <UART_SetConfig+0x418>)
 8007ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ffe:	bf00      	nop
 8008000:	08008025 	.word	0x08008025
 8008004:	0800802d 	.word	0x0800802d
 8008008:	08008035 	.word	0x08008035
 800800c:	0800804b 	.word	0x0800804b
 8008010:	0800803b 	.word	0x0800803b
 8008014:	0800804b 	.word	0x0800804b
 8008018:	0800804b 	.word	0x0800804b
 800801c:	0800804b 	.word	0x0800804b
 8008020:	08008043 	.word	0x08008043
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008024:	f7fd ff96 	bl	8005f54 <HAL_RCC_GetPCLK1Freq>
 8008028:	61b8      	str	r0, [r7, #24]
        break;
 800802a:	e013      	b.n	8008054 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800802c:	f7fd ffa6 	bl	8005f7c <HAL_RCC_GetPCLK2Freq>
 8008030:	61b8      	str	r0, [r7, #24]
        break;
 8008032:	e00f      	b.n	8008054 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008034:	4b1d      	ldr	r3, [pc, #116]	; (80080ac <UART_SetConfig+0x4c4>)
 8008036:	61bb      	str	r3, [r7, #24]
        break;
 8008038:	e00c      	b.n	8008054 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800803a:	f7fd fe79 	bl	8005d30 <HAL_RCC_GetSysClockFreq>
 800803e:	61b8      	str	r0, [r7, #24]
        break;
 8008040:	e008      	b.n	8008054 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008046:	61bb      	str	r3, [r7, #24]
        break;
 8008048:	e004      	b.n	8008054 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800804a:	2300      	movs	r3, #0
 800804c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	77bb      	strb	r3, [r7, #30]
        break;
 8008052:	bf00      	nop
    }

    if (pclk != 0U)
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d018      	beq.n	800808c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	085a      	lsrs	r2, r3, #1
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	441a      	add	r2, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	fbb2 f3f3 	udiv	r3, r2, r3
 800806c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	2b0f      	cmp	r3, #15
 8008072:	d909      	bls.n	8008088 <UART_SetConfig+0x4a0>
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800807a:	d205      	bcs.n	8008088 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	b29a      	uxth	r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	60da      	str	r2, [r3, #12]
 8008086:	e001      	b.n	800808c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008098:	7fbb      	ldrb	r3, [r7, #30]
}
 800809a:	4618      	mov	r0, r3
 800809c:	3720      	adds	r7, #32
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	40007c00 	.word	0x40007c00
 80080a8:	40023800 	.word	0x40023800
 80080ac:	00f42400 	.word	0x00f42400

080080b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080bc:	f003 0301 	and.w	r3, r3, #1
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d00a      	beq.n	80080da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	430a      	orrs	r2, r1
 80080d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080de:	f003 0302 	and.w	r3, r3, #2
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00a      	beq.n	80080fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	430a      	orrs	r2, r1
 80080fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008100:	f003 0304 	and.w	r3, r3, #4
 8008104:	2b00      	cmp	r3, #0
 8008106:	d00a      	beq.n	800811e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	430a      	orrs	r2, r1
 800811c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008122:	f003 0308 	and.w	r3, r3, #8
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00a      	beq.n	8008140 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	430a      	orrs	r2, r1
 800813e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008144:	f003 0310 	and.w	r3, r3, #16
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00a      	beq.n	8008162 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	430a      	orrs	r2, r1
 8008160:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008166:	f003 0320 	and.w	r3, r3, #32
 800816a:	2b00      	cmp	r3, #0
 800816c:	d00a      	beq.n	8008184 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	430a      	orrs	r2, r1
 8008182:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800818c:	2b00      	cmp	r3, #0
 800818e:	d01a      	beq.n	80081c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	430a      	orrs	r2, r1
 80081a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081ae:	d10a      	bne.n	80081c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	430a      	orrs	r2, r1
 80081c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00a      	beq.n	80081e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	430a      	orrs	r2, r1
 80081e6:	605a      	str	r2, [r3, #4]
  }
}
 80081e8:	bf00      	nop
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b086      	sub	sp, #24
 80081f8:	af02      	add	r7, sp, #8
 80081fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008204:	f7f9 fcd6 	bl	8001bb4 <HAL_GetTick>
 8008208:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f003 0308 	and.w	r3, r3, #8
 8008214:	2b08      	cmp	r3, #8
 8008216:	d10e      	bne.n	8008236 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008218:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800821c:	9300      	str	r3, [sp, #0]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2200      	movs	r2, #0
 8008222:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f831 	bl	800828e <UART_WaitOnFlagUntilTimeout>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d001      	beq.n	8008236 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008232:	2303      	movs	r3, #3
 8008234:	e027      	b.n	8008286 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 0304 	and.w	r3, r3, #4
 8008240:	2b04      	cmp	r3, #4
 8008242:	d10e      	bne.n	8008262 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008244:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008248:	9300      	str	r3, [sp, #0]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2200      	movs	r2, #0
 800824e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 f81b 	bl	800828e <UART_WaitOnFlagUntilTimeout>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d001      	beq.n	8008262 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800825e:	2303      	movs	r3, #3
 8008260:	e011      	b.n	8008286 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2220      	movs	r2, #32
 8008266:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2220      	movs	r2, #32
 800826c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	3710      	adds	r7, #16
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b09c      	sub	sp, #112	; 0x70
 8008292:	af00      	add	r7, sp, #0
 8008294:	60f8      	str	r0, [r7, #12]
 8008296:	60b9      	str	r1, [r7, #8]
 8008298:	603b      	str	r3, [r7, #0]
 800829a:	4613      	mov	r3, r2
 800829c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800829e:	e0a7      	b.n	80083f0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082a6:	f000 80a3 	beq.w	80083f0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082aa:	f7f9 fc83 	bl	8001bb4 <HAL_GetTick>
 80082ae:	4602      	mov	r2, r0
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	1ad3      	subs	r3, r2, r3
 80082b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d302      	bcc.n	80082c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80082ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d13f      	bne.n	8008340 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082c8:	e853 3f00 	ldrex	r3, [r3]
 80082cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80082ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80082d4:	667b      	str	r3, [r7, #100]	; 0x64
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	461a      	mov	r2, r3
 80082dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80082e6:	e841 2300 	strex	r3, r2, [r1]
 80082ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80082ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d1e6      	bne.n	80082c0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	3308      	adds	r3, #8
 80082f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082fc:	e853 3f00 	ldrex	r3, [r3]
 8008300:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008304:	f023 0301 	bic.w	r3, r3, #1
 8008308:	663b      	str	r3, [r7, #96]	; 0x60
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	3308      	adds	r3, #8
 8008310:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008312:	64ba      	str	r2, [r7, #72]	; 0x48
 8008314:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008316:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008318:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800831a:	e841 2300 	strex	r3, r2, [r1]
 800831e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1e5      	bne.n	80082f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2220      	movs	r2, #32
 800832a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2220      	movs	r2, #32
 8008330:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2200      	movs	r2, #0
 8008338:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800833c:	2303      	movs	r3, #3
 800833e:	e068      	b.n	8008412 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f003 0304 	and.w	r3, r3, #4
 800834a:	2b00      	cmp	r3, #0
 800834c:	d050      	beq.n	80083f0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	69db      	ldr	r3, [r3, #28]
 8008354:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008358:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800835c:	d148      	bne.n	80083f0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008366:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008370:	e853 3f00 	ldrex	r3, [r3]
 8008374:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008378:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800837c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	461a      	mov	r2, r3
 8008384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008386:	637b      	str	r3, [r7, #52]	; 0x34
 8008388:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800838c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800838e:	e841 2300 	strex	r3, r2, [r1]
 8008392:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1e6      	bne.n	8008368 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	3308      	adds	r3, #8
 80083a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	e853 3f00 	ldrex	r3, [r3]
 80083a8:	613b      	str	r3, [r7, #16]
   return(result);
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	f023 0301 	bic.w	r3, r3, #1
 80083b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	3308      	adds	r3, #8
 80083b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80083ba:	623a      	str	r2, [r7, #32]
 80083bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083be:	69f9      	ldr	r1, [r7, #28]
 80083c0:	6a3a      	ldr	r2, [r7, #32]
 80083c2:	e841 2300 	strex	r3, r2, [r1]
 80083c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d1e5      	bne.n	800839a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2220      	movs	r2, #32
 80083d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2220      	movs	r2, #32
 80083d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2220      	movs	r2, #32
 80083e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2200      	movs	r2, #0
 80083e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80083ec:	2303      	movs	r3, #3
 80083ee:	e010      	b.n	8008412 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	69da      	ldr	r2, [r3, #28]
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	4013      	ands	r3, r2
 80083fa:	68ba      	ldr	r2, [r7, #8]
 80083fc:	429a      	cmp	r2, r3
 80083fe:	bf0c      	ite	eq
 8008400:	2301      	moveq	r3, #1
 8008402:	2300      	movne	r3, #0
 8008404:	b2db      	uxtb	r3, r3
 8008406:	461a      	mov	r2, r3
 8008408:	79fb      	ldrb	r3, [r7, #7]
 800840a:	429a      	cmp	r2, r3
 800840c:	f43f af48 	beq.w	80082a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	3770      	adds	r7, #112	; 0x70
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
	...

0800841c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800841c:	b084      	sub	sp, #16
 800841e:	b480      	push	{r7}
 8008420:	b085      	sub	sp, #20
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
 8008426:	f107 001c 	add.w	r0, r7, #28
 800842a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800842e:	2300      	movs	r3, #0
 8008430:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008432:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008434:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008436:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800843a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800843c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800843e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008442:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008446:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008448:	68fa      	ldr	r2, [r7, #12]
 800844a:	4313      	orrs	r3, r2
 800844c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	685a      	ldr	r2, [r3, #4]
 8008452:	4b07      	ldr	r3, [pc, #28]	; (8008470 <SDMMC_Init+0x54>)
 8008454:	4013      	ands	r3, r2
 8008456:	68fa      	ldr	r2, [r7, #12]
 8008458:	431a      	orrs	r2, r3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3714      	adds	r7, #20
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	b004      	add	sp, #16
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop
 8008470:	ffff8100 	.word	0xffff8100

08008474 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008482:	4618      	mov	r0, r3
 8008484:	370c      	adds	r7, #12
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr

0800848e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800848e:	b480      	push	{r7}
 8008490:	b083      	sub	sp, #12
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
 8008496:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80084a2:	2300      	movs	r3, #0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	370c      	adds	r7, #12
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2203      	movs	r2, #3
 80084bc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f003 0303 	and.w	r3, r3, #3
}
 80084dc:	4618      	mov	r0, r3
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80084f2:	2300      	movs	r3, #0
 80084f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008506:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800850c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008512:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	4313      	orrs	r3, r2
 8008518:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	68da      	ldr	r2, [r3, #12]
 800851e:	4b06      	ldr	r3, [pc, #24]	; (8008538 <SDMMC_SendCommand+0x50>)
 8008520:	4013      	ands	r3, r2
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	431a      	orrs	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	3714      	adds	r7, #20
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr
 8008538:	fffff000 	.word	0xfffff000

0800853c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	691b      	ldr	r3, [r3, #16]
 8008548:	b2db      	uxtb	r3, r3
}
 800854a:	4618      	mov	r0, r3
 800854c:	370c      	adds	r7, #12
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr

08008556 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008556:	b480      	push	{r7}
 8008558:	b085      	sub	sp, #20
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
 800855e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	3314      	adds	r3, #20
 8008564:	461a      	mov	r2, r3
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	4413      	add	r3, r2
 800856a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
}  
 8008570:	4618      	mov	r0, r3
 8008572:	3714      	adds	r7, #20
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800857c:	b480      	push	{r7}
 800857e:	b085      	sub	sp, #20
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008586:	2300      	movs	r3, #0
 8008588:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	685a      	ldr	r2, [r3, #4]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80085a2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80085a8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80085ae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80085b0:	68fa      	ldr	r2, [r7, #12]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ba:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	431a      	orrs	r2, r3
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80085c6:	2300      	movs	r3, #0

}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3714      	adds	r7, #20
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b088      	sub	sp, #32
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80085e2:	2310      	movs	r3, #16
 80085e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80085e6:	2340      	movs	r3, #64	; 0x40
 80085e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80085ea:	2300      	movs	r3, #0
 80085ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80085ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80085f4:	f107 0308 	add.w	r3, r7, #8
 80085f8:	4619      	mov	r1, r3
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f7ff ff74 	bl	80084e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008600:	f241 3288 	movw	r2, #5000	; 0x1388
 8008604:	2110      	movs	r1, #16
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 f9d6 	bl	80089b8 <SDMMC_GetCmdResp1>
 800860c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800860e:	69fb      	ldr	r3, [r7, #28]
}
 8008610:	4618      	mov	r0, r3
 8008612:	3720      	adds	r7, #32
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b088      	sub	sp, #32
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008626:	2311      	movs	r3, #17
 8008628:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800862a:	2340      	movs	r3, #64	; 0x40
 800862c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800862e:	2300      	movs	r3, #0
 8008630:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008636:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008638:	f107 0308 	add.w	r3, r7, #8
 800863c:	4619      	mov	r1, r3
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f7ff ff52 	bl	80084e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008644:	f241 3288 	movw	r2, #5000	; 0x1388
 8008648:	2111      	movs	r1, #17
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 f9b4 	bl	80089b8 <SDMMC_GetCmdResp1>
 8008650:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008652:	69fb      	ldr	r3, [r7, #28]
}
 8008654:	4618      	mov	r0, r3
 8008656:	3720      	adds	r7, #32
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b088      	sub	sp, #32
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800866a:	2312      	movs	r3, #18
 800866c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800866e:	2340      	movs	r3, #64	; 0x40
 8008670:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008672:	2300      	movs	r3, #0
 8008674:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800867a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800867c:	f107 0308 	add.w	r3, r7, #8
 8008680:	4619      	mov	r1, r3
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f7ff ff30 	bl	80084e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008688:	f241 3288 	movw	r2, #5000	; 0x1388
 800868c:	2112      	movs	r1, #18
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 f992 	bl	80089b8 <SDMMC_GetCmdResp1>
 8008694:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008696:	69fb      	ldr	r3, [r7, #28]
}
 8008698:	4618      	mov	r0, r3
 800869a:	3720      	adds	r7, #32
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b088      	sub	sp, #32
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80086ae:	2318      	movs	r3, #24
 80086b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80086b2:	2340      	movs	r3, #64	; 0x40
 80086b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80086b6:	2300      	movs	r3, #0
 80086b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80086ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80086c0:	f107 0308 	add.w	r3, r7, #8
 80086c4:	4619      	mov	r1, r3
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f7ff ff0e 	bl	80084e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80086cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80086d0:	2118      	movs	r1, #24
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 f970 	bl	80089b8 <SDMMC_GetCmdResp1>
 80086d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086da:	69fb      	ldr	r3, [r7, #28]
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3720      	adds	r7, #32
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b088      	sub	sp, #32
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80086f2:	2319      	movs	r3, #25
 80086f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80086f6:	2340      	movs	r3, #64	; 0x40
 80086f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80086fa:	2300      	movs	r3, #0
 80086fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80086fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008702:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008704:	f107 0308 	add.w	r3, r7, #8
 8008708:	4619      	mov	r1, r3
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f7ff feec 	bl	80084e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008710:	f241 3288 	movw	r2, #5000	; 0x1388
 8008714:	2119      	movs	r1, #25
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 f94e 	bl	80089b8 <SDMMC_GetCmdResp1>
 800871c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800871e:	69fb      	ldr	r3, [r7, #28]
}
 8008720:	4618      	mov	r0, r3
 8008722:	3720      	adds	r7, #32
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b088      	sub	sp, #32
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008730:	2300      	movs	r3, #0
 8008732:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008734:	230c      	movs	r3, #12
 8008736:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008738:	2340      	movs	r3, #64	; 0x40
 800873a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800873c:	2300      	movs	r3, #0
 800873e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008740:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008744:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008746:	f107 0308 	add.w	r3, r7, #8
 800874a:	4619      	mov	r1, r3
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f7ff fecb 	bl	80084e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008752:	4a05      	ldr	r2, [pc, #20]	; (8008768 <SDMMC_CmdStopTransfer+0x40>)
 8008754:	210c      	movs	r1, #12
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 f92e 	bl	80089b8 <SDMMC_GetCmdResp1>
 800875c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800875e:	69fb      	ldr	r3, [r7, #28]
}
 8008760:	4618      	mov	r0, r3
 8008762:	3720      	adds	r7, #32
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}
 8008768:	05f5e100 	.word	0x05f5e100

0800876c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b08a      	sub	sp, #40	; 0x28
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800877c:	2307      	movs	r3, #7
 800877e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008780:	2340      	movs	r3, #64	; 0x40
 8008782:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008784:	2300      	movs	r3, #0
 8008786:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800878c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800878e:	f107 0310 	add.w	r3, r7, #16
 8008792:	4619      	mov	r1, r3
 8008794:	68f8      	ldr	r0, [r7, #12]
 8008796:	f7ff fea7 	bl	80084e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800879a:	f241 3288 	movw	r2, #5000	; 0x1388
 800879e:	2107      	movs	r1, #7
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	f000 f909 	bl	80089b8 <SDMMC_GetCmdResp1>
 80087a6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80087a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3728      	adds	r7, #40	; 0x28
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b088      	sub	sp, #32
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80087ba:	2300      	movs	r3, #0
 80087bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80087be:	2300      	movs	r3, #0
 80087c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80087c2:	2300      	movs	r3, #0
 80087c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80087c6:	2300      	movs	r3, #0
 80087c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80087ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80087d0:	f107 0308 	add.w	r3, r7, #8
 80087d4:	4619      	mov	r1, r3
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f7ff fe86 	bl	80084e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 fb23 	bl	8008e28 <SDMMC_GetCmdError>
 80087e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087e4:	69fb      	ldr	r3, [r7, #28]
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3720      	adds	r7, #32
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b088      	sub	sp, #32
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80087f6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80087fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80087fc:	2308      	movs	r3, #8
 80087fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008800:	2340      	movs	r3, #64	; 0x40
 8008802:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008804:	2300      	movs	r3, #0
 8008806:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800880c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800880e:	f107 0308 	add.w	r3, r7, #8
 8008812:	4619      	mov	r1, r3
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f7ff fe67 	bl	80084e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 fab6 	bl	8008d8c <SDMMC_GetCmdResp7>
 8008820:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008822:	69fb      	ldr	r3, [r7, #28]
}
 8008824:	4618      	mov	r0, r3
 8008826:	3720      	adds	r7, #32
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b088      	sub	sp, #32
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800883a:	2337      	movs	r3, #55	; 0x37
 800883c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800883e:	2340      	movs	r3, #64	; 0x40
 8008840:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008842:	2300      	movs	r3, #0
 8008844:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800884a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800884c:	f107 0308 	add.w	r3, r7, #8
 8008850:	4619      	mov	r1, r3
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f7ff fe48 	bl	80084e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008858:	f241 3288 	movw	r2, #5000	; 0x1388
 800885c:	2137      	movs	r1, #55	; 0x37
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 f8aa 	bl	80089b8 <SDMMC_GetCmdResp1>
 8008864:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008866:	69fb      	ldr	r3, [r7, #28]
}
 8008868:	4618      	mov	r0, r3
 800886a:	3720      	adds	r7, #32
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b088      	sub	sp, #32
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800887a:	683a      	ldr	r2, [r7, #0]
 800887c:	4b0d      	ldr	r3, [pc, #52]	; (80088b4 <SDMMC_CmdAppOperCommand+0x44>)
 800887e:	4313      	orrs	r3, r2
 8008880:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008882:	2329      	movs	r3, #41	; 0x29
 8008884:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008886:	2340      	movs	r3, #64	; 0x40
 8008888:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800888a:	2300      	movs	r3, #0
 800888c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800888e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008892:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008894:	f107 0308 	add.w	r3, r7, #8
 8008898:	4619      	mov	r1, r3
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f7ff fe24 	bl	80084e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 f9bf 	bl	8008c24 <SDMMC_GetCmdResp3>
 80088a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088a8:	69fb      	ldr	r3, [r7, #28]
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3720      	adds	r7, #32
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	80100000 	.word	0x80100000

080088b8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b088      	sub	sp, #32
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80088c0:	2300      	movs	r3, #0
 80088c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80088c4:	2302      	movs	r3, #2
 80088c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80088c8:	23c0      	movs	r3, #192	; 0xc0
 80088ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80088cc:	2300      	movs	r3, #0
 80088ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80088d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80088d6:	f107 0308 	add.w	r3, r7, #8
 80088da:	4619      	mov	r1, r3
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f7ff fe03 	bl	80084e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 f956 	bl	8008b94 <SDMMC_GetCmdResp2>
 80088e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088ea:	69fb      	ldr	r3, [r7, #28]
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3720      	adds	r7, #32
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b088      	sub	sp, #32
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008902:	2309      	movs	r3, #9
 8008904:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008906:	23c0      	movs	r3, #192	; 0xc0
 8008908:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800890a:	2300      	movs	r3, #0
 800890c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800890e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008912:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008914:	f107 0308 	add.w	r3, r7, #8
 8008918:	4619      	mov	r1, r3
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f7ff fde4 	bl	80084e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 f937 	bl	8008b94 <SDMMC_GetCmdResp2>
 8008926:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008928:	69fb      	ldr	r3, [r7, #28]
}
 800892a:	4618      	mov	r0, r3
 800892c:	3720      	adds	r7, #32
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b088      	sub	sp, #32
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
 800893a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800893c:	2300      	movs	r3, #0
 800893e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008940:	2303      	movs	r3, #3
 8008942:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008944:	2340      	movs	r3, #64	; 0x40
 8008946:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008948:	2300      	movs	r3, #0
 800894a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800894c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008950:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008952:	f107 0308 	add.w	r3, r7, #8
 8008956:	4619      	mov	r1, r3
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f7ff fdc5 	bl	80084e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800895e:	683a      	ldr	r2, [r7, #0]
 8008960:	2103      	movs	r1, #3
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 f99c 	bl	8008ca0 <SDMMC_GetCmdResp6>
 8008968:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800896a:	69fb      	ldr	r3, [r7, #28]
}
 800896c:	4618      	mov	r0, r3
 800896e:	3720      	adds	r7, #32
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b088      	sub	sp, #32
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008982:	230d      	movs	r3, #13
 8008984:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008986:	2340      	movs	r3, #64	; 0x40
 8008988:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800898a:	2300      	movs	r3, #0
 800898c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800898e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008992:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008994:	f107 0308 	add.w	r3, r7, #8
 8008998:	4619      	mov	r1, r3
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f7ff fda4 	bl	80084e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80089a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80089a4:	210d      	movs	r1, #13
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 f806 	bl	80089b8 <SDMMC_GetCmdResp1>
 80089ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089ae:	69fb      	ldr	r3, [r7, #28]
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3720      	adds	r7, #32
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b088      	sub	sp, #32
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	460b      	mov	r3, r1
 80089c2:	607a      	str	r2, [r7, #4]
 80089c4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80089c6:	4b70      	ldr	r3, [pc, #448]	; (8008b88 <SDMMC_GetCmdResp1+0x1d0>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a70      	ldr	r2, [pc, #448]	; (8008b8c <SDMMC_GetCmdResp1+0x1d4>)
 80089cc:	fba2 2303 	umull	r2, r3, r2, r3
 80089d0:	0a5a      	lsrs	r2, r3, #9
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	fb02 f303 	mul.w	r3, r2, r3
 80089d8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	1e5a      	subs	r2, r3, #1
 80089de:	61fa      	str	r2, [r7, #28]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d102      	bne.n	80089ea <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80089e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80089e8:	e0c9      	b.n	8008b7e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ee:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80089f0:	69bb      	ldr	r3, [r7, #24]
 80089f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d0ef      	beq.n	80089da <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d1ea      	bne.n	80089da <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a08:	f003 0304 	and.w	r3, r3, #4
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d004      	beq.n	8008a1a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2204      	movs	r2, #4
 8008a14:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008a16:	2304      	movs	r3, #4
 8008a18:	e0b1      	b.n	8008b7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a1e:	f003 0301 	and.w	r3, r3, #1
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d004      	beq.n	8008a30 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e0a6      	b.n	8008b7e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	22c5      	movs	r2, #197	; 0xc5
 8008a34:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008a36:	68f8      	ldr	r0, [r7, #12]
 8008a38:	f7ff fd80 	bl	800853c <SDMMC_GetCommandResponse>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	461a      	mov	r2, r3
 8008a40:	7afb      	ldrb	r3, [r7, #11]
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d001      	beq.n	8008a4a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a46:	2301      	movs	r3, #1
 8008a48:	e099      	b.n	8008b7e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008a4a:	2100      	movs	r1, #0
 8008a4c:	68f8      	ldr	r0, [r7, #12]
 8008a4e:	f7ff fd82 	bl	8008556 <SDMMC_GetResponse>
 8008a52:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008a54:	697a      	ldr	r2, [r7, #20]
 8008a56:	4b4e      	ldr	r3, [pc, #312]	; (8008b90 <SDMMC_GetCmdResp1+0x1d8>)
 8008a58:	4013      	ands	r3, r2
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d101      	bne.n	8008a62 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	e08d      	b.n	8008b7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	da02      	bge.n	8008a6e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008a68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a6c:	e087      	b.n	8008b7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d001      	beq.n	8008a7c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008a78:	2340      	movs	r3, #64	; 0x40
 8008a7a:	e080      	b.n	8008b7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d001      	beq.n	8008a8a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008a86:	2380      	movs	r3, #128	; 0x80
 8008a88:	e079      	b.n	8008b7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d002      	beq.n	8008a9a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008a94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a98:	e071      	b.n	8008b7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d002      	beq.n	8008aaa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008aa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008aa8:	e069      	b.n	8008b7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d002      	beq.n	8008aba <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008ab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ab8:	e061      	b.n	8008b7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d002      	beq.n	8008aca <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008ac4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ac8:	e059      	b.n	8008b7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d002      	beq.n	8008ada <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008ad4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ad8:	e051      	b.n	8008b7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d002      	beq.n	8008aea <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008ae4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008ae8:	e049      	b.n	8008b7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d002      	beq.n	8008afa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008af4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008af8:	e041      	b.n	8008b7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d002      	beq.n	8008b0a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008b04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b08:	e039      	b.n	8008b7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d002      	beq.n	8008b1a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008b14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008b18:	e031      	b.n	8008b7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d002      	beq.n	8008b2a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008b24:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008b28:	e029      	b.n	8008b7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d002      	beq.n	8008b3a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008b34:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008b38:	e021      	b.n	8008b7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d002      	beq.n	8008b4a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008b44:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008b48:	e019      	b.n	8008b7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d002      	beq.n	8008b5a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008b54:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008b58:	e011      	b.n	8008b7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d002      	beq.n	8008b6a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008b64:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008b68:	e009      	b.n	8008b7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	f003 0308 	and.w	r3, r3, #8
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d002      	beq.n	8008b7a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008b74:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008b78:	e001      	b.n	8008b7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008b7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3720      	adds	r7, #32
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	20000004 	.word	0x20000004
 8008b8c:	10624dd3 	.word	0x10624dd3
 8008b90:	fdffe008 	.word	0xfdffe008

08008b94 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008b9c:	4b1f      	ldr	r3, [pc, #124]	; (8008c1c <SDMMC_GetCmdResp2+0x88>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a1f      	ldr	r2, [pc, #124]	; (8008c20 <SDMMC_GetCmdResp2+0x8c>)
 8008ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ba6:	0a5b      	lsrs	r3, r3, #9
 8008ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bac:	fb02 f303 	mul.w	r3, r2, r3
 8008bb0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	1e5a      	subs	r2, r3, #1
 8008bb6:	60fa      	str	r2, [r7, #12]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d102      	bne.n	8008bc2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008bbc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008bc0:	e026      	b.n	8008c10 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bc6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d0ef      	beq.n	8008bb2 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d1ea      	bne.n	8008bb2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008be0:	f003 0304 	and.w	r3, r3, #4
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d004      	beq.n	8008bf2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2204      	movs	r2, #4
 8008bec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008bee:	2304      	movs	r3, #4
 8008bf0:	e00e      	b.n	8008c10 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bf6:	f003 0301 	and.w	r3, r3, #1
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d004      	beq.n	8008c08 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2201      	movs	r2, #1
 8008c02:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c04:	2301      	movs	r3, #1
 8008c06:	e003      	b.n	8008c10 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	22c5      	movs	r2, #197	; 0xc5
 8008c0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008c0e:	2300      	movs	r3, #0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3714      	adds	r7, #20
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr
 8008c1c:	20000004 	.word	0x20000004
 8008c20:	10624dd3 	.word	0x10624dd3

08008c24 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b085      	sub	sp, #20
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008c2c:	4b1a      	ldr	r3, [pc, #104]	; (8008c98 <SDMMC_GetCmdResp3+0x74>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a1a      	ldr	r2, [pc, #104]	; (8008c9c <SDMMC_GetCmdResp3+0x78>)
 8008c32:	fba2 2303 	umull	r2, r3, r2, r3
 8008c36:	0a5b      	lsrs	r3, r3, #9
 8008c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c3c:	fb02 f303 	mul.w	r3, r2, r3
 8008c40:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	1e5a      	subs	r2, r3, #1
 8008c46:	60fa      	str	r2, [r7, #12]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d102      	bne.n	8008c52 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008c4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008c50:	e01b      	b.n	8008c8a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c56:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d0ef      	beq.n	8008c42 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d1ea      	bne.n	8008c42 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c70:	f003 0304 	and.w	r3, r3, #4
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d004      	beq.n	8008c82 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2204      	movs	r2, #4
 8008c7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008c7e:	2304      	movs	r3, #4
 8008c80:	e003      	b.n	8008c8a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	22c5      	movs	r2, #197	; 0xc5
 8008c86:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008c88:	2300      	movs	r3, #0
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3714      	adds	r7, #20
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr
 8008c96:	bf00      	nop
 8008c98:	20000004 	.word	0x20000004
 8008c9c:	10624dd3 	.word	0x10624dd3

08008ca0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b088      	sub	sp, #32
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	460b      	mov	r3, r1
 8008caa:	607a      	str	r2, [r7, #4]
 8008cac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008cae:	4b35      	ldr	r3, [pc, #212]	; (8008d84 <SDMMC_GetCmdResp6+0xe4>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a35      	ldr	r2, [pc, #212]	; (8008d88 <SDMMC_GetCmdResp6+0xe8>)
 8008cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8008cb8:	0a5b      	lsrs	r3, r3, #9
 8008cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cbe:	fb02 f303 	mul.w	r3, r2, r3
 8008cc2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	1e5a      	subs	r2, r3, #1
 8008cc8:	61fa      	str	r2, [r7, #28]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d102      	bne.n	8008cd4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008cce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008cd2:	e052      	b.n	8008d7a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cd8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d0ef      	beq.n	8008cc4 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008ce4:	69bb      	ldr	r3, [r7, #24]
 8008ce6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d1ea      	bne.n	8008cc4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf2:	f003 0304 	and.w	r3, r3, #4
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d004      	beq.n	8008d04 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2204      	movs	r2, #4
 8008cfe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008d00:	2304      	movs	r3, #4
 8008d02:	e03a      	b.n	8008d7a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d08:	f003 0301 	and.w	r3, r3, #1
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d004      	beq.n	8008d1a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2201      	movs	r2, #1
 8008d14:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008d16:	2301      	movs	r3, #1
 8008d18:	e02f      	b.n	8008d7a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008d1a:	68f8      	ldr	r0, [r7, #12]
 8008d1c:	f7ff fc0e 	bl	800853c <SDMMC_GetCommandResponse>
 8008d20:	4603      	mov	r3, r0
 8008d22:	461a      	mov	r2, r3
 8008d24:	7afb      	ldrb	r3, [r7, #11]
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d001      	beq.n	8008d2e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e025      	b.n	8008d7a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	22c5      	movs	r2, #197	; 0xc5
 8008d32:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008d34:	2100      	movs	r1, #0
 8008d36:	68f8      	ldr	r0, [r7, #12]
 8008d38:	f7ff fc0d 	bl	8008556 <SDMMC_GetResponse>
 8008d3c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d106      	bne.n	8008d56 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	0c1b      	lsrs	r3, r3, #16
 8008d4c:	b29a      	uxth	r2, r3
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008d52:	2300      	movs	r3, #0
 8008d54:	e011      	b.n	8008d7a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d002      	beq.n	8008d66 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008d60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008d64:	e009      	b.n	8008d7a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d002      	beq.n	8008d76 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d74:	e001      	b.n	8008d7a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008d76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3720      	adds	r7, #32
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	20000004 	.word	0x20000004
 8008d88:	10624dd3 	.word	0x10624dd3

08008d8c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b085      	sub	sp, #20
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008d94:	4b22      	ldr	r3, [pc, #136]	; (8008e20 <SDMMC_GetCmdResp7+0x94>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a22      	ldr	r2, [pc, #136]	; (8008e24 <SDMMC_GetCmdResp7+0x98>)
 8008d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d9e:	0a5b      	lsrs	r3, r3, #9
 8008da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008da4:	fb02 f303 	mul.w	r3, r2, r3
 8008da8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	1e5a      	subs	r2, r3, #1
 8008dae:	60fa      	str	r2, [r7, #12]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d102      	bne.n	8008dba <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008db4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008db8:	e02c      	b.n	8008e14 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dbe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d0ef      	beq.n	8008daa <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1ea      	bne.n	8008daa <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd8:	f003 0304 	and.w	r3, r3, #4
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d004      	beq.n	8008dea <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2204      	movs	r2, #4
 8008de4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008de6:	2304      	movs	r3, #4
 8008de8:	e014      	b.n	8008e14 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dee:	f003 0301 	and.w	r3, r3, #1
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d004      	beq.n	8008e00 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	e009      	b.n	8008e14 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d002      	beq.n	8008e12 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2240      	movs	r2, #64	; 0x40
 8008e10:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008e12:	2300      	movs	r3, #0
  
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3714      	adds	r7, #20
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr
 8008e20:	20000004 	.word	0x20000004
 8008e24:	10624dd3 	.word	0x10624dd3

08008e28 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b085      	sub	sp, #20
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008e30:	4b11      	ldr	r3, [pc, #68]	; (8008e78 <SDMMC_GetCmdError+0x50>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a11      	ldr	r2, [pc, #68]	; (8008e7c <SDMMC_GetCmdError+0x54>)
 8008e36:	fba2 2303 	umull	r2, r3, r2, r3
 8008e3a:	0a5b      	lsrs	r3, r3, #9
 8008e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e40:	fb02 f303 	mul.w	r3, r2, r3
 8008e44:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	1e5a      	subs	r2, r3, #1
 8008e4a:	60fa      	str	r2, [r7, #12]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d102      	bne.n	8008e56 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008e50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e54:	e009      	b.n	8008e6a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d0f1      	beq.n	8008e46 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	22c5      	movs	r2, #197	; 0xc5
 8008e66:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3714      	adds	r7, #20
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop
 8008e78:	20000004 	.word	0x20000004
 8008e7c:	10624dd3 	.word	0x10624dd3

08008e80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e80:	b084      	sub	sp, #16
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b084      	sub	sp, #16
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
 8008e8a:	f107 001c 	add.w	r0, r7, #28
 8008e8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d120      	bne.n	8008eda <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	68da      	ldr	r2, [r3, #12]
 8008ea8:	4b20      	ldr	r3, [pc, #128]	; (8008f2c <USB_CoreInit+0xac>)
 8008eaa:	4013      	ands	r3, r2
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d105      	bne.n	8008ece <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	68db      	ldr	r3, [r3, #12]
 8008ec6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f001 fbee 	bl	800a6b0 <USB_CoreReset>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	73fb      	strb	r3, [r7, #15]
 8008ed8:	e010      	b.n	8008efc <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f001 fbe2 	bl	800a6b0 <USB_CoreReset>
 8008eec:	4603      	mov	r3, r0
 8008eee:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d10b      	bne.n	8008f1a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	689b      	ldr	r3, [r3, #8]
 8008f06:	f043 0206 	orr.w	r2, r3, #6
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	f043 0220 	orr.w	r2, r3, #32
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3710      	adds	r7, #16
 8008f20:	46bd      	mov	sp, r7
 8008f22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f26:	b004      	add	sp, #16
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	ffbdffbf 	.word	0xffbdffbf

08008f30 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b087      	sub	sp, #28
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008f3e:	79fb      	ldrb	r3, [r7, #7]
 8008f40:	2b02      	cmp	r3, #2
 8008f42:	d165      	bne.n	8009010 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	4a41      	ldr	r2, [pc, #260]	; (800904c <USB_SetTurnaroundTime+0x11c>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d906      	bls.n	8008f5a <USB_SetTurnaroundTime+0x2a>
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	4a40      	ldr	r2, [pc, #256]	; (8009050 <USB_SetTurnaroundTime+0x120>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d202      	bcs.n	8008f5a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008f54:	230f      	movs	r3, #15
 8008f56:	617b      	str	r3, [r7, #20]
 8008f58:	e062      	b.n	8009020 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	4a3c      	ldr	r2, [pc, #240]	; (8009050 <USB_SetTurnaroundTime+0x120>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d306      	bcc.n	8008f70 <USB_SetTurnaroundTime+0x40>
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	4a3b      	ldr	r2, [pc, #236]	; (8009054 <USB_SetTurnaroundTime+0x124>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d202      	bcs.n	8008f70 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008f6a:	230e      	movs	r3, #14
 8008f6c:	617b      	str	r3, [r7, #20]
 8008f6e:	e057      	b.n	8009020 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	4a38      	ldr	r2, [pc, #224]	; (8009054 <USB_SetTurnaroundTime+0x124>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d306      	bcc.n	8008f86 <USB_SetTurnaroundTime+0x56>
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	4a37      	ldr	r2, [pc, #220]	; (8009058 <USB_SetTurnaroundTime+0x128>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d202      	bcs.n	8008f86 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008f80:	230d      	movs	r3, #13
 8008f82:	617b      	str	r3, [r7, #20]
 8008f84:	e04c      	b.n	8009020 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	4a33      	ldr	r2, [pc, #204]	; (8009058 <USB_SetTurnaroundTime+0x128>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d306      	bcc.n	8008f9c <USB_SetTurnaroundTime+0x6c>
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	4a32      	ldr	r2, [pc, #200]	; (800905c <USB_SetTurnaroundTime+0x12c>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d802      	bhi.n	8008f9c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008f96:	230c      	movs	r3, #12
 8008f98:	617b      	str	r3, [r7, #20]
 8008f9a:	e041      	b.n	8009020 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	4a2f      	ldr	r2, [pc, #188]	; (800905c <USB_SetTurnaroundTime+0x12c>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d906      	bls.n	8008fb2 <USB_SetTurnaroundTime+0x82>
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	4a2e      	ldr	r2, [pc, #184]	; (8009060 <USB_SetTurnaroundTime+0x130>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d802      	bhi.n	8008fb2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008fac:	230b      	movs	r3, #11
 8008fae:	617b      	str	r3, [r7, #20]
 8008fb0:	e036      	b.n	8009020 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	4a2a      	ldr	r2, [pc, #168]	; (8009060 <USB_SetTurnaroundTime+0x130>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d906      	bls.n	8008fc8 <USB_SetTurnaroundTime+0x98>
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	4a29      	ldr	r2, [pc, #164]	; (8009064 <USB_SetTurnaroundTime+0x134>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d802      	bhi.n	8008fc8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008fc2:	230a      	movs	r3, #10
 8008fc4:	617b      	str	r3, [r7, #20]
 8008fc6:	e02b      	b.n	8009020 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	4a26      	ldr	r2, [pc, #152]	; (8009064 <USB_SetTurnaroundTime+0x134>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d906      	bls.n	8008fde <USB_SetTurnaroundTime+0xae>
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	4a25      	ldr	r2, [pc, #148]	; (8009068 <USB_SetTurnaroundTime+0x138>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d202      	bcs.n	8008fde <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008fd8:	2309      	movs	r3, #9
 8008fda:	617b      	str	r3, [r7, #20]
 8008fdc:	e020      	b.n	8009020 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	4a21      	ldr	r2, [pc, #132]	; (8009068 <USB_SetTurnaroundTime+0x138>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d306      	bcc.n	8008ff4 <USB_SetTurnaroundTime+0xc4>
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	4a20      	ldr	r2, [pc, #128]	; (800906c <USB_SetTurnaroundTime+0x13c>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d802      	bhi.n	8008ff4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008fee:	2308      	movs	r3, #8
 8008ff0:	617b      	str	r3, [r7, #20]
 8008ff2:	e015      	b.n	8009020 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	4a1d      	ldr	r2, [pc, #116]	; (800906c <USB_SetTurnaroundTime+0x13c>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d906      	bls.n	800900a <USB_SetTurnaroundTime+0xda>
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	4a1c      	ldr	r2, [pc, #112]	; (8009070 <USB_SetTurnaroundTime+0x140>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d202      	bcs.n	800900a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009004:	2307      	movs	r3, #7
 8009006:	617b      	str	r3, [r7, #20]
 8009008:	e00a      	b.n	8009020 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800900a:	2306      	movs	r3, #6
 800900c:	617b      	str	r3, [r7, #20]
 800900e:	e007      	b.n	8009020 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009010:	79fb      	ldrb	r3, [r7, #7]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d102      	bne.n	800901c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009016:	2309      	movs	r3, #9
 8009018:	617b      	str	r3, [r7, #20]
 800901a:	e001      	b.n	8009020 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800901c:	2309      	movs	r3, #9
 800901e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	68da      	ldr	r2, [r3, #12]
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	029b      	lsls	r3, r3, #10
 8009034:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009038:	431a      	orrs	r2, r3
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800903e:	2300      	movs	r3, #0
}
 8009040:	4618      	mov	r0, r3
 8009042:	371c      	adds	r7, #28
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr
 800904c:	00d8acbf 	.word	0x00d8acbf
 8009050:	00e4e1c0 	.word	0x00e4e1c0
 8009054:	00f42400 	.word	0x00f42400
 8009058:	01067380 	.word	0x01067380
 800905c:	011a499f 	.word	0x011a499f
 8009060:	01312cff 	.word	0x01312cff
 8009064:	014ca43f 	.word	0x014ca43f
 8009068:	016e3600 	.word	0x016e3600
 800906c:	01a6ab1f 	.word	0x01a6ab1f
 8009070:	01e84800 	.word	0x01e84800

08009074 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	f043 0201 	orr.w	r2, r3, #1
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009088:	2300      	movs	r3, #0
}
 800908a:	4618      	mov	r0, r3
 800908c:	370c      	adds	r7, #12
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr

08009096 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009096:	b480      	push	{r7}
 8009098:	b083      	sub	sp, #12
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	f023 0201 	bic.w	r2, r3, #1
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80090aa:	2300      	movs	r3, #0
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	370c      	adds	r7, #12
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr

080090b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	460b      	mov	r3, r1
 80090c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80090c4:	2300      	movs	r3, #0
 80090c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80090d4:	78fb      	ldrb	r3, [r7, #3]
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d115      	bne.n	8009106 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80090e6:	2001      	movs	r0, #1
 80090e8:	f7f8 fd70 	bl	8001bcc <HAL_Delay>
      ms++;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	3301      	adds	r3, #1
 80090f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f001 fa4b 	bl	800a58e <USB_GetMode>
 80090f8:	4603      	mov	r3, r0
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d01e      	beq.n	800913c <USB_SetCurrentMode+0x84>
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2b31      	cmp	r3, #49	; 0x31
 8009102:	d9f0      	bls.n	80090e6 <USB_SetCurrentMode+0x2e>
 8009104:	e01a      	b.n	800913c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009106:	78fb      	ldrb	r3, [r7, #3]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d115      	bne.n	8009138 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009118:	2001      	movs	r0, #1
 800911a:	f7f8 fd57 	bl	8001bcc <HAL_Delay>
      ms++;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	3301      	adds	r3, #1
 8009122:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f001 fa32 	bl	800a58e <USB_GetMode>
 800912a:	4603      	mov	r3, r0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d005      	beq.n	800913c <USB_SetCurrentMode+0x84>
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2b31      	cmp	r3, #49	; 0x31
 8009134:	d9f0      	bls.n	8009118 <USB_SetCurrentMode+0x60>
 8009136:	e001      	b.n	800913c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	e005      	b.n	8009148 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2b32      	cmp	r3, #50	; 0x32
 8009140:	d101      	bne.n	8009146 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009142:	2301      	movs	r3, #1
 8009144:	e000      	b.n	8009148 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009146:	2300      	movs	r3, #0
}
 8009148:	4618      	mov	r0, r3
 800914a:	3710      	adds	r7, #16
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009150:	b084      	sub	sp, #16
 8009152:	b580      	push	{r7, lr}
 8009154:	b086      	sub	sp, #24
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
 800915a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800915e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009162:	2300      	movs	r3, #0
 8009164:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800916a:	2300      	movs	r3, #0
 800916c:	613b      	str	r3, [r7, #16]
 800916e:	e009      	b.n	8009184 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	3340      	adds	r3, #64	; 0x40
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	4413      	add	r3, r2
 800917a:	2200      	movs	r2, #0
 800917c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	3301      	adds	r3, #1
 8009182:	613b      	str	r3, [r7, #16]
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	2b0e      	cmp	r3, #14
 8009188:	d9f2      	bls.n	8009170 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800918a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800918c:	2b00      	cmp	r3, #0
 800918e:	d11c      	bne.n	80091ca <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	68fa      	ldr	r2, [r7, #12]
 800919a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800919e:	f043 0302 	orr.w	r3, r3, #2
 80091a2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	601a      	str	r2, [r3, #0]
 80091c8:	e005      	b.n	80091d6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80091dc:	461a      	mov	r2, r3
 80091de:	2300      	movs	r3, #0
 80091e0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091e8:	4619      	mov	r1, r3
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091f0:	461a      	mov	r2, r3
 80091f2:	680b      	ldr	r3, [r1, #0]
 80091f4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80091f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d10c      	bne.n	8009216 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80091fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d104      	bne.n	800920c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009202:	2100      	movs	r1, #0
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 f965 	bl	80094d4 <USB_SetDevSpeed>
 800920a:	e008      	b.n	800921e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800920c:	2101      	movs	r1, #1
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 f960 	bl	80094d4 <USB_SetDevSpeed>
 8009214:	e003      	b.n	800921e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009216:	2103      	movs	r1, #3
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 f95b 	bl	80094d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800921e:	2110      	movs	r1, #16
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 f8f3 	bl	800940c <USB_FlushTxFifo>
 8009226:	4603      	mov	r3, r0
 8009228:	2b00      	cmp	r3, #0
 800922a:	d001      	beq.n	8009230 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800922c:	2301      	movs	r3, #1
 800922e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 f91f 	bl	8009474 <USB_FlushRxFifo>
 8009236:	4603      	mov	r3, r0
 8009238:	2b00      	cmp	r3, #0
 800923a:	d001      	beq.n	8009240 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800923c:	2301      	movs	r3, #1
 800923e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009246:	461a      	mov	r2, r3
 8009248:	2300      	movs	r3, #0
 800924a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009252:	461a      	mov	r2, r3
 8009254:	2300      	movs	r3, #0
 8009256:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800925e:	461a      	mov	r2, r3
 8009260:	2300      	movs	r3, #0
 8009262:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009264:	2300      	movs	r3, #0
 8009266:	613b      	str	r3, [r7, #16]
 8009268:	e043      	b.n	80092f2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	015a      	lsls	r2, r3, #5
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	4413      	add	r3, r2
 8009272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800927c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009280:	d118      	bne.n	80092b4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d10a      	bne.n	800929e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	015a      	lsls	r2, r3, #5
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	4413      	add	r3, r2
 8009290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009294:	461a      	mov	r2, r3
 8009296:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800929a:	6013      	str	r3, [r2, #0]
 800929c:	e013      	b.n	80092c6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	015a      	lsls	r2, r3, #5
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	4413      	add	r3, r2
 80092a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092aa:	461a      	mov	r2, r3
 80092ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80092b0:	6013      	str	r3, [r2, #0]
 80092b2:	e008      	b.n	80092c6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	015a      	lsls	r2, r3, #5
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	4413      	add	r3, r2
 80092bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092c0:	461a      	mov	r2, r3
 80092c2:	2300      	movs	r3, #0
 80092c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	015a      	lsls	r2, r3, #5
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	4413      	add	r3, r2
 80092ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092d2:	461a      	mov	r2, r3
 80092d4:	2300      	movs	r3, #0
 80092d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	015a      	lsls	r2, r3, #5
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	4413      	add	r3, r2
 80092e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092e4:	461a      	mov	r2, r3
 80092e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80092ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	3301      	adds	r3, #1
 80092f0:	613b      	str	r3, [r7, #16]
 80092f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f4:	693a      	ldr	r2, [r7, #16]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d3b7      	bcc.n	800926a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092fa:	2300      	movs	r3, #0
 80092fc:	613b      	str	r3, [r7, #16]
 80092fe:	e043      	b.n	8009388 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	015a      	lsls	r2, r3, #5
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	4413      	add	r3, r2
 8009308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009312:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009316:	d118      	bne.n	800934a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d10a      	bne.n	8009334 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	015a      	lsls	r2, r3, #5
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	4413      	add	r3, r2
 8009326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800932a:	461a      	mov	r2, r3
 800932c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009330:	6013      	str	r3, [r2, #0]
 8009332:	e013      	b.n	800935c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	015a      	lsls	r2, r3, #5
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	4413      	add	r3, r2
 800933c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009340:	461a      	mov	r2, r3
 8009342:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009346:	6013      	str	r3, [r2, #0]
 8009348:	e008      	b.n	800935c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	015a      	lsls	r2, r3, #5
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	4413      	add	r3, r2
 8009352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009356:	461a      	mov	r2, r3
 8009358:	2300      	movs	r3, #0
 800935a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	015a      	lsls	r2, r3, #5
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	4413      	add	r3, r2
 8009364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009368:	461a      	mov	r2, r3
 800936a:	2300      	movs	r3, #0
 800936c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	015a      	lsls	r2, r3, #5
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	4413      	add	r3, r2
 8009376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800937a:	461a      	mov	r2, r3
 800937c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009380:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	3301      	adds	r3, #1
 8009386:	613b      	str	r3, [r7, #16]
 8009388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938a:	693a      	ldr	r2, [r7, #16]
 800938c:	429a      	cmp	r2, r3
 800938e:	d3b7      	bcc.n	8009300 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009396:	691b      	ldr	r3, [r3, #16]
 8009398:	68fa      	ldr	r2, [r7, #12]
 800939a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800939e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80093b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80093b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d105      	bne.n	80093c4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	699b      	ldr	r3, [r3, #24]
 80093bc:	f043 0210 	orr.w	r2, r3, #16
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	699a      	ldr	r2, [r3, #24]
 80093c8:	4b0e      	ldr	r3, [pc, #56]	; (8009404 <USB_DevInit+0x2b4>)
 80093ca:	4313      	orrs	r3, r2
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80093d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d005      	beq.n	80093e2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	699b      	ldr	r3, [r3, #24]
 80093da:	f043 0208 	orr.w	r2, r3, #8
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80093e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d105      	bne.n	80093f4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	699a      	ldr	r2, [r3, #24]
 80093ec:	4b06      	ldr	r3, [pc, #24]	; (8009408 <USB_DevInit+0x2b8>)
 80093ee:	4313      	orrs	r3, r2
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80093f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3718      	adds	r7, #24
 80093fa:	46bd      	mov	sp, r7
 80093fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009400:	b004      	add	sp, #16
 8009402:	4770      	bx	lr
 8009404:	803c3800 	.word	0x803c3800
 8009408:	40000004 	.word	0x40000004

0800940c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800940c:	b480      	push	{r7}
 800940e:	b085      	sub	sp, #20
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009416:	2300      	movs	r3, #0
 8009418:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	3301      	adds	r3, #1
 800941e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	4a13      	ldr	r2, [pc, #76]	; (8009470 <USB_FlushTxFifo+0x64>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d901      	bls.n	800942c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009428:	2303      	movs	r3, #3
 800942a:	e01b      	b.n	8009464 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	691b      	ldr	r3, [r3, #16]
 8009430:	2b00      	cmp	r3, #0
 8009432:	daf2      	bge.n	800941a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009434:	2300      	movs	r3, #0
 8009436:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	019b      	lsls	r3, r3, #6
 800943c:	f043 0220 	orr.w	r2, r3, #32
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	3301      	adds	r3, #1
 8009448:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	4a08      	ldr	r2, [pc, #32]	; (8009470 <USB_FlushTxFifo+0x64>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d901      	bls.n	8009456 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009452:	2303      	movs	r3, #3
 8009454:	e006      	b.n	8009464 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	691b      	ldr	r3, [r3, #16]
 800945a:	f003 0320 	and.w	r3, r3, #32
 800945e:	2b20      	cmp	r3, #32
 8009460:	d0f0      	beq.n	8009444 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009462:	2300      	movs	r3, #0
}
 8009464:	4618      	mov	r0, r3
 8009466:	3714      	adds	r7, #20
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr
 8009470:	00030d40 	.word	0x00030d40

08009474 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009474:	b480      	push	{r7}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800947c:	2300      	movs	r3, #0
 800947e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	3301      	adds	r3, #1
 8009484:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	4a11      	ldr	r2, [pc, #68]	; (80094d0 <USB_FlushRxFifo+0x5c>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d901      	bls.n	8009492 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800948e:	2303      	movs	r3, #3
 8009490:	e018      	b.n	80094c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	691b      	ldr	r3, [r3, #16]
 8009496:	2b00      	cmp	r3, #0
 8009498:	daf2      	bge.n	8009480 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800949a:	2300      	movs	r3, #0
 800949c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2210      	movs	r2, #16
 80094a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	3301      	adds	r3, #1
 80094a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	4a08      	ldr	r2, [pc, #32]	; (80094d0 <USB_FlushRxFifo+0x5c>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d901      	bls.n	80094b6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80094b2:	2303      	movs	r3, #3
 80094b4:	e006      	b.n	80094c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	691b      	ldr	r3, [r3, #16]
 80094ba:	f003 0310 	and.w	r3, r3, #16
 80094be:	2b10      	cmp	r3, #16
 80094c0:	d0f0      	beq.n	80094a4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80094c2:	2300      	movs	r3, #0
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3714      	adds	r7, #20
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr
 80094d0:	00030d40 	.word	0x00030d40

080094d4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b085      	sub	sp, #20
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	460b      	mov	r3, r1
 80094de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	78fb      	ldrb	r3, [r7, #3]
 80094ee:	68f9      	ldr	r1, [r7, #12]
 80094f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094f4:	4313      	orrs	r3, r2
 80094f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3714      	adds	r7, #20
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr

08009506 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009506:	b480      	push	{r7}
 8009508:	b087      	sub	sp, #28
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	f003 0306 	and.w	r3, r3, #6
 800951e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d102      	bne.n	800952c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009526:	2300      	movs	r3, #0
 8009528:	75fb      	strb	r3, [r7, #23]
 800952a:	e00a      	b.n	8009542 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2b02      	cmp	r3, #2
 8009530:	d002      	beq.n	8009538 <USB_GetDevSpeed+0x32>
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2b06      	cmp	r3, #6
 8009536:	d102      	bne.n	800953e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009538:	2302      	movs	r3, #2
 800953a:	75fb      	strb	r3, [r7, #23]
 800953c:	e001      	b.n	8009542 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800953e:	230f      	movs	r3, #15
 8009540:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009542:	7dfb      	ldrb	r3, [r7, #23]
}
 8009544:	4618      	mov	r0, r3
 8009546:	371c      	adds	r7, #28
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009550:	b480      	push	{r7}
 8009552:	b085      	sub	sp, #20
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	785b      	ldrb	r3, [r3, #1]
 8009568:	2b01      	cmp	r3, #1
 800956a:	d139      	bne.n	80095e0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009572:	69da      	ldr	r2, [r3, #28]
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	f003 030f 	and.w	r3, r3, #15
 800957c:	2101      	movs	r1, #1
 800957e:	fa01 f303 	lsl.w	r3, r1, r3
 8009582:	b29b      	uxth	r3, r3
 8009584:	68f9      	ldr	r1, [r7, #12]
 8009586:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800958a:	4313      	orrs	r3, r2
 800958c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	015a      	lsls	r2, r3, #5
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	4413      	add	r3, r2
 8009596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d153      	bne.n	800964c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	015a      	lsls	r2, r3, #5
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	4413      	add	r3, r2
 80095ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	68db      	ldr	r3, [r3, #12]
 80095b6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	791b      	ldrb	r3, [r3, #4]
 80095be:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80095c0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	059b      	lsls	r3, r3, #22
 80095c6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80095c8:	431a      	orrs	r2, r3
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	0159      	lsls	r1, r3, #5
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	440b      	add	r3, r1
 80095d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095d6:	4619      	mov	r1, r3
 80095d8:	4b20      	ldr	r3, [pc, #128]	; (800965c <USB_ActivateEndpoint+0x10c>)
 80095da:	4313      	orrs	r3, r2
 80095dc:	600b      	str	r3, [r1, #0]
 80095de:	e035      	b.n	800964c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095e6:	69da      	ldr	r2, [r3, #28]
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	f003 030f 	and.w	r3, r3, #15
 80095f0:	2101      	movs	r1, #1
 80095f2:	fa01 f303 	lsl.w	r3, r1, r3
 80095f6:	041b      	lsls	r3, r3, #16
 80095f8:	68f9      	ldr	r1, [r7, #12]
 80095fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095fe:	4313      	orrs	r3, r2
 8009600:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	015a      	lsls	r2, r3, #5
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	4413      	add	r3, r2
 800960a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009614:	2b00      	cmp	r3, #0
 8009616:	d119      	bne.n	800964c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	015a      	lsls	r2, r3, #5
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	4413      	add	r3, r2
 8009620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	68db      	ldr	r3, [r3, #12]
 800962a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	791b      	ldrb	r3, [r3, #4]
 8009632:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009634:	430b      	orrs	r3, r1
 8009636:	431a      	orrs	r2, r3
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	0159      	lsls	r1, r3, #5
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	440b      	add	r3, r1
 8009640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009644:	4619      	mov	r1, r3
 8009646:	4b05      	ldr	r3, [pc, #20]	; (800965c <USB_ActivateEndpoint+0x10c>)
 8009648:	4313      	orrs	r3, r2
 800964a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	3714      	adds	r7, #20
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr
 800965a:	bf00      	nop
 800965c:	10008000 	.word	0x10008000

08009660 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009660:	b480      	push	{r7}
 8009662:	b085      	sub	sp, #20
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	785b      	ldrb	r3, [r3, #1]
 8009678:	2b01      	cmp	r3, #1
 800967a:	d161      	bne.n	8009740 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	015a      	lsls	r2, r3, #5
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	4413      	add	r3, r2
 8009684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800968e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009692:	d11f      	bne.n	80096d4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	015a      	lsls	r2, r3, #5
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	4413      	add	r3, r2
 800969c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	68ba      	ldr	r2, [r7, #8]
 80096a4:	0151      	lsls	r1, r2, #5
 80096a6:	68fa      	ldr	r2, [r7, #12]
 80096a8:	440a      	add	r2, r1
 80096aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80096b2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	015a      	lsls	r2, r3, #5
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	4413      	add	r3, r2
 80096bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	68ba      	ldr	r2, [r7, #8]
 80096c4:	0151      	lsls	r1, r2, #5
 80096c6:	68fa      	ldr	r2, [r7, #12]
 80096c8:	440a      	add	r2, r1
 80096ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80096d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	f003 030f 	and.w	r3, r3, #15
 80096e4:	2101      	movs	r1, #1
 80096e6:	fa01 f303 	lsl.w	r3, r1, r3
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	43db      	mvns	r3, r3
 80096ee:	68f9      	ldr	r1, [r7, #12]
 80096f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096f4:	4013      	ands	r3, r2
 80096f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096fe:	69da      	ldr	r2, [r3, #28]
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	f003 030f 	and.w	r3, r3, #15
 8009708:	2101      	movs	r1, #1
 800970a:	fa01 f303 	lsl.w	r3, r1, r3
 800970e:	b29b      	uxth	r3, r3
 8009710:	43db      	mvns	r3, r3
 8009712:	68f9      	ldr	r1, [r7, #12]
 8009714:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009718:	4013      	ands	r3, r2
 800971a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	015a      	lsls	r2, r3, #5
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	4413      	add	r3, r2
 8009724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009728:	681a      	ldr	r2, [r3, #0]
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	0159      	lsls	r1, r3, #5
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	440b      	add	r3, r1
 8009732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009736:	4619      	mov	r1, r3
 8009738:	4b35      	ldr	r3, [pc, #212]	; (8009810 <USB_DeactivateEndpoint+0x1b0>)
 800973a:	4013      	ands	r3, r2
 800973c:	600b      	str	r3, [r1, #0]
 800973e:	e060      	b.n	8009802 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	015a      	lsls	r2, r3, #5
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	4413      	add	r3, r2
 8009748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009752:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009756:	d11f      	bne.n	8009798 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	015a      	lsls	r2, r3, #5
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	4413      	add	r3, r2
 8009760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	68ba      	ldr	r2, [r7, #8]
 8009768:	0151      	lsls	r1, r2, #5
 800976a:	68fa      	ldr	r2, [r7, #12]
 800976c:	440a      	add	r2, r1
 800976e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009772:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009776:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	015a      	lsls	r2, r3, #5
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	4413      	add	r3, r2
 8009780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	68ba      	ldr	r2, [r7, #8]
 8009788:	0151      	lsls	r1, r2, #5
 800978a:	68fa      	ldr	r2, [r7, #12]
 800978c:	440a      	add	r2, r1
 800978e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009792:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009796:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800979e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	f003 030f 	and.w	r3, r3, #15
 80097a8:	2101      	movs	r1, #1
 80097aa:	fa01 f303 	lsl.w	r3, r1, r3
 80097ae:	041b      	lsls	r3, r3, #16
 80097b0:	43db      	mvns	r3, r3
 80097b2:	68f9      	ldr	r1, [r7, #12]
 80097b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097b8:	4013      	ands	r3, r2
 80097ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097c2:	69da      	ldr	r2, [r3, #28]
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	f003 030f 	and.w	r3, r3, #15
 80097cc:	2101      	movs	r1, #1
 80097ce:	fa01 f303 	lsl.w	r3, r1, r3
 80097d2:	041b      	lsls	r3, r3, #16
 80097d4:	43db      	mvns	r3, r3
 80097d6:	68f9      	ldr	r1, [r7, #12]
 80097d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097dc:	4013      	ands	r3, r2
 80097de:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	015a      	lsls	r2, r3, #5
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	4413      	add	r3, r2
 80097e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ec:	681a      	ldr	r2, [r3, #0]
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	0159      	lsls	r1, r3, #5
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	440b      	add	r3, r1
 80097f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097fa:	4619      	mov	r1, r3
 80097fc:	4b05      	ldr	r3, [pc, #20]	; (8009814 <USB_DeactivateEndpoint+0x1b4>)
 80097fe:	4013      	ands	r3, r2
 8009800:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009802:	2300      	movs	r3, #0
}
 8009804:	4618      	mov	r0, r3
 8009806:	3714      	adds	r7, #20
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr
 8009810:	ec337800 	.word	0xec337800
 8009814:	eff37800 	.word	0xeff37800

08009818 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b08a      	sub	sp, #40	; 0x28
 800981c:	af02      	add	r7, sp, #8
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	4613      	mov	r3, r2
 8009824:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	785b      	ldrb	r3, [r3, #1]
 8009834:	2b01      	cmp	r3, #1
 8009836:	f040 8163 	bne.w	8009b00 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	699b      	ldr	r3, [r3, #24]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d132      	bne.n	80098a8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	015a      	lsls	r2, r3, #5
 8009846:	69fb      	ldr	r3, [r7, #28]
 8009848:	4413      	add	r3, r2
 800984a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800984e:	691a      	ldr	r2, [r3, #16]
 8009850:	69bb      	ldr	r3, [r7, #24]
 8009852:	0159      	lsls	r1, r3, #5
 8009854:	69fb      	ldr	r3, [r7, #28]
 8009856:	440b      	add	r3, r1
 8009858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800985c:	4619      	mov	r1, r3
 800985e:	4ba5      	ldr	r3, [pc, #660]	; (8009af4 <USB_EPStartXfer+0x2dc>)
 8009860:	4013      	ands	r3, r2
 8009862:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009864:	69bb      	ldr	r3, [r7, #24]
 8009866:	015a      	lsls	r2, r3, #5
 8009868:	69fb      	ldr	r3, [r7, #28]
 800986a:	4413      	add	r3, r2
 800986c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009870:	691b      	ldr	r3, [r3, #16]
 8009872:	69ba      	ldr	r2, [r7, #24]
 8009874:	0151      	lsls	r1, r2, #5
 8009876:	69fa      	ldr	r2, [r7, #28]
 8009878:	440a      	add	r2, r1
 800987a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800987e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009882:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009884:	69bb      	ldr	r3, [r7, #24]
 8009886:	015a      	lsls	r2, r3, #5
 8009888:	69fb      	ldr	r3, [r7, #28]
 800988a:	4413      	add	r3, r2
 800988c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009890:	691a      	ldr	r2, [r3, #16]
 8009892:	69bb      	ldr	r3, [r7, #24]
 8009894:	0159      	lsls	r1, r3, #5
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	440b      	add	r3, r1
 800989a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800989e:	4619      	mov	r1, r3
 80098a0:	4b95      	ldr	r3, [pc, #596]	; (8009af8 <USB_EPStartXfer+0x2e0>)
 80098a2:	4013      	ands	r3, r2
 80098a4:	610b      	str	r3, [r1, #16]
 80098a6:	e074      	b.n	8009992 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80098a8:	69bb      	ldr	r3, [r7, #24]
 80098aa:	015a      	lsls	r2, r3, #5
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	4413      	add	r3, r2
 80098b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098b4:	691a      	ldr	r2, [r3, #16]
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	0159      	lsls	r1, r3, #5
 80098ba:	69fb      	ldr	r3, [r7, #28]
 80098bc:	440b      	add	r3, r1
 80098be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098c2:	4619      	mov	r1, r3
 80098c4:	4b8c      	ldr	r3, [pc, #560]	; (8009af8 <USB_EPStartXfer+0x2e0>)
 80098c6:	4013      	ands	r3, r2
 80098c8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80098ca:	69bb      	ldr	r3, [r7, #24]
 80098cc:	015a      	lsls	r2, r3, #5
 80098ce:	69fb      	ldr	r3, [r7, #28]
 80098d0:	4413      	add	r3, r2
 80098d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098d6:	691a      	ldr	r2, [r3, #16]
 80098d8:	69bb      	ldr	r3, [r7, #24]
 80098da:	0159      	lsls	r1, r3, #5
 80098dc:	69fb      	ldr	r3, [r7, #28]
 80098de:	440b      	add	r3, r1
 80098e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098e4:	4619      	mov	r1, r3
 80098e6:	4b83      	ldr	r3, [pc, #524]	; (8009af4 <USB_EPStartXfer+0x2dc>)
 80098e8:	4013      	ands	r3, r2
 80098ea:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80098ec:	69bb      	ldr	r3, [r7, #24]
 80098ee:	015a      	lsls	r2, r3, #5
 80098f0:	69fb      	ldr	r3, [r7, #28]
 80098f2:	4413      	add	r3, r2
 80098f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098f8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	6999      	ldr	r1, [r3, #24]
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	68db      	ldr	r3, [r3, #12]
 8009902:	440b      	add	r3, r1
 8009904:	1e59      	subs	r1, r3, #1
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	fbb1 f3f3 	udiv	r3, r1, r3
 800990e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009910:	4b7a      	ldr	r3, [pc, #488]	; (8009afc <USB_EPStartXfer+0x2e4>)
 8009912:	400b      	ands	r3, r1
 8009914:	69b9      	ldr	r1, [r7, #24]
 8009916:	0148      	lsls	r0, r1, #5
 8009918:	69f9      	ldr	r1, [r7, #28]
 800991a:	4401      	add	r1, r0
 800991c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009920:	4313      	orrs	r3, r2
 8009922:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009924:	69bb      	ldr	r3, [r7, #24]
 8009926:	015a      	lsls	r2, r3, #5
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	4413      	add	r3, r2
 800992c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009930:	691a      	ldr	r2, [r3, #16]
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	699b      	ldr	r3, [r3, #24]
 8009936:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800993a:	69b9      	ldr	r1, [r7, #24]
 800993c:	0148      	lsls	r0, r1, #5
 800993e:	69f9      	ldr	r1, [r7, #28]
 8009940:	4401      	add	r1, r0
 8009942:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009946:	4313      	orrs	r3, r2
 8009948:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	791b      	ldrb	r3, [r3, #4]
 800994e:	2b01      	cmp	r3, #1
 8009950:	d11f      	bne.n	8009992 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009952:	69bb      	ldr	r3, [r7, #24]
 8009954:	015a      	lsls	r2, r3, #5
 8009956:	69fb      	ldr	r3, [r7, #28]
 8009958:	4413      	add	r3, r2
 800995a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800995e:	691b      	ldr	r3, [r3, #16]
 8009960:	69ba      	ldr	r2, [r7, #24]
 8009962:	0151      	lsls	r1, r2, #5
 8009964:	69fa      	ldr	r2, [r7, #28]
 8009966:	440a      	add	r2, r1
 8009968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800996c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009970:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	015a      	lsls	r2, r3, #5
 8009976:	69fb      	ldr	r3, [r7, #28]
 8009978:	4413      	add	r3, r2
 800997a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800997e:	691b      	ldr	r3, [r3, #16]
 8009980:	69ba      	ldr	r2, [r7, #24]
 8009982:	0151      	lsls	r1, r2, #5
 8009984:	69fa      	ldr	r2, [r7, #28]
 8009986:	440a      	add	r2, r1
 8009988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800998c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009990:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009992:	79fb      	ldrb	r3, [r7, #7]
 8009994:	2b01      	cmp	r3, #1
 8009996:	d14b      	bne.n	8009a30 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	695b      	ldr	r3, [r3, #20]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d009      	beq.n	80099b4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	015a      	lsls	r2, r3, #5
 80099a4:	69fb      	ldr	r3, [r7, #28]
 80099a6:	4413      	add	r3, r2
 80099a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099ac:	461a      	mov	r2, r3
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	695b      	ldr	r3, [r3, #20]
 80099b2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	791b      	ldrb	r3, [r3, #4]
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d128      	bne.n	8009a0e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099c2:	689b      	ldr	r3, [r3, #8]
 80099c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d110      	bne.n	80099ee <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80099cc:	69bb      	ldr	r3, [r7, #24]
 80099ce:	015a      	lsls	r2, r3, #5
 80099d0:	69fb      	ldr	r3, [r7, #28]
 80099d2:	4413      	add	r3, r2
 80099d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	69ba      	ldr	r2, [r7, #24]
 80099dc:	0151      	lsls	r1, r2, #5
 80099de:	69fa      	ldr	r2, [r7, #28]
 80099e0:	440a      	add	r2, r1
 80099e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80099ea:	6013      	str	r3, [r2, #0]
 80099ec:	e00f      	b.n	8009a0e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80099ee:	69bb      	ldr	r3, [r7, #24]
 80099f0:	015a      	lsls	r2, r3, #5
 80099f2:	69fb      	ldr	r3, [r7, #28]
 80099f4:	4413      	add	r3, r2
 80099f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	69ba      	ldr	r2, [r7, #24]
 80099fe:	0151      	lsls	r1, r2, #5
 8009a00:	69fa      	ldr	r2, [r7, #28]
 8009a02:	440a      	add	r2, r1
 8009a04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a0c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009a0e:	69bb      	ldr	r3, [r7, #24]
 8009a10:	015a      	lsls	r2, r3, #5
 8009a12:	69fb      	ldr	r3, [r7, #28]
 8009a14:	4413      	add	r3, r2
 8009a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	69ba      	ldr	r2, [r7, #24]
 8009a1e:	0151      	lsls	r1, r2, #5
 8009a20:	69fa      	ldr	r2, [r7, #28]
 8009a22:	440a      	add	r2, r1
 8009a24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a28:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009a2c:	6013      	str	r3, [r2, #0]
 8009a2e:	e137      	b.n	8009ca0 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009a30:	69bb      	ldr	r3, [r7, #24]
 8009a32:	015a      	lsls	r2, r3, #5
 8009a34:	69fb      	ldr	r3, [r7, #28]
 8009a36:	4413      	add	r3, r2
 8009a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	69ba      	ldr	r2, [r7, #24]
 8009a40:	0151      	lsls	r1, r2, #5
 8009a42:	69fa      	ldr	r2, [r7, #28]
 8009a44:	440a      	add	r2, r1
 8009a46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009a4e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	791b      	ldrb	r3, [r3, #4]
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d015      	beq.n	8009a84 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	699b      	ldr	r3, [r3, #24]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	f000 811f 	beq.w	8009ca0 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009a62:	69fb      	ldr	r3, [r7, #28]
 8009a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	f003 030f 	and.w	r3, r3, #15
 8009a72:	2101      	movs	r1, #1
 8009a74:	fa01 f303 	lsl.w	r3, r1, r3
 8009a78:	69f9      	ldr	r1, [r7, #28]
 8009a7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	634b      	str	r3, [r1, #52]	; 0x34
 8009a82:	e10d      	b.n	8009ca0 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009a84:	69fb      	ldr	r3, [r7, #28]
 8009a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a8a:	689b      	ldr	r3, [r3, #8]
 8009a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d110      	bne.n	8009ab6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009a94:	69bb      	ldr	r3, [r7, #24]
 8009a96:	015a      	lsls	r2, r3, #5
 8009a98:	69fb      	ldr	r3, [r7, #28]
 8009a9a:	4413      	add	r3, r2
 8009a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	69ba      	ldr	r2, [r7, #24]
 8009aa4:	0151      	lsls	r1, r2, #5
 8009aa6:	69fa      	ldr	r2, [r7, #28]
 8009aa8:	440a      	add	r2, r1
 8009aaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009aae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009ab2:	6013      	str	r3, [r2, #0]
 8009ab4:	e00f      	b.n	8009ad6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009ab6:	69bb      	ldr	r3, [r7, #24]
 8009ab8:	015a      	lsls	r2, r3, #5
 8009aba:	69fb      	ldr	r3, [r7, #28]
 8009abc:	4413      	add	r3, r2
 8009abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	69ba      	ldr	r2, [r7, #24]
 8009ac6:	0151      	lsls	r1, r2, #5
 8009ac8:	69fa      	ldr	r2, [r7, #28]
 8009aca:	440a      	add	r2, r1
 8009acc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ad4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	6919      	ldr	r1, [r3, #16]
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	781a      	ldrb	r2, [r3, #0]
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	699b      	ldr	r3, [r3, #24]
 8009ae2:	b298      	uxth	r0, r3
 8009ae4:	79fb      	ldrb	r3, [r7, #7]
 8009ae6:	9300      	str	r3, [sp, #0]
 8009ae8:	4603      	mov	r3, r0
 8009aea:	68f8      	ldr	r0, [r7, #12]
 8009aec:	f000 faea 	bl	800a0c4 <USB_WritePacket>
 8009af0:	e0d6      	b.n	8009ca0 <USB_EPStartXfer+0x488>
 8009af2:	bf00      	nop
 8009af4:	e007ffff 	.word	0xe007ffff
 8009af8:	fff80000 	.word	0xfff80000
 8009afc:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009b00:	69bb      	ldr	r3, [r7, #24]
 8009b02:	015a      	lsls	r2, r3, #5
 8009b04:	69fb      	ldr	r3, [r7, #28]
 8009b06:	4413      	add	r3, r2
 8009b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b0c:	691a      	ldr	r2, [r3, #16]
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	0159      	lsls	r1, r3, #5
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	440b      	add	r3, r1
 8009b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	4b63      	ldr	r3, [pc, #396]	; (8009cac <USB_EPStartXfer+0x494>)
 8009b1e:	4013      	ands	r3, r2
 8009b20:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009b22:	69bb      	ldr	r3, [r7, #24]
 8009b24:	015a      	lsls	r2, r3, #5
 8009b26:	69fb      	ldr	r3, [r7, #28]
 8009b28:	4413      	add	r3, r2
 8009b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b2e:	691a      	ldr	r2, [r3, #16]
 8009b30:	69bb      	ldr	r3, [r7, #24]
 8009b32:	0159      	lsls	r1, r3, #5
 8009b34:	69fb      	ldr	r3, [r7, #28]
 8009b36:	440b      	add	r3, r1
 8009b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	4b5c      	ldr	r3, [pc, #368]	; (8009cb0 <USB_EPStartXfer+0x498>)
 8009b40:	4013      	ands	r3, r2
 8009b42:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	699b      	ldr	r3, [r3, #24]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d123      	bne.n	8009b94 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009b4c:	69bb      	ldr	r3, [r7, #24]
 8009b4e:	015a      	lsls	r2, r3, #5
 8009b50:	69fb      	ldr	r3, [r7, #28]
 8009b52:	4413      	add	r3, r2
 8009b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b58:	691a      	ldr	r2, [r3, #16]
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	68db      	ldr	r3, [r3, #12]
 8009b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b62:	69b9      	ldr	r1, [r7, #24]
 8009b64:	0148      	lsls	r0, r1, #5
 8009b66:	69f9      	ldr	r1, [r7, #28]
 8009b68:	4401      	add	r1, r0
 8009b6a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009b72:	69bb      	ldr	r3, [r7, #24]
 8009b74:	015a      	lsls	r2, r3, #5
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	4413      	add	r3, r2
 8009b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b7e:	691b      	ldr	r3, [r3, #16]
 8009b80:	69ba      	ldr	r2, [r7, #24]
 8009b82:	0151      	lsls	r1, r2, #5
 8009b84:	69fa      	ldr	r2, [r7, #28]
 8009b86:	440a      	add	r2, r1
 8009b88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b90:	6113      	str	r3, [r2, #16]
 8009b92:	e037      	b.n	8009c04 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	699a      	ldr	r2, [r3, #24]
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	68db      	ldr	r3, [r3, #12]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	1e5a      	subs	r2, r3, #1
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ba8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	68db      	ldr	r3, [r3, #12]
 8009bae:	8afa      	ldrh	r2, [r7, #22]
 8009bb0:	fb03 f202 	mul.w	r2, r3, r2
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009bb8:	69bb      	ldr	r3, [r7, #24]
 8009bba:	015a      	lsls	r2, r3, #5
 8009bbc:	69fb      	ldr	r3, [r7, #28]
 8009bbe:	4413      	add	r3, r2
 8009bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bc4:	691a      	ldr	r2, [r3, #16]
 8009bc6:	8afb      	ldrh	r3, [r7, #22]
 8009bc8:	04d9      	lsls	r1, r3, #19
 8009bca:	4b3a      	ldr	r3, [pc, #232]	; (8009cb4 <USB_EPStartXfer+0x49c>)
 8009bcc:	400b      	ands	r3, r1
 8009bce:	69b9      	ldr	r1, [r7, #24]
 8009bd0:	0148      	lsls	r0, r1, #5
 8009bd2:	69f9      	ldr	r1, [r7, #28]
 8009bd4:	4401      	add	r1, r0
 8009bd6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009bde:	69bb      	ldr	r3, [r7, #24]
 8009be0:	015a      	lsls	r2, r3, #5
 8009be2:	69fb      	ldr	r3, [r7, #28]
 8009be4:	4413      	add	r3, r2
 8009be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bea:	691a      	ldr	r2, [r3, #16]
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	69db      	ldr	r3, [r3, #28]
 8009bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009bf4:	69b9      	ldr	r1, [r7, #24]
 8009bf6:	0148      	lsls	r0, r1, #5
 8009bf8:	69f9      	ldr	r1, [r7, #28]
 8009bfa:	4401      	add	r1, r0
 8009bfc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009c00:	4313      	orrs	r3, r2
 8009c02:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009c04:	79fb      	ldrb	r3, [r7, #7]
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d10d      	bne.n	8009c26 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	691b      	ldr	r3, [r3, #16]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d009      	beq.n	8009c26 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	6919      	ldr	r1, [r3, #16]
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	015a      	lsls	r2, r3, #5
 8009c1a:	69fb      	ldr	r3, [r7, #28]
 8009c1c:	4413      	add	r3, r2
 8009c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c22:	460a      	mov	r2, r1
 8009c24:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	791b      	ldrb	r3, [r3, #4]
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d128      	bne.n	8009c80 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009c2e:	69fb      	ldr	r3, [r7, #28]
 8009c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d110      	bne.n	8009c60 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	015a      	lsls	r2, r3, #5
 8009c42:	69fb      	ldr	r3, [r7, #28]
 8009c44:	4413      	add	r3, r2
 8009c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	69ba      	ldr	r2, [r7, #24]
 8009c4e:	0151      	lsls	r1, r2, #5
 8009c50:	69fa      	ldr	r2, [r7, #28]
 8009c52:	440a      	add	r2, r1
 8009c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009c5c:	6013      	str	r3, [r2, #0]
 8009c5e:	e00f      	b.n	8009c80 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009c60:	69bb      	ldr	r3, [r7, #24]
 8009c62:	015a      	lsls	r2, r3, #5
 8009c64:	69fb      	ldr	r3, [r7, #28]
 8009c66:	4413      	add	r3, r2
 8009c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	69ba      	ldr	r2, [r7, #24]
 8009c70:	0151      	lsls	r1, r2, #5
 8009c72:	69fa      	ldr	r2, [r7, #28]
 8009c74:	440a      	add	r2, r1
 8009c76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c7e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	015a      	lsls	r2, r3, #5
 8009c84:	69fb      	ldr	r3, [r7, #28]
 8009c86:	4413      	add	r3, r2
 8009c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	69ba      	ldr	r2, [r7, #24]
 8009c90:	0151      	lsls	r1, r2, #5
 8009c92:	69fa      	ldr	r2, [r7, #28]
 8009c94:	440a      	add	r2, r1
 8009c96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009c9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009ca0:	2300      	movs	r3, #0
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3720      	adds	r7, #32
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
 8009caa:	bf00      	nop
 8009cac:	fff80000 	.word	0xfff80000
 8009cb0:	e007ffff 	.word	0xe007ffff
 8009cb4:	1ff80000 	.word	0x1ff80000

08009cb8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b087      	sub	sp, #28
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	4613      	mov	r3, r2
 8009cc4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	781b      	ldrb	r3, [r3, #0]
 8009cce:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	785b      	ldrb	r3, [r3, #1]
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	f040 80ce 	bne.w	8009e76 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	699b      	ldr	r3, [r3, #24]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d132      	bne.n	8009d48 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	015a      	lsls	r2, r3, #5
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	4413      	add	r3, r2
 8009cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cee:	691a      	ldr	r2, [r3, #16]
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	0159      	lsls	r1, r3, #5
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	440b      	add	r3, r1
 8009cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	4b9a      	ldr	r3, [pc, #616]	; (8009f68 <USB_EP0StartXfer+0x2b0>)
 8009d00:	4013      	ands	r3, r2
 8009d02:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	015a      	lsls	r2, r3, #5
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	4413      	add	r3, r2
 8009d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d10:	691b      	ldr	r3, [r3, #16]
 8009d12:	693a      	ldr	r2, [r7, #16]
 8009d14:	0151      	lsls	r1, r2, #5
 8009d16:	697a      	ldr	r2, [r7, #20]
 8009d18:	440a      	add	r2, r1
 8009d1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009d22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	015a      	lsls	r2, r3, #5
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	4413      	add	r3, r2
 8009d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d30:	691a      	ldr	r2, [r3, #16]
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	0159      	lsls	r1, r3, #5
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	440b      	add	r3, r1
 8009d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d3e:	4619      	mov	r1, r3
 8009d40:	4b8a      	ldr	r3, [pc, #552]	; (8009f6c <USB_EP0StartXfer+0x2b4>)
 8009d42:	4013      	ands	r3, r2
 8009d44:	610b      	str	r3, [r1, #16]
 8009d46:	e04e      	b.n	8009de6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	015a      	lsls	r2, r3, #5
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	4413      	add	r3, r2
 8009d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d54:	691a      	ldr	r2, [r3, #16]
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	0159      	lsls	r1, r3, #5
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	440b      	add	r3, r1
 8009d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d62:	4619      	mov	r1, r3
 8009d64:	4b81      	ldr	r3, [pc, #516]	; (8009f6c <USB_EP0StartXfer+0x2b4>)
 8009d66:	4013      	ands	r3, r2
 8009d68:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	015a      	lsls	r2, r3, #5
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	4413      	add	r3, r2
 8009d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d76:	691a      	ldr	r2, [r3, #16]
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	0159      	lsls	r1, r3, #5
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	440b      	add	r3, r1
 8009d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d84:	4619      	mov	r1, r3
 8009d86:	4b78      	ldr	r3, [pc, #480]	; (8009f68 <USB_EP0StartXfer+0x2b0>)
 8009d88:	4013      	ands	r3, r2
 8009d8a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	699a      	ldr	r2, [r3, #24]
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	68db      	ldr	r3, [r3, #12]
 8009d94:	429a      	cmp	r2, r3
 8009d96:	d903      	bls.n	8009da0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	68da      	ldr	r2, [r3, #12]
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	015a      	lsls	r2, r3, #5
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	4413      	add	r3, r2
 8009da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dac:	691b      	ldr	r3, [r3, #16]
 8009dae:	693a      	ldr	r2, [r7, #16]
 8009db0:	0151      	lsls	r1, r2, #5
 8009db2:	697a      	ldr	r2, [r7, #20]
 8009db4:	440a      	add	r2, r1
 8009db6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009dbe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	015a      	lsls	r2, r3, #5
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	4413      	add	r3, r2
 8009dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dcc:	691a      	ldr	r2, [r3, #16]
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	699b      	ldr	r3, [r3, #24]
 8009dd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009dd6:	6939      	ldr	r1, [r7, #16]
 8009dd8:	0148      	lsls	r0, r1, #5
 8009dda:	6979      	ldr	r1, [r7, #20]
 8009ddc:	4401      	add	r1, r0
 8009dde:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009de2:	4313      	orrs	r3, r2
 8009de4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009de6:	79fb      	ldrb	r3, [r7, #7]
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d11e      	bne.n	8009e2a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	695b      	ldr	r3, [r3, #20]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d009      	beq.n	8009e08 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	015a      	lsls	r2, r3, #5
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	4413      	add	r3, r2
 8009dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e00:	461a      	mov	r2, r3
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	695b      	ldr	r3, [r3, #20]
 8009e06:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	015a      	lsls	r2, r3, #5
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	4413      	add	r3, r2
 8009e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	693a      	ldr	r2, [r7, #16]
 8009e18:	0151      	lsls	r1, r2, #5
 8009e1a:	697a      	ldr	r2, [r7, #20]
 8009e1c:	440a      	add	r2, r1
 8009e1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009e26:	6013      	str	r3, [r2, #0]
 8009e28:	e097      	b.n	8009f5a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	015a      	lsls	r2, r3, #5
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	4413      	add	r3, r2
 8009e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	693a      	ldr	r2, [r7, #16]
 8009e3a:	0151      	lsls	r1, r2, #5
 8009e3c:	697a      	ldr	r2, [r7, #20]
 8009e3e:	440a      	add	r2, r1
 8009e40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e44:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009e48:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	699b      	ldr	r3, [r3, #24]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	f000 8083 	beq.w	8009f5a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	f003 030f 	and.w	r3, r3, #15
 8009e64:	2101      	movs	r1, #1
 8009e66:	fa01 f303 	lsl.w	r3, r1, r3
 8009e6a:	6979      	ldr	r1, [r7, #20]
 8009e6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e70:	4313      	orrs	r3, r2
 8009e72:	634b      	str	r3, [r1, #52]	; 0x34
 8009e74:	e071      	b.n	8009f5a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	015a      	lsls	r2, r3, #5
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	4413      	add	r3, r2
 8009e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e82:	691a      	ldr	r2, [r3, #16]
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	0159      	lsls	r1, r3, #5
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	440b      	add	r3, r1
 8009e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e90:	4619      	mov	r1, r3
 8009e92:	4b36      	ldr	r3, [pc, #216]	; (8009f6c <USB_EP0StartXfer+0x2b4>)
 8009e94:	4013      	ands	r3, r2
 8009e96:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	015a      	lsls	r2, r3, #5
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	4413      	add	r3, r2
 8009ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ea4:	691a      	ldr	r2, [r3, #16]
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	0159      	lsls	r1, r3, #5
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	440b      	add	r3, r1
 8009eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eb2:	4619      	mov	r1, r3
 8009eb4:	4b2c      	ldr	r3, [pc, #176]	; (8009f68 <USB_EP0StartXfer+0x2b0>)
 8009eb6:	4013      	ands	r3, r2
 8009eb8:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	699b      	ldr	r3, [r3, #24]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d003      	beq.n	8009eca <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	68da      	ldr	r2, [r3, #12]
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	68da      	ldr	r2, [r3, #12]
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	015a      	lsls	r2, r3, #5
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	4413      	add	r3, r2
 8009eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ede:	691b      	ldr	r3, [r3, #16]
 8009ee0:	693a      	ldr	r2, [r7, #16]
 8009ee2:	0151      	lsls	r1, r2, #5
 8009ee4:	697a      	ldr	r2, [r7, #20]
 8009ee6:	440a      	add	r2, r1
 8009ee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009eec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ef0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	015a      	lsls	r2, r3, #5
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	4413      	add	r3, r2
 8009efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009efe:	691a      	ldr	r2, [r3, #16]
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	69db      	ldr	r3, [r3, #28]
 8009f04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f08:	6939      	ldr	r1, [r7, #16]
 8009f0a:	0148      	lsls	r0, r1, #5
 8009f0c:	6979      	ldr	r1, [r7, #20]
 8009f0e:	4401      	add	r1, r0
 8009f10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009f14:	4313      	orrs	r3, r2
 8009f16:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009f18:	79fb      	ldrb	r3, [r7, #7]
 8009f1a:	2b01      	cmp	r3, #1
 8009f1c:	d10d      	bne.n	8009f3a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	691b      	ldr	r3, [r3, #16]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d009      	beq.n	8009f3a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	6919      	ldr	r1, [r3, #16]
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	015a      	lsls	r2, r3, #5
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	4413      	add	r3, r2
 8009f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f36:	460a      	mov	r2, r1
 8009f38:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	015a      	lsls	r2, r3, #5
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	4413      	add	r3, r2
 8009f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	693a      	ldr	r2, [r7, #16]
 8009f4a:	0151      	lsls	r1, r2, #5
 8009f4c:	697a      	ldr	r2, [r7, #20]
 8009f4e:	440a      	add	r2, r1
 8009f50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f54:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009f58:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009f5a:	2300      	movs	r3, #0
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	371c      	adds	r7, #28
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr
 8009f68:	e007ffff 	.word	0xe007ffff
 8009f6c:	fff80000 	.word	0xfff80000

08009f70 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b087      	sub	sp, #28
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	785b      	ldrb	r3, [r3, #1]
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d14a      	bne.n	800a024 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	015a      	lsls	r2, r3, #5
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	4413      	add	r3, r2
 8009f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009fa2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fa6:	f040 8086 	bne.w	800a0b6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	015a      	lsls	r2, r3, #5
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	683a      	ldr	r2, [r7, #0]
 8009fbc:	7812      	ldrb	r2, [r2, #0]
 8009fbe:	0151      	lsls	r1, r2, #5
 8009fc0:	693a      	ldr	r2, [r7, #16]
 8009fc2:	440a      	add	r2, r1
 8009fc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fc8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009fcc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	015a      	lsls	r2, r3, #5
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	4413      	add	r3, r2
 8009fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	683a      	ldr	r2, [r7, #0]
 8009fe0:	7812      	ldrb	r2, [r2, #0]
 8009fe2:	0151      	lsls	r1, r2, #5
 8009fe4:	693a      	ldr	r2, [r7, #16]
 8009fe6:	440a      	add	r2, r1
 8009fe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ff0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	3301      	adds	r3, #1
 8009ff6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f242 7210 	movw	r2, #10000	; 0x2710
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d902      	bls.n	800a008 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a002:	2301      	movs	r3, #1
 800a004:	75fb      	strb	r3, [r7, #23]
          break;
 800a006:	e056      	b.n	800a0b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	015a      	lsls	r2, r3, #5
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	4413      	add	r3, r2
 800a012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a01c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a020:	d0e7      	beq.n	8009ff2 <USB_EPStopXfer+0x82>
 800a022:	e048      	b.n	800a0b6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	015a      	lsls	r2, r3, #5
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	4413      	add	r3, r2
 800a02e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a038:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a03c:	d13b      	bne.n	800a0b6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	015a      	lsls	r2, r3, #5
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	4413      	add	r3, r2
 800a048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	683a      	ldr	r2, [r7, #0]
 800a050:	7812      	ldrb	r2, [r2, #0]
 800a052:	0151      	lsls	r1, r2, #5
 800a054:	693a      	ldr	r2, [r7, #16]
 800a056:	440a      	add	r2, r1
 800a058:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a05c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a060:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	015a      	lsls	r2, r3, #5
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	4413      	add	r3, r2
 800a06c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	683a      	ldr	r2, [r7, #0]
 800a074:	7812      	ldrb	r2, [r2, #0]
 800a076:	0151      	lsls	r1, r2, #5
 800a078:	693a      	ldr	r2, [r7, #16]
 800a07a:	440a      	add	r2, r1
 800a07c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a080:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a084:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	3301      	adds	r3, #1
 800a08a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f242 7210 	movw	r2, #10000	; 0x2710
 800a092:	4293      	cmp	r3, r2
 800a094:	d902      	bls.n	800a09c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a096:	2301      	movs	r3, #1
 800a098:	75fb      	strb	r3, [r7, #23]
          break;
 800a09a:	e00c      	b.n	800a0b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	015a      	lsls	r2, r3, #5
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	4413      	add	r3, r2
 800a0a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a0b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a0b4:	d0e7      	beq.n	800a086 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a0b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	371c      	adds	r7, #28
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr

0800a0c4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b089      	sub	sp, #36	; 0x24
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	60f8      	str	r0, [r7, #12]
 800a0cc:	60b9      	str	r1, [r7, #8]
 800a0ce:	4611      	mov	r1, r2
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	460b      	mov	r3, r1
 800a0d4:	71fb      	strb	r3, [r7, #7]
 800a0d6:	4613      	mov	r3, r2
 800a0d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a0e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d123      	bne.n	800a132 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a0ea:	88bb      	ldrh	r3, [r7, #4]
 800a0ec:	3303      	adds	r3, #3
 800a0ee:	089b      	lsrs	r3, r3, #2
 800a0f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	61bb      	str	r3, [r7, #24]
 800a0f6:	e018      	b.n	800a12a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a0f8:	79fb      	ldrb	r3, [r7, #7]
 800a0fa:	031a      	lsls	r2, r3, #12
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	4413      	add	r3, r2
 800a100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a104:	461a      	mov	r2, r3
 800a106:	69fb      	ldr	r3, [r7, #28]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	3301      	adds	r3, #1
 800a110:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	3301      	adds	r3, #1
 800a116:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a118:	69fb      	ldr	r3, [r7, #28]
 800a11a:	3301      	adds	r3, #1
 800a11c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a11e:	69fb      	ldr	r3, [r7, #28]
 800a120:	3301      	adds	r3, #1
 800a122:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a124:	69bb      	ldr	r3, [r7, #24]
 800a126:	3301      	adds	r3, #1
 800a128:	61bb      	str	r3, [r7, #24]
 800a12a:	69ba      	ldr	r2, [r7, #24]
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d3e2      	bcc.n	800a0f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a132:	2300      	movs	r3, #0
}
 800a134:	4618      	mov	r0, r3
 800a136:	3724      	adds	r7, #36	; 0x24
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr

0800a140 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a140:	b480      	push	{r7}
 800a142:	b08b      	sub	sp, #44	; 0x2c
 800a144:	af00      	add	r7, sp, #0
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	60b9      	str	r1, [r7, #8]
 800a14a:	4613      	mov	r3, r2
 800a14c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a156:	88fb      	ldrh	r3, [r7, #6]
 800a158:	089b      	lsrs	r3, r3, #2
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a15e:	88fb      	ldrh	r3, [r7, #6]
 800a160:	f003 0303 	and.w	r3, r3, #3
 800a164:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a166:	2300      	movs	r3, #0
 800a168:	623b      	str	r3, [r7, #32]
 800a16a:	e014      	b.n	800a196 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a16c:	69bb      	ldr	r3, [r7, #24]
 800a16e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a176:	601a      	str	r2, [r3, #0]
    pDest++;
 800a178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17a:	3301      	adds	r3, #1
 800a17c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a180:	3301      	adds	r3, #1
 800a182:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a186:	3301      	adds	r3, #1
 800a188:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18c:	3301      	adds	r3, #1
 800a18e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a190:	6a3b      	ldr	r3, [r7, #32]
 800a192:	3301      	adds	r3, #1
 800a194:	623b      	str	r3, [r7, #32]
 800a196:	6a3a      	ldr	r2, [r7, #32]
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d3e6      	bcc.n	800a16c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a19e:	8bfb      	ldrh	r3, [r7, #30]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d01e      	beq.n	800a1e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a1a8:	69bb      	ldr	r3, [r7, #24]
 800a1aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	f107 0310 	add.w	r3, r7, #16
 800a1b4:	6812      	ldr	r2, [r2, #0]
 800a1b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a1b8:	693a      	ldr	r2, [r7, #16]
 800a1ba:	6a3b      	ldr	r3, [r7, #32]
 800a1bc:	b2db      	uxtb	r3, r3
 800a1be:	00db      	lsls	r3, r3, #3
 800a1c0:	fa22 f303 	lsr.w	r3, r2, r3
 800a1c4:	b2da      	uxtb	r2, r3
 800a1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c8:	701a      	strb	r2, [r3, #0]
      i++;
 800a1ca:	6a3b      	ldr	r3, [r7, #32]
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	623b      	str	r3, [r7, #32]
      pDest++;
 800a1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a1d6:	8bfb      	ldrh	r3, [r7, #30]
 800a1d8:	3b01      	subs	r3, #1
 800a1da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a1dc:	8bfb      	ldrh	r3, [r7, #30]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d1ea      	bne.n	800a1b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	372c      	adds	r7, #44	; 0x2c
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr

0800a1f0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b085      	sub	sp, #20
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	781b      	ldrb	r3, [r3, #0]
 800a202:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	785b      	ldrb	r3, [r3, #1]
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d12c      	bne.n	800a266 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	015a      	lsls	r2, r3, #5
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	4413      	add	r3, r2
 800a214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	db12      	blt.n	800a244 <USB_EPSetStall+0x54>
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d00f      	beq.n	800a244 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	015a      	lsls	r2, r3, #5
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	4413      	add	r3, r2
 800a22c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	68ba      	ldr	r2, [r7, #8]
 800a234:	0151      	lsls	r1, r2, #5
 800a236:	68fa      	ldr	r2, [r7, #12]
 800a238:	440a      	add	r2, r1
 800a23a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a23e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a242:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	015a      	lsls	r2, r3, #5
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	4413      	add	r3, r2
 800a24c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	68ba      	ldr	r2, [r7, #8]
 800a254:	0151      	lsls	r1, r2, #5
 800a256:	68fa      	ldr	r2, [r7, #12]
 800a258:	440a      	add	r2, r1
 800a25a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a25e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a262:	6013      	str	r3, [r2, #0]
 800a264:	e02b      	b.n	800a2be <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	015a      	lsls	r2, r3, #5
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	4413      	add	r3, r2
 800a26e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	2b00      	cmp	r3, #0
 800a276:	db12      	blt.n	800a29e <USB_EPSetStall+0xae>
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00f      	beq.n	800a29e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	015a      	lsls	r2, r3, #5
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	4413      	add	r3, r2
 800a286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	68ba      	ldr	r2, [r7, #8]
 800a28e:	0151      	lsls	r1, r2, #5
 800a290:	68fa      	ldr	r2, [r7, #12]
 800a292:	440a      	add	r2, r1
 800a294:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a298:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a29c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	015a      	lsls	r2, r3, #5
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	4413      	add	r3, r2
 800a2a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	68ba      	ldr	r2, [r7, #8]
 800a2ae:	0151      	lsls	r1, r2, #5
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	440a      	add	r2, r1
 800a2b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a2bc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a2be:	2300      	movs	r3, #0
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3714      	adds	r7, #20
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b085      	sub	sp, #20
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	785b      	ldrb	r3, [r3, #1]
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d128      	bne.n	800a33a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	015a      	lsls	r2, r3, #5
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	4413      	add	r3, r2
 800a2f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	68ba      	ldr	r2, [r7, #8]
 800a2f8:	0151      	lsls	r1, r2, #5
 800a2fa:	68fa      	ldr	r2, [r7, #12]
 800a2fc:	440a      	add	r2, r1
 800a2fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a302:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a306:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	791b      	ldrb	r3, [r3, #4]
 800a30c:	2b03      	cmp	r3, #3
 800a30e:	d003      	beq.n	800a318 <USB_EPClearStall+0x4c>
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	791b      	ldrb	r3, [r3, #4]
 800a314:	2b02      	cmp	r3, #2
 800a316:	d138      	bne.n	800a38a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	015a      	lsls	r2, r3, #5
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	4413      	add	r3, r2
 800a320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	68ba      	ldr	r2, [r7, #8]
 800a328:	0151      	lsls	r1, r2, #5
 800a32a:	68fa      	ldr	r2, [r7, #12]
 800a32c:	440a      	add	r2, r1
 800a32e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a336:	6013      	str	r3, [r2, #0]
 800a338:	e027      	b.n	800a38a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	015a      	lsls	r2, r3, #5
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	4413      	add	r3, r2
 800a342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	68ba      	ldr	r2, [r7, #8]
 800a34a:	0151      	lsls	r1, r2, #5
 800a34c:	68fa      	ldr	r2, [r7, #12]
 800a34e:	440a      	add	r2, r1
 800a350:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a354:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a358:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	791b      	ldrb	r3, [r3, #4]
 800a35e:	2b03      	cmp	r3, #3
 800a360:	d003      	beq.n	800a36a <USB_EPClearStall+0x9e>
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	791b      	ldrb	r3, [r3, #4]
 800a366:	2b02      	cmp	r3, #2
 800a368:	d10f      	bne.n	800a38a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	015a      	lsls	r2, r3, #5
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	4413      	add	r3, r2
 800a372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	68ba      	ldr	r2, [r7, #8]
 800a37a:	0151      	lsls	r1, r2, #5
 800a37c:	68fa      	ldr	r2, [r7, #12]
 800a37e:	440a      	add	r2, r1
 800a380:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a388:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a38a:	2300      	movs	r3, #0
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3714      	adds	r7, #20
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr

0800a398 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a398:	b480      	push	{r7}
 800a39a:	b085      	sub	sp, #20
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	68fa      	ldr	r2, [r7, #12]
 800a3b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a3b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a3ba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	78fb      	ldrb	r3, [r7, #3]
 800a3c6:	011b      	lsls	r3, r3, #4
 800a3c8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a3cc:	68f9      	ldr	r1, [r7, #12]
 800a3ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a3d6:	2300      	movs	r3, #0
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3714      	adds	r7, #20
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b085      	sub	sp, #20
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	68fa      	ldr	r2, [r7, #12]
 800a3fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a3fe:	f023 0303 	bic.w	r3, r3, #3
 800a402:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	68fa      	ldr	r2, [r7, #12]
 800a40e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a412:	f023 0302 	bic.w	r3, r3, #2
 800a416:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a418:	2300      	movs	r3, #0
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3714      	adds	r7, #20
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr

0800a426 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a426:	b480      	push	{r7}
 800a428:	b085      	sub	sp, #20
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	68fa      	ldr	r2, [r7, #12]
 800a43c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a440:	f023 0303 	bic.w	r3, r3, #3
 800a444:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	68fa      	ldr	r2, [r7, #12]
 800a450:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a454:	f043 0302 	orr.w	r3, r3, #2
 800a458:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a45a:	2300      	movs	r3, #0
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3714      	adds	r7, #20
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	4770      	bx	lr

0800a468 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a468:	b480      	push	{r7}
 800a46a:	b085      	sub	sp, #20
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	695b      	ldr	r3, [r3, #20]
 800a474:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	699b      	ldr	r3, [r3, #24]
 800a47a:	68fa      	ldr	r2, [r7, #12]
 800a47c:	4013      	ands	r3, r2
 800a47e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a480:	68fb      	ldr	r3, [r7, #12]
}
 800a482:	4618      	mov	r0, r3
 800a484:	3714      	adds	r7, #20
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr

0800a48e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a48e:	b480      	push	{r7}
 800a490:	b085      	sub	sp, #20
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4a0:	699b      	ldr	r3, [r3, #24]
 800a4a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4aa:	69db      	ldr	r3, [r3, #28]
 800a4ac:	68ba      	ldr	r2, [r7, #8]
 800a4ae:	4013      	ands	r3, r2
 800a4b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	0c1b      	lsrs	r3, r3, #16
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3714      	adds	r7, #20
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr

0800a4c2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a4c2:	b480      	push	{r7}
 800a4c4:	b085      	sub	sp, #20
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4d4:	699b      	ldr	r3, [r3, #24]
 800a4d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4de:	69db      	ldr	r3, [r3, #28]
 800a4e0:	68ba      	ldr	r2, [r7, #8]
 800a4e2:	4013      	ands	r3, r2
 800a4e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	b29b      	uxth	r3, r3
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3714      	adds	r7, #20
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f4:	4770      	bx	lr

0800a4f6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a4f6:	b480      	push	{r7}
 800a4f8:	b085      	sub	sp, #20
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
 800a4fe:	460b      	mov	r3, r1
 800a500:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a506:	78fb      	ldrb	r3, [r7, #3]
 800a508:	015a      	lsls	r2, r3, #5
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	4413      	add	r3, r2
 800a50e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a51c:	695b      	ldr	r3, [r3, #20]
 800a51e:	68ba      	ldr	r2, [r7, #8]
 800a520:	4013      	ands	r3, r2
 800a522:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a524:	68bb      	ldr	r3, [r7, #8]
}
 800a526:	4618      	mov	r0, r3
 800a528:	3714      	adds	r7, #20
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr

0800a532 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a532:	b480      	push	{r7}
 800a534:	b087      	sub	sp, #28
 800a536:	af00      	add	r7, sp, #0
 800a538:	6078      	str	r0, [r7, #4]
 800a53a:	460b      	mov	r3, r1
 800a53c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a548:	691b      	ldr	r3, [r3, #16]
 800a54a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a554:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a556:	78fb      	ldrb	r3, [r7, #3]
 800a558:	f003 030f 	and.w	r3, r3, #15
 800a55c:	68fa      	ldr	r2, [r7, #12]
 800a55e:	fa22 f303 	lsr.w	r3, r2, r3
 800a562:	01db      	lsls	r3, r3, #7
 800a564:	b2db      	uxtb	r3, r3
 800a566:	693a      	ldr	r2, [r7, #16]
 800a568:	4313      	orrs	r3, r2
 800a56a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a56c:	78fb      	ldrb	r3, [r7, #3]
 800a56e:	015a      	lsls	r2, r3, #5
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	4413      	add	r3, r2
 800a574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a578:	689b      	ldr	r3, [r3, #8]
 800a57a:	693a      	ldr	r2, [r7, #16]
 800a57c:	4013      	ands	r3, r2
 800a57e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a580:	68bb      	ldr	r3, [r7, #8]
}
 800a582:	4618      	mov	r0, r3
 800a584:	371c      	adds	r7, #28
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr

0800a58e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a58e:	b480      	push	{r7}
 800a590:	b083      	sub	sp, #12
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	695b      	ldr	r3, [r3, #20]
 800a59a:	f003 0301 	and.w	r3, r3, #1
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	370c      	adds	r7, #12
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr
	...

0800a5ac <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b085      	sub	sp, #20
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	4b09      	ldr	r3, [pc, #36]	; (800a5f0 <USB_ActivateSetup+0x44>)
 800a5ca:	4013      	ands	r3, r2
 800a5cc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5d4:	685b      	ldr	r3, [r3, #4]
 800a5d6:	68fa      	ldr	r2, [r7, #12]
 800a5d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a5dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a5e2:	2300      	movs	r3, #0
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3714      	adds	r7, #20
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr
 800a5f0:	fffff800 	.word	0xfffff800

0800a5f4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b087      	sub	sp, #28
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	60f8      	str	r0, [r7, #12]
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	607a      	str	r2, [r7, #4]
 800a600:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	333c      	adds	r3, #60	; 0x3c
 800a60a:	3304      	adds	r3, #4
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	4a26      	ldr	r2, [pc, #152]	; (800a6ac <USB_EP0_OutStart+0xb8>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d90a      	bls.n	800a62e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a624:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a628:	d101      	bne.n	800a62e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a62a:	2300      	movs	r3, #0
 800a62c:	e037      	b.n	800a69e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a634:	461a      	mov	r2, r3
 800a636:	2300      	movs	r3, #0
 800a638:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a640:	691b      	ldr	r3, [r3, #16]
 800a642:	697a      	ldr	r2, [r7, #20]
 800a644:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a648:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a64c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a654:	691b      	ldr	r3, [r3, #16]
 800a656:	697a      	ldr	r2, [r7, #20]
 800a658:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a65c:	f043 0318 	orr.w	r3, r3, #24
 800a660:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a668:	691b      	ldr	r3, [r3, #16]
 800a66a:	697a      	ldr	r2, [r7, #20]
 800a66c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a670:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a674:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a676:	7afb      	ldrb	r3, [r7, #11]
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d10f      	bne.n	800a69c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a682:	461a      	mov	r2, r3
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	697a      	ldr	r2, [r7, #20]
 800a692:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a696:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a69a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a69c:	2300      	movs	r3, #0
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	371c      	adds	r7, #28
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a8:	4770      	bx	lr
 800a6aa:	bf00      	nop
 800a6ac:	4f54300a 	.word	0x4f54300a

0800a6b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b085      	sub	sp, #20
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	3301      	adds	r3, #1
 800a6c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	4a13      	ldr	r2, [pc, #76]	; (800a714 <USB_CoreReset+0x64>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d901      	bls.n	800a6ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a6ca:	2303      	movs	r3, #3
 800a6cc:	e01b      	b.n	800a706 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	691b      	ldr	r3, [r3, #16]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	daf2      	bge.n	800a6bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	691b      	ldr	r3, [r3, #16]
 800a6de:	f043 0201 	orr.w	r2, r3, #1
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	3301      	adds	r3, #1
 800a6ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	4a09      	ldr	r2, [pc, #36]	; (800a714 <USB_CoreReset+0x64>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d901      	bls.n	800a6f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a6f4:	2303      	movs	r3, #3
 800a6f6:	e006      	b.n	800a706 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	691b      	ldr	r3, [r3, #16]
 800a6fc:	f003 0301 	and.w	r3, r3, #1
 800a700:	2b01      	cmp	r3, #1
 800a702:	d0f0      	beq.n	800a6e6 <USB_CoreReset+0x36>

  return HAL_OK;
 800a704:	2300      	movs	r3, #0
}
 800a706:	4618      	mov	r0, r3
 800a708:	3714      	adds	r7, #20
 800a70a:	46bd      	mov	sp, r7
 800a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a710:	4770      	bx	lr
 800a712:	bf00      	nop
 800a714:	00030d40 	.word	0x00030d40

0800a718 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a71c:	4904      	ldr	r1, [pc, #16]	; (800a730 <MX_FATFS_Init+0x18>)
 800a71e:	4805      	ldr	r0, [pc, #20]	; (800a734 <MX_FATFS_Init+0x1c>)
 800a720:	f005 f9e2 	bl	800fae8 <FATFS_LinkDriver>
 800a724:	4603      	mov	r3, r0
 800a726:	461a      	mov	r2, r3
 800a728:	4b03      	ldr	r3, [pc, #12]	; (800a738 <MX_FATFS_Init+0x20>)
 800a72a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a72c:	bf00      	nop
 800a72e:	bd80      	pop	{r7, pc}
 800a730:	20002518 	.word	0x20002518
 800a734:	08011ed8 	.word	0x08011ed8
 800a738:	20002514 	.word	0x20002514

0800a73c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a73c:	b480      	push	{r7}
 800a73e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a740:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a742:	4618      	mov	r0, r3
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr

0800a74c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b082      	sub	sp, #8
 800a750:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a752:	2300      	movs	r3, #0
 800a754:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a756:	f000 f888 	bl	800a86a <BSP_SD_IsDetected>
 800a75a:	4603      	mov	r3, r0
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	d001      	beq.n	800a764 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800a760:	2302      	movs	r3, #2
 800a762:	e005      	b.n	800a770 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800a764:	4804      	ldr	r0, [pc, #16]	; (800a778 <BSP_SD_Init+0x2c>)
 800a766:	f7fc f845 	bl	80067f4 <HAL_SD_Init>
 800a76a:	4603      	mov	r3, r0
 800a76c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800a76e:	79fb      	ldrb	r3, [r7, #7]
}
 800a770:	4618      	mov	r0, r3
 800a772:	3708      	adds	r7, #8
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}
 800a778:	20000204 	.word	0x20000204

0800a77c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b086      	sub	sp, #24
 800a780:	af00      	add	r7, sp, #0
 800a782:	60f8      	str	r0, [r7, #12]
 800a784:	60b9      	str	r1, [r7, #8]
 800a786:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a788:	2300      	movs	r3, #0
 800a78a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	68ba      	ldr	r2, [r7, #8]
 800a790:	68f9      	ldr	r1, [r7, #12]
 800a792:	4806      	ldr	r0, [pc, #24]	; (800a7ac <BSP_SD_ReadBlocks_DMA+0x30>)
 800a794:	f7fc f8e6 	bl	8006964 <HAL_SD_ReadBlocks_DMA>
 800a798:	4603      	mov	r3, r0
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d001      	beq.n	800a7a2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a7a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3718      	adds	r7, #24
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}
 800a7ac:	20000204 	.word	0x20000204

0800a7b0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b086      	sub	sp, #24
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	60f8      	str	r0, [r7, #12]
 800a7b8:	60b9      	str	r1, [r7, #8]
 800a7ba:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	68ba      	ldr	r2, [r7, #8]
 800a7c4:	68f9      	ldr	r1, [r7, #12]
 800a7c6:	4806      	ldr	r0, [pc, #24]	; (800a7e0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800a7c8:	f7fc f9ae 	bl	8006b28 <HAL_SD_WriteBlocks_DMA>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d001      	beq.n	800a7d6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a7d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3718      	adds	r7, #24
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}
 800a7e0:	20000204 	.word	0x20000204

0800a7e4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a7e8:	4805      	ldr	r0, [pc, #20]	; (800a800 <BSP_SD_GetCardState+0x1c>)
 800a7ea:	f7fc fdd3 	bl	8007394 <HAL_SD_GetCardState>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	2b04      	cmp	r3, #4
 800a7f2:	bf14      	ite	ne
 800a7f4:	2301      	movne	r3, #1
 800a7f6:	2300      	moveq	r3, #0
 800a7f8:	b2db      	uxtb	r3, r3
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	20000204 	.word	0x20000204

0800a804 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b082      	sub	sp, #8
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a80c:	6879      	ldr	r1, [r7, #4]
 800a80e:	4803      	ldr	r0, [pc, #12]	; (800a81c <BSP_SD_GetCardInfo+0x18>)
 800a810:	f7fc fd94 	bl	800733c <HAL_SD_GetCardInfo>
}
 800a814:	bf00      	nop
 800a816:	3708      	adds	r7, #8
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	20000204 	.word	0x20000204

0800a820 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b082      	sub	sp, #8
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800a828:	f000 f818 	bl	800a85c <BSP_SD_AbortCallback>
}
 800a82c:	bf00      	nop
 800a82e:	3708      	adds	r7, #8
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b082      	sub	sp, #8
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a83c:	f000 f9a8 	bl	800ab90 <BSP_SD_WriteCpltCallback>
}
 800a840:	bf00      	nop
 800a842:	3708      	adds	r7, #8
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a850:	f000 f9aa 	bl	800aba8 <BSP_SD_ReadCpltCallback>
}
 800a854:	bf00      	nop
 800a856:	3708      	adds	r7, #8
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800a85c:	b480      	push	{r7}
 800a85e:	af00      	add	r7, sp, #0

}
 800a860:	bf00      	nop
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr

0800a86a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a86a:	b580      	push	{r7, lr}
 800a86c:	b082      	sub	sp, #8
 800a86e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a870:	2301      	movs	r3, #1
 800a872:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a874:	f000 f80c 	bl	800a890 <BSP_PlatformIsDetected>
 800a878:	4603      	mov	r3, r0
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d101      	bne.n	800a882 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a87e:	2300      	movs	r3, #0
 800a880:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a882:	79fb      	ldrb	r3, [r7, #7]
 800a884:	b2db      	uxtb	r3, r3
}
 800a886:	4618      	mov	r0, r3
 800a888:	3708      	adds	r7, #8
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
	...

0800a890 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a890:	b580      	push	{r7, lr}
 800a892:	b082      	sub	sp, #8
 800a894:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a896:	2301      	movs	r3, #1
 800a898:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 800a89a:	2104      	movs	r1, #4
 800a89c:	4806      	ldr	r0, [pc, #24]	; (800a8b8 <BSP_PlatformIsDetected+0x28>)
 800a89e:	f7f8 fe21 	bl	80034e4 <HAL_GPIO_ReadPin>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d001      	beq.n	800a8ac <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800a8ac:	79fb      	ldrb	r3, [r7, #7]
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3708      	adds	r7, #8
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
 800a8b6:	bf00      	nop
 800a8b8:	40021800 	.word	0x40021800

0800a8bc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b084      	sub	sp, #16
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800a8c4:	f7f7 f976 	bl	8001bb4 <HAL_GetTick>
 800a8c8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800a8ca:	e006      	b.n	800a8da <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a8cc:	f7ff ff8a 	bl	800a7e4 <BSP_SD_GetCardState>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d101      	bne.n	800a8da <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	e009      	b.n	800a8ee <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800a8da:	f7f7 f96b 	bl	8001bb4 <HAL_GetTick>
 800a8de:	4602      	mov	r2, r0
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	1ad3      	subs	r3, r2, r3
 800a8e4:	687a      	ldr	r2, [r7, #4]
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d8f0      	bhi.n	800a8cc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a8ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3710      	adds	r7, #16
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
	...

0800a8f8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	4603      	mov	r3, r0
 800a900:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a902:	4b0b      	ldr	r3, [pc, #44]	; (800a930 <SD_CheckStatus+0x38>)
 800a904:	2201      	movs	r2, #1
 800a906:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a908:	f7ff ff6c 	bl	800a7e4 <BSP_SD_GetCardState>
 800a90c:	4603      	mov	r3, r0
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d107      	bne.n	800a922 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a912:	4b07      	ldr	r3, [pc, #28]	; (800a930 <SD_CheckStatus+0x38>)
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	b2db      	uxtb	r3, r3
 800a918:	f023 0301 	bic.w	r3, r3, #1
 800a91c:	b2da      	uxtb	r2, r3
 800a91e:	4b04      	ldr	r3, [pc, #16]	; (800a930 <SD_CheckStatus+0x38>)
 800a920:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a922:	4b03      	ldr	r3, [pc, #12]	; (800a930 <SD_CheckStatus+0x38>)
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	b2db      	uxtb	r3, r3
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3708      	adds	r7, #8
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}
 800a930:	2000000d 	.word	0x2000000d

0800a934 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b082      	sub	sp, #8
 800a938:	af00      	add	r7, sp, #0
 800a93a:	4603      	mov	r3, r0
 800a93c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a93e:	f7ff ff05 	bl	800a74c <BSP_SD_Init>
 800a942:	4603      	mov	r3, r0
 800a944:	2b00      	cmp	r3, #0
 800a946:	d107      	bne.n	800a958 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800a948:	79fb      	ldrb	r3, [r7, #7]
 800a94a:	4618      	mov	r0, r3
 800a94c:	f7ff ffd4 	bl	800a8f8 <SD_CheckStatus>
 800a950:	4603      	mov	r3, r0
 800a952:	461a      	mov	r2, r3
 800a954:	4b04      	ldr	r3, [pc, #16]	; (800a968 <SD_initialize+0x34>)
 800a956:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a958:	4b03      	ldr	r3, [pc, #12]	; (800a968 <SD_initialize+0x34>)
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	b2db      	uxtb	r3, r3
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3708      	adds	r7, #8
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop
 800a968:	2000000d 	.word	0x2000000d

0800a96c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b082      	sub	sp, #8
 800a970:	af00      	add	r7, sp, #0
 800a972:	4603      	mov	r3, r0
 800a974:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a976:	79fb      	ldrb	r3, [r7, #7]
 800a978:	4618      	mov	r0, r3
 800a97a:	f7ff ffbd 	bl	800a8f8 <SD_CheckStatus>
 800a97e:	4603      	mov	r3, r0
}
 800a980:	4618      	mov	r0, r3
 800a982:	3708      	adds	r7, #8
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b086      	sub	sp, #24
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	60b9      	str	r1, [r7, #8]
 800a990:	607a      	str	r2, [r7, #4]
 800a992:	603b      	str	r3, [r7, #0]
 800a994:	4603      	mov	r3, r0
 800a996:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a998:	2301      	movs	r3, #1
 800a99a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a99c:	f247 5030 	movw	r0, #30000	; 0x7530
 800a9a0:	f7ff ff8c 	bl	800a8bc <SD_CheckStatusWithTimeout>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	da01      	bge.n	800a9ae <SD_read+0x26>
  {
    return res;
 800a9aa:	7dfb      	ldrb	r3, [r7, #23]
 800a9ac:	e03b      	b.n	800aa26 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800a9ae:	683a      	ldr	r2, [r7, #0]
 800a9b0:	6879      	ldr	r1, [r7, #4]
 800a9b2:	68b8      	ldr	r0, [r7, #8]
 800a9b4:	f7ff fee2 	bl	800a77c <BSP_SD_ReadBlocks_DMA>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d132      	bne.n	800aa24 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800a9be:	4b1c      	ldr	r3, [pc, #112]	; (800aa30 <SD_read+0xa8>)
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800a9c4:	f7f7 f8f6 	bl	8001bb4 <HAL_GetTick>
 800a9c8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a9ca:	bf00      	nop
 800a9cc:	4b18      	ldr	r3, [pc, #96]	; (800aa30 <SD_read+0xa8>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d108      	bne.n	800a9e6 <SD_read+0x5e>
 800a9d4:	f7f7 f8ee 	bl	8001bb4 <HAL_GetTick>
 800a9d8:	4602      	mov	r2, r0
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	1ad3      	subs	r3, r2, r3
 800a9de:	f247 522f 	movw	r2, #29999	; 0x752f
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d9f2      	bls.n	800a9cc <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800a9e6:	4b12      	ldr	r3, [pc, #72]	; (800aa30 <SD_read+0xa8>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d102      	bne.n	800a9f4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	75fb      	strb	r3, [r7, #23]
 800a9f2:	e017      	b.n	800aa24 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800a9f4:	4b0e      	ldr	r3, [pc, #56]	; (800aa30 <SD_read+0xa8>)
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a9fa:	f7f7 f8db 	bl	8001bb4 <HAL_GetTick>
 800a9fe:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800aa00:	e007      	b.n	800aa12 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800aa02:	f7ff feef 	bl	800a7e4 <BSP_SD_GetCardState>
 800aa06:	4603      	mov	r3, r0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d102      	bne.n	800aa12 <SD_read+0x8a>
          {
            res = RES_OK;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800aa10:	e008      	b.n	800aa24 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800aa12:	f7f7 f8cf 	bl	8001bb4 <HAL_GetTick>
 800aa16:	4602      	mov	r2, r0
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	1ad3      	subs	r3, r2, r3
 800aa1c:	f247 522f 	movw	r2, #29999	; 0x752f
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d9ee      	bls.n	800aa02 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800aa24:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3718      	adds	r7, #24
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
 800aa2e:	bf00      	nop
 800aa30:	20002984 	.word	0x20002984

0800aa34 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b086      	sub	sp, #24
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	60b9      	str	r1, [r7, #8]
 800aa3c:	607a      	str	r2, [r7, #4]
 800aa3e:	603b      	str	r3, [r7, #0]
 800aa40:	4603      	mov	r3, r0
 800aa42:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800aa44:	2301      	movs	r3, #1
 800aa46:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800aa48:	4b24      	ldr	r3, [pc, #144]	; (800aadc <SD_write+0xa8>)
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800aa4e:	f247 5030 	movw	r0, #30000	; 0x7530
 800aa52:	f7ff ff33 	bl	800a8bc <SD_CheckStatusWithTimeout>
 800aa56:	4603      	mov	r3, r0
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	da01      	bge.n	800aa60 <SD_write+0x2c>
  {
    return res;
 800aa5c:	7dfb      	ldrb	r3, [r7, #23]
 800aa5e:	e038      	b.n	800aad2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800aa60:	683a      	ldr	r2, [r7, #0]
 800aa62:	6879      	ldr	r1, [r7, #4]
 800aa64:	68b8      	ldr	r0, [r7, #8]
 800aa66:	f7ff fea3 	bl	800a7b0 <BSP_SD_WriteBlocks_DMA>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d12f      	bne.n	800aad0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800aa70:	f7f7 f8a0 	bl	8001bb4 <HAL_GetTick>
 800aa74:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800aa76:	bf00      	nop
 800aa78:	4b18      	ldr	r3, [pc, #96]	; (800aadc <SD_write+0xa8>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d108      	bne.n	800aa92 <SD_write+0x5e>
 800aa80:	f7f7 f898 	bl	8001bb4 <HAL_GetTick>
 800aa84:	4602      	mov	r2, r0
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	1ad3      	subs	r3, r2, r3
 800aa8a:	f247 522f 	movw	r2, #29999	; 0x752f
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d9f2      	bls.n	800aa78 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800aa92:	4b12      	ldr	r3, [pc, #72]	; (800aadc <SD_write+0xa8>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d102      	bne.n	800aaa0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	75fb      	strb	r3, [r7, #23]
 800aa9e:	e017      	b.n	800aad0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800aaa0:	4b0e      	ldr	r3, [pc, #56]	; (800aadc <SD_write+0xa8>)
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800aaa6:	f7f7 f885 	bl	8001bb4 <HAL_GetTick>
 800aaaa:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800aaac:	e007      	b.n	800aabe <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800aaae:	f7ff fe99 	bl	800a7e4 <BSP_SD_GetCardState>
 800aab2:	4603      	mov	r3, r0
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d102      	bne.n	800aabe <SD_write+0x8a>
          {
            res = RES_OK;
 800aab8:	2300      	movs	r3, #0
 800aaba:	75fb      	strb	r3, [r7, #23]
            break;
 800aabc:	e008      	b.n	800aad0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800aabe:	f7f7 f879 	bl	8001bb4 <HAL_GetTick>
 800aac2:	4602      	mov	r2, r0
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	1ad3      	subs	r3, r2, r3
 800aac8:	f247 522f 	movw	r2, #29999	; 0x752f
 800aacc:	4293      	cmp	r3, r2
 800aace:	d9ee      	bls.n	800aaae <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800aad0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3718      	adds	r7, #24
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop
 800aadc:	20002980 	.word	0x20002980

0800aae0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b08c      	sub	sp, #48	; 0x30
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	4603      	mov	r3, r0
 800aae8:	603a      	str	r2, [r7, #0]
 800aaea:	71fb      	strb	r3, [r7, #7]
 800aaec:	460b      	mov	r3, r1
 800aaee:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800aaf6:	4b25      	ldr	r3, [pc, #148]	; (800ab8c <SD_ioctl+0xac>)
 800aaf8:	781b      	ldrb	r3, [r3, #0]
 800aafa:	b2db      	uxtb	r3, r3
 800aafc:	f003 0301 	and.w	r3, r3, #1
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d001      	beq.n	800ab08 <SD_ioctl+0x28>
 800ab04:	2303      	movs	r3, #3
 800ab06:	e03c      	b.n	800ab82 <SD_ioctl+0xa2>

  switch (cmd)
 800ab08:	79bb      	ldrb	r3, [r7, #6]
 800ab0a:	2b03      	cmp	r3, #3
 800ab0c:	d834      	bhi.n	800ab78 <SD_ioctl+0x98>
 800ab0e:	a201      	add	r2, pc, #4	; (adr r2, 800ab14 <SD_ioctl+0x34>)
 800ab10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab14:	0800ab25 	.word	0x0800ab25
 800ab18:	0800ab2d 	.word	0x0800ab2d
 800ab1c:	0800ab45 	.word	0x0800ab45
 800ab20:	0800ab5f 	.word	0x0800ab5f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ab24:	2300      	movs	r3, #0
 800ab26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ab2a:	e028      	b.n	800ab7e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ab2c:	f107 030c 	add.w	r3, r7, #12
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7ff fe67 	bl	800a804 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ab36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ab42:	e01c      	b.n	800ab7e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ab44:	f107 030c 	add.w	r3, r7, #12
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f7ff fe5b 	bl	800a804 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ab4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab50:	b29a      	uxth	r2, r3
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ab56:	2300      	movs	r3, #0
 800ab58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ab5c:	e00f      	b.n	800ab7e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ab5e:	f107 030c 	add.w	r3, r7, #12
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7ff fe4e 	bl	800a804 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ab68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab6a:	0a5a      	lsrs	r2, r3, #9
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ab70:	2300      	movs	r3, #0
 800ab72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ab76:	e002      	b.n	800ab7e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ab78:	2304      	movs	r3, #4
 800ab7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ab7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3730      	adds	r7, #48	; 0x30
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
 800ab8a:	bf00      	nop
 800ab8c:	2000000d 	.word	0x2000000d

0800ab90 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800ab90:	b480      	push	{r7}
 800ab92:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800ab94:	4b03      	ldr	r3, [pc, #12]	; (800aba4 <BSP_SD_WriteCpltCallback+0x14>)
 800ab96:	2201      	movs	r2, #1
 800ab98:	601a      	str	r2, [r3, #0]
}
 800ab9a:	bf00      	nop
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr
 800aba4:	20002980 	.word	0x20002980

0800aba8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800aba8:	b480      	push	{r7}
 800abaa:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800abac:	4b03      	ldr	r3, [pc, #12]	; (800abbc <BSP_SD_ReadCpltCallback+0x14>)
 800abae:	2201      	movs	r2, #1
 800abb0:	601a      	str	r2, [r3, #0]
}
 800abb2:	bf00      	nop
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr
 800abbc:	20002984 	.word	0x20002984

0800abc0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b084      	sub	sp, #16
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
 800abc8:	460b      	mov	r3, r1
 800abca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800abcc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800abd0:	f005 fde6 	bl	80107a0 <malloc>
 800abd4:	4603      	mov	r3, r0
 800abd6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d109      	bne.n	800abf2 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	32b0      	adds	r2, #176	; 0xb0
 800abe8:	2100      	movs	r1, #0
 800abea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800abee:	2302      	movs	r3, #2
 800abf0:	e0d4      	b.n	800ad9c <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800abf2:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800abf6:	2100      	movs	r1, #0
 800abf8:	68f8      	ldr	r0, [r7, #12]
 800abfa:	f006 f800 	bl	8010bfe <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	32b0      	adds	r2, #176	; 0xb0
 800ac08:	68f9      	ldr	r1, [r7, #12]
 800ac0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	32b0      	adds	r2, #176	; 0xb0
 800ac18:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	7c1b      	ldrb	r3, [r3, #16]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d138      	bne.n	800ac9c <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ac2a:	4b5e      	ldr	r3, [pc, #376]	; (800ada4 <USBD_CDC_Init+0x1e4>)
 800ac2c:	7819      	ldrb	r1, [r3, #0]
 800ac2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac32:	2202      	movs	r2, #2
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f005 fc10 	bl	801045a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ac3a:	4b5a      	ldr	r3, [pc, #360]	; (800ada4 <USBD_CDC_Init+0x1e4>)
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	f003 020f 	and.w	r2, r3, #15
 800ac42:	6879      	ldr	r1, [r7, #4]
 800ac44:	4613      	mov	r3, r2
 800ac46:	009b      	lsls	r3, r3, #2
 800ac48:	4413      	add	r3, r2
 800ac4a:	009b      	lsls	r3, r3, #2
 800ac4c:	440b      	add	r3, r1
 800ac4e:	3324      	adds	r3, #36	; 0x24
 800ac50:	2201      	movs	r2, #1
 800ac52:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ac54:	4b54      	ldr	r3, [pc, #336]	; (800ada8 <USBD_CDC_Init+0x1e8>)
 800ac56:	7819      	ldrb	r1, [r3, #0]
 800ac58:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac5c:	2202      	movs	r2, #2
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f005 fbfb 	bl	801045a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ac64:	4b50      	ldr	r3, [pc, #320]	; (800ada8 <USBD_CDC_Init+0x1e8>)
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	f003 020f 	and.w	r2, r3, #15
 800ac6c:	6879      	ldr	r1, [r7, #4]
 800ac6e:	4613      	mov	r3, r2
 800ac70:	009b      	lsls	r3, r3, #2
 800ac72:	4413      	add	r3, r2
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	440b      	add	r3, r1
 800ac78:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ac80:	4b4a      	ldr	r3, [pc, #296]	; (800adac <USBD_CDC_Init+0x1ec>)
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	f003 020f 	and.w	r2, r3, #15
 800ac88:	6879      	ldr	r1, [r7, #4]
 800ac8a:	4613      	mov	r3, r2
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	4413      	add	r3, r2
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	440b      	add	r3, r1
 800ac94:	3326      	adds	r3, #38	; 0x26
 800ac96:	2210      	movs	r2, #16
 800ac98:	801a      	strh	r2, [r3, #0]
 800ac9a:	e035      	b.n	800ad08 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ac9c:	4b41      	ldr	r3, [pc, #260]	; (800ada4 <USBD_CDC_Init+0x1e4>)
 800ac9e:	7819      	ldrb	r1, [r3, #0]
 800aca0:	2340      	movs	r3, #64	; 0x40
 800aca2:	2202      	movs	r2, #2
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f005 fbd8 	bl	801045a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800acaa:	4b3e      	ldr	r3, [pc, #248]	; (800ada4 <USBD_CDC_Init+0x1e4>)
 800acac:	781b      	ldrb	r3, [r3, #0]
 800acae:	f003 020f 	and.w	r2, r3, #15
 800acb2:	6879      	ldr	r1, [r7, #4]
 800acb4:	4613      	mov	r3, r2
 800acb6:	009b      	lsls	r3, r3, #2
 800acb8:	4413      	add	r3, r2
 800acba:	009b      	lsls	r3, r3, #2
 800acbc:	440b      	add	r3, r1
 800acbe:	3324      	adds	r3, #36	; 0x24
 800acc0:	2201      	movs	r2, #1
 800acc2:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800acc4:	4b38      	ldr	r3, [pc, #224]	; (800ada8 <USBD_CDC_Init+0x1e8>)
 800acc6:	7819      	ldrb	r1, [r3, #0]
 800acc8:	2340      	movs	r3, #64	; 0x40
 800acca:	2202      	movs	r2, #2
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f005 fbc4 	bl	801045a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800acd2:	4b35      	ldr	r3, [pc, #212]	; (800ada8 <USBD_CDC_Init+0x1e8>)
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	f003 020f 	and.w	r2, r3, #15
 800acda:	6879      	ldr	r1, [r7, #4]
 800acdc:	4613      	mov	r3, r2
 800acde:	009b      	lsls	r3, r3, #2
 800ace0:	4413      	add	r3, r2
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	440b      	add	r3, r1
 800ace6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800acea:	2201      	movs	r2, #1
 800acec:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800acee:	4b2f      	ldr	r3, [pc, #188]	; (800adac <USBD_CDC_Init+0x1ec>)
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	f003 020f 	and.w	r2, r3, #15
 800acf6:	6879      	ldr	r1, [r7, #4]
 800acf8:	4613      	mov	r3, r2
 800acfa:	009b      	lsls	r3, r3, #2
 800acfc:	4413      	add	r3, r2
 800acfe:	009b      	lsls	r3, r3, #2
 800ad00:	440b      	add	r3, r1
 800ad02:	3326      	adds	r3, #38	; 0x26
 800ad04:	2210      	movs	r2, #16
 800ad06:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ad08:	4b28      	ldr	r3, [pc, #160]	; (800adac <USBD_CDC_Init+0x1ec>)
 800ad0a:	7819      	ldrb	r1, [r3, #0]
 800ad0c:	2308      	movs	r3, #8
 800ad0e:	2203      	movs	r2, #3
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f005 fba2 	bl	801045a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ad16:	4b25      	ldr	r3, [pc, #148]	; (800adac <USBD_CDC_Init+0x1ec>)
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	f003 020f 	and.w	r2, r3, #15
 800ad1e:	6879      	ldr	r1, [r7, #4]
 800ad20:	4613      	mov	r3, r2
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	4413      	add	r3, r2
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	440b      	add	r3, r1
 800ad2a:	3324      	adds	r3, #36	; 0x24
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2200      	movs	r2, #0
 800ad34:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad3e:	687a      	ldr	r2, [r7, #4]
 800ad40:	33b0      	adds	r3, #176	; 0xb0
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	4413      	add	r3, r2
 800ad46:	685b      	ldr	r3, [r3, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2200      	movs	r2, #0
 800ad58:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d101      	bne.n	800ad6a <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800ad66:	2302      	movs	r3, #2
 800ad68:	e018      	b.n	800ad9c <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	7c1b      	ldrb	r3, [r3, #16]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d10a      	bne.n	800ad88 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad72:	4b0d      	ldr	r3, [pc, #52]	; (800ada8 <USBD_CDC_Init+0x1e8>)
 800ad74:	7819      	ldrb	r1, [r3, #0]
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f005 fc59 	bl	8010638 <USBD_LL_PrepareReceive>
 800ad86:	e008      	b.n	800ad9a <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad88:	4b07      	ldr	r3, [pc, #28]	; (800ada8 <USBD_CDC_Init+0x1e8>)
 800ad8a:	7819      	ldrb	r1, [r3, #0]
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad92:	2340      	movs	r3, #64	; 0x40
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f005 fc4f 	bl	8010638 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ad9a:	2300      	movs	r3, #0
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3710      	adds	r7, #16
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}
 800ada4:	20000097 	.word	0x20000097
 800ada8:	20000098 	.word	0x20000098
 800adac:	20000099 	.word	0x20000099

0800adb0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b082      	sub	sp, #8
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	460b      	mov	r3, r1
 800adba:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800adbc:	4b3a      	ldr	r3, [pc, #232]	; (800aea8 <USBD_CDC_DeInit+0xf8>)
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	4619      	mov	r1, r3
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f005 fb6f 	bl	80104a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800adc8:	4b37      	ldr	r3, [pc, #220]	; (800aea8 <USBD_CDC_DeInit+0xf8>)
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	f003 020f 	and.w	r2, r3, #15
 800add0:	6879      	ldr	r1, [r7, #4]
 800add2:	4613      	mov	r3, r2
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	4413      	add	r3, r2
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	440b      	add	r3, r1
 800addc:	3324      	adds	r3, #36	; 0x24
 800adde:	2200      	movs	r2, #0
 800ade0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ade2:	4b32      	ldr	r3, [pc, #200]	; (800aeac <USBD_CDC_DeInit+0xfc>)
 800ade4:	781b      	ldrb	r3, [r3, #0]
 800ade6:	4619      	mov	r1, r3
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f005 fb5c 	bl	80104a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800adee:	4b2f      	ldr	r3, [pc, #188]	; (800aeac <USBD_CDC_DeInit+0xfc>)
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	f003 020f 	and.w	r2, r3, #15
 800adf6:	6879      	ldr	r1, [r7, #4]
 800adf8:	4613      	mov	r3, r2
 800adfa:	009b      	lsls	r3, r3, #2
 800adfc:	4413      	add	r3, r2
 800adfe:	009b      	lsls	r3, r3, #2
 800ae00:	440b      	add	r3, r1
 800ae02:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ae06:	2200      	movs	r2, #0
 800ae08:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ae0a:	4b29      	ldr	r3, [pc, #164]	; (800aeb0 <USBD_CDC_DeInit+0x100>)
 800ae0c:	781b      	ldrb	r3, [r3, #0]
 800ae0e:	4619      	mov	r1, r3
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f005 fb48 	bl	80104a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ae16:	4b26      	ldr	r3, [pc, #152]	; (800aeb0 <USBD_CDC_DeInit+0x100>)
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	f003 020f 	and.w	r2, r3, #15
 800ae1e:	6879      	ldr	r1, [r7, #4]
 800ae20:	4613      	mov	r3, r2
 800ae22:	009b      	lsls	r3, r3, #2
 800ae24:	4413      	add	r3, r2
 800ae26:	009b      	lsls	r3, r3, #2
 800ae28:	440b      	add	r3, r1
 800ae2a:	3324      	adds	r3, #36	; 0x24
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ae30:	4b1f      	ldr	r3, [pc, #124]	; (800aeb0 <USBD_CDC_DeInit+0x100>)
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	f003 020f 	and.w	r2, r3, #15
 800ae38:	6879      	ldr	r1, [r7, #4]
 800ae3a:	4613      	mov	r3, r2
 800ae3c:	009b      	lsls	r3, r3, #2
 800ae3e:	4413      	add	r3, r2
 800ae40:	009b      	lsls	r3, r3, #2
 800ae42:	440b      	add	r3, r1
 800ae44:	3326      	adds	r3, #38	; 0x26
 800ae46:	2200      	movs	r2, #0
 800ae48:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	32b0      	adds	r2, #176	; 0xb0
 800ae54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d01f      	beq.n	800ae9c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	33b0      	adds	r3, #176	; 0xb0
 800ae66:	009b      	lsls	r3, r3, #2
 800ae68:	4413      	add	r3, r2
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	32b0      	adds	r2, #176	; 0xb0
 800ae7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f005 fc96 	bl	80107b0 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	32b0      	adds	r2, #176	; 0xb0
 800ae8e:	2100      	movs	r1, #0
 800ae90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2200      	movs	r2, #0
 800ae98:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ae9c:	2300      	movs	r3, #0
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3708      	adds	r7, #8
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
 800aea6:	bf00      	nop
 800aea8:	20000097 	.word	0x20000097
 800aeac:	20000098 	.word	0x20000098
 800aeb0:	20000099 	.word	0x20000099

0800aeb4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b086      	sub	sp, #24
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	32b0      	adds	r2, #176	; 0xb0
 800aec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aecc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800aece:	2300      	movs	r3, #0
 800aed0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800aed2:	2300      	movs	r3, #0
 800aed4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800aed6:	2300      	movs	r3, #0
 800aed8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d101      	bne.n	800aee4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800aee0:	2303      	movs	r3, #3
 800aee2:	e0bf      	b.n	800b064 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	781b      	ldrb	r3, [r3, #0]
 800aee8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d050      	beq.n	800af92 <USBD_CDC_Setup+0xde>
 800aef0:	2b20      	cmp	r3, #32
 800aef2:	f040 80af 	bne.w	800b054 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	88db      	ldrh	r3, [r3, #6]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d03a      	beq.n	800af74 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	b25b      	sxtb	r3, r3
 800af04:	2b00      	cmp	r3, #0
 800af06:	da1b      	bge.n	800af40 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	33b0      	adds	r3, #176	; 0xb0
 800af12:	009b      	lsls	r3, r3, #2
 800af14:	4413      	add	r3, r2
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	689b      	ldr	r3, [r3, #8]
 800af1a:	683a      	ldr	r2, [r7, #0]
 800af1c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800af1e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af20:	683a      	ldr	r2, [r7, #0]
 800af22:	88d2      	ldrh	r2, [r2, #6]
 800af24:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	88db      	ldrh	r3, [r3, #6]
 800af2a:	2b07      	cmp	r3, #7
 800af2c:	bf28      	it	cs
 800af2e:	2307      	movcs	r3, #7
 800af30:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	89fa      	ldrh	r2, [r7, #14]
 800af36:	4619      	mov	r1, r3
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f001 fdad 	bl	800ca98 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800af3e:	e090      	b.n	800b062 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	785a      	ldrb	r2, [r3, #1]
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	88db      	ldrh	r3, [r3, #6]
 800af4e:	2b3f      	cmp	r3, #63	; 0x3f
 800af50:	d803      	bhi.n	800af5a <USBD_CDC_Setup+0xa6>
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	88db      	ldrh	r3, [r3, #6]
 800af56:	b2da      	uxtb	r2, r3
 800af58:	e000      	b.n	800af5c <USBD_CDC_Setup+0xa8>
 800af5a:	2240      	movs	r2, #64	; 0x40
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800af62:	6939      	ldr	r1, [r7, #16]
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800af6a:	461a      	mov	r2, r3
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f001 fdbf 	bl	800caf0 <USBD_CtlPrepareRx>
      break;
 800af72:	e076      	b.n	800b062 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af7a:	687a      	ldr	r2, [r7, #4]
 800af7c:	33b0      	adds	r3, #176	; 0xb0
 800af7e:	009b      	lsls	r3, r3, #2
 800af80:	4413      	add	r3, r2
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	689b      	ldr	r3, [r3, #8]
 800af86:	683a      	ldr	r2, [r7, #0]
 800af88:	7850      	ldrb	r0, [r2, #1]
 800af8a:	2200      	movs	r2, #0
 800af8c:	6839      	ldr	r1, [r7, #0]
 800af8e:	4798      	blx	r3
      break;
 800af90:	e067      	b.n	800b062 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	785b      	ldrb	r3, [r3, #1]
 800af96:	2b0b      	cmp	r3, #11
 800af98:	d851      	bhi.n	800b03e <USBD_CDC_Setup+0x18a>
 800af9a:	a201      	add	r2, pc, #4	; (adr r2, 800afa0 <USBD_CDC_Setup+0xec>)
 800af9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afa0:	0800afd1 	.word	0x0800afd1
 800afa4:	0800b04d 	.word	0x0800b04d
 800afa8:	0800b03f 	.word	0x0800b03f
 800afac:	0800b03f 	.word	0x0800b03f
 800afb0:	0800b03f 	.word	0x0800b03f
 800afb4:	0800b03f 	.word	0x0800b03f
 800afb8:	0800b03f 	.word	0x0800b03f
 800afbc:	0800b03f 	.word	0x0800b03f
 800afc0:	0800b03f 	.word	0x0800b03f
 800afc4:	0800b03f 	.word	0x0800b03f
 800afc8:	0800affb 	.word	0x0800affb
 800afcc:	0800b025 	.word	0x0800b025
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afd6:	b2db      	uxtb	r3, r3
 800afd8:	2b03      	cmp	r3, #3
 800afda:	d107      	bne.n	800afec <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800afdc:	f107 030a 	add.w	r3, r7, #10
 800afe0:	2202      	movs	r2, #2
 800afe2:	4619      	mov	r1, r3
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f001 fd57 	bl	800ca98 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800afea:	e032      	b.n	800b052 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800afec:	6839      	ldr	r1, [r7, #0]
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f001 fce1 	bl	800c9b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800aff4:	2303      	movs	r3, #3
 800aff6:	75fb      	strb	r3, [r7, #23]
          break;
 800aff8:	e02b      	b.n	800b052 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b000:	b2db      	uxtb	r3, r3
 800b002:	2b03      	cmp	r3, #3
 800b004:	d107      	bne.n	800b016 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b006:	f107 030d 	add.w	r3, r7, #13
 800b00a:	2201      	movs	r2, #1
 800b00c:	4619      	mov	r1, r3
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f001 fd42 	bl	800ca98 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b014:	e01d      	b.n	800b052 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b016:	6839      	ldr	r1, [r7, #0]
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f001 fccc 	bl	800c9b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800b01e:	2303      	movs	r3, #3
 800b020:	75fb      	strb	r3, [r7, #23]
          break;
 800b022:	e016      	b.n	800b052 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b02a:	b2db      	uxtb	r3, r3
 800b02c:	2b03      	cmp	r3, #3
 800b02e:	d00f      	beq.n	800b050 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b030:	6839      	ldr	r1, [r7, #0]
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f001 fcbf 	bl	800c9b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800b038:	2303      	movs	r3, #3
 800b03a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b03c:	e008      	b.n	800b050 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b03e:	6839      	ldr	r1, [r7, #0]
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f001 fcb8 	bl	800c9b6 <USBD_CtlError>
          ret = USBD_FAIL;
 800b046:	2303      	movs	r3, #3
 800b048:	75fb      	strb	r3, [r7, #23]
          break;
 800b04a:	e002      	b.n	800b052 <USBD_CDC_Setup+0x19e>
          break;
 800b04c:	bf00      	nop
 800b04e:	e008      	b.n	800b062 <USBD_CDC_Setup+0x1ae>
          break;
 800b050:	bf00      	nop
      }
      break;
 800b052:	e006      	b.n	800b062 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b054:	6839      	ldr	r1, [r7, #0]
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f001 fcad 	bl	800c9b6 <USBD_CtlError>
      ret = USBD_FAIL;
 800b05c:	2303      	movs	r3, #3
 800b05e:	75fb      	strb	r3, [r7, #23]
      break;
 800b060:	bf00      	nop
  }

  return (uint8_t)ret;
 800b062:	7dfb      	ldrb	r3, [r7, #23]
}
 800b064:	4618      	mov	r0, r3
 800b066:	3718      	adds	r7, #24
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	460b      	mov	r3, r1
 800b076:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b07e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	32b0      	adds	r2, #176	; 0xb0
 800b08a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d101      	bne.n	800b096 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b092:	2303      	movs	r3, #3
 800b094:	e065      	b.n	800b162 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	32b0      	adds	r2, #176	; 0xb0
 800b0a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0a4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b0a6:	78fb      	ldrb	r3, [r7, #3]
 800b0a8:	f003 020f 	and.w	r2, r3, #15
 800b0ac:	6879      	ldr	r1, [r7, #4]
 800b0ae:	4613      	mov	r3, r2
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	4413      	add	r3, r2
 800b0b4:	009b      	lsls	r3, r3, #2
 800b0b6:	440b      	add	r3, r1
 800b0b8:	3318      	adds	r3, #24
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d02f      	beq.n	800b120 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b0c0:	78fb      	ldrb	r3, [r7, #3]
 800b0c2:	f003 020f 	and.w	r2, r3, #15
 800b0c6:	6879      	ldr	r1, [r7, #4]
 800b0c8:	4613      	mov	r3, r2
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	4413      	add	r3, r2
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	440b      	add	r3, r1
 800b0d2:	3318      	adds	r3, #24
 800b0d4:	681a      	ldr	r2, [r3, #0]
 800b0d6:	78fb      	ldrb	r3, [r7, #3]
 800b0d8:	f003 010f 	and.w	r1, r3, #15
 800b0dc:	68f8      	ldr	r0, [r7, #12]
 800b0de:	460b      	mov	r3, r1
 800b0e0:	00db      	lsls	r3, r3, #3
 800b0e2:	440b      	add	r3, r1
 800b0e4:	009b      	lsls	r3, r3, #2
 800b0e6:	4403      	add	r3, r0
 800b0e8:	3348      	adds	r3, #72	; 0x48
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	fbb2 f1f3 	udiv	r1, r2, r3
 800b0f0:	fb01 f303 	mul.w	r3, r1, r3
 800b0f4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d112      	bne.n	800b120 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b0fa:	78fb      	ldrb	r3, [r7, #3]
 800b0fc:	f003 020f 	and.w	r2, r3, #15
 800b100:	6879      	ldr	r1, [r7, #4]
 800b102:	4613      	mov	r3, r2
 800b104:	009b      	lsls	r3, r3, #2
 800b106:	4413      	add	r3, r2
 800b108:	009b      	lsls	r3, r3, #2
 800b10a:	440b      	add	r3, r1
 800b10c:	3318      	adds	r3, #24
 800b10e:	2200      	movs	r2, #0
 800b110:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b112:	78f9      	ldrb	r1, [r7, #3]
 800b114:	2300      	movs	r3, #0
 800b116:	2200      	movs	r2, #0
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f005 fa6c 	bl	80105f6 <USBD_LL_Transmit>
 800b11e:	e01f      	b.n	800b160 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	2200      	movs	r2, #0
 800b124:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b12e:	687a      	ldr	r2, [r7, #4]
 800b130:	33b0      	adds	r3, #176	; 0xb0
 800b132:	009b      	lsls	r3, r3, #2
 800b134:	4413      	add	r3, r2
 800b136:	685b      	ldr	r3, [r3, #4]
 800b138:	691b      	ldr	r3, [r3, #16]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d010      	beq.n	800b160 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b144:	687a      	ldr	r2, [r7, #4]
 800b146:	33b0      	adds	r3, #176	; 0xb0
 800b148:	009b      	lsls	r3, r3, #2
 800b14a:	4413      	add	r3, r2
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	691b      	ldr	r3, [r3, #16]
 800b150:	68ba      	ldr	r2, [r7, #8]
 800b152:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b156:	68ba      	ldr	r2, [r7, #8]
 800b158:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b15c:	78fa      	ldrb	r2, [r7, #3]
 800b15e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b160:	2300      	movs	r3, #0
}
 800b162:	4618      	mov	r0, r3
 800b164:	3710      	adds	r7, #16
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}

0800b16a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b16a:	b580      	push	{r7, lr}
 800b16c:	b084      	sub	sp, #16
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
 800b172:	460b      	mov	r3, r1
 800b174:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	32b0      	adds	r2, #176	; 0xb0
 800b180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b184:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	32b0      	adds	r2, #176	; 0xb0
 800b190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d101      	bne.n	800b19c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b198:	2303      	movs	r3, #3
 800b19a:	e01a      	b.n	800b1d2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b19c:	78fb      	ldrb	r3, [r7, #3]
 800b19e:	4619      	mov	r1, r3
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f005 fa6a 	bl	801067a <USBD_LL_GetRxDataSize>
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b1b4:	687a      	ldr	r2, [r7, #4]
 800b1b6:	33b0      	adds	r3, #176	; 0xb0
 800b1b8:	009b      	lsls	r3, r3, #2
 800b1ba:	4413      	add	r3, r2
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	68db      	ldr	r3, [r3, #12]
 800b1c0:	68fa      	ldr	r2, [r7, #12]
 800b1c2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b1c6:	68fa      	ldr	r2, [r7, #12]
 800b1c8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b1cc:	4611      	mov	r1, r2
 800b1ce:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b1d0:	2300      	movs	r3, #0
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3710      	adds	r7, #16
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}

0800b1da <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b1da:	b580      	push	{r7, lr}
 800b1dc:	b084      	sub	sp, #16
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	32b0      	adds	r2, #176	; 0xb0
 800b1ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d101      	bne.n	800b1fc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b1f8:	2303      	movs	r3, #3
 800b1fa:	e025      	b.n	800b248 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b202:	687a      	ldr	r2, [r7, #4]
 800b204:	33b0      	adds	r3, #176	; 0xb0
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	4413      	add	r3, r2
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d01a      	beq.n	800b246 <USBD_CDC_EP0_RxReady+0x6c>
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b216:	2bff      	cmp	r3, #255	; 0xff
 800b218:	d015      	beq.n	800b246 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	33b0      	adds	r3, #176	; 0xb0
 800b224:	009b      	lsls	r3, r3, #2
 800b226:	4413      	add	r3, r2
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	689b      	ldr	r3, [r3, #8]
 800b22c:	68fa      	ldr	r2, [r7, #12]
 800b22e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b232:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b234:	68fa      	ldr	r2, [r7, #12]
 800b236:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b23a:	b292      	uxth	r2, r2
 800b23c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	22ff      	movs	r2, #255	; 0xff
 800b242:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b246:	2300      	movs	r3, #0
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3710      	adds	r7, #16
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b086      	sub	sp, #24
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b258:	2182      	movs	r1, #130	; 0x82
 800b25a:	4818      	ldr	r0, [pc, #96]	; (800b2bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b25c:	f000 fd49 	bl	800bcf2 <USBD_GetEpDesc>
 800b260:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b262:	2101      	movs	r1, #1
 800b264:	4815      	ldr	r0, [pc, #84]	; (800b2bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b266:	f000 fd44 	bl	800bcf2 <USBD_GetEpDesc>
 800b26a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b26c:	2181      	movs	r1, #129	; 0x81
 800b26e:	4813      	ldr	r0, [pc, #76]	; (800b2bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b270:	f000 fd3f 	bl	800bcf2 <USBD_GetEpDesc>
 800b274:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d002      	beq.n	800b282 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	2210      	movs	r2, #16
 800b280:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d006      	beq.n	800b296 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	2200      	movs	r2, #0
 800b28c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b290:	711a      	strb	r2, [r3, #4]
 800b292:	2200      	movs	r2, #0
 800b294:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d006      	beq.n	800b2aa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b2a4:	711a      	strb	r2, [r3, #4]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2243      	movs	r2, #67	; 0x43
 800b2ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b2b0:	4b02      	ldr	r3, [pc, #8]	; (800b2bc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3718      	adds	r7, #24
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	20000054 	.word	0x20000054

0800b2c0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b086      	sub	sp, #24
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b2c8:	2182      	movs	r1, #130	; 0x82
 800b2ca:	4818      	ldr	r0, [pc, #96]	; (800b32c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b2cc:	f000 fd11 	bl	800bcf2 <USBD_GetEpDesc>
 800b2d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b2d2:	2101      	movs	r1, #1
 800b2d4:	4815      	ldr	r0, [pc, #84]	; (800b32c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b2d6:	f000 fd0c 	bl	800bcf2 <USBD_GetEpDesc>
 800b2da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b2dc:	2181      	movs	r1, #129	; 0x81
 800b2de:	4813      	ldr	r0, [pc, #76]	; (800b32c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b2e0:	f000 fd07 	bl	800bcf2 <USBD_GetEpDesc>
 800b2e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d002      	beq.n	800b2f2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	2210      	movs	r2, #16
 800b2f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d006      	beq.n	800b306 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	711a      	strb	r2, [r3, #4]
 800b2fe:	2200      	movs	r2, #0
 800b300:	f042 0202 	orr.w	r2, r2, #2
 800b304:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d006      	beq.n	800b31a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	2200      	movs	r2, #0
 800b310:	711a      	strb	r2, [r3, #4]
 800b312:	2200      	movs	r2, #0
 800b314:	f042 0202 	orr.w	r2, r2, #2
 800b318:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2243      	movs	r2, #67	; 0x43
 800b31e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b320:	4b02      	ldr	r3, [pc, #8]	; (800b32c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b322:	4618      	mov	r0, r3
 800b324:	3718      	adds	r7, #24
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}
 800b32a:	bf00      	nop
 800b32c:	20000054 	.word	0x20000054

0800b330 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b086      	sub	sp, #24
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b338:	2182      	movs	r1, #130	; 0x82
 800b33a:	4818      	ldr	r0, [pc, #96]	; (800b39c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b33c:	f000 fcd9 	bl	800bcf2 <USBD_GetEpDesc>
 800b340:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b342:	2101      	movs	r1, #1
 800b344:	4815      	ldr	r0, [pc, #84]	; (800b39c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b346:	f000 fcd4 	bl	800bcf2 <USBD_GetEpDesc>
 800b34a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b34c:	2181      	movs	r1, #129	; 0x81
 800b34e:	4813      	ldr	r0, [pc, #76]	; (800b39c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b350:	f000 fccf 	bl	800bcf2 <USBD_GetEpDesc>
 800b354:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d002      	beq.n	800b362 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	2210      	movs	r2, #16
 800b360:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d006      	beq.n	800b376 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	2200      	movs	r2, #0
 800b36c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b370:	711a      	strb	r2, [r3, #4]
 800b372:	2200      	movs	r2, #0
 800b374:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d006      	beq.n	800b38a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	2200      	movs	r2, #0
 800b380:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b384:	711a      	strb	r2, [r3, #4]
 800b386:	2200      	movs	r2, #0
 800b388:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2243      	movs	r2, #67	; 0x43
 800b38e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b390:	4b02      	ldr	r3, [pc, #8]	; (800b39c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b392:	4618      	mov	r0, r3
 800b394:	3718      	adds	r7, #24
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}
 800b39a:	bf00      	nop
 800b39c:	20000054 	.word	0x20000054

0800b3a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b083      	sub	sp, #12
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	220a      	movs	r2, #10
 800b3ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b3ae:	4b03      	ldr	r3, [pc, #12]	; (800b3bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	370c      	adds	r7, #12
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr
 800b3bc:	20000010 	.word	0x20000010

0800b3c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b083      	sub	sp, #12
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d101      	bne.n	800b3d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b3d0:	2303      	movs	r3, #3
 800b3d2:	e009      	b.n	800b3e8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b3da:	687a      	ldr	r2, [r7, #4]
 800b3dc:	33b0      	adds	r3, #176	; 0xb0
 800b3de:	009b      	lsls	r3, r3, #2
 800b3e0:	4413      	add	r3, r2
 800b3e2:	683a      	ldr	r2, [r7, #0]
 800b3e4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b3e6:	2300      	movs	r3, #0
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	370c      	adds	r7, #12
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f2:	4770      	bx	lr

0800b3f4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b087      	sub	sp, #28
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	60f8      	str	r0, [r7, #12]
 800b3fc:	60b9      	str	r1, [r7, #8]
 800b3fe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	32b0      	adds	r2, #176	; 0xb0
 800b40a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b40e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d101      	bne.n	800b41a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b416:	2303      	movs	r3, #3
 800b418:	e008      	b.n	800b42c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	68ba      	ldr	r2, [r7, #8]
 800b41e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b42a:	2300      	movs	r3, #0
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	371c      	adds	r7, #28
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr

0800b438 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b438:	b480      	push	{r7}
 800b43a:	b085      	sub	sp, #20
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	32b0      	adds	r2, #176	; 0xb0
 800b44c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b450:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d101      	bne.n	800b45c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b458:	2303      	movs	r3, #3
 800b45a:	e004      	b.n	800b466 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	683a      	ldr	r2, [r7, #0]
 800b460:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b464:	2300      	movs	r3, #0
}
 800b466:	4618      	mov	r0, r3
 800b468:	3714      	adds	r7, #20
 800b46a:	46bd      	mov	sp, r7
 800b46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b470:	4770      	bx	lr
	...

0800b474 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	32b0      	adds	r2, #176	; 0xb0
 800b486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b48a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b48c:	2301      	movs	r3, #1
 800b48e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d101      	bne.n	800b49a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b496:	2303      	movs	r3, #3
 800b498:	e025      	b.n	800b4e6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d11f      	bne.n	800b4e4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b4ac:	4b10      	ldr	r3, [pc, #64]	; (800b4f0 <USBD_CDC_TransmitPacket+0x7c>)
 800b4ae:	781b      	ldrb	r3, [r3, #0]
 800b4b0:	f003 020f 	and.w	r2, r3, #15
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	4613      	mov	r3, r2
 800b4be:	009b      	lsls	r3, r3, #2
 800b4c0:	4413      	add	r3, r2
 800b4c2:	009b      	lsls	r3, r3, #2
 800b4c4:	4403      	add	r3, r0
 800b4c6:	3318      	adds	r3, #24
 800b4c8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b4ca:	4b09      	ldr	r3, [pc, #36]	; (800b4f0 <USBD_CDC_TransmitPacket+0x7c>)
 800b4cc:	7819      	ldrb	r1, [r3, #0]
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f005 f88b 	bl	80105f6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b4e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3710      	adds	r7, #16
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}
 800b4ee:	bf00      	nop
 800b4f0:	20000097 	.word	0x20000097

0800b4f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b084      	sub	sp, #16
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	32b0      	adds	r2, #176	; 0xb0
 800b506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b50a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	32b0      	adds	r2, #176	; 0xb0
 800b516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d101      	bne.n	800b522 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b51e:	2303      	movs	r3, #3
 800b520:	e018      	b.n	800b554 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	7c1b      	ldrb	r3, [r3, #16]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d10a      	bne.n	800b540 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b52a:	4b0c      	ldr	r3, [pc, #48]	; (800b55c <USBD_CDC_ReceivePacket+0x68>)
 800b52c:	7819      	ldrb	r1, [r3, #0]
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b534:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f005 f87d 	bl	8010638 <USBD_LL_PrepareReceive>
 800b53e:	e008      	b.n	800b552 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b540:	4b06      	ldr	r3, [pc, #24]	; (800b55c <USBD_CDC_ReceivePacket+0x68>)
 800b542:	7819      	ldrb	r1, [r3, #0]
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b54a:	2340      	movs	r3, #64	; 0x40
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f005 f873 	bl	8010638 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b552:	2300      	movs	r3, #0
}
 800b554:	4618      	mov	r0, r3
 800b556:	3710      	adds	r7, #16
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}
 800b55c:	20000098 	.word	0x20000098

0800b560 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b086      	sub	sp, #24
 800b564:	af00      	add	r7, sp, #0
 800b566:	60f8      	str	r0, [r7, #12]
 800b568:	60b9      	str	r1, [r7, #8]
 800b56a:	4613      	mov	r3, r2
 800b56c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d101      	bne.n	800b578 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b574:	2303      	movs	r3, #3
 800b576:	e01f      	b.n	800b5b8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2200      	movs	r2, #0
 800b57c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2200      	movs	r2, #0
 800b584:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2200      	movs	r2, #0
 800b58c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d003      	beq.n	800b59e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	68ba      	ldr	r2, [r7, #8]
 800b59a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	79fa      	ldrb	r2, [r7, #7]
 800b5aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b5ac:	68f8      	ldr	r0, [r7, #12]
 800b5ae:	f004 feed 	bl	801038c <USBD_LL_Init>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b5b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3718      	adds	r7, #24
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}

0800b5c0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b084      	sub	sp, #16
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d101      	bne.n	800b5d8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b5d4:	2303      	movs	r3, #3
 800b5d6:	e025      	b.n	800b624 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	683a      	ldr	r2, [r7, #0]
 800b5dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	32ae      	adds	r2, #174	; 0xae
 800b5ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d00f      	beq.n	800b614 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	32ae      	adds	r2, #174	; 0xae
 800b5fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b604:	f107 020e 	add.w	r2, r7, #14
 800b608:	4610      	mov	r0, r2
 800b60a:	4798      	blx	r3
 800b60c:	4602      	mov	r2, r0
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b61a:	1c5a      	adds	r2, r3, #1
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b622:	2300      	movs	r3, #0
}
 800b624:	4618      	mov	r0, r3
 800b626:	3710      	adds	r7, #16
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}

0800b62c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b082      	sub	sp, #8
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f004 fef5 	bl	8010424 <USBD_LL_Start>
 800b63a:	4603      	mov	r3, r0
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3708      	adds	r7, #8
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}

0800b644 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b644:	b480      	push	{r7}
 800b646:	b083      	sub	sp, #12
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b64c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b64e:	4618      	mov	r0, r3
 800b650:	370c      	adds	r7, #12
 800b652:	46bd      	mov	sp, r7
 800b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b658:	4770      	bx	lr

0800b65a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b65a:	b580      	push	{r7, lr}
 800b65c:	b084      	sub	sp, #16
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
 800b662:	460b      	mov	r3, r1
 800b664:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b666:	2300      	movs	r3, #0
 800b668:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b670:	2b00      	cmp	r3, #0
 800b672:	d009      	beq.n	800b688 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	78fa      	ldrb	r2, [r7, #3]
 800b67e:	4611      	mov	r1, r2
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	4798      	blx	r3
 800b684:	4603      	mov	r3, r0
 800b686:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b688:	7bfb      	ldrb	r3, [r7, #15]
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3710      	adds	r7, #16
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}

0800b692 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b692:	b580      	push	{r7, lr}
 800b694:	b084      	sub	sp, #16
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
 800b69a:	460b      	mov	r3, r1
 800b69c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	78fa      	ldrb	r2, [r7, #3]
 800b6ac:	4611      	mov	r1, r2
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	4798      	blx	r3
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d001      	beq.n	800b6bc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b6b8:	2303      	movs	r3, #3
 800b6ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b6bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3710      	adds	r7, #16
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}

0800b6c6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b6c6:	b580      	push	{r7, lr}
 800b6c8:	b084      	sub	sp, #16
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	6078      	str	r0, [r7, #4]
 800b6ce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b6d6:	6839      	ldr	r1, [r7, #0]
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f001 f932 	bl	800c942 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b6fa:	f003 031f 	and.w	r3, r3, #31
 800b6fe:	2b02      	cmp	r3, #2
 800b700:	d01a      	beq.n	800b738 <USBD_LL_SetupStage+0x72>
 800b702:	2b02      	cmp	r3, #2
 800b704:	d822      	bhi.n	800b74c <USBD_LL_SetupStage+0x86>
 800b706:	2b00      	cmp	r3, #0
 800b708:	d002      	beq.n	800b710 <USBD_LL_SetupStage+0x4a>
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	d00a      	beq.n	800b724 <USBD_LL_SetupStage+0x5e>
 800b70e:	e01d      	b.n	800b74c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b716:	4619      	mov	r1, r3
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f000 fb5f 	bl	800bddc <USBD_StdDevReq>
 800b71e:	4603      	mov	r3, r0
 800b720:	73fb      	strb	r3, [r7, #15]
      break;
 800b722:	e020      	b.n	800b766 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b72a:	4619      	mov	r1, r3
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f000 fbc7 	bl	800bec0 <USBD_StdItfReq>
 800b732:	4603      	mov	r3, r0
 800b734:	73fb      	strb	r3, [r7, #15]
      break;
 800b736:	e016      	b.n	800b766 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b73e:	4619      	mov	r1, r3
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f000 fc29 	bl	800bf98 <USBD_StdEPReq>
 800b746:	4603      	mov	r3, r0
 800b748:	73fb      	strb	r3, [r7, #15]
      break;
 800b74a:	e00c      	b.n	800b766 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b752:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b756:	b2db      	uxtb	r3, r3
 800b758:	4619      	mov	r1, r3
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f004 fec2 	bl	80104e4 <USBD_LL_StallEP>
 800b760:	4603      	mov	r3, r0
 800b762:	73fb      	strb	r3, [r7, #15]
      break;
 800b764:	bf00      	nop
  }

  return ret;
 800b766:	7bfb      	ldrb	r3, [r7, #15]
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3710      	adds	r7, #16
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}

0800b770 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b086      	sub	sp, #24
 800b774:	af00      	add	r7, sp, #0
 800b776:	60f8      	str	r0, [r7, #12]
 800b778:	460b      	mov	r3, r1
 800b77a:	607a      	str	r2, [r7, #4]
 800b77c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b77e:	2300      	movs	r3, #0
 800b780:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b782:	7afb      	ldrb	r3, [r7, #11]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d16e      	bne.n	800b866 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b78e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b796:	2b03      	cmp	r3, #3
 800b798:	f040 8098 	bne.w	800b8cc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	689a      	ldr	r2, [r3, #8]
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	68db      	ldr	r3, [r3, #12]
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d913      	bls.n	800b7d0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	689a      	ldr	r2, [r3, #8]
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	68db      	ldr	r3, [r3, #12]
 800b7b0:	1ad2      	subs	r2, r2, r3
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	68da      	ldr	r2, [r3, #12]
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	689b      	ldr	r3, [r3, #8]
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	bf28      	it	cs
 800b7c2:	4613      	movcs	r3, r2
 800b7c4:	461a      	mov	r2, r3
 800b7c6:	6879      	ldr	r1, [r7, #4]
 800b7c8:	68f8      	ldr	r0, [r7, #12]
 800b7ca:	f001 f9ae 	bl	800cb2a <USBD_CtlContinueRx>
 800b7ce:	e07d      	b.n	800b8cc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b7d6:	f003 031f 	and.w	r3, r3, #31
 800b7da:	2b02      	cmp	r3, #2
 800b7dc:	d014      	beq.n	800b808 <USBD_LL_DataOutStage+0x98>
 800b7de:	2b02      	cmp	r3, #2
 800b7e0:	d81d      	bhi.n	800b81e <USBD_LL_DataOutStage+0xae>
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d002      	beq.n	800b7ec <USBD_LL_DataOutStage+0x7c>
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	d003      	beq.n	800b7f2 <USBD_LL_DataOutStage+0x82>
 800b7ea:	e018      	b.n	800b81e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	75bb      	strb	r3, [r7, #22]
            break;
 800b7f0:	e018      	b.n	800b824 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b7f8:	b2db      	uxtb	r3, r3
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	68f8      	ldr	r0, [r7, #12]
 800b7fe:	f000 fa5e 	bl	800bcbe <USBD_CoreFindIF>
 800b802:	4603      	mov	r3, r0
 800b804:	75bb      	strb	r3, [r7, #22]
            break;
 800b806:	e00d      	b.n	800b824 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b80e:	b2db      	uxtb	r3, r3
 800b810:	4619      	mov	r1, r3
 800b812:	68f8      	ldr	r0, [r7, #12]
 800b814:	f000 fa60 	bl	800bcd8 <USBD_CoreFindEP>
 800b818:	4603      	mov	r3, r0
 800b81a:	75bb      	strb	r3, [r7, #22]
            break;
 800b81c:	e002      	b.n	800b824 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b81e:	2300      	movs	r3, #0
 800b820:	75bb      	strb	r3, [r7, #22]
            break;
 800b822:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b824:	7dbb      	ldrb	r3, [r7, #22]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d119      	bne.n	800b85e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b830:	b2db      	uxtb	r3, r3
 800b832:	2b03      	cmp	r3, #3
 800b834:	d113      	bne.n	800b85e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b836:	7dba      	ldrb	r2, [r7, #22]
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	32ae      	adds	r2, #174	; 0xae
 800b83c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b840:	691b      	ldr	r3, [r3, #16]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d00b      	beq.n	800b85e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b846:	7dba      	ldrb	r2, [r7, #22]
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b84e:	7dba      	ldrb	r2, [r7, #22]
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	32ae      	adds	r2, #174	; 0xae
 800b854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b858:	691b      	ldr	r3, [r3, #16]
 800b85a:	68f8      	ldr	r0, [r7, #12]
 800b85c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b85e:	68f8      	ldr	r0, [r7, #12]
 800b860:	f001 f974 	bl	800cb4c <USBD_CtlSendStatus>
 800b864:	e032      	b.n	800b8cc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b866:	7afb      	ldrb	r3, [r7, #11]
 800b868:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b86c:	b2db      	uxtb	r3, r3
 800b86e:	4619      	mov	r1, r3
 800b870:	68f8      	ldr	r0, [r7, #12]
 800b872:	f000 fa31 	bl	800bcd8 <USBD_CoreFindEP>
 800b876:	4603      	mov	r3, r0
 800b878:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b87a:	7dbb      	ldrb	r3, [r7, #22]
 800b87c:	2bff      	cmp	r3, #255	; 0xff
 800b87e:	d025      	beq.n	800b8cc <USBD_LL_DataOutStage+0x15c>
 800b880:	7dbb      	ldrb	r3, [r7, #22]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d122      	bne.n	800b8cc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b88c:	b2db      	uxtb	r3, r3
 800b88e:	2b03      	cmp	r3, #3
 800b890:	d117      	bne.n	800b8c2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b892:	7dba      	ldrb	r2, [r7, #22]
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	32ae      	adds	r2, #174	; 0xae
 800b898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b89c:	699b      	ldr	r3, [r3, #24]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d00f      	beq.n	800b8c2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b8a2:	7dba      	ldrb	r2, [r7, #22]
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b8aa:	7dba      	ldrb	r2, [r7, #22]
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	32ae      	adds	r2, #174	; 0xae
 800b8b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8b4:	699b      	ldr	r3, [r3, #24]
 800b8b6:	7afa      	ldrb	r2, [r7, #11]
 800b8b8:	4611      	mov	r1, r2
 800b8ba:	68f8      	ldr	r0, [r7, #12]
 800b8bc:	4798      	blx	r3
 800b8be:	4603      	mov	r3, r0
 800b8c0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b8c2:	7dfb      	ldrb	r3, [r7, #23]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d001      	beq.n	800b8cc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b8c8:	7dfb      	ldrb	r3, [r7, #23]
 800b8ca:	e000      	b.n	800b8ce <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b8cc:	2300      	movs	r3, #0
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3718      	adds	r7, #24
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}

0800b8d6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b8d6:	b580      	push	{r7, lr}
 800b8d8:	b086      	sub	sp, #24
 800b8da:	af00      	add	r7, sp, #0
 800b8dc:	60f8      	str	r0, [r7, #12]
 800b8de:	460b      	mov	r3, r1
 800b8e0:	607a      	str	r2, [r7, #4]
 800b8e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b8e4:	7afb      	ldrb	r3, [r7, #11]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d16f      	bne.n	800b9ca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	3314      	adds	r3, #20
 800b8ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b8f6:	2b02      	cmp	r3, #2
 800b8f8:	d15a      	bne.n	800b9b0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	689a      	ldr	r2, [r3, #8]
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	68db      	ldr	r3, [r3, #12]
 800b902:	429a      	cmp	r2, r3
 800b904:	d914      	bls.n	800b930 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	689a      	ldr	r2, [r3, #8]
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	68db      	ldr	r3, [r3, #12]
 800b90e:	1ad2      	subs	r2, r2, r3
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	689b      	ldr	r3, [r3, #8]
 800b918:	461a      	mov	r2, r3
 800b91a:	6879      	ldr	r1, [r7, #4]
 800b91c:	68f8      	ldr	r0, [r7, #12]
 800b91e:	f001 f8d6 	bl	800cace <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b922:	2300      	movs	r3, #0
 800b924:	2200      	movs	r2, #0
 800b926:	2100      	movs	r1, #0
 800b928:	68f8      	ldr	r0, [r7, #12]
 800b92a:	f004 fe85 	bl	8010638 <USBD_LL_PrepareReceive>
 800b92e:	e03f      	b.n	800b9b0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	68da      	ldr	r2, [r3, #12]
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	689b      	ldr	r3, [r3, #8]
 800b938:	429a      	cmp	r2, r3
 800b93a:	d11c      	bne.n	800b976 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	685a      	ldr	r2, [r3, #4]
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b944:	429a      	cmp	r2, r3
 800b946:	d316      	bcc.n	800b976 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	685a      	ldr	r2, [r3, #4]
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b952:	429a      	cmp	r2, r3
 800b954:	d20f      	bcs.n	800b976 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b956:	2200      	movs	r2, #0
 800b958:	2100      	movs	r1, #0
 800b95a:	68f8      	ldr	r0, [r7, #12]
 800b95c:	f001 f8b7 	bl	800cace <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	2200      	movs	r2, #0
 800b964:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b968:	2300      	movs	r3, #0
 800b96a:	2200      	movs	r2, #0
 800b96c:	2100      	movs	r1, #0
 800b96e:	68f8      	ldr	r0, [r7, #12]
 800b970:	f004 fe62 	bl	8010638 <USBD_LL_PrepareReceive>
 800b974:	e01c      	b.n	800b9b0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b97c:	b2db      	uxtb	r3, r3
 800b97e:	2b03      	cmp	r3, #3
 800b980:	d10f      	bne.n	800b9a2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b988:	68db      	ldr	r3, [r3, #12]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d009      	beq.n	800b9a2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	2200      	movs	r2, #0
 800b992:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b99c:	68db      	ldr	r3, [r3, #12]
 800b99e:	68f8      	ldr	r0, [r7, #12]
 800b9a0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9a2:	2180      	movs	r1, #128	; 0x80
 800b9a4:	68f8      	ldr	r0, [r7, #12]
 800b9a6:	f004 fd9d 	bl	80104e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b9aa:	68f8      	ldr	r0, [r7, #12]
 800b9ac:	f001 f8e1 	bl	800cb72 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d03a      	beq.n	800ba30 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b9ba:	68f8      	ldr	r0, [r7, #12]
 800b9bc:	f7ff fe42 	bl	800b644 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b9c8:	e032      	b.n	800ba30 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b9ca:	7afb      	ldrb	r3, [r7, #11]
 800b9cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b9d0:	b2db      	uxtb	r3, r3
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	68f8      	ldr	r0, [r7, #12]
 800b9d6:	f000 f97f 	bl	800bcd8 <USBD_CoreFindEP>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b9de:	7dfb      	ldrb	r3, [r7, #23]
 800b9e0:	2bff      	cmp	r3, #255	; 0xff
 800b9e2:	d025      	beq.n	800ba30 <USBD_LL_DataInStage+0x15a>
 800b9e4:	7dfb      	ldrb	r3, [r7, #23]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d122      	bne.n	800ba30 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9f0:	b2db      	uxtb	r3, r3
 800b9f2:	2b03      	cmp	r3, #3
 800b9f4:	d11c      	bne.n	800ba30 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b9f6:	7dfa      	ldrb	r2, [r7, #23]
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	32ae      	adds	r2, #174	; 0xae
 800b9fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba00:	695b      	ldr	r3, [r3, #20]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d014      	beq.n	800ba30 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ba06:	7dfa      	ldrb	r2, [r7, #23]
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ba0e:	7dfa      	ldrb	r2, [r7, #23]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	32ae      	adds	r2, #174	; 0xae
 800ba14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba18:	695b      	ldr	r3, [r3, #20]
 800ba1a:	7afa      	ldrb	r2, [r7, #11]
 800ba1c:	4611      	mov	r1, r2
 800ba1e:	68f8      	ldr	r0, [r7, #12]
 800ba20:	4798      	blx	r3
 800ba22:	4603      	mov	r3, r0
 800ba24:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ba26:	7dbb      	ldrb	r3, [r7, #22]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d001      	beq.n	800ba30 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ba2c:	7dbb      	ldrb	r3, [r7, #22]
 800ba2e:	e000      	b.n	800ba32 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ba30:	2300      	movs	r3, #0
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3718      	adds	r7, #24
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}

0800ba3a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ba3a:	b580      	push	{r7, lr}
 800ba3c:	b084      	sub	sp, #16
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba42:	2300      	movs	r3, #0
 800ba44:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2201      	movs	r2, #1
 800ba4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2200      	movs	r2, #0
 800ba52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2200      	movs	r2, #0
 800ba68:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d014      	beq.n	800baa0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d00e      	beq.n	800baa0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba88:	685b      	ldr	r3, [r3, #4]
 800ba8a:	687a      	ldr	r2, [r7, #4]
 800ba8c:	6852      	ldr	r2, [r2, #4]
 800ba8e:	b2d2      	uxtb	r2, r2
 800ba90:	4611      	mov	r1, r2
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	4798      	blx	r3
 800ba96:	4603      	mov	r3, r0
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d001      	beq.n	800baa0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ba9c:	2303      	movs	r3, #3
 800ba9e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800baa0:	2340      	movs	r3, #64	; 0x40
 800baa2:	2200      	movs	r2, #0
 800baa4:	2100      	movs	r1, #0
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f004 fcd7 	bl	801045a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2201      	movs	r2, #1
 800bab0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2240      	movs	r2, #64	; 0x40
 800bab8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800babc:	2340      	movs	r3, #64	; 0x40
 800babe:	2200      	movs	r2, #0
 800bac0:	2180      	movs	r1, #128	; 0x80
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f004 fcc9 	bl	801045a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2201      	movs	r2, #1
 800bacc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2240      	movs	r2, #64	; 0x40
 800bad2:	621a      	str	r2, [r3, #32]

  return ret;
 800bad4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3710      	adds	r7, #16
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}

0800bade <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bade:	b480      	push	{r7}
 800bae0:	b083      	sub	sp, #12
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	6078      	str	r0, [r7, #4]
 800bae6:	460b      	mov	r3, r1
 800bae8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	78fa      	ldrb	r2, [r7, #3]
 800baee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800baf0:	2300      	movs	r3, #0
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	370c      	adds	r7, #12
 800baf6:	46bd      	mov	sp, r7
 800baf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafc:	4770      	bx	lr

0800bafe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bafe:	b480      	push	{r7}
 800bb00:	b083      	sub	sp, #12
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb0c:	b2da      	uxtb	r2, r3
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2204      	movs	r2, #4
 800bb18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bb1c:	2300      	movs	r3, #0
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	370c      	adds	r7, #12
 800bb22:	46bd      	mov	sp, r7
 800bb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb28:	4770      	bx	lr

0800bb2a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bb2a:	b480      	push	{r7}
 800bb2c:	b083      	sub	sp, #12
 800bb2e:	af00      	add	r7, sp, #0
 800bb30:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb38:	b2db      	uxtb	r3, r3
 800bb3a:	2b04      	cmp	r3, #4
 800bb3c:	d106      	bne.n	800bb4c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bb44:	b2da      	uxtb	r2, r3
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bb4c:	2300      	movs	r3, #0
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	370c      	adds	r7, #12
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr

0800bb5a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bb5a:	b580      	push	{r7, lr}
 800bb5c:	b082      	sub	sp, #8
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb68:	b2db      	uxtb	r3, r3
 800bb6a:	2b03      	cmp	r3, #3
 800bb6c:	d110      	bne.n	800bb90 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d00b      	beq.n	800bb90 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb7e:	69db      	ldr	r3, [r3, #28]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d005      	beq.n	800bb90 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb8a:	69db      	ldr	r3, [r3, #28]
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bb90:	2300      	movs	r3, #0
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3708      	adds	r7, #8
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}

0800bb9a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bb9a:	b580      	push	{r7, lr}
 800bb9c:	b082      	sub	sp, #8
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
 800bba2:	460b      	mov	r3, r1
 800bba4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	32ae      	adds	r2, #174	; 0xae
 800bbb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d101      	bne.n	800bbbc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bbb8:	2303      	movs	r3, #3
 800bbba:	e01c      	b.n	800bbf6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbc2:	b2db      	uxtb	r3, r3
 800bbc4:	2b03      	cmp	r3, #3
 800bbc6:	d115      	bne.n	800bbf4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	32ae      	adds	r2, #174	; 0xae
 800bbd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbd6:	6a1b      	ldr	r3, [r3, #32]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d00b      	beq.n	800bbf4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	32ae      	adds	r2, #174	; 0xae
 800bbe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbea:	6a1b      	ldr	r3, [r3, #32]
 800bbec:	78fa      	ldrb	r2, [r7, #3]
 800bbee:	4611      	mov	r1, r2
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bbf4:	2300      	movs	r3, #0
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3708      	adds	r7, #8
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}

0800bbfe <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bbfe:	b580      	push	{r7, lr}
 800bc00:	b082      	sub	sp, #8
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	6078      	str	r0, [r7, #4]
 800bc06:	460b      	mov	r3, r1
 800bc08:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	32ae      	adds	r2, #174	; 0xae
 800bc14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d101      	bne.n	800bc20 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bc1c:	2303      	movs	r3, #3
 800bc1e:	e01c      	b.n	800bc5a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	2b03      	cmp	r3, #3
 800bc2a:	d115      	bne.n	800bc58 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	32ae      	adds	r2, #174	; 0xae
 800bc36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d00b      	beq.n	800bc58 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	32ae      	adds	r2, #174	; 0xae
 800bc4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc50:	78fa      	ldrb	r2, [r7, #3]
 800bc52:	4611      	mov	r1, r2
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc58:	2300      	movs	r3, #0
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3708      	adds	r7, #8
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}

0800bc62 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bc62:	b480      	push	{r7}
 800bc64:	b083      	sub	sp, #12
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bc6a:	2300      	movs	r3, #0
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	370c      	adds	r7, #12
 800bc70:	46bd      	mov	sp, r7
 800bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc76:	4770      	bx	lr

0800bc78 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b084      	sub	sp, #16
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bc80:	2300      	movs	r3, #0
 800bc82:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2201      	movs	r2, #1
 800bc88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d00e      	beq.n	800bcb4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc9c:	685b      	ldr	r3, [r3, #4]
 800bc9e:	687a      	ldr	r2, [r7, #4]
 800bca0:	6852      	ldr	r2, [r2, #4]
 800bca2:	b2d2      	uxtb	r2, r2
 800bca4:	4611      	mov	r1, r2
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	4798      	blx	r3
 800bcaa:	4603      	mov	r3, r0
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d001      	beq.n	800bcb4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bcb0:	2303      	movs	r3, #3
 800bcb2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bcb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3710      	adds	r7, #16
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}

0800bcbe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bcbe:	b480      	push	{r7}
 800bcc0:	b083      	sub	sp, #12
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	6078      	str	r0, [r7, #4]
 800bcc6:	460b      	mov	r3, r1
 800bcc8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bcca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	370c      	adds	r7, #12
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd6:	4770      	bx	lr

0800bcd8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b083      	sub	sp, #12
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	460b      	mov	r3, r1
 800bce2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bce4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	370c      	adds	r7, #12
 800bcea:	46bd      	mov	sp, r7
 800bcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf0:	4770      	bx	lr

0800bcf2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bcf2:	b580      	push	{r7, lr}
 800bcf4:	b086      	sub	sp, #24
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]
 800bcfa:	460b      	mov	r3, r1
 800bcfc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bd06:	2300      	movs	r3, #0
 800bd08:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	885b      	ldrh	r3, [r3, #2]
 800bd0e:	b29a      	uxth	r2, r3
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	781b      	ldrb	r3, [r3, #0]
 800bd14:	b29b      	uxth	r3, r3
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d920      	bls.n	800bd5c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	781b      	ldrb	r3, [r3, #0]
 800bd1e:	b29b      	uxth	r3, r3
 800bd20:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bd22:	e013      	b.n	800bd4c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bd24:	f107 030a 	add.w	r3, r7, #10
 800bd28:	4619      	mov	r1, r3
 800bd2a:	6978      	ldr	r0, [r7, #20]
 800bd2c:	f000 f81b 	bl	800bd66 <USBD_GetNextDesc>
 800bd30:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	785b      	ldrb	r3, [r3, #1]
 800bd36:	2b05      	cmp	r3, #5
 800bd38:	d108      	bne.n	800bd4c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	789b      	ldrb	r3, [r3, #2]
 800bd42:	78fa      	ldrb	r2, [r7, #3]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d008      	beq.n	800bd5a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	885b      	ldrh	r3, [r3, #2]
 800bd50:	b29a      	uxth	r2, r3
 800bd52:	897b      	ldrh	r3, [r7, #10]
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d8e5      	bhi.n	800bd24 <USBD_GetEpDesc+0x32>
 800bd58:	e000      	b.n	800bd5c <USBD_GetEpDesc+0x6a>
          break;
 800bd5a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bd5c:	693b      	ldr	r3, [r7, #16]
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3718      	adds	r7, #24
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}

0800bd66 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bd66:	b480      	push	{r7}
 800bd68:	b085      	sub	sp, #20
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	6078      	str	r0, [r7, #4]
 800bd6e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	881a      	ldrh	r2, [r3, #0]
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	781b      	ldrb	r3, [r3, #0]
 800bd7c:	b29b      	uxth	r3, r3
 800bd7e:	4413      	add	r3, r2
 800bd80:	b29a      	uxth	r2, r3
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	781b      	ldrb	r3, [r3, #0]
 800bd8a:	461a      	mov	r2, r3
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	4413      	add	r3, r2
 800bd90:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bd92:	68fb      	ldr	r3, [r7, #12]
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	3714      	adds	r7, #20
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr

0800bda0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b087      	sub	sp, #28
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	781b      	ldrb	r3, [r3, #0]
 800bdb0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	3301      	adds	r3, #1
 800bdb6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	781b      	ldrb	r3, [r3, #0]
 800bdbc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bdbe:	8a3b      	ldrh	r3, [r7, #16]
 800bdc0:	021b      	lsls	r3, r3, #8
 800bdc2:	b21a      	sxth	r2, r3
 800bdc4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bdc8:	4313      	orrs	r3, r2
 800bdca:	b21b      	sxth	r3, r3
 800bdcc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bdce:	89fb      	ldrh	r3, [r7, #14]
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	371c      	adds	r7, #28
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr

0800bddc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b084      	sub	sp, #16
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bde6:	2300      	movs	r3, #0
 800bde8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	781b      	ldrb	r3, [r3, #0]
 800bdee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bdf2:	2b40      	cmp	r3, #64	; 0x40
 800bdf4:	d005      	beq.n	800be02 <USBD_StdDevReq+0x26>
 800bdf6:	2b40      	cmp	r3, #64	; 0x40
 800bdf8:	d857      	bhi.n	800beaa <USBD_StdDevReq+0xce>
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d00f      	beq.n	800be1e <USBD_StdDevReq+0x42>
 800bdfe:	2b20      	cmp	r3, #32
 800be00:	d153      	bne.n	800beaa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	32ae      	adds	r2, #174	; 0xae
 800be0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be10:	689b      	ldr	r3, [r3, #8]
 800be12:	6839      	ldr	r1, [r7, #0]
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	4798      	blx	r3
 800be18:	4603      	mov	r3, r0
 800be1a:	73fb      	strb	r3, [r7, #15]
      break;
 800be1c:	e04a      	b.n	800beb4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	785b      	ldrb	r3, [r3, #1]
 800be22:	2b09      	cmp	r3, #9
 800be24:	d83b      	bhi.n	800be9e <USBD_StdDevReq+0xc2>
 800be26:	a201      	add	r2, pc, #4	; (adr r2, 800be2c <USBD_StdDevReq+0x50>)
 800be28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be2c:	0800be81 	.word	0x0800be81
 800be30:	0800be95 	.word	0x0800be95
 800be34:	0800be9f 	.word	0x0800be9f
 800be38:	0800be8b 	.word	0x0800be8b
 800be3c:	0800be9f 	.word	0x0800be9f
 800be40:	0800be5f 	.word	0x0800be5f
 800be44:	0800be55 	.word	0x0800be55
 800be48:	0800be9f 	.word	0x0800be9f
 800be4c:	0800be77 	.word	0x0800be77
 800be50:	0800be69 	.word	0x0800be69
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800be54:	6839      	ldr	r1, [r7, #0]
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f000 fa3c 	bl	800c2d4 <USBD_GetDescriptor>
          break;
 800be5c:	e024      	b.n	800bea8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800be5e:	6839      	ldr	r1, [r7, #0]
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f000 fbcb 	bl	800c5fc <USBD_SetAddress>
          break;
 800be66:	e01f      	b.n	800bea8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800be68:	6839      	ldr	r1, [r7, #0]
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f000 fc0a 	bl	800c684 <USBD_SetConfig>
 800be70:	4603      	mov	r3, r0
 800be72:	73fb      	strb	r3, [r7, #15]
          break;
 800be74:	e018      	b.n	800bea8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800be76:	6839      	ldr	r1, [r7, #0]
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f000 fcad 	bl	800c7d8 <USBD_GetConfig>
          break;
 800be7e:	e013      	b.n	800bea8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800be80:	6839      	ldr	r1, [r7, #0]
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f000 fcde 	bl	800c844 <USBD_GetStatus>
          break;
 800be88:	e00e      	b.n	800bea8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800be8a:	6839      	ldr	r1, [r7, #0]
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f000 fd0d 	bl	800c8ac <USBD_SetFeature>
          break;
 800be92:	e009      	b.n	800bea8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800be94:	6839      	ldr	r1, [r7, #0]
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 fd31 	bl	800c8fe <USBD_ClrFeature>
          break;
 800be9c:	e004      	b.n	800bea8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800be9e:	6839      	ldr	r1, [r7, #0]
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f000 fd88 	bl	800c9b6 <USBD_CtlError>
          break;
 800bea6:	bf00      	nop
      }
      break;
 800bea8:	e004      	b.n	800beb4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800beaa:	6839      	ldr	r1, [r7, #0]
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f000 fd82 	bl	800c9b6 <USBD_CtlError>
      break;
 800beb2:	bf00      	nop
  }

  return ret;
 800beb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3710      	adds	r7, #16
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop

0800bec0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800beca:	2300      	movs	r3, #0
 800becc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bed6:	2b40      	cmp	r3, #64	; 0x40
 800bed8:	d005      	beq.n	800bee6 <USBD_StdItfReq+0x26>
 800beda:	2b40      	cmp	r3, #64	; 0x40
 800bedc:	d852      	bhi.n	800bf84 <USBD_StdItfReq+0xc4>
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d001      	beq.n	800bee6 <USBD_StdItfReq+0x26>
 800bee2:	2b20      	cmp	r3, #32
 800bee4:	d14e      	bne.n	800bf84 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800beec:	b2db      	uxtb	r3, r3
 800beee:	3b01      	subs	r3, #1
 800bef0:	2b02      	cmp	r3, #2
 800bef2:	d840      	bhi.n	800bf76 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	889b      	ldrh	r3, [r3, #4]
 800bef8:	b2db      	uxtb	r3, r3
 800befa:	2b01      	cmp	r3, #1
 800befc:	d836      	bhi.n	800bf6c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	889b      	ldrh	r3, [r3, #4]
 800bf02:	b2db      	uxtb	r3, r3
 800bf04:	4619      	mov	r1, r3
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f7ff fed9 	bl	800bcbe <USBD_CoreFindIF>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf10:	7bbb      	ldrb	r3, [r7, #14]
 800bf12:	2bff      	cmp	r3, #255	; 0xff
 800bf14:	d01d      	beq.n	800bf52 <USBD_StdItfReq+0x92>
 800bf16:	7bbb      	ldrb	r3, [r7, #14]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d11a      	bne.n	800bf52 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bf1c:	7bba      	ldrb	r2, [r7, #14]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	32ae      	adds	r2, #174	; 0xae
 800bf22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf26:	689b      	ldr	r3, [r3, #8]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d00f      	beq.n	800bf4c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bf2c:	7bba      	ldrb	r2, [r7, #14]
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bf34:	7bba      	ldrb	r2, [r7, #14]
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	32ae      	adds	r2, #174	; 0xae
 800bf3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf3e:	689b      	ldr	r3, [r3, #8]
 800bf40:	6839      	ldr	r1, [r7, #0]
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	4798      	blx	r3
 800bf46:	4603      	mov	r3, r0
 800bf48:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf4a:	e004      	b.n	800bf56 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bf4c:	2303      	movs	r3, #3
 800bf4e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf50:	e001      	b.n	800bf56 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bf52:	2303      	movs	r3, #3
 800bf54:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	88db      	ldrh	r3, [r3, #6]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d110      	bne.n	800bf80 <USBD_StdItfReq+0xc0>
 800bf5e:	7bfb      	ldrb	r3, [r7, #15]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d10d      	bne.n	800bf80 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f000 fdf1 	bl	800cb4c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bf6a:	e009      	b.n	800bf80 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bf6c:	6839      	ldr	r1, [r7, #0]
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 fd21 	bl	800c9b6 <USBD_CtlError>
          break;
 800bf74:	e004      	b.n	800bf80 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bf76:	6839      	ldr	r1, [r7, #0]
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 fd1c 	bl	800c9b6 <USBD_CtlError>
          break;
 800bf7e:	e000      	b.n	800bf82 <USBD_StdItfReq+0xc2>
          break;
 800bf80:	bf00      	nop
      }
      break;
 800bf82:	e004      	b.n	800bf8e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bf84:	6839      	ldr	r1, [r7, #0]
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f000 fd15 	bl	800c9b6 <USBD_CtlError>
      break;
 800bf8c:	bf00      	nop
  }

  return ret;
 800bf8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	3710      	adds	r7, #16
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}

0800bf98 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b084      	sub	sp, #16
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
 800bfa0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	889b      	ldrh	r3, [r3, #4]
 800bfaa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bfb4:	2b40      	cmp	r3, #64	; 0x40
 800bfb6:	d007      	beq.n	800bfc8 <USBD_StdEPReq+0x30>
 800bfb8:	2b40      	cmp	r3, #64	; 0x40
 800bfba:	f200 817f 	bhi.w	800c2bc <USBD_StdEPReq+0x324>
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d02a      	beq.n	800c018 <USBD_StdEPReq+0x80>
 800bfc2:	2b20      	cmp	r3, #32
 800bfc4:	f040 817a 	bne.w	800c2bc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bfc8:	7bbb      	ldrb	r3, [r7, #14]
 800bfca:	4619      	mov	r1, r3
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f7ff fe83 	bl	800bcd8 <USBD_CoreFindEP>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bfd6:	7b7b      	ldrb	r3, [r7, #13]
 800bfd8:	2bff      	cmp	r3, #255	; 0xff
 800bfda:	f000 8174 	beq.w	800c2c6 <USBD_StdEPReq+0x32e>
 800bfde:	7b7b      	ldrb	r3, [r7, #13]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	f040 8170 	bne.w	800c2c6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bfe6:	7b7a      	ldrb	r2, [r7, #13]
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bfee:	7b7a      	ldrb	r2, [r7, #13]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	32ae      	adds	r2, #174	; 0xae
 800bff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bff8:	689b      	ldr	r3, [r3, #8]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	f000 8163 	beq.w	800c2c6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c000:	7b7a      	ldrb	r2, [r7, #13]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	32ae      	adds	r2, #174	; 0xae
 800c006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c00a:	689b      	ldr	r3, [r3, #8]
 800c00c:	6839      	ldr	r1, [r7, #0]
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	4798      	blx	r3
 800c012:	4603      	mov	r3, r0
 800c014:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c016:	e156      	b.n	800c2c6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	785b      	ldrb	r3, [r3, #1]
 800c01c:	2b03      	cmp	r3, #3
 800c01e:	d008      	beq.n	800c032 <USBD_StdEPReq+0x9a>
 800c020:	2b03      	cmp	r3, #3
 800c022:	f300 8145 	bgt.w	800c2b0 <USBD_StdEPReq+0x318>
 800c026:	2b00      	cmp	r3, #0
 800c028:	f000 809b 	beq.w	800c162 <USBD_StdEPReq+0x1ca>
 800c02c:	2b01      	cmp	r3, #1
 800c02e:	d03c      	beq.n	800c0aa <USBD_StdEPReq+0x112>
 800c030:	e13e      	b.n	800c2b0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c038:	b2db      	uxtb	r3, r3
 800c03a:	2b02      	cmp	r3, #2
 800c03c:	d002      	beq.n	800c044 <USBD_StdEPReq+0xac>
 800c03e:	2b03      	cmp	r3, #3
 800c040:	d016      	beq.n	800c070 <USBD_StdEPReq+0xd8>
 800c042:	e02c      	b.n	800c09e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c044:	7bbb      	ldrb	r3, [r7, #14]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d00d      	beq.n	800c066 <USBD_StdEPReq+0xce>
 800c04a:	7bbb      	ldrb	r3, [r7, #14]
 800c04c:	2b80      	cmp	r3, #128	; 0x80
 800c04e:	d00a      	beq.n	800c066 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c050:	7bbb      	ldrb	r3, [r7, #14]
 800c052:	4619      	mov	r1, r3
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f004 fa45 	bl	80104e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c05a:	2180      	movs	r1, #128	; 0x80
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f004 fa41 	bl	80104e4 <USBD_LL_StallEP>
 800c062:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c064:	e020      	b.n	800c0a8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c066:	6839      	ldr	r1, [r7, #0]
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f000 fca4 	bl	800c9b6 <USBD_CtlError>
              break;
 800c06e:	e01b      	b.n	800c0a8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	885b      	ldrh	r3, [r3, #2]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d10e      	bne.n	800c096 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c078:	7bbb      	ldrb	r3, [r7, #14]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d00b      	beq.n	800c096 <USBD_StdEPReq+0xfe>
 800c07e:	7bbb      	ldrb	r3, [r7, #14]
 800c080:	2b80      	cmp	r3, #128	; 0x80
 800c082:	d008      	beq.n	800c096 <USBD_StdEPReq+0xfe>
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	88db      	ldrh	r3, [r3, #6]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d104      	bne.n	800c096 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c08c:	7bbb      	ldrb	r3, [r7, #14]
 800c08e:	4619      	mov	r1, r3
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f004 fa27 	bl	80104e4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f000 fd58 	bl	800cb4c <USBD_CtlSendStatus>

              break;
 800c09c:	e004      	b.n	800c0a8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c09e:	6839      	ldr	r1, [r7, #0]
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f000 fc88 	bl	800c9b6 <USBD_CtlError>
              break;
 800c0a6:	bf00      	nop
          }
          break;
 800c0a8:	e107      	b.n	800c2ba <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0b0:	b2db      	uxtb	r3, r3
 800c0b2:	2b02      	cmp	r3, #2
 800c0b4:	d002      	beq.n	800c0bc <USBD_StdEPReq+0x124>
 800c0b6:	2b03      	cmp	r3, #3
 800c0b8:	d016      	beq.n	800c0e8 <USBD_StdEPReq+0x150>
 800c0ba:	e04b      	b.n	800c154 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0bc:	7bbb      	ldrb	r3, [r7, #14]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d00d      	beq.n	800c0de <USBD_StdEPReq+0x146>
 800c0c2:	7bbb      	ldrb	r3, [r7, #14]
 800c0c4:	2b80      	cmp	r3, #128	; 0x80
 800c0c6:	d00a      	beq.n	800c0de <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0c8:	7bbb      	ldrb	r3, [r7, #14]
 800c0ca:	4619      	mov	r1, r3
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f004 fa09 	bl	80104e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c0d2:	2180      	movs	r1, #128	; 0x80
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f004 fa05 	bl	80104e4 <USBD_LL_StallEP>
 800c0da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c0dc:	e040      	b.n	800c160 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c0de:	6839      	ldr	r1, [r7, #0]
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f000 fc68 	bl	800c9b6 <USBD_CtlError>
              break;
 800c0e6:	e03b      	b.n	800c160 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	885b      	ldrh	r3, [r3, #2]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d136      	bne.n	800c15e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c0f0:	7bbb      	ldrb	r3, [r7, #14]
 800c0f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d004      	beq.n	800c104 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c0fa:	7bbb      	ldrb	r3, [r7, #14]
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f004 fa0f 	bl	8010522 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f000 fd21 	bl	800cb4c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c10a:	7bbb      	ldrb	r3, [r7, #14]
 800c10c:	4619      	mov	r1, r3
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f7ff fde2 	bl	800bcd8 <USBD_CoreFindEP>
 800c114:	4603      	mov	r3, r0
 800c116:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c118:	7b7b      	ldrb	r3, [r7, #13]
 800c11a:	2bff      	cmp	r3, #255	; 0xff
 800c11c:	d01f      	beq.n	800c15e <USBD_StdEPReq+0x1c6>
 800c11e:	7b7b      	ldrb	r3, [r7, #13]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d11c      	bne.n	800c15e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c124:	7b7a      	ldrb	r2, [r7, #13]
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c12c:	7b7a      	ldrb	r2, [r7, #13]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	32ae      	adds	r2, #174	; 0xae
 800c132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c136:	689b      	ldr	r3, [r3, #8]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d010      	beq.n	800c15e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c13c:	7b7a      	ldrb	r2, [r7, #13]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	32ae      	adds	r2, #174	; 0xae
 800c142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c146:	689b      	ldr	r3, [r3, #8]
 800c148:	6839      	ldr	r1, [r7, #0]
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	4798      	blx	r3
 800c14e:	4603      	mov	r3, r0
 800c150:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c152:	e004      	b.n	800c15e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c154:	6839      	ldr	r1, [r7, #0]
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f000 fc2d 	bl	800c9b6 <USBD_CtlError>
              break;
 800c15c:	e000      	b.n	800c160 <USBD_StdEPReq+0x1c8>
              break;
 800c15e:	bf00      	nop
          }
          break;
 800c160:	e0ab      	b.n	800c2ba <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	2b02      	cmp	r3, #2
 800c16c:	d002      	beq.n	800c174 <USBD_StdEPReq+0x1dc>
 800c16e:	2b03      	cmp	r3, #3
 800c170:	d032      	beq.n	800c1d8 <USBD_StdEPReq+0x240>
 800c172:	e097      	b.n	800c2a4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c174:	7bbb      	ldrb	r3, [r7, #14]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d007      	beq.n	800c18a <USBD_StdEPReq+0x1f2>
 800c17a:	7bbb      	ldrb	r3, [r7, #14]
 800c17c:	2b80      	cmp	r3, #128	; 0x80
 800c17e:	d004      	beq.n	800c18a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c180:	6839      	ldr	r1, [r7, #0]
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f000 fc17 	bl	800c9b6 <USBD_CtlError>
                break;
 800c188:	e091      	b.n	800c2ae <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c18a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	da0b      	bge.n	800c1aa <USBD_StdEPReq+0x212>
 800c192:	7bbb      	ldrb	r3, [r7, #14]
 800c194:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c198:	4613      	mov	r3, r2
 800c19a:	009b      	lsls	r3, r3, #2
 800c19c:	4413      	add	r3, r2
 800c19e:	009b      	lsls	r3, r3, #2
 800c1a0:	3310      	adds	r3, #16
 800c1a2:	687a      	ldr	r2, [r7, #4]
 800c1a4:	4413      	add	r3, r2
 800c1a6:	3304      	adds	r3, #4
 800c1a8:	e00b      	b.n	800c1c2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c1aa:	7bbb      	ldrb	r3, [r7, #14]
 800c1ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1b0:	4613      	mov	r3, r2
 800c1b2:	009b      	lsls	r3, r3, #2
 800c1b4:	4413      	add	r3, r2
 800c1b6:	009b      	lsls	r3, r3, #2
 800c1b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	4413      	add	r3, r2
 800c1c0:	3304      	adds	r3, #4
 800c1c2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	2202      	movs	r2, #2
 800c1ce:	4619      	mov	r1, r3
 800c1d0:	6878      	ldr	r0, [r7, #4]
 800c1d2:	f000 fc61 	bl	800ca98 <USBD_CtlSendData>
              break;
 800c1d6:	e06a      	b.n	800c2ae <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c1d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	da11      	bge.n	800c204 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c1e0:	7bbb      	ldrb	r3, [r7, #14]
 800c1e2:	f003 020f 	and.w	r2, r3, #15
 800c1e6:	6879      	ldr	r1, [r7, #4]
 800c1e8:	4613      	mov	r3, r2
 800c1ea:	009b      	lsls	r3, r3, #2
 800c1ec:	4413      	add	r3, r2
 800c1ee:	009b      	lsls	r3, r3, #2
 800c1f0:	440b      	add	r3, r1
 800c1f2:	3324      	adds	r3, #36	; 0x24
 800c1f4:	881b      	ldrh	r3, [r3, #0]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d117      	bne.n	800c22a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c1fa:	6839      	ldr	r1, [r7, #0]
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f000 fbda 	bl	800c9b6 <USBD_CtlError>
                  break;
 800c202:	e054      	b.n	800c2ae <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c204:	7bbb      	ldrb	r3, [r7, #14]
 800c206:	f003 020f 	and.w	r2, r3, #15
 800c20a:	6879      	ldr	r1, [r7, #4]
 800c20c:	4613      	mov	r3, r2
 800c20e:	009b      	lsls	r3, r3, #2
 800c210:	4413      	add	r3, r2
 800c212:	009b      	lsls	r3, r3, #2
 800c214:	440b      	add	r3, r1
 800c216:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c21a:	881b      	ldrh	r3, [r3, #0]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d104      	bne.n	800c22a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c220:	6839      	ldr	r1, [r7, #0]
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f000 fbc7 	bl	800c9b6 <USBD_CtlError>
                  break;
 800c228:	e041      	b.n	800c2ae <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c22a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	da0b      	bge.n	800c24a <USBD_StdEPReq+0x2b2>
 800c232:	7bbb      	ldrb	r3, [r7, #14]
 800c234:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c238:	4613      	mov	r3, r2
 800c23a:	009b      	lsls	r3, r3, #2
 800c23c:	4413      	add	r3, r2
 800c23e:	009b      	lsls	r3, r3, #2
 800c240:	3310      	adds	r3, #16
 800c242:	687a      	ldr	r2, [r7, #4]
 800c244:	4413      	add	r3, r2
 800c246:	3304      	adds	r3, #4
 800c248:	e00b      	b.n	800c262 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c24a:	7bbb      	ldrb	r3, [r7, #14]
 800c24c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c250:	4613      	mov	r3, r2
 800c252:	009b      	lsls	r3, r3, #2
 800c254:	4413      	add	r3, r2
 800c256:	009b      	lsls	r3, r3, #2
 800c258:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c25c:	687a      	ldr	r2, [r7, #4]
 800c25e:	4413      	add	r3, r2
 800c260:	3304      	adds	r3, #4
 800c262:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c264:	7bbb      	ldrb	r3, [r7, #14]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d002      	beq.n	800c270 <USBD_StdEPReq+0x2d8>
 800c26a:	7bbb      	ldrb	r3, [r7, #14]
 800c26c:	2b80      	cmp	r3, #128	; 0x80
 800c26e:	d103      	bne.n	800c278 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	2200      	movs	r2, #0
 800c274:	601a      	str	r2, [r3, #0]
 800c276:	e00e      	b.n	800c296 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c278:	7bbb      	ldrb	r3, [r7, #14]
 800c27a:	4619      	mov	r1, r3
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f004 f96f 	bl	8010560 <USBD_LL_IsStallEP>
 800c282:	4603      	mov	r3, r0
 800c284:	2b00      	cmp	r3, #0
 800c286:	d003      	beq.n	800c290 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	2201      	movs	r2, #1
 800c28c:	601a      	str	r2, [r3, #0]
 800c28e:	e002      	b.n	800c296 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	2200      	movs	r2, #0
 800c294:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	2202      	movs	r2, #2
 800c29a:	4619      	mov	r1, r3
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f000 fbfb 	bl	800ca98 <USBD_CtlSendData>
              break;
 800c2a2:	e004      	b.n	800c2ae <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c2a4:	6839      	ldr	r1, [r7, #0]
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f000 fb85 	bl	800c9b6 <USBD_CtlError>
              break;
 800c2ac:	bf00      	nop
          }
          break;
 800c2ae:	e004      	b.n	800c2ba <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c2b0:	6839      	ldr	r1, [r7, #0]
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f000 fb7f 	bl	800c9b6 <USBD_CtlError>
          break;
 800c2b8:	bf00      	nop
      }
      break;
 800c2ba:	e005      	b.n	800c2c8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c2bc:	6839      	ldr	r1, [r7, #0]
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f000 fb79 	bl	800c9b6 <USBD_CtlError>
      break;
 800c2c4:	e000      	b.n	800c2c8 <USBD_StdEPReq+0x330>
      break;
 800c2c6:	bf00      	nop
  }

  return ret;
 800c2c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3710      	adds	r7, #16
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
	...

0800c2d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b084      	sub	sp, #16
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	885b      	ldrh	r3, [r3, #2]
 800c2ee:	0a1b      	lsrs	r3, r3, #8
 800c2f0:	b29b      	uxth	r3, r3
 800c2f2:	3b01      	subs	r3, #1
 800c2f4:	2b0e      	cmp	r3, #14
 800c2f6:	f200 8152 	bhi.w	800c59e <USBD_GetDescriptor+0x2ca>
 800c2fa:	a201      	add	r2, pc, #4	; (adr r2, 800c300 <USBD_GetDescriptor+0x2c>)
 800c2fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c300:	0800c371 	.word	0x0800c371
 800c304:	0800c389 	.word	0x0800c389
 800c308:	0800c3c9 	.word	0x0800c3c9
 800c30c:	0800c59f 	.word	0x0800c59f
 800c310:	0800c59f 	.word	0x0800c59f
 800c314:	0800c53f 	.word	0x0800c53f
 800c318:	0800c56b 	.word	0x0800c56b
 800c31c:	0800c59f 	.word	0x0800c59f
 800c320:	0800c59f 	.word	0x0800c59f
 800c324:	0800c59f 	.word	0x0800c59f
 800c328:	0800c59f 	.word	0x0800c59f
 800c32c:	0800c59f 	.word	0x0800c59f
 800c330:	0800c59f 	.word	0x0800c59f
 800c334:	0800c59f 	.word	0x0800c59f
 800c338:	0800c33d 	.word	0x0800c33d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c342:	69db      	ldr	r3, [r3, #28]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d00b      	beq.n	800c360 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c34e:	69db      	ldr	r3, [r3, #28]
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	7c12      	ldrb	r2, [r2, #16]
 800c354:	f107 0108 	add.w	r1, r7, #8
 800c358:	4610      	mov	r0, r2
 800c35a:	4798      	blx	r3
 800c35c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c35e:	e126      	b.n	800c5ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c360:	6839      	ldr	r1, [r7, #0]
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f000 fb27 	bl	800c9b6 <USBD_CtlError>
        err++;
 800c368:	7afb      	ldrb	r3, [r7, #11]
 800c36a:	3301      	adds	r3, #1
 800c36c:	72fb      	strb	r3, [r7, #11]
      break;
 800c36e:	e11e      	b.n	800c5ae <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	687a      	ldr	r2, [r7, #4]
 800c37a:	7c12      	ldrb	r2, [r2, #16]
 800c37c:	f107 0108 	add.w	r1, r7, #8
 800c380:	4610      	mov	r0, r2
 800c382:	4798      	blx	r3
 800c384:	60f8      	str	r0, [r7, #12]
      break;
 800c386:	e112      	b.n	800c5ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	7c1b      	ldrb	r3, [r3, #16]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d10d      	bne.n	800c3ac <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c398:	f107 0208 	add.w	r2, r7, #8
 800c39c:	4610      	mov	r0, r2
 800c39e:	4798      	blx	r3
 800c3a0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	3301      	adds	r3, #1
 800c3a6:	2202      	movs	r2, #2
 800c3a8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c3aa:	e100      	b.n	800c5ae <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3b4:	f107 0208 	add.w	r2, r7, #8
 800c3b8:	4610      	mov	r0, r2
 800c3ba:	4798      	blx	r3
 800c3bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	3301      	adds	r3, #1
 800c3c2:	2202      	movs	r2, #2
 800c3c4:	701a      	strb	r2, [r3, #0]
      break;
 800c3c6:	e0f2      	b.n	800c5ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	885b      	ldrh	r3, [r3, #2]
 800c3cc:	b2db      	uxtb	r3, r3
 800c3ce:	2b05      	cmp	r3, #5
 800c3d0:	f200 80ac 	bhi.w	800c52c <USBD_GetDescriptor+0x258>
 800c3d4:	a201      	add	r2, pc, #4	; (adr r2, 800c3dc <USBD_GetDescriptor+0x108>)
 800c3d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3da:	bf00      	nop
 800c3dc:	0800c3f5 	.word	0x0800c3f5
 800c3e0:	0800c429 	.word	0x0800c429
 800c3e4:	0800c45d 	.word	0x0800c45d
 800c3e8:	0800c491 	.word	0x0800c491
 800c3ec:	0800c4c5 	.word	0x0800c4c5
 800c3f0:	0800c4f9 	.word	0x0800c4f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3fa:	685b      	ldr	r3, [r3, #4]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d00b      	beq.n	800c418 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c406:	685b      	ldr	r3, [r3, #4]
 800c408:	687a      	ldr	r2, [r7, #4]
 800c40a:	7c12      	ldrb	r2, [r2, #16]
 800c40c:	f107 0108 	add.w	r1, r7, #8
 800c410:	4610      	mov	r0, r2
 800c412:	4798      	blx	r3
 800c414:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c416:	e091      	b.n	800c53c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c418:	6839      	ldr	r1, [r7, #0]
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f000 facb 	bl	800c9b6 <USBD_CtlError>
            err++;
 800c420:	7afb      	ldrb	r3, [r7, #11]
 800c422:	3301      	adds	r3, #1
 800c424:	72fb      	strb	r3, [r7, #11]
          break;
 800c426:	e089      	b.n	800c53c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c42e:	689b      	ldr	r3, [r3, #8]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d00b      	beq.n	800c44c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c43a:	689b      	ldr	r3, [r3, #8]
 800c43c:	687a      	ldr	r2, [r7, #4]
 800c43e:	7c12      	ldrb	r2, [r2, #16]
 800c440:	f107 0108 	add.w	r1, r7, #8
 800c444:	4610      	mov	r0, r2
 800c446:	4798      	blx	r3
 800c448:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c44a:	e077      	b.n	800c53c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c44c:	6839      	ldr	r1, [r7, #0]
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f000 fab1 	bl	800c9b6 <USBD_CtlError>
            err++;
 800c454:	7afb      	ldrb	r3, [r7, #11]
 800c456:	3301      	adds	r3, #1
 800c458:	72fb      	strb	r3, [r7, #11]
          break;
 800c45a:	e06f      	b.n	800c53c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c462:	68db      	ldr	r3, [r3, #12]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d00b      	beq.n	800c480 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c46e:	68db      	ldr	r3, [r3, #12]
 800c470:	687a      	ldr	r2, [r7, #4]
 800c472:	7c12      	ldrb	r2, [r2, #16]
 800c474:	f107 0108 	add.w	r1, r7, #8
 800c478:	4610      	mov	r0, r2
 800c47a:	4798      	blx	r3
 800c47c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c47e:	e05d      	b.n	800c53c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c480:	6839      	ldr	r1, [r7, #0]
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f000 fa97 	bl	800c9b6 <USBD_CtlError>
            err++;
 800c488:	7afb      	ldrb	r3, [r7, #11]
 800c48a:	3301      	adds	r3, #1
 800c48c:	72fb      	strb	r3, [r7, #11]
          break;
 800c48e:	e055      	b.n	800c53c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c496:	691b      	ldr	r3, [r3, #16]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d00b      	beq.n	800c4b4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4a2:	691b      	ldr	r3, [r3, #16]
 800c4a4:	687a      	ldr	r2, [r7, #4]
 800c4a6:	7c12      	ldrb	r2, [r2, #16]
 800c4a8:	f107 0108 	add.w	r1, r7, #8
 800c4ac:	4610      	mov	r0, r2
 800c4ae:	4798      	blx	r3
 800c4b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4b2:	e043      	b.n	800c53c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c4b4:	6839      	ldr	r1, [r7, #0]
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f000 fa7d 	bl	800c9b6 <USBD_CtlError>
            err++;
 800c4bc:	7afb      	ldrb	r3, [r7, #11]
 800c4be:	3301      	adds	r3, #1
 800c4c0:	72fb      	strb	r3, [r7, #11]
          break;
 800c4c2:	e03b      	b.n	800c53c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4ca:	695b      	ldr	r3, [r3, #20]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d00b      	beq.n	800c4e8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4d6:	695b      	ldr	r3, [r3, #20]
 800c4d8:	687a      	ldr	r2, [r7, #4]
 800c4da:	7c12      	ldrb	r2, [r2, #16]
 800c4dc:	f107 0108 	add.w	r1, r7, #8
 800c4e0:	4610      	mov	r0, r2
 800c4e2:	4798      	blx	r3
 800c4e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4e6:	e029      	b.n	800c53c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c4e8:	6839      	ldr	r1, [r7, #0]
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f000 fa63 	bl	800c9b6 <USBD_CtlError>
            err++;
 800c4f0:	7afb      	ldrb	r3, [r7, #11]
 800c4f2:	3301      	adds	r3, #1
 800c4f4:	72fb      	strb	r3, [r7, #11]
          break;
 800c4f6:	e021      	b.n	800c53c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4fe:	699b      	ldr	r3, [r3, #24]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d00b      	beq.n	800c51c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c50a:	699b      	ldr	r3, [r3, #24]
 800c50c:	687a      	ldr	r2, [r7, #4]
 800c50e:	7c12      	ldrb	r2, [r2, #16]
 800c510:	f107 0108 	add.w	r1, r7, #8
 800c514:	4610      	mov	r0, r2
 800c516:	4798      	blx	r3
 800c518:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c51a:	e00f      	b.n	800c53c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c51c:	6839      	ldr	r1, [r7, #0]
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f000 fa49 	bl	800c9b6 <USBD_CtlError>
            err++;
 800c524:	7afb      	ldrb	r3, [r7, #11]
 800c526:	3301      	adds	r3, #1
 800c528:	72fb      	strb	r3, [r7, #11]
          break;
 800c52a:	e007      	b.n	800c53c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c52c:	6839      	ldr	r1, [r7, #0]
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f000 fa41 	bl	800c9b6 <USBD_CtlError>
          err++;
 800c534:	7afb      	ldrb	r3, [r7, #11]
 800c536:	3301      	adds	r3, #1
 800c538:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c53a:	bf00      	nop
      }
      break;
 800c53c:	e037      	b.n	800c5ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	7c1b      	ldrb	r3, [r3, #16]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d109      	bne.n	800c55a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c54c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c54e:	f107 0208 	add.w	r2, r7, #8
 800c552:	4610      	mov	r0, r2
 800c554:	4798      	blx	r3
 800c556:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c558:	e029      	b.n	800c5ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c55a:	6839      	ldr	r1, [r7, #0]
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f000 fa2a 	bl	800c9b6 <USBD_CtlError>
        err++;
 800c562:	7afb      	ldrb	r3, [r7, #11]
 800c564:	3301      	adds	r3, #1
 800c566:	72fb      	strb	r3, [r7, #11]
      break;
 800c568:	e021      	b.n	800c5ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	7c1b      	ldrb	r3, [r3, #16]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d10d      	bne.n	800c58e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c57a:	f107 0208 	add.w	r2, r7, #8
 800c57e:	4610      	mov	r0, r2
 800c580:	4798      	blx	r3
 800c582:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	3301      	adds	r3, #1
 800c588:	2207      	movs	r2, #7
 800c58a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c58c:	e00f      	b.n	800c5ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c58e:	6839      	ldr	r1, [r7, #0]
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f000 fa10 	bl	800c9b6 <USBD_CtlError>
        err++;
 800c596:	7afb      	ldrb	r3, [r7, #11]
 800c598:	3301      	adds	r3, #1
 800c59a:	72fb      	strb	r3, [r7, #11]
      break;
 800c59c:	e007      	b.n	800c5ae <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c59e:	6839      	ldr	r1, [r7, #0]
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f000 fa08 	bl	800c9b6 <USBD_CtlError>
      err++;
 800c5a6:	7afb      	ldrb	r3, [r7, #11]
 800c5a8:	3301      	adds	r3, #1
 800c5aa:	72fb      	strb	r3, [r7, #11]
      break;
 800c5ac:	bf00      	nop
  }

  if (err != 0U)
 800c5ae:	7afb      	ldrb	r3, [r7, #11]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d11e      	bne.n	800c5f2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	88db      	ldrh	r3, [r3, #6]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d016      	beq.n	800c5ea <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c5bc:	893b      	ldrh	r3, [r7, #8]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d00e      	beq.n	800c5e0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	88da      	ldrh	r2, [r3, #6]
 800c5c6:	893b      	ldrh	r3, [r7, #8]
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	bf28      	it	cs
 800c5cc:	4613      	movcs	r3, r2
 800c5ce:	b29b      	uxth	r3, r3
 800c5d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c5d2:	893b      	ldrh	r3, [r7, #8]
 800c5d4:	461a      	mov	r2, r3
 800c5d6:	68f9      	ldr	r1, [r7, #12]
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f000 fa5d 	bl	800ca98 <USBD_CtlSendData>
 800c5de:	e009      	b.n	800c5f4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c5e0:	6839      	ldr	r1, [r7, #0]
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f000 f9e7 	bl	800c9b6 <USBD_CtlError>
 800c5e8:	e004      	b.n	800c5f4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f000 faae 	bl	800cb4c <USBD_CtlSendStatus>
 800c5f0:	e000      	b.n	800c5f4 <USBD_GetDescriptor+0x320>
    return;
 800c5f2:	bf00      	nop
  }
}
 800c5f4:	3710      	adds	r7, #16
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop

0800c5fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b084      	sub	sp, #16
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
 800c604:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	889b      	ldrh	r3, [r3, #4]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d131      	bne.n	800c672 <USBD_SetAddress+0x76>
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	88db      	ldrh	r3, [r3, #6]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d12d      	bne.n	800c672 <USBD_SetAddress+0x76>
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	885b      	ldrh	r3, [r3, #2]
 800c61a:	2b7f      	cmp	r3, #127	; 0x7f
 800c61c:	d829      	bhi.n	800c672 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	885b      	ldrh	r3, [r3, #2]
 800c622:	b2db      	uxtb	r3, r3
 800c624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c628:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c630:	b2db      	uxtb	r3, r3
 800c632:	2b03      	cmp	r3, #3
 800c634:	d104      	bne.n	800c640 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c636:	6839      	ldr	r1, [r7, #0]
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f000 f9bc 	bl	800c9b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c63e:	e01d      	b.n	800c67c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	7bfa      	ldrb	r2, [r7, #15]
 800c644:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c648:	7bfb      	ldrb	r3, [r7, #15]
 800c64a:	4619      	mov	r1, r3
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f003 ffb3 	bl	80105b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f000 fa7a 	bl	800cb4c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c658:	7bfb      	ldrb	r3, [r7, #15]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d004      	beq.n	800c668 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2202      	movs	r2, #2
 800c662:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c666:	e009      	b.n	800c67c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2201      	movs	r2, #1
 800c66c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c670:	e004      	b.n	800c67c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c672:	6839      	ldr	r1, [r7, #0]
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f000 f99e 	bl	800c9b6 <USBD_CtlError>
  }
}
 800c67a:	bf00      	nop
 800c67c:	bf00      	nop
 800c67e:	3710      	adds	r7, #16
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}

0800c684 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b084      	sub	sp, #16
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c68e:	2300      	movs	r3, #0
 800c690:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	885b      	ldrh	r3, [r3, #2]
 800c696:	b2da      	uxtb	r2, r3
 800c698:	4b4e      	ldr	r3, [pc, #312]	; (800c7d4 <USBD_SetConfig+0x150>)
 800c69a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c69c:	4b4d      	ldr	r3, [pc, #308]	; (800c7d4 <USBD_SetConfig+0x150>)
 800c69e:	781b      	ldrb	r3, [r3, #0]
 800c6a0:	2b01      	cmp	r3, #1
 800c6a2:	d905      	bls.n	800c6b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c6a4:	6839      	ldr	r1, [r7, #0]
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f000 f985 	bl	800c9b6 <USBD_CtlError>
    return USBD_FAIL;
 800c6ac:	2303      	movs	r3, #3
 800c6ae:	e08c      	b.n	800c7ca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6b6:	b2db      	uxtb	r3, r3
 800c6b8:	2b02      	cmp	r3, #2
 800c6ba:	d002      	beq.n	800c6c2 <USBD_SetConfig+0x3e>
 800c6bc:	2b03      	cmp	r3, #3
 800c6be:	d029      	beq.n	800c714 <USBD_SetConfig+0x90>
 800c6c0:	e075      	b.n	800c7ae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c6c2:	4b44      	ldr	r3, [pc, #272]	; (800c7d4 <USBD_SetConfig+0x150>)
 800c6c4:	781b      	ldrb	r3, [r3, #0]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d020      	beq.n	800c70c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c6ca:	4b42      	ldr	r3, [pc, #264]	; (800c7d4 <USBD_SetConfig+0x150>)
 800c6cc:	781b      	ldrb	r3, [r3, #0]
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c6d4:	4b3f      	ldr	r3, [pc, #252]	; (800c7d4 <USBD_SetConfig+0x150>)
 800c6d6:	781b      	ldrb	r3, [r3, #0]
 800c6d8:	4619      	mov	r1, r3
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f7fe ffbd 	bl	800b65a <USBD_SetClassConfig>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c6e4:	7bfb      	ldrb	r3, [r7, #15]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d008      	beq.n	800c6fc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c6ea:	6839      	ldr	r1, [r7, #0]
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f000 f962 	bl	800c9b6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2202      	movs	r2, #2
 800c6f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c6fa:	e065      	b.n	800c7c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f000 fa25 	bl	800cb4c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2203      	movs	r2, #3
 800c706:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c70a:	e05d      	b.n	800c7c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f000 fa1d 	bl	800cb4c <USBD_CtlSendStatus>
      break;
 800c712:	e059      	b.n	800c7c8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c714:	4b2f      	ldr	r3, [pc, #188]	; (800c7d4 <USBD_SetConfig+0x150>)
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d112      	bne.n	800c742 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2202      	movs	r2, #2
 800c720:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c724:	4b2b      	ldr	r3, [pc, #172]	; (800c7d4 <USBD_SetConfig+0x150>)
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	461a      	mov	r2, r3
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c72e:	4b29      	ldr	r3, [pc, #164]	; (800c7d4 <USBD_SetConfig+0x150>)
 800c730:	781b      	ldrb	r3, [r3, #0]
 800c732:	4619      	mov	r1, r3
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f7fe ffac 	bl	800b692 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f000 fa06 	bl	800cb4c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c740:	e042      	b.n	800c7c8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c742:	4b24      	ldr	r3, [pc, #144]	; (800c7d4 <USBD_SetConfig+0x150>)
 800c744:	781b      	ldrb	r3, [r3, #0]
 800c746:	461a      	mov	r2, r3
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	685b      	ldr	r3, [r3, #4]
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d02a      	beq.n	800c7a6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	685b      	ldr	r3, [r3, #4]
 800c754:	b2db      	uxtb	r3, r3
 800c756:	4619      	mov	r1, r3
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f7fe ff9a 	bl	800b692 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c75e:	4b1d      	ldr	r3, [pc, #116]	; (800c7d4 <USBD_SetConfig+0x150>)
 800c760:	781b      	ldrb	r3, [r3, #0]
 800c762:	461a      	mov	r2, r3
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c768:	4b1a      	ldr	r3, [pc, #104]	; (800c7d4 <USBD_SetConfig+0x150>)
 800c76a:	781b      	ldrb	r3, [r3, #0]
 800c76c:	4619      	mov	r1, r3
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f7fe ff73 	bl	800b65a <USBD_SetClassConfig>
 800c774:	4603      	mov	r3, r0
 800c776:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c778:	7bfb      	ldrb	r3, [r7, #15]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d00f      	beq.n	800c79e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c77e:	6839      	ldr	r1, [r7, #0]
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f000 f918 	bl	800c9b6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	685b      	ldr	r3, [r3, #4]
 800c78a:	b2db      	uxtb	r3, r3
 800c78c:	4619      	mov	r1, r3
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f7fe ff7f 	bl	800b692 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2202      	movs	r2, #2
 800c798:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c79c:	e014      	b.n	800c7c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f000 f9d4 	bl	800cb4c <USBD_CtlSendStatus>
      break;
 800c7a4:	e010      	b.n	800c7c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f000 f9d0 	bl	800cb4c <USBD_CtlSendStatus>
      break;
 800c7ac:	e00c      	b.n	800c7c8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c7ae:	6839      	ldr	r1, [r7, #0]
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f000 f900 	bl	800c9b6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c7b6:	4b07      	ldr	r3, [pc, #28]	; (800c7d4 <USBD_SetConfig+0x150>)
 800c7b8:	781b      	ldrb	r3, [r3, #0]
 800c7ba:	4619      	mov	r1, r3
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f7fe ff68 	bl	800b692 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c7c2:	2303      	movs	r3, #3
 800c7c4:	73fb      	strb	r3, [r7, #15]
      break;
 800c7c6:	bf00      	nop
  }

  return ret;
 800c7c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3710      	adds	r7, #16
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}
 800c7d2:	bf00      	nop
 800c7d4:	20002988 	.word	0x20002988

0800c7d8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b082      	sub	sp, #8
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	88db      	ldrh	r3, [r3, #6]
 800c7e6:	2b01      	cmp	r3, #1
 800c7e8:	d004      	beq.n	800c7f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c7ea:	6839      	ldr	r1, [r7, #0]
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f000 f8e2 	bl	800c9b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c7f2:	e023      	b.n	800c83c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7fa:	b2db      	uxtb	r3, r3
 800c7fc:	2b02      	cmp	r3, #2
 800c7fe:	dc02      	bgt.n	800c806 <USBD_GetConfig+0x2e>
 800c800:	2b00      	cmp	r3, #0
 800c802:	dc03      	bgt.n	800c80c <USBD_GetConfig+0x34>
 800c804:	e015      	b.n	800c832 <USBD_GetConfig+0x5a>
 800c806:	2b03      	cmp	r3, #3
 800c808:	d00b      	beq.n	800c822 <USBD_GetConfig+0x4a>
 800c80a:	e012      	b.n	800c832 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2200      	movs	r2, #0
 800c810:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	3308      	adds	r3, #8
 800c816:	2201      	movs	r2, #1
 800c818:	4619      	mov	r1, r3
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f000 f93c 	bl	800ca98 <USBD_CtlSendData>
        break;
 800c820:	e00c      	b.n	800c83c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	3304      	adds	r3, #4
 800c826:	2201      	movs	r2, #1
 800c828:	4619      	mov	r1, r3
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f000 f934 	bl	800ca98 <USBD_CtlSendData>
        break;
 800c830:	e004      	b.n	800c83c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c832:	6839      	ldr	r1, [r7, #0]
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f000 f8be 	bl	800c9b6 <USBD_CtlError>
        break;
 800c83a:	bf00      	nop
}
 800c83c:	bf00      	nop
 800c83e:	3708      	adds	r7, #8
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}

0800c844 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b082      	sub	sp, #8
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
 800c84c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c854:	b2db      	uxtb	r3, r3
 800c856:	3b01      	subs	r3, #1
 800c858:	2b02      	cmp	r3, #2
 800c85a:	d81e      	bhi.n	800c89a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	88db      	ldrh	r3, [r3, #6]
 800c860:	2b02      	cmp	r3, #2
 800c862:	d004      	beq.n	800c86e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c864:	6839      	ldr	r1, [r7, #0]
 800c866:	6878      	ldr	r0, [r7, #4]
 800c868:	f000 f8a5 	bl	800c9b6 <USBD_CtlError>
        break;
 800c86c:	e01a      	b.n	800c8a4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2201      	movs	r2, #1
 800c872:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d005      	beq.n	800c88a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	68db      	ldr	r3, [r3, #12]
 800c882:	f043 0202 	orr.w	r2, r3, #2
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	330c      	adds	r3, #12
 800c88e:	2202      	movs	r2, #2
 800c890:	4619      	mov	r1, r3
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f000 f900 	bl	800ca98 <USBD_CtlSendData>
      break;
 800c898:	e004      	b.n	800c8a4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c89a:	6839      	ldr	r1, [r7, #0]
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f000 f88a 	bl	800c9b6 <USBD_CtlError>
      break;
 800c8a2:	bf00      	nop
  }
}
 800c8a4:	bf00      	nop
 800c8a6:	3708      	adds	r7, #8
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b082      	sub	sp, #8
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	885b      	ldrh	r3, [r3, #2]
 800c8ba:	2b01      	cmp	r3, #1
 800c8bc:	d107      	bne.n	800c8ce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2201      	movs	r2, #1
 800c8c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f000 f940 	bl	800cb4c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c8cc:	e013      	b.n	800c8f6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	885b      	ldrh	r3, [r3, #2]
 800c8d2:	2b02      	cmp	r3, #2
 800c8d4:	d10b      	bne.n	800c8ee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	889b      	ldrh	r3, [r3, #4]
 800c8da:	0a1b      	lsrs	r3, r3, #8
 800c8dc:	b29b      	uxth	r3, r3
 800c8de:	b2da      	uxtb	r2, r3
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f000 f930 	bl	800cb4c <USBD_CtlSendStatus>
}
 800c8ec:	e003      	b.n	800c8f6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c8ee:	6839      	ldr	r1, [r7, #0]
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f000 f860 	bl	800c9b6 <USBD_CtlError>
}
 800c8f6:	bf00      	nop
 800c8f8:	3708      	adds	r7, #8
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}

0800c8fe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8fe:	b580      	push	{r7, lr}
 800c900:	b082      	sub	sp, #8
 800c902:	af00      	add	r7, sp, #0
 800c904:	6078      	str	r0, [r7, #4]
 800c906:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c90e:	b2db      	uxtb	r3, r3
 800c910:	3b01      	subs	r3, #1
 800c912:	2b02      	cmp	r3, #2
 800c914:	d80b      	bhi.n	800c92e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	885b      	ldrh	r3, [r3, #2]
 800c91a:	2b01      	cmp	r3, #1
 800c91c:	d10c      	bne.n	800c938 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2200      	movs	r2, #0
 800c922:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f000 f910 	bl	800cb4c <USBD_CtlSendStatus>
      }
      break;
 800c92c:	e004      	b.n	800c938 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c92e:	6839      	ldr	r1, [r7, #0]
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f000 f840 	bl	800c9b6 <USBD_CtlError>
      break;
 800c936:	e000      	b.n	800c93a <USBD_ClrFeature+0x3c>
      break;
 800c938:	bf00      	nop
  }
}
 800c93a:	bf00      	nop
 800c93c:	3708      	adds	r7, #8
 800c93e:	46bd      	mov	sp, r7
 800c940:	bd80      	pop	{r7, pc}

0800c942 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c942:	b580      	push	{r7, lr}
 800c944:	b084      	sub	sp, #16
 800c946:	af00      	add	r7, sp, #0
 800c948:	6078      	str	r0, [r7, #4]
 800c94a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	781a      	ldrb	r2, [r3, #0]
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	3301      	adds	r3, #1
 800c95c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	781a      	ldrb	r2, [r3, #0]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	3301      	adds	r3, #1
 800c96a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c96c:	68f8      	ldr	r0, [r7, #12]
 800c96e:	f7ff fa17 	bl	800bda0 <SWAPBYTE>
 800c972:	4603      	mov	r3, r0
 800c974:	461a      	mov	r2, r3
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	3301      	adds	r3, #1
 800c97e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	3301      	adds	r3, #1
 800c984:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c986:	68f8      	ldr	r0, [r7, #12]
 800c988:	f7ff fa0a 	bl	800bda0 <SWAPBYTE>
 800c98c:	4603      	mov	r3, r0
 800c98e:	461a      	mov	r2, r3
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	3301      	adds	r3, #1
 800c998:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	3301      	adds	r3, #1
 800c99e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c9a0:	68f8      	ldr	r0, [r7, #12]
 800c9a2:	f7ff f9fd 	bl	800bda0 <SWAPBYTE>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	461a      	mov	r2, r3
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	80da      	strh	r2, [r3, #6]
}
 800c9ae:	bf00      	nop
 800c9b0:	3710      	adds	r7, #16
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}

0800c9b6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9b6:	b580      	push	{r7, lr}
 800c9b8:	b082      	sub	sp, #8
 800c9ba:	af00      	add	r7, sp, #0
 800c9bc:	6078      	str	r0, [r7, #4]
 800c9be:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9c0:	2180      	movs	r1, #128	; 0x80
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f003 fd8e 	bl	80104e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c9c8:	2100      	movs	r1, #0
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f003 fd8a 	bl	80104e4 <USBD_LL_StallEP>
}
 800c9d0:	bf00      	nop
 800c9d2:	3708      	adds	r7, #8
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}

0800c9d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b086      	sub	sp, #24
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	60f8      	str	r0, [r7, #12]
 800c9e0:	60b9      	str	r1, [r7, #8]
 800c9e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d036      	beq.n	800ca5c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c9f2:	6938      	ldr	r0, [r7, #16]
 800c9f4:	f000 f836 	bl	800ca64 <USBD_GetLen>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	3301      	adds	r3, #1
 800c9fc:	b29b      	uxth	r3, r3
 800c9fe:	005b      	lsls	r3, r3, #1
 800ca00:	b29a      	uxth	r2, r3
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ca06:	7dfb      	ldrb	r3, [r7, #23]
 800ca08:	68ba      	ldr	r2, [r7, #8]
 800ca0a:	4413      	add	r3, r2
 800ca0c:	687a      	ldr	r2, [r7, #4]
 800ca0e:	7812      	ldrb	r2, [r2, #0]
 800ca10:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca12:	7dfb      	ldrb	r3, [r7, #23]
 800ca14:	3301      	adds	r3, #1
 800ca16:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ca18:	7dfb      	ldrb	r3, [r7, #23]
 800ca1a:	68ba      	ldr	r2, [r7, #8]
 800ca1c:	4413      	add	r3, r2
 800ca1e:	2203      	movs	r2, #3
 800ca20:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca22:	7dfb      	ldrb	r3, [r7, #23]
 800ca24:	3301      	adds	r3, #1
 800ca26:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ca28:	e013      	b.n	800ca52 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ca2a:	7dfb      	ldrb	r3, [r7, #23]
 800ca2c:	68ba      	ldr	r2, [r7, #8]
 800ca2e:	4413      	add	r3, r2
 800ca30:	693a      	ldr	r2, [r7, #16]
 800ca32:	7812      	ldrb	r2, [r2, #0]
 800ca34:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	3301      	adds	r3, #1
 800ca3a:	613b      	str	r3, [r7, #16]
    idx++;
 800ca3c:	7dfb      	ldrb	r3, [r7, #23]
 800ca3e:	3301      	adds	r3, #1
 800ca40:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ca42:	7dfb      	ldrb	r3, [r7, #23]
 800ca44:	68ba      	ldr	r2, [r7, #8]
 800ca46:	4413      	add	r3, r2
 800ca48:	2200      	movs	r2, #0
 800ca4a:	701a      	strb	r2, [r3, #0]
    idx++;
 800ca4c:	7dfb      	ldrb	r3, [r7, #23]
 800ca4e:	3301      	adds	r3, #1
 800ca50:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	781b      	ldrb	r3, [r3, #0]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d1e7      	bne.n	800ca2a <USBD_GetString+0x52>
 800ca5a:	e000      	b.n	800ca5e <USBD_GetString+0x86>
    return;
 800ca5c:	bf00      	nop
  }
}
 800ca5e:	3718      	adds	r7, #24
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}

0800ca64 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ca64:	b480      	push	{r7}
 800ca66:	b085      	sub	sp, #20
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ca74:	e005      	b.n	800ca82 <USBD_GetLen+0x1e>
  {
    len++;
 800ca76:	7bfb      	ldrb	r3, [r7, #15]
 800ca78:	3301      	adds	r3, #1
 800ca7a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	3301      	adds	r3, #1
 800ca80:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	781b      	ldrb	r3, [r3, #0]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d1f5      	bne.n	800ca76 <USBD_GetLen+0x12>
  }

  return len;
 800ca8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	3714      	adds	r7, #20
 800ca90:	46bd      	mov	sp, r7
 800ca92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca96:	4770      	bx	lr

0800ca98 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b084      	sub	sp, #16
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	60f8      	str	r0, [r7, #12]
 800caa0:	60b9      	str	r1, [r7, #8]
 800caa2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	2202      	movs	r2, #2
 800caa8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	687a      	ldr	r2, [r7, #4]
 800cab0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	687a      	ldr	r2, [r7, #4]
 800cab6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	68ba      	ldr	r2, [r7, #8]
 800cabc:	2100      	movs	r1, #0
 800cabe:	68f8      	ldr	r0, [r7, #12]
 800cac0:	f003 fd99 	bl	80105f6 <USBD_LL_Transmit>

  return USBD_OK;
 800cac4:	2300      	movs	r3, #0
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3710      	adds	r7, #16
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}

0800cace <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cace:	b580      	push	{r7, lr}
 800cad0:	b084      	sub	sp, #16
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	60f8      	str	r0, [r7, #12]
 800cad6:	60b9      	str	r1, [r7, #8]
 800cad8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	68ba      	ldr	r2, [r7, #8]
 800cade:	2100      	movs	r1, #0
 800cae0:	68f8      	ldr	r0, [r7, #12]
 800cae2:	f003 fd88 	bl	80105f6 <USBD_LL_Transmit>

  return USBD_OK;
 800cae6:	2300      	movs	r3, #0
}
 800cae8:	4618      	mov	r0, r3
 800caea:	3710      	adds	r7, #16
 800caec:	46bd      	mov	sp, r7
 800caee:	bd80      	pop	{r7, pc}

0800caf0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b084      	sub	sp, #16
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	60f8      	str	r0, [r7, #12]
 800caf8:	60b9      	str	r1, [r7, #8]
 800cafa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	2203      	movs	r2, #3
 800cb00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	687a      	ldr	r2, [r7, #4]
 800cb08:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	687a      	ldr	r2, [r7, #4]
 800cb10:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	68ba      	ldr	r2, [r7, #8]
 800cb18:	2100      	movs	r1, #0
 800cb1a:	68f8      	ldr	r0, [r7, #12]
 800cb1c:	f003 fd8c 	bl	8010638 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb20:	2300      	movs	r3, #0
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3710      	adds	r7, #16
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}

0800cb2a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cb2a:	b580      	push	{r7, lr}
 800cb2c:	b084      	sub	sp, #16
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	60f8      	str	r0, [r7, #12]
 800cb32:	60b9      	str	r1, [r7, #8]
 800cb34:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	68ba      	ldr	r2, [r7, #8]
 800cb3a:	2100      	movs	r1, #0
 800cb3c:	68f8      	ldr	r0, [r7, #12]
 800cb3e:	f003 fd7b 	bl	8010638 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb42:	2300      	movs	r3, #0
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3710      	adds	r7, #16
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}

0800cb4c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b082      	sub	sp, #8
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2204      	movs	r2, #4
 800cb58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	2200      	movs	r2, #0
 800cb60:	2100      	movs	r1, #0
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f003 fd47 	bl	80105f6 <USBD_LL_Transmit>

  return USBD_OK;
 800cb68:	2300      	movs	r3, #0
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3708      	adds	r7, #8
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}

0800cb72 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cb72:	b580      	push	{r7, lr}
 800cb74:	b082      	sub	sp, #8
 800cb76:	af00      	add	r7, sp, #0
 800cb78:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2205      	movs	r2, #5
 800cb7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb82:	2300      	movs	r3, #0
 800cb84:	2200      	movs	r2, #0
 800cb86:	2100      	movs	r1, #0
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f003 fd55 	bl	8010638 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb8e:	2300      	movs	r3, #0
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3708      	adds	r7, #8
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}

0800cb98 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b084      	sub	sp, #16
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	4603      	mov	r3, r0
 800cba0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cba2:	79fb      	ldrb	r3, [r7, #7]
 800cba4:	4a08      	ldr	r2, [pc, #32]	; (800cbc8 <disk_status+0x30>)
 800cba6:	009b      	lsls	r3, r3, #2
 800cba8:	4413      	add	r3, r2
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	685b      	ldr	r3, [r3, #4]
 800cbae:	79fa      	ldrb	r2, [r7, #7]
 800cbb0:	4905      	ldr	r1, [pc, #20]	; (800cbc8 <disk_status+0x30>)
 800cbb2:	440a      	add	r2, r1
 800cbb4:	7a12      	ldrb	r2, [r2, #8]
 800cbb6:	4610      	mov	r0, r2
 800cbb8:	4798      	blx	r3
 800cbba:	4603      	mov	r3, r0
 800cbbc:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cbbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3710      	adds	r7, #16
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}
 800cbc8:	20002bb4 	.word	0x20002bb4

0800cbcc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b084      	sub	sp, #16
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cbda:	79fb      	ldrb	r3, [r7, #7]
 800cbdc:	4a0d      	ldr	r2, [pc, #52]	; (800cc14 <disk_initialize+0x48>)
 800cbde:	5cd3      	ldrb	r3, [r2, r3]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d111      	bne.n	800cc08 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800cbe4:	79fb      	ldrb	r3, [r7, #7]
 800cbe6:	4a0b      	ldr	r2, [pc, #44]	; (800cc14 <disk_initialize+0x48>)
 800cbe8:	2101      	movs	r1, #1
 800cbea:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cbec:	79fb      	ldrb	r3, [r7, #7]
 800cbee:	4a09      	ldr	r2, [pc, #36]	; (800cc14 <disk_initialize+0x48>)
 800cbf0:	009b      	lsls	r3, r3, #2
 800cbf2:	4413      	add	r3, r2
 800cbf4:	685b      	ldr	r3, [r3, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	79fa      	ldrb	r2, [r7, #7]
 800cbfa:	4906      	ldr	r1, [pc, #24]	; (800cc14 <disk_initialize+0x48>)
 800cbfc:	440a      	add	r2, r1
 800cbfe:	7a12      	ldrb	r2, [r2, #8]
 800cc00:	4610      	mov	r0, r2
 800cc02:	4798      	blx	r3
 800cc04:	4603      	mov	r3, r0
 800cc06:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800cc08:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	3710      	adds	r7, #16
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}
 800cc12:	bf00      	nop
 800cc14:	20002bb4 	.word	0x20002bb4

0800cc18 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cc18:	b590      	push	{r4, r7, lr}
 800cc1a:	b087      	sub	sp, #28
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	60b9      	str	r1, [r7, #8]
 800cc20:	607a      	str	r2, [r7, #4]
 800cc22:	603b      	str	r3, [r7, #0]
 800cc24:	4603      	mov	r3, r0
 800cc26:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cc28:	7bfb      	ldrb	r3, [r7, #15]
 800cc2a:	4a0a      	ldr	r2, [pc, #40]	; (800cc54 <disk_read+0x3c>)
 800cc2c:	009b      	lsls	r3, r3, #2
 800cc2e:	4413      	add	r3, r2
 800cc30:	685b      	ldr	r3, [r3, #4]
 800cc32:	689c      	ldr	r4, [r3, #8]
 800cc34:	7bfb      	ldrb	r3, [r7, #15]
 800cc36:	4a07      	ldr	r2, [pc, #28]	; (800cc54 <disk_read+0x3c>)
 800cc38:	4413      	add	r3, r2
 800cc3a:	7a18      	ldrb	r0, [r3, #8]
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	687a      	ldr	r2, [r7, #4]
 800cc40:	68b9      	ldr	r1, [r7, #8]
 800cc42:	47a0      	blx	r4
 800cc44:	4603      	mov	r3, r0
 800cc46:	75fb      	strb	r3, [r7, #23]
  return res;
 800cc48:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	371c      	adds	r7, #28
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd90      	pop	{r4, r7, pc}
 800cc52:	bf00      	nop
 800cc54:	20002bb4 	.word	0x20002bb4

0800cc58 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cc58:	b590      	push	{r4, r7, lr}
 800cc5a:	b087      	sub	sp, #28
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	60b9      	str	r1, [r7, #8]
 800cc60:	607a      	str	r2, [r7, #4]
 800cc62:	603b      	str	r3, [r7, #0]
 800cc64:	4603      	mov	r3, r0
 800cc66:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cc68:	7bfb      	ldrb	r3, [r7, #15]
 800cc6a:	4a0a      	ldr	r2, [pc, #40]	; (800cc94 <disk_write+0x3c>)
 800cc6c:	009b      	lsls	r3, r3, #2
 800cc6e:	4413      	add	r3, r2
 800cc70:	685b      	ldr	r3, [r3, #4]
 800cc72:	68dc      	ldr	r4, [r3, #12]
 800cc74:	7bfb      	ldrb	r3, [r7, #15]
 800cc76:	4a07      	ldr	r2, [pc, #28]	; (800cc94 <disk_write+0x3c>)
 800cc78:	4413      	add	r3, r2
 800cc7a:	7a18      	ldrb	r0, [r3, #8]
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	687a      	ldr	r2, [r7, #4]
 800cc80:	68b9      	ldr	r1, [r7, #8]
 800cc82:	47a0      	blx	r4
 800cc84:	4603      	mov	r3, r0
 800cc86:	75fb      	strb	r3, [r7, #23]
  return res;
 800cc88:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	371c      	adds	r7, #28
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd90      	pop	{r4, r7, pc}
 800cc92:	bf00      	nop
 800cc94:	20002bb4 	.word	0x20002bb4

0800cc98 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b084      	sub	sp, #16
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	4603      	mov	r3, r0
 800cca0:	603a      	str	r2, [r7, #0]
 800cca2:	71fb      	strb	r3, [r7, #7]
 800cca4:	460b      	mov	r3, r1
 800cca6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cca8:	79fb      	ldrb	r3, [r7, #7]
 800ccaa:	4a09      	ldr	r2, [pc, #36]	; (800ccd0 <disk_ioctl+0x38>)
 800ccac:	009b      	lsls	r3, r3, #2
 800ccae:	4413      	add	r3, r2
 800ccb0:	685b      	ldr	r3, [r3, #4]
 800ccb2:	691b      	ldr	r3, [r3, #16]
 800ccb4:	79fa      	ldrb	r2, [r7, #7]
 800ccb6:	4906      	ldr	r1, [pc, #24]	; (800ccd0 <disk_ioctl+0x38>)
 800ccb8:	440a      	add	r2, r1
 800ccba:	7a10      	ldrb	r0, [r2, #8]
 800ccbc:	79b9      	ldrb	r1, [r7, #6]
 800ccbe:	683a      	ldr	r2, [r7, #0]
 800ccc0:	4798      	blx	r3
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	73fb      	strb	r3, [r7, #15]
  return res;
 800ccc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3710      	adds	r7, #16
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}
 800ccd0:	20002bb4 	.word	0x20002bb4

0800ccd4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	b085      	sub	sp, #20
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	3301      	adds	r3, #1
 800cce0:	781b      	ldrb	r3, [r3, #0]
 800cce2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cce4:	89fb      	ldrh	r3, [r7, #14]
 800cce6:	021b      	lsls	r3, r3, #8
 800cce8:	b21a      	sxth	r2, r3
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	781b      	ldrb	r3, [r3, #0]
 800ccee:	b21b      	sxth	r3, r3
 800ccf0:	4313      	orrs	r3, r2
 800ccf2:	b21b      	sxth	r3, r3
 800ccf4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ccf6:	89fb      	ldrh	r3, [r7, #14]
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3714      	adds	r7, #20
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd02:	4770      	bx	lr

0800cd04 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800cd04:	b480      	push	{r7}
 800cd06:	b085      	sub	sp, #20
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	3303      	adds	r3, #3
 800cd10:	781b      	ldrb	r3, [r3, #0]
 800cd12:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	021b      	lsls	r3, r3, #8
 800cd18:	687a      	ldr	r2, [r7, #4]
 800cd1a:	3202      	adds	r2, #2
 800cd1c:	7812      	ldrb	r2, [r2, #0]
 800cd1e:	4313      	orrs	r3, r2
 800cd20:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	021b      	lsls	r3, r3, #8
 800cd26:	687a      	ldr	r2, [r7, #4]
 800cd28:	3201      	adds	r2, #1
 800cd2a:	7812      	ldrb	r2, [r2, #0]
 800cd2c:	4313      	orrs	r3, r2
 800cd2e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	021b      	lsls	r3, r3, #8
 800cd34:	687a      	ldr	r2, [r7, #4]
 800cd36:	7812      	ldrb	r2, [r2, #0]
 800cd38:	4313      	orrs	r3, r2
 800cd3a:	60fb      	str	r3, [r7, #12]
	return rv;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3714      	adds	r7, #20
 800cd42:	46bd      	mov	sp, r7
 800cd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd48:	4770      	bx	lr

0800cd4a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cd4a:	b480      	push	{r7}
 800cd4c:	b083      	sub	sp, #12
 800cd4e:	af00      	add	r7, sp, #0
 800cd50:	6078      	str	r0, [r7, #4]
 800cd52:	460b      	mov	r3, r1
 800cd54:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	1c5a      	adds	r2, r3, #1
 800cd5a:	607a      	str	r2, [r7, #4]
 800cd5c:	887a      	ldrh	r2, [r7, #2]
 800cd5e:	b2d2      	uxtb	r2, r2
 800cd60:	701a      	strb	r2, [r3, #0]
 800cd62:	887b      	ldrh	r3, [r7, #2]
 800cd64:	0a1b      	lsrs	r3, r3, #8
 800cd66:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	1c5a      	adds	r2, r3, #1
 800cd6c:	607a      	str	r2, [r7, #4]
 800cd6e:	887a      	ldrh	r2, [r7, #2]
 800cd70:	b2d2      	uxtb	r2, r2
 800cd72:	701a      	strb	r2, [r3, #0]
}
 800cd74:	bf00      	nop
 800cd76:	370c      	adds	r7, #12
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7e:	4770      	bx	lr

0800cd80 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800cd80:	b480      	push	{r7}
 800cd82:	b083      	sub	sp, #12
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
 800cd88:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	1c5a      	adds	r2, r3, #1
 800cd8e:	607a      	str	r2, [r7, #4]
 800cd90:	683a      	ldr	r2, [r7, #0]
 800cd92:	b2d2      	uxtb	r2, r2
 800cd94:	701a      	strb	r2, [r3, #0]
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	0a1b      	lsrs	r3, r3, #8
 800cd9a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	1c5a      	adds	r2, r3, #1
 800cda0:	607a      	str	r2, [r7, #4]
 800cda2:	683a      	ldr	r2, [r7, #0]
 800cda4:	b2d2      	uxtb	r2, r2
 800cda6:	701a      	strb	r2, [r3, #0]
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	0a1b      	lsrs	r3, r3, #8
 800cdac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	1c5a      	adds	r2, r3, #1
 800cdb2:	607a      	str	r2, [r7, #4]
 800cdb4:	683a      	ldr	r2, [r7, #0]
 800cdb6:	b2d2      	uxtb	r2, r2
 800cdb8:	701a      	strb	r2, [r3, #0]
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	0a1b      	lsrs	r3, r3, #8
 800cdbe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	1c5a      	adds	r2, r3, #1
 800cdc4:	607a      	str	r2, [r7, #4]
 800cdc6:	683a      	ldr	r2, [r7, #0]
 800cdc8:	b2d2      	uxtb	r2, r2
 800cdca:	701a      	strb	r2, [r3, #0]
}
 800cdcc:	bf00      	nop
 800cdce:	370c      	adds	r7, #12
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd6:	4770      	bx	lr

0800cdd8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800cdd8:	b480      	push	{r7}
 800cdda:	b087      	sub	sp, #28
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	60f8      	str	r0, [r7, #12]
 800cde0:	60b9      	str	r1, [r7, #8]
 800cde2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d00d      	beq.n	800ce0e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800cdf2:	693a      	ldr	r2, [r7, #16]
 800cdf4:	1c53      	adds	r3, r2, #1
 800cdf6:	613b      	str	r3, [r7, #16]
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	1c59      	adds	r1, r3, #1
 800cdfc:	6179      	str	r1, [r7, #20]
 800cdfe:	7812      	ldrb	r2, [r2, #0]
 800ce00:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	3b01      	subs	r3, #1
 800ce06:	607b      	str	r3, [r7, #4]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d1f1      	bne.n	800cdf2 <mem_cpy+0x1a>
	}
}
 800ce0e:	bf00      	nop
 800ce10:	371c      	adds	r7, #28
 800ce12:	46bd      	mov	sp, r7
 800ce14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce18:	4770      	bx	lr

0800ce1a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ce1a:	b480      	push	{r7}
 800ce1c:	b087      	sub	sp, #28
 800ce1e:	af00      	add	r7, sp, #0
 800ce20:	60f8      	str	r0, [r7, #12]
 800ce22:	60b9      	str	r1, [r7, #8]
 800ce24:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ce2a:	697b      	ldr	r3, [r7, #20]
 800ce2c:	1c5a      	adds	r2, r3, #1
 800ce2e:	617a      	str	r2, [r7, #20]
 800ce30:	68ba      	ldr	r2, [r7, #8]
 800ce32:	b2d2      	uxtb	r2, r2
 800ce34:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	3b01      	subs	r3, #1
 800ce3a:	607b      	str	r3, [r7, #4]
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d1f3      	bne.n	800ce2a <mem_set+0x10>
}
 800ce42:	bf00      	nop
 800ce44:	bf00      	nop
 800ce46:	371c      	adds	r7, #28
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4e:	4770      	bx	lr

0800ce50 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ce50:	b480      	push	{r7}
 800ce52:	b089      	sub	sp, #36	; 0x24
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	60f8      	str	r0, [r7, #12]
 800ce58:	60b9      	str	r1, [r7, #8]
 800ce5a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	61fb      	str	r3, [r7, #28]
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ce64:	2300      	movs	r3, #0
 800ce66:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ce68:	69fb      	ldr	r3, [r7, #28]
 800ce6a:	1c5a      	adds	r2, r3, #1
 800ce6c:	61fa      	str	r2, [r7, #28]
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	4619      	mov	r1, r3
 800ce72:	69bb      	ldr	r3, [r7, #24]
 800ce74:	1c5a      	adds	r2, r3, #1
 800ce76:	61ba      	str	r2, [r7, #24]
 800ce78:	781b      	ldrb	r3, [r3, #0]
 800ce7a:	1acb      	subs	r3, r1, r3
 800ce7c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	3b01      	subs	r3, #1
 800ce82:	607b      	str	r3, [r7, #4]
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d002      	beq.n	800ce90 <mem_cmp+0x40>
 800ce8a:	697b      	ldr	r3, [r7, #20]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d0eb      	beq.n	800ce68 <mem_cmp+0x18>

	return r;
 800ce90:	697b      	ldr	r3, [r7, #20]
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	3724      	adds	r7, #36	; 0x24
 800ce96:	46bd      	mov	sp, r7
 800ce98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9c:	4770      	bx	lr

0800ce9e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ce9e:	b480      	push	{r7}
 800cea0:	b083      	sub	sp, #12
 800cea2:	af00      	add	r7, sp, #0
 800cea4:	6078      	str	r0, [r7, #4]
 800cea6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800cea8:	e002      	b.n	800ceb0 <chk_chr+0x12>
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	3301      	adds	r3, #1
 800ceae:	607b      	str	r3, [r7, #4]
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d005      	beq.n	800cec4 <chk_chr+0x26>
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	781b      	ldrb	r3, [r3, #0]
 800cebc:	461a      	mov	r2, r3
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	4293      	cmp	r3, r2
 800cec2:	d1f2      	bne.n	800ceaa <chk_chr+0xc>
	return *str;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	781b      	ldrb	r3, [r3, #0]
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	370c      	adds	r7, #12
 800cecc:	46bd      	mov	sp, r7
 800cece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced2:	4770      	bx	lr

0800ced4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ced4:	b480      	push	{r7}
 800ced6:	b085      	sub	sp, #20
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
 800cedc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cede:	2300      	movs	r3, #0
 800cee0:	60bb      	str	r3, [r7, #8]
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	60fb      	str	r3, [r7, #12]
 800cee6:	e029      	b.n	800cf3c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800cee8:	4a27      	ldr	r2, [pc, #156]	; (800cf88 <chk_lock+0xb4>)
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	011b      	lsls	r3, r3, #4
 800ceee:	4413      	add	r3, r2
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d01d      	beq.n	800cf32 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cef6:	4a24      	ldr	r2, [pc, #144]	; (800cf88 <chk_lock+0xb4>)
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	011b      	lsls	r3, r3, #4
 800cefc:	4413      	add	r3, r2
 800cefe:	681a      	ldr	r2, [r3, #0]
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	429a      	cmp	r2, r3
 800cf06:	d116      	bne.n	800cf36 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800cf08:	4a1f      	ldr	r2, [pc, #124]	; (800cf88 <chk_lock+0xb4>)
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	011b      	lsls	r3, r3, #4
 800cf0e:	4413      	add	r3, r2
 800cf10:	3304      	adds	r3, #4
 800cf12:	681a      	ldr	r2, [r3, #0]
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	d10c      	bne.n	800cf36 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cf1c:	4a1a      	ldr	r2, [pc, #104]	; (800cf88 <chk_lock+0xb4>)
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	011b      	lsls	r3, r3, #4
 800cf22:	4413      	add	r3, r2
 800cf24:	3308      	adds	r3, #8
 800cf26:	681a      	ldr	r2, [r3, #0]
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800cf2c:	429a      	cmp	r2, r3
 800cf2e:	d102      	bne.n	800cf36 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cf30:	e007      	b.n	800cf42 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800cf32:	2301      	movs	r3, #1
 800cf34:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	3301      	adds	r3, #1
 800cf3a:	60fb      	str	r3, [r7, #12]
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2b01      	cmp	r3, #1
 800cf40:	d9d2      	bls.n	800cee8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	2b02      	cmp	r3, #2
 800cf46:	d109      	bne.n	800cf5c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d102      	bne.n	800cf54 <chk_lock+0x80>
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	2b02      	cmp	r3, #2
 800cf52:	d101      	bne.n	800cf58 <chk_lock+0x84>
 800cf54:	2300      	movs	r3, #0
 800cf56:	e010      	b.n	800cf7a <chk_lock+0xa6>
 800cf58:	2312      	movs	r3, #18
 800cf5a:	e00e      	b.n	800cf7a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d108      	bne.n	800cf74 <chk_lock+0xa0>
 800cf62:	4a09      	ldr	r2, [pc, #36]	; (800cf88 <chk_lock+0xb4>)
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	011b      	lsls	r3, r3, #4
 800cf68:	4413      	add	r3, r2
 800cf6a:	330c      	adds	r3, #12
 800cf6c:	881b      	ldrh	r3, [r3, #0]
 800cf6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf72:	d101      	bne.n	800cf78 <chk_lock+0xa4>
 800cf74:	2310      	movs	r3, #16
 800cf76:	e000      	b.n	800cf7a <chk_lock+0xa6>
 800cf78:	2300      	movs	r3, #0
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3714      	adds	r7, #20
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf84:	4770      	bx	lr
 800cf86:	bf00      	nop
 800cf88:	20002994 	.word	0x20002994

0800cf8c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b083      	sub	sp, #12
 800cf90:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cf92:	2300      	movs	r3, #0
 800cf94:	607b      	str	r3, [r7, #4]
 800cf96:	e002      	b.n	800cf9e <enq_lock+0x12>
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	3301      	adds	r3, #1
 800cf9c:	607b      	str	r3, [r7, #4]
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2b01      	cmp	r3, #1
 800cfa2:	d806      	bhi.n	800cfb2 <enq_lock+0x26>
 800cfa4:	4a09      	ldr	r2, [pc, #36]	; (800cfcc <enq_lock+0x40>)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	011b      	lsls	r3, r3, #4
 800cfaa:	4413      	add	r3, r2
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d1f2      	bne.n	800cf98 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2b02      	cmp	r3, #2
 800cfb6:	bf14      	ite	ne
 800cfb8:	2301      	movne	r3, #1
 800cfba:	2300      	moveq	r3, #0
 800cfbc:	b2db      	uxtb	r3, r3
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	370c      	adds	r7, #12
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc8:	4770      	bx	lr
 800cfca:	bf00      	nop
 800cfcc:	20002994 	.word	0x20002994

0800cfd0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b085      	sub	sp, #20
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
 800cfd8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cfda:	2300      	movs	r3, #0
 800cfdc:	60fb      	str	r3, [r7, #12]
 800cfde:	e01f      	b.n	800d020 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800cfe0:	4a41      	ldr	r2, [pc, #260]	; (800d0e8 <inc_lock+0x118>)
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	011b      	lsls	r3, r3, #4
 800cfe6:	4413      	add	r3, r2
 800cfe8:	681a      	ldr	r2, [r3, #0]
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	429a      	cmp	r2, r3
 800cff0:	d113      	bne.n	800d01a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800cff2:	4a3d      	ldr	r2, [pc, #244]	; (800d0e8 <inc_lock+0x118>)
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	011b      	lsls	r3, r3, #4
 800cff8:	4413      	add	r3, r2
 800cffa:	3304      	adds	r3, #4
 800cffc:	681a      	ldr	r2, [r3, #0]
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d002:	429a      	cmp	r2, r3
 800d004:	d109      	bne.n	800d01a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d006:	4a38      	ldr	r2, [pc, #224]	; (800d0e8 <inc_lock+0x118>)
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	011b      	lsls	r3, r3, #4
 800d00c:	4413      	add	r3, r2
 800d00e:	3308      	adds	r3, #8
 800d010:	681a      	ldr	r2, [r3, #0]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d016:	429a      	cmp	r2, r3
 800d018:	d006      	beq.n	800d028 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	3301      	adds	r3, #1
 800d01e:	60fb      	str	r3, [r7, #12]
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	2b01      	cmp	r3, #1
 800d024:	d9dc      	bls.n	800cfe0 <inc_lock+0x10>
 800d026:	e000      	b.n	800d02a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d028:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	2b02      	cmp	r3, #2
 800d02e:	d132      	bne.n	800d096 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d030:	2300      	movs	r3, #0
 800d032:	60fb      	str	r3, [r7, #12]
 800d034:	e002      	b.n	800d03c <inc_lock+0x6c>
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	3301      	adds	r3, #1
 800d03a:	60fb      	str	r3, [r7, #12]
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	2b01      	cmp	r3, #1
 800d040:	d806      	bhi.n	800d050 <inc_lock+0x80>
 800d042:	4a29      	ldr	r2, [pc, #164]	; (800d0e8 <inc_lock+0x118>)
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	011b      	lsls	r3, r3, #4
 800d048:	4413      	add	r3, r2
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d1f2      	bne.n	800d036 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	2b02      	cmp	r3, #2
 800d054:	d101      	bne.n	800d05a <inc_lock+0x8a>
 800d056:	2300      	movs	r3, #0
 800d058:	e040      	b.n	800d0dc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681a      	ldr	r2, [r3, #0]
 800d05e:	4922      	ldr	r1, [pc, #136]	; (800d0e8 <inc_lock+0x118>)
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	011b      	lsls	r3, r3, #4
 800d064:	440b      	add	r3, r1
 800d066:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	689a      	ldr	r2, [r3, #8]
 800d06c:	491e      	ldr	r1, [pc, #120]	; (800d0e8 <inc_lock+0x118>)
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	011b      	lsls	r3, r3, #4
 800d072:	440b      	add	r3, r1
 800d074:	3304      	adds	r3, #4
 800d076:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	695a      	ldr	r2, [r3, #20]
 800d07c:	491a      	ldr	r1, [pc, #104]	; (800d0e8 <inc_lock+0x118>)
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	011b      	lsls	r3, r3, #4
 800d082:	440b      	add	r3, r1
 800d084:	3308      	adds	r3, #8
 800d086:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d088:	4a17      	ldr	r2, [pc, #92]	; (800d0e8 <inc_lock+0x118>)
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	011b      	lsls	r3, r3, #4
 800d08e:	4413      	add	r3, r2
 800d090:	330c      	adds	r3, #12
 800d092:	2200      	movs	r2, #0
 800d094:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d009      	beq.n	800d0b0 <inc_lock+0xe0>
 800d09c:	4a12      	ldr	r2, [pc, #72]	; (800d0e8 <inc_lock+0x118>)
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	011b      	lsls	r3, r3, #4
 800d0a2:	4413      	add	r3, r2
 800d0a4:	330c      	adds	r3, #12
 800d0a6:	881b      	ldrh	r3, [r3, #0]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d001      	beq.n	800d0b0 <inc_lock+0xe0>
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	e015      	b.n	800d0dc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d108      	bne.n	800d0c8 <inc_lock+0xf8>
 800d0b6:	4a0c      	ldr	r2, [pc, #48]	; (800d0e8 <inc_lock+0x118>)
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	011b      	lsls	r3, r3, #4
 800d0bc:	4413      	add	r3, r2
 800d0be:	330c      	adds	r3, #12
 800d0c0:	881b      	ldrh	r3, [r3, #0]
 800d0c2:	3301      	adds	r3, #1
 800d0c4:	b29a      	uxth	r2, r3
 800d0c6:	e001      	b.n	800d0cc <inc_lock+0xfc>
 800d0c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d0cc:	4906      	ldr	r1, [pc, #24]	; (800d0e8 <inc_lock+0x118>)
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	011b      	lsls	r3, r3, #4
 800d0d2:	440b      	add	r3, r1
 800d0d4:	330c      	adds	r3, #12
 800d0d6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	3301      	adds	r3, #1
}
 800d0dc:	4618      	mov	r0, r3
 800d0de:	3714      	adds	r7, #20
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e6:	4770      	bx	lr
 800d0e8:	20002994 	.word	0x20002994

0800d0ec <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d0ec:	b480      	push	{r7}
 800d0ee:	b085      	sub	sp, #20
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	3b01      	subs	r3, #1
 800d0f8:	607b      	str	r3, [r7, #4]
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2b01      	cmp	r3, #1
 800d0fe:	d825      	bhi.n	800d14c <dec_lock+0x60>
		n = Files[i].ctr;
 800d100:	4a17      	ldr	r2, [pc, #92]	; (800d160 <dec_lock+0x74>)
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	011b      	lsls	r3, r3, #4
 800d106:	4413      	add	r3, r2
 800d108:	330c      	adds	r3, #12
 800d10a:	881b      	ldrh	r3, [r3, #0]
 800d10c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d10e:	89fb      	ldrh	r3, [r7, #14]
 800d110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d114:	d101      	bne.n	800d11a <dec_lock+0x2e>
 800d116:	2300      	movs	r3, #0
 800d118:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d11a:	89fb      	ldrh	r3, [r7, #14]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d002      	beq.n	800d126 <dec_lock+0x3a>
 800d120:	89fb      	ldrh	r3, [r7, #14]
 800d122:	3b01      	subs	r3, #1
 800d124:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d126:	4a0e      	ldr	r2, [pc, #56]	; (800d160 <dec_lock+0x74>)
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	011b      	lsls	r3, r3, #4
 800d12c:	4413      	add	r3, r2
 800d12e:	330c      	adds	r3, #12
 800d130:	89fa      	ldrh	r2, [r7, #14]
 800d132:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d134:	89fb      	ldrh	r3, [r7, #14]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d105      	bne.n	800d146 <dec_lock+0x5a>
 800d13a:	4a09      	ldr	r2, [pc, #36]	; (800d160 <dec_lock+0x74>)
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	011b      	lsls	r3, r3, #4
 800d140:	4413      	add	r3, r2
 800d142:	2200      	movs	r2, #0
 800d144:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d146:	2300      	movs	r3, #0
 800d148:	737b      	strb	r3, [r7, #13]
 800d14a:	e001      	b.n	800d150 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d14c:	2302      	movs	r3, #2
 800d14e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d150:	7b7b      	ldrb	r3, [r7, #13]
}
 800d152:	4618      	mov	r0, r3
 800d154:	3714      	adds	r7, #20
 800d156:	46bd      	mov	sp, r7
 800d158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15c:	4770      	bx	lr
 800d15e:	bf00      	nop
 800d160:	20002994 	.word	0x20002994

0800d164 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d164:	b480      	push	{r7}
 800d166:	b085      	sub	sp, #20
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d16c:	2300      	movs	r3, #0
 800d16e:	60fb      	str	r3, [r7, #12]
 800d170:	e010      	b.n	800d194 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d172:	4a0d      	ldr	r2, [pc, #52]	; (800d1a8 <clear_lock+0x44>)
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	011b      	lsls	r3, r3, #4
 800d178:	4413      	add	r3, r2
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	687a      	ldr	r2, [r7, #4]
 800d17e:	429a      	cmp	r2, r3
 800d180:	d105      	bne.n	800d18e <clear_lock+0x2a>
 800d182:	4a09      	ldr	r2, [pc, #36]	; (800d1a8 <clear_lock+0x44>)
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	011b      	lsls	r3, r3, #4
 800d188:	4413      	add	r3, r2
 800d18a:	2200      	movs	r2, #0
 800d18c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	3301      	adds	r3, #1
 800d192:	60fb      	str	r3, [r7, #12]
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	2b01      	cmp	r3, #1
 800d198:	d9eb      	bls.n	800d172 <clear_lock+0xe>
	}
}
 800d19a:	bf00      	nop
 800d19c:	bf00      	nop
 800d19e:	3714      	adds	r7, #20
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a6:	4770      	bx	lr
 800d1a8:	20002994 	.word	0x20002994

0800d1ac <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b086      	sub	sp, #24
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	78db      	ldrb	r3, [r3, #3]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d034      	beq.n	800d22a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1c4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	7858      	ldrb	r0, [r3, #1]
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	697a      	ldr	r2, [r7, #20]
 800d1d4:	f7ff fd40 	bl	800cc58 <disk_write>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d002      	beq.n	800d1e4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d1de:	2301      	movs	r3, #1
 800d1e0:	73fb      	strb	r3, [r7, #15]
 800d1e2:	e022      	b.n	800d22a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ee:	697a      	ldr	r2, [r7, #20]
 800d1f0:	1ad2      	subs	r2, r2, r3
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	69db      	ldr	r3, [r3, #28]
 800d1f6:	429a      	cmp	r2, r3
 800d1f8:	d217      	bcs.n	800d22a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	789b      	ldrb	r3, [r3, #2]
 800d1fe:	613b      	str	r3, [r7, #16]
 800d200:	e010      	b.n	800d224 <sync_window+0x78>
					wsect += fs->fsize;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	69db      	ldr	r3, [r3, #28]
 800d206:	697a      	ldr	r2, [r7, #20]
 800d208:	4413      	add	r3, r2
 800d20a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	7858      	ldrb	r0, [r3, #1]
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d216:	2301      	movs	r3, #1
 800d218:	697a      	ldr	r2, [r7, #20]
 800d21a:	f7ff fd1d 	bl	800cc58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	3b01      	subs	r3, #1
 800d222:	613b      	str	r3, [r7, #16]
 800d224:	693b      	ldr	r3, [r7, #16]
 800d226:	2b01      	cmp	r3, #1
 800d228:	d8eb      	bhi.n	800d202 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d22a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3718      	adds	r7, #24
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}

0800d234 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b084      	sub	sp, #16
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
 800d23c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d23e:	2300      	movs	r3, #0
 800d240:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d246:	683a      	ldr	r2, [r7, #0]
 800d248:	429a      	cmp	r2, r3
 800d24a:	d01b      	beq.n	800d284 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f7ff ffad 	bl	800d1ac <sync_window>
 800d252:	4603      	mov	r3, r0
 800d254:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d256:	7bfb      	ldrb	r3, [r7, #15]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d113      	bne.n	800d284 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	7858      	ldrb	r0, [r3, #1]
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d266:	2301      	movs	r3, #1
 800d268:	683a      	ldr	r2, [r7, #0]
 800d26a:	f7ff fcd5 	bl	800cc18 <disk_read>
 800d26e:	4603      	mov	r3, r0
 800d270:	2b00      	cmp	r3, #0
 800d272:	d004      	beq.n	800d27e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d274:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d278:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d27a:	2301      	movs	r3, #1
 800d27c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	683a      	ldr	r2, [r7, #0]
 800d282:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800d284:	7bfb      	ldrb	r3, [r7, #15]
}
 800d286:	4618      	mov	r0, r3
 800d288:	3710      	adds	r7, #16
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}
	...

0800d290 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b084      	sub	sp, #16
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f7ff ff87 	bl	800d1ac <sync_window>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d2a2:	7bfb      	ldrb	r3, [r7, #15]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d158      	bne.n	800d35a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	781b      	ldrb	r3, [r3, #0]
 800d2ac:	2b03      	cmp	r3, #3
 800d2ae:	d148      	bne.n	800d342 <sync_fs+0xb2>
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	791b      	ldrb	r3, [r3, #4]
 800d2b4:	2b01      	cmp	r3, #1
 800d2b6:	d144      	bne.n	800d342 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	3334      	adds	r3, #52	; 0x34
 800d2bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d2c0:	2100      	movs	r1, #0
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f7ff fda9 	bl	800ce1a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	3334      	adds	r3, #52	; 0x34
 800d2cc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d2d0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	f7ff fd38 	bl	800cd4a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	3334      	adds	r3, #52	; 0x34
 800d2de:	4921      	ldr	r1, [pc, #132]	; (800d364 <sync_fs+0xd4>)
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f7ff fd4d 	bl	800cd80 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	3334      	adds	r3, #52	; 0x34
 800d2ea:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d2ee:	491e      	ldr	r1, [pc, #120]	; (800d368 <sync_fs+0xd8>)
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f7ff fd45 	bl	800cd80 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	3334      	adds	r3, #52	; 0x34
 800d2fa:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	695b      	ldr	r3, [r3, #20]
 800d302:	4619      	mov	r1, r3
 800d304:	4610      	mov	r0, r2
 800d306:	f7ff fd3b 	bl	800cd80 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	3334      	adds	r3, #52	; 0x34
 800d30e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	691b      	ldr	r3, [r3, #16]
 800d316:	4619      	mov	r1, r3
 800d318:	4610      	mov	r0, r2
 800d31a:	f7ff fd31 	bl	800cd80 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6a1b      	ldr	r3, [r3, #32]
 800d322:	1c5a      	adds	r2, r3, #1
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	7858      	ldrb	r0, [r3, #1]
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d336:	2301      	movs	r3, #1
 800d338:	f7ff fc8e 	bl	800cc58 <disk_write>
			fs->fsi_flag = 0;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2200      	movs	r2, #0
 800d340:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	785b      	ldrb	r3, [r3, #1]
 800d346:	2200      	movs	r2, #0
 800d348:	2100      	movs	r1, #0
 800d34a:	4618      	mov	r0, r3
 800d34c:	f7ff fca4 	bl	800cc98 <disk_ioctl>
 800d350:	4603      	mov	r3, r0
 800d352:	2b00      	cmp	r3, #0
 800d354:	d001      	beq.n	800d35a <sync_fs+0xca>
 800d356:	2301      	movs	r3, #1
 800d358:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d35a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3710      	adds	r7, #16
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}
 800d364:	41615252 	.word	0x41615252
 800d368:	61417272 	.word	0x61417272

0800d36c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d36c:	b480      	push	{r7}
 800d36e:	b083      	sub	sp, #12
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
 800d374:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	3b02      	subs	r3, #2
 800d37a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	699b      	ldr	r3, [r3, #24]
 800d380:	3b02      	subs	r3, #2
 800d382:	683a      	ldr	r2, [r7, #0]
 800d384:	429a      	cmp	r2, r3
 800d386:	d301      	bcc.n	800d38c <clust2sect+0x20>
 800d388:	2300      	movs	r3, #0
 800d38a:	e008      	b.n	800d39e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	895b      	ldrh	r3, [r3, #10]
 800d390:	461a      	mov	r2, r3
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	fb03 f202 	mul.w	r2, r3, r2
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d39c:	4413      	add	r3, r2
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	370c      	adds	r7, #12
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a8:	4770      	bx	lr

0800d3aa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d3aa:	b580      	push	{r7, lr}
 800d3ac:	b086      	sub	sp, #24
 800d3ae:	af00      	add	r7, sp, #0
 800d3b0:	6078      	str	r0, [r7, #4]
 800d3b2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	2b01      	cmp	r3, #1
 800d3be:	d904      	bls.n	800d3ca <get_fat+0x20>
 800d3c0:	693b      	ldr	r3, [r7, #16]
 800d3c2:	699b      	ldr	r3, [r3, #24]
 800d3c4:	683a      	ldr	r2, [r7, #0]
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d302      	bcc.n	800d3d0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d3ca:	2301      	movs	r3, #1
 800d3cc:	617b      	str	r3, [r7, #20]
 800d3ce:	e08f      	b.n	800d4f0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d3d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d3d4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d3d6:	693b      	ldr	r3, [r7, #16]
 800d3d8:	781b      	ldrb	r3, [r3, #0]
 800d3da:	2b03      	cmp	r3, #3
 800d3dc:	d062      	beq.n	800d4a4 <get_fat+0xfa>
 800d3de:	2b03      	cmp	r3, #3
 800d3e0:	dc7c      	bgt.n	800d4dc <get_fat+0x132>
 800d3e2:	2b01      	cmp	r3, #1
 800d3e4:	d002      	beq.n	800d3ec <get_fat+0x42>
 800d3e6:	2b02      	cmp	r3, #2
 800d3e8:	d042      	beq.n	800d470 <get_fat+0xc6>
 800d3ea:	e077      	b.n	800d4dc <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	60fb      	str	r3, [r7, #12]
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	085b      	lsrs	r3, r3, #1
 800d3f4:	68fa      	ldr	r2, [r7, #12]
 800d3f6:	4413      	add	r3, r2
 800d3f8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	0a5b      	lsrs	r3, r3, #9
 800d402:	4413      	add	r3, r2
 800d404:	4619      	mov	r1, r3
 800d406:	6938      	ldr	r0, [r7, #16]
 800d408:	f7ff ff14 	bl	800d234 <move_window>
 800d40c:	4603      	mov	r3, r0
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d167      	bne.n	800d4e2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	1c5a      	adds	r2, r3, #1
 800d416:	60fa      	str	r2, [r7, #12]
 800d418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d41c:	693a      	ldr	r2, [r7, #16]
 800d41e:	4413      	add	r3, r2
 800d420:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d424:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d426:	693b      	ldr	r3, [r7, #16]
 800d428:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	0a5b      	lsrs	r3, r3, #9
 800d42e:	4413      	add	r3, r2
 800d430:	4619      	mov	r1, r3
 800d432:	6938      	ldr	r0, [r7, #16]
 800d434:	f7ff fefe 	bl	800d234 <move_window>
 800d438:	4603      	mov	r3, r0
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d153      	bne.n	800d4e6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d444:	693a      	ldr	r2, [r7, #16]
 800d446:	4413      	add	r3, r2
 800d448:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d44c:	021b      	lsls	r3, r3, #8
 800d44e:	461a      	mov	r2, r3
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	4313      	orrs	r3, r2
 800d454:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	f003 0301 	and.w	r3, r3, #1
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d002      	beq.n	800d466 <get_fat+0xbc>
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	091b      	lsrs	r3, r3, #4
 800d464:	e002      	b.n	800d46c <get_fat+0xc2>
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d46c:	617b      	str	r3, [r7, #20]
			break;
 800d46e:	e03f      	b.n	800d4f0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d470:	693b      	ldr	r3, [r7, #16]
 800d472:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	0a1b      	lsrs	r3, r3, #8
 800d478:	4413      	add	r3, r2
 800d47a:	4619      	mov	r1, r3
 800d47c:	6938      	ldr	r0, [r7, #16]
 800d47e:	f7ff fed9 	bl	800d234 <move_window>
 800d482:	4603      	mov	r3, r0
 800d484:	2b00      	cmp	r3, #0
 800d486:	d130      	bne.n	800d4ea <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	005b      	lsls	r3, r3, #1
 800d492:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d496:	4413      	add	r3, r2
 800d498:	4618      	mov	r0, r3
 800d49a:	f7ff fc1b 	bl	800ccd4 <ld_word>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	617b      	str	r3, [r7, #20]
			break;
 800d4a2:	e025      	b.n	800d4f0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d4a4:	693b      	ldr	r3, [r7, #16]
 800d4a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	09db      	lsrs	r3, r3, #7
 800d4ac:	4413      	add	r3, r2
 800d4ae:	4619      	mov	r1, r3
 800d4b0:	6938      	ldr	r0, [r7, #16]
 800d4b2:	f7ff febf 	bl	800d234 <move_window>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d118      	bne.n	800d4ee <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	009b      	lsls	r3, r3, #2
 800d4c6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d4ca:	4413      	add	r3, r2
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f7ff fc19 	bl	800cd04 <ld_dword>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d4d8:	617b      	str	r3, [r7, #20]
			break;
 800d4da:	e009      	b.n	800d4f0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d4dc:	2301      	movs	r3, #1
 800d4de:	617b      	str	r3, [r7, #20]
 800d4e0:	e006      	b.n	800d4f0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d4e2:	bf00      	nop
 800d4e4:	e004      	b.n	800d4f0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d4e6:	bf00      	nop
 800d4e8:	e002      	b.n	800d4f0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d4ea:	bf00      	nop
 800d4ec:	e000      	b.n	800d4f0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d4ee:	bf00      	nop
		}
	}

	return val;
 800d4f0:	697b      	ldr	r3, [r7, #20]
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3718      	adds	r7, #24
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}

0800d4fa <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d4fa:	b590      	push	{r4, r7, lr}
 800d4fc:	b089      	sub	sp, #36	; 0x24
 800d4fe:	af00      	add	r7, sp, #0
 800d500:	60f8      	str	r0, [r7, #12]
 800d502:	60b9      	str	r1, [r7, #8]
 800d504:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d506:	2302      	movs	r3, #2
 800d508:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	2b01      	cmp	r3, #1
 800d50e:	f240 80d9 	bls.w	800d6c4 <put_fat+0x1ca>
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	699b      	ldr	r3, [r3, #24]
 800d516:	68ba      	ldr	r2, [r7, #8]
 800d518:	429a      	cmp	r2, r3
 800d51a:	f080 80d3 	bcs.w	800d6c4 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	781b      	ldrb	r3, [r3, #0]
 800d522:	2b03      	cmp	r3, #3
 800d524:	f000 8096 	beq.w	800d654 <put_fat+0x15a>
 800d528:	2b03      	cmp	r3, #3
 800d52a:	f300 80cb 	bgt.w	800d6c4 <put_fat+0x1ca>
 800d52e:	2b01      	cmp	r3, #1
 800d530:	d002      	beq.n	800d538 <put_fat+0x3e>
 800d532:	2b02      	cmp	r3, #2
 800d534:	d06e      	beq.n	800d614 <put_fat+0x11a>
 800d536:	e0c5      	b.n	800d6c4 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	61bb      	str	r3, [r7, #24]
 800d53c:	69bb      	ldr	r3, [r7, #24]
 800d53e:	085b      	lsrs	r3, r3, #1
 800d540:	69ba      	ldr	r2, [r7, #24]
 800d542:	4413      	add	r3, r2
 800d544:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d54a:	69bb      	ldr	r3, [r7, #24]
 800d54c:	0a5b      	lsrs	r3, r3, #9
 800d54e:	4413      	add	r3, r2
 800d550:	4619      	mov	r1, r3
 800d552:	68f8      	ldr	r0, [r7, #12]
 800d554:	f7ff fe6e 	bl	800d234 <move_window>
 800d558:	4603      	mov	r3, r0
 800d55a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d55c:	7ffb      	ldrb	r3, [r7, #31]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	f040 80a9 	bne.w	800d6b6 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d56a:	69bb      	ldr	r3, [r7, #24]
 800d56c:	1c59      	adds	r1, r3, #1
 800d56e:	61b9      	str	r1, [r7, #24]
 800d570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d574:	4413      	add	r3, r2
 800d576:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	f003 0301 	and.w	r3, r3, #1
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d00d      	beq.n	800d59e <put_fat+0xa4>
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	781b      	ldrb	r3, [r3, #0]
 800d586:	b25b      	sxtb	r3, r3
 800d588:	f003 030f 	and.w	r3, r3, #15
 800d58c:	b25a      	sxtb	r2, r3
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	b2db      	uxtb	r3, r3
 800d592:	011b      	lsls	r3, r3, #4
 800d594:	b25b      	sxtb	r3, r3
 800d596:	4313      	orrs	r3, r2
 800d598:	b25b      	sxtb	r3, r3
 800d59a:	b2db      	uxtb	r3, r3
 800d59c:	e001      	b.n	800d5a2 <put_fat+0xa8>
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	b2db      	uxtb	r3, r3
 800d5a2:	697a      	ldr	r2, [r7, #20]
 800d5a4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	2201      	movs	r2, #1
 800d5aa:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5b0:	69bb      	ldr	r3, [r7, #24]
 800d5b2:	0a5b      	lsrs	r3, r3, #9
 800d5b4:	4413      	add	r3, r2
 800d5b6:	4619      	mov	r1, r3
 800d5b8:	68f8      	ldr	r0, [r7, #12]
 800d5ba:	f7ff fe3b 	bl	800d234 <move_window>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d5c2:	7ffb      	ldrb	r3, [r7, #31]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d178      	bne.n	800d6ba <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d5ce:	69bb      	ldr	r3, [r7, #24]
 800d5d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5d4:	4413      	add	r3, r2
 800d5d6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	f003 0301 	and.w	r3, r3, #1
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d003      	beq.n	800d5ea <put_fat+0xf0>
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	091b      	lsrs	r3, r3, #4
 800d5e6:	b2db      	uxtb	r3, r3
 800d5e8:	e00e      	b.n	800d608 <put_fat+0x10e>
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	781b      	ldrb	r3, [r3, #0]
 800d5ee:	b25b      	sxtb	r3, r3
 800d5f0:	f023 030f 	bic.w	r3, r3, #15
 800d5f4:	b25a      	sxtb	r2, r3
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	0a1b      	lsrs	r3, r3, #8
 800d5fa:	b25b      	sxtb	r3, r3
 800d5fc:	f003 030f 	and.w	r3, r3, #15
 800d600:	b25b      	sxtb	r3, r3
 800d602:	4313      	orrs	r3, r2
 800d604:	b25b      	sxtb	r3, r3
 800d606:	b2db      	uxtb	r3, r3
 800d608:	697a      	ldr	r2, [r7, #20]
 800d60a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	2201      	movs	r2, #1
 800d610:	70da      	strb	r2, [r3, #3]
			break;
 800d612:	e057      	b.n	800d6c4 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	0a1b      	lsrs	r3, r3, #8
 800d61c:	4413      	add	r3, r2
 800d61e:	4619      	mov	r1, r3
 800d620:	68f8      	ldr	r0, [r7, #12]
 800d622:	f7ff fe07 	bl	800d234 <move_window>
 800d626:	4603      	mov	r3, r0
 800d628:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d62a:	7ffb      	ldrb	r3, [r7, #31]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d146      	bne.n	800d6be <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	005b      	lsls	r3, r3, #1
 800d63a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d63e:	4413      	add	r3, r2
 800d640:	687a      	ldr	r2, [r7, #4]
 800d642:	b292      	uxth	r2, r2
 800d644:	4611      	mov	r1, r2
 800d646:	4618      	mov	r0, r3
 800d648:	f7ff fb7f 	bl	800cd4a <st_word>
			fs->wflag = 1;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	2201      	movs	r2, #1
 800d650:	70da      	strb	r2, [r3, #3]
			break;
 800d652:	e037      	b.n	800d6c4 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	09db      	lsrs	r3, r3, #7
 800d65c:	4413      	add	r3, r2
 800d65e:	4619      	mov	r1, r3
 800d660:	68f8      	ldr	r0, [r7, #12]
 800d662:	f7ff fde7 	bl	800d234 <move_window>
 800d666:	4603      	mov	r3, r0
 800d668:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d66a:	7ffb      	ldrb	r3, [r7, #31]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d128      	bne.n	800d6c2 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	009b      	lsls	r3, r3, #2
 800d680:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d684:	4413      	add	r3, r2
 800d686:	4618      	mov	r0, r3
 800d688:	f7ff fb3c 	bl	800cd04 <ld_dword>
 800d68c:	4603      	mov	r3, r0
 800d68e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d692:	4323      	orrs	r3, r4
 800d694:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	009b      	lsls	r3, r3, #2
 800d6a0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d6a4:	4413      	add	r3, r2
 800d6a6:	6879      	ldr	r1, [r7, #4]
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f7ff fb69 	bl	800cd80 <st_dword>
			fs->wflag = 1;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	2201      	movs	r2, #1
 800d6b2:	70da      	strb	r2, [r3, #3]
			break;
 800d6b4:	e006      	b.n	800d6c4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d6b6:	bf00      	nop
 800d6b8:	e004      	b.n	800d6c4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d6ba:	bf00      	nop
 800d6bc:	e002      	b.n	800d6c4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d6be:	bf00      	nop
 800d6c0:	e000      	b.n	800d6c4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d6c2:	bf00      	nop
		}
	}
	return res;
 800d6c4:	7ffb      	ldrb	r3, [r7, #31]
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	3724      	adds	r7, #36	; 0x24
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd90      	pop	{r4, r7, pc}

0800d6ce <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d6ce:	b580      	push	{r7, lr}
 800d6d0:	b088      	sub	sp, #32
 800d6d2:	af00      	add	r7, sp, #0
 800d6d4:	60f8      	str	r0, [r7, #12]
 800d6d6:	60b9      	str	r1, [r7, #8]
 800d6d8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d6e4:	68bb      	ldr	r3, [r7, #8]
 800d6e6:	2b01      	cmp	r3, #1
 800d6e8:	d904      	bls.n	800d6f4 <remove_chain+0x26>
 800d6ea:	69bb      	ldr	r3, [r7, #24]
 800d6ec:	699b      	ldr	r3, [r3, #24]
 800d6ee:	68ba      	ldr	r2, [r7, #8]
 800d6f0:	429a      	cmp	r2, r3
 800d6f2:	d301      	bcc.n	800d6f8 <remove_chain+0x2a>
 800d6f4:	2302      	movs	r3, #2
 800d6f6:	e04b      	b.n	800d790 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d00c      	beq.n	800d718 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d6fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d702:	6879      	ldr	r1, [r7, #4]
 800d704:	69b8      	ldr	r0, [r7, #24]
 800d706:	f7ff fef8 	bl	800d4fa <put_fat>
 800d70a:	4603      	mov	r3, r0
 800d70c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d70e:	7ffb      	ldrb	r3, [r7, #31]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d001      	beq.n	800d718 <remove_chain+0x4a>
 800d714:	7ffb      	ldrb	r3, [r7, #31]
 800d716:	e03b      	b.n	800d790 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d718:	68b9      	ldr	r1, [r7, #8]
 800d71a:	68f8      	ldr	r0, [r7, #12]
 800d71c:	f7ff fe45 	bl	800d3aa <get_fat>
 800d720:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d722:	697b      	ldr	r3, [r7, #20]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d031      	beq.n	800d78c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d728:	697b      	ldr	r3, [r7, #20]
 800d72a:	2b01      	cmp	r3, #1
 800d72c:	d101      	bne.n	800d732 <remove_chain+0x64>
 800d72e:	2302      	movs	r3, #2
 800d730:	e02e      	b.n	800d790 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d732:	697b      	ldr	r3, [r7, #20]
 800d734:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d738:	d101      	bne.n	800d73e <remove_chain+0x70>
 800d73a:	2301      	movs	r3, #1
 800d73c:	e028      	b.n	800d790 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d73e:	2200      	movs	r2, #0
 800d740:	68b9      	ldr	r1, [r7, #8]
 800d742:	69b8      	ldr	r0, [r7, #24]
 800d744:	f7ff fed9 	bl	800d4fa <put_fat>
 800d748:	4603      	mov	r3, r0
 800d74a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d74c:	7ffb      	ldrb	r3, [r7, #31]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d001      	beq.n	800d756 <remove_chain+0x88>
 800d752:	7ffb      	ldrb	r3, [r7, #31]
 800d754:	e01c      	b.n	800d790 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d756:	69bb      	ldr	r3, [r7, #24]
 800d758:	695a      	ldr	r2, [r3, #20]
 800d75a:	69bb      	ldr	r3, [r7, #24]
 800d75c:	699b      	ldr	r3, [r3, #24]
 800d75e:	3b02      	subs	r3, #2
 800d760:	429a      	cmp	r2, r3
 800d762:	d20b      	bcs.n	800d77c <remove_chain+0xae>
			fs->free_clst++;
 800d764:	69bb      	ldr	r3, [r7, #24]
 800d766:	695b      	ldr	r3, [r3, #20]
 800d768:	1c5a      	adds	r2, r3, #1
 800d76a:	69bb      	ldr	r3, [r7, #24]
 800d76c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800d76e:	69bb      	ldr	r3, [r7, #24]
 800d770:	791b      	ldrb	r3, [r3, #4]
 800d772:	f043 0301 	orr.w	r3, r3, #1
 800d776:	b2da      	uxtb	r2, r3
 800d778:	69bb      	ldr	r3, [r7, #24]
 800d77a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d77c:	697b      	ldr	r3, [r7, #20]
 800d77e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d780:	69bb      	ldr	r3, [r7, #24]
 800d782:	699b      	ldr	r3, [r3, #24]
 800d784:	68ba      	ldr	r2, [r7, #8]
 800d786:	429a      	cmp	r2, r3
 800d788:	d3c6      	bcc.n	800d718 <remove_chain+0x4a>
 800d78a:	e000      	b.n	800d78e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d78c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d78e:	2300      	movs	r3, #0
}
 800d790:	4618      	mov	r0, r3
 800d792:	3720      	adds	r7, #32
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}

0800d798 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b088      	sub	sp, #32
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d10d      	bne.n	800d7ca <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d7ae:	693b      	ldr	r3, [r7, #16]
 800d7b0:	691b      	ldr	r3, [r3, #16]
 800d7b2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d7b4:	69bb      	ldr	r3, [r7, #24]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d004      	beq.n	800d7c4 <create_chain+0x2c>
 800d7ba:	693b      	ldr	r3, [r7, #16]
 800d7bc:	699b      	ldr	r3, [r3, #24]
 800d7be:	69ba      	ldr	r2, [r7, #24]
 800d7c0:	429a      	cmp	r2, r3
 800d7c2:	d31b      	bcc.n	800d7fc <create_chain+0x64>
 800d7c4:	2301      	movs	r3, #1
 800d7c6:	61bb      	str	r3, [r7, #24]
 800d7c8:	e018      	b.n	800d7fc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d7ca:	6839      	ldr	r1, [r7, #0]
 800d7cc:	6878      	ldr	r0, [r7, #4]
 800d7ce:	f7ff fdec 	bl	800d3aa <get_fat>
 800d7d2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	2b01      	cmp	r3, #1
 800d7d8:	d801      	bhi.n	800d7de <create_chain+0x46>
 800d7da:	2301      	movs	r3, #1
 800d7dc:	e070      	b.n	800d8c0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d7e4:	d101      	bne.n	800d7ea <create_chain+0x52>
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	e06a      	b.n	800d8c0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d7ea:	693b      	ldr	r3, [r7, #16]
 800d7ec:	699b      	ldr	r3, [r3, #24]
 800d7ee:	68fa      	ldr	r2, [r7, #12]
 800d7f0:	429a      	cmp	r2, r3
 800d7f2:	d201      	bcs.n	800d7f8 <create_chain+0x60>
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	e063      	b.n	800d8c0 <create_chain+0x128>
		scl = clst;
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d7fc:	69bb      	ldr	r3, [r7, #24]
 800d7fe:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d800:	69fb      	ldr	r3, [r7, #28]
 800d802:	3301      	adds	r3, #1
 800d804:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d806:	693b      	ldr	r3, [r7, #16]
 800d808:	699b      	ldr	r3, [r3, #24]
 800d80a:	69fa      	ldr	r2, [r7, #28]
 800d80c:	429a      	cmp	r2, r3
 800d80e:	d307      	bcc.n	800d820 <create_chain+0x88>
				ncl = 2;
 800d810:	2302      	movs	r3, #2
 800d812:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d814:	69fa      	ldr	r2, [r7, #28]
 800d816:	69bb      	ldr	r3, [r7, #24]
 800d818:	429a      	cmp	r2, r3
 800d81a:	d901      	bls.n	800d820 <create_chain+0x88>
 800d81c:	2300      	movs	r3, #0
 800d81e:	e04f      	b.n	800d8c0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d820:	69f9      	ldr	r1, [r7, #28]
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	f7ff fdc1 	bl	800d3aa <get_fat>
 800d828:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d00e      	beq.n	800d84e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	2b01      	cmp	r3, #1
 800d834:	d003      	beq.n	800d83e <create_chain+0xa6>
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d83c:	d101      	bne.n	800d842 <create_chain+0xaa>
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	e03e      	b.n	800d8c0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d842:	69fa      	ldr	r2, [r7, #28]
 800d844:	69bb      	ldr	r3, [r7, #24]
 800d846:	429a      	cmp	r2, r3
 800d848:	d1da      	bne.n	800d800 <create_chain+0x68>
 800d84a:	2300      	movs	r3, #0
 800d84c:	e038      	b.n	800d8c0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d84e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d850:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d854:	69f9      	ldr	r1, [r7, #28]
 800d856:	6938      	ldr	r0, [r7, #16]
 800d858:	f7ff fe4f 	bl	800d4fa <put_fat>
 800d85c:	4603      	mov	r3, r0
 800d85e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d860:	7dfb      	ldrb	r3, [r7, #23]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d109      	bne.n	800d87a <create_chain+0xe2>
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d006      	beq.n	800d87a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d86c:	69fa      	ldr	r2, [r7, #28]
 800d86e:	6839      	ldr	r1, [r7, #0]
 800d870:	6938      	ldr	r0, [r7, #16]
 800d872:	f7ff fe42 	bl	800d4fa <put_fat>
 800d876:	4603      	mov	r3, r0
 800d878:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d87a:	7dfb      	ldrb	r3, [r7, #23]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d116      	bne.n	800d8ae <create_chain+0x116>
		fs->last_clst = ncl;
 800d880:	693b      	ldr	r3, [r7, #16]
 800d882:	69fa      	ldr	r2, [r7, #28]
 800d884:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d886:	693b      	ldr	r3, [r7, #16]
 800d888:	695a      	ldr	r2, [r3, #20]
 800d88a:	693b      	ldr	r3, [r7, #16]
 800d88c:	699b      	ldr	r3, [r3, #24]
 800d88e:	3b02      	subs	r3, #2
 800d890:	429a      	cmp	r2, r3
 800d892:	d804      	bhi.n	800d89e <create_chain+0x106>
 800d894:	693b      	ldr	r3, [r7, #16]
 800d896:	695b      	ldr	r3, [r3, #20]
 800d898:	1e5a      	subs	r2, r3, #1
 800d89a:	693b      	ldr	r3, [r7, #16]
 800d89c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800d89e:	693b      	ldr	r3, [r7, #16]
 800d8a0:	791b      	ldrb	r3, [r3, #4]
 800d8a2:	f043 0301 	orr.w	r3, r3, #1
 800d8a6:	b2da      	uxtb	r2, r3
 800d8a8:	693b      	ldr	r3, [r7, #16]
 800d8aa:	711a      	strb	r2, [r3, #4]
 800d8ac:	e007      	b.n	800d8be <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d8ae:	7dfb      	ldrb	r3, [r7, #23]
 800d8b0:	2b01      	cmp	r3, #1
 800d8b2:	d102      	bne.n	800d8ba <create_chain+0x122>
 800d8b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d8b8:	e000      	b.n	800d8bc <create_chain+0x124>
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d8be:	69fb      	ldr	r3, [r7, #28]
}
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	3720      	adds	r7, #32
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}

0800d8c8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d8c8:	b480      	push	{r7}
 800d8ca:	b087      	sub	sp, #28
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
 800d8d0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8dc:	3304      	adds	r3, #4
 800d8de:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	0a5b      	lsrs	r3, r3, #9
 800d8e4:	68fa      	ldr	r2, [r7, #12]
 800d8e6:	8952      	ldrh	r2, [r2, #10]
 800d8e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d8ec:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	1d1a      	adds	r2, r3, #4
 800d8f2:	613a      	str	r2, [r7, #16]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d101      	bne.n	800d902 <clmt_clust+0x3a>
 800d8fe:	2300      	movs	r3, #0
 800d900:	e010      	b.n	800d924 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d902:	697a      	ldr	r2, [r7, #20]
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	429a      	cmp	r2, r3
 800d908:	d307      	bcc.n	800d91a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d90a:	697a      	ldr	r2, [r7, #20]
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	1ad3      	subs	r3, r2, r3
 800d910:	617b      	str	r3, [r7, #20]
 800d912:	693b      	ldr	r3, [r7, #16]
 800d914:	3304      	adds	r3, #4
 800d916:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d918:	e7e9      	b.n	800d8ee <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d91a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	681a      	ldr	r2, [r3, #0]
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	4413      	add	r3, r2
}
 800d924:	4618      	mov	r0, r3
 800d926:	371c      	adds	r7, #28
 800d928:	46bd      	mov	sp, r7
 800d92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92e:	4770      	bx	lr

0800d930 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b086      	sub	sp, #24
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
 800d938:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d946:	d204      	bcs.n	800d952 <dir_sdi+0x22>
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	f003 031f 	and.w	r3, r3, #31
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d001      	beq.n	800d956 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d952:	2302      	movs	r3, #2
 800d954:	e063      	b.n	800da1e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	683a      	ldr	r2, [r7, #0]
 800d95a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	689b      	ldr	r3, [r3, #8]
 800d960:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d962:	697b      	ldr	r3, [r7, #20]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d106      	bne.n	800d976 <dir_sdi+0x46>
 800d968:	693b      	ldr	r3, [r7, #16]
 800d96a:	781b      	ldrb	r3, [r3, #0]
 800d96c:	2b02      	cmp	r3, #2
 800d96e:	d902      	bls.n	800d976 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d970:	693b      	ldr	r3, [r7, #16]
 800d972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d974:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d10c      	bne.n	800d996 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	095b      	lsrs	r3, r3, #5
 800d980:	693a      	ldr	r2, [r7, #16]
 800d982:	8912      	ldrh	r2, [r2, #8]
 800d984:	4293      	cmp	r3, r2
 800d986:	d301      	bcc.n	800d98c <dir_sdi+0x5c>
 800d988:	2302      	movs	r3, #2
 800d98a:	e048      	b.n	800da1e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d98c:	693b      	ldr	r3, [r7, #16]
 800d98e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	61da      	str	r2, [r3, #28]
 800d994:	e029      	b.n	800d9ea <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	895b      	ldrh	r3, [r3, #10]
 800d99a:	025b      	lsls	r3, r3, #9
 800d99c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d99e:	e019      	b.n	800d9d4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6979      	ldr	r1, [r7, #20]
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f7ff fd00 	bl	800d3aa <get_fat>
 800d9aa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d9ac:	697b      	ldr	r3, [r7, #20]
 800d9ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d9b2:	d101      	bne.n	800d9b8 <dir_sdi+0x88>
 800d9b4:	2301      	movs	r3, #1
 800d9b6:	e032      	b.n	800da1e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d9b8:	697b      	ldr	r3, [r7, #20]
 800d9ba:	2b01      	cmp	r3, #1
 800d9bc:	d904      	bls.n	800d9c8 <dir_sdi+0x98>
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	699b      	ldr	r3, [r3, #24]
 800d9c2:	697a      	ldr	r2, [r7, #20]
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	d301      	bcc.n	800d9cc <dir_sdi+0x9c>
 800d9c8:	2302      	movs	r3, #2
 800d9ca:	e028      	b.n	800da1e <dir_sdi+0xee>
			ofs -= csz;
 800d9cc:	683a      	ldr	r2, [r7, #0]
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	1ad3      	subs	r3, r2, r3
 800d9d2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d9d4:	683a      	ldr	r2, [r7, #0]
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d2e1      	bcs.n	800d9a0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d9dc:	6979      	ldr	r1, [r7, #20]
 800d9de:	6938      	ldr	r0, [r7, #16]
 800d9e0:	f7ff fcc4 	bl	800d36c <clust2sect>
 800d9e4:	4602      	mov	r2, r0
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	697a      	ldr	r2, [r7, #20]
 800d9ee:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	69db      	ldr	r3, [r3, #28]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d101      	bne.n	800d9fc <dir_sdi+0xcc>
 800d9f8:	2302      	movs	r3, #2
 800d9fa:	e010      	b.n	800da1e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	69da      	ldr	r2, [r3, #28]
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	0a5b      	lsrs	r3, r3, #9
 800da04:	441a      	add	r2, r3
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da16:	441a      	add	r2, r3
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800da1c:	2300      	movs	r3, #0
}
 800da1e:	4618      	mov	r0, r3
 800da20:	3718      	adds	r7, #24
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}

0800da26 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800da26:	b580      	push	{r7, lr}
 800da28:	b086      	sub	sp, #24
 800da2a:	af00      	add	r7, sp, #0
 800da2c:	6078      	str	r0, [r7, #4]
 800da2e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	695b      	ldr	r3, [r3, #20]
 800da3a:	3320      	adds	r3, #32
 800da3c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	69db      	ldr	r3, [r3, #28]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d003      	beq.n	800da4e <dir_next+0x28>
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800da4c:	d301      	bcc.n	800da52 <dir_next+0x2c>
 800da4e:	2304      	movs	r3, #4
 800da50:	e0aa      	b.n	800dba8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da58:	2b00      	cmp	r3, #0
 800da5a:	f040 8098 	bne.w	800db8e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	69db      	ldr	r3, [r3, #28]
 800da62:	1c5a      	adds	r2, r3, #1
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	699b      	ldr	r3, [r3, #24]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d10b      	bne.n	800da88 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	095b      	lsrs	r3, r3, #5
 800da74:	68fa      	ldr	r2, [r7, #12]
 800da76:	8912      	ldrh	r2, [r2, #8]
 800da78:	4293      	cmp	r3, r2
 800da7a:	f0c0 8088 	bcc.w	800db8e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2200      	movs	r2, #0
 800da82:	61da      	str	r2, [r3, #28]
 800da84:	2304      	movs	r3, #4
 800da86:	e08f      	b.n	800dba8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	0a5b      	lsrs	r3, r3, #9
 800da8c:	68fa      	ldr	r2, [r7, #12]
 800da8e:	8952      	ldrh	r2, [r2, #10]
 800da90:	3a01      	subs	r2, #1
 800da92:	4013      	ands	r3, r2
 800da94:	2b00      	cmp	r3, #0
 800da96:	d17a      	bne.n	800db8e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800da98:	687a      	ldr	r2, [r7, #4]
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	699b      	ldr	r3, [r3, #24]
 800da9e:	4619      	mov	r1, r3
 800daa0:	4610      	mov	r0, r2
 800daa2:	f7ff fc82 	bl	800d3aa <get_fat>
 800daa6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	2b01      	cmp	r3, #1
 800daac:	d801      	bhi.n	800dab2 <dir_next+0x8c>
 800daae:	2302      	movs	r3, #2
 800dab0:	e07a      	b.n	800dba8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dab8:	d101      	bne.n	800dabe <dir_next+0x98>
 800daba:	2301      	movs	r3, #1
 800dabc:	e074      	b.n	800dba8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	699b      	ldr	r3, [r3, #24]
 800dac2:	697a      	ldr	r2, [r7, #20]
 800dac4:	429a      	cmp	r2, r3
 800dac6:	d358      	bcc.n	800db7a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d104      	bne.n	800dad8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2200      	movs	r2, #0
 800dad2:	61da      	str	r2, [r3, #28]
 800dad4:	2304      	movs	r3, #4
 800dad6:	e067      	b.n	800dba8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800dad8:	687a      	ldr	r2, [r7, #4]
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	699b      	ldr	r3, [r3, #24]
 800dade:	4619      	mov	r1, r3
 800dae0:	4610      	mov	r0, r2
 800dae2:	f7ff fe59 	bl	800d798 <create_chain>
 800dae6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800dae8:	697b      	ldr	r3, [r7, #20]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d101      	bne.n	800daf2 <dir_next+0xcc>
 800daee:	2307      	movs	r3, #7
 800daf0:	e05a      	b.n	800dba8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800daf2:	697b      	ldr	r3, [r7, #20]
 800daf4:	2b01      	cmp	r3, #1
 800daf6:	d101      	bne.n	800dafc <dir_next+0xd6>
 800daf8:	2302      	movs	r3, #2
 800dafa:	e055      	b.n	800dba8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db02:	d101      	bne.n	800db08 <dir_next+0xe2>
 800db04:	2301      	movs	r3, #1
 800db06:	e04f      	b.n	800dba8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800db08:	68f8      	ldr	r0, [r7, #12]
 800db0a:	f7ff fb4f 	bl	800d1ac <sync_window>
 800db0e:	4603      	mov	r3, r0
 800db10:	2b00      	cmp	r3, #0
 800db12:	d001      	beq.n	800db18 <dir_next+0xf2>
 800db14:	2301      	movs	r3, #1
 800db16:	e047      	b.n	800dba8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	3334      	adds	r3, #52	; 0x34
 800db1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db20:	2100      	movs	r1, #0
 800db22:	4618      	mov	r0, r3
 800db24:	f7ff f979 	bl	800ce1a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800db28:	2300      	movs	r3, #0
 800db2a:	613b      	str	r3, [r7, #16]
 800db2c:	6979      	ldr	r1, [r7, #20]
 800db2e:	68f8      	ldr	r0, [r7, #12]
 800db30:	f7ff fc1c 	bl	800d36c <clust2sect>
 800db34:	4602      	mov	r2, r0
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	631a      	str	r2, [r3, #48]	; 0x30
 800db3a:	e012      	b.n	800db62 <dir_next+0x13c>
						fs->wflag = 1;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	2201      	movs	r2, #1
 800db40:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800db42:	68f8      	ldr	r0, [r7, #12]
 800db44:	f7ff fb32 	bl	800d1ac <sync_window>
 800db48:	4603      	mov	r3, r0
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d001      	beq.n	800db52 <dir_next+0x12c>
 800db4e:	2301      	movs	r3, #1
 800db50:	e02a      	b.n	800dba8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800db52:	693b      	ldr	r3, [r7, #16]
 800db54:	3301      	adds	r3, #1
 800db56:	613b      	str	r3, [r7, #16]
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db5c:	1c5a      	adds	r2, r3, #1
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	631a      	str	r2, [r3, #48]	; 0x30
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	895b      	ldrh	r3, [r3, #10]
 800db66:	461a      	mov	r2, r3
 800db68:	693b      	ldr	r3, [r7, #16]
 800db6a:	4293      	cmp	r3, r2
 800db6c:	d3e6      	bcc.n	800db3c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800db72:	693b      	ldr	r3, [r7, #16]
 800db74:	1ad2      	subs	r2, r2, r3
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	697a      	ldr	r2, [r7, #20]
 800db7e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800db80:	6979      	ldr	r1, [r7, #20]
 800db82:	68f8      	ldr	r0, [r7, #12]
 800db84:	f7ff fbf2 	bl	800d36c <clust2sect>
 800db88:	4602      	mov	r2, r0
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	68ba      	ldr	r2, [r7, #8]
 800db92:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dba0:	441a      	add	r2, r3
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800dba6:	2300      	movs	r3, #0
}
 800dba8:	4618      	mov	r0, r3
 800dbaa:	3718      	adds	r7, #24
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bd80      	pop	{r7, pc}

0800dbb0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b086      	sub	sp, #24
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
 800dbb8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800dbc0:	2100      	movs	r1, #0
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f7ff feb4 	bl	800d930 <dir_sdi>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dbcc:	7dfb      	ldrb	r3, [r7, #23]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d12b      	bne.n	800dc2a <dir_alloc+0x7a>
		n = 0;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	69db      	ldr	r3, [r3, #28]
 800dbda:	4619      	mov	r1, r3
 800dbdc:	68f8      	ldr	r0, [r7, #12]
 800dbde:	f7ff fb29 	bl	800d234 <move_window>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dbe6:	7dfb      	ldrb	r3, [r7, #23]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d11d      	bne.n	800dc28 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6a1b      	ldr	r3, [r3, #32]
 800dbf0:	781b      	ldrb	r3, [r3, #0]
 800dbf2:	2be5      	cmp	r3, #229	; 0xe5
 800dbf4:	d004      	beq.n	800dc00 <dir_alloc+0x50>
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	6a1b      	ldr	r3, [r3, #32]
 800dbfa:	781b      	ldrb	r3, [r3, #0]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d107      	bne.n	800dc10 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800dc00:	693b      	ldr	r3, [r7, #16]
 800dc02:	3301      	adds	r3, #1
 800dc04:	613b      	str	r3, [r7, #16]
 800dc06:	693a      	ldr	r2, [r7, #16]
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	429a      	cmp	r2, r3
 800dc0c:	d102      	bne.n	800dc14 <dir_alloc+0x64>
 800dc0e:	e00c      	b.n	800dc2a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800dc10:	2300      	movs	r3, #0
 800dc12:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800dc14:	2101      	movs	r1, #1
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f7ff ff05 	bl	800da26 <dir_next>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800dc20:	7dfb      	ldrb	r3, [r7, #23]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d0d7      	beq.n	800dbd6 <dir_alloc+0x26>
 800dc26:	e000      	b.n	800dc2a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800dc28:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800dc2a:	7dfb      	ldrb	r3, [r7, #23]
 800dc2c:	2b04      	cmp	r3, #4
 800dc2e:	d101      	bne.n	800dc34 <dir_alloc+0x84>
 800dc30:	2307      	movs	r3, #7
 800dc32:	75fb      	strb	r3, [r7, #23]
	return res;
 800dc34:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc36:	4618      	mov	r0, r3
 800dc38:	3718      	adds	r7, #24
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	bd80      	pop	{r7, pc}

0800dc3e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800dc3e:	b580      	push	{r7, lr}
 800dc40:	b084      	sub	sp, #16
 800dc42:	af00      	add	r7, sp, #0
 800dc44:	6078      	str	r0, [r7, #4]
 800dc46:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	331a      	adds	r3, #26
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f7ff f841 	bl	800ccd4 <ld_word>
 800dc52:	4603      	mov	r3, r0
 800dc54:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	781b      	ldrb	r3, [r3, #0]
 800dc5a:	2b03      	cmp	r3, #3
 800dc5c:	d109      	bne.n	800dc72 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	3314      	adds	r3, #20
 800dc62:	4618      	mov	r0, r3
 800dc64:	f7ff f836 	bl	800ccd4 <ld_word>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	041b      	lsls	r3, r3, #16
 800dc6c:	68fa      	ldr	r2, [r7, #12]
 800dc6e:	4313      	orrs	r3, r2
 800dc70:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800dc72:	68fb      	ldr	r3, [r7, #12]
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	3710      	adds	r7, #16
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}

0800dc7c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b084      	sub	sp, #16
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	60f8      	str	r0, [r7, #12]
 800dc84:	60b9      	str	r1, [r7, #8]
 800dc86:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	331a      	adds	r3, #26
 800dc8c:	687a      	ldr	r2, [r7, #4]
 800dc8e:	b292      	uxth	r2, r2
 800dc90:	4611      	mov	r1, r2
 800dc92:	4618      	mov	r0, r3
 800dc94:	f7ff f859 	bl	800cd4a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	781b      	ldrb	r3, [r3, #0]
 800dc9c:	2b03      	cmp	r3, #3
 800dc9e:	d109      	bne.n	800dcb4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	f103 0214 	add.w	r2, r3, #20
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	0c1b      	lsrs	r3, r3, #16
 800dcaa:	b29b      	uxth	r3, r3
 800dcac:	4619      	mov	r1, r3
 800dcae:	4610      	mov	r0, r2
 800dcb0:	f7ff f84b 	bl	800cd4a <st_word>
	}
}
 800dcb4:	bf00      	nop
 800dcb6:	3710      	adds	r7, #16
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}

0800dcbc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800dcbc:	b590      	push	{r4, r7, lr}
 800dcbe:	b087      	sub	sp, #28
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
 800dcc4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	331a      	adds	r3, #26
 800dcca:	4618      	mov	r0, r3
 800dccc:	f7ff f802 	bl	800ccd4 <ld_word>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d001      	beq.n	800dcda <cmp_lfn+0x1e>
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	e059      	b.n	800dd8e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	781b      	ldrb	r3, [r3, #0]
 800dcde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dce2:	1e5a      	subs	r2, r3, #1
 800dce4:	4613      	mov	r3, r2
 800dce6:	005b      	lsls	r3, r3, #1
 800dce8:	4413      	add	r3, r2
 800dcea:	009b      	lsls	r3, r3, #2
 800dcec:	4413      	add	r3, r2
 800dcee:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	81fb      	strh	r3, [r7, #14]
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	613b      	str	r3, [r7, #16]
 800dcf8:	e033      	b.n	800dd62 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800dcfa:	4a27      	ldr	r2, [pc, #156]	; (800dd98 <cmp_lfn+0xdc>)
 800dcfc:	693b      	ldr	r3, [r7, #16]
 800dcfe:	4413      	add	r3, r2
 800dd00:	781b      	ldrb	r3, [r3, #0]
 800dd02:	461a      	mov	r2, r3
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	4413      	add	r3, r2
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f7fe ffe3 	bl	800ccd4 <ld_word>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800dd12:	89fb      	ldrh	r3, [r7, #14]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d01a      	beq.n	800dd4e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	2bfe      	cmp	r3, #254	; 0xfe
 800dd1c:	d812      	bhi.n	800dd44 <cmp_lfn+0x88>
 800dd1e:	89bb      	ldrh	r3, [r7, #12]
 800dd20:	4618      	mov	r0, r3
 800dd22:	f001 ff2d 	bl	800fb80 <ff_wtoupper>
 800dd26:	4603      	mov	r3, r0
 800dd28:	461c      	mov	r4, r3
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	1c5a      	adds	r2, r3, #1
 800dd2e:	617a      	str	r2, [r7, #20]
 800dd30:	005b      	lsls	r3, r3, #1
 800dd32:	687a      	ldr	r2, [r7, #4]
 800dd34:	4413      	add	r3, r2
 800dd36:	881b      	ldrh	r3, [r3, #0]
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f001 ff21 	bl	800fb80 <ff_wtoupper>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	429c      	cmp	r4, r3
 800dd42:	d001      	beq.n	800dd48 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800dd44:	2300      	movs	r3, #0
 800dd46:	e022      	b.n	800dd8e <cmp_lfn+0xd2>
			}
			wc = uc;
 800dd48:	89bb      	ldrh	r3, [r7, #12]
 800dd4a:	81fb      	strh	r3, [r7, #14]
 800dd4c:	e006      	b.n	800dd5c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800dd4e:	89bb      	ldrh	r3, [r7, #12]
 800dd50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd54:	4293      	cmp	r3, r2
 800dd56:	d001      	beq.n	800dd5c <cmp_lfn+0xa0>
 800dd58:	2300      	movs	r3, #0
 800dd5a:	e018      	b.n	800dd8e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800dd5c:	693b      	ldr	r3, [r7, #16]
 800dd5e:	3301      	adds	r3, #1
 800dd60:	613b      	str	r3, [r7, #16]
 800dd62:	693b      	ldr	r3, [r7, #16]
 800dd64:	2b0c      	cmp	r3, #12
 800dd66:	d9c8      	bls.n	800dcfa <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	781b      	ldrb	r3, [r3, #0]
 800dd6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d00b      	beq.n	800dd8c <cmp_lfn+0xd0>
 800dd74:	89fb      	ldrh	r3, [r7, #14]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d008      	beq.n	800dd8c <cmp_lfn+0xd0>
 800dd7a:	697b      	ldr	r3, [r7, #20]
 800dd7c:	005b      	lsls	r3, r3, #1
 800dd7e:	687a      	ldr	r2, [r7, #4]
 800dd80:	4413      	add	r3, r2
 800dd82:	881b      	ldrh	r3, [r3, #0]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d001      	beq.n	800dd8c <cmp_lfn+0xd0>
 800dd88:	2300      	movs	r3, #0
 800dd8a:	e000      	b.n	800dd8e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800dd8c:	2301      	movs	r3, #1
}
 800dd8e:	4618      	mov	r0, r3
 800dd90:	371c      	adds	r7, #28
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd90      	pop	{r4, r7, pc}
 800dd96:	bf00      	nop
 800dd98:	08011f6c 	.word	0x08011f6c

0800dd9c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b088      	sub	sp, #32
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	60f8      	str	r0, [r7, #12]
 800dda4:	60b9      	str	r1, [r7, #8]
 800dda6:	4611      	mov	r1, r2
 800dda8:	461a      	mov	r2, r3
 800ddaa:	460b      	mov	r3, r1
 800ddac:	71fb      	strb	r3, [r7, #7]
 800ddae:	4613      	mov	r3, r2
 800ddb0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ddb2:	68bb      	ldr	r3, [r7, #8]
 800ddb4:	330d      	adds	r3, #13
 800ddb6:	79ba      	ldrb	r2, [r7, #6]
 800ddb8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	330b      	adds	r3, #11
 800ddbe:	220f      	movs	r2, #15
 800ddc0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ddc2:	68bb      	ldr	r3, [r7, #8]
 800ddc4:	330c      	adds	r3, #12
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	331a      	adds	r3, #26
 800ddce:	2100      	movs	r1, #0
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f7fe ffba 	bl	800cd4a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ddd6:	79fb      	ldrb	r3, [r7, #7]
 800ddd8:	1e5a      	subs	r2, r3, #1
 800ddda:	4613      	mov	r3, r2
 800dddc:	005b      	lsls	r3, r3, #1
 800ddde:	4413      	add	r3, r2
 800dde0:	009b      	lsls	r3, r3, #2
 800dde2:	4413      	add	r3, r2
 800dde4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800dde6:	2300      	movs	r3, #0
 800dde8:	82fb      	strh	r3, [r7, #22]
 800ddea:	2300      	movs	r3, #0
 800ddec:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ddee:	8afb      	ldrh	r3, [r7, #22]
 800ddf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ddf4:	4293      	cmp	r3, r2
 800ddf6:	d007      	beq.n	800de08 <put_lfn+0x6c>
 800ddf8:	69fb      	ldr	r3, [r7, #28]
 800ddfa:	1c5a      	adds	r2, r3, #1
 800ddfc:	61fa      	str	r2, [r7, #28]
 800ddfe:	005b      	lsls	r3, r3, #1
 800de00:	68fa      	ldr	r2, [r7, #12]
 800de02:	4413      	add	r3, r2
 800de04:	881b      	ldrh	r3, [r3, #0]
 800de06:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800de08:	4a17      	ldr	r2, [pc, #92]	; (800de68 <put_lfn+0xcc>)
 800de0a:	69bb      	ldr	r3, [r7, #24]
 800de0c:	4413      	add	r3, r2
 800de0e:	781b      	ldrb	r3, [r3, #0]
 800de10:	461a      	mov	r2, r3
 800de12:	68bb      	ldr	r3, [r7, #8]
 800de14:	4413      	add	r3, r2
 800de16:	8afa      	ldrh	r2, [r7, #22]
 800de18:	4611      	mov	r1, r2
 800de1a:	4618      	mov	r0, r3
 800de1c:	f7fe ff95 	bl	800cd4a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800de20:	8afb      	ldrh	r3, [r7, #22]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d102      	bne.n	800de2c <put_lfn+0x90>
 800de26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800de2a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800de2c:	69bb      	ldr	r3, [r7, #24]
 800de2e:	3301      	adds	r3, #1
 800de30:	61bb      	str	r3, [r7, #24]
 800de32:	69bb      	ldr	r3, [r7, #24]
 800de34:	2b0c      	cmp	r3, #12
 800de36:	d9da      	bls.n	800ddee <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800de38:	8afb      	ldrh	r3, [r7, #22]
 800de3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de3e:	4293      	cmp	r3, r2
 800de40:	d006      	beq.n	800de50 <put_lfn+0xb4>
 800de42:	69fb      	ldr	r3, [r7, #28]
 800de44:	005b      	lsls	r3, r3, #1
 800de46:	68fa      	ldr	r2, [r7, #12]
 800de48:	4413      	add	r3, r2
 800de4a:	881b      	ldrh	r3, [r3, #0]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d103      	bne.n	800de58 <put_lfn+0xbc>
 800de50:	79fb      	ldrb	r3, [r7, #7]
 800de52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de56:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	79fa      	ldrb	r2, [r7, #7]
 800de5c:	701a      	strb	r2, [r3, #0]
}
 800de5e:	bf00      	nop
 800de60:	3720      	adds	r7, #32
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}
 800de66:	bf00      	nop
 800de68:	08011f6c 	.word	0x08011f6c

0800de6c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b08c      	sub	sp, #48	; 0x30
 800de70:	af00      	add	r7, sp, #0
 800de72:	60f8      	str	r0, [r7, #12]
 800de74:	60b9      	str	r1, [r7, #8]
 800de76:	607a      	str	r2, [r7, #4]
 800de78:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800de7a:	220b      	movs	r2, #11
 800de7c:	68b9      	ldr	r1, [r7, #8]
 800de7e:	68f8      	ldr	r0, [r7, #12]
 800de80:	f7fe ffaa 	bl	800cdd8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	2b05      	cmp	r3, #5
 800de88:	d929      	bls.n	800dede <gen_numname+0x72>
		sr = seq;
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800de8e:	e020      	b.n	800ded2 <gen_numname+0x66>
			wc = *lfn++;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	1c9a      	adds	r2, r3, #2
 800de94:	607a      	str	r2, [r7, #4]
 800de96:	881b      	ldrh	r3, [r3, #0]
 800de98:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800de9a:	2300      	movs	r3, #0
 800de9c:	62bb      	str	r3, [r7, #40]	; 0x28
 800de9e:	e015      	b.n	800decc <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800dea0:	69fb      	ldr	r3, [r7, #28]
 800dea2:	005a      	lsls	r2, r3, #1
 800dea4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dea6:	f003 0301 	and.w	r3, r3, #1
 800deaa:	4413      	add	r3, r2
 800deac:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800deae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800deb0:	085b      	lsrs	r3, r3, #1
 800deb2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800deb4:	69fb      	ldr	r3, [r7, #28]
 800deb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800deba:	2b00      	cmp	r3, #0
 800debc:	d003      	beq.n	800dec6 <gen_numname+0x5a>
 800debe:	69fa      	ldr	r2, [r7, #28]
 800dec0:	4b30      	ldr	r3, [pc, #192]	; (800df84 <gen_numname+0x118>)
 800dec2:	4053      	eors	r3, r2
 800dec4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800dec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec8:	3301      	adds	r3, #1
 800deca:	62bb      	str	r3, [r7, #40]	; 0x28
 800decc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dece:	2b0f      	cmp	r3, #15
 800ded0:	d9e6      	bls.n	800dea0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	881b      	ldrh	r3, [r3, #0]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d1da      	bne.n	800de90 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800deda:	69fb      	ldr	r3, [r7, #28]
 800dedc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800dede:	2307      	movs	r3, #7
 800dee0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	b2db      	uxtb	r3, r3
 800dee6:	f003 030f 	and.w	r3, r3, #15
 800deea:	b2db      	uxtb	r3, r3
 800deec:	3330      	adds	r3, #48	; 0x30
 800deee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800def2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800def6:	2b39      	cmp	r3, #57	; 0x39
 800def8:	d904      	bls.n	800df04 <gen_numname+0x98>
 800defa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800defe:	3307      	adds	r3, #7
 800df00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800df04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df06:	1e5a      	subs	r2, r3, #1
 800df08:	62ba      	str	r2, [r7, #40]	; 0x28
 800df0a:	3330      	adds	r3, #48	; 0x30
 800df0c:	443b      	add	r3, r7
 800df0e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800df12:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	091b      	lsrs	r3, r3, #4
 800df1a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d1df      	bne.n	800dee2 <gen_numname+0x76>
	ns[i] = '~';
 800df22:	f107 0214 	add.w	r2, r7, #20
 800df26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df28:	4413      	add	r3, r2
 800df2a:	227e      	movs	r2, #126	; 0x7e
 800df2c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800df2e:	2300      	movs	r3, #0
 800df30:	627b      	str	r3, [r7, #36]	; 0x24
 800df32:	e002      	b.n	800df3a <gen_numname+0xce>
 800df34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df36:	3301      	adds	r3, #1
 800df38:	627b      	str	r3, [r7, #36]	; 0x24
 800df3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df3e:	429a      	cmp	r2, r3
 800df40:	d205      	bcs.n	800df4e <gen_numname+0xe2>
 800df42:	68fa      	ldr	r2, [r7, #12]
 800df44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df46:	4413      	add	r3, r2
 800df48:	781b      	ldrb	r3, [r3, #0]
 800df4a:	2b20      	cmp	r3, #32
 800df4c:	d1f2      	bne.n	800df34 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800df4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df50:	2b07      	cmp	r3, #7
 800df52:	d807      	bhi.n	800df64 <gen_numname+0xf8>
 800df54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df56:	1c5a      	adds	r2, r3, #1
 800df58:	62ba      	str	r2, [r7, #40]	; 0x28
 800df5a:	3330      	adds	r3, #48	; 0x30
 800df5c:	443b      	add	r3, r7
 800df5e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800df62:	e000      	b.n	800df66 <gen_numname+0xfa>
 800df64:	2120      	movs	r1, #32
 800df66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df68:	1c5a      	adds	r2, r3, #1
 800df6a:	627a      	str	r2, [r7, #36]	; 0x24
 800df6c:	68fa      	ldr	r2, [r7, #12]
 800df6e:	4413      	add	r3, r2
 800df70:	460a      	mov	r2, r1
 800df72:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800df74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df76:	2b07      	cmp	r3, #7
 800df78:	d9e9      	bls.n	800df4e <gen_numname+0xe2>
}
 800df7a:	bf00      	nop
 800df7c:	bf00      	nop
 800df7e:	3730      	adds	r7, #48	; 0x30
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}
 800df84:	00011021 	.word	0x00011021

0800df88 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800df88:	b480      	push	{r7}
 800df8a:	b085      	sub	sp, #20
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800df90:	2300      	movs	r3, #0
 800df92:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800df94:	230b      	movs	r3, #11
 800df96:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800df98:	7bfb      	ldrb	r3, [r7, #15]
 800df9a:	b2da      	uxtb	r2, r3
 800df9c:	0852      	lsrs	r2, r2, #1
 800df9e:	01db      	lsls	r3, r3, #7
 800dfa0:	4313      	orrs	r3, r2
 800dfa2:	b2da      	uxtb	r2, r3
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	1c59      	adds	r1, r3, #1
 800dfa8:	6079      	str	r1, [r7, #4]
 800dfaa:	781b      	ldrb	r3, [r3, #0]
 800dfac:	4413      	add	r3, r2
 800dfae:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800dfb0:	68bb      	ldr	r3, [r7, #8]
 800dfb2:	3b01      	subs	r3, #1
 800dfb4:	60bb      	str	r3, [r7, #8]
 800dfb6:	68bb      	ldr	r3, [r7, #8]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d1ed      	bne.n	800df98 <sum_sfn+0x10>
	return sum;
 800dfbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	3714      	adds	r7, #20
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc8:	4770      	bx	lr

0800dfca <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800dfca:	b580      	push	{r7, lr}
 800dfcc:	b086      	sub	sp, #24
 800dfce:	af00      	add	r7, sp, #0
 800dfd0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800dfd8:	2100      	movs	r1, #0
 800dfda:	6878      	ldr	r0, [r7, #4]
 800dfdc:	f7ff fca8 	bl	800d930 <dir_sdi>
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800dfe4:	7dfb      	ldrb	r3, [r7, #23]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d001      	beq.n	800dfee <dir_find+0x24>
 800dfea:	7dfb      	ldrb	r3, [r7, #23]
 800dfec:	e0a9      	b.n	800e142 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800dfee:	23ff      	movs	r3, #255	; 0xff
 800dff0:	753b      	strb	r3, [r7, #20]
 800dff2:	7d3b      	ldrb	r3, [r7, #20]
 800dff4:	757b      	strb	r3, [r7, #21]
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dffc:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	69db      	ldr	r3, [r3, #28]
 800e002:	4619      	mov	r1, r3
 800e004:	6938      	ldr	r0, [r7, #16]
 800e006:	f7ff f915 	bl	800d234 <move_window>
 800e00a:	4603      	mov	r3, r0
 800e00c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e00e:	7dfb      	ldrb	r3, [r7, #23]
 800e010:	2b00      	cmp	r3, #0
 800e012:	f040 8090 	bne.w	800e136 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	6a1b      	ldr	r3, [r3, #32]
 800e01a:	781b      	ldrb	r3, [r3, #0]
 800e01c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e01e:	7dbb      	ldrb	r3, [r7, #22]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d102      	bne.n	800e02a <dir_find+0x60>
 800e024:	2304      	movs	r3, #4
 800e026:	75fb      	strb	r3, [r7, #23]
 800e028:	e08a      	b.n	800e140 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6a1b      	ldr	r3, [r3, #32]
 800e02e:	330b      	adds	r3, #11
 800e030:	781b      	ldrb	r3, [r3, #0]
 800e032:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e036:	73fb      	strb	r3, [r7, #15]
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	7bfa      	ldrb	r2, [r7, #15]
 800e03c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e03e:	7dbb      	ldrb	r3, [r7, #22]
 800e040:	2be5      	cmp	r3, #229	; 0xe5
 800e042:	d007      	beq.n	800e054 <dir_find+0x8a>
 800e044:	7bfb      	ldrb	r3, [r7, #15]
 800e046:	f003 0308 	and.w	r3, r3, #8
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d009      	beq.n	800e062 <dir_find+0x98>
 800e04e:	7bfb      	ldrb	r3, [r7, #15]
 800e050:	2b0f      	cmp	r3, #15
 800e052:	d006      	beq.n	800e062 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e054:	23ff      	movs	r3, #255	; 0xff
 800e056:	757b      	strb	r3, [r7, #21]
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e05e:	631a      	str	r2, [r3, #48]	; 0x30
 800e060:	e05e      	b.n	800e120 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e062:	7bfb      	ldrb	r3, [r7, #15]
 800e064:	2b0f      	cmp	r3, #15
 800e066:	d136      	bne.n	800e0d6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e06e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e072:	2b00      	cmp	r3, #0
 800e074:	d154      	bne.n	800e120 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e076:	7dbb      	ldrb	r3, [r7, #22]
 800e078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d00d      	beq.n	800e09c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	6a1b      	ldr	r3, [r3, #32]
 800e084:	7b5b      	ldrb	r3, [r3, #13]
 800e086:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e088:	7dbb      	ldrb	r3, [r7, #22]
 800e08a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e08e:	75bb      	strb	r3, [r7, #22]
 800e090:	7dbb      	ldrb	r3, [r7, #22]
 800e092:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	695a      	ldr	r2, [r3, #20]
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e09c:	7dba      	ldrb	r2, [r7, #22]
 800e09e:	7d7b      	ldrb	r3, [r7, #21]
 800e0a0:	429a      	cmp	r2, r3
 800e0a2:	d115      	bne.n	800e0d0 <dir_find+0x106>
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	6a1b      	ldr	r3, [r3, #32]
 800e0a8:	330d      	adds	r3, #13
 800e0aa:	781b      	ldrb	r3, [r3, #0]
 800e0ac:	7d3a      	ldrb	r2, [r7, #20]
 800e0ae:	429a      	cmp	r2, r3
 800e0b0:	d10e      	bne.n	800e0d0 <dir_find+0x106>
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	68da      	ldr	r2, [r3, #12]
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	6a1b      	ldr	r3, [r3, #32]
 800e0ba:	4619      	mov	r1, r3
 800e0bc:	4610      	mov	r0, r2
 800e0be:	f7ff fdfd 	bl	800dcbc <cmp_lfn>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d003      	beq.n	800e0d0 <dir_find+0x106>
 800e0c8:	7d7b      	ldrb	r3, [r7, #21]
 800e0ca:	3b01      	subs	r3, #1
 800e0cc:	b2db      	uxtb	r3, r3
 800e0ce:	e000      	b.n	800e0d2 <dir_find+0x108>
 800e0d0:	23ff      	movs	r3, #255	; 0xff
 800e0d2:	757b      	strb	r3, [r7, #21]
 800e0d4:	e024      	b.n	800e120 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e0d6:	7d7b      	ldrb	r3, [r7, #21]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d109      	bne.n	800e0f0 <dir_find+0x126>
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	6a1b      	ldr	r3, [r3, #32]
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f7ff ff51 	bl	800df88 <sum_sfn>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	7d3b      	ldrb	r3, [r7, #20]
 800e0ec:	4293      	cmp	r3, r2
 800e0ee:	d024      	beq.n	800e13a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e0f6:	f003 0301 	and.w	r3, r3, #1
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d10a      	bne.n	800e114 <dir_find+0x14a>
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	6a18      	ldr	r0, [r3, #32]
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	3324      	adds	r3, #36	; 0x24
 800e106:	220b      	movs	r2, #11
 800e108:	4619      	mov	r1, r3
 800e10a:	f7fe fea1 	bl	800ce50 <mem_cmp>
 800e10e:	4603      	mov	r3, r0
 800e110:	2b00      	cmp	r3, #0
 800e112:	d014      	beq.n	800e13e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e114:	23ff      	movs	r3, #255	; 0xff
 800e116:	757b      	strb	r3, [r7, #21]
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e11e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e120:	2100      	movs	r1, #0
 800e122:	6878      	ldr	r0, [r7, #4]
 800e124:	f7ff fc7f 	bl	800da26 <dir_next>
 800e128:	4603      	mov	r3, r0
 800e12a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e12c:	7dfb      	ldrb	r3, [r7, #23]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	f43f af65 	beq.w	800dffe <dir_find+0x34>
 800e134:	e004      	b.n	800e140 <dir_find+0x176>
		if (res != FR_OK) break;
 800e136:	bf00      	nop
 800e138:	e002      	b.n	800e140 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e13a:	bf00      	nop
 800e13c:	e000      	b.n	800e140 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e13e:	bf00      	nop

	return res;
 800e140:	7dfb      	ldrb	r3, [r7, #23]
}
 800e142:	4618      	mov	r0, r3
 800e144:	3718      	adds	r7, #24
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}
	...

0800e14c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b08c      	sub	sp, #48	; 0x30
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e160:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e164:	2b00      	cmp	r3, #0
 800e166:	d001      	beq.n	800e16c <dir_register+0x20>
 800e168:	2306      	movs	r3, #6
 800e16a:	e0e0      	b.n	800e32e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e16c:	2300      	movs	r3, #0
 800e16e:	627b      	str	r3, [r7, #36]	; 0x24
 800e170:	e002      	b.n	800e178 <dir_register+0x2c>
 800e172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e174:	3301      	adds	r3, #1
 800e176:	627b      	str	r3, [r7, #36]	; 0x24
 800e178:	69fb      	ldr	r3, [r7, #28]
 800e17a:	68da      	ldr	r2, [r3, #12]
 800e17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e17e:	005b      	lsls	r3, r3, #1
 800e180:	4413      	add	r3, r2
 800e182:	881b      	ldrh	r3, [r3, #0]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d1f4      	bne.n	800e172 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800e18e:	f107 030c 	add.w	r3, r7, #12
 800e192:	220c      	movs	r2, #12
 800e194:	4618      	mov	r0, r3
 800e196:	f7fe fe1f 	bl	800cdd8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e19a:	7dfb      	ldrb	r3, [r7, #23]
 800e19c:	f003 0301 	and.w	r3, r3, #1
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d032      	beq.n	800e20a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2240      	movs	r2, #64	; 0x40
 800e1a8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	62bb      	str	r3, [r7, #40]	; 0x28
 800e1b0:	e016      	b.n	800e1e0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800e1b8:	69fb      	ldr	r3, [r7, #28]
 800e1ba:	68da      	ldr	r2, [r3, #12]
 800e1bc:	f107 010c 	add.w	r1, r7, #12
 800e1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1c2:	f7ff fe53 	bl	800de6c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e1c6:	6878      	ldr	r0, [r7, #4]
 800e1c8:	f7ff feff 	bl	800dfca <dir_find>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800e1d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d106      	bne.n	800e1e8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800e1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1dc:	3301      	adds	r3, #1
 800e1de:	62bb      	str	r3, [r7, #40]	; 0x28
 800e1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e2:	2b63      	cmp	r3, #99	; 0x63
 800e1e4:	d9e5      	bls.n	800e1b2 <dir_register+0x66>
 800e1e6:	e000      	b.n	800e1ea <dir_register+0x9e>
			if (res != FR_OK) break;
 800e1e8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ec:	2b64      	cmp	r3, #100	; 0x64
 800e1ee:	d101      	bne.n	800e1f4 <dir_register+0xa8>
 800e1f0:	2307      	movs	r3, #7
 800e1f2:	e09c      	b.n	800e32e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e1f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e1f8:	2b04      	cmp	r3, #4
 800e1fa:	d002      	beq.n	800e202 <dir_register+0xb6>
 800e1fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e200:	e095      	b.n	800e32e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e202:	7dfa      	ldrb	r2, [r7, #23]
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e20a:	7dfb      	ldrb	r3, [r7, #23]
 800e20c:	f003 0302 	and.w	r3, r3, #2
 800e210:	2b00      	cmp	r3, #0
 800e212:	d007      	beq.n	800e224 <dir_register+0xd8>
 800e214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e216:	330c      	adds	r3, #12
 800e218:	4a47      	ldr	r2, [pc, #284]	; (800e338 <dir_register+0x1ec>)
 800e21a:	fba2 2303 	umull	r2, r3, r2, r3
 800e21e:	089b      	lsrs	r3, r3, #2
 800e220:	3301      	adds	r3, #1
 800e222:	e000      	b.n	800e226 <dir_register+0xda>
 800e224:	2301      	movs	r3, #1
 800e226:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e228:	6a39      	ldr	r1, [r7, #32]
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f7ff fcc0 	bl	800dbb0 <dir_alloc>
 800e230:	4603      	mov	r3, r0
 800e232:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e236:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d148      	bne.n	800e2d0 <dir_register+0x184>
 800e23e:	6a3b      	ldr	r3, [r7, #32]
 800e240:	3b01      	subs	r3, #1
 800e242:	623b      	str	r3, [r7, #32]
 800e244:	6a3b      	ldr	r3, [r7, #32]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d042      	beq.n	800e2d0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	695a      	ldr	r2, [r3, #20]
 800e24e:	6a3b      	ldr	r3, [r7, #32]
 800e250:	015b      	lsls	r3, r3, #5
 800e252:	1ad3      	subs	r3, r2, r3
 800e254:	4619      	mov	r1, r3
 800e256:	6878      	ldr	r0, [r7, #4]
 800e258:	f7ff fb6a 	bl	800d930 <dir_sdi>
 800e25c:	4603      	mov	r3, r0
 800e25e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e262:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e266:	2b00      	cmp	r3, #0
 800e268:	d132      	bne.n	800e2d0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	3324      	adds	r3, #36	; 0x24
 800e26e:	4618      	mov	r0, r3
 800e270:	f7ff fe8a 	bl	800df88 <sum_sfn>
 800e274:	4603      	mov	r3, r0
 800e276:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	69db      	ldr	r3, [r3, #28]
 800e27c:	4619      	mov	r1, r3
 800e27e:	69f8      	ldr	r0, [r7, #28]
 800e280:	f7fe ffd8 	bl	800d234 <move_window>
 800e284:	4603      	mov	r3, r0
 800e286:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800e28a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d11d      	bne.n	800e2ce <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e292:	69fb      	ldr	r3, [r7, #28]
 800e294:	68d8      	ldr	r0, [r3, #12]
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6a19      	ldr	r1, [r3, #32]
 800e29a:	6a3b      	ldr	r3, [r7, #32]
 800e29c:	b2da      	uxtb	r2, r3
 800e29e:	7efb      	ldrb	r3, [r7, #27]
 800e2a0:	f7ff fd7c 	bl	800dd9c <put_lfn>
				fs->wflag = 1;
 800e2a4:	69fb      	ldr	r3, [r7, #28]
 800e2a6:	2201      	movs	r2, #1
 800e2a8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e2aa:	2100      	movs	r1, #0
 800e2ac:	6878      	ldr	r0, [r7, #4]
 800e2ae:	f7ff fbba 	bl	800da26 <dir_next>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800e2b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d107      	bne.n	800e2d0 <dir_register+0x184>
 800e2c0:	6a3b      	ldr	r3, [r7, #32]
 800e2c2:	3b01      	subs	r3, #1
 800e2c4:	623b      	str	r3, [r7, #32]
 800e2c6:	6a3b      	ldr	r3, [r7, #32]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d1d5      	bne.n	800e278 <dir_register+0x12c>
 800e2cc:	e000      	b.n	800e2d0 <dir_register+0x184>
				if (res != FR_OK) break;
 800e2ce:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e2d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d128      	bne.n	800e32a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	69db      	ldr	r3, [r3, #28]
 800e2dc:	4619      	mov	r1, r3
 800e2de:	69f8      	ldr	r0, [r7, #28]
 800e2e0:	f7fe ffa8 	bl	800d234 <move_window>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e2ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d11b      	bne.n	800e32a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6a1b      	ldr	r3, [r3, #32]
 800e2f6:	2220      	movs	r2, #32
 800e2f8:	2100      	movs	r1, #0
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f7fe fd8d 	bl	800ce1a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6a18      	ldr	r0, [r3, #32]
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	3324      	adds	r3, #36	; 0x24
 800e308:	220b      	movs	r2, #11
 800e30a:	4619      	mov	r1, r3
 800e30c:	f7fe fd64 	bl	800cdd8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6a1b      	ldr	r3, [r3, #32]
 800e31a:	330c      	adds	r3, #12
 800e31c:	f002 0218 	and.w	r2, r2, #24
 800e320:	b2d2      	uxtb	r2, r2
 800e322:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800e324:	69fb      	ldr	r3, [r7, #28]
 800e326:	2201      	movs	r2, #1
 800e328:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e32a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e32e:	4618      	mov	r0, r3
 800e330:	3730      	adds	r7, #48	; 0x30
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}
 800e336:	bf00      	nop
 800e338:	4ec4ec4f 	.word	0x4ec4ec4f

0800e33c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b088      	sub	sp, #32
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
 800e344:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	2200      	movs	r2, #0
 800e350:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	69db      	ldr	r3, [r3, #28]
 800e356:	2b00      	cmp	r3, #0
 800e358:	f000 80c9 	beq.w	800e4ee <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e364:	d032      	beq.n	800e3cc <get_fileinfo+0x90>
			i = j = 0;
 800e366:	2300      	movs	r3, #0
 800e368:	61bb      	str	r3, [r7, #24]
 800e36a:	69bb      	ldr	r3, [r7, #24]
 800e36c:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800e36e:	e01b      	b.n	800e3a8 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800e370:	89fb      	ldrh	r3, [r7, #14]
 800e372:	2100      	movs	r1, #0
 800e374:	4618      	mov	r0, r3
 800e376:	f001 fbc7 	bl	800fb08 <ff_convert>
 800e37a:	4603      	mov	r3, r0
 800e37c:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800e37e:	89fb      	ldrh	r3, [r7, #14]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d102      	bne.n	800e38a <get_fileinfo+0x4e>
 800e384:	2300      	movs	r3, #0
 800e386:	61fb      	str	r3, [r7, #28]
 800e388:	e01a      	b.n	800e3c0 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800e38a:	69fb      	ldr	r3, [r7, #28]
 800e38c:	2bfe      	cmp	r3, #254	; 0xfe
 800e38e:	d902      	bls.n	800e396 <get_fileinfo+0x5a>
 800e390:	2300      	movs	r3, #0
 800e392:	61fb      	str	r3, [r7, #28]
 800e394:	e014      	b.n	800e3c0 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800e396:	69fb      	ldr	r3, [r7, #28]
 800e398:	1c5a      	adds	r2, r3, #1
 800e39a:	61fa      	str	r2, [r7, #28]
 800e39c:	89fa      	ldrh	r2, [r7, #14]
 800e39e:	b2d1      	uxtb	r1, r2
 800e3a0:	683a      	ldr	r2, [r7, #0]
 800e3a2:	4413      	add	r3, r2
 800e3a4:	460a      	mov	r2, r1
 800e3a6:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800e3a8:	693b      	ldr	r3, [r7, #16]
 800e3aa:	68da      	ldr	r2, [r3, #12]
 800e3ac:	69bb      	ldr	r3, [r7, #24]
 800e3ae:	1c59      	adds	r1, r3, #1
 800e3b0:	61b9      	str	r1, [r7, #24]
 800e3b2:	005b      	lsls	r3, r3, #1
 800e3b4:	4413      	add	r3, r2
 800e3b6:	881b      	ldrh	r3, [r3, #0]
 800e3b8:	81fb      	strh	r3, [r7, #14]
 800e3ba:	89fb      	ldrh	r3, [r7, #14]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d1d7      	bne.n	800e370 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800e3c0:	683a      	ldr	r2, [r7, #0]
 800e3c2:	69fb      	ldr	r3, [r7, #28]
 800e3c4:	4413      	add	r3, r2
 800e3c6:	3316      	adds	r3, #22
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	61bb      	str	r3, [r7, #24]
 800e3d0:	69bb      	ldr	r3, [r7, #24]
 800e3d2:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800e3d4:	683a      	ldr	r2, [r7, #0]
 800e3d6:	69fb      	ldr	r3, [r7, #28]
 800e3d8:	4413      	add	r3, r2
 800e3da:	3316      	adds	r3, #22
 800e3dc:	781b      	ldrb	r3, [r3, #0]
 800e3de:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800e3e0:	e04c      	b.n	800e47c <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	6a1a      	ldr	r2, [r3, #32]
 800e3e6:	69fb      	ldr	r3, [r7, #28]
 800e3e8:	1c59      	adds	r1, r3, #1
 800e3ea:	61f9      	str	r1, [r7, #28]
 800e3ec:	4413      	add	r3, r2
 800e3ee:	781b      	ldrb	r3, [r3, #0]
 800e3f0:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800e3f2:	7dfb      	ldrb	r3, [r7, #23]
 800e3f4:	2b20      	cmp	r3, #32
 800e3f6:	d100      	bne.n	800e3fa <get_fileinfo+0xbe>
 800e3f8:	e040      	b.n	800e47c <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800e3fa:	7dfb      	ldrb	r3, [r7, #23]
 800e3fc:	2b05      	cmp	r3, #5
 800e3fe:	d101      	bne.n	800e404 <get_fileinfo+0xc8>
 800e400:	23e5      	movs	r3, #229	; 0xe5
 800e402:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800e404:	69fb      	ldr	r3, [r7, #28]
 800e406:	2b09      	cmp	r3, #9
 800e408:	d10f      	bne.n	800e42a <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800e40a:	89bb      	ldrh	r3, [r7, #12]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d105      	bne.n	800e41c <get_fileinfo+0xe0>
 800e410:	683a      	ldr	r2, [r7, #0]
 800e412:	69bb      	ldr	r3, [r7, #24]
 800e414:	4413      	add	r3, r2
 800e416:	3316      	adds	r3, #22
 800e418:	222e      	movs	r2, #46	; 0x2e
 800e41a:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800e41c:	69bb      	ldr	r3, [r7, #24]
 800e41e:	1c5a      	adds	r2, r3, #1
 800e420:	61ba      	str	r2, [r7, #24]
 800e422:	683a      	ldr	r2, [r7, #0]
 800e424:	4413      	add	r3, r2
 800e426:	222e      	movs	r2, #46	; 0x2e
 800e428:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800e42a:	683a      	ldr	r2, [r7, #0]
 800e42c:	69bb      	ldr	r3, [r7, #24]
 800e42e:	4413      	add	r3, r2
 800e430:	3309      	adds	r3, #9
 800e432:	7dfa      	ldrb	r2, [r7, #23]
 800e434:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800e436:	89bb      	ldrh	r3, [r7, #12]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d11c      	bne.n	800e476 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800e43c:	7dfb      	ldrb	r3, [r7, #23]
 800e43e:	2b40      	cmp	r3, #64	; 0x40
 800e440:	d913      	bls.n	800e46a <get_fileinfo+0x12e>
 800e442:	7dfb      	ldrb	r3, [r7, #23]
 800e444:	2b5a      	cmp	r3, #90	; 0x5a
 800e446:	d810      	bhi.n	800e46a <get_fileinfo+0x12e>
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	6a1b      	ldr	r3, [r3, #32]
 800e44c:	330c      	adds	r3, #12
 800e44e:	781b      	ldrb	r3, [r3, #0]
 800e450:	461a      	mov	r2, r3
 800e452:	69fb      	ldr	r3, [r7, #28]
 800e454:	2b08      	cmp	r3, #8
 800e456:	d901      	bls.n	800e45c <get_fileinfo+0x120>
 800e458:	2310      	movs	r3, #16
 800e45a:	e000      	b.n	800e45e <get_fileinfo+0x122>
 800e45c:	2308      	movs	r3, #8
 800e45e:	4013      	ands	r3, r2
 800e460:	2b00      	cmp	r3, #0
 800e462:	d002      	beq.n	800e46a <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800e464:	7dfb      	ldrb	r3, [r7, #23]
 800e466:	3320      	adds	r3, #32
 800e468:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800e46a:	683a      	ldr	r2, [r7, #0]
 800e46c:	69bb      	ldr	r3, [r7, #24]
 800e46e:	4413      	add	r3, r2
 800e470:	3316      	adds	r3, #22
 800e472:	7dfa      	ldrb	r2, [r7, #23]
 800e474:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800e476:	69bb      	ldr	r3, [r7, #24]
 800e478:	3301      	adds	r3, #1
 800e47a:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800e47c:	69fb      	ldr	r3, [r7, #28]
 800e47e:	2b0a      	cmp	r3, #10
 800e480:	d9af      	bls.n	800e3e2 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800e482:	89bb      	ldrh	r3, [r7, #12]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d10d      	bne.n	800e4a4 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800e488:	683a      	ldr	r2, [r7, #0]
 800e48a:	69bb      	ldr	r3, [r7, #24]
 800e48c:	4413      	add	r3, r2
 800e48e:	3316      	adds	r3, #22
 800e490:	2200      	movs	r2, #0
 800e492:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	6a1b      	ldr	r3, [r3, #32]
 800e498:	330c      	adds	r3, #12
 800e49a:	781b      	ldrb	r3, [r3, #0]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d101      	bne.n	800e4a4 <get_fileinfo+0x168>
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800e4a4:	683a      	ldr	r2, [r7, #0]
 800e4a6:	69bb      	ldr	r3, [r7, #24]
 800e4a8:	4413      	add	r3, r2
 800e4aa:	3309      	adds	r3, #9
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	6a1b      	ldr	r3, [r3, #32]
 800e4b4:	7ada      	ldrb	r2, [r3, #11]
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	6a1b      	ldr	r3, [r3, #32]
 800e4be:	331c      	adds	r3, #28
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f7fe fc1f 	bl	800cd04 <ld_dword>
 800e4c6:	4602      	mov	r2, r0
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	6a1b      	ldr	r3, [r3, #32]
 800e4d0:	3316      	adds	r3, #22
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f7fe fc16 	bl	800cd04 <ld_dword>
 800e4d8:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	b29a      	uxth	r2, r3
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	80da      	strh	r2, [r3, #6]
 800e4e2:	68bb      	ldr	r3, [r7, #8]
 800e4e4:	0c1b      	lsrs	r3, r3, #16
 800e4e6:	b29a      	uxth	r2, r3
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	809a      	strh	r2, [r3, #4]
 800e4ec:	e000      	b.n	800e4f0 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e4ee:	bf00      	nop
}
 800e4f0:	3720      	adds	r7, #32
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}
	...

0800e4f8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b08a      	sub	sp, #40	; 0x28
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
 800e500:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	613b      	str	r3, [r7, #16]
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	68db      	ldr	r3, [r3, #12]
 800e50e:	60fb      	str	r3, [r7, #12]
 800e510:	2300      	movs	r3, #0
 800e512:	617b      	str	r3, [r7, #20]
 800e514:	697b      	ldr	r3, [r7, #20]
 800e516:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e518:	69bb      	ldr	r3, [r7, #24]
 800e51a:	1c5a      	adds	r2, r3, #1
 800e51c:	61ba      	str	r2, [r7, #24]
 800e51e:	693a      	ldr	r2, [r7, #16]
 800e520:	4413      	add	r3, r2
 800e522:	781b      	ldrb	r3, [r3, #0]
 800e524:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800e526:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e528:	2b1f      	cmp	r3, #31
 800e52a:	d940      	bls.n	800e5ae <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e52c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e52e:	2b2f      	cmp	r3, #47	; 0x2f
 800e530:	d006      	beq.n	800e540 <create_name+0x48>
 800e532:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e534:	2b5c      	cmp	r3, #92	; 0x5c
 800e536:	d110      	bne.n	800e55a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e538:	e002      	b.n	800e540 <create_name+0x48>
 800e53a:	69bb      	ldr	r3, [r7, #24]
 800e53c:	3301      	adds	r3, #1
 800e53e:	61bb      	str	r3, [r7, #24]
 800e540:	693a      	ldr	r2, [r7, #16]
 800e542:	69bb      	ldr	r3, [r7, #24]
 800e544:	4413      	add	r3, r2
 800e546:	781b      	ldrb	r3, [r3, #0]
 800e548:	2b2f      	cmp	r3, #47	; 0x2f
 800e54a:	d0f6      	beq.n	800e53a <create_name+0x42>
 800e54c:	693a      	ldr	r2, [r7, #16]
 800e54e:	69bb      	ldr	r3, [r7, #24]
 800e550:	4413      	add	r3, r2
 800e552:	781b      	ldrb	r3, [r3, #0]
 800e554:	2b5c      	cmp	r3, #92	; 0x5c
 800e556:	d0f0      	beq.n	800e53a <create_name+0x42>
			break;
 800e558:	e02a      	b.n	800e5b0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e55a:	697b      	ldr	r3, [r7, #20]
 800e55c:	2bfe      	cmp	r3, #254	; 0xfe
 800e55e:	d901      	bls.n	800e564 <create_name+0x6c>
 800e560:	2306      	movs	r3, #6
 800e562:	e17d      	b.n	800e860 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e564:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e566:	b2db      	uxtb	r3, r3
 800e568:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e56a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e56c:	2101      	movs	r1, #1
 800e56e:	4618      	mov	r0, r3
 800e570:	f001 faca 	bl	800fb08 <ff_convert>
 800e574:	4603      	mov	r3, r0
 800e576:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e578:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d101      	bne.n	800e582 <create_name+0x8a>
 800e57e:	2306      	movs	r3, #6
 800e580:	e16e      	b.n	800e860 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e582:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e584:	2b7f      	cmp	r3, #127	; 0x7f
 800e586:	d809      	bhi.n	800e59c <create_name+0xa4>
 800e588:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e58a:	4619      	mov	r1, r3
 800e58c:	488d      	ldr	r0, [pc, #564]	; (800e7c4 <create_name+0x2cc>)
 800e58e:	f7fe fc86 	bl	800ce9e <chk_chr>
 800e592:	4603      	mov	r3, r0
 800e594:	2b00      	cmp	r3, #0
 800e596:	d001      	beq.n	800e59c <create_name+0xa4>
 800e598:	2306      	movs	r3, #6
 800e59a:	e161      	b.n	800e860 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800e59c:	697b      	ldr	r3, [r7, #20]
 800e59e:	1c5a      	adds	r2, r3, #1
 800e5a0:	617a      	str	r2, [r7, #20]
 800e5a2:	005b      	lsls	r3, r3, #1
 800e5a4:	68fa      	ldr	r2, [r7, #12]
 800e5a6:	4413      	add	r3, r2
 800e5a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e5aa:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e5ac:	e7b4      	b.n	800e518 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800e5ae:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e5b0:	693a      	ldr	r2, [r7, #16]
 800e5b2:	69bb      	ldr	r3, [r7, #24]
 800e5b4:	441a      	add	r2, r3
 800e5b6:	683b      	ldr	r3, [r7, #0]
 800e5b8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e5ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e5bc:	2b1f      	cmp	r3, #31
 800e5be:	d801      	bhi.n	800e5c4 <create_name+0xcc>
 800e5c0:	2304      	movs	r3, #4
 800e5c2:	e000      	b.n	800e5c6 <create_name+0xce>
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e5ca:	e011      	b.n	800e5f0 <create_name+0xf8>
		w = lfn[di - 1];
 800e5cc:	697a      	ldr	r2, [r7, #20]
 800e5ce:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e5d2:	4413      	add	r3, r2
 800e5d4:	005b      	lsls	r3, r3, #1
 800e5d6:	68fa      	ldr	r2, [r7, #12]
 800e5d8:	4413      	add	r3, r2
 800e5da:	881b      	ldrh	r3, [r3, #0]
 800e5dc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800e5de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e5e0:	2b20      	cmp	r3, #32
 800e5e2:	d002      	beq.n	800e5ea <create_name+0xf2>
 800e5e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e5e6:	2b2e      	cmp	r3, #46	; 0x2e
 800e5e8:	d106      	bne.n	800e5f8 <create_name+0x100>
		di--;
 800e5ea:	697b      	ldr	r3, [r7, #20]
 800e5ec:	3b01      	subs	r3, #1
 800e5ee:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d1ea      	bne.n	800e5cc <create_name+0xd4>
 800e5f6:	e000      	b.n	800e5fa <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800e5f8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800e5fa:	697b      	ldr	r3, [r7, #20]
 800e5fc:	005b      	lsls	r3, r3, #1
 800e5fe:	68fa      	ldr	r2, [r7, #12]
 800e600:	4413      	add	r3, r2
 800e602:	2200      	movs	r2, #0
 800e604:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e606:	697b      	ldr	r3, [r7, #20]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d101      	bne.n	800e610 <create_name+0x118>
 800e60c:	2306      	movs	r3, #6
 800e60e:	e127      	b.n	800e860 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	3324      	adds	r3, #36	; 0x24
 800e614:	220b      	movs	r2, #11
 800e616:	2120      	movs	r1, #32
 800e618:	4618      	mov	r0, r3
 800e61a:	f7fe fbfe 	bl	800ce1a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e61e:	2300      	movs	r3, #0
 800e620:	61bb      	str	r3, [r7, #24]
 800e622:	e002      	b.n	800e62a <create_name+0x132>
 800e624:	69bb      	ldr	r3, [r7, #24]
 800e626:	3301      	adds	r3, #1
 800e628:	61bb      	str	r3, [r7, #24]
 800e62a:	69bb      	ldr	r3, [r7, #24]
 800e62c:	005b      	lsls	r3, r3, #1
 800e62e:	68fa      	ldr	r2, [r7, #12]
 800e630:	4413      	add	r3, r2
 800e632:	881b      	ldrh	r3, [r3, #0]
 800e634:	2b20      	cmp	r3, #32
 800e636:	d0f5      	beq.n	800e624 <create_name+0x12c>
 800e638:	69bb      	ldr	r3, [r7, #24]
 800e63a:	005b      	lsls	r3, r3, #1
 800e63c:	68fa      	ldr	r2, [r7, #12]
 800e63e:	4413      	add	r3, r2
 800e640:	881b      	ldrh	r3, [r3, #0]
 800e642:	2b2e      	cmp	r3, #46	; 0x2e
 800e644:	d0ee      	beq.n	800e624 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e646:	69bb      	ldr	r3, [r7, #24]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d009      	beq.n	800e660 <create_name+0x168>
 800e64c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e650:	f043 0303 	orr.w	r3, r3, #3
 800e654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e658:	e002      	b.n	800e660 <create_name+0x168>
 800e65a:	697b      	ldr	r3, [r7, #20]
 800e65c:	3b01      	subs	r3, #1
 800e65e:	617b      	str	r3, [r7, #20]
 800e660:	697b      	ldr	r3, [r7, #20]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d009      	beq.n	800e67a <create_name+0x182>
 800e666:	697a      	ldr	r2, [r7, #20]
 800e668:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e66c:	4413      	add	r3, r2
 800e66e:	005b      	lsls	r3, r3, #1
 800e670:	68fa      	ldr	r2, [r7, #12]
 800e672:	4413      	add	r3, r2
 800e674:	881b      	ldrh	r3, [r3, #0]
 800e676:	2b2e      	cmp	r3, #46	; 0x2e
 800e678:	d1ef      	bne.n	800e65a <create_name+0x162>

	i = b = 0; ni = 8;
 800e67a:	2300      	movs	r3, #0
 800e67c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e680:	2300      	movs	r3, #0
 800e682:	623b      	str	r3, [r7, #32]
 800e684:	2308      	movs	r3, #8
 800e686:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e688:	69bb      	ldr	r3, [r7, #24]
 800e68a:	1c5a      	adds	r2, r3, #1
 800e68c:	61ba      	str	r2, [r7, #24]
 800e68e:	005b      	lsls	r3, r3, #1
 800e690:	68fa      	ldr	r2, [r7, #12]
 800e692:	4413      	add	r3, r2
 800e694:	881b      	ldrh	r3, [r3, #0]
 800e696:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e698:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	f000 8090 	beq.w	800e7c0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e6a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6a2:	2b20      	cmp	r3, #32
 800e6a4:	d006      	beq.n	800e6b4 <create_name+0x1bc>
 800e6a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6a8:	2b2e      	cmp	r3, #46	; 0x2e
 800e6aa:	d10a      	bne.n	800e6c2 <create_name+0x1ca>
 800e6ac:	69ba      	ldr	r2, [r7, #24]
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	429a      	cmp	r2, r3
 800e6b2:	d006      	beq.n	800e6c2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800e6b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6b8:	f043 0303 	orr.w	r3, r3, #3
 800e6bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e6c0:	e07d      	b.n	800e7be <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e6c2:	6a3a      	ldr	r2, [r7, #32]
 800e6c4:	69fb      	ldr	r3, [r7, #28]
 800e6c6:	429a      	cmp	r2, r3
 800e6c8:	d203      	bcs.n	800e6d2 <create_name+0x1da>
 800e6ca:	69ba      	ldr	r2, [r7, #24]
 800e6cc:	697b      	ldr	r3, [r7, #20]
 800e6ce:	429a      	cmp	r2, r3
 800e6d0:	d123      	bne.n	800e71a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800e6d2:	69fb      	ldr	r3, [r7, #28]
 800e6d4:	2b0b      	cmp	r3, #11
 800e6d6:	d106      	bne.n	800e6e6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800e6d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6dc:	f043 0303 	orr.w	r3, r3, #3
 800e6e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e6e4:	e075      	b.n	800e7d2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e6e6:	69ba      	ldr	r2, [r7, #24]
 800e6e8:	697b      	ldr	r3, [r7, #20]
 800e6ea:	429a      	cmp	r2, r3
 800e6ec:	d005      	beq.n	800e6fa <create_name+0x202>
 800e6ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6f2:	f043 0303 	orr.w	r3, r3, #3
 800e6f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800e6fa:	69ba      	ldr	r2, [r7, #24]
 800e6fc:	697b      	ldr	r3, [r7, #20]
 800e6fe:	429a      	cmp	r2, r3
 800e700:	d866      	bhi.n	800e7d0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e702:	697b      	ldr	r3, [r7, #20]
 800e704:	61bb      	str	r3, [r7, #24]
 800e706:	2308      	movs	r3, #8
 800e708:	623b      	str	r3, [r7, #32]
 800e70a:	230b      	movs	r3, #11
 800e70c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e70e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e712:	009b      	lsls	r3, r3, #2
 800e714:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e718:	e051      	b.n	800e7be <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e71a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e71c:	2b7f      	cmp	r3, #127	; 0x7f
 800e71e:	d914      	bls.n	800e74a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e720:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e722:	2100      	movs	r1, #0
 800e724:	4618      	mov	r0, r3
 800e726:	f001 f9ef 	bl	800fb08 <ff_convert>
 800e72a:	4603      	mov	r3, r0
 800e72c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e72e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e730:	2b00      	cmp	r3, #0
 800e732:	d004      	beq.n	800e73e <create_name+0x246>
 800e734:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e736:	3b80      	subs	r3, #128	; 0x80
 800e738:	4a23      	ldr	r2, [pc, #140]	; (800e7c8 <create_name+0x2d0>)
 800e73a:	5cd3      	ldrb	r3, [r2, r3]
 800e73c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e73e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e742:	f043 0302 	orr.w	r3, r3, #2
 800e746:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e74a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d007      	beq.n	800e760 <create_name+0x268>
 800e750:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e752:	4619      	mov	r1, r3
 800e754:	481d      	ldr	r0, [pc, #116]	; (800e7cc <create_name+0x2d4>)
 800e756:	f7fe fba2 	bl	800ce9e <chk_chr>
 800e75a:	4603      	mov	r3, r0
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d008      	beq.n	800e772 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e760:	235f      	movs	r3, #95	; 0x5f
 800e762:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e764:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e768:	f043 0303 	orr.w	r3, r3, #3
 800e76c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e770:	e01b      	b.n	800e7aa <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e772:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e774:	2b40      	cmp	r3, #64	; 0x40
 800e776:	d909      	bls.n	800e78c <create_name+0x294>
 800e778:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e77a:	2b5a      	cmp	r3, #90	; 0x5a
 800e77c:	d806      	bhi.n	800e78c <create_name+0x294>
					b |= 2;
 800e77e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e782:	f043 0302 	orr.w	r3, r3, #2
 800e786:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e78a:	e00e      	b.n	800e7aa <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e78c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e78e:	2b60      	cmp	r3, #96	; 0x60
 800e790:	d90b      	bls.n	800e7aa <create_name+0x2b2>
 800e792:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e794:	2b7a      	cmp	r3, #122	; 0x7a
 800e796:	d808      	bhi.n	800e7aa <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800e798:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e79c:	f043 0301 	orr.w	r3, r3, #1
 800e7a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e7a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7a6:	3b20      	subs	r3, #32
 800e7a8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e7aa:	6a3b      	ldr	r3, [r7, #32]
 800e7ac:	1c5a      	adds	r2, r3, #1
 800e7ae:	623a      	str	r2, [r7, #32]
 800e7b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e7b2:	b2d1      	uxtb	r1, r2
 800e7b4:	687a      	ldr	r2, [r7, #4]
 800e7b6:	4413      	add	r3, r2
 800e7b8:	460a      	mov	r2, r1
 800e7ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800e7be:	e763      	b.n	800e688 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800e7c0:	bf00      	nop
 800e7c2:	e006      	b.n	800e7d2 <create_name+0x2da>
 800e7c4:	08011e28 	.word	0x08011e28
 800e7c8:	08011eec 	.word	0x08011eec
 800e7cc:	08011e34 	.word	0x08011e34
			if (si > di) break;			/* No extension */
 800e7d0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e7d8:	2be5      	cmp	r3, #229	; 0xe5
 800e7da:	d103      	bne.n	800e7e4 <create_name+0x2ec>
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2205      	movs	r2, #5
 800e7e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800e7e4:	69fb      	ldr	r3, [r7, #28]
 800e7e6:	2b08      	cmp	r3, #8
 800e7e8:	d104      	bne.n	800e7f4 <create_name+0x2fc>
 800e7ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e7ee:	009b      	lsls	r3, r3, #2
 800e7f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e7f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e7f8:	f003 030c 	and.w	r3, r3, #12
 800e7fc:	2b0c      	cmp	r3, #12
 800e7fe:	d005      	beq.n	800e80c <create_name+0x314>
 800e800:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e804:	f003 0303 	and.w	r3, r3, #3
 800e808:	2b03      	cmp	r3, #3
 800e80a:	d105      	bne.n	800e818 <create_name+0x320>
 800e80c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e810:	f043 0302 	orr.w	r3, r3, #2
 800e814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e81c:	f003 0302 	and.w	r3, r3, #2
 800e820:	2b00      	cmp	r3, #0
 800e822:	d117      	bne.n	800e854 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e824:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e828:	f003 0303 	and.w	r3, r3, #3
 800e82c:	2b01      	cmp	r3, #1
 800e82e:	d105      	bne.n	800e83c <create_name+0x344>
 800e830:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e834:	f043 0310 	orr.w	r3, r3, #16
 800e838:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e83c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e840:	f003 030c 	and.w	r3, r3, #12
 800e844:	2b04      	cmp	r3, #4
 800e846:	d105      	bne.n	800e854 <create_name+0x35c>
 800e848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e84c:	f043 0308 	orr.w	r3, r3, #8
 800e850:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e85a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800e85e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800e860:	4618      	mov	r0, r3
 800e862:	3728      	adds	r7, #40	; 0x28
 800e864:	46bd      	mov	sp, r7
 800e866:	bd80      	pop	{r7, pc}

0800e868 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b086      	sub	sp, #24
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
 800e870:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e876:	693b      	ldr	r3, [r7, #16]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e87c:	e002      	b.n	800e884 <follow_path+0x1c>
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	3301      	adds	r3, #1
 800e882:	603b      	str	r3, [r7, #0]
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	781b      	ldrb	r3, [r3, #0]
 800e888:	2b2f      	cmp	r3, #47	; 0x2f
 800e88a:	d0f8      	beq.n	800e87e <follow_path+0x16>
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	781b      	ldrb	r3, [r3, #0]
 800e890:	2b5c      	cmp	r3, #92	; 0x5c
 800e892:	d0f4      	beq.n	800e87e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e894:	693b      	ldr	r3, [r7, #16]
 800e896:	2200      	movs	r2, #0
 800e898:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	781b      	ldrb	r3, [r3, #0]
 800e89e:	2b1f      	cmp	r3, #31
 800e8a0:	d80a      	bhi.n	800e8b8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2280      	movs	r2, #128	; 0x80
 800e8a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e8aa:	2100      	movs	r1, #0
 800e8ac:	6878      	ldr	r0, [r7, #4]
 800e8ae:	f7ff f83f 	bl	800d930 <dir_sdi>
 800e8b2:	4603      	mov	r3, r0
 800e8b4:	75fb      	strb	r3, [r7, #23]
 800e8b6:	e043      	b.n	800e940 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e8b8:	463b      	mov	r3, r7
 800e8ba:	4619      	mov	r1, r3
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f7ff fe1b 	bl	800e4f8 <create_name>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e8c6:	7dfb      	ldrb	r3, [r7, #23]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d134      	bne.n	800e936 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e8cc:	6878      	ldr	r0, [r7, #4]
 800e8ce:	f7ff fb7c 	bl	800dfca <dir_find>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e8dc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e8de:	7dfb      	ldrb	r3, [r7, #23]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d00a      	beq.n	800e8fa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e8e4:	7dfb      	ldrb	r3, [r7, #23]
 800e8e6:	2b04      	cmp	r3, #4
 800e8e8:	d127      	bne.n	800e93a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e8ea:	7afb      	ldrb	r3, [r7, #11]
 800e8ec:	f003 0304 	and.w	r3, r3, #4
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d122      	bne.n	800e93a <follow_path+0xd2>
 800e8f4:	2305      	movs	r3, #5
 800e8f6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e8f8:	e01f      	b.n	800e93a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e8fa:	7afb      	ldrb	r3, [r7, #11]
 800e8fc:	f003 0304 	and.w	r3, r3, #4
 800e900:	2b00      	cmp	r3, #0
 800e902:	d11c      	bne.n	800e93e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e904:	693b      	ldr	r3, [r7, #16]
 800e906:	799b      	ldrb	r3, [r3, #6]
 800e908:	f003 0310 	and.w	r3, r3, #16
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d102      	bne.n	800e916 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e910:	2305      	movs	r3, #5
 800e912:	75fb      	strb	r3, [r7, #23]
 800e914:	e014      	b.n	800e940 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	695b      	ldr	r3, [r3, #20]
 800e920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e924:	4413      	add	r3, r2
 800e926:	4619      	mov	r1, r3
 800e928:	68f8      	ldr	r0, [r7, #12]
 800e92a:	f7ff f988 	bl	800dc3e <ld_clust>
 800e92e:	4602      	mov	r2, r0
 800e930:	693b      	ldr	r3, [r7, #16]
 800e932:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e934:	e7c0      	b.n	800e8b8 <follow_path+0x50>
			if (res != FR_OK) break;
 800e936:	bf00      	nop
 800e938:	e002      	b.n	800e940 <follow_path+0xd8>
				break;
 800e93a:	bf00      	nop
 800e93c:	e000      	b.n	800e940 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e93e:	bf00      	nop
			}
		}
	}

	return res;
 800e940:	7dfb      	ldrb	r3, [r7, #23]
}
 800e942:	4618      	mov	r0, r3
 800e944:	3718      	adds	r7, #24
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}

0800e94a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e94a:	b480      	push	{r7}
 800e94c:	b087      	sub	sp, #28
 800e94e:	af00      	add	r7, sp, #0
 800e950:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e952:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e956:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d031      	beq.n	800e9c4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	617b      	str	r3, [r7, #20]
 800e966:	e002      	b.n	800e96e <get_ldnumber+0x24>
 800e968:	697b      	ldr	r3, [r7, #20]
 800e96a:	3301      	adds	r3, #1
 800e96c:	617b      	str	r3, [r7, #20]
 800e96e:	697b      	ldr	r3, [r7, #20]
 800e970:	781b      	ldrb	r3, [r3, #0]
 800e972:	2b1f      	cmp	r3, #31
 800e974:	d903      	bls.n	800e97e <get_ldnumber+0x34>
 800e976:	697b      	ldr	r3, [r7, #20]
 800e978:	781b      	ldrb	r3, [r3, #0]
 800e97a:	2b3a      	cmp	r3, #58	; 0x3a
 800e97c:	d1f4      	bne.n	800e968 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e97e:	697b      	ldr	r3, [r7, #20]
 800e980:	781b      	ldrb	r3, [r3, #0]
 800e982:	2b3a      	cmp	r3, #58	; 0x3a
 800e984:	d11c      	bne.n	800e9c0 <get_ldnumber+0x76>
			tp = *path;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	1c5a      	adds	r2, r3, #1
 800e990:	60fa      	str	r2, [r7, #12]
 800e992:	781b      	ldrb	r3, [r3, #0]
 800e994:	3b30      	subs	r3, #48	; 0x30
 800e996:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e998:	68bb      	ldr	r3, [r7, #8]
 800e99a:	2b09      	cmp	r3, #9
 800e99c:	d80e      	bhi.n	800e9bc <get_ldnumber+0x72>
 800e99e:	68fa      	ldr	r2, [r7, #12]
 800e9a0:	697b      	ldr	r3, [r7, #20]
 800e9a2:	429a      	cmp	r2, r3
 800e9a4:	d10a      	bne.n	800e9bc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d107      	bne.n	800e9bc <get_ldnumber+0x72>
					vol = (int)i;
 800e9ac:	68bb      	ldr	r3, [r7, #8]
 800e9ae:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e9b0:	697b      	ldr	r3, [r7, #20]
 800e9b2:	3301      	adds	r3, #1
 800e9b4:	617b      	str	r3, [r7, #20]
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	697a      	ldr	r2, [r7, #20]
 800e9ba:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e9bc:	693b      	ldr	r3, [r7, #16]
 800e9be:	e002      	b.n	800e9c6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e9c4:	693b      	ldr	r3, [r7, #16]
}
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	371c      	adds	r7, #28
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d0:	4770      	bx	lr
	...

0800e9d4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b082      	sub	sp, #8
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
 800e9dc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	70da      	strb	r2, [r3, #3]
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e9ea:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e9ec:	6839      	ldr	r1, [r7, #0]
 800e9ee:	6878      	ldr	r0, [r7, #4]
 800e9f0:	f7fe fc20 	bl	800d234 <move_window>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d001      	beq.n	800e9fe <check_fs+0x2a>
 800e9fa:	2304      	movs	r3, #4
 800e9fc:	e038      	b.n	800ea70 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	3334      	adds	r3, #52	; 0x34
 800ea02:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ea06:	4618      	mov	r0, r3
 800ea08:	f7fe f964 	bl	800ccd4 <ld_word>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	461a      	mov	r2, r3
 800ea10:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ea14:	429a      	cmp	r2, r3
 800ea16:	d001      	beq.n	800ea1c <check_fs+0x48>
 800ea18:	2303      	movs	r3, #3
 800ea1a:	e029      	b.n	800ea70 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ea22:	2be9      	cmp	r3, #233	; 0xe9
 800ea24:	d009      	beq.n	800ea3a <check_fs+0x66>
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ea2c:	2beb      	cmp	r3, #235	; 0xeb
 800ea2e:	d11e      	bne.n	800ea6e <check_fs+0x9a>
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800ea36:	2b90      	cmp	r3, #144	; 0x90
 800ea38:	d119      	bne.n	800ea6e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	3334      	adds	r3, #52	; 0x34
 800ea3e:	3336      	adds	r3, #54	; 0x36
 800ea40:	4618      	mov	r0, r3
 800ea42:	f7fe f95f 	bl	800cd04 <ld_dword>
 800ea46:	4603      	mov	r3, r0
 800ea48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ea4c:	4a0a      	ldr	r2, [pc, #40]	; (800ea78 <check_fs+0xa4>)
 800ea4e:	4293      	cmp	r3, r2
 800ea50:	d101      	bne.n	800ea56 <check_fs+0x82>
 800ea52:	2300      	movs	r3, #0
 800ea54:	e00c      	b.n	800ea70 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	3334      	adds	r3, #52	; 0x34
 800ea5a:	3352      	adds	r3, #82	; 0x52
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	f7fe f951 	bl	800cd04 <ld_dword>
 800ea62:	4603      	mov	r3, r0
 800ea64:	4a05      	ldr	r2, [pc, #20]	; (800ea7c <check_fs+0xa8>)
 800ea66:	4293      	cmp	r3, r2
 800ea68:	d101      	bne.n	800ea6e <check_fs+0x9a>
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	e000      	b.n	800ea70 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ea6e:	2302      	movs	r3, #2
}
 800ea70:	4618      	mov	r0, r3
 800ea72:	3708      	adds	r7, #8
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd80      	pop	{r7, pc}
 800ea78:	00544146 	.word	0x00544146
 800ea7c:	33544146 	.word	0x33544146

0800ea80 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b096      	sub	sp, #88	; 0x58
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	60f8      	str	r0, [r7, #12]
 800ea88:	60b9      	str	r1, [r7, #8]
 800ea8a:	4613      	mov	r3, r2
 800ea8c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	2200      	movs	r2, #0
 800ea92:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ea94:	68f8      	ldr	r0, [r7, #12]
 800ea96:	f7ff ff58 	bl	800e94a <get_ldnumber>
 800ea9a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ea9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	da01      	bge.n	800eaa6 <find_volume+0x26>
 800eaa2:	230b      	movs	r3, #11
 800eaa4:	e230      	b.n	800ef08 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800eaa6:	4aa1      	ldr	r2, [pc, #644]	; (800ed2c <find_volume+0x2ac>)
 800eaa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eaaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eaae:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800eab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d101      	bne.n	800eaba <find_volume+0x3a>
 800eab6:	230c      	movs	r3, #12
 800eab8:	e226      	b.n	800ef08 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800eaba:	68bb      	ldr	r3, [r7, #8]
 800eabc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eabe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800eac0:	79fb      	ldrb	r3, [r7, #7]
 800eac2:	f023 0301 	bic.w	r3, r3, #1
 800eac6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800eac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaca:	781b      	ldrb	r3, [r3, #0]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d01a      	beq.n	800eb06 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ead0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ead2:	785b      	ldrb	r3, [r3, #1]
 800ead4:	4618      	mov	r0, r3
 800ead6:	f7fe f85f 	bl	800cb98 <disk_status>
 800eada:	4603      	mov	r3, r0
 800eadc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800eae0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eae4:	f003 0301 	and.w	r3, r3, #1
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d10c      	bne.n	800eb06 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800eaec:	79fb      	ldrb	r3, [r7, #7]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d007      	beq.n	800eb02 <find_volume+0x82>
 800eaf2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eaf6:	f003 0304 	and.w	r3, r3, #4
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d001      	beq.n	800eb02 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800eafe:	230a      	movs	r3, #10
 800eb00:	e202      	b.n	800ef08 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800eb02:	2300      	movs	r3, #0
 800eb04:	e200      	b.n	800ef08 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800eb06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb08:	2200      	movs	r2, #0
 800eb0a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800eb0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb0e:	b2da      	uxtb	r2, r3
 800eb10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb12:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800eb14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb16:	785b      	ldrb	r3, [r3, #1]
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f7fe f857 	bl	800cbcc <disk_initialize>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800eb24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eb28:	f003 0301 	and.w	r3, r3, #1
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d001      	beq.n	800eb34 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800eb30:	2303      	movs	r3, #3
 800eb32:	e1e9      	b.n	800ef08 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800eb34:	79fb      	ldrb	r3, [r7, #7]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d007      	beq.n	800eb4a <find_volume+0xca>
 800eb3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eb3e:	f003 0304 	and.w	r3, r3, #4
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d001      	beq.n	800eb4a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800eb46:	230a      	movs	r3, #10
 800eb48:	e1de      	b.n	800ef08 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800eb4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800eb50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800eb52:	f7ff ff3f 	bl	800e9d4 <check_fs>
 800eb56:	4603      	mov	r3, r0
 800eb58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800eb5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eb60:	2b02      	cmp	r3, #2
 800eb62:	d149      	bne.n	800ebf8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800eb64:	2300      	movs	r3, #0
 800eb66:	643b      	str	r3, [r7, #64]	; 0x40
 800eb68:	e01e      	b.n	800eba8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800eb6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb6c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800eb70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb72:	011b      	lsls	r3, r3, #4
 800eb74:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800eb78:	4413      	add	r3, r2
 800eb7a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800eb7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb7e:	3304      	adds	r3, #4
 800eb80:	781b      	ldrb	r3, [r3, #0]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d006      	beq.n	800eb94 <find_volume+0x114>
 800eb86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb88:	3308      	adds	r3, #8
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f7fe f8ba 	bl	800cd04 <ld_dword>
 800eb90:	4602      	mov	r2, r0
 800eb92:	e000      	b.n	800eb96 <find_volume+0x116>
 800eb94:	2200      	movs	r2, #0
 800eb96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb98:	009b      	lsls	r3, r3, #2
 800eb9a:	3358      	adds	r3, #88	; 0x58
 800eb9c:	443b      	add	r3, r7
 800eb9e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800eba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eba4:	3301      	adds	r3, #1
 800eba6:	643b      	str	r3, [r7, #64]	; 0x40
 800eba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebaa:	2b03      	cmp	r3, #3
 800ebac:	d9dd      	bls.n	800eb6a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ebae:	2300      	movs	r3, #0
 800ebb0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ebb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d002      	beq.n	800ebbe <find_volume+0x13e>
 800ebb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebba:	3b01      	subs	r3, #1
 800ebbc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ebbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebc0:	009b      	lsls	r3, r3, #2
 800ebc2:	3358      	adds	r3, #88	; 0x58
 800ebc4:	443b      	add	r3, r7
 800ebc6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ebca:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ebcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d005      	beq.n	800ebde <find_volume+0x15e>
 800ebd2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ebd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ebd6:	f7ff fefd 	bl	800e9d4 <check_fs>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	e000      	b.n	800ebe0 <find_volume+0x160>
 800ebde:	2303      	movs	r3, #3
 800ebe0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ebe4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ebe8:	2b01      	cmp	r3, #1
 800ebea:	d905      	bls.n	800ebf8 <find_volume+0x178>
 800ebec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebee:	3301      	adds	r3, #1
 800ebf0:	643b      	str	r3, [r7, #64]	; 0x40
 800ebf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebf4:	2b03      	cmp	r3, #3
 800ebf6:	d9e2      	bls.n	800ebbe <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ebf8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ebfc:	2b04      	cmp	r3, #4
 800ebfe:	d101      	bne.n	800ec04 <find_volume+0x184>
 800ec00:	2301      	movs	r3, #1
 800ec02:	e181      	b.n	800ef08 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ec04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ec08:	2b01      	cmp	r3, #1
 800ec0a:	d901      	bls.n	800ec10 <find_volume+0x190>
 800ec0c:	230d      	movs	r3, #13
 800ec0e:	e17b      	b.n	800ef08 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ec10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec12:	3334      	adds	r3, #52	; 0x34
 800ec14:	330b      	adds	r3, #11
 800ec16:	4618      	mov	r0, r3
 800ec18:	f7fe f85c 	bl	800ccd4 <ld_word>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ec22:	d001      	beq.n	800ec28 <find_volume+0x1a8>
 800ec24:	230d      	movs	r3, #13
 800ec26:	e16f      	b.n	800ef08 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ec28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec2a:	3334      	adds	r3, #52	; 0x34
 800ec2c:	3316      	adds	r3, #22
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f7fe f850 	bl	800ccd4 <ld_word>
 800ec34:	4603      	mov	r3, r0
 800ec36:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ec38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d106      	bne.n	800ec4c <find_volume+0x1cc>
 800ec3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec40:	3334      	adds	r3, #52	; 0x34
 800ec42:	3324      	adds	r3, #36	; 0x24
 800ec44:	4618      	mov	r0, r3
 800ec46:	f7fe f85d 	bl	800cd04 <ld_dword>
 800ec4a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ec4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ec50:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ec52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec54:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ec58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec5a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ec5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec5e:	789b      	ldrb	r3, [r3, #2]
 800ec60:	2b01      	cmp	r3, #1
 800ec62:	d005      	beq.n	800ec70 <find_volume+0x1f0>
 800ec64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec66:	789b      	ldrb	r3, [r3, #2]
 800ec68:	2b02      	cmp	r3, #2
 800ec6a:	d001      	beq.n	800ec70 <find_volume+0x1f0>
 800ec6c:	230d      	movs	r3, #13
 800ec6e:	e14b      	b.n	800ef08 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ec70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec72:	789b      	ldrb	r3, [r3, #2]
 800ec74:	461a      	mov	r2, r3
 800ec76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec78:	fb02 f303 	mul.w	r3, r2, r3
 800ec7c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ec7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ec84:	b29a      	uxth	r2, r3
 800ec86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec88:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ec8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec8c:	895b      	ldrh	r3, [r3, #10]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d008      	beq.n	800eca4 <find_volume+0x224>
 800ec92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec94:	895b      	ldrh	r3, [r3, #10]
 800ec96:	461a      	mov	r2, r3
 800ec98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec9a:	895b      	ldrh	r3, [r3, #10]
 800ec9c:	3b01      	subs	r3, #1
 800ec9e:	4013      	ands	r3, r2
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d001      	beq.n	800eca8 <find_volume+0x228>
 800eca4:	230d      	movs	r3, #13
 800eca6:	e12f      	b.n	800ef08 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800eca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecaa:	3334      	adds	r3, #52	; 0x34
 800ecac:	3311      	adds	r3, #17
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f7fe f810 	bl	800ccd4 <ld_word>
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	461a      	mov	r2, r3
 800ecb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ecbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecbe:	891b      	ldrh	r3, [r3, #8]
 800ecc0:	f003 030f 	and.w	r3, r3, #15
 800ecc4:	b29b      	uxth	r3, r3
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d001      	beq.n	800ecce <find_volume+0x24e>
 800ecca:	230d      	movs	r3, #13
 800eccc:	e11c      	b.n	800ef08 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ecce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecd0:	3334      	adds	r3, #52	; 0x34
 800ecd2:	3313      	adds	r3, #19
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	f7fd fffd 	bl	800ccd4 <ld_word>
 800ecda:	4603      	mov	r3, r0
 800ecdc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ecde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d106      	bne.n	800ecf2 <find_volume+0x272>
 800ece4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ece6:	3334      	adds	r3, #52	; 0x34
 800ece8:	3320      	adds	r3, #32
 800ecea:	4618      	mov	r0, r3
 800ecec:	f7fe f80a 	bl	800cd04 <ld_dword>
 800ecf0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ecf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecf4:	3334      	adds	r3, #52	; 0x34
 800ecf6:	330e      	adds	r3, #14
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	f7fd ffeb 	bl	800ccd4 <ld_word>
 800ecfe:	4603      	mov	r3, r0
 800ed00:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ed02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d101      	bne.n	800ed0c <find_volume+0x28c>
 800ed08:	230d      	movs	r3, #13
 800ed0a:	e0fd      	b.n	800ef08 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ed0c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ed0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed10:	4413      	add	r3, r2
 800ed12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed14:	8912      	ldrh	r2, [r2, #8]
 800ed16:	0912      	lsrs	r2, r2, #4
 800ed18:	b292      	uxth	r2, r2
 800ed1a:	4413      	add	r3, r2
 800ed1c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ed1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ed20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed22:	429a      	cmp	r2, r3
 800ed24:	d204      	bcs.n	800ed30 <find_volume+0x2b0>
 800ed26:	230d      	movs	r3, #13
 800ed28:	e0ee      	b.n	800ef08 <find_volume+0x488>
 800ed2a:	bf00      	nop
 800ed2c:	2000298c 	.word	0x2000298c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ed30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ed32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed34:	1ad3      	subs	r3, r2, r3
 800ed36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed38:	8952      	ldrh	r2, [r2, #10]
 800ed3a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ed3e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ed40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d101      	bne.n	800ed4a <find_volume+0x2ca>
 800ed46:	230d      	movs	r3, #13
 800ed48:	e0de      	b.n	800ef08 <find_volume+0x488>
		fmt = FS_FAT32;
 800ed4a:	2303      	movs	r3, #3
 800ed4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ed50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed52:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ed56:	4293      	cmp	r3, r2
 800ed58:	d802      	bhi.n	800ed60 <find_volume+0x2e0>
 800ed5a:	2302      	movs	r3, #2
 800ed5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ed60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed62:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ed66:	4293      	cmp	r3, r2
 800ed68:	d802      	bhi.n	800ed70 <find_volume+0x2f0>
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ed70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed72:	1c9a      	adds	r2, r3, #2
 800ed74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed76:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800ed78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ed7c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ed7e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ed80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed82:	441a      	add	r2, r3
 800ed84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed86:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800ed88:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ed8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed8c:	441a      	add	r2, r3
 800ed8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed90:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800ed92:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ed96:	2b03      	cmp	r3, #3
 800ed98:	d11e      	bne.n	800edd8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ed9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed9c:	3334      	adds	r3, #52	; 0x34
 800ed9e:	332a      	adds	r3, #42	; 0x2a
 800eda0:	4618      	mov	r0, r3
 800eda2:	f7fd ff97 	bl	800ccd4 <ld_word>
 800eda6:	4603      	mov	r3, r0
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d001      	beq.n	800edb0 <find_volume+0x330>
 800edac:	230d      	movs	r3, #13
 800edae:	e0ab      	b.n	800ef08 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800edb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edb2:	891b      	ldrh	r3, [r3, #8]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d001      	beq.n	800edbc <find_volume+0x33c>
 800edb8:	230d      	movs	r3, #13
 800edba:	e0a5      	b.n	800ef08 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800edbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edbe:	3334      	adds	r3, #52	; 0x34
 800edc0:	332c      	adds	r3, #44	; 0x2c
 800edc2:	4618      	mov	r0, r3
 800edc4:	f7fd ff9e 	bl	800cd04 <ld_dword>
 800edc8:	4602      	mov	r2, r0
 800edca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edcc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800edce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edd0:	699b      	ldr	r3, [r3, #24]
 800edd2:	009b      	lsls	r3, r3, #2
 800edd4:	647b      	str	r3, [r7, #68]	; 0x44
 800edd6:	e01f      	b.n	800ee18 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800edd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edda:	891b      	ldrh	r3, [r3, #8]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d101      	bne.n	800ede4 <find_volume+0x364>
 800ede0:	230d      	movs	r3, #13
 800ede2:	e091      	b.n	800ef08 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ede4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ede6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ede8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edea:	441a      	add	r2, r3
 800edec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edee:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800edf0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800edf4:	2b02      	cmp	r3, #2
 800edf6:	d103      	bne.n	800ee00 <find_volume+0x380>
 800edf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edfa:	699b      	ldr	r3, [r3, #24]
 800edfc:	005b      	lsls	r3, r3, #1
 800edfe:	e00a      	b.n	800ee16 <find_volume+0x396>
 800ee00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee02:	699a      	ldr	r2, [r3, #24]
 800ee04:	4613      	mov	r3, r2
 800ee06:	005b      	lsls	r3, r3, #1
 800ee08:	4413      	add	r3, r2
 800ee0a:	085a      	lsrs	r2, r3, #1
 800ee0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee0e:	699b      	ldr	r3, [r3, #24]
 800ee10:	f003 0301 	and.w	r3, r3, #1
 800ee14:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ee16:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ee18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee1a:	69da      	ldr	r2, [r3, #28]
 800ee1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee1e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ee22:	0a5b      	lsrs	r3, r3, #9
 800ee24:	429a      	cmp	r2, r3
 800ee26:	d201      	bcs.n	800ee2c <find_volume+0x3ac>
 800ee28:	230d      	movs	r3, #13
 800ee2a:	e06d      	b.n	800ef08 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ee2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ee32:	615a      	str	r2, [r3, #20]
 800ee34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee36:	695a      	ldr	r2, [r3, #20]
 800ee38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee3a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800ee3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee3e:	2280      	movs	r2, #128	; 0x80
 800ee40:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ee42:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ee46:	2b03      	cmp	r3, #3
 800ee48:	d149      	bne.n	800eede <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ee4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee4c:	3334      	adds	r3, #52	; 0x34
 800ee4e:	3330      	adds	r3, #48	; 0x30
 800ee50:	4618      	mov	r0, r3
 800ee52:	f7fd ff3f 	bl	800ccd4 <ld_word>
 800ee56:	4603      	mov	r3, r0
 800ee58:	2b01      	cmp	r3, #1
 800ee5a:	d140      	bne.n	800eede <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ee5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee5e:	3301      	adds	r3, #1
 800ee60:	4619      	mov	r1, r3
 800ee62:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ee64:	f7fe f9e6 	bl	800d234 <move_window>
 800ee68:	4603      	mov	r3, r0
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d137      	bne.n	800eede <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800ee6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee70:	2200      	movs	r2, #0
 800ee72:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ee74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee76:	3334      	adds	r3, #52	; 0x34
 800ee78:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f7fd ff29 	bl	800ccd4 <ld_word>
 800ee82:	4603      	mov	r3, r0
 800ee84:	461a      	mov	r2, r3
 800ee86:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ee8a:	429a      	cmp	r2, r3
 800ee8c:	d127      	bne.n	800eede <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ee8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee90:	3334      	adds	r3, #52	; 0x34
 800ee92:	4618      	mov	r0, r3
 800ee94:	f7fd ff36 	bl	800cd04 <ld_dword>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	4a1d      	ldr	r2, [pc, #116]	; (800ef10 <find_volume+0x490>)
 800ee9c:	4293      	cmp	r3, r2
 800ee9e:	d11e      	bne.n	800eede <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800eea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eea2:	3334      	adds	r3, #52	; 0x34
 800eea4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f7fd ff2b 	bl	800cd04 <ld_dword>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	4a18      	ldr	r2, [pc, #96]	; (800ef14 <find_volume+0x494>)
 800eeb2:	4293      	cmp	r3, r2
 800eeb4:	d113      	bne.n	800eede <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800eeb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeb8:	3334      	adds	r3, #52	; 0x34
 800eeba:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800eebe:	4618      	mov	r0, r3
 800eec0:	f7fd ff20 	bl	800cd04 <ld_dword>
 800eec4:	4602      	mov	r2, r0
 800eec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eec8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800eeca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eecc:	3334      	adds	r3, #52	; 0x34
 800eece:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800eed2:	4618      	mov	r0, r3
 800eed4:	f7fd ff16 	bl	800cd04 <ld_dword>
 800eed8:	4602      	mov	r2, r0
 800eeda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eedc:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800eede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eee0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800eee4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800eee6:	4b0c      	ldr	r3, [pc, #48]	; (800ef18 <find_volume+0x498>)
 800eee8:	881b      	ldrh	r3, [r3, #0]
 800eeea:	3301      	adds	r3, #1
 800eeec:	b29a      	uxth	r2, r3
 800eeee:	4b0a      	ldr	r3, [pc, #40]	; (800ef18 <find_volume+0x498>)
 800eef0:	801a      	strh	r2, [r3, #0]
 800eef2:	4b09      	ldr	r3, [pc, #36]	; (800ef18 <find_volume+0x498>)
 800eef4:	881a      	ldrh	r2, [r3, #0]
 800eef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eef8:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800eefa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eefc:	4a07      	ldr	r2, [pc, #28]	; (800ef1c <find_volume+0x49c>)
 800eefe:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ef00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ef02:	f7fe f92f 	bl	800d164 <clear_lock>
#endif
	return FR_OK;
 800ef06:	2300      	movs	r3, #0
}
 800ef08:	4618      	mov	r0, r3
 800ef0a:	3758      	adds	r7, #88	; 0x58
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	bd80      	pop	{r7, pc}
 800ef10:	41615252 	.word	0x41615252
 800ef14:	61417272 	.word	0x61417272
 800ef18:	20002990 	.word	0x20002990
 800ef1c:	200029b4 	.word	0x200029b4

0800ef20 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b084      	sub	sp, #16
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
 800ef28:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ef2a:	2309      	movs	r3, #9
 800ef2c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d01c      	beq.n	800ef6e <validate+0x4e>
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d018      	beq.n	800ef6e <validate+0x4e>
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	781b      	ldrb	r3, [r3, #0]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d013      	beq.n	800ef6e <validate+0x4e>
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	889a      	ldrh	r2, [r3, #4]
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	88db      	ldrh	r3, [r3, #6]
 800ef50:	429a      	cmp	r2, r3
 800ef52:	d10c      	bne.n	800ef6e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	785b      	ldrb	r3, [r3, #1]
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f7fd fe1c 	bl	800cb98 <disk_status>
 800ef60:	4603      	mov	r3, r0
 800ef62:	f003 0301 	and.w	r3, r3, #1
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d101      	bne.n	800ef6e <validate+0x4e>
			res = FR_OK;
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ef6e:	7bfb      	ldrb	r3, [r7, #15]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d102      	bne.n	800ef7a <validate+0x5a>
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	e000      	b.n	800ef7c <validate+0x5c>
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	683a      	ldr	r2, [r7, #0]
 800ef7e:	6013      	str	r3, [r2, #0]
	return res;
 800ef80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef82:	4618      	mov	r0, r3
 800ef84:	3710      	adds	r7, #16
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}
	...

0800ef8c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b088      	sub	sp, #32
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	60f8      	str	r0, [r7, #12]
 800ef94:	60b9      	str	r1, [r7, #8]
 800ef96:	4613      	mov	r3, r2
 800ef98:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ef9e:	f107 0310 	add.w	r3, r7, #16
 800efa2:	4618      	mov	r0, r3
 800efa4:	f7ff fcd1 	bl	800e94a <get_ldnumber>
 800efa8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800efaa:	69fb      	ldr	r3, [r7, #28]
 800efac:	2b00      	cmp	r3, #0
 800efae:	da01      	bge.n	800efb4 <f_mount+0x28>
 800efb0:	230b      	movs	r3, #11
 800efb2:	e02b      	b.n	800f00c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800efb4:	4a17      	ldr	r2, [pc, #92]	; (800f014 <f_mount+0x88>)
 800efb6:	69fb      	ldr	r3, [r7, #28]
 800efb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800efbc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800efbe:	69bb      	ldr	r3, [r7, #24]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d005      	beq.n	800efd0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800efc4:	69b8      	ldr	r0, [r7, #24]
 800efc6:	f7fe f8cd 	bl	800d164 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800efca:	69bb      	ldr	r3, [r7, #24]
 800efcc:	2200      	movs	r2, #0
 800efce:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d002      	beq.n	800efdc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	2200      	movs	r2, #0
 800efda:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800efdc:	68fa      	ldr	r2, [r7, #12]
 800efde:	490d      	ldr	r1, [pc, #52]	; (800f014 <f_mount+0x88>)
 800efe0:	69fb      	ldr	r3, [r7, #28]
 800efe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d002      	beq.n	800eff2 <f_mount+0x66>
 800efec:	79fb      	ldrb	r3, [r7, #7]
 800efee:	2b01      	cmp	r3, #1
 800eff0:	d001      	beq.n	800eff6 <f_mount+0x6a>
 800eff2:	2300      	movs	r3, #0
 800eff4:	e00a      	b.n	800f00c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800eff6:	f107 010c 	add.w	r1, r7, #12
 800effa:	f107 0308 	add.w	r3, r7, #8
 800effe:	2200      	movs	r2, #0
 800f000:	4618      	mov	r0, r3
 800f002:	f7ff fd3d 	bl	800ea80 <find_volume>
 800f006:	4603      	mov	r3, r0
 800f008:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f00a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f00c:	4618      	mov	r0, r3
 800f00e:	3720      	adds	r7, #32
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}
 800f014:	2000298c 	.word	0x2000298c

0800f018 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b09a      	sub	sp, #104	; 0x68
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	60f8      	str	r0, [r7, #12]
 800f020:	60b9      	str	r1, [r7, #8]
 800f022:	4613      	mov	r3, r2
 800f024:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d101      	bne.n	800f030 <f_open+0x18>
 800f02c:	2309      	movs	r3, #9
 800f02e:	e1ad      	b.n	800f38c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f030:	79fb      	ldrb	r3, [r7, #7]
 800f032:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f036:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f038:	79fa      	ldrb	r2, [r7, #7]
 800f03a:	f107 0114 	add.w	r1, r7, #20
 800f03e:	f107 0308 	add.w	r3, r7, #8
 800f042:	4618      	mov	r0, r3
 800f044:	f7ff fd1c 	bl	800ea80 <find_volume>
 800f048:	4603      	mov	r3, r0
 800f04a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800f04e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f052:	2b00      	cmp	r3, #0
 800f054:	f040 8191 	bne.w	800f37a <f_open+0x362>
		dj.obj.fs = fs;
 800f058:	697b      	ldr	r3, [r7, #20]
 800f05a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f05c:	68ba      	ldr	r2, [r7, #8]
 800f05e:	f107 0318 	add.w	r3, r7, #24
 800f062:	4611      	mov	r1, r2
 800f064:	4618      	mov	r0, r3
 800f066:	f7ff fbff 	bl	800e868 <follow_path>
 800f06a:	4603      	mov	r3, r0
 800f06c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f070:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f074:	2b00      	cmp	r3, #0
 800f076:	d11a      	bne.n	800f0ae <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f078:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f07c:	b25b      	sxtb	r3, r3
 800f07e:	2b00      	cmp	r3, #0
 800f080:	da03      	bge.n	800f08a <f_open+0x72>
				res = FR_INVALID_NAME;
 800f082:	2306      	movs	r3, #6
 800f084:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f088:	e011      	b.n	800f0ae <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f08a:	79fb      	ldrb	r3, [r7, #7]
 800f08c:	f023 0301 	bic.w	r3, r3, #1
 800f090:	2b00      	cmp	r3, #0
 800f092:	bf14      	ite	ne
 800f094:	2301      	movne	r3, #1
 800f096:	2300      	moveq	r3, #0
 800f098:	b2db      	uxtb	r3, r3
 800f09a:	461a      	mov	r2, r3
 800f09c:	f107 0318 	add.w	r3, r7, #24
 800f0a0:	4611      	mov	r1, r2
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f7fd ff16 	bl	800ced4 <chk_lock>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f0ae:	79fb      	ldrb	r3, [r7, #7]
 800f0b0:	f003 031c 	and.w	r3, r3, #28
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d07f      	beq.n	800f1b8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800f0b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d017      	beq.n	800f0f0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f0c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f0c4:	2b04      	cmp	r3, #4
 800f0c6:	d10e      	bne.n	800f0e6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f0c8:	f7fd ff60 	bl	800cf8c <enq_lock>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d006      	beq.n	800f0e0 <f_open+0xc8>
 800f0d2:	f107 0318 	add.w	r3, r7, #24
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f7ff f838 	bl	800e14c <dir_register>
 800f0dc:	4603      	mov	r3, r0
 800f0de:	e000      	b.n	800f0e2 <f_open+0xca>
 800f0e0:	2312      	movs	r3, #18
 800f0e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f0e6:	79fb      	ldrb	r3, [r7, #7]
 800f0e8:	f043 0308 	orr.w	r3, r3, #8
 800f0ec:	71fb      	strb	r3, [r7, #7]
 800f0ee:	e010      	b.n	800f112 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f0f0:	7fbb      	ldrb	r3, [r7, #30]
 800f0f2:	f003 0311 	and.w	r3, r3, #17
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d003      	beq.n	800f102 <f_open+0xea>
					res = FR_DENIED;
 800f0fa:	2307      	movs	r3, #7
 800f0fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f100:	e007      	b.n	800f112 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f102:	79fb      	ldrb	r3, [r7, #7]
 800f104:	f003 0304 	and.w	r3, r3, #4
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d002      	beq.n	800f112 <f_open+0xfa>
 800f10c:	2308      	movs	r3, #8
 800f10e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f112:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f116:	2b00      	cmp	r3, #0
 800f118:	d168      	bne.n	800f1ec <f_open+0x1d4>
 800f11a:	79fb      	ldrb	r3, [r7, #7]
 800f11c:	f003 0308 	and.w	r3, r3, #8
 800f120:	2b00      	cmp	r3, #0
 800f122:	d063      	beq.n	800f1ec <f_open+0x1d4>
				dw = GET_FATTIME();
 800f124:	f7fb fb0a 	bl	800a73c <get_fattime>
 800f128:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f12c:	330e      	adds	r3, #14
 800f12e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f130:	4618      	mov	r0, r3
 800f132:	f7fd fe25 	bl	800cd80 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f138:	3316      	adds	r3, #22
 800f13a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f13c:	4618      	mov	r0, r3
 800f13e:	f7fd fe1f 	bl	800cd80 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f144:	330b      	adds	r3, #11
 800f146:	2220      	movs	r2, #32
 800f148:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f14a:	697b      	ldr	r3, [r7, #20]
 800f14c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f14e:	4611      	mov	r1, r2
 800f150:	4618      	mov	r0, r3
 800f152:	f7fe fd74 	bl	800dc3e <ld_clust>
 800f156:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f158:	697b      	ldr	r3, [r7, #20]
 800f15a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f15c:	2200      	movs	r2, #0
 800f15e:	4618      	mov	r0, r3
 800f160:	f7fe fd8c 	bl	800dc7c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f166:	331c      	adds	r3, #28
 800f168:	2100      	movs	r1, #0
 800f16a:	4618      	mov	r0, r3
 800f16c:	f7fd fe08 	bl	800cd80 <st_dword>
					fs->wflag = 1;
 800f170:	697b      	ldr	r3, [r7, #20]
 800f172:	2201      	movs	r2, #1
 800f174:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d037      	beq.n	800f1ec <f_open+0x1d4>
						dw = fs->winsect;
 800f17c:	697b      	ldr	r3, [r7, #20]
 800f17e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f180:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800f182:	f107 0318 	add.w	r3, r7, #24
 800f186:	2200      	movs	r2, #0
 800f188:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f18a:	4618      	mov	r0, r3
 800f18c:	f7fe fa9f 	bl	800d6ce <remove_chain>
 800f190:	4603      	mov	r3, r0
 800f192:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800f196:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d126      	bne.n	800f1ec <f_open+0x1d4>
							res = move_window(fs, dw);
 800f19e:	697b      	ldr	r3, [r7, #20]
 800f1a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f7fe f846 	bl	800d234 <move_window>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f1ae:	697b      	ldr	r3, [r7, #20]
 800f1b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f1b2:	3a01      	subs	r2, #1
 800f1b4:	611a      	str	r2, [r3, #16]
 800f1b6:	e019      	b.n	800f1ec <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f1b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d115      	bne.n	800f1ec <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f1c0:	7fbb      	ldrb	r3, [r7, #30]
 800f1c2:	f003 0310 	and.w	r3, r3, #16
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d003      	beq.n	800f1d2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800f1ca:	2304      	movs	r3, #4
 800f1cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f1d0:	e00c      	b.n	800f1ec <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f1d2:	79fb      	ldrb	r3, [r7, #7]
 800f1d4:	f003 0302 	and.w	r3, r3, #2
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d007      	beq.n	800f1ec <f_open+0x1d4>
 800f1dc:	7fbb      	ldrb	r3, [r7, #30]
 800f1de:	f003 0301 	and.w	r3, r3, #1
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d002      	beq.n	800f1ec <f_open+0x1d4>
						res = FR_DENIED;
 800f1e6:	2307      	movs	r3, #7
 800f1e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800f1ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d128      	bne.n	800f246 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f1f4:	79fb      	ldrb	r3, [r7, #7]
 800f1f6:	f003 0308 	and.w	r3, r3, #8
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d003      	beq.n	800f206 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800f1fe:	79fb      	ldrb	r3, [r7, #7]
 800f200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f204:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f20e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f214:	79fb      	ldrb	r3, [r7, #7]
 800f216:	f023 0301 	bic.w	r3, r3, #1
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	bf14      	ite	ne
 800f21e:	2301      	movne	r3, #1
 800f220:	2300      	moveq	r3, #0
 800f222:	b2db      	uxtb	r3, r3
 800f224:	461a      	mov	r2, r3
 800f226:	f107 0318 	add.w	r3, r7, #24
 800f22a:	4611      	mov	r1, r2
 800f22c:	4618      	mov	r0, r3
 800f22e:	f7fd fecf 	bl	800cfd0 <inc_lock>
 800f232:	4602      	mov	r2, r0
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	691b      	ldr	r3, [r3, #16]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d102      	bne.n	800f246 <f_open+0x22e>
 800f240:	2302      	movs	r3, #2
 800f242:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f246:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	f040 8095 	bne.w	800f37a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f250:	697b      	ldr	r3, [r7, #20]
 800f252:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f254:	4611      	mov	r1, r2
 800f256:	4618      	mov	r0, r3
 800f258:	f7fe fcf1 	bl	800dc3e <ld_clust>
 800f25c:	4602      	mov	r2, r0
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f264:	331c      	adds	r3, #28
 800f266:	4618      	mov	r0, r3
 800f268:	f7fd fd4c 	bl	800cd04 <ld_dword>
 800f26c:	4602      	mov	r2, r0
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	2200      	movs	r2, #0
 800f276:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f278:	697a      	ldr	r2, [r7, #20]
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f27e:	697b      	ldr	r3, [r7, #20]
 800f280:	88da      	ldrh	r2, [r3, #6]
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	79fa      	ldrb	r2, [r7, #7]
 800f28a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	2200      	movs	r2, #0
 800f290:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	2200      	movs	r2, #0
 800f296:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	2200      	movs	r2, #0
 800f29c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	3330      	adds	r3, #48	; 0x30
 800f2a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f2a6:	2100      	movs	r1, #0
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f7fd fdb6 	bl	800ce1a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f2ae:	79fb      	ldrb	r3, [r7, #7]
 800f2b0:	f003 0320 	and.w	r3, r3, #32
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d060      	beq.n	800f37a <f_open+0x362>
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	68db      	ldr	r3, [r3, #12]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d05c      	beq.n	800f37a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	68da      	ldr	r2, [r3, #12]
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f2c8:	697b      	ldr	r3, [r7, #20]
 800f2ca:	895b      	ldrh	r3, [r3, #10]
 800f2cc:	025b      	lsls	r3, r3, #9
 800f2ce:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	689b      	ldr	r3, [r3, #8]
 800f2d4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	68db      	ldr	r3, [r3, #12]
 800f2da:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f2dc:	e016      	b.n	800f30c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	f7fe f861 	bl	800d3aa <get_fat>
 800f2e8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800f2ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f2ec:	2b01      	cmp	r3, #1
 800f2ee:	d802      	bhi.n	800f2f6 <f_open+0x2de>
 800f2f0:	2302      	movs	r3, #2
 800f2f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f2f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f2f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f2fc:	d102      	bne.n	800f304 <f_open+0x2ec>
 800f2fe:	2301      	movs	r3, #1
 800f300:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f304:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f308:	1ad3      	subs	r3, r2, r3
 800f30a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f30c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f310:	2b00      	cmp	r3, #0
 800f312:	d103      	bne.n	800f31c <f_open+0x304>
 800f314:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f318:	429a      	cmp	r2, r3
 800f31a:	d8e0      	bhi.n	800f2de <f_open+0x2c6>
				}
				fp->clust = clst;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f320:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f322:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f326:	2b00      	cmp	r3, #0
 800f328:	d127      	bne.n	800f37a <f_open+0x362>
 800f32a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f32c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f330:	2b00      	cmp	r3, #0
 800f332:	d022      	beq.n	800f37a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f334:	697b      	ldr	r3, [r7, #20]
 800f336:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f338:	4618      	mov	r0, r3
 800f33a:	f7fe f817 	bl	800d36c <clust2sect>
 800f33e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800f340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f342:	2b00      	cmp	r3, #0
 800f344:	d103      	bne.n	800f34e <f_open+0x336>
						res = FR_INT_ERR;
 800f346:	2302      	movs	r3, #2
 800f348:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f34c:	e015      	b.n	800f37a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f34e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f350:	0a5a      	lsrs	r2, r3, #9
 800f352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f354:	441a      	add	r2, r3
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f35a:	697b      	ldr	r3, [r7, #20]
 800f35c:	7858      	ldrb	r0, [r3, #1]
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	6a1a      	ldr	r2, [r3, #32]
 800f368:	2301      	movs	r3, #1
 800f36a:	f7fd fc55 	bl	800cc18 <disk_read>
 800f36e:	4603      	mov	r3, r0
 800f370:	2b00      	cmp	r3, #0
 800f372:	d002      	beq.n	800f37a <f_open+0x362>
 800f374:	2301      	movs	r3, #1
 800f376:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f37a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d002      	beq.n	800f388 <f_open+0x370>
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	2200      	movs	r2, #0
 800f386:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f388:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800f38c:	4618      	mov	r0, r3
 800f38e:	3768      	adds	r7, #104	; 0x68
 800f390:	46bd      	mov	sp, r7
 800f392:	bd80      	pop	{r7, pc}

0800f394 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b08c      	sub	sp, #48	; 0x30
 800f398:	af00      	add	r7, sp, #0
 800f39a:	60f8      	str	r0, [r7, #12]
 800f39c:	60b9      	str	r1, [r7, #8]
 800f39e:	607a      	str	r2, [r7, #4]
 800f3a0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f3a2:	68bb      	ldr	r3, [r7, #8]
 800f3a4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	f107 0210 	add.w	r2, r7, #16
 800f3b2:	4611      	mov	r1, r2
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	f7ff fdb3 	bl	800ef20 <validate>
 800f3ba:	4603      	mov	r3, r0
 800f3bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f3c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d107      	bne.n	800f3d8 <f_write+0x44>
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	7d5b      	ldrb	r3, [r3, #21]
 800f3cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f3d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d002      	beq.n	800f3de <f_write+0x4a>
 800f3d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f3dc:	e14b      	b.n	800f676 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	7d1b      	ldrb	r3, [r3, #20]
 800f3e2:	f003 0302 	and.w	r3, r3, #2
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d101      	bne.n	800f3ee <f_write+0x5a>
 800f3ea:	2307      	movs	r3, #7
 800f3ec:	e143      	b.n	800f676 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	699a      	ldr	r2, [r3, #24]
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	441a      	add	r2, r3
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	699b      	ldr	r3, [r3, #24]
 800f3fa:	429a      	cmp	r2, r3
 800f3fc:	f080 812d 	bcs.w	800f65a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	699b      	ldr	r3, [r3, #24]
 800f404:	43db      	mvns	r3, r3
 800f406:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f408:	e127      	b.n	800f65a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	699b      	ldr	r3, [r3, #24]
 800f40e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f412:	2b00      	cmp	r3, #0
 800f414:	f040 80e3 	bne.w	800f5de <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	699b      	ldr	r3, [r3, #24]
 800f41c:	0a5b      	lsrs	r3, r3, #9
 800f41e:	693a      	ldr	r2, [r7, #16]
 800f420:	8952      	ldrh	r2, [r2, #10]
 800f422:	3a01      	subs	r2, #1
 800f424:	4013      	ands	r3, r2
 800f426:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f428:	69bb      	ldr	r3, [r7, #24]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d143      	bne.n	800f4b6 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	699b      	ldr	r3, [r3, #24]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d10c      	bne.n	800f450 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	689b      	ldr	r3, [r3, #8]
 800f43a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d11a      	bne.n	800f478 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	2100      	movs	r1, #0
 800f446:	4618      	mov	r0, r3
 800f448:	f7fe f9a6 	bl	800d798 <create_chain>
 800f44c:	62b8      	str	r0, [r7, #40]	; 0x28
 800f44e:	e013      	b.n	800f478 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f454:	2b00      	cmp	r3, #0
 800f456:	d007      	beq.n	800f468 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	699b      	ldr	r3, [r3, #24]
 800f45c:	4619      	mov	r1, r3
 800f45e:	68f8      	ldr	r0, [r7, #12]
 800f460:	f7fe fa32 	bl	800d8c8 <clmt_clust>
 800f464:	62b8      	str	r0, [r7, #40]	; 0x28
 800f466:	e007      	b.n	800f478 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f468:	68fa      	ldr	r2, [r7, #12]
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	69db      	ldr	r3, [r3, #28]
 800f46e:	4619      	mov	r1, r3
 800f470:	4610      	mov	r0, r2
 800f472:	f7fe f991 	bl	800d798 <create_chain>
 800f476:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	f000 80f2 	beq.w	800f664 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f482:	2b01      	cmp	r3, #1
 800f484:	d104      	bne.n	800f490 <f_write+0xfc>
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	2202      	movs	r2, #2
 800f48a:	755a      	strb	r2, [r3, #21]
 800f48c:	2302      	movs	r3, #2
 800f48e:	e0f2      	b.n	800f676 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f492:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f496:	d104      	bne.n	800f4a2 <f_write+0x10e>
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	2201      	movs	r2, #1
 800f49c:	755a      	strb	r2, [r3, #21]
 800f49e:	2301      	movs	r3, #1
 800f4a0:	e0e9      	b.n	800f676 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f4a6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	689b      	ldr	r3, [r3, #8]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d102      	bne.n	800f4b6 <f_write+0x122>
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f4b4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	7d1b      	ldrb	r3, [r3, #20]
 800f4ba:	b25b      	sxtb	r3, r3
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	da18      	bge.n	800f4f2 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f4c0:	693b      	ldr	r3, [r7, #16]
 800f4c2:	7858      	ldrb	r0, [r3, #1]
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	6a1a      	ldr	r2, [r3, #32]
 800f4ce:	2301      	movs	r3, #1
 800f4d0:	f7fd fbc2 	bl	800cc58 <disk_write>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d004      	beq.n	800f4e4 <f_write+0x150>
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	2201      	movs	r2, #1
 800f4de:	755a      	strb	r2, [r3, #21]
 800f4e0:	2301      	movs	r3, #1
 800f4e2:	e0c8      	b.n	800f676 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	7d1b      	ldrb	r3, [r3, #20]
 800f4e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f4ec:	b2da      	uxtb	r2, r3
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f4f2:	693a      	ldr	r2, [r7, #16]
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	69db      	ldr	r3, [r3, #28]
 800f4f8:	4619      	mov	r1, r3
 800f4fa:	4610      	mov	r0, r2
 800f4fc:	f7fd ff36 	bl	800d36c <clust2sect>
 800f500:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f502:	697b      	ldr	r3, [r7, #20]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d104      	bne.n	800f512 <f_write+0x17e>
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	2202      	movs	r2, #2
 800f50c:	755a      	strb	r2, [r3, #21]
 800f50e:	2302      	movs	r3, #2
 800f510:	e0b1      	b.n	800f676 <f_write+0x2e2>
			sect += csect;
 800f512:	697a      	ldr	r2, [r7, #20]
 800f514:	69bb      	ldr	r3, [r7, #24]
 800f516:	4413      	add	r3, r2
 800f518:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	0a5b      	lsrs	r3, r3, #9
 800f51e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f520:	6a3b      	ldr	r3, [r7, #32]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d03c      	beq.n	800f5a0 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f526:	69ba      	ldr	r2, [r7, #24]
 800f528:	6a3b      	ldr	r3, [r7, #32]
 800f52a:	4413      	add	r3, r2
 800f52c:	693a      	ldr	r2, [r7, #16]
 800f52e:	8952      	ldrh	r2, [r2, #10]
 800f530:	4293      	cmp	r3, r2
 800f532:	d905      	bls.n	800f540 <f_write+0x1ac>
					cc = fs->csize - csect;
 800f534:	693b      	ldr	r3, [r7, #16]
 800f536:	895b      	ldrh	r3, [r3, #10]
 800f538:	461a      	mov	r2, r3
 800f53a:	69bb      	ldr	r3, [r7, #24]
 800f53c:	1ad3      	subs	r3, r2, r3
 800f53e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f540:	693b      	ldr	r3, [r7, #16]
 800f542:	7858      	ldrb	r0, [r3, #1]
 800f544:	6a3b      	ldr	r3, [r7, #32]
 800f546:	697a      	ldr	r2, [r7, #20]
 800f548:	69f9      	ldr	r1, [r7, #28]
 800f54a:	f7fd fb85 	bl	800cc58 <disk_write>
 800f54e:	4603      	mov	r3, r0
 800f550:	2b00      	cmp	r3, #0
 800f552:	d004      	beq.n	800f55e <f_write+0x1ca>
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	2201      	movs	r2, #1
 800f558:	755a      	strb	r2, [r3, #21]
 800f55a:	2301      	movs	r3, #1
 800f55c:	e08b      	b.n	800f676 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	6a1a      	ldr	r2, [r3, #32]
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	1ad3      	subs	r3, r2, r3
 800f566:	6a3a      	ldr	r2, [r7, #32]
 800f568:	429a      	cmp	r2, r3
 800f56a:	d915      	bls.n	800f598 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	6a1a      	ldr	r2, [r3, #32]
 800f576:	697b      	ldr	r3, [r7, #20]
 800f578:	1ad3      	subs	r3, r2, r3
 800f57a:	025b      	lsls	r3, r3, #9
 800f57c:	69fa      	ldr	r2, [r7, #28]
 800f57e:	4413      	add	r3, r2
 800f580:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f584:	4619      	mov	r1, r3
 800f586:	f7fd fc27 	bl	800cdd8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	7d1b      	ldrb	r3, [r3, #20]
 800f58e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f592:	b2da      	uxtb	r2, r3
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f598:	6a3b      	ldr	r3, [r7, #32]
 800f59a:	025b      	lsls	r3, r3, #9
 800f59c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f59e:	e03f      	b.n	800f620 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	6a1b      	ldr	r3, [r3, #32]
 800f5a4:	697a      	ldr	r2, [r7, #20]
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d016      	beq.n	800f5d8 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	699a      	ldr	r2, [r3, #24]
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f5b2:	429a      	cmp	r2, r3
 800f5b4:	d210      	bcs.n	800f5d8 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f5b6:	693b      	ldr	r3, [r7, #16]
 800f5b8:	7858      	ldrb	r0, [r3, #1]
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f5c0:	2301      	movs	r3, #1
 800f5c2:	697a      	ldr	r2, [r7, #20]
 800f5c4:	f7fd fb28 	bl	800cc18 <disk_read>
 800f5c8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d004      	beq.n	800f5d8 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	2201      	movs	r2, #1
 800f5d2:	755a      	strb	r2, [r3, #21]
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	e04e      	b.n	800f676 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	697a      	ldr	r2, [r7, #20]
 800f5dc:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	699b      	ldr	r3, [r3, #24]
 800f5e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f5e6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f5ea:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f5ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	429a      	cmp	r2, r3
 800f5f2:	d901      	bls.n	800f5f8 <f_write+0x264>
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	699b      	ldr	r3, [r3, #24]
 800f602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f606:	4413      	add	r3, r2
 800f608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f60a:	69f9      	ldr	r1, [r7, #28]
 800f60c:	4618      	mov	r0, r3
 800f60e:	f7fd fbe3 	bl	800cdd8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	7d1b      	ldrb	r3, [r3, #20]
 800f616:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f61a:	b2da      	uxtb	r2, r3
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f620:	69fa      	ldr	r2, [r7, #28]
 800f622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f624:	4413      	add	r3, r2
 800f626:	61fb      	str	r3, [r7, #28]
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	699a      	ldr	r2, [r3, #24]
 800f62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f62e:	441a      	add	r2, r3
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	619a      	str	r2, [r3, #24]
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	68da      	ldr	r2, [r3, #12]
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	699b      	ldr	r3, [r3, #24]
 800f63c:	429a      	cmp	r2, r3
 800f63e:	bf38      	it	cc
 800f640:	461a      	movcc	r2, r3
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	60da      	str	r2, [r3, #12]
 800f646:	683b      	ldr	r3, [r7, #0]
 800f648:	681a      	ldr	r2, [r3, #0]
 800f64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f64c:	441a      	add	r2, r3
 800f64e:	683b      	ldr	r3, [r7, #0]
 800f650:	601a      	str	r2, [r3, #0]
 800f652:	687a      	ldr	r2, [r7, #4]
 800f654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f656:	1ad3      	subs	r3, r2, r3
 800f658:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	f47f aed4 	bne.w	800f40a <f_write+0x76>
 800f662:	e000      	b.n	800f666 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f664:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	7d1b      	ldrb	r3, [r3, #20]
 800f66a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f66e:	b2da      	uxtb	r2, r3
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f674:	2300      	movs	r3, #0
}
 800f676:	4618      	mov	r0, r3
 800f678:	3730      	adds	r7, #48	; 0x30
 800f67a:	46bd      	mov	sp, r7
 800f67c:	bd80      	pop	{r7, pc}

0800f67e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f67e:	b580      	push	{r7, lr}
 800f680:	b086      	sub	sp, #24
 800f682:	af00      	add	r7, sp, #0
 800f684:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	f107 0208 	add.w	r2, r7, #8
 800f68c:	4611      	mov	r1, r2
 800f68e:	4618      	mov	r0, r3
 800f690:	f7ff fc46 	bl	800ef20 <validate>
 800f694:	4603      	mov	r3, r0
 800f696:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f698:	7dfb      	ldrb	r3, [r7, #23]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d168      	bne.n	800f770 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	7d1b      	ldrb	r3, [r3, #20]
 800f6a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d062      	beq.n	800f770 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	7d1b      	ldrb	r3, [r3, #20]
 800f6ae:	b25b      	sxtb	r3, r3
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	da15      	bge.n	800f6e0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f6b4:	68bb      	ldr	r3, [r7, #8]
 800f6b6:	7858      	ldrb	r0, [r3, #1]
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	6a1a      	ldr	r2, [r3, #32]
 800f6c2:	2301      	movs	r3, #1
 800f6c4:	f7fd fac8 	bl	800cc58 <disk_write>
 800f6c8:	4603      	mov	r3, r0
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d001      	beq.n	800f6d2 <f_sync+0x54>
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	e04f      	b.n	800f772 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	7d1b      	ldrb	r3, [r3, #20]
 800f6d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f6da:	b2da      	uxtb	r2, r3
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f6e0:	f7fb f82c 	bl	800a73c <get_fattime>
 800f6e4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f6e6:	68ba      	ldr	r2, [r7, #8]
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6ec:	4619      	mov	r1, r3
 800f6ee:	4610      	mov	r0, r2
 800f6f0:	f7fd fda0 	bl	800d234 <move_window>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f6f8:	7dfb      	ldrb	r3, [r7, #23]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d138      	bne.n	800f770 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f702:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	330b      	adds	r3, #11
 800f708:	781a      	ldrb	r2, [r3, #0]
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	330b      	adds	r3, #11
 800f70e:	f042 0220 	orr.w	r2, r2, #32
 800f712:	b2d2      	uxtb	r2, r2
 800f714:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	6818      	ldr	r0, [r3, #0]
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	689b      	ldr	r3, [r3, #8]
 800f71e:	461a      	mov	r2, r3
 800f720:	68f9      	ldr	r1, [r7, #12]
 800f722:	f7fe faab 	bl	800dc7c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	f103 021c 	add.w	r2, r3, #28
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	68db      	ldr	r3, [r3, #12]
 800f730:	4619      	mov	r1, r3
 800f732:	4610      	mov	r0, r2
 800f734:	f7fd fb24 	bl	800cd80 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	3316      	adds	r3, #22
 800f73c:	6939      	ldr	r1, [r7, #16]
 800f73e:	4618      	mov	r0, r3
 800f740:	f7fd fb1e 	bl	800cd80 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	3312      	adds	r3, #18
 800f748:	2100      	movs	r1, #0
 800f74a:	4618      	mov	r0, r3
 800f74c:	f7fd fafd 	bl	800cd4a <st_word>
					fs->wflag = 1;
 800f750:	68bb      	ldr	r3, [r7, #8]
 800f752:	2201      	movs	r2, #1
 800f754:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f756:	68bb      	ldr	r3, [r7, #8]
 800f758:	4618      	mov	r0, r3
 800f75a:	f7fd fd99 	bl	800d290 <sync_fs>
 800f75e:	4603      	mov	r3, r0
 800f760:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	7d1b      	ldrb	r3, [r3, #20]
 800f766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f76a:	b2da      	uxtb	r2, r3
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f770:	7dfb      	ldrb	r3, [r7, #23]
}
 800f772:	4618      	mov	r0, r3
 800f774:	3718      	adds	r7, #24
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}

0800f77a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f77a:	b580      	push	{r7, lr}
 800f77c:	b084      	sub	sp, #16
 800f77e:	af00      	add	r7, sp, #0
 800f780:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f782:	6878      	ldr	r0, [r7, #4]
 800f784:	f7ff ff7b 	bl	800f67e <f_sync>
 800f788:	4603      	mov	r3, r0
 800f78a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f78c:	7bfb      	ldrb	r3, [r7, #15]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d118      	bne.n	800f7c4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	f107 0208 	add.w	r2, r7, #8
 800f798:	4611      	mov	r1, r2
 800f79a:	4618      	mov	r0, r3
 800f79c:	f7ff fbc0 	bl	800ef20 <validate>
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f7a4:	7bfb      	ldrb	r3, [r7, #15]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d10c      	bne.n	800f7c4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	691b      	ldr	r3, [r3, #16]
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f7fd fc9c 	bl	800d0ec <dec_lock>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f7b8:	7bfb      	ldrb	r3, [r7, #15]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d102      	bne.n	800f7c4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f7c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	3710      	adds	r7, #16
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	bd80      	pop	{r7, pc}

0800f7ce <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800f7ce:	b580      	push	{r7, lr}
 800f7d0:	b090      	sub	sp, #64	; 0x40
 800f7d2:	af00      	add	r7, sp, #0
 800f7d4:	6078      	str	r0, [r7, #4]
 800f7d6:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800f7d8:	f107 0108 	add.w	r1, r7, #8
 800f7dc:	1d3b      	adds	r3, r7, #4
 800f7de:	2200      	movs	r2, #0
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	f7ff f94d 	bl	800ea80 <find_volume>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800f7ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d11f      	bne.n	800f834 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f7f4:	687a      	ldr	r2, [r7, #4]
 800f7f6:	f107 0308 	add.w	r3, r7, #8
 800f7fa:	4611      	mov	r1, r2
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	f7ff f833 	bl	800e868 <follow_path>
 800f802:	4603      	mov	r3, r0
 800f804:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800f808:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d111      	bne.n	800f834 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800f810:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f814:	b25b      	sxtb	r3, r3
 800f816:	2b00      	cmp	r3, #0
 800f818:	da03      	bge.n	800f822 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800f81a:	2306      	movs	r3, #6
 800f81c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f820:	e008      	b.n	800f834 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800f822:	683b      	ldr	r3, [r7, #0]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d005      	beq.n	800f834 <f_stat+0x66>
 800f828:	f107 0308 	add.w	r3, r7, #8
 800f82c:	6839      	ldr	r1, [r7, #0]
 800f82e:	4618      	mov	r0, r3
 800f830:	f7fe fd84 	bl	800e33c <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800f834:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800f838:	4618      	mov	r0, r3
 800f83a:	3740      	adds	r7, #64	; 0x40
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bd80      	pop	{r7, pc}

0800f840 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b098      	sub	sp, #96	; 0x60
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800f848:	f107 010c 	add.w	r1, r7, #12
 800f84c:	1d3b      	adds	r3, r7, #4
 800f84e:	2202      	movs	r2, #2
 800f850:	4618      	mov	r0, r3
 800f852:	f7ff f915 	bl	800ea80 <find_volume>
 800f856:	4603      	mov	r3, r0
 800f858:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 800f860:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f864:	2b00      	cmp	r3, #0
 800f866:	f040 80ec 	bne.w	800fa42 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800f86a:	687a      	ldr	r2, [r7, #4]
 800f86c:	f107 0310 	add.w	r3, r7, #16
 800f870:	4611      	mov	r1, r2
 800f872:	4618      	mov	r0, r3
 800f874:	f7fe fff8 	bl	800e868 <follow_path>
 800f878:	4603      	mov	r3, r0
 800f87a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800f87e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f882:	2b00      	cmp	r3, #0
 800f884:	d102      	bne.n	800f88c <f_mkdir+0x4c>
 800f886:	2308      	movs	r3, #8
 800f888:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800f88c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f890:	2b04      	cmp	r3, #4
 800f892:	f040 80d6 	bne.w	800fa42 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800f896:	f107 0310 	add.w	r3, r7, #16
 800f89a:	2100      	movs	r1, #0
 800f89c:	4618      	mov	r0, r3
 800f89e:	f7fd ff7b 	bl	800d798 <create_chain>
 800f8a2:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	895b      	ldrh	r3, [r3, #10]
 800f8a8:	025b      	lsls	r3, r3, #9
 800f8aa:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800f8b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d102      	bne.n	800f8be <f_mkdir+0x7e>
 800f8b8:	2307      	movs	r3, #7
 800f8ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 800f8be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8c0:	2b01      	cmp	r3, #1
 800f8c2:	d102      	bne.n	800f8ca <f_mkdir+0x8a>
 800f8c4:	2302      	movs	r3, #2
 800f8c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f8ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f8d0:	d102      	bne.n	800f8d8 <f_mkdir+0x98>
 800f8d2:	2301      	movs	r3, #1
 800f8d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800f8d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d106      	bne.n	800f8ee <f_mkdir+0xae>
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	f7fd fc62 	bl	800d1ac <sync_window>
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 800f8ee:	f7fa ff25 	bl	800a73c <get_fattime>
 800f8f2:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 800f8f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d16a      	bne.n	800f9d2 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f900:	4618      	mov	r0, r3
 800f902:	f7fd fd33 	bl	800d36c <clust2sect>
 800f906:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	3334      	adds	r3, #52	; 0x34
 800f90c:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 800f90e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f912:	2100      	movs	r1, #0
 800f914:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f916:	f7fd fa80 	bl	800ce1a <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800f91a:	220b      	movs	r2, #11
 800f91c:	2120      	movs	r1, #32
 800f91e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f920:	f7fd fa7b 	bl	800ce1a <mem_set>
					dir[DIR_Name] = '.';
 800f924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f926:	222e      	movs	r2, #46	; 0x2e
 800f928:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800f92a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f92c:	330b      	adds	r3, #11
 800f92e:	2210      	movs	r2, #16
 800f930:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800f932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f934:	3316      	adds	r3, #22
 800f936:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f938:	4618      	mov	r0, r3
 800f93a:	f7fd fa21 	bl	800cd80 <st_dword>
					st_clust(fs, dir, dcl);
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f942:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f944:	4618      	mov	r0, r3
 800f946:	f7fe f999 	bl	800dc7c <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800f94a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f94c:	3320      	adds	r3, #32
 800f94e:	2220      	movs	r2, #32
 800f950:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f952:	4618      	mov	r0, r3
 800f954:	f7fd fa40 	bl	800cdd8 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800f958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f95a:	3321      	adds	r3, #33	; 0x21
 800f95c:	222e      	movs	r2, #46	; 0x2e
 800f95e:	701a      	strb	r2, [r3, #0]
 800f960:	69bb      	ldr	r3, [r7, #24]
 800f962:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	781b      	ldrb	r3, [r3, #0]
 800f968:	2b03      	cmp	r3, #3
 800f96a:	d106      	bne.n	800f97a <f_mkdir+0x13a>
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f970:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f972:	429a      	cmp	r2, r3
 800f974:	d101      	bne.n	800f97a <f_mkdir+0x13a>
 800f976:	2300      	movs	r3, #0
 800f978:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 800f97a:	68f8      	ldr	r0, [r7, #12]
 800f97c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f97e:	3320      	adds	r3, #32
 800f980:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f982:	4619      	mov	r1, r3
 800f984:	f7fe f97a 	bl	800dc7c <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	895b      	ldrh	r3, [r3, #10]
 800f98c:	65bb      	str	r3, [r7, #88]	; 0x58
 800f98e:	e01b      	b.n	800f9c8 <f_mkdir+0x188>
					fs->winsect = dsc++;
 800f990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f992:	1c5a      	adds	r2, r3, #1
 800f994:	657a      	str	r2, [r7, #84]	; 0x54
 800f996:	68fa      	ldr	r2, [r7, #12]
 800f998:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	2201      	movs	r2, #1
 800f99e:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	f7fd fc02 	bl	800d1ac <sync_window>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 800f9ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d10c      	bne.n	800f9d0 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 800f9b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f9ba:	2100      	movs	r1, #0
 800f9bc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f9be:	f7fd fa2c 	bl	800ce1a <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800f9c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f9c4:	3b01      	subs	r3, #1
 800f9c6:	65bb      	str	r3, [r7, #88]	; 0x58
 800f9c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d1e0      	bne.n	800f990 <f_mkdir+0x150>
 800f9ce:	e000      	b.n	800f9d2 <f_mkdir+0x192>
					if (res != FR_OK) break;
 800f9d0:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800f9d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d107      	bne.n	800f9ea <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800f9da:	f107 0310 	add.w	r3, r7, #16
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f7fe fbb4 	bl	800e14c <dir_register>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 800f9ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d120      	bne.n	800fa34 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800f9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9f4:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800f9f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9f8:	3316      	adds	r3, #22
 800f9fa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f7fd f9bf 	bl	800cd80 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fa06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f7fe f937 	bl	800dc7c <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800fa0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa10:	330b      	adds	r3, #11
 800fa12:	2210      	movs	r2, #16
 800fa14:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	2201      	movs	r2, #1
 800fa1a:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800fa1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d10e      	bne.n	800fa42 <f_mkdir+0x202>
					res = sync_fs(fs);
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	4618      	mov	r0, r3
 800fa28:	f7fd fc32 	bl	800d290 <sync_fs>
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fa32:	e006      	b.n	800fa42 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800fa34:	f107 0310 	add.w	r3, r7, #16
 800fa38:	2200      	movs	r2, #0
 800fa3a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	f7fd fe46 	bl	800d6ce <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800fa42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800fa46:	4618      	mov	r0, r3
 800fa48:	3760      	adds	r7, #96	; 0x60
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	bd80      	pop	{r7, pc}
	...

0800fa50 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fa50:	b480      	push	{r7}
 800fa52:	b087      	sub	sp, #28
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	60f8      	str	r0, [r7, #12]
 800fa58:	60b9      	str	r1, [r7, #8]
 800fa5a:	4613      	mov	r3, r2
 800fa5c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fa5e:	2301      	movs	r3, #1
 800fa60:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fa62:	2300      	movs	r3, #0
 800fa64:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fa66:	4b1f      	ldr	r3, [pc, #124]	; (800fae4 <FATFS_LinkDriverEx+0x94>)
 800fa68:	7a5b      	ldrb	r3, [r3, #9]
 800fa6a:	b2db      	uxtb	r3, r3
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d131      	bne.n	800fad4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fa70:	4b1c      	ldr	r3, [pc, #112]	; (800fae4 <FATFS_LinkDriverEx+0x94>)
 800fa72:	7a5b      	ldrb	r3, [r3, #9]
 800fa74:	b2db      	uxtb	r3, r3
 800fa76:	461a      	mov	r2, r3
 800fa78:	4b1a      	ldr	r3, [pc, #104]	; (800fae4 <FATFS_LinkDriverEx+0x94>)
 800fa7a:	2100      	movs	r1, #0
 800fa7c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fa7e:	4b19      	ldr	r3, [pc, #100]	; (800fae4 <FATFS_LinkDriverEx+0x94>)
 800fa80:	7a5b      	ldrb	r3, [r3, #9]
 800fa82:	b2db      	uxtb	r3, r3
 800fa84:	4a17      	ldr	r2, [pc, #92]	; (800fae4 <FATFS_LinkDriverEx+0x94>)
 800fa86:	009b      	lsls	r3, r3, #2
 800fa88:	4413      	add	r3, r2
 800fa8a:	68fa      	ldr	r2, [r7, #12]
 800fa8c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fa8e:	4b15      	ldr	r3, [pc, #84]	; (800fae4 <FATFS_LinkDriverEx+0x94>)
 800fa90:	7a5b      	ldrb	r3, [r3, #9]
 800fa92:	b2db      	uxtb	r3, r3
 800fa94:	461a      	mov	r2, r3
 800fa96:	4b13      	ldr	r3, [pc, #76]	; (800fae4 <FATFS_LinkDriverEx+0x94>)
 800fa98:	4413      	add	r3, r2
 800fa9a:	79fa      	ldrb	r2, [r7, #7]
 800fa9c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fa9e:	4b11      	ldr	r3, [pc, #68]	; (800fae4 <FATFS_LinkDriverEx+0x94>)
 800faa0:	7a5b      	ldrb	r3, [r3, #9]
 800faa2:	b2db      	uxtb	r3, r3
 800faa4:	1c5a      	adds	r2, r3, #1
 800faa6:	b2d1      	uxtb	r1, r2
 800faa8:	4a0e      	ldr	r2, [pc, #56]	; (800fae4 <FATFS_LinkDriverEx+0x94>)
 800faaa:	7251      	strb	r1, [r2, #9]
 800faac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800faae:	7dbb      	ldrb	r3, [r7, #22]
 800fab0:	3330      	adds	r3, #48	; 0x30
 800fab2:	b2da      	uxtb	r2, r3
 800fab4:	68bb      	ldr	r3, [r7, #8]
 800fab6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fab8:	68bb      	ldr	r3, [r7, #8]
 800faba:	3301      	adds	r3, #1
 800fabc:	223a      	movs	r2, #58	; 0x3a
 800fabe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fac0:	68bb      	ldr	r3, [r7, #8]
 800fac2:	3302      	adds	r3, #2
 800fac4:	222f      	movs	r2, #47	; 0x2f
 800fac6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fac8:	68bb      	ldr	r3, [r7, #8]
 800faca:	3303      	adds	r3, #3
 800facc:	2200      	movs	r2, #0
 800face:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fad0:	2300      	movs	r3, #0
 800fad2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fad4:	7dfb      	ldrb	r3, [r7, #23]
}
 800fad6:	4618      	mov	r0, r3
 800fad8:	371c      	adds	r7, #28
 800fada:	46bd      	mov	sp, r7
 800fadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae0:	4770      	bx	lr
 800fae2:	bf00      	nop
 800fae4:	20002bb4 	.word	0x20002bb4

0800fae8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b082      	sub	sp, #8
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
 800faf0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800faf2:	2200      	movs	r2, #0
 800faf4:	6839      	ldr	r1, [r7, #0]
 800faf6:	6878      	ldr	r0, [r7, #4]
 800faf8:	f7ff ffaa 	bl	800fa50 <FATFS_LinkDriverEx>
 800fafc:	4603      	mov	r3, r0
}
 800fafe:	4618      	mov	r0, r3
 800fb00:	3708      	adds	r7, #8
 800fb02:	46bd      	mov	sp, r7
 800fb04:	bd80      	pop	{r7, pc}
	...

0800fb08 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800fb08:	b480      	push	{r7}
 800fb0a:	b085      	sub	sp, #20
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	4603      	mov	r3, r0
 800fb10:	6039      	str	r1, [r7, #0]
 800fb12:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800fb14:	88fb      	ldrh	r3, [r7, #6]
 800fb16:	2b7f      	cmp	r3, #127	; 0x7f
 800fb18:	d802      	bhi.n	800fb20 <ff_convert+0x18>
		c = chr;
 800fb1a:	88fb      	ldrh	r3, [r7, #6]
 800fb1c:	81fb      	strh	r3, [r7, #14]
 800fb1e:	e025      	b.n	800fb6c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800fb20:	683b      	ldr	r3, [r7, #0]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d00b      	beq.n	800fb3e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800fb26:	88fb      	ldrh	r3, [r7, #6]
 800fb28:	2bff      	cmp	r3, #255	; 0xff
 800fb2a:	d805      	bhi.n	800fb38 <ff_convert+0x30>
 800fb2c:	88fb      	ldrh	r3, [r7, #6]
 800fb2e:	3b80      	subs	r3, #128	; 0x80
 800fb30:	4a12      	ldr	r2, [pc, #72]	; (800fb7c <ff_convert+0x74>)
 800fb32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fb36:	e000      	b.n	800fb3a <ff_convert+0x32>
 800fb38:	2300      	movs	r3, #0
 800fb3a:	81fb      	strh	r3, [r7, #14]
 800fb3c:	e016      	b.n	800fb6c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800fb3e:	2300      	movs	r3, #0
 800fb40:	81fb      	strh	r3, [r7, #14]
 800fb42:	e009      	b.n	800fb58 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800fb44:	89fb      	ldrh	r3, [r7, #14]
 800fb46:	4a0d      	ldr	r2, [pc, #52]	; (800fb7c <ff_convert+0x74>)
 800fb48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fb4c:	88fa      	ldrh	r2, [r7, #6]
 800fb4e:	429a      	cmp	r2, r3
 800fb50:	d006      	beq.n	800fb60 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800fb52:	89fb      	ldrh	r3, [r7, #14]
 800fb54:	3301      	adds	r3, #1
 800fb56:	81fb      	strh	r3, [r7, #14]
 800fb58:	89fb      	ldrh	r3, [r7, #14]
 800fb5a:	2b7f      	cmp	r3, #127	; 0x7f
 800fb5c:	d9f2      	bls.n	800fb44 <ff_convert+0x3c>
 800fb5e:	e000      	b.n	800fb62 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800fb60:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800fb62:	89fb      	ldrh	r3, [r7, #14]
 800fb64:	3380      	adds	r3, #128	; 0x80
 800fb66:	b29b      	uxth	r3, r3
 800fb68:	b2db      	uxtb	r3, r3
 800fb6a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800fb6c:	89fb      	ldrh	r3, [r7, #14]
}
 800fb6e:	4618      	mov	r0, r3
 800fb70:	3714      	adds	r7, #20
 800fb72:	46bd      	mov	sp, r7
 800fb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb78:	4770      	bx	lr
 800fb7a:	bf00      	nop
 800fb7c:	08011f7c 	.word	0x08011f7c

0800fb80 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800fb80:	b480      	push	{r7}
 800fb82:	b087      	sub	sp, #28
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	4603      	mov	r3, r0
 800fb88:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800fb8a:	88fb      	ldrh	r3, [r7, #6]
 800fb8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb90:	d201      	bcs.n	800fb96 <ff_wtoupper+0x16>
 800fb92:	4b3e      	ldr	r3, [pc, #248]	; (800fc8c <ff_wtoupper+0x10c>)
 800fb94:	e000      	b.n	800fb98 <ff_wtoupper+0x18>
 800fb96:	4b3e      	ldr	r3, [pc, #248]	; (800fc90 <ff_wtoupper+0x110>)
 800fb98:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800fb9a:	697b      	ldr	r3, [r7, #20]
 800fb9c:	1c9a      	adds	r2, r3, #2
 800fb9e:	617a      	str	r2, [r7, #20]
 800fba0:	881b      	ldrh	r3, [r3, #0]
 800fba2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800fba4:	8a7b      	ldrh	r3, [r7, #18]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d068      	beq.n	800fc7c <ff_wtoupper+0xfc>
 800fbaa:	88fa      	ldrh	r2, [r7, #6]
 800fbac:	8a7b      	ldrh	r3, [r7, #18]
 800fbae:	429a      	cmp	r2, r3
 800fbb0:	d364      	bcc.n	800fc7c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800fbb2:	697b      	ldr	r3, [r7, #20]
 800fbb4:	1c9a      	adds	r2, r3, #2
 800fbb6:	617a      	str	r2, [r7, #20]
 800fbb8:	881b      	ldrh	r3, [r3, #0]
 800fbba:	823b      	strh	r3, [r7, #16]
 800fbbc:	8a3b      	ldrh	r3, [r7, #16]
 800fbbe:	0a1b      	lsrs	r3, r3, #8
 800fbc0:	81fb      	strh	r3, [r7, #14]
 800fbc2:	8a3b      	ldrh	r3, [r7, #16]
 800fbc4:	b2db      	uxtb	r3, r3
 800fbc6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800fbc8:	88fa      	ldrh	r2, [r7, #6]
 800fbca:	8a79      	ldrh	r1, [r7, #18]
 800fbcc:	8a3b      	ldrh	r3, [r7, #16]
 800fbce:	440b      	add	r3, r1
 800fbd0:	429a      	cmp	r2, r3
 800fbd2:	da49      	bge.n	800fc68 <ff_wtoupper+0xe8>
			switch (cmd) {
 800fbd4:	89fb      	ldrh	r3, [r7, #14]
 800fbd6:	2b08      	cmp	r3, #8
 800fbd8:	d84f      	bhi.n	800fc7a <ff_wtoupper+0xfa>
 800fbda:	a201      	add	r2, pc, #4	; (adr r2, 800fbe0 <ff_wtoupper+0x60>)
 800fbdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbe0:	0800fc05 	.word	0x0800fc05
 800fbe4:	0800fc17 	.word	0x0800fc17
 800fbe8:	0800fc2d 	.word	0x0800fc2d
 800fbec:	0800fc35 	.word	0x0800fc35
 800fbf0:	0800fc3d 	.word	0x0800fc3d
 800fbf4:	0800fc45 	.word	0x0800fc45
 800fbf8:	0800fc4d 	.word	0x0800fc4d
 800fbfc:	0800fc55 	.word	0x0800fc55
 800fc00:	0800fc5d 	.word	0x0800fc5d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800fc04:	88fa      	ldrh	r2, [r7, #6]
 800fc06:	8a7b      	ldrh	r3, [r7, #18]
 800fc08:	1ad3      	subs	r3, r2, r3
 800fc0a:	005b      	lsls	r3, r3, #1
 800fc0c:	697a      	ldr	r2, [r7, #20]
 800fc0e:	4413      	add	r3, r2
 800fc10:	881b      	ldrh	r3, [r3, #0]
 800fc12:	80fb      	strh	r3, [r7, #6]
 800fc14:	e027      	b.n	800fc66 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800fc16:	88fa      	ldrh	r2, [r7, #6]
 800fc18:	8a7b      	ldrh	r3, [r7, #18]
 800fc1a:	1ad3      	subs	r3, r2, r3
 800fc1c:	b29b      	uxth	r3, r3
 800fc1e:	f003 0301 	and.w	r3, r3, #1
 800fc22:	b29b      	uxth	r3, r3
 800fc24:	88fa      	ldrh	r2, [r7, #6]
 800fc26:	1ad3      	subs	r3, r2, r3
 800fc28:	80fb      	strh	r3, [r7, #6]
 800fc2a:	e01c      	b.n	800fc66 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800fc2c:	88fb      	ldrh	r3, [r7, #6]
 800fc2e:	3b10      	subs	r3, #16
 800fc30:	80fb      	strh	r3, [r7, #6]
 800fc32:	e018      	b.n	800fc66 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800fc34:	88fb      	ldrh	r3, [r7, #6]
 800fc36:	3b20      	subs	r3, #32
 800fc38:	80fb      	strh	r3, [r7, #6]
 800fc3a:	e014      	b.n	800fc66 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800fc3c:	88fb      	ldrh	r3, [r7, #6]
 800fc3e:	3b30      	subs	r3, #48	; 0x30
 800fc40:	80fb      	strh	r3, [r7, #6]
 800fc42:	e010      	b.n	800fc66 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800fc44:	88fb      	ldrh	r3, [r7, #6]
 800fc46:	3b1a      	subs	r3, #26
 800fc48:	80fb      	strh	r3, [r7, #6]
 800fc4a:	e00c      	b.n	800fc66 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800fc4c:	88fb      	ldrh	r3, [r7, #6]
 800fc4e:	3308      	adds	r3, #8
 800fc50:	80fb      	strh	r3, [r7, #6]
 800fc52:	e008      	b.n	800fc66 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800fc54:	88fb      	ldrh	r3, [r7, #6]
 800fc56:	3b50      	subs	r3, #80	; 0x50
 800fc58:	80fb      	strh	r3, [r7, #6]
 800fc5a:	e004      	b.n	800fc66 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800fc5c:	88fb      	ldrh	r3, [r7, #6]
 800fc5e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800fc62:	80fb      	strh	r3, [r7, #6]
 800fc64:	bf00      	nop
			}
			break;
 800fc66:	e008      	b.n	800fc7a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800fc68:	89fb      	ldrh	r3, [r7, #14]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d195      	bne.n	800fb9a <ff_wtoupper+0x1a>
 800fc6e:	8a3b      	ldrh	r3, [r7, #16]
 800fc70:	005b      	lsls	r3, r3, #1
 800fc72:	697a      	ldr	r2, [r7, #20]
 800fc74:	4413      	add	r3, r2
 800fc76:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800fc78:	e78f      	b.n	800fb9a <ff_wtoupper+0x1a>
			break;
 800fc7a:	bf00      	nop
	}

	return chr;
 800fc7c:	88fb      	ldrh	r3, [r7, #6]
}
 800fc7e:	4618      	mov	r0, r3
 800fc80:	371c      	adds	r7, #28
 800fc82:	46bd      	mov	sp, r7
 800fc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc88:	4770      	bx	lr
 800fc8a:	bf00      	nop
 800fc8c:	0801207c 	.word	0x0801207c
 800fc90:	08012270 	.word	0x08012270

0800fc94 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fc98:	2200      	movs	r2, #0
 800fc9a:	4912      	ldr	r1, [pc, #72]	; (800fce4 <MX_USB_DEVICE_Init+0x50>)
 800fc9c:	4812      	ldr	r0, [pc, #72]	; (800fce8 <MX_USB_DEVICE_Init+0x54>)
 800fc9e:	f7fb fc5f 	bl	800b560 <USBD_Init>
 800fca2:	4603      	mov	r3, r0
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d001      	beq.n	800fcac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fca8:	f7f1 fa98 	bl	80011dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fcac:	490f      	ldr	r1, [pc, #60]	; (800fcec <MX_USB_DEVICE_Init+0x58>)
 800fcae:	480e      	ldr	r0, [pc, #56]	; (800fce8 <MX_USB_DEVICE_Init+0x54>)
 800fcb0:	f7fb fc86 	bl	800b5c0 <USBD_RegisterClass>
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d001      	beq.n	800fcbe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fcba:	f7f1 fa8f 	bl	80011dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fcbe:	490c      	ldr	r1, [pc, #48]	; (800fcf0 <MX_USB_DEVICE_Init+0x5c>)
 800fcc0:	4809      	ldr	r0, [pc, #36]	; (800fce8 <MX_USB_DEVICE_Init+0x54>)
 800fcc2:	f7fb fb7d 	bl	800b3c0 <USBD_CDC_RegisterInterface>
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d001      	beq.n	800fcd0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fccc:	f7f1 fa86 	bl	80011dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fcd0:	4805      	ldr	r0, [pc, #20]	; (800fce8 <MX_USB_DEVICE_Init+0x54>)
 800fcd2:	f7fb fcab 	bl	800b62c <USBD_Start>
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d001      	beq.n	800fce0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fcdc:	f7f1 fa7e 	bl	80011dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fce0:	bf00      	nop
 800fce2:	bd80      	pop	{r7, pc}
 800fce4:	200000b0 	.word	0x200000b0
 800fce8:	20002bc0 	.word	0x20002bc0
 800fcec:	2000001c 	.word	0x2000001c
 800fcf0:	2000009c 	.word	0x2000009c

0800fcf4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	4905      	ldr	r1, [pc, #20]	; (800fd10 <CDC_Init_FS+0x1c>)
 800fcfc:	4805      	ldr	r0, [pc, #20]	; (800fd14 <CDC_Init_FS+0x20>)
 800fcfe:	f7fb fb79 	bl	800b3f4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fd02:	4905      	ldr	r1, [pc, #20]	; (800fd18 <CDC_Init_FS+0x24>)
 800fd04:	4803      	ldr	r0, [pc, #12]	; (800fd14 <CDC_Init_FS+0x20>)
 800fd06:	f7fb fb97 	bl	800b438 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fd0a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	bd80      	pop	{r7, pc}
 800fd10:	2000369c 	.word	0x2000369c
 800fd14:	20002bc0 	.word	0x20002bc0
 800fd18:	20002e9c 	.word	0x20002e9c

0800fd1c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fd1c:	b480      	push	{r7}
 800fd1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fd20:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fd22:	4618      	mov	r0, r3
 800fd24:	46bd      	mov	sp, r7
 800fd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2a:	4770      	bx	lr

0800fd2c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fd2c:	b480      	push	{r7}
 800fd2e:	b083      	sub	sp, #12
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	4603      	mov	r3, r0
 800fd34:	6039      	str	r1, [r7, #0]
 800fd36:	71fb      	strb	r3, [r7, #7]
 800fd38:	4613      	mov	r3, r2
 800fd3a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fd3c:	79fb      	ldrb	r3, [r7, #7]
 800fd3e:	2b23      	cmp	r3, #35	; 0x23
 800fd40:	d84a      	bhi.n	800fdd8 <CDC_Control_FS+0xac>
 800fd42:	a201      	add	r2, pc, #4	; (adr r2, 800fd48 <CDC_Control_FS+0x1c>)
 800fd44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd48:	0800fdd9 	.word	0x0800fdd9
 800fd4c:	0800fdd9 	.word	0x0800fdd9
 800fd50:	0800fdd9 	.word	0x0800fdd9
 800fd54:	0800fdd9 	.word	0x0800fdd9
 800fd58:	0800fdd9 	.word	0x0800fdd9
 800fd5c:	0800fdd9 	.word	0x0800fdd9
 800fd60:	0800fdd9 	.word	0x0800fdd9
 800fd64:	0800fdd9 	.word	0x0800fdd9
 800fd68:	0800fdd9 	.word	0x0800fdd9
 800fd6c:	0800fdd9 	.word	0x0800fdd9
 800fd70:	0800fdd9 	.word	0x0800fdd9
 800fd74:	0800fdd9 	.word	0x0800fdd9
 800fd78:	0800fdd9 	.word	0x0800fdd9
 800fd7c:	0800fdd9 	.word	0x0800fdd9
 800fd80:	0800fdd9 	.word	0x0800fdd9
 800fd84:	0800fdd9 	.word	0x0800fdd9
 800fd88:	0800fdd9 	.word	0x0800fdd9
 800fd8c:	0800fdd9 	.word	0x0800fdd9
 800fd90:	0800fdd9 	.word	0x0800fdd9
 800fd94:	0800fdd9 	.word	0x0800fdd9
 800fd98:	0800fdd9 	.word	0x0800fdd9
 800fd9c:	0800fdd9 	.word	0x0800fdd9
 800fda0:	0800fdd9 	.word	0x0800fdd9
 800fda4:	0800fdd9 	.word	0x0800fdd9
 800fda8:	0800fdd9 	.word	0x0800fdd9
 800fdac:	0800fdd9 	.word	0x0800fdd9
 800fdb0:	0800fdd9 	.word	0x0800fdd9
 800fdb4:	0800fdd9 	.word	0x0800fdd9
 800fdb8:	0800fdd9 	.word	0x0800fdd9
 800fdbc:	0800fdd9 	.word	0x0800fdd9
 800fdc0:	0800fdd9 	.word	0x0800fdd9
 800fdc4:	0800fdd9 	.word	0x0800fdd9
 800fdc8:	0800fdd9 	.word	0x0800fdd9
 800fdcc:	0800fdd9 	.word	0x0800fdd9
 800fdd0:	0800fdd9 	.word	0x0800fdd9
 800fdd4:	0800fdd9 	.word	0x0800fdd9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fdd8:	bf00      	nop
  }

  return (USBD_OK);
 800fdda:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fddc:	4618      	mov	r0, r3
 800fdde:	370c      	adds	r7, #12
 800fde0:	46bd      	mov	sp, r7
 800fde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde6:	4770      	bx	lr

0800fde8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b082      	sub	sp, #8
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
 800fdf0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fdf2:	6879      	ldr	r1, [r7, #4]
 800fdf4:	4805      	ldr	r0, [pc, #20]	; (800fe0c <CDC_Receive_FS+0x24>)
 800fdf6:	f7fb fb1f 	bl	800b438 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fdfa:	4804      	ldr	r0, [pc, #16]	; (800fe0c <CDC_Receive_FS+0x24>)
 800fdfc:	f7fb fb7a 	bl	800b4f4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fe00:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fe02:	4618      	mov	r0, r3
 800fe04:	3708      	adds	r7, #8
 800fe06:	46bd      	mov	sp, r7
 800fe08:	bd80      	pop	{r7, pc}
 800fe0a:	bf00      	nop
 800fe0c:	20002bc0 	.word	0x20002bc0

0800fe10 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b084      	sub	sp, #16
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
 800fe18:	460b      	mov	r3, r1
 800fe1a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800fe20:	4b0d      	ldr	r3, [pc, #52]	; (800fe58 <CDC_Transmit_FS+0x48>)
 800fe22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fe26:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800fe28:	68bb      	ldr	r3, [r7, #8]
 800fe2a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d001      	beq.n	800fe36 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800fe32:	2301      	movs	r3, #1
 800fe34:	e00b      	b.n	800fe4e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800fe36:	887b      	ldrh	r3, [r7, #2]
 800fe38:	461a      	mov	r2, r3
 800fe3a:	6879      	ldr	r1, [r7, #4]
 800fe3c:	4806      	ldr	r0, [pc, #24]	; (800fe58 <CDC_Transmit_FS+0x48>)
 800fe3e:	f7fb fad9 	bl	800b3f4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800fe42:	4805      	ldr	r0, [pc, #20]	; (800fe58 <CDC_Transmit_FS+0x48>)
 800fe44:	f7fb fb16 	bl	800b474 <USBD_CDC_TransmitPacket>
 800fe48:	4603      	mov	r3, r0
 800fe4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800fe4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe4e:	4618      	mov	r0, r3
 800fe50:	3710      	adds	r7, #16
 800fe52:	46bd      	mov	sp, r7
 800fe54:	bd80      	pop	{r7, pc}
 800fe56:	bf00      	nop
 800fe58:	20002bc0 	.word	0x20002bc0

0800fe5c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fe5c:	b480      	push	{r7}
 800fe5e:	b087      	sub	sp, #28
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	60f8      	str	r0, [r7, #12]
 800fe64:	60b9      	str	r1, [r7, #8]
 800fe66:	4613      	mov	r3, r2
 800fe68:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fe6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fe72:	4618      	mov	r0, r3
 800fe74:	371c      	adds	r7, #28
 800fe76:	46bd      	mov	sp, r7
 800fe78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7c:	4770      	bx	lr
	...

0800fe80 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe80:	b480      	push	{r7}
 800fe82:	b083      	sub	sp, #12
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	4603      	mov	r3, r0
 800fe88:	6039      	str	r1, [r7, #0]
 800fe8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	2212      	movs	r2, #18
 800fe90:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fe92:	4b03      	ldr	r3, [pc, #12]	; (800fea0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800fe94:	4618      	mov	r0, r3
 800fe96:	370c      	adds	r7, #12
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9e:	4770      	bx	lr
 800fea0:	200000d0 	.word	0x200000d0

0800fea4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fea4:	b480      	push	{r7}
 800fea6:	b083      	sub	sp, #12
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	4603      	mov	r3, r0
 800feac:	6039      	str	r1, [r7, #0]
 800feae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800feb0:	683b      	ldr	r3, [r7, #0]
 800feb2:	2204      	movs	r2, #4
 800feb4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800feb6:	4b03      	ldr	r3, [pc, #12]	; (800fec4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800feb8:	4618      	mov	r0, r3
 800feba:	370c      	adds	r7, #12
 800febc:	46bd      	mov	sp, r7
 800febe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec2:	4770      	bx	lr
 800fec4:	200000f0 	.word	0x200000f0

0800fec8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b082      	sub	sp, #8
 800fecc:	af00      	add	r7, sp, #0
 800fece:	4603      	mov	r3, r0
 800fed0:	6039      	str	r1, [r7, #0]
 800fed2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fed4:	79fb      	ldrb	r3, [r7, #7]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d105      	bne.n	800fee6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800feda:	683a      	ldr	r2, [r7, #0]
 800fedc:	4907      	ldr	r1, [pc, #28]	; (800fefc <USBD_FS_ProductStrDescriptor+0x34>)
 800fede:	4808      	ldr	r0, [pc, #32]	; (800ff00 <USBD_FS_ProductStrDescriptor+0x38>)
 800fee0:	f7fc fd7a 	bl	800c9d8 <USBD_GetString>
 800fee4:	e004      	b.n	800fef0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fee6:	683a      	ldr	r2, [r7, #0]
 800fee8:	4904      	ldr	r1, [pc, #16]	; (800fefc <USBD_FS_ProductStrDescriptor+0x34>)
 800feea:	4805      	ldr	r0, [pc, #20]	; (800ff00 <USBD_FS_ProductStrDescriptor+0x38>)
 800feec:	f7fc fd74 	bl	800c9d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fef0:	4b02      	ldr	r3, [pc, #8]	; (800fefc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fef2:	4618      	mov	r0, r3
 800fef4:	3708      	adds	r7, #8
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bd80      	pop	{r7, pc}
 800fefa:	bf00      	nop
 800fefc:	20003e9c 	.word	0x20003e9c
 800ff00:	08011e70 	.word	0x08011e70

0800ff04 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b082      	sub	sp, #8
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	6039      	str	r1, [r7, #0]
 800ff0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ff10:	683a      	ldr	r2, [r7, #0]
 800ff12:	4904      	ldr	r1, [pc, #16]	; (800ff24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ff14:	4804      	ldr	r0, [pc, #16]	; (800ff28 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ff16:	f7fc fd5f 	bl	800c9d8 <USBD_GetString>
  return USBD_StrDesc;
 800ff1a:	4b02      	ldr	r3, [pc, #8]	; (800ff24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	3708      	adds	r7, #8
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd80      	pop	{r7, pc}
 800ff24:	20003e9c 	.word	0x20003e9c
 800ff28:	08011e88 	.word	0x08011e88

0800ff2c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b082      	sub	sp, #8
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	4603      	mov	r3, r0
 800ff34:	6039      	str	r1, [r7, #0]
 800ff36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ff38:	683b      	ldr	r3, [r7, #0]
 800ff3a:	221a      	movs	r2, #26
 800ff3c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ff3e:	f000 f855 	bl	800ffec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ff42:	4b02      	ldr	r3, [pc, #8]	; (800ff4c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ff44:	4618      	mov	r0, r3
 800ff46:	3708      	adds	r7, #8
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	bd80      	pop	{r7, pc}
 800ff4c:	200000f4 	.word	0x200000f4

0800ff50 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b082      	sub	sp, #8
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	4603      	mov	r3, r0
 800ff58:	6039      	str	r1, [r7, #0]
 800ff5a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ff5c:	79fb      	ldrb	r3, [r7, #7]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d105      	bne.n	800ff6e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ff62:	683a      	ldr	r2, [r7, #0]
 800ff64:	4907      	ldr	r1, [pc, #28]	; (800ff84 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ff66:	4808      	ldr	r0, [pc, #32]	; (800ff88 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ff68:	f7fc fd36 	bl	800c9d8 <USBD_GetString>
 800ff6c:	e004      	b.n	800ff78 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ff6e:	683a      	ldr	r2, [r7, #0]
 800ff70:	4904      	ldr	r1, [pc, #16]	; (800ff84 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ff72:	4805      	ldr	r0, [pc, #20]	; (800ff88 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ff74:	f7fc fd30 	bl	800c9d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ff78:	4b02      	ldr	r3, [pc, #8]	; (800ff84 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	3708      	adds	r7, #8
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	bd80      	pop	{r7, pc}
 800ff82:	bf00      	nop
 800ff84:	20003e9c 	.word	0x20003e9c
 800ff88:	08011e9c 	.word	0x08011e9c

0800ff8c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b082      	sub	sp, #8
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	4603      	mov	r3, r0
 800ff94:	6039      	str	r1, [r7, #0]
 800ff96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ff98:	79fb      	ldrb	r3, [r7, #7]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d105      	bne.n	800ffaa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ff9e:	683a      	ldr	r2, [r7, #0]
 800ffa0:	4907      	ldr	r1, [pc, #28]	; (800ffc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ffa2:	4808      	ldr	r0, [pc, #32]	; (800ffc4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ffa4:	f7fc fd18 	bl	800c9d8 <USBD_GetString>
 800ffa8:	e004      	b.n	800ffb4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ffaa:	683a      	ldr	r2, [r7, #0]
 800ffac:	4904      	ldr	r1, [pc, #16]	; (800ffc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ffae:	4805      	ldr	r0, [pc, #20]	; (800ffc4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ffb0:	f7fc fd12 	bl	800c9d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ffb4:	4b02      	ldr	r3, [pc, #8]	; (800ffc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	3708      	adds	r7, #8
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	bd80      	pop	{r7, pc}
 800ffbe:	bf00      	nop
 800ffc0:	20003e9c 	.word	0x20003e9c
 800ffc4:	08011ea8 	.word	0x08011ea8

0800ffc8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffc8:	b480      	push	{r7}
 800ffca:	b083      	sub	sp, #12
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	4603      	mov	r3, r0
 800ffd0:	6039      	str	r1, [r7, #0]
 800ffd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800ffd4:	683b      	ldr	r3, [r7, #0]
 800ffd6:	220c      	movs	r2, #12
 800ffd8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800ffda:	4b03      	ldr	r3, [pc, #12]	; (800ffe8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800ffdc:	4618      	mov	r0, r3
 800ffde:	370c      	adds	r7, #12
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe6:	4770      	bx	lr
 800ffe8:	200000e4 	.word	0x200000e4

0800ffec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b084      	sub	sp, #16
 800fff0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fff2:	4b0f      	ldr	r3, [pc, #60]	; (8010030 <Get_SerialNum+0x44>)
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fff8:	4b0e      	ldr	r3, [pc, #56]	; (8010034 <Get_SerialNum+0x48>)
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fffe:	4b0e      	ldr	r3, [pc, #56]	; (8010038 <Get_SerialNum+0x4c>)
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010004:	68fa      	ldr	r2, [r7, #12]
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	4413      	add	r3, r2
 801000a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d009      	beq.n	8010026 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010012:	2208      	movs	r2, #8
 8010014:	4909      	ldr	r1, [pc, #36]	; (801003c <Get_SerialNum+0x50>)
 8010016:	68f8      	ldr	r0, [r7, #12]
 8010018:	f000 f814 	bl	8010044 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801001c:	2204      	movs	r2, #4
 801001e:	4908      	ldr	r1, [pc, #32]	; (8010040 <Get_SerialNum+0x54>)
 8010020:	68b8      	ldr	r0, [r7, #8]
 8010022:	f000 f80f 	bl	8010044 <IntToUnicode>
  }
}
 8010026:	bf00      	nop
 8010028:	3710      	adds	r7, #16
 801002a:	46bd      	mov	sp, r7
 801002c:	bd80      	pop	{r7, pc}
 801002e:	bf00      	nop
 8010030:	1ff0f420 	.word	0x1ff0f420
 8010034:	1ff0f424 	.word	0x1ff0f424
 8010038:	1ff0f428 	.word	0x1ff0f428
 801003c:	200000f6 	.word	0x200000f6
 8010040:	20000106 	.word	0x20000106

08010044 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010044:	b480      	push	{r7}
 8010046:	b087      	sub	sp, #28
 8010048:	af00      	add	r7, sp, #0
 801004a:	60f8      	str	r0, [r7, #12]
 801004c:	60b9      	str	r1, [r7, #8]
 801004e:	4613      	mov	r3, r2
 8010050:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010052:	2300      	movs	r3, #0
 8010054:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010056:	2300      	movs	r3, #0
 8010058:	75fb      	strb	r3, [r7, #23]
 801005a:	e027      	b.n	80100ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	0f1b      	lsrs	r3, r3, #28
 8010060:	2b09      	cmp	r3, #9
 8010062:	d80b      	bhi.n	801007c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	0f1b      	lsrs	r3, r3, #28
 8010068:	b2da      	uxtb	r2, r3
 801006a:	7dfb      	ldrb	r3, [r7, #23]
 801006c:	005b      	lsls	r3, r3, #1
 801006e:	4619      	mov	r1, r3
 8010070:	68bb      	ldr	r3, [r7, #8]
 8010072:	440b      	add	r3, r1
 8010074:	3230      	adds	r2, #48	; 0x30
 8010076:	b2d2      	uxtb	r2, r2
 8010078:	701a      	strb	r2, [r3, #0]
 801007a:	e00a      	b.n	8010092 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	0f1b      	lsrs	r3, r3, #28
 8010080:	b2da      	uxtb	r2, r3
 8010082:	7dfb      	ldrb	r3, [r7, #23]
 8010084:	005b      	lsls	r3, r3, #1
 8010086:	4619      	mov	r1, r3
 8010088:	68bb      	ldr	r3, [r7, #8]
 801008a:	440b      	add	r3, r1
 801008c:	3237      	adds	r2, #55	; 0x37
 801008e:	b2d2      	uxtb	r2, r2
 8010090:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	011b      	lsls	r3, r3, #4
 8010096:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010098:	7dfb      	ldrb	r3, [r7, #23]
 801009a:	005b      	lsls	r3, r3, #1
 801009c:	3301      	adds	r3, #1
 801009e:	68ba      	ldr	r2, [r7, #8]
 80100a0:	4413      	add	r3, r2
 80100a2:	2200      	movs	r2, #0
 80100a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80100a6:	7dfb      	ldrb	r3, [r7, #23]
 80100a8:	3301      	adds	r3, #1
 80100aa:	75fb      	strb	r3, [r7, #23]
 80100ac:	7dfa      	ldrb	r2, [r7, #23]
 80100ae:	79fb      	ldrb	r3, [r7, #7]
 80100b0:	429a      	cmp	r2, r3
 80100b2:	d3d3      	bcc.n	801005c <IntToUnicode+0x18>
  }
}
 80100b4:	bf00      	nop
 80100b6:	bf00      	nop
 80100b8:	371c      	adds	r7, #28
 80100ba:	46bd      	mov	sp, r7
 80100bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c0:	4770      	bx	lr
	...

080100c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b0ae      	sub	sp, #184	; 0xb8
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80100cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80100d0:	2200      	movs	r2, #0
 80100d2:	601a      	str	r2, [r3, #0]
 80100d4:	605a      	str	r2, [r3, #4]
 80100d6:	609a      	str	r2, [r3, #8]
 80100d8:	60da      	str	r2, [r3, #12]
 80100da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80100dc:	f107 0314 	add.w	r3, r7, #20
 80100e0:	2290      	movs	r2, #144	; 0x90
 80100e2:	2100      	movs	r1, #0
 80100e4:	4618      	mov	r0, r3
 80100e6:	f000 fd8a 	bl	8010bfe <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80100f2:	d151      	bne.n	8010198 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80100f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80100f8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80100fa:	2300      	movs	r3, #0
 80100fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010100:	f107 0314 	add.w	r3, r7, #20
 8010104:	4618      	mov	r0, r3
 8010106:	f7f5 ff4d 	bl	8005fa4 <HAL_RCCEx_PeriphCLKConfig>
 801010a:	4603      	mov	r3, r0
 801010c:	2b00      	cmp	r3, #0
 801010e:	d001      	beq.n	8010114 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8010110:	f7f1 f864 	bl	80011dc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010114:	4b22      	ldr	r3, [pc, #136]	; (80101a0 <HAL_PCD_MspInit+0xdc>)
 8010116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010118:	4a21      	ldr	r2, [pc, #132]	; (80101a0 <HAL_PCD_MspInit+0xdc>)
 801011a:	f043 0301 	orr.w	r3, r3, #1
 801011e:	6313      	str	r3, [r2, #48]	; 0x30
 8010120:	4b1f      	ldr	r3, [pc, #124]	; (80101a0 <HAL_PCD_MspInit+0xdc>)
 8010122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010124:	f003 0301 	and.w	r3, r3, #1
 8010128:	613b      	str	r3, [r7, #16]
 801012a:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801012c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010130:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010134:	2302      	movs	r3, #2
 8010136:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801013a:	2300      	movs	r3, #0
 801013c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010140:	2303      	movs	r3, #3
 8010142:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010146:	230a      	movs	r3, #10
 8010148:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801014c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010150:	4619      	mov	r1, r3
 8010152:	4814      	ldr	r0, [pc, #80]	; (80101a4 <HAL_PCD_MspInit+0xe0>)
 8010154:	f7f3 f81a 	bl	800318c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010158:	4b11      	ldr	r3, [pc, #68]	; (80101a0 <HAL_PCD_MspInit+0xdc>)
 801015a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801015c:	4a10      	ldr	r2, [pc, #64]	; (80101a0 <HAL_PCD_MspInit+0xdc>)
 801015e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010162:	6353      	str	r3, [r2, #52]	; 0x34
 8010164:	4b0e      	ldr	r3, [pc, #56]	; (80101a0 <HAL_PCD_MspInit+0xdc>)
 8010166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801016c:	60fb      	str	r3, [r7, #12]
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	4b0b      	ldr	r3, [pc, #44]	; (80101a0 <HAL_PCD_MspInit+0xdc>)
 8010172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010174:	4a0a      	ldr	r2, [pc, #40]	; (80101a0 <HAL_PCD_MspInit+0xdc>)
 8010176:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801017a:	6453      	str	r3, [r2, #68]	; 0x44
 801017c:	4b08      	ldr	r3, [pc, #32]	; (80101a0 <HAL_PCD_MspInit+0xdc>)
 801017e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010184:	60bb      	str	r3, [r7, #8]
 8010186:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010188:	2200      	movs	r2, #0
 801018a:	2100      	movs	r1, #0
 801018c:	2043      	movs	r0, #67	; 0x43
 801018e:	f7f2 fc20 	bl	80029d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010192:	2043      	movs	r0, #67	; 0x43
 8010194:	f7f2 fc39 	bl	8002a0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010198:	bf00      	nop
 801019a:	37b8      	adds	r7, #184	; 0xb8
 801019c:	46bd      	mov	sp, r7
 801019e:	bd80      	pop	{r7, pc}
 80101a0:	40023800 	.word	0x40023800
 80101a4:	40020000 	.word	0x40020000

080101a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b082      	sub	sp, #8
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80101bc:	4619      	mov	r1, r3
 80101be:	4610      	mov	r0, r2
 80101c0:	f7fb fa81 	bl	800b6c6 <USBD_LL_SetupStage>
}
 80101c4:	bf00      	nop
 80101c6:	3708      	adds	r7, #8
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd80      	pop	{r7, pc}

080101cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b082      	sub	sp, #8
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
 80101d4:	460b      	mov	r3, r1
 80101d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 80101de:	78fa      	ldrb	r2, [r7, #3]
 80101e0:	6879      	ldr	r1, [r7, #4]
 80101e2:	4613      	mov	r3, r2
 80101e4:	00db      	lsls	r3, r3, #3
 80101e6:	4413      	add	r3, r2
 80101e8:	009b      	lsls	r3, r3, #2
 80101ea:	440b      	add	r3, r1
 80101ec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80101f0:	681a      	ldr	r2, [r3, #0]
 80101f2:	78fb      	ldrb	r3, [r7, #3]
 80101f4:	4619      	mov	r1, r3
 80101f6:	f7fb fabb 	bl	800b770 <USBD_LL_DataOutStage>
}
 80101fa:	bf00      	nop
 80101fc:	3708      	adds	r7, #8
 80101fe:	46bd      	mov	sp, r7
 8010200:	bd80      	pop	{r7, pc}

08010202 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010202:	b580      	push	{r7, lr}
 8010204:	b082      	sub	sp, #8
 8010206:	af00      	add	r7, sp, #0
 8010208:	6078      	str	r0, [r7, #4]
 801020a:	460b      	mov	r3, r1
 801020c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8010214:	78fa      	ldrb	r2, [r7, #3]
 8010216:	6879      	ldr	r1, [r7, #4]
 8010218:	4613      	mov	r3, r2
 801021a:	00db      	lsls	r3, r3, #3
 801021c:	4413      	add	r3, r2
 801021e:	009b      	lsls	r3, r3, #2
 8010220:	440b      	add	r3, r1
 8010222:	334c      	adds	r3, #76	; 0x4c
 8010224:	681a      	ldr	r2, [r3, #0]
 8010226:	78fb      	ldrb	r3, [r7, #3]
 8010228:	4619      	mov	r1, r3
 801022a:	f7fb fb54 	bl	800b8d6 <USBD_LL_DataInStage>
}
 801022e:	bf00      	nop
 8010230:	3708      	adds	r7, #8
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}

08010236 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010236:	b580      	push	{r7, lr}
 8010238:	b082      	sub	sp, #8
 801023a:	af00      	add	r7, sp, #0
 801023c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010244:	4618      	mov	r0, r3
 8010246:	f7fb fc88 	bl	800bb5a <USBD_LL_SOF>
}
 801024a:	bf00      	nop
 801024c:	3708      	adds	r7, #8
 801024e:	46bd      	mov	sp, r7
 8010250:	bd80      	pop	{r7, pc}

08010252 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010252:	b580      	push	{r7, lr}
 8010254:	b084      	sub	sp, #16
 8010256:	af00      	add	r7, sp, #0
 8010258:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801025a:	2301      	movs	r3, #1
 801025c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	68db      	ldr	r3, [r3, #12]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d102      	bne.n	801026c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8010266:	2300      	movs	r3, #0
 8010268:	73fb      	strb	r3, [r7, #15]
 801026a:	e008      	b.n	801027e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	68db      	ldr	r3, [r3, #12]
 8010270:	2b02      	cmp	r3, #2
 8010272:	d102      	bne.n	801027a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010274:	2301      	movs	r3, #1
 8010276:	73fb      	strb	r3, [r7, #15]
 8010278:	e001      	b.n	801027e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801027a:	f7f0 ffaf 	bl	80011dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010284:	7bfa      	ldrb	r2, [r7, #15]
 8010286:	4611      	mov	r1, r2
 8010288:	4618      	mov	r0, r3
 801028a:	f7fb fc28 	bl	800bade <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010294:	4618      	mov	r0, r3
 8010296:	f7fb fbd0 	bl	800ba3a <USBD_LL_Reset>
}
 801029a:	bf00      	nop
 801029c:	3710      	adds	r7, #16
 801029e:	46bd      	mov	sp, r7
 80102a0:	bd80      	pop	{r7, pc}
	...

080102a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b082      	sub	sp, #8
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80102b2:	4618      	mov	r0, r3
 80102b4:	f7fb fc23 	bl	800bafe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	687a      	ldr	r2, [r7, #4]
 80102c4:	6812      	ldr	r2, [r2, #0]
 80102c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80102ca:	f043 0301 	orr.w	r3, r3, #1
 80102ce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	6a1b      	ldr	r3, [r3, #32]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d005      	beq.n	80102e4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80102d8:	4b04      	ldr	r3, [pc, #16]	; (80102ec <HAL_PCD_SuspendCallback+0x48>)
 80102da:	691b      	ldr	r3, [r3, #16]
 80102dc:	4a03      	ldr	r2, [pc, #12]	; (80102ec <HAL_PCD_SuspendCallback+0x48>)
 80102de:	f043 0306 	orr.w	r3, r3, #6
 80102e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80102e4:	bf00      	nop
 80102e6:	3708      	adds	r7, #8
 80102e8:	46bd      	mov	sp, r7
 80102ea:	bd80      	pop	{r7, pc}
 80102ec:	e000ed00 	.word	0xe000ed00

080102f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b082      	sub	sp, #8
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80102fe:	4618      	mov	r0, r3
 8010300:	f7fb fc13 	bl	800bb2a <USBD_LL_Resume>
}
 8010304:	bf00      	nop
 8010306:	3708      	adds	r7, #8
 8010308:	46bd      	mov	sp, r7
 801030a:	bd80      	pop	{r7, pc}

0801030c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801030c:	b580      	push	{r7, lr}
 801030e:	b082      	sub	sp, #8
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
 8010314:	460b      	mov	r3, r1
 8010316:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801031e:	78fa      	ldrb	r2, [r7, #3]
 8010320:	4611      	mov	r1, r2
 8010322:	4618      	mov	r0, r3
 8010324:	f7fb fc6b 	bl	800bbfe <USBD_LL_IsoOUTIncomplete>
}
 8010328:	bf00      	nop
 801032a:	3708      	adds	r7, #8
 801032c:	46bd      	mov	sp, r7
 801032e:	bd80      	pop	{r7, pc}

08010330 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b082      	sub	sp, #8
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
 8010338:	460b      	mov	r3, r1
 801033a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010342:	78fa      	ldrb	r2, [r7, #3]
 8010344:	4611      	mov	r1, r2
 8010346:	4618      	mov	r0, r3
 8010348:	f7fb fc27 	bl	800bb9a <USBD_LL_IsoINIncomplete>
}
 801034c:	bf00      	nop
 801034e:	3708      	adds	r7, #8
 8010350:	46bd      	mov	sp, r7
 8010352:	bd80      	pop	{r7, pc}

08010354 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010354:	b580      	push	{r7, lr}
 8010356:	b082      	sub	sp, #8
 8010358:	af00      	add	r7, sp, #0
 801035a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010362:	4618      	mov	r0, r3
 8010364:	f7fb fc7d 	bl	800bc62 <USBD_LL_DevConnected>
}
 8010368:	bf00      	nop
 801036a:	3708      	adds	r7, #8
 801036c:	46bd      	mov	sp, r7
 801036e:	bd80      	pop	{r7, pc}

08010370 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010370:	b580      	push	{r7, lr}
 8010372:	b082      	sub	sp, #8
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801037e:	4618      	mov	r0, r3
 8010380:	f7fb fc7a 	bl	800bc78 <USBD_LL_DevDisconnected>
}
 8010384:	bf00      	nop
 8010386:	3708      	adds	r7, #8
 8010388:	46bd      	mov	sp, r7
 801038a:	bd80      	pop	{r7, pc}

0801038c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801038c:	b580      	push	{r7, lr}
 801038e:	b082      	sub	sp, #8
 8010390:	af00      	add	r7, sp, #0
 8010392:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	781b      	ldrb	r3, [r3, #0]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d13c      	bne.n	8010416 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801039c:	4a20      	ldr	r2, [pc, #128]	; (8010420 <USBD_LL_Init+0x94>)
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	4a1e      	ldr	r2, [pc, #120]	; (8010420 <USBD_LL_Init+0x94>)
 80103a8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80103ac:	4b1c      	ldr	r3, [pc, #112]	; (8010420 <USBD_LL_Init+0x94>)
 80103ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80103b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80103b4:	4b1a      	ldr	r3, [pc, #104]	; (8010420 <USBD_LL_Init+0x94>)
 80103b6:	2206      	movs	r2, #6
 80103b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80103ba:	4b19      	ldr	r3, [pc, #100]	; (8010420 <USBD_LL_Init+0x94>)
 80103bc:	2202      	movs	r2, #2
 80103be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80103c0:	4b17      	ldr	r3, [pc, #92]	; (8010420 <USBD_LL_Init+0x94>)
 80103c2:	2200      	movs	r2, #0
 80103c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80103c6:	4b16      	ldr	r3, [pc, #88]	; (8010420 <USBD_LL_Init+0x94>)
 80103c8:	2202      	movs	r2, #2
 80103ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80103cc:	4b14      	ldr	r3, [pc, #80]	; (8010420 <USBD_LL_Init+0x94>)
 80103ce:	2200      	movs	r2, #0
 80103d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80103d2:	4b13      	ldr	r3, [pc, #76]	; (8010420 <USBD_LL_Init+0x94>)
 80103d4:	2200      	movs	r2, #0
 80103d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80103d8:	4b11      	ldr	r3, [pc, #68]	; (8010420 <USBD_LL_Init+0x94>)
 80103da:	2200      	movs	r2, #0
 80103dc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80103de:	4b10      	ldr	r3, [pc, #64]	; (8010420 <USBD_LL_Init+0x94>)
 80103e0:	2200      	movs	r2, #0
 80103e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80103e4:	4b0e      	ldr	r3, [pc, #56]	; (8010420 <USBD_LL_Init+0x94>)
 80103e6:	2200      	movs	r2, #0
 80103e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80103ea:	480d      	ldr	r0, [pc, #52]	; (8010420 <USBD_LL_Init+0x94>)
 80103ec:	f7f3 fe4d 	bl	800408a <HAL_PCD_Init>
 80103f0:	4603      	mov	r3, r0
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d001      	beq.n	80103fa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80103f6:	f7f0 fef1 	bl	80011dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80103fa:	2180      	movs	r1, #128	; 0x80
 80103fc:	4808      	ldr	r0, [pc, #32]	; (8010420 <USBD_LL_Init+0x94>)
 80103fe:	f7f5 f8c8 	bl	8005592 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010402:	2240      	movs	r2, #64	; 0x40
 8010404:	2100      	movs	r1, #0
 8010406:	4806      	ldr	r0, [pc, #24]	; (8010420 <USBD_LL_Init+0x94>)
 8010408:	f7f5 f87c 	bl	8005504 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801040c:	2280      	movs	r2, #128	; 0x80
 801040e:	2101      	movs	r1, #1
 8010410:	4803      	ldr	r0, [pc, #12]	; (8010420 <USBD_LL_Init+0x94>)
 8010412:	f7f5 f877 	bl	8005504 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010416:	2300      	movs	r3, #0
}
 8010418:	4618      	mov	r0, r3
 801041a:	3708      	adds	r7, #8
 801041c:	46bd      	mov	sp, r7
 801041e:	bd80      	pop	{r7, pc}
 8010420:	2000409c 	.word	0x2000409c

08010424 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b084      	sub	sp, #16
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801042c:	2300      	movs	r3, #0
 801042e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010430:	2300      	movs	r3, #0
 8010432:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801043a:	4618      	mov	r0, r3
 801043c:	f7f3 ff49 	bl	80042d2 <HAL_PCD_Start>
 8010440:	4603      	mov	r3, r0
 8010442:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010444:	7bfb      	ldrb	r3, [r7, #15]
 8010446:	4618      	mov	r0, r3
 8010448:	f000 f97e 	bl	8010748 <USBD_Get_USB_Status>
 801044c:	4603      	mov	r3, r0
 801044e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010450:	7bbb      	ldrb	r3, [r7, #14]
}
 8010452:	4618      	mov	r0, r3
 8010454:	3710      	adds	r7, #16
 8010456:	46bd      	mov	sp, r7
 8010458:	bd80      	pop	{r7, pc}

0801045a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801045a:	b580      	push	{r7, lr}
 801045c:	b084      	sub	sp, #16
 801045e:	af00      	add	r7, sp, #0
 8010460:	6078      	str	r0, [r7, #4]
 8010462:	4608      	mov	r0, r1
 8010464:	4611      	mov	r1, r2
 8010466:	461a      	mov	r2, r3
 8010468:	4603      	mov	r3, r0
 801046a:	70fb      	strb	r3, [r7, #3]
 801046c:	460b      	mov	r3, r1
 801046e:	70bb      	strb	r3, [r7, #2]
 8010470:	4613      	mov	r3, r2
 8010472:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010474:	2300      	movs	r3, #0
 8010476:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010478:	2300      	movs	r3, #0
 801047a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010482:	78bb      	ldrb	r3, [r7, #2]
 8010484:	883a      	ldrh	r2, [r7, #0]
 8010486:	78f9      	ldrb	r1, [r7, #3]
 8010488:	f7f4 fc36 	bl	8004cf8 <HAL_PCD_EP_Open>
 801048c:	4603      	mov	r3, r0
 801048e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010490:	7bfb      	ldrb	r3, [r7, #15]
 8010492:	4618      	mov	r0, r3
 8010494:	f000 f958 	bl	8010748 <USBD_Get_USB_Status>
 8010498:	4603      	mov	r3, r0
 801049a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801049c:	7bbb      	ldrb	r3, [r7, #14]
}
 801049e:	4618      	mov	r0, r3
 80104a0:	3710      	adds	r7, #16
 80104a2:	46bd      	mov	sp, r7
 80104a4:	bd80      	pop	{r7, pc}

080104a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80104a6:	b580      	push	{r7, lr}
 80104a8:	b084      	sub	sp, #16
 80104aa:	af00      	add	r7, sp, #0
 80104ac:	6078      	str	r0, [r7, #4]
 80104ae:	460b      	mov	r3, r1
 80104b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104b2:	2300      	movs	r3, #0
 80104b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104b6:	2300      	movs	r3, #0
 80104b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80104c0:	78fa      	ldrb	r2, [r7, #3]
 80104c2:	4611      	mov	r1, r2
 80104c4:	4618      	mov	r0, r3
 80104c6:	f7f4 fc7f 	bl	8004dc8 <HAL_PCD_EP_Close>
 80104ca:	4603      	mov	r3, r0
 80104cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104ce:	7bfb      	ldrb	r3, [r7, #15]
 80104d0:	4618      	mov	r0, r3
 80104d2:	f000 f939 	bl	8010748 <USBD_Get_USB_Status>
 80104d6:	4603      	mov	r3, r0
 80104d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80104da:	7bbb      	ldrb	r3, [r7, #14]
}
 80104dc:	4618      	mov	r0, r3
 80104de:	3710      	adds	r7, #16
 80104e0:	46bd      	mov	sp, r7
 80104e2:	bd80      	pop	{r7, pc}

080104e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b084      	sub	sp, #16
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
 80104ec:	460b      	mov	r3, r1
 80104ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104f0:	2300      	movs	r3, #0
 80104f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104f4:	2300      	movs	r3, #0
 80104f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80104fe:	78fa      	ldrb	r2, [r7, #3]
 8010500:	4611      	mov	r1, r2
 8010502:	4618      	mov	r0, r3
 8010504:	f7f4 fd57 	bl	8004fb6 <HAL_PCD_EP_SetStall>
 8010508:	4603      	mov	r3, r0
 801050a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801050c:	7bfb      	ldrb	r3, [r7, #15]
 801050e:	4618      	mov	r0, r3
 8010510:	f000 f91a 	bl	8010748 <USBD_Get_USB_Status>
 8010514:	4603      	mov	r3, r0
 8010516:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010518:	7bbb      	ldrb	r3, [r7, #14]
}
 801051a:	4618      	mov	r0, r3
 801051c:	3710      	adds	r7, #16
 801051e:	46bd      	mov	sp, r7
 8010520:	bd80      	pop	{r7, pc}

08010522 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010522:	b580      	push	{r7, lr}
 8010524:	b084      	sub	sp, #16
 8010526:	af00      	add	r7, sp, #0
 8010528:	6078      	str	r0, [r7, #4]
 801052a:	460b      	mov	r3, r1
 801052c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801052e:	2300      	movs	r3, #0
 8010530:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010532:	2300      	movs	r3, #0
 8010534:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801053c:	78fa      	ldrb	r2, [r7, #3]
 801053e:	4611      	mov	r1, r2
 8010540:	4618      	mov	r0, r3
 8010542:	f7f4 fd9c 	bl	800507e <HAL_PCD_EP_ClrStall>
 8010546:	4603      	mov	r3, r0
 8010548:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801054a:	7bfb      	ldrb	r3, [r7, #15]
 801054c:	4618      	mov	r0, r3
 801054e:	f000 f8fb 	bl	8010748 <USBD_Get_USB_Status>
 8010552:	4603      	mov	r3, r0
 8010554:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010556:	7bbb      	ldrb	r3, [r7, #14]
}
 8010558:	4618      	mov	r0, r3
 801055a:	3710      	adds	r7, #16
 801055c:	46bd      	mov	sp, r7
 801055e:	bd80      	pop	{r7, pc}

08010560 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010560:	b480      	push	{r7}
 8010562:	b085      	sub	sp, #20
 8010564:	af00      	add	r7, sp, #0
 8010566:	6078      	str	r0, [r7, #4]
 8010568:	460b      	mov	r3, r1
 801056a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010572:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010574:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010578:	2b00      	cmp	r3, #0
 801057a:	da0b      	bge.n	8010594 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801057c:	78fb      	ldrb	r3, [r7, #3]
 801057e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010582:	68f9      	ldr	r1, [r7, #12]
 8010584:	4613      	mov	r3, r2
 8010586:	00db      	lsls	r3, r3, #3
 8010588:	4413      	add	r3, r2
 801058a:	009b      	lsls	r3, r3, #2
 801058c:	440b      	add	r3, r1
 801058e:	333e      	adds	r3, #62	; 0x3e
 8010590:	781b      	ldrb	r3, [r3, #0]
 8010592:	e00b      	b.n	80105ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010594:	78fb      	ldrb	r3, [r7, #3]
 8010596:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801059a:	68f9      	ldr	r1, [r7, #12]
 801059c:	4613      	mov	r3, r2
 801059e:	00db      	lsls	r3, r3, #3
 80105a0:	4413      	add	r3, r2
 80105a2:	009b      	lsls	r3, r3, #2
 80105a4:	440b      	add	r3, r1
 80105a6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80105aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80105ac:	4618      	mov	r0, r3
 80105ae:	3714      	adds	r7, #20
 80105b0:	46bd      	mov	sp, r7
 80105b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b6:	4770      	bx	lr

080105b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b084      	sub	sp, #16
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
 80105c0:	460b      	mov	r3, r1
 80105c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105c4:	2300      	movs	r3, #0
 80105c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105c8:	2300      	movs	r3, #0
 80105ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80105d2:	78fa      	ldrb	r2, [r7, #3]
 80105d4:	4611      	mov	r1, r2
 80105d6:	4618      	mov	r0, r3
 80105d8:	f7f4 fb69 	bl	8004cae <HAL_PCD_SetAddress>
 80105dc:	4603      	mov	r3, r0
 80105de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80105e0:	7bfb      	ldrb	r3, [r7, #15]
 80105e2:	4618      	mov	r0, r3
 80105e4:	f000 f8b0 	bl	8010748 <USBD_Get_USB_Status>
 80105e8:	4603      	mov	r3, r0
 80105ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80105ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80105ee:	4618      	mov	r0, r3
 80105f0:	3710      	adds	r7, #16
 80105f2:	46bd      	mov	sp, r7
 80105f4:	bd80      	pop	{r7, pc}

080105f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80105f6:	b580      	push	{r7, lr}
 80105f8:	b086      	sub	sp, #24
 80105fa:	af00      	add	r7, sp, #0
 80105fc:	60f8      	str	r0, [r7, #12]
 80105fe:	607a      	str	r2, [r7, #4]
 8010600:	603b      	str	r3, [r7, #0]
 8010602:	460b      	mov	r3, r1
 8010604:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010606:	2300      	movs	r3, #0
 8010608:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801060a:	2300      	movs	r3, #0
 801060c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010614:	7af9      	ldrb	r1, [r7, #11]
 8010616:	683b      	ldr	r3, [r7, #0]
 8010618:	687a      	ldr	r2, [r7, #4]
 801061a:	f7f4 fc82 	bl	8004f22 <HAL_PCD_EP_Transmit>
 801061e:	4603      	mov	r3, r0
 8010620:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010622:	7dfb      	ldrb	r3, [r7, #23]
 8010624:	4618      	mov	r0, r3
 8010626:	f000 f88f 	bl	8010748 <USBD_Get_USB_Status>
 801062a:	4603      	mov	r3, r0
 801062c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801062e:	7dbb      	ldrb	r3, [r7, #22]
}
 8010630:	4618      	mov	r0, r3
 8010632:	3718      	adds	r7, #24
 8010634:	46bd      	mov	sp, r7
 8010636:	bd80      	pop	{r7, pc}

08010638 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b086      	sub	sp, #24
 801063c:	af00      	add	r7, sp, #0
 801063e:	60f8      	str	r0, [r7, #12]
 8010640:	607a      	str	r2, [r7, #4]
 8010642:	603b      	str	r3, [r7, #0]
 8010644:	460b      	mov	r3, r1
 8010646:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010648:	2300      	movs	r3, #0
 801064a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801064c:	2300      	movs	r3, #0
 801064e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010656:	7af9      	ldrb	r1, [r7, #11]
 8010658:	683b      	ldr	r3, [r7, #0]
 801065a:	687a      	ldr	r2, [r7, #4]
 801065c:	f7f4 fbfe 	bl	8004e5c <HAL_PCD_EP_Receive>
 8010660:	4603      	mov	r3, r0
 8010662:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010664:	7dfb      	ldrb	r3, [r7, #23]
 8010666:	4618      	mov	r0, r3
 8010668:	f000 f86e 	bl	8010748 <USBD_Get_USB_Status>
 801066c:	4603      	mov	r3, r0
 801066e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010670:	7dbb      	ldrb	r3, [r7, #22]
}
 8010672:	4618      	mov	r0, r3
 8010674:	3718      	adds	r7, #24
 8010676:	46bd      	mov	sp, r7
 8010678:	bd80      	pop	{r7, pc}

0801067a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801067a:	b580      	push	{r7, lr}
 801067c:	b082      	sub	sp, #8
 801067e:	af00      	add	r7, sp, #0
 8010680:	6078      	str	r0, [r7, #4]
 8010682:	460b      	mov	r3, r1
 8010684:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801068c:	78fa      	ldrb	r2, [r7, #3]
 801068e:	4611      	mov	r1, r2
 8010690:	4618      	mov	r0, r3
 8010692:	f7f4 fc2e 	bl	8004ef2 <HAL_PCD_EP_GetRxCount>
 8010696:	4603      	mov	r3, r0
}
 8010698:	4618      	mov	r0, r3
 801069a:	3708      	adds	r7, #8
 801069c:	46bd      	mov	sp, r7
 801069e:	bd80      	pop	{r7, pc}

080106a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b082      	sub	sp, #8
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	6078      	str	r0, [r7, #4]
 80106a8:	460b      	mov	r3, r1
 80106aa:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80106ac:	78fb      	ldrb	r3, [r7, #3]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d002      	beq.n	80106b8 <HAL_PCDEx_LPM_Callback+0x18>
 80106b2:	2b01      	cmp	r3, #1
 80106b4:	d01f      	beq.n	80106f6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80106b6:	e03b      	b.n	8010730 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	6a1b      	ldr	r3, [r3, #32]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d007      	beq.n	80106d0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80106c0:	f000 f83c 	bl	801073c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80106c4:	4b1c      	ldr	r3, [pc, #112]	; (8010738 <HAL_PCDEx_LPM_Callback+0x98>)
 80106c6:	691b      	ldr	r3, [r3, #16]
 80106c8:	4a1b      	ldr	r2, [pc, #108]	; (8010738 <HAL_PCDEx_LPM_Callback+0x98>)
 80106ca:	f023 0306 	bic.w	r3, r3, #6
 80106ce:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	687a      	ldr	r2, [r7, #4]
 80106dc:	6812      	ldr	r2, [r2, #0]
 80106de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80106e2:	f023 0301 	bic.w	r3, r3, #1
 80106e6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80106ee:	4618      	mov	r0, r3
 80106f0:	f7fb fa1b 	bl	800bb2a <USBD_LL_Resume>
    break;
 80106f4:	e01c      	b.n	8010730 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	687a      	ldr	r2, [r7, #4]
 8010702:	6812      	ldr	r2, [r2, #0]
 8010704:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010708:	f043 0301 	orr.w	r3, r3, #1
 801070c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010714:	4618      	mov	r0, r3
 8010716:	f7fb f9f2 	bl	800bafe <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	6a1b      	ldr	r3, [r3, #32]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d005      	beq.n	801072e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010722:	4b05      	ldr	r3, [pc, #20]	; (8010738 <HAL_PCDEx_LPM_Callback+0x98>)
 8010724:	691b      	ldr	r3, [r3, #16]
 8010726:	4a04      	ldr	r2, [pc, #16]	; (8010738 <HAL_PCDEx_LPM_Callback+0x98>)
 8010728:	f043 0306 	orr.w	r3, r3, #6
 801072c:	6113      	str	r3, [r2, #16]
    break;
 801072e:	bf00      	nop
}
 8010730:	bf00      	nop
 8010732:	3708      	adds	r7, #8
 8010734:	46bd      	mov	sp, r7
 8010736:	bd80      	pop	{r7, pc}
 8010738:	e000ed00 	.word	0xe000ed00

0801073c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801073c:	b580      	push	{r7, lr}
 801073e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010740:	f7f0 f9fe 	bl	8000b40 <SystemClock_Config>
}
 8010744:	bf00      	nop
 8010746:	bd80      	pop	{r7, pc}

08010748 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010748:	b480      	push	{r7}
 801074a:	b085      	sub	sp, #20
 801074c:	af00      	add	r7, sp, #0
 801074e:	4603      	mov	r3, r0
 8010750:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010752:	2300      	movs	r3, #0
 8010754:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010756:	79fb      	ldrb	r3, [r7, #7]
 8010758:	2b03      	cmp	r3, #3
 801075a:	d817      	bhi.n	801078c <USBD_Get_USB_Status+0x44>
 801075c:	a201      	add	r2, pc, #4	; (adr r2, 8010764 <USBD_Get_USB_Status+0x1c>)
 801075e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010762:	bf00      	nop
 8010764:	08010775 	.word	0x08010775
 8010768:	0801077b 	.word	0x0801077b
 801076c:	08010781 	.word	0x08010781
 8010770:	08010787 	.word	0x08010787
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010774:	2300      	movs	r3, #0
 8010776:	73fb      	strb	r3, [r7, #15]
    break;
 8010778:	e00b      	b.n	8010792 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801077a:	2303      	movs	r3, #3
 801077c:	73fb      	strb	r3, [r7, #15]
    break;
 801077e:	e008      	b.n	8010792 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010780:	2301      	movs	r3, #1
 8010782:	73fb      	strb	r3, [r7, #15]
    break;
 8010784:	e005      	b.n	8010792 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010786:	2303      	movs	r3, #3
 8010788:	73fb      	strb	r3, [r7, #15]
    break;
 801078a:	e002      	b.n	8010792 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801078c:	2303      	movs	r3, #3
 801078e:	73fb      	strb	r3, [r7, #15]
    break;
 8010790:	bf00      	nop
  }
  return usb_status;
 8010792:	7bfb      	ldrb	r3, [r7, #15]
}
 8010794:	4618      	mov	r0, r3
 8010796:	3714      	adds	r7, #20
 8010798:	46bd      	mov	sp, r7
 801079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079e:	4770      	bx	lr

080107a0 <malloc>:
 80107a0:	4b02      	ldr	r3, [pc, #8]	; (80107ac <malloc+0xc>)
 80107a2:	4601      	mov	r1, r0
 80107a4:	6818      	ldr	r0, [r3, #0]
 80107a6:	f000 b82b 	b.w	8010800 <_malloc_r>
 80107aa:	bf00      	nop
 80107ac:	20000168 	.word	0x20000168

080107b0 <free>:
 80107b0:	4b02      	ldr	r3, [pc, #8]	; (80107bc <free+0xc>)
 80107b2:	4601      	mov	r1, r0
 80107b4:	6818      	ldr	r0, [r3, #0]
 80107b6:	f000 ba69 	b.w	8010c8c <_free_r>
 80107ba:	bf00      	nop
 80107bc:	20000168 	.word	0x20000168

080107c0 <sbrk_aligned>:
 80107c0:	b570      	push	{r4, r5, r6, lr}
 80107c2:	4e0e      	ldr	r6, [pc, #56]	; (80107fc <sbrk_aligned+0x3c>)
 80107c4:	460c      	mov	r4, r1
 80107c6:	6831      	ldr	r1, [r6, #0]
 80107c8:	4605      	mov	r5, r0
 80107ca:	b911      	cbnz	r1, 80107d2 <sbrk_aligned+0x12>
 80107cc:	f000 fa20 	bl	8010c10 <_sbrk_r>
 80107d0:	6030      	str	r0, [r6, #0]
 80107d2:	4621      	mov	r1, r4
 80107d4:	4628      	mov	r0, r5
 80107d6:	f000 fa1b 	bl	8010c10 <_sbrk_r>
 80107da:	1c43      	adds	r3, r0, #1
 80107dc:	d00a      	beq.n	80107f4 <sbrk_aligned+0x34>
 80107de:	1cc4      	adds	r4, r0, #3
 80107e0:	f024 0403 	bic.w	r4, r4, #3
 80107e4:	42a0      	cmp	r0, r4
 80107e6:	d007      	beq.n	80107f8 <sbrk_aligned+0x38>
 80107e8:	1a21      	subs	r1, r4, r0
 80107ea:	4628      	mov	r0, r5
 80107ec:	f000 fa10 	bl	8010c10 <_sbrk_r>
 80107f0:	3001      	adds	r0, #1
 80107f2:	d101      	bne.n	80107f8 <sbrk_aligned+0x38>
 80107f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80107f8:	4620      	mov	r0, r4
 80107fa:	bd70      	pop	{r4, r5, r6, pc}
 80107fc:	200045a8 	.word	0x200045a8

08010800 <_malloc_r>:
 8010800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010804:	1ccd      	adds	r5, r1, #3
 8010806:	f025 0503 	bic.w	r5, r5, #3
 801080a:	3508      	adds	r5, #8
 801080c:	2d0c      	cmp	r5, #12
 801080e:	bf38      	it	cc
 8010810:	250c      	movcc	r5, #12
 8010812:	2d00      	cmp	r5, #0
 8010814:	4607      	mov	r7, r0
 8010816:	db01      	blt.n	801081c <_malloc_r+0x1c>
 8010818:	42a9      	cmp	r1, r5
 801081a:	d905      	bls.n	8010828 <_malloc_r+0x28>
 801081c:	230c      	movs	r3, #12
 801081e:	603b      	str	r3, [r7, #0]
 8010820:	2600      	movs	r6, #0
 8010822:	4630      	mov	r0, r6
 8010824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010828:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80108fc <_malloc_r+0xfc>
 801082c:	f000 f89c 	bl	8010968 <__malloc_lock>
 8010830:	f8d8 3000 	ldr.w	r3, [r8]
 8010834:	461c      	mov	r4, r3
 8010836:	bb5c      	cbnz	r4, 8010890 <_malloc_r+0x90>
 8010838:	4629      	mov	r1, r5
 801083a:	4638      	mov	r0, r7
 801083c:	f7ff ffc0 	bl	80107c0 <sbrk_aligned>
 8010840:	1c43      	adds	r3, r0, #1
 8010842:	4604      	mov	r4, r0
 8010844:	d155      	bne.n	80108f2 <_malloc_r+0xf2>
 8010846:	f8d8 4000 	ldr.w	r4, [r8]
 801084a:	4626      	mov	r6, r4
 801084c:	2e00      	cmp	r6, #0
 801084e:	d145      	bne.n	80108dc <_malloc_r+0xdc>
 8010850:	2c00      	cmp	r4, #0
 8010852:	d048      	beq.n	80108e6 <_malloc_r+0xe6>
 8010854:	6823      	ldr	r3, [r4, #0]
 8010856:	4631      	mov	r1, r6
 8010858:	4638      	mov	r0, r7
 801085a:	eb04 0903 	add.w	r9, r4, r3
 801085e:	f000 f9d7 	bl	8010c10 <_sbrk_r>
 8010862:	4581      	cmp	r9, r0
 8010864:	d13f      	bne.n	80108e6 <_malloc_r+0xe6>
 8010866:	6821      	ldr	r1, [r4, #0]
 8010868:	1a6d      	subs	r5, r5, r1
 801086a:	4629      	mov	r1, r5
 801086c:	4638      	mov	r0, r7
 801086e:	f7ff ffa7 	bl	80107c0 <sbrk_aligned>
 8010872:	3001      	adds	r0, #1
 8010874:	d037      	beq.n	80108e6 <_malloc_r+0xe6>
 8010876:	6823      	ldr	r3, [r4, #0]
 8010878:	442b      	add	r3, r5
 801087a:	6023      	str	r3, [r4, #0]
 801087c:	f8d8 3000 	ldr.w	r3, [r8]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d038      	beq.n	80108f6 <_malloc_r+0xf6>
 8010884:	685a      	ldr	r2, [r3, #4]
 8010886:	42a2      	cmp	r2, r4
 8010888:	d12b      	bne.n	80108e2 <_malloc_r+0xe2>
 801088a:	2200      	movs	r2, #0
 801088c:	605a      	str	r2, [r3, #4]
 801088e:	e00f      	b.n	80108b0 <_malloc_r+0xb0>
 8010890:	6822      	ldr	r2, [r4, #0]
 8010892:	1b52      	subs	r2, r2, r5
 8010894:	d41f      	bmi.n	80108d6 <_malloc_r+0xd6>
 8010896:	2a0b      	cmp	r2, #11
 8010898:	d917      	bls.n	80108ca <_malloc_r+0xca>
 801089a:	1961      	adds	r1, r4, r5
 801089c:	42a3      	cmp	r3, r4
 801089e:	6025      	str	r5, [r4, #0]
 80108a0:	bf18      	it	ne
 80108a2:	6059      	strne	r1, [r3, #4]
 80108a4:	6863      	ldr	r3, [r4, #4]
 80108a6:	bf08      	it	eq
 80108a8:	f8c8 1000 	streq.w	r1, [r8]
 80108ac:	5162      	str	r2, [r4, r5]
 80108ae:	604b      	str	r3, [r1, #4]
 80108b0:	4638      	mov	r0, r7
 80108b2:	f104 060b 	add.w	r6, r4, #11
 80108b6:	f000 f85d 	bl	8010974 <__malloc_unlock>
 80108ba:	f026 0607 	bic.w	r6, r6, #7
 80108be:	1d23      	adds	r3, r4, #4
 80108c0:	1af2      	subs	r2, r6, r3
 80108c2:	d0ae      	beq.n	8010822 <_malloc_r+0x22>
 80108c4:	1b9b      	subs	r3, r3, r6
 80108c6:	50a3      	str	r3, [r4, r2]
 80108c8:	e7ab      	b.n	8010822 <_malloc_r+0x22>
 80108ca:	42a3      	cmp	r3, r4
 80108cc:	6862      	ldr	r2, [r4, #4]
 80108ce:	d1dd      	bne.n	801088c <_malloc_r+0x8c>
 80108d0:	f8c8 2000 	str.w	r2, [r8]
 80108d4:	e7ec      	b.n	80108b0 <_malloc_r+0xb0>
 80108d6:	4623      	mov	r3, r4
 80108d8:	6864      	ldr	r4, [r4, #4]
 80108da:	e7ac      	b.n	8010836 <_malloc_r+0x36>
 80108dc:	4634      	mov	r4, r6
 80108de:	6876      	ldr	r6, [r6, #4]
 80108e0:	e7b4      	b.n	801084c <_malloc_r+0x4c>
 80108e2:	4613      	mov	r3, r2
 80108e4:	e7cc      	b.n	8010880 <_malloc_r+0x80>
 80108e6:	230c      	movs	r3, #12
 80108e8:	603b      	str	r3, [r7, #0]
 80108ea:	4638      	mov	r0, r7
 80108ec:	f000 f842 	bl	8010974 <__malloc_unlock>
 80108f0:	e797      	b.n	8010822 <_malloc_r+0x22>
 80108f2:	6025      	str	r5, [r4, #0]
 80108f4:	e7dc      	b.n	80108b0 <_malloc_r+0xb0>
 80108f6:	605b      	str	r3, [r3, #4]
 80108f8:	deff      	udf	#255	; 0xff
 80108fa:	bf00      	nop
 80108fc:	200045a4 	.word	0x200045a4

08010900 <sniprintf>:
 8010900:	b40c      	push	{r2, r3}
 8010902:	b530      	push	{r4, r5, lr}
 8010904:	4b17      	ldr	r3, [pc, #92]	; (8010964 <sniprintf+0x64>)
 8010906:	1e0c      	subs	r4, r1, #0
 8010908:	681d      	ldr	r5, [r3, #0]
 801090a:	b09d      	sub	sp, #116	; 0x74
 801090c:	da08      	bge.n	8010920 <sniprintf+0x20>
 801090e:	238b      	movs	r3, #139	; 0x8b
 8010910:	602b      	str	r3, [r5, #0]
 8010912:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010916:	b01d      	add	sp, #116	; 0x74
 8010918:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801091c:	b002      	add	sp, #8
 801091e:	4770      	bx	lr
 8010920:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010924:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010928:	bf14      	ite	ne
 801092a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801092e:	4623      	moveq	r3, r4
 8010930:	9304      	str	r3, [sp, #16]
 8010932:	9307      	str	r3, [sp, #28]
 8010934:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010938:	9002      	str	r0, [sp, #8]
 801093a:	9006      	str	r0, [sp, #24]
 801093c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010940:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010942:	ab21      	add	r3, sp, #132	; 0x84
 8010944:	a902      	add	r1, sp, #8
 8010946:	4628      	mov	r0, r5
 8010948:	9301      	str	r3, [sp, #4]
 801094a:	f000 fa45 	bl	8010dd8 <_svfiprintf_r>
 801094e:	1c43      	adds	r3, r0, #1
 8010950:	bfbc      	itt	lt
 8010952:	238b      	movlt	r3, #139	; 0x8b
 8010954:	602b      	strlt	r3, [r5, #0]
 8010956:	2c00      	cmp	r4, #0
 8010958:	d0dd      	beq.n	8010916 <sniprintf+0x16>
 801095a:	9b02      	ldr	r3, [sp, #8]
 801095c:	2200      	movs	r2, #0
 801095e:	701a      	strb	r2, [r3, #0]
 8010960:	e7d9      	b.n	8010916 <sniprintf+0x16>
 8010962:	bf00      	nop
 8010964:	20000168 	.word	0x20000168

08010968 <__malloc_lock>:
 8010968:	4801      	ldr	r0, [pc, #4]	; (8010970 <__malloc_lock+0x8>)
 801096a:	f000 b98c 	b.w	8010c86 <__retarget_lock_acquire_recursive>
 801096e:	bf00      	nop
 8010970:	200046e8 	.word	0x200046e8

08010974 <__malloc_unlock>:
 8010974:	4801      	ldr	r0, [pc, #4]	; (801097c <__malloc_unlock+0x8>)
 8010976:	f000 b987 	b.w	8010c88 <__retarget_lock_release_recursive>
 801097a:	bf00      	nop
 801097c:	200046e8 	.word	0x200046e8

08010980 <std>:
 8010980:	2300      	movs	r3, #0
 8010982:	b510      	push	{r4, lr}
 8010984:	4604      	mov	r4, r0
 8010986:	e9c0 3300 	strd	r3, r3, [r0]
 801098a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801098e:	6083      	str	r3, [r0, #8]
 8010990:	8181      	strh	r1, [r0, #12]
 8010992:	6643      	str	r3, [r0, #100]	; 0x64
 8010994:	81c2      	strh	r2, [r0, #14]
 8010996:	6183      	str	r3, [r0, #24]
 8010998:	4619      	mov	r1, r3
 801099a:	2208      	movs	r2, #8
 801099c:	305c      	adds	r0, #92	; 0x5c
 801099e:	f000 f92e 	bl	8010bfe <memset>
 80109a2:	4b0d      	ldr	r3, [pc, #52]	; (80109d8 <std+0x58>)
 80109a4:	6263      	str	r3, [r4, #36]	; 0x24
 80109a6:	4b0d      	ldr	r3, [pc, #52]	; (80109dc <std+0x5c>)
 80109a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80109aa:	4b0d      	ldr	r3, [pc, #52]	; (80109e0 <std+0x60>)
 80109ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80109ae:	4b0d      	ldr	r3, [pc, #52]	; (80109e4 <std+0x64>)
 80109b0:	6323      	str	r3, [r4, #48]	; 0x30
 80109b2:	4b0d      	ldr	r3, [pc, #52]	; (80109e8 <std+0x68>)
 80109b4:	6224      	str	r4, [r4, #32]
 80109b6:	429c      	cmp	r4, r3
 80109b8:	d006      	beq.n	80109c8 <std+0x48>
 80109ba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80109be:	4294      	cmp	r4, r2
 80109c0:	d002      	beq.n	80109c8 <std+0x48>
 80109c2:	33d0      	adds	r3, #208	; 0xd0
 80109c4:	429c      	cmp	r4, r3
 80109c6:	d105      	bne.n	80109d4 <std+0x54>
 80109c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80109cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109d0:	f000 b958 	b.w	8010c84 <__retarget_lock_init_recursive>
 80109d4:	bd10      	pop	{r4, pc}
 80109d6:	bf00      	nop
 80109d8:	080116d9 	.word	0x080116d9
 80109dc:	080116fb 	.word	0x080116fb
 80109e0:	08011733 	.word	0x08011733
 80109e4:	08011757 	.word	0x08011757
 80109e8:	200045ac 	.word	0x200045ac

080109ec <stdio_exit_handler>:
 80109ec:	4a02      	ldr	r2, [pc, #8]	; (80109f8 <stdio_exit_handler+0xc>)
 80109ee:	4903      	ldr	r1, [pc, #12]	; (80109fc <stdio_exit_handler+0x10>)
 80109f0:	4803      	ldr	r0, [pc, #12]	; (8010a00 <stdio_exit_handler+0x14>)
 80109f2:	f000 b869 	b.w	8010ac8 <_fwalk_sglue>
 80109f6:	bf00      	nop
 80109f8:	20000110 	.word	0x20000110
 80109fc:	08011689 	.word	0x08011689
 8010a00:	2000011c 	.word	0x2000011c

08010a04 <cleanup_stdio>:
 8010a04:	6841      	ldr	r1, [r0, #4]
 8010a06:	4b0c      	ldr	r3, [pc, #48]	; (8010a38 <cleanup_stdio+0x34>)
 8010a08:	4299      	cmp	r1, r3
 8010a0a:	b510      	push	{r4, lr}
 8010a0c:	4604      	mov	r4, r0
 8010a0e:	d001      	beq.n	8010a14 <cleanup_stdio+0x10>
 8010a10:	f000 fe3a 	bl	8011688 <_fflush_r>
 8010a14:	68a1      	ldr	r1, [r4, #8]
 8010a16:	4b09      	ldr	r3, [pc, #36]	; (8010a3c <cleanup_stdio+0x38>)
 8010a18:	4299      	cmp	r1, r3
 8010a1a:	d002      	beq.n	8010a22 <cleanup_stdio+0x1e>
 8010a1c:	4620      	mov	r0, r4
 8010a1e:	f000 fe33 	bl	8011688 <_fflush_r>
 8010a22:	68e1      	ldr	r1, [r4, #12]
 8010a24:	4b06      	ldr	r3, [pc, #24]	; (8010a40 <cleanup_stdio+0x3c>)
 8010a26:	4299      	cmp	r1, r3
 8010a28:	d004      	beq.n	8010a34 <cleanup_stdio+0x30>
 8010a2a:	4620      	mov	r0, r4
 8010a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a30:	f000 be2a 	b.w	8011688 <_fflush_r>
 8010a34:	bd10      	pop	{r4, pc}
 8010a36:	bf00      	nop
 8010a38:	200045ac 	.word	0x200045ac
 8010a3c:	20004614 	.word	0x20004614
 8010a40:	2000467c 	.word	0x2000467c

08010a44 <global_stdio_init.part.0>:
 8010a44:	b510      	push	{r4, lr}
 8010a46:	4b0b      	ldr	r3, [pc, #44]	; (8010a74 <global_stdio_init.part.0+0x30>)
 8010a48:	4c0b      	ldr	r4, [pc, #44]	; (8010a78 <global_stdio_init.part.0+0x34>)
 8010a4a:	4a0c      	ldr	r2, [pc, #48]	; (8010a7c <global_stdio_init.part.0+0x38>)
 8010a4c:	601a      	str	r2, [r3, #0]
 8010a4e:	4620      	mov	r0, r4
 8010a50:	2200      	movs	r2, #0
 8010a52:	2104      	movs	r1, #4
 8010a54:	f7ff ff94 	bl	8010980 <std>
 8010a58:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8010a5c:	2201      	movs	r2, #1
 8010a5e:	2109      	movs	r1, #9
 8010a60:	f7ff ff8e 	bl	8010980 <std>
 8010a64:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010a68:	2202      	movs	r2, #2
 8010a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a6e:	2112      	movs	r1, #18
 8010a70:	f7ff bf86 	b.w	8010980 <std>
 8010a74:	200046e4 	.word	0x200046e4
 8010a78:	200045ac 	.word	0x200045ac
 8010a7c:	080109ed 	.word	0x080109ed

08010a80 <__sfp_lock_acquire>:
 8010a80:	4801      	ldr	r0, [pc, #4]	; (8010a88 <__sfp_lock_acquire+0x8>)
 8010a82:	f000 b900 	b.w	8010c86 <__retarget_lock_acquire_recursive>
 8010a86:	bf00      	nop
 8010a88:	200046e9 	.word	0x200046e9

08010a8c <__sfp_lock_release>:
 8010a8c:	4801      	ldr	r0, [pc, #4]	; (8010a94 <__sfp_lock_release+0x8>)
 8010a8e:	f000 b8fb 	b.w	8010c88 <__retarget_lock_release_recursive>
 8010a92:	bf00      	nop
 8010a94:	200046e9 	.word	0x200046e9

08010a98 <__sinit>:
 8010a98:	b510      	push	{r4, lr}
 8010a9a:	4604      	mov	r4, r0
 8010a9c:	f7ff fff0 	bl	8010a80 <__sfp_lock_acquire>
 8010aa0:	6a23      	ldr	r3, [r4, #32]
 8010aa2:	b11b      	cbz	r3, 8010aac <__sinit+0x14>
 8010aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010aa8:	f7ff bff0 	b.w	8010a8c <__sfp_lock_release>
 8010aac:	4b04      	ldr	r3, [pc, #16]	; (8010ac0 <__sinit+0x28>)
 8010aae:	6223      	str	r3, [r4, #32]
 8010ab0:	4b04      	ldr	r3, [pc, #16]	; (8010ac4 <__sinit+0x2c>)
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d1f5      	bne.n	8010aa4 <__sinit+0xc>
 8010ab8:	f7ff ffc4 	bl	8010a44 <global_stdio_init.part.0>
 8010abc:	e7f2      	b.n	8010aa4 <__sinit+0xc>
 8010abe:	bf00      	nop
 8010ac0:	08010a05 	.word	0x08010a05
 8010ac4:	200046e4 	.word	0x200046e4

08010ac8 <_fwalk_sglue>:
 8010ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010acc:	4607      	mov	r7, r0
 8010ace:	4688      	mov	r8, r1
 8010ad0:	4614      	mov	r4, r2
 8010ad2:	2600      	movs	r6, #0
 8010ad4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010ad8:	f1b9 0901 	subs.w	r9, r9, #1
 8010adc:	d505      	bpl.n	8010aea <_fwalk_sglue+0x22>
 8010ade:	6824      	ldr	r4, [r4, #0]
 8010ae0:	2c00      	cmp	r4, #0
 8010ae2:	d1f7      	bne.n	8010ad4 <_fwalk_sglue+0xc>
 8010ae4:	4630      	mov	r0, r6
 8010ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010aea:	89ab      	ldrh	r3, [r5, #12]
 8010aec:	2b01      	cmp	r3, #1
 8010aee:	d907      	bls.n	8010b00 <_fwalk_sglue+0x38>
 8010af0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010af4:	3301      	adds	r3, #1
 8010af6:	d003      	beq.n	8010b00 <_fwalk_sglue+0x38>
 8010af8:	4629      	mov	r1, r5
 8010afa:	4638      	mov	r0, r7
 8010afc:	47c0      	blx	r8
 8010afe:	4306      	orrs	r6, r0
 8010b00:	3568      	adds	r5, #104	; 0x68
 8010b02:	e7e9      	b.n	8010ad8 <_fwalk_sglue+0x10>

08010b04 <iprintf>:
 8010b04:	b40f      	push	{r0, r1, r2, r3}
 8010b06:	b507      	push	{r0, r1, r2, lr}
 8010b08:	4906      	ldr	r1, [pc, #24]	; (8010b24 <iprintf+0x20>)
 8010b0a:	ab04      	add	r3, sp, #16
 8010b0c:	6808      	ldr	r0, [r1, #0]
 8010b0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b12:	6881      	ldr	r1, [r0, #8]
 8010b14:	9301      	str	r3, [sp, #4]
 8010b16:	f000 fa87 	bl	8011028 <_vfiprintf_r>
 8010b1a:	b003      	add	sp, #12
 8010b1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b20:	b004      	add	sp, #16
 8010b22:	4770      	bx	lr
 8010b24:	20000168 	.word	0x20000168

08010b28 <_puts_r>:
 8010b28:	6a03      	ldr	r3, [r0, #32]
 8010b2a:	b570      	push	{r4, r5, r6, lr}
 8010b2c:	6884      	ldr	r4, [r0, #8]
 8010b2e:	4605      	mov	r5, r0
 8010b30:	460e      	mov	r6, r1
 8010b32:	b90b      	cbnz	r3, 8010b38 <_puts_r+0x10>
 8010b34:	f7ff ffb0 	bl	8010a98 <__sinit>
 8010b38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010b3a:	07db      	lsls	r3, r3, #31
 8010b3c:	d405      	bmi.n	8010b4a <_puts_r+0x22>
 8010b3e:	89a3      	ldrh	r3, [r4, #12]
 8010b40:	0598      	lsls	r0, r3, #22
 8010b42:	d402      	bmi.n	8010b4a <_puts_r+0x22>
 8010b44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010b46:	f000 f89e 	bl	8010c86 <__retarget_lock_acquire_recursive>
 8010b4a:	89a3      	ldrh	r3, [r4, #12]
 8010b4c:	0719      	lsls	r1, r3, #28
 8010b4e:	d513      	bpl.n	8010b78 <_puts_r+0x50>
 8010b50:	6923      	ldr	r3, [r4, #16]
 8010b52:	b18b      	cbz	r3, 8010b78 <_puts_r+0x50>
 8010b54:	3e01      	subs	r6, #1
 8010b56:	68a3      	ldr	r3, [r4, #8]
 8010b58:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010b5c:	3b01      	subs	r3, #1
 8010b5e:	60a3      	str	r3, [r4, #8]
 8010b60:	b9e9      	cbnz	r1, 8010b9e <_puts_r+0x76>
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	da2e      	bge.n	8010bc4 <_puts_r+0x9c>
 8010b66:	4622      	mov	r2, r4
 8010b68:	210a      	movs	r1, #10
 8010b6a:	4628      	mov	r0, r5
 8010b6c:	f000 fe26 	bl	80117bc <__swbuf_r>
 8010b70:	3001      	adds	r0, #1
 8010b72:	d007      	beq.n	8010b84 <_puts_r+0x5c>
 8010b74:	250a      	movs	r5, #10
 8010b76:	e007      	b.n	8010b88 <_puts_r+0x60>
 8010b78:	4621      	mov	r1, r4
 8010b7a:	4628      	mov	r0, r5
 8010b7c:	f000 fe5c 	bl	8011838 <__swsetup_r>
 8010b80:	2800      	cmp	r0, #0
 8010b82:	d0e7      	beq.n	8010b54 <_puts_r+0x2c>
 8010b84:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8010b88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010b8a:	07da      	lsls	r2, r3, #31
 8010b8c:	d405      	bmi.n	8010b9a <_puts_r+0x72>
 8010b8e:	89a3      	ldrh	r3, [r4, #12]
 8010b90:	059b      	lsls	r3, r3, #22
 8010b92:	d402      	bmi.n	8010b9a <_puts_r+0x72>
 8010b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010b96:	f000 f877 	bl	8010c88 <__retarget_lock_release_recursive>
 8010b9a:	4628      	mov	r0, r5
 8010b9c:	bd70      	pop	{r4, r5, r6, pc}
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	da04      	bge.n	8010bac <_puts_r+0x84>
 8010ba2:	69a2      	ldr	r2, [r4, #24]
 8010ba4:	429a      	cmp	r2, r3
 8010ba6:	dc06      	bgt.n	8010bb6 <_puts_r+0x8e>
 8010ba8:	290a      	cmp	r1, #10
 8010baa:	d004      	beq.n	8010bb6 <_puts_r+0x8e>
 8010bac:	6823      	ldr	r3, [r4, #0]
 8010bae:	1c5a      	adds	r2, r3, #1
 8010bb0:	6022      	str	r2, [r4, #0]
 8010bb2:	7019      	strb	r1, [r3, #0]
 8010bb4:	e7cf      	b.n	8010b56 <_puts_r+0x2e>
 8010bb6:	4622      	mov	r2, r4
 8010bb8:	4628      	mov	r0, r5
 8010bba:	f000 fdff 	bl	80117bc <__swbuf_r>
 8010bbe:	3001      	adds	r0, #1
 8010bc0:	d1c9      	bne.n	8010b56 <_puts_r+0x2e>
 8010bc2:	e7df      	b.n	8010b84 <_puts_r+0x5c>
 8010bc4:	6823      	ldr	r3, [r4, #0]
 8010bc6:	250a      	movs	r5, #10
 8010bc8:	1c5a      	adds	r2, r3, #1
 8010bca:	6022      	str	r2, [r4, #0]
 8010bcc:	701d      	strb	r5, [r3, #0]
 8010bce:	e7db      	b.n	8010b88 <_puts_r+0x60>

08010bd0 <puts>:
 8010bd0:	4b02      	ldr	r3, [pc, #8]	; (8010bdc <puts+0xc>)
 8010bd2:	4601      	mov	r1, r0
 8010bd4:	6818      	ldr	r0, [r3, #0]
 8010bd6:	f7ff bfa7 	b.w	8010b28 <_puts_r>
 8010bda:	bf00      	nop
 8010bdc:	20000168 	.word	0x20000168

08010be0 <strcat>:
 8010be0:	b510      	push	{r4, lr}
 8010be2:	4602      	mov	r2, r0
 8010be4:	7814      	ldrb	r4, [r2, #0]
 8010be6:	4613      	mov	r3, r2
 8010be8:	3201      	adds	r2, #1
 8010bea:	2c00      	cmp	r4, #0
 8010bec:	d1fa      	bne.n	8010be4 <strcat+0x4>
 8010bee:	3b01      	subs	r3, #1
 8010bf0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010bf4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010bf8:	2a00      	cmp	r2, #0
 8010bfa:	d1f9      	bne.n	8010bf0 <strcat+0x10>
 8010bfc:	bd10      	pop	{r4, pc}

08010bfe <memset>:
 8010bfe:	4402      	add	r2, r0
 8010c00:	4603      	mov	r3, r0
 8010c02:	4293      	cmp	r3, r2
 8010c04:	d100      	bne.n	8010c08 <memset+0xa>
 8010c06:	4770      	bx	lr
 8010c08:	f803 1b01 	strb.w	r1, [r3], #1
 8010c0c:	e7f9      	b.n	8010c02 <memset+0x4>
	...

08010c10 <_sbrk_r>:
 8010c10:	b538      	push	{r3, r4, r5, lr}
 8010c12:	4d06      	ldr	r5, [pc, #24]	; (8010c2c <_sbrk_r+0x1c>)
 8010c14:	2300      	movs	r3, #0
 8010c16:	4604      	mov	r4, r0
 8010c18:	4608      	mov	r0, r1
 8010c1a:	602b      	str	r3, [r5, #0]
 8010c1c:	f7f0 fe18 	bl	8001850 <_sbrk>
 8010c20:	1c43      	adds	r3, r0, #1
 8010c22:	d102      	bne.n	8010c2a <_sbrk_r+0x1a>
 8010c24:	682b      	ldr	r3, [r5, #0]
 8010c26:	b103      	cbz	r3, 8010c2a <_sbrk_r+0x1a>
 8010c28:	6023      	str	r3, [r4, #0]
 8010c2a:	bd38      	pop	{r3, r4, r5, pc}
 8010c2c:	200046ec 	.word	0x200046ec

08010c30 <__errno>:
 8010c30:	4b01      	ldr	r3, [pc, #4]	; (8010c38 <__errno+0x8>)
 8010c32:	6818      	ldr	r0, [r3, #0]
 8010c34:	4770      	bx	lr
 8010c36:	bf00      	nop
 8010c38:	20000168 	.word	0x20000168

08010c3c <__libc_init_array>:
 8010c3c:	b570      	push	{r4, r5, r6, lr}
 8010c3e:	4d0d      	ldr	r5, [pc, #52]	; (8010c74 <__libc_init_array+0x38>)
 8010c40:	4c0d      	ldr	r4, [pc, #52]	; (8010c78 <__libc_init_array+0x3c>)
 8010c42:	1b64      	subs	r4, r4, r5
 8010c44:	10a4      	asrs	r4, r4, #2
 8010c46:	2600      	movs	r6, #0
 8010c48:	42a6      	cmp	r6, r4
 8010c4a:	d109      	bne.n	8010c60 <__libc_init_array+0x24>
 8010c4c:	4d0b      	ldr	r5, [pc, #44]	; (8010c7c <__libc_init_array+0x40>)
 8010c4e:	4c0c      	ldr	r4, [pc, #48]	; (8010c80 <__libc_init_array+0x44>)
 8010c50:	f000 ff44 	bl	8011adc <_init>
 8010c54:	1b64      	subs	r4, r4, r5
 8010c56:	10a4      	asrs	r4, r4, #2
 8010c58:	2600      	movs	r6, #0
 8010c5a:	42a6      	cmp	r6, r4
 8010c5c:	d105      	bne.n	8010c6a <__libc_init_array+0x2e>
 8010c5e:	bd70      	pop	{r4, r5, r6, pc}
 8010c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c64:	4798      	blx	r3
 8010c66:	3601      	adds	r6, #1
 8010c68:	e7ee      	b.n	8010c48 <__libc_init_array+0xc>
 8010c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c6e:	4798      	blx	r3
 8010c70:	3601      	adds	r6, #1
 8010c72:	e7f2      	b.n	8010c5a <__libc_init_array+0x1e>
 8010c74:	08012368 	.word	0x08012368
 8010c78:	08012368 	.word	0x08012368
 8010c7c:	08012368 	.word	0x08012368
 8010c80:	0801236c 	.word	0x0801236c

08010c84 <__retarget_lock_init_recursive>:
 8010c84:	4770      	bx	lr

08010c86 <__retarget_lock_acquire_recursive>:
 8010c86:	4770      	bx	lr

08010c88 <__retarget_lock_release_recursive>:
 8010c88:	4770      	bx	lr
	...

08010c8c <_free_r>:
 8010c8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010c8e:	2900      	cmp	r1, #0
 8010c90:	d044      	beq.n	8010d1c <_free_r+0x90>
 8010c92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c96:	9001      	str	r0, [sp, #4]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	f1a1 0404 	sub.w	r4, r1, #4
 8010c9e:	bfb8      	it	lt
 8010ca0:	18e4      	addlt	r4, r4, r3
 8010ca2:	f7ff fe61 	bl	8010968 <__malloc_lock>
 8010ca6:	4a1e      	ldr	r2, [pc, #120]	; (8010d20 <_free_r+0x94>)
 8010ca8:	9801      	ldr	r0, [sp, #4]
 8010caa:	6813      	ldr	r3, [r2, #0]
 8010cac:	b933      	cbnz	r3, 8010cbc <_free_r+0x30>
 8010cae:	6063      	str	r3, [r4, #4]
 8010cb0:	6014      	str	r4, [r2, #0]
 8010cb2:	b003      	add	sp, #12
 8010cb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010cb8:	f7ff be5c 	b.w	8010974 <__malloc_unlock>
 8010cbc:	42a3      	cmp	r3, r4
 8010cbe:	d908      	bls.n	8010cd2 <_free_r+0x46>
 8010cc0:	6825      	ldr	r5, [r4, #0]
 8010cc2:	1961      	adds	r1, r4, r5
 8010cc4:	428b      	cmp	r3, r1
 8010cc6:	bf01      	itttt	eq
 8010cc8:	6819      	ldreq	r1, [r3, #0]
 8010cca:	685b      	ldreq	r3, [r3, #4]
 8010ccc:	1949      	addeq	r1, r1, r5
 8010cce:	6021      	streq	r1, [r4, #0]
 8010cd0:	e7ed      	b.n	8010cae <_free_r+0x22>
 8010cd2:	461a      	mov	r2, r3
 8010cd4:	685b      	ldr	r3, [r3, #4]
 8010cd6:	b10b      	cbz	r3, 8010cdc <_free_r+0x50>
 8010cd8:	42a3      	cmp	r3, r4
 8010cda:	d9fa      	bls.n	8010cd2 <_free_r+0x46>
 8010cdc:	6811      	ldr	r1, [r2, #0]
 8010cde:	1855      	adds	r5, r2, r1
 8010ce0:	42a5      	cmp	r5, r4
 8010ce2:	d10b      	bne.n	8010cfc <_free_r+0x70>
 8010ce4:	6824      	ldr	r4, [r4, #0]
 8010ce6:	4421      	add	r1, r4
 8010ce8:	1854      	adds	r4, r2, r1
 8010cea:	42a3      	cmp	r3, r4
 8010cec:	6011      	str	r1, [r2, #0]
 8010cee:	d1e0      	bne.n	8010cb2 <_free_r+0x26>
 8010cf0:	681c      	ldr	r4, [r3, #0]
 8010cf2:	685b      	ldr	r3, [r3, #4]
 8010cf4:	6053      	str	r3, [r2, #4]
 8010cf6:	440c      	add	r4, r1
 8010cf8:	6014      	str	r4, [r2, #0]
 8010cfa:	e7da      	b.n	8010cb2 <_free_r+0x26>
 8010cfc:	d902      	bls.n	8010d04 <_free_r+0x78>
 8010cfe:	230c      	movs	r3, #12
 8010d00:	6003      	str	r3, [r0, #0]
 8010d02:	e7d6      	b.n	8010cb2 <_free_r+0x26>
 8010d04:	6825      	ldr	r5, [r4, #0]
 8010d06:	1961      	adds	r1, r4, r5
 8010d08:	428b      	cmp	r3, r1
 8010d0a:	bf04      	itt	eq
 8010d0c:	6819      	ldreq	r1, [r3, #0]
 8010d0e:	685b      	ldreq	r3, [r3, #4]
 8010d10:	6063      	str	r3, [r4, #4]
 8010d12:	bf04      	itt	eq
 8010d14:	1949      	addeq	r1, r1, r5
 8010d16:	6021      	streq	r1, [r4, #0]
 8010d18:	6054      	str	r4, [r2, #4]
 8010d1a:	e7ca      	b.n	8010cb2 <_free_r+0x26>
 8010d1c:	b003      	add	sp, #12
 8010d1e:	bd30      	pop	{r4, r5, pc}
 8010d20:	200045a4 	.word	0x200045a4

08010d24 <__ssputs_r>:
 8010d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d28:	688e      	ldr	r6, [r1, #8]
 8010d2a:	461f      	mov	r7, r3
 8010d2c:	42be      	cmp	r6, r7
 8010d2e:	680b      	ldr	r3, [r1, #0]
 8010d30:	4682      	mov	sl, r0
 8010d32:	460c      	mov	r4, r1
 8010d34:	4690      	mov	r8, r2
 8010d36:	d82c      	bhi.n	8010d92 <__ssputs_r+0x6e>
 8010d38:	898a      	ldrh	r2, [r1, #12]
 8010d3a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010d3e:	d026      	beq.n	8010d8e <__ssputs_r+0x6a>
 8010d40:	6965      	ldr	r5, [r4, #20]
 8010d42:	6909      	ldr	r1, [r1, #16]
 8010d44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010d48:	eba3 0901 	sub.w	r9, r3, r1
 8010d4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010d50:	1c7b      	adds	r3, r7, #1
 8010d52:	444b      	add	r3, r9
 8010d54:	106d      	asrs	r5, r5, #1
 8010d56:	429d      	cmp	r5, r3
 8010d58:	bf38      	it	cc
 8010d5a:	461d      	movcc	r5, r3
 8010d5c:	0553      	lsls	r3, r2, #21
 8010d5e:	d527      	bpl.n	8010db0 <__ssputs_r+0x8c>
 8010d60:	4629      	mov	r1, r5
 8010d62:	f7ff fd4d 	bl	8010800 <_malloc_r>
 8010d66:	4606      	mov	r6, r0
 8010d68:	b360      	cbz	r0, 8010dc4 <__ssputs_r+0xa0>
 8010d6a:	6921      	ldr	r1, [r4, #16]
 8010d6c:	464a      	mov	r2, r9
 8010d6e:	f000 fe9f 	bl	8011ab0 <memcpy>
 8010d72:	89a3      	ldrh	r3, [r4, #12]
 8010d74:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d7c:	81a3      	strh	r3, [r4, #12]
 8010d7e:	6126      	str	r6, [r4, #16]
 8010d80:	6165      	str	r5, [r4, #20]
 8010d82:	444e      	add	r6, r9
 8010d84:	eba5 0509 	sub.w	r5, r5, r9
 8010d88:	6026      	str	r6, [r4, #0]
 8010d8a:	60a5      	str	r5, [r4, #8]
 8010d8c:	463e      	mov	r6, r7
 8010d8e:	42be      	cmp	r6, r7
 8010d90:	d900      	bls.n	8010d94 <__ssputs_r+0x70>
 8010d92:	463e      	mov	r6, r7
 8010d94:	6820      	ldr	r0, [r4, #0]
 8010d96:	4632      	mov	r2, r6
 8010d98:	4641      	mov	r1, r8
 8010d9a:	f000 fe07 	bl	80119ac <memmove>
 8010d9e:	68a3      	ldr	r3, [r4, #8]
 8010da0:	1b9b      	subs	r3, r3, r6
 8010da2:	60a3      	str	r3, [r4, #8]
 8010da4:	6823      	ldr	r3, [r4, #0]
 8010da6:	4433      	add	r3, r6
 8010da8:	6023      	str	r3, [r4, #0]
 8010daa:	2000      	movs	r0, #0
 8010dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010db0:	462a      	mov	r2, r5
 8010db2:	f000 fcd4 	bl	801175e <_realloc_r>
 8010db6:	4606      	mov	r6, r0
 8010db8:	2800      	cmp	r0, #0
 8010dba:	d1e0      	bne.n	8010d7e <__ssputs_r+0x5a>
 8010dbc:	6921      	ldr	r1, [r4, #16]
 8010dbe:	4650      	mov	r0, sl
 8010dc0:	f7ff ff64 	bl	8010c8c <_free_r>
 8010dc4:	230c      	movs	r3, #12
 8010dc6:	f8ca 3000 	str.w	r3, [sl]
 8010dca:	89a3      	ldrh	r3, [r4, #12]
 8010dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010dd0:	81a3      	strh	r3, [r4, #12]
 8010dd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010dd6:	e7e9      	b.n	8010dac <__ssputs_r+0x88>

08010dd8 <_svfiprintf_r>:
 8010dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ddc:	4698      	mov	r8, r3
 8010dde:	898b      	ldrh	r3, [r1, #12]
 8010de0:	061b      	lsls	r3, r3, #24
 8010de2:	b09d      	sub	sp, #116	; 0x74
 8010de4:	4607      	mov	r7, r0
 8010de6:	460d      	mov	r5, r1
 8010de8:	4614      	mov	r4, r2
 8010dea:	d50e      	bpl.n	8010e0a <_svfiprintf_r+0x32>
 8010dec:	690b      	ldr	r3, [r1, #16]
 8010dee:	b963      	cbnz	r3, 8010e0a <_svfiprintf_r+0x32>
 8010df0:	2140      	movs	r1, #64	; 0x40
 8010df2:	f7ff fd05 	bl	8010800 <_malloc_r>
 8010df6:	6028      	str	r0, [r5, #0]
 8010df8:	6128      	str	r0, [r5, #16]
 8010dfa:	b920      	cbnz	r0, 8010e06 <_svfiprintf_r+0x2e>
 8010dfc:	230c      	movs	r3, #12
 8010dfe:	603b      	str	r3, [r7, #0]
 8010e00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010e04:	e0d0      	b.n	8010fa8 <_svfiprintf_r+0x1d0>
 8010e06:	2340      	movs	r3, #64	; 0x40
 8010e08:	616b      	str	r3, [r5, #20]
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	9309      	str	r3, [sp, #36]	; 0x24
 8010e0e:	2320      	movs	r3, #32
 8010e10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010e14:	f8cd 800c 	str.w	r8, [sp, #12]
 8010e18:	2330      	movs	r3, #48	; 0x30
 8010e1a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010fc0 <_svfiprintf_r+0x1e8>
 8010e1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010e22:	f04f 0901 	mov.w	r9, #1
 8010e26:	4623      	mov	r3, r4
 8010e28:	469a      	mov	sl, r3
 8010e2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e2e:	b10a      	cbz	r2, 8010e34 <_svfiprintf_r+0x5c>
 8010e30:	2a25      	cmp	r2, #37	; 0x25
 8010e32:	d1f9      	bne.n	8010e28 <_svfiprintf_r+0x50>
 8010e34:	ebba 0b04 	subs.w	fp, sl, r4
 8010e38:	d00b      	beq.n	8010e52 <_svfiprintf_r+0x7a>
 8010e3a:	465b      	mov	r3, fp
 8010e3c:	4622      	mov	r2, r4
 8010e3e:	4629      	mov	r1, r5
 8010e40:	4638      	mov	r0, r7
 8010e42:	f7ff ff6f 	bl	8010d24 <__ssputs_r>
 8010e46:	3001      	adds	r0, #1
 8010e48:	f000 80a9 	beq.w	8010f9e <_svfiprintf_r+0x1c6>
 8010e4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010e4e:	445a      	add	r2, fp
 8010e50:	9209      	str	r2, [sp, #36]	; 0x24
 8010e52:	f89a 3000 	ldrb.w	r3, [sl]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	f000 80a1 	beq.w	8010f9e <_svfiprintf_r+0x1c6>
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010e62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010e66:	f10a 0a01 	add.w	sl, sl, #1
 8010e6a:	9304      	str	r3, [sp, #16]
 8010e6c:	9307      	str	r3, [sp, #28]
 8010e6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010e72:	931a      	str	r3, [sp, #104]	; 0x68
 8010e74:	4654      	mov	r4, sl
 8010e76:	2205      	movs	r2, #5
 8010e78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e7c:	4850      	ldr	r0, [pc, #320]	; (8010fc0 <_svfiprintf_r+0x1e8>)
 8010e7e:	f7ef f9df 	bl	8000240 <memchr>
 8010e82:	9a04      	ldr	r2, [sp, #16]
 8010e84:	b9d8      	cbnz	r0, 8010ebe <_svfiprintf_r+0xe6>
 8010e86:	06d0      	lsls	r0, r2, #27
 8010e88:	bf44      	itt	mi
 8010e8a:	2320      	movmi	r3, #32
 8010e8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e90:	0711      	lsls	r1, r2, #28
 8010e92:	bf44      	itt	mi
 8010e94:	232b      	movmi	r3, #43	; 0x2b
 8010e96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8010e9e:	2b2a      	cmp	r3, #42	; 0x2a
 8010ea0:	d015      	beq.n	8010ece <_svfiprintf_r+0xf6>
 8010ea2:	9a07      	ldr	r2, [sp, #28]
 8010ea4:	4654      	mov	r4, sl
 8010ea6:	2000      	movs	r0, #0
 8010ea8:	f04f 0c0a 	mov.w	ip, #10
 8010eac:	4621      	mov	r1, r4
 8010eae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010eb2:	3b30      	subs	r3, #48	; 0x30
 8010eb4:	2b09      	cmp	r3, #9
 8010eb6:	d94d      	bls.n	8010f54 <_svfiprintf_r+0x17c>
 8010eb8:	b1b0      	cbz	r0, 8010ee8 <_svfiprintf_r+0x110>
 8010eba:	9207      	str	r2, [sp, #28]
 8010ebc:	e014      	b.n	8010ee8 <_svfiprintf_r+0x110>
 8010ebe:	eba0 0308 	sub.w	r3, r0, r8
 8010ec2:	fa09 f303 	lsl.w	r3, r9, r3
 8010ec6:	4313      	orrs	r3, r2
 8010ec8:	9304      	str	r3, [sp, #16]
 8010eca:	46a2      	mov	sl, r4
 8010ecc:	e7d2      	b.n	8010e74 <_svfiprintf_r+0x9c>
 8010ece:	9b03      	ldr	r3, [sp, #12]
 8010ed0:	1d19      	adds	r1, r3, #4
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	9103      	str	r1, [sp, #12]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	bfbb      	ittet	lt
 8010eda:	425b      	neglt	r3, r3
 8010edc:	f042 0202 	orrlt.w	r2, r2, #2
 8010ee0:	9307      	strge	r3, [sp, #28]
 8010ee2:	9307      	strlt	r3, [sp, #28]
 8010ee4:	bfb8      	it	lt
 8010ee6:	9204      	strlt	r2, [sp, #16]
 8010ee8:	7823      	ldrb	r3, [r4, #0]
 8010eea:	2b2e      	cmp	r3, #46	; 0x2e
 8010eec:	d10c      	bne.n	8010f08 <_svfiprintf_r+0x130>
 8010eee:	7863      	ldrb	r3, [r4, #1]
 8010ef0:	2b2a      	cmp	r3, #42	; 0x2a
 8010ef2:	d134      	bne.n	8010f5e <_svfiprintf_r+0x186>
 8010ef4:	9b03      	ldr	r3, [sp, #12]
 8010ef6:	1d1a      	adds	r2, r3, #4
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	9203      	str	r2, [sp, #12]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	bfb8      	it	lt
 8010f00:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010f04:	3402      	adds	r4, #2
 8010f06:	9305      	str	r3, [sp, #20]
 8010f08:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010fd0 <_svfiprintf_r+0x1f8>
 8010f0c:	7821      	ldrb	r1, [r4, #0]
 8010f0e:	2203      	movs	r2, #3
 8010f10:	4650      	mov	r0, sl
 8010f12:	f7ef f995 	bl	8000240 <memchr>
 8010f16:	b138      	cbz	r0, 8010f28 <_svfiprintf_r+0x150>
 8010f18:	9b04      	ldr	r3, [sp, #16]
 8010f1a:	eba0 000a 	sub.w	r0, r0, sl
 8010f1e:	2240      	movs	r2, #64	; 0x40
 8010f20:	4082      	lsls	r2, r0
 8010f22:	4313      	orrs	r3, r2
 8010f24:	3401      	adds	r4, #1
 8010f26:	9304      	str	r3, [sp, #16]
 8010f28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f2c:	4825      	ldr	r0, [pc, #148]	; (8010fc4 <_svfiprintf_r+0x1ec>)
 8010f2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010f32:	2206      	movs	r2, #6
 8010f34:	f7ef f984 	bl	8000240 <memchr>
 8010f38:	2800      	cmp	r0, #0
 8010f3a:	d038      	beq.n	8010fae <_svfiprintf_r+0x1d6>
 8010f3c:	4b22      	ldr	r3, [pc, #136]	; (8010fc8 <_svfiprintf_r+0x1f0>)
 8010f3e:	bb1b      	cbnz	r3, 8010f88 <_svfiprintf_r+0x1b0>
 8010f40:	9b03      	ldr	r3, [sp, #12]
 8010f42:	3307      	adds	r3, #7
 8010f44:	f023 0307 	bic.w	r3, r3, #7
 8010f48:	3308      	adds	r3, #8
 8010f4a:	9303      	str	r3, [sp, #12]
 8010f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f4e:	4433      	add	r3, r6
 8010f50:	9309      	str	r3, [sp, #36]	; 0x24
 8010f52:	e768      	b.n	8010e26 <_svfiprintf_r+0x4e>
 8010f54:	fb0c 3202 	mla	r2, ip, r2, r3
 8010f58:	460c      	mov	r4, r1
 8010f5a:	2001      	movs	r0, #1
 8010f5c:	e7a6      	b.n	8010eac <_svfiprintf_r+0xd4>
 8010f5e:	2300      	movs	r3, #0
 8010f60:	3401      	adds	r4, #1
 8010f62:	9305      	str	r3, [sp, #20]
 8010f64:	4619      	mov	r1, r3
 8010f66:	f04f 0c0a 	mov.w	ip, #10
 8010f6a:	4620      	mov	r0, r4
 8010f6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010f70:	3a30      	subs	r2, #48	; 0x30
 8010f72:	2a09      	cmp	r2, #9
 8010f74:	d903      	bls.n	8010f7e <_svfiprintf_r+0x1a6>
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d0c6      	beq.n	8010f08 <_svfiprintf_r+0x130>
 8010f7a:	9105      	str	r1, [sp, #20]
 8010f7c:	e7c4      	b.n	8010f08 <_svfiprintf_r+0x130>
 8010f7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010f82:	4604      	mov	r4, r0
 8010f84:	2301      	movs	r3, #1
 8010f86:	e7f0      	b.n	8010f6a <_svfiprintf_r+0x192>
 8010f88:	ab03      	add	r3, sp, #12
 8010f8a:	9300      	str	r3, [sp, #0]
 8010f8c:	462a      	mov	r2, r5
 8010f8e:	4b0f      	ldr	r3, [pc, #60]	; (8010fcc <_svfiprintf_r+0x1f4>)
 8010f90:	a904      	add	r1, sp, #16
 8010f92:	4638      	mov	r0, r7
 8010f94:	f3af 8000 	nop.w
 8010f98:	1c42      	adds	r2, r0, #1
 8010f9a:	4606      	mov	r6, r0
 8010f9c:	d1d6      	bne.n	8010f4c <_svfiprintf_r+0x174>
 8010f9e:	89ab      	ldrh	r3, [r5, #12]
 8010fa0:	065b      	lsls	r3, r3, #25
 8010fa2:	f53f af2d 	bmi.w	8010e00 <_svfiprintf_r+0x28>
 8010fa6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010fa8:	b01d      	add	sp, #116	; 0x74
 8010faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fae:	ab03      	add	r3, sp, #12
 8010fb0:	9300      	str	r3, [sp, #0]
 8010fb2:	462a      	mov	r2, r5
 8010fb4:	4b05      	ldr	r3, [pc, #20]	; (8010fcc <_svfiprintf_r+0x1f4>)
 8010fb6:	a904      	add	r1, sp, #16
 8010fb8:	4638      	mov	r0, r7
 8010fba:	f000 f9bd 	bl	8011338 <_printf_i>
 8010fbe:	e7eb      	b.n	8010f98 <_svfiprintf_r+0x1c0>
 8010fc0:	0801232c 	.word	0x0801232c
 8010fc4:	08012336 	.word	0x08012336
 8010fc8:	00000000 	.word	0x00000000
 8010fcc:	08010d25 	.word	0x08010d25
 8010fd0:	08012332 	.word	0x08012332

08010fd4 <__sfputc_r>:
 8010fd4:	6893      	ldr	r3, [r2, #8]
 8010fd6:	3b01      	subs	r3, #1
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	b410      	push	{r4}
 8010fdc:	6093      	str	r3, [r2, #8]
 8010fde:	da08      	bge.n	8010ff2 <__sfputc_r+0x1e>
 8010fe0:	6994      	ldr	r4, [r2, #24]
 8010fe2:	42a3      	cmp	r3, r4
 8010fe4:	db01      	blt.n	8010fea <__sfputc_r+0x16>
 8010fe6:	290a      	cmp	r1, #10
 8010fe8:	d103      	bne.n	8010ff2 <__sfputc_r+0x1e>
 8010fea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010fee:	f000 bbe5 	b.w	80117bc <__swbuf_r>
 8010ff2:	6813      	ldr	r3, [r2, #0]
 8010ff4:	1c58      	adds	r0, r3, #1
 8010ff6:	6010      	str	r0, [r2, #0]
 8010ff8:	7019      	strb	r1, [r3, #0]
 8010ffa:	4608      	mov	r0, r1
 8010ffc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011000:	4770      	bx	lr

08011002 <__sfputs_r>:
 8011002:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011004:	4606      	mov	r6, r0
 8011006:	460f      	mov	r7, r1
 8011008:	4614      	mov	r4, r2
 801100a:	18d5      	adds	r5, r2, r3
 801100c:	42ac      	cmp	r4, r5
 801100e:	d101      	bne.n	8011014 <__sfputs_r+0x12>
 8011010:	2000      	movs	r0, #0
 8011012:	e007      	b.n	8011024 <__sfputs_r+0x22>
 8011014:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011018:	463a      	mov	r2, r7
 801101a:	4630      	mov	r0, r6
 801101c:	f7ff ffda 	bl	8010fd4 <__sfputc_r>
 8011020:	1c43      	adds	r3, r0, #1
 8011022:	d1f3      	bne.n	801100c <__sfputs_r+0xa>
 8011024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011028 <_vfiprintf_r>:
 8011028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801102c:	460d      	mov	r5, r1
 801102e:	b09d      	sub	sp, #116	; 0x74
 8011030:	4614      	mov	r4, r2
 8011032:	4698      	mov	r8, r3
 8011034:	4606      	mov	r6, r0
 8011036:	b118      	cbz	r0, 8011040 <_vfiprintf_r+0x18>
 8011038:	6a03      	ldr	r3, [r0, #32]
 801103a:	b90b      	cbnz	r3, 8011040 <_vfiprintf_r+0x18>
 801103c:	f7ff fd2c 	bl	8010a98 <__sinit>
 8011040:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011042:	07d9      	lsls	r1, r3, #31
 8011044:	d405      	bmi.n	8011052 <_vfiprintf_r+0x2a>
 8011046:	89ab      	ldrh	r3, [r5, #12]
 8011048:	059a      	lsls	r2, r3, #22
 801104a:	d402      	bmi.n	8011052 <_vfiprintf_r+0x2a>
 801104c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801104e:	f7ff fe1a 	bl	8010c86 <__retarget_lock_acquire_recursive>
 8011052:	89ab      	ldrh	r3, [r5, #12]
 8011054:	071b      	lsls	r3, r3, #28
 8011056:	d501      	bpl.n	801105c <_vfiprintf_r+0x34>
 8011058:	692b      	ldr	r3, [r5, #16]
 801105a:	b99b      	cbnz	r3, 8011084 <_vfiprintf_r+0x5c>
 801105c:	4629      	mov	r1, r5
 801105e:	4630      	mov	r0, r6
 8011060:	f000 fbea 	bl	8011838 <__swsetup_r>
 8011064:	b170      	cbz	r0, 8011084 <_vfiprintf_r+0x5c>
 8011066:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011068:	07dc      	lsls	r4, r3, #31
 801106a:	d504      	bpl.n	8011076 <_vfiprintf_r+0x4e>
 801106c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011070:	b01d      	add	sp, #116	; 0x74
 8011072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011076:	89ab      	ldrh	r3, [r5, #12]
 8011078:	0598      	lsls	r0, r3, #22
 801107a:	d4f7      	bmi.n	801106c <_vfiprintf_r+0x44>
 801107c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801107e:	f7ff fe03 	bl	8010c88 <__retarget_lock_release_recursive>
 8011082:	e7f3      	b.n	801106c <_vfiprintf_r+0x44>
 8011084:	2300      	movs	r3, #0
 8011086:	9309      	str	r3, [sp, #36]	; 0x24
 8011088:	2320      	movs	r3, #32
 801108a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801108e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011092:	2330      	movs	r3, #48	; 0x30
 8011094:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011248 <_vfiprintf_r+0x220>
 8011098:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801109c:	f04f 0901 	mov.w	r9, #1
 80110a0:	4623      	mov	r3, r4
 80110a2:	469a      	mov	sl, r3
 80110a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80110a8:	b10a      	cbz	r2, 80110ae <_vfiprintf_r+0x86>
 80110aa:	2a25      	cmp	r2, #37	; 0x25
 80110ac:	d1f9      	bne.n	80110a2 <_vfiprintf_r+0x7a>
 80110ae:	ebba 0b04 	subs.w	fp, sl, r4
 80110b2:	d00b      	beq.n	80110cc <_vfiprintf_r+0xa4>
 80110b4:	465b      	mov	r3, fp
 80110b6:	4622      	mov	r2, r4
 80110b8:	4629      	mov	r1, r5
 80110ba:	4630      	mov	r0, r6
 80110bc:	f7ff ffa1 	bl	8011002 <__sfputs_r>
 80110c0:	3001      	adds	r0, #1
 80110c2:	f000 80a9 	beq.w	8011218 <_vfiprintf_r+0x1f0>
 80110c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80110c8:	445a      	add	r2, fp
 80110ca:	9209      	str	r2, [sp, #36]	; 0x24
 80110cc:	f89a 3000 	ldrb.w	r3, [sl]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	f000 80a1 	beq.w	8011218 <_vfiprintf_r+0x1f0>
 80110d6:	2300      	movs	r3, #0
 80110d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80110dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80110e0:	f10a 0a01 	add.w	sl, sl, #1
 80110e4:	9304      	str	r3, [sp, #16]
 80110e6:	9307      	str	r3, [sp, #28]
 80110e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80110ec:	931a      	str	r3, [sp, #104]	; 0x68
 80110ee:	4654      	mov	r4, sl
 80110f0:	2205      	movs	r2, #5
 80110f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110f6:	4854      	ldr	r0, [pc, #336]	; (8011248 <_vfiprintf_r+0x220>)
 80110f8:	f7ef f8a2 	bl	8000240 <memchr>
 80110fc:	9a04      	ldr	r2, [sp, #16]
 80110fe:	b9d8      	cbnz	r0, 8011138 <_vfiprintf_r+0x110>
 8011100:	06d1      	lsls	r1, r2, #27
 8011102:	bf44      	itt	mi
 8011104:	2320      	movmi	r3, #32
 8011106:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801110a:	0713      	lsls	r3, r2, #28
 801110c:	bf44      	itt	mi
 801110e:	232b      	movmi	r3, #43	; 0x2b
 8011110:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011114:	f89a 3000 	ldrb.w	r3, [sl]
 8011118:	2b2a      	cmp	r3, #42	; 0x2a
 801111a:	d015      	beq.n	8011148 <_vfiprintf_r+0x120>
 801111c:	9a07      	ldr	r2, [sp, #28]
 801111e:	4654      	mov	r4, sl
 8011120:	2000      	movs	r0, #0
 8011122:	f04f 0c0a 	mov.w	ip, #10
 8011126:	4621      	mov	r1, r4
 8011128:	f811 3b01 	ldrb.w	r3, [r1], #1
 801112c:	3b30      	subs	r3, #48	; 0x30
 801112e:	2b09      	cmp	r3, #9
 8011130:	d94d      	bls.n	80111ce <_vfiprintf_r+0x1a6>
 8011132:	b1b0      	cbz	r0, 8011162 <_vfiprintf_r+0x13a>
 8011134:	9207      	str	r2, [sp, #28]
 8011136:	e014      	b.n	8011162 <_vfiprintf_r+0x13a>
 8011138:	eba0 0308 	sub.w	r3, r0, r8
 801113c:	fa09 f303 	lsl.w	r3, r9, r3
 8011140:	4313      	orrs	r3, r2
 8011142:	9304      	str	r3, [sp, #16]
 8011144:	46a2      	mov	sl, r4
 8011146:	e7d2      	b.n	80110ee <_vfiprintf_r+0xc6>
 8011148:	9b03      	ldr	r3, [sp, #12]
 801114a:	1d19      	adds	r1, r3, #4
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	9103      	str	r1, [sp, #12]
 8011150:	2b00      	cmp	r3, #0
 8011152:	bfbb      	ittet	lt
 8011154:	425b      	neglt	r3, r3
 8011156:	f042 0202 	orrlt.w	r2, r2, #2
 801115a:	9307      	strge	r3, [sp, #28]
 801115c:	9307      	strlt	r3, [sp, #28]
 801115e:	bfb8      	it	lt
 8011160:	9204      	strlt	r2, [sp, #16]
 8011162:	7823      	ldrb	r3, [r4, #0]
 8011164:	2b2e      	cmp	r3, #46	; 0x2e
 8011166:	d10c      	bne.n	8011182 <_vfiprintf_r+0x15a>
 8011168:	7863      	ldrb	r3, [r4, #1]
 801116a:	2b2a      	cmp	r3, #42	; 0x2a
 801116c:	d134      	bne.n	80111d8 <_vfiprintf_r+0x1b0>
 801116e:	9b03      	ldr	r3, [sp, #12]
 8011170:	1d1a      	adds	r2, r3, #4
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	9203      	str	r2, [sp, #12]
 8011176:	2b00      	cmp	r3, #0
 8011178:	bfb8      	it	lt
 801117a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801117e:	3402      	adds	r4, #2
 8011180:	9305      	str	r3, [sp, #20]
 8011182:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011258 <_vfiprintf_r+0x230>
 8011186:	7821      	ldrb	r1, [r4, #0]
 8011188:	2203      	movs	r2, #3
 801118a:	4650      	mov	r0, sl
 801118c:	f7ef f858 	bl	8000240 <memchr>
 8011190:	b138      	cbz	r0, 80111a2 <_vfiprintf_r+0x17a>
 8011192:	9b04      	ldr	r3, [sp, #16]
 8011194:	eba0 000a 	sub.w	r0, r0, sl
 8011198:	2240      	movs	r2, #64	; 0x40
 801119a:	4082      	lsls	r2, r0
 801119c:	4313      	orrs	r3, r2
 801119e:	3401      	adds	r4, #1
 80111a0:	9304      	str	r3, [sp, #16]
 80111a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111a6:	4829      	ldr	r0, [pc, #164]	; (801124c <_vfiprintf_r+0x224>)
 80111a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80111ac:	2206      	movs	r2, #6
 80111ae:	f7ef f847 	bl	8000240 <memchr>
 80111b2:	2800      	cmp	r0, #0
 80111b4:	d03f      	beq.n	8011236 <_vfiprintf_r+0x20e>
 80111b6:	4b26      	ldr	r3, [pc, #152]	; (8011250 <_vfiprintf_r+0x228>)
 80111b8:	bb1b      	cbnz	r3, 8011202 <_vfiprintf_r+0x1da>
 80111ba:	9b03      	ldr	r3, [sp, #12]
 80111bc:	3307      	adds	r3, #7
 80111be:	f023 0307 	bic.w	r3, r3, #7
 80111c2:	3308      	adds	r3, #8
 80111c4:	9303      	str	r3, [sp, #12]
 80111c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111c8:	443b      	add	r3, r7
 80111ca:	9309      	str	r3, [sp, #36]	; 0x24
 80111cc:	e768      	b.n	80110a0 <_vfiprintf_r+0x78>
 80111ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80111d2:	460c      	mov	r4, r1
 80111d4:	2001      	movs	r0, #1
 80111d6:	e7a6      	b.n	8011126 <_vfiprintf_r+0xfe>
 80111d8:	2300      	movs	r3, #0
 80111da:	3401      	adds	r4, #1
 80111dc:	9305      	str	r3, [sp, #20]
 80111de:	4619      	mov	r1, r3
 80111e0:	f04f 0c0a 	mov.w	ip, #10
 80111e4:	4620      	mov	r0, r4
 80111e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80111ea:	3a30      	subs	r2, #48	; 0x30
 80111ec:	2a09      	cmp	r2, #9
 80111ee:	d903      	bls.n	80111f8 <_vfiprintf_r+0x1d0>
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d0c6      	beq.n	8011182 <_vfiprintf_r+0x15a>
 80111f4:	9105      	str	r1, [sp, #20]
 80111f6:	e7c4      	b.n	8011182 <_vfiprintf_r+0x15a>
 80111f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80111fc:	4604      	mov	r4, r0
 80111fe:	2301      	movs	r3, #1
 8011200:	e7f0      	b.n	80111e4 <_vfiprintf_r+0x1bc>
 8011202:	ab03      	add	r3, sp, #12
 8011204:	9300      	str	r3, [sp, #0]
 8011206:	462a      	mov	r2, r5
 8011208:	4b12      	ldr	r3, [pc, #72]	; (8011254 <_vfiprintf_r+0x22c>)
 801120a:	a904      	add	r1, sp, #16
 801120c:	4630      	mov	r0, r6
 801120e:	f3af 8000 	nop.w
 8011212:	4607      	mov	r7, r0
 8011214:	1c78      	adds	r0, r7, #1
 8011216:	d1d6      	bne.n	80111c6 <_vfiprintf_r+0x19e>
 8011218:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801121a:	07d9      	lsls	r1, r3, #31
 801121c:	d405      	bmi.n	801122a <_vfiprintf_r+0x202>
 801121e:	89ab      	ldrh	r3, [r5, #12]
 8011220:	059a      	lsls	r2, r3, #22
 8011222:	d402      	bmi.n	801122a <_vfiprintf_r+0x202>
 8011224:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011226:	f7ff fd2f 	bl	8010c88 <__retarget_lock_release_recursive>
 801122a:	89ab      	ldrh	r3, [r5, #12]
 801122c:	065b      	lsls	r3, r3, #25
 801122e:	f53f af1d 	bmi.w	801106c <_vfiprintf_r+0x44>
 8011232:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011234:	e71c      	b.n	8011070 <_vfiprintf_r+0x48>
 8011236:	ab03      	add	r3, sp, #12
 8011238:	9300      	str	r3, [sp, #0]
 801123a:	462a      	mov	r2, r5
 801123c:	4b05      	ldr	r3, [pc, #20]	; (8011254 <_vfiprintf_r+0x22c>)
 801123e:	a904      	add	r1, sp, #16
 8011240:	4630      	mov	r0, r6
 8011242:	f000 f879 	bl	8011338 <_printf_i>
 8011246:	e7e4      	b.n	8011212 <_vfiprintf_r+0x1ea>
 8011248:	0801232c 	.word	0x0801232c
 801124c:	08012336 	.word	0x08012336
 8011250:	00000000 	.word	0x00000000
 8011254:	08011003 	.word	0x08011003
 8011258:	08012332 	.word	0x08012332

0801125c <_printf_common>:
 801125c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011260:	4616      	mov	r6, r2
 8011262:	4699      	mov	r9, r3
 8011264:	688a      	ldr	r2, [r1, #8]
 8011266:	690b      	ldr	r3, [r1, #16]
 8011268:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801126c:	4293      	cmp	r3, r2
 801126e:	bfb8      	it	lt
 8011270:	4613      	movlt	r3, r2
 8011272:	6033      	str	r3, [r6, #0]
 8011274:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011278:	4607      	mov	r7, r0
 801127a:	460c      	mov	r4, r1
 801127c:	b10a      	cbz	r2, 8011282 <_printf_common+0x26>
 801127e:	3301      	adds	r3, #1
 8011280:	6033      	str	r3, [r6, #0]
 8011282:	6823      	ldr	r3, [r4, #0]
 8011284:	0699      	lsls	r1, r3, #26
 8011286:	bf42      	ittt	mi
 8011288:	6833      	ldrmi	r3, [r6, #0]
 801128a:	3302      	addmi	r3, #2
 801128c:	6033      	strmi	r3, [r6, #0]
 801128e:	6825      	ldr	r5, [r4, #0]
 8011290:	f015 0506 	ands.w	r5, r5, #6
 8011294:	d106      	bne.n	80112a4 <_printf_common+0x48>
 8011296:	f104 0a19 	add.w	sl, r4, #25
 801129a:	68e3      	ldr	r3, [r4, #12]
 801129c:	6832      	ldr	r2, [r6, #0]
 801129e:	1a9b      	subs	r3, r3, r2
 80112a0:	42ab      	cmp	r3, r5
 80112a2:	dc26      	bgt.n	80112f2 <_printf_common+0x96>
 80112a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80112a8:	1e13      	subs	r3, r2, #0
 80112aa:	6822      	ldr	r2, [r4, #0]
 80112ac:	bf18      	it	ne
 80112ae:	2301      	movne	r3, #1
 80112b0:	0692      	lsls	r2, r2, #26
 80112b2:	d42b      	bmi.n	801130c <_printf_common+0xb0>
 80112b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80112b8:	4649      	mov	r1, r9
 80112ba:	4638      	mov	r0, r7
 80112bc:	47c0      	blx	r8
 80112be:	3001      	adds	r0, #1
 80112c0:	d01e      	beq.n	8011300 <_printf_common+0xa4>
 80112c2:	6823      	ldr	r3, [r4, #0]
 80112c4:	6922      	ldr	r2, [r4, #16]
 80112c6:	f003 0306 	and.w	r3, r3, #6
 80112ca:	2b04      	cmp	r3, #4
 80112cc:	bf02      	ittt	eq
 80112ce:	68e5      	ldreq	r5, [r4, #12]
 80112d0:	6833      	ldreq	r3, [r6, #0]
 80112d2:	1aed      	subeq	r5, r5, r3
 80112d4:	68a3      	ldr	r3, [r4, #8]
 80112d6:	bf0c      	ite	eq
 80112d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80112dc:	2500      	movne	r5, #0
 80112de:	4293      	cmp	r3, r2
 80112e0:	bfc4      	itt	gt
 80112e2:	1a9b      	subgt	r3, r3, r2
 80112e4:	18ed      	addgt	r5, r5, r3
 80112e6:	2600      	movs	r6, #0
 80112e8:	341a      	adds	r4, #26
 80112ea:	42b5      	cmp	r5, r6
 80112ec:	d11a      	bne.n	8011324 <_printf_common+0xc8>
 80112ee:	2000      	movs	r0, #0
 80112f0:	e008      	b.n	8011304 <_printf_common+0xa8>
 80112f2:	2301      	movs	r3, #1
 80112f4:	4652      	mov	r2, sl
 80112f6:	4649      	mov	r1, r9
 80112f8:	4638      	mov	r0, r7
 80112fa:	47c0      	blx	r8
 80112fc:	3001      	adds	r0, #1
 80112fe:	d103      	bne.n	8011308 <_printf_common+0xac>
 8011300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011308:	3501      	adds	r5, #1
 801130a:	e7c6      	b.n	801129a <_printf_common+0x3e>
 801130c:	18e1      	adds	r1, r4, r3
 801130e:	1c5a      	adds	r2, r3, #1
 8011310:	2030      	movs	r0, #48	; 0x30
 8011312:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011316:	4422      	add	r2, r4
 8011318:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801131c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011320:	3302      	adds	r3, #2
 8011322:	e7c7      	b.n	80112b4 <_printf_common+0x58>
 8011324:	2301      	movs	r3, #1
 8011326:	4622      	mov	r2, r4
 8011328:	4649      	mov	r1, r9
 801132a:	4638      	mov	r0, r7
 801132c:	47c0      	blx	r8
 801132e:	3001      	adds	r0, #1
 8011330:	d0e6      	beq.n	8011300 <_printf_common+0xa4>
 8011332:	3601      	adds	r6, #1
 8011334:	e7d9      	b.n	80112ea <_printf_common+0x8e>
	...

08011338 <_printf_i>:
 8011338:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801133c:	7e0f      	ldrb	r7, [r1, #24]
 801133e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011340:	2f78      	cmp	r7, #120	; 0x78
 8011342:	4691      	mov	r9, r2
 8011344:	4680      	mov	r8, r0
 8011346:	460c      	mov	r4, r1
 8011348:	469a      	mov	sl, r3
 801134a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801134e:	d807      	bhi.n	8011360 <_printf_i+0x28>
 8011350:	2f62      	cmp	r7, #98	; 0x62
 8011352:	d80a      	bhi.n	801136a <_printf_i+0x32>
 8011354:	2f00      	cmp	r7, #0
 8011356:	f000 80d4 	beq.w	8011502 <_printf_i+0x1ca>
 801135a:	2f58      	cmp	r7, #88	; 0x58
 801135c:	f000 80c0 	beq.w	80114e0 <_printf_i+0x1a8>
 8011360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011364:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011368:	e03a      	b.n	80113e0 <_printf_i+0xa8>
 801136a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801136e:	2b15      	cmp	r3, #21
 8011370:	d8f6      	bhi.n	8011360 <_printf_i+0x28>
 8011372:	a101      	add	r1, pc, #4	; (adr r1, 8011378 <_printf_i+0x40>)
 8011374:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011378:	080113d1 	.word	0x080113d1
 801137c:	080113e5 	.word	0x080113e5
 8011380:	08011361 	.word	0x08011361
 8011384:	08011361 	.word	0x08011361
 8011388:	08011361 	.word	0x08011361
 801138c:	08011361 	.word	0x08011361
 8011390:	080113e5 	.word	0x080113e5
 8011394:	08011361 	.word	0x08011361
 8011398:	08011361 	.word	0x08011361
 801139c:	08011361 	.word	0x08011361
 80113a0:	08011361 	.word	0x08011361
 80113a4:	080114e9 	.word	0x080114e9
 80113a8:	08011411 	.word	0x08011411
 80113ac:	080114a3 	.word	0x080114a3
 80113b0:	08011361 	.word	0x08011361
 80113b4:	08011361 	.word	0x08011361
 80113b8:	0801150b 	.word	0x0801150b
 80113bc:	08011361 	.word	0x08011361
 80113c0:	08011411 	.word	0x08011411
 80113c4:	08011361 	.word	0x08011361
 80113c8:	08011361 	.word	0x08011361
 80113cc:	080114ab 	.word	0x080114ab
 80113d0:	682b      	ldr	r3, [r5, #0]
 80113d2:	1d1a      	adds	r2, r3, #4
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	602a      	str	r2, [r5, #0]
 80113d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80113dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80113e0:	2301      	movs	r3, #1
 80113e2:	e09f      	b.n	8011524 <_printf_i+0x1ec>
 80113e4:	6820      	ldr	r0, [r4, #0]
 80113e6:	682b      	ldr	r3, [r5, #0]
 80113e8:	0607      	lsls	r7, r0, #24
 80113ea:	f103 0104 	add.w	r1, r3, #4
 80113ee:	6029      	str	r1, [r5, #0]
 80113f0:	d501      	bpl.n	80113f6 <_printf_i+0xbe>
 80113f2:	681e      	ldr	r6, [r3, #0]
 80113f4:	e003      	b.n	80113fe <_printf_i+0xc6>
 80113f6:	0646      	lsls	r6, r0, #25
 80113f8:	d5fb      	bpl.n	80113f2 <_printf_i+0xba>
 80113fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80113fe:	2e00      	cmp	r6, #0
 8011400:	da03      	bge.n	801140a <_printf_i+0xd2>
 8011402:	232d      	movs	r3, #45	; 0x2d
 8011404:	4276      	negs	r6, r6
 8011406:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801140a:	485a      	ldr	r0, [pc, #360]	; (8011574 <_printf_i+0x23c>)
 801140c:	230a      	movs	r3, #10
 801140e:	e012      	b.n	8011436 <_printf_i+0xfe>
 8011410:	682b      	ldr	r3, [r5, #0]
 8011412:	6820      	ldr	r0, [r4, #0]
 8011414:	1d19      	adds	r1, r3, #4
 8011416:	6029      	str	r1, [r5, #0]
 8011418:	0605      	lsls	r5, r0, #24
 801141a:	d501      	bpl.n	8011420 <_printf_i+0xe8>
 801141c:	681e      	ldr	r6, [r3, #0]
 801141e:	e002      	b.n	8011426 <_printf_i+0xee>
 8011420:	0641      	lsls	r1, r0, #25
 8011422:	d5fb      	bpl.n	801141c <_printf_i+0xe4>
 8011424:	881e      	ldrh	r6, [r3, #0]
 8011426:	4853      	ldr	r0, [pc, #332]	; (8011574 <_printf_i+0x23c>)
 8011428:	2f6f      	cmp	r7, #111	; 0x6f
 801142a:	bf0c      	ite	eq
 801142c:	2308      	moveq	r3, #8
 801142e:	230a      	movne	r3, #10
 8011430:	2100      	movs	r1, #0
 8011432:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011436:	6865      	ldr	r5, [r4, #4]
 8011438:	60a5      	str	r5, [r4, #8]
 801143a:	2d00      	cmp	r5, #0
 801143c:	bfa2      	ittt	ge
 801143e:	6821      	ldrge	r1, [r4, #0]
 8011440:	f021 0104 	bicge.w	r1, r1, #4
 8011444:	6021      	strge	r1, [r4, #0]
 8011446:	b90e      	cbnz	r6, 801144c <_printf_i+0x114>
 8011448:	2d00      	cmp	r5, #0
 801144a:	d04b      	beq.n	80114e4 <_printf_i+0x1ac>
 801144c:	4615      	mov	r5, r2
 801144e:	fbb6 f1f3 	udiv	r1, r6, r3
 8011452:	fb03 6711 	mls	r7, r3, r1, r6
 8011456:	5dc7      	ldrb	r7, [r0, r7]
 8011458:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801145c:	4637      	mov	r7, r6
 801145e:	42bb      	cmp	r3, r7
 8011460:	460e      	mov	r6, r1
 8011462:	d9f4      	bls.n	801144e <_printf_i+0x116>
 8011464:	2b08      	cmp	r3, #8
 8011466:	d10b      	bne.n	8011480 <_printf_i+0x148>
 8011468:	6823      	ldr	r3, [r4, #0]
 801146a:	07de      	lsls	r6, r3, #31
 801146c:	d508      	bpl.n	8011480 <_printf_i+0x148>
 801146e:	6923      	ldr	r3, [r4, #16]
 8011470:	6861      	ldr	r1, [r4, #4]
 8011472:	4299      	cmp	r1, r3
 8011474:	bfde      	ittt	le
 8011476:	2330      	movle	r3, #48	; 0x30
 8011478:	f805 3c01 	strble.w	r3, [r5, #-1]
 801147c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011480:	1b52      	subs	r2, r2, r5
 8011482:	6122      	str	r2, [r4, #16]
 8011484:	f8cd a000 	str.w	sl, [sp]
 8011488:	464b      	mov	r3, r9
 801148a:	aa03      	add	r2, sp, #12
 801148c:	4621      	mov	r1, r4
 801148e:	4640      	mov	r0, r8
 8011490:	f7ff fee4 	bl	801125c <_printf_common>
 8011494:	3001      	adds	r0, #1
 8011496:	d14a      	bne.n	801152e <_printf_i+0x1f6>
 8011498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801149c:	b004      	add	sp, #16
 801149e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114a2:	6823      	ldr	r3, [r4, #0]
 80114a4:	f043 0320 	orr.w	r3, r3, #32
 80114a8:	6023      	str	r3, [r4, #0]
 80114aa:	4833      	ldr	r0, [pc, #204]	; (8011578 <_printf_i+0x240>)
 80114ac:	2778      	movs	r7, #120	; 0x78
 80114ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80114b2:	6823      	ldr	r3, [r4, #0]
 80114b4:	6829      	ldr	r1, [r5, #0]
 80114b6:	061f      	lsls	r7, r3, #24
 80114b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80114bc:	d402      	bmi.n	80114c4 <_printf_i+0x18c>
 80114be:	065f      	lsls	r7, r3, #25
 80114c0:	bf48      	it	mi
 80114c2:	b2b6      	uxthmi	r6, r6
 80114c4:	07df      	lsls	r7, r3, #31
 80114c6:	bf48      	it	mi
 80114c8:	f043 0320 	orrmi.w	r3, r3, #32
 80114cc:	6029      	str	r1, [r5, #0]
 80114ce:	bf48      	it	mi
 80114d0:	6023      	strmi	r3, [r4, #0]
 80114d2:	b91e      	cbnz	r6, 80114dc <_printf_i+0x1a4>
 80114d4:	6823      	ldr	r3, [r4, #0]
 80114d6:	f023 0320 	bic.w	r3, r3, #32
 80114da:	6023      	str	r3, [r4, #0]
 80114dc:	2310      	movs	r3, #16
 80114de:	e7a7      	b.n	8011430 <_printf_i+0xf8>
 80114e0:	4824      	ldr	r0, [pc, #144]	; (8011574 <_printf_i+0x23c>)
 80114e2:	e7e4      	b.n	80114ae <_printf_i+0x176>
 80114e4:	4615      	mov	r5, r2
 80114e6:	e7bd      	b.n	8011464 <_printf_i+0x12c>
 80114e8:	682b      	ldr	r3, [r5, #0]
 80114ea:	6826      	ldr	r6, [r4, #0]
 80114ec:	6961      	ldr	r1, [r4, #20]
 80114ee:	1d18      	adds	r0, r3, #4
 80114f0:	6028      	str	r0, [r5, #0]
 80114f2:	0635      	lsls	r5, r6, #24
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	d501      	bpl.n	80114fc <_printf_i+0x1c4>
 80114f8:	6019      	str	r1, [r3, #0]
 80114fa:	e002      	b.n	8011502 <_printf_i+0x1ca>
 80114fc:	0670      	lsls	r0, r6, #25
 80114fe:	d5fb      	bpl.n	80114f8 <_printf_i+0x1c0>
 8011500:	8019      	strh	r1, [r3, #0]
 8011502:	2300      	movs	r3, #0
 8011504:	6123      	str	r3, [r4, #16]
 8011506:	4615      	mov	r5, r2
 8011508:	e7bc      	b.n	8011484 <_printf_i+0x14c>
 801150a:	682b      	ldr	r3, [r5, #0]
 801150c:	1d1a      	adds	r2, r3, #4
 801150e:	602a      	str	r2, [r5, #0]
 8011510:	681d      	ldr	r5, [r3, #0]
 8011512:	6862      	ldr	r2, [r4, #4]
 8011514:	2100      	movs	r1, #0
 8011516:	4628      	mov	r0, r5
 8011518:	f7ee fe92 	bl	8000240 <memchr>
 801151c:	b108      	cbz	r0, 8011522 <_printf_i+0x1ea>
 801151e:	1b40      	subs	r0, r0, r5
 8011520:	6060      	str	r0, [r4, #4]
 8011522:	6863      	ldr	r3, [r4, #4]
 8011524:	6123      	str	r3, [r4, #16]
 8011526:	2300      	movs	r3, #0
 8011528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801152c:	e7aa      	b.n	8011484 <_printf_i+0x14c>
 801152e:	6923      	ldr	r3, [r4, #16]
 8011530:	462a      	mov	r2, r5
 8011532:	4649      	mov	r1, r9
 8011534:	4640      	mov	r0, r8
 8011536:	47d0      	blx	sl
 8011538:	3001      	adds	r0, #1
 801153a:	d0ad      	beq.n	8011498 <_printf_i+0x160>
 801153c:	6823      	ldr	r3, [r4, #0]
 801153e:	079b      	lsls	r3, r3, #30
 8011540:	d413      	bmi.n	801156a <_printf_i+0x232>
 8011542:	68e0      	ldr	r0, [r4, #12]
 8011544:	9b03      	ldr	r3, [sp, #12]
 8011546:	4298      	cmp	r0, r3
 8011548:	bfb8      	it	lt
 801154a:	4618      	movlt	r0, r3
 801154c:	e7a6      	b.n	801149c <_printf_i+0x164>
 801154e:	2301      	movs	r3, #1
 8011550:	4632      	mov	r2, r6
 8011552:	4649      	mov	r1, r9
 8011554:	4640      	mov	r0, r8
 8011556:	47d0      	blx	sl
 8011558:	3001      	adds	r0, #1
 801155a:	d09d      	beq.n	8011498 <_printf_i+0x160>
 801155c:	3501      	adds	r5, #1
 801155e:	68e3      	ldr	r3, [r4, #12]
 8011560:	9903      	ldr	r1, [sp, #12]
 8011562:	1a5b      	subs	r3, r3, r1
 8011564:	42ab      	cmp	r3, r5
 8011566:	dcf2      	bgt.n	801154e <_printf_i+0x216>
 8011568:	e7eb      	b.n	8011542 <_printf_i+0x20a>
 801156a:	2500      	movs	r5, #0
 801156c:	f104 0619 	add.w	r6, r4, #25
 8011570:	e7f5      	b.n	801155e <_printf_i+0x226>
 8011572:	bf00      	nop
 8011574:	0801233d 	.word	0x0801233d
 8011578:	0801234e 	.word	0x0801234e

0801157c <__sflush_r>:
 801157c:	898a      	ldrh	r2, [r1, #12]
 801157e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011582:	4605      	mov	r5, r0
 8011584:	0710      	lsls	r0, r2, #28
 8011586:	460c      	mov	r4, r1
 8011588:	d458      	bmi.n	801163c <__sflush_r+0xc0>
 801158a:	684b      	ldr	r3, [r1, #4]
 801158c:	2b00      	cmp	r3, #0
 801158e:	dc05      	bgt.n	801159c <__sflush_r+0x20>
 8011590:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011592:	2b00      	cmp	r3, #0
 8011594:	dc02      	bgt.n	801159c <__sflush_r+0x20>
 8011596:	2000      	movs	r0, #0
 8011598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801159c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801159e:	2e00      	cmp	r6, #0
 80115a0:	d0f9      	beq.n	8011596 <__sflush_r+0x1a>
 80115a2:	2300      	movs	r3, #0
 80115a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80115a8:	682f      	ldr	r7, [r5, #0]
 80115aa:	6a21      	ldr	r1, [r4, #32]
 80115ac:	602b      	str	r3, [r5, #0]
 80115ae:	d032      	beq.n	8011616 <__sflush_r+0x9a>
 80115b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80115b2:	89a3      	ldrh	r3, [r4, #12]
 80115b4:	075a      	lsls	r2, r3, #29
 80115b6:	d505      	bpl.n	80115c4 <__sflush_r+0x48>
 80115b8:	6863      	ldr	r3, [r4, #4]
 80115ba:	1ac0      	subs	r0, r0, r3
 80115bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80115be:	b10b      	cbz	r3, 80115c4 <__sflush_r+0x48>
 80115c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80115c2:	1ac0      	subs	r0, r0, r3
 80115c4:	2300      	movs	r3, #0
 80115c6:	4602      	mov	r2, r0
 80115c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80115ca:	6a21      	ldr	r1, [r4, #32]
 80115cc:	4628      	mov	r0, r5
 80115ce:	47b0      	blx	r6
 80115d0:	1c43      	adds	r3, r0, #1
 80115d2:	89a3      	ldrh	r3, [r4, #12]
 80115d4:	d106      	bne.n	80115e4 <__sflush_r+0x68>
 80115d6:	6829      	ldr	r1, [r5, #0]
 80115d8:	291d      	cmp	r1, #29
 80115da:	d82b      	bhi.n	8011634 <__sflush_r+0xb8>
 80115dc:	4a29      	ldr	r2, [pc, #164]	; (8011684 <__sflush_r+0x108>)
 80115de:	410a      	asrs	r2, r1
 80115e0:	07d6      	lsls	r6, r2, #31
 80115e2:	d427      	bmi.n	8011634 <__sflush_r+0xb8>
 80115e4:	2200      	movs	r2, #0
 80115e6:	6062      	str	r2, [r4, #4]
 80115e8:	04d9      	lsls	r1, r3, #19
 80115ea:	6922      	ldr	r2, [r4, #16]
 80115ec:	6022      	str	r2, [r4, #0]
 80115ee:	d504      	bpl.n	80115fa <__sflush_r+0x7e>
 80115f0:	1c42      	adds	r2, r0, #1
 80115f2:	d101      	bne.n	80115f8 <__sflush_r+0x7c>
 80115f4:	682b      	ldr	r3, [r5, #0]
 80115f6:	b903      	cbnz	r3, 80115fa <__sflush_r+0x7e>
 80115f8:	6560      	str	r0, [r4, #84]	; 0x54
 80115fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80115fc:	602f      	str	r7, [r5, #0]
 80115fe:	2900      	cmp	r1, #0
 8011600:	d0c9      	beq.n	8011596 <__sflush_r+0x1a>
 8011602:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011606:	4299      	cmp	r1, r3
 8011608:	d002      	beq.n	8011610 <__sflush_r+0x94>
 801160a:	4628      	mov	r0, r5
 801160c:	f7ff fb3e 	bl	8010c8c <_free_r>
 8011610:	2000      	movs	r0, #0
 8011612:	6360      	str	r0, [r4, #52]	; 0x34
 8011614:	e7c0      	b.n	8011598 <__sflush_r+0x1c>
 8011616:	2301      	movs	r3, #1
 8011618:	4628      	mov	r0, r5
 801161a:	47b0      	blx	r6
 801161c:	1c41      	adds	r1, r0, #1
 801161e:	d1c8      	bne.n	80115b2 <__sflush_r+0x36>
 8011620:	682b      	ldr	r3, [r5, #0]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d0c5      	beq.n	80115b2 <__sflush_r+0x36>
 8011626:	2b1d      	cmp	r3, #29
 8011628:	d001      	beq.n	801162e <__sflush_r+0xb2>
 801162a:	2b16      	cmp	r3, #22
 801162c:	d101      	bne.n	8011632 <__sflush_r+0xb6>
 801162e:	602f      	str	r7, [r5, #0]
 8011630:	e7b1      	b.n	8011596 <__sflush_r+0x1a>
 8011632:	89a3      	ldrh	r3, [r4, #12]
 8011634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011638:	81a3      	strh	r3, [r4, #12]
 801163a:	e7ad      	b.n	8011598 <__sflush_r+0x1c>
 801163c:	690f      	ldr	r7, [r1, #16]
 801163e:	2f00      	cmp	r7, #0
 8011640:	d0a9      	beq.n	8011596 <__sflush_r+0x1a>
 8011642:	0793      	lsls	r3, r2, #30
 8011644:	680e      	ldr	r6, [r1, #0]
 8011646:	bf08      	it	eq
 8011648:	694b      	ldreq	r3, [r1, #20]
 801164a:	600f      	str	r7, [r1, #0]
 801164c:	bf18      	it	ne
 801164e:	2300      	movne	r3, #0
 8011650:	eba6 0807 	sub.w	r8, r6, r7
 8011654:	608b      	str	r3, [r1, #8]
 8011656:	f1b8 0f00 	cmp.w	r8, #0
 801165a:	dd9c      	ble.n	8011596 <__sflush_r+0x1a>
 801165c:	6a21      	ldr	r1, [r4, #32]
 801165e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011660:	4643      	mov	r3, r8
 8011662:	463a      	mov	r2, r7
 8011664:	4628      	mov	r0, r5
 8011666:	47b0      	blx	r6
 8011668:	2800      	cmp	r0, #0
 801166a:	dc06      	bgt.n	801167a <__sflush_r+0xfe>
 801166c:	89a3      	ldrh	r3, [r4, #12]
 801166e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011672:	81a3      	strh	r3, [r4, #12]
 8011674:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011678:	e78e      	b.n	8011598 <__sflush_r+0x1c>
 801167a:	4407      	add	r7, r0
 801167c:	eba8 0800 	sub.w	r8, r8, r0
 8011680:	e7e9      	b.n	8011656 <__sflush_r+0xda>
 8011682:	bf00      	nop
 8011684:	dfbffffe 	.word	0xdfbffffe

08011688 <_fflush_r>:
 8011688:	b538      	push	{r3, r4, r5, lr}
 801168a:	690b      	ldr	r3, [r1, #16]
 801168c:	4605      	mov	r5, r0
 801168e:	460c      	mov	r4, r1
 8011690:	b913      	cbnz	r3, 8011698 <_fflush_r+0x10>
 8011692:	2500      	movs	r5, #0
 8011694:	4628      	mov	r0, r5
 8011696:	bd38      	pop	{r3, r4, r5, pc}
 8011698:	b118      	cbz	r0, 80116a2 <_fflush_r+0x1a>
 801169a:	6a03      	ldr	r3, [r0, #32]
 801169c:	b90b      	cbnz	r3, 80116a2 <_fflush_r+0x1a>
 801169e:	f7ff f9fb 	bl	8010a98 <__sinit>
 80116a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d0f3      	beq.n	8011692 <_fflush_r+0xa>
 80116aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80116ac:	07d0      	lsls	r0, r2, #31
 80116ae:	d404      	bmi.n	80116ba <_fflush_r+0x32>
 80116b0:	0599      	lsls	r1, r3, #22
 80116b2:	d402      	bmi.n	80116ba <_fflush_r+0x32>
 80116b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80116b6:	f7ff fae6 	bl	8010c86 <__retarget_lock_acquire_recursive>
 80116ba:	4628      	mov	r0, r5
 80116bc:	4621      	mov	r1, r4
 80116be:	f7ff ff5d 	bl	801157c <__sflush_r>
 80116c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80116c4:	07da      	lsls	r2, r3, #31
 80116c6:	4605      	mov	r5, r0
 80116c8:	d4e4      	bmi.n	8011694 <_fflush_r+0xc>
 80116ca:	89a3      	ldrh	r3, [r4, #12]
 80116cc:	059b      	lsls	r3, r3, #22
 80116ce:	d4e1      	bmi.n	8011694 <_fflush_r+0xc>
 80116d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80116d2:	f7ff fad9 	bl	8010c88 <__retarget_lock_release_recursive>
 80116d6:	e7dd      	b.n	8011694 <_fflush_r+0xc>

080116d8 <__sread>:
 80116d8:	b510      	push	{r4, lr}
 80116da:	460c      	mov	r4, r1
 80116dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116e0:	f000 f9c2 	bl	8011a68 <_read_r>
 80116e4:	2800      	cmp	r0, #0
 80116e6:	bfab      	itete	ge
 80116e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80116ea:	89a3      	ldrhlt	r3, [r4, #12]
 80116ec:	181b      	addge	r3, r3, r0
 80116ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80116f2:	bfac      	ite	ge
 80116f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80116f6:	81a3      	strhlt	r3, [r4, #12]
 80116f8:	bd10      	pop	{r4, pc}

080116fa <__swrite>:
 80116fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116fe:	461f      	mov	r7, r3
 8011700:	898b      	ldrh	r3, [r1, #12]
 8011702:	05db      	lsls	r3, r3, #23
 8011704:	4605      	mov	r5, r0
 8011706:	460c      	mov	r4, r1
 8011708:	4616      	mov	r6, r2
 801170a:	d505      	bpl.n	8011718 <__swrite+0x1e>
 801170c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011710:	2302      	movs	r3, #2
 8011712:	2200      	movs	r2, #0
 8011714:	f000 f996 	bl	8011a44 <_lseek_r>
 8011718:	89a3      	ldrh	r3, [r4, #12]
 801171a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801171e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011722:	81a3      	strh	r3, [r4, #12]
 8011724:	4632      	mov	r2, r6
 8011726:	463b      	mov	r3, r7
 8011728:	4628      	mov	r0, r5
 801172a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801172e:	f000 b9ad 	b.w	8011a8c <_write_r>

08011732 <__sseek>:
 8011732:	b510      	push	{r4, lr}
 8011734:	460c      	mov	r4, r1
 8011736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801173a:	f000 f983 	bl	8011a44 <_lseek_r>
 801173e:	1c43      	adds	r3, r0, #1
 8011740:	89a3      	ldrh	r3, [r4, #12]
 8011742:	bf15      	itete	ne
 8011744:	6560      	strne	r0, [r4, #84]	; 0x54
 8011746:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801174a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801174e:	81a3      	strheq	r3, [r4, #12]
 8011750:	bf18      	it	ne
 8011752:	81a3      	strhne	r3, [r4, #12]
 8011754:	bd10      	pop	{r4, pc}

08011756 <__sclose>:
 8011756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801175a:	f000 b941 	b.w	80119e0 <_close_r>

0801175e <_realloc_r>:
 801175e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011762:	4680      	mov	r8, r0
 8011764:	4614      	mov	r4, r2
 8011766:	460e      	mov	r6, r1
 8011768:	b921      	cbnz	r1, 8011774 <_realloc_r+0x16>
 801176a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801176e:	4611      	mov	r1, r2
 8011770:	f7ff b846 	b.w	8010800 <_malloc_r>
 8011774:	b92a      	cbnz	r2, 8011782 <_realloc_r+0x24>
 8011776:	f7ff fa89 	bl	8010c8c <_free_r>
 801177a:	4625      	mov	r5, r4
 801177c:	4628      	mov	r0, r5
 801177e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011782:	f000 f9a3 	bl	8011acc <_malloc_usable_size_r>
 8011786:	4284      	cmp	r4, r0
 8011788:	4607      	mov	r7, r0
 801178a:	d802      	bhi.n	8011792 <_realloc_r+0x34>
 801178c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011790:	d812      	bhi.n	80117b8 <_realloc_r+0x5a>
 8011792:	4621      	mov	r1, r4
 8011794:	4640      	mov	r0, r8
 8011796:	f7ff f833 	bl	8010800 <_malloc_r>
 801179a:	4605      	mov	r5, r0
 801179c:	2800      	cmp	r0, #0
 801179e:	d0ed      	beq.n	801177c <_realloc_r+0x1e>
 80117a0:	42bc      	cmp	r4, r7
 80117a2:	4622      	mov	r2, r4
 80117a4:	4631      	mov	r1, r6
 80117a6:	bf28      	it	cs
 80117a8:	463a      	movcs	r2, r7
 80117aa:	f000 f981 	bl	8011ab0 <memcpy>
 80117ae:	4631      	mov	r1, r6
 80117b0:	4640      	mov	r0, r8
 80117b2:	f7ff fa6b 	bl	8010c8c <_free_r>
 80117b6:	e7e1      	b.n	801177c <_realloc_r+0x1e>
 80117b8:	4635      	mov	r5, r6
 80117ba:	e7df      	b.n	801177c <_realloc_r+0x1e>

080117bc <__swbuf_r>:
 80117bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117be:	460e      	mov	r6, r1
 80117c0:	4614      	mov	r4, r2
 80117c2:	4605      	mov	r5, r0
 80117c4:	b118      	cbz	r0, 80117ce <__swbuf_r+0x12>
 80117c6:	6a03      	ldr	r3, [r0, #32]
 80117c8:	b90b      	cbnz	r3, 80117ce <__swbuf_r+0x12>
 80117ca:	f7ff f965 	bl	8010a98 <__sinit>
 80117ce:	69a3      	ldr	r3, [r4, #24]
 80117d0:	60a3      	str	r3, [r4, #8]
 80117d2:	89a3      	ldrh	r3, [r4, #12]
 80117d4:	071a      	lsls	r2, r3, #28
 80117d6:	d525      	bpl.n	8011824 <__swbuf_r+0x68>
 80117d8:	6923      	ldr	r3, [r4, #16]
 80117da:	b31b      	cbz	r3, 8011824 <__swbuf_r+0x68>
 80117dc:	6823      	ldr	r3, [r4, #0]
 80117de:	6922      	ldr	r2, [r4, #16]
 80117e0:	1a98      	subs	r0, r3, r2
 80117e2:	6963      	ldr	r3, [r4, #20]
 80117e4:	b2f6      	uxtb	r6, r6
 80117e6:	4283      	cmp	r3, r0
 80117e8:	4637      	mov	r7, r6
 80117ea:	dc04      	bgt.n	80117f6 <__swbuf_r+0x3a>
 80117ec:	4621      	mov	r1, r4
 80117ee:	4628      	mov	r0, r5
 80117f0:	f7ff ff4a 	bl	8011688 <_fflush_r>
 80117f4:	b9e0      	cbnz	r0, 8011830 <__swbuf_r+0x74>
 80117f6:	68a3      	ldr	r3, [r4, #8]
 80117f8:	3b01      	subs	r3, #1
 80117fa:	60a3      	str	r3, [r4, #8]
 80117fc:	6823      	ldr	r3, [r4, #0]
 80117fe:	1c5a      	adds	r2, r3, #1
 8011800:	6022      	str	r2, [r4, #0]
 8011802:	701e      	strb	r6, [r3, #0]
 8011804:	6962      	ldr	r2, [r4, #20]
 8011806:	1c43      	adds	r3, r0, #1
 8011808:	429a      	cmp	r2, r3
 801180a:	d004      	beq.n	8011816 <__swbuf_r+0x5a>
 801180c:	89a3      	ldrh	r3, [r4, #12]
 801180e:	07db      	lsls	r3, r3, #31
 8011810:	d506      	bpl.n	8011820 <__swbuf_r+0x64>
 8011812:	2e0a      	cmp	r6, #10
 8011814:	d104      	bne.n	8011820 <__swbuf_r+0x64>
 8011816:	4621      	mov	r1, r4
 8011818:	4628      	mov	r0, r5
 801181a:	f7ff ff35 	bl	8011688 <_fflush_r>
 801181e:	b938      	cbnz	r0, 8011830 <__swbuf_r+0x74>
 8011820:	4638      	mov	r0, r7
 8011822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011824:	4621      	mov	r1, r4
 8011826:	4628      	mov	r0, r5
 8011828:	f000 f806 	bl	8011838 <__swsetup_r>
 801182c:	2800      	cmp	r0, #0
 801182e:	d0d5      	beq.n	80117dc <__swbuf_r+0x20>
 8011830:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011834:	e7f4      	b.n	8011820 <__swbuf_r+0x64>
	...

08011838 <__swsetup_r>:
 8011838:	b538      	push	{r3, r4, r5, lr}
 801183a:	4b2a      	ldr	r3, [pc, #168]	; (80118e4 <__swsetup_r+0xac>)
 801183c:	4605      	mov	r5, r0
 801183e:	6818      	ldr	r0, [r3, #0]
 8011840:	460c      	mov	r4, r1
 8011842:	b118      	cbz	r0, 801184c <__swsetup_r+0x14>
 8011844:	6a03      	ldr	r3, [r0, #32]
 8011846:	b90b      	cbnz	r3, 801184c <__swsetup_r+0x14>
 8011848:	f7ff f926 	bl	8010a98 <__sinit>
 801184c:	89a3      	ldrh	r3, [r4, #12]
 801184e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011852:	0718      	lsls	r0, r3, #28
 8011854:	d422      	bmi.n	801189c <__swsetup_r+0x64>
 8011856:	06d9      	lsls	r1, r3, #27
 8011858:	d407      	bmi.n	801186a <__swsetup_r+0x32>
 801185a:	2309      	movs	r3, #9
 801185c:	602b      	str	r3, [r5, #0]
 801185e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011862:	81a3      	strh	r3, [r4, #12]
 8011864:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011868:	e034      	b.n	80118d4 <__swsetup_r+0x9c>
 801186a:	0758      	lsls	r0, r3, #29
 801186c:	d512      	bpl.n	8011894 <__swsetup_r+0x5c>
 801186e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011870:	b141      	cbz	r1, 8011884 <__swsetup_r+0x4c>
 8011872:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011876:	4299      	cmp	r1, r3
 8011878:	d002      	beq.n	8011880 <__swsetup_r+0x48>
 801187a:	4628      	mov	r0, r5
 801187c:	f7ff fa06 	bl	8010c8c <_free_r>
 8011880:	2300      	movs	r3, #0
 8011882:	6363      	str	r3, [r4, #52]	; 0x34
 8011884:	89a3      	ldrh	r3, [r4, #12]
 8011886:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801188a:	81a3      	strh	r3, [r4, #12]
 801188c:	2300      	movs	r3, #0
 801188e:	6063      	str	r3, [r4, #4]
 8011890:	6923      	ldr	r3, [r4, #16]
 8011892:	6023      	str	r3, [r4, #0]
 8011894:	89a3      	ldrh	r3, [r4, #12]
 8011896:	f043 0308 	orr.w	r3, r3, #8
 801189a:	81a3      	strh	r3, [r4, #12]
 801189c:	6923      	ldr	r3, [r4, #16]
 801189e:	b94b      	cbnz	r3, 80118b4 <__swsetup_r+0x7c>
 80118a0:	89a3      	ldrh	r3, [r4, #12]
 80118a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80118a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80118aa:	d003      	beq.n	80118b4 <__swsetup_r+0x7c>
 80118ac:	4621      	mov	r1, r4
 80118ae:	4628      	mov	r0, r5
 80118b0:	f000 f840 	bl	8011934 <__smakebuf_r>
 80118b4:	89a0      	ldrh	r0, [r4, #12]
 80118b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80118ba:	f010 0301 	ands.w	r3, r0, #1
 80118be:	d00a      	beq.n	80118d6 <__swsetup_r+0x9e>
 80118c0:	2300      	movs	r3, #0
 80118c2:	60a3      	str	r3, [r4, #8]
 80118c4:	6963      	ldr	r3, [r4, #20]
 80118c6:	425b      	negs	r3, r3
 80118c8:	61a3      	str	r3, [r4, #24]
 80118ca:	6923      	ldr	r3, [r4, #16]
 80118cc:	b943      	cbnz	r3, 80118e0 <__swsetup_r+0xa8>
 80118ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80118d2:	d1c4      	bne.n	801185e <__swsetup_r+0x26>
 80118d4:	bd38      	pop	{r3, r4, r5, pc}
 80118d6:	0781      	lsls	r1, r0, #30
 80118d8:	bf58      	it	pl
 80118da:	6963      	ldrpl	r3, [r4, #20]
 80118dc:	60a3      	str	r3, [r4, #8]
 80118de:	e7f4      	b.n	80118ca <__swsetup_r+0x92>
 80118e0:	2000      	movs	r0, #0
 80118e2:	e7f7      	b.n	80118d4 <__swsetup_r+0x9c>
 80118e4:	20000168 	.word	0x20000168

080118e8 <__swhatbuf_r>:
 80118e8:	b570      	push	{r4, r5, r6, lr}
 80118ea:	460c      	mov	r4, r1
 80118ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118f0:	2900      	cmp	r1, #0
 80118f2:	b096      	sub	sp, #88	; 0x58
 80118f4:	4615      	mov	r5, r2
 80118f6:	461e      	mov	r6, r3
 80118f8:	da0d      	bge.n	8011916 <__swhatbuf_r+0x2e>
 80118fa:	89a3      	ldrh	r3, [r4, #12]
 80118fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011900:	f04f 0100 	mov.w	r1, #0
 8011904:	bf0c      	ite	eq
 8011906:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801190a:	2340      	movne	r3, #64	; 0x40
 801190c:	2000      	movs	r0, #0
 801190e:	6031      	str	r1, [r6, #0]
 8011910:	602b      	str	r3, [r5, #0]
 8011912:	b016      	add	sp, #88	; 0x58
 8011914:	bd70      	pop	{r4, r5, r6, pc}
 8011916:	466a      	mov	r2, sp
 8011918:	f000 f872 	bl	8011a00 <_fstat_r>
 801191c:	2800      	cmp	r0, #0
 801191e:	dbec      	blt.n	80118fa <__swhatbuf_r+0x12>
 8011920:	9901      	ldr	r1, [sp, #4]
 8011922:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011926:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801192a:	4259      	negs	r1, r3
 801192c:	4159      	adcs	r1, r3
 801192e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011932:	e7eb      	b.n	801190c <__swhatbuf_r+0x24>

08011934 <__smakebuf_r>:
 8011934:	898b      	ldrh	r3, [r1, #12]
 8011936:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011938:	079d      	lsls	r5, r3, #30
 801193a:	4606      	mov	r6, r0
 801193c:	460c      	mov	r4, r1
 801193e:	d507      	bpl.n	8011950 <__smakebuf_r+0x1c>
 8011940:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011944:	6023      	str	r3, [r4, #0]
 8011946:	6123      	str	r3, [r4, #16]
 8011948:	2301      	movs	r3, #1
 801194a:	6163      	str	r3, [r4, #20]
 801194c:	b002      	add	sp, #8
 801194e:	bd70      	pop	{r4, r5, r6, pc}
 8011950:	ab01      	add	r3, sp, #4
 8011952:	466a      	mov	r2, sp
 8011954:	f7ff ffc8 	bl	80118e8 <__swhatbuf_r>
 8011958:	9900      	ldr	r1, [sp, #0]
 801195a:	4605      	mov	r5, r0
 801195c:	4630      	mov	r0, r6
 801195e:	f7fe ff4f 	bl	8010800 <_malloc_r>
 8011962:	b948      	cbnz	r0, 8011978 <__smakebuf_r+0x44>
 8011964:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011968:	059a      	lsls	r2, r3, #22
 801196a:	d4ef      	bmi.n	801194c <__smakebuf_r+0x18>
 801196c:	f023 0303 	bic.w	r3, r3, #3
 8011970:	f043 0302 	orr.w	r3, r3, #2
 8011974:	81a3      	strh	r3, [r4, #12]
 8011976:	e7e3      	b.n	8011940 <__smakebuf_r+0xc>
 8011978:	89a3      	ldrh	r3, [r4, #12]
 801197a:	6020      	str	r0, [r4, #0]
 801197c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011980:	81a3      	strh	r3, [r4, #12]
 8011982:	9b00      	ldr	r3, [sp, #0]
 8011984:	6163      	str	r3, [r4, #20]
 8011986:	9b01      	ldr	r3, [sp, #4]
 8011988:	6120      	str	r0, [r4, #16]
 801198a:	b15b      	cbz	r3, 80119a4 <__smakebuf_r+0x70>
 801198c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011990:	4630      	mov	r0, r6
 8011992:	f000 f847 	bl	8011a24 <_isatty_r>
 8011996:	b128      	cbz	r0, 80119a4 <__smakebuf_r+0x70>
 8011998:	89a3      	ldrh	r3, [r4, #12]
 801199a:	f023 0303 	bic.w	r3, r3, #3
 801199e:	f043 0301 	orr.w	r3, r3, #1
 80119a2:	81a3      	strh	r3, [r4, #12]
 80119a4:	89a3      	ldrh	r3, [r4, #12]
 80119a6:	431d      	orrs	r5, r3
 80119a8:	81a5      	strh	r5, [r4, #12]
 80119aa:	e7cf      	b.n	801194c <__smakebuf_r+0x18>

080119ac <memmove>:
 80119ac:	4288      	cmp	r0, r1
 80119ae:	b510      	push	{r4, lr}
 80119b0:	eb01 0402 	add.w	r4, r1, r2
 80119b4:	d902      	bls.n	80119bc <memmove+0x10>
 80119b6:	4284      	cmp	r4, r0
 80119b8:	4623      	mov	r3, r4
 80119ba:	d807      	bhi.n	80119cc <memmove+0x20>
 80119bc:	1e43      	subs	r3, r0, #1
 80119be:	42a1      	cmp	r1, r4
 80119c0:	d008      	beq.n	80119d4 <memmove+0x28>
 80119c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80119c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80119ca:	e7f8      	b.n	80119be <memmove+0x12>
 80119cc:	4402      	add	r2, r0
 80119ce:	4601      	mov	r1, r0
 80119d0:	428a      	cmp	r2, r1
 80119d2:	d100      	bne.n	80119d6 <memmove+0x2a>
 80119d4:	bd10      	pop	{r4, pc}
 80119d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80119da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80119de:	e7f7      	b.n	80119d0 <memmove+0x24>

080119e0 <_close_r>:
 80119e0:	b538      	push	{r3, r4, r5, lr}
 80119e2:	4d06      	ldr	r5, [pc, #24]	; (80119fc <_close_r+0x1c>)
 80119e4:	2300      	movs	r3, #0
 80119e6:	4604      	mov	r4, r0
 80119e8:	4608      	mov	r0, r1
 80119ea:	602b      	str	r3, [r5, #0]
 80119ec:	f7ef fefb 	bl	80017e6 <_close>
 80119f0:	1c43      	adds	r3, r0, #1
 80119f2:	d102      	bne.n	80119fa <_close_r+0x1a>
 80119f4:	682b      	ldr	r3, [r5, #0]
 80119f6:	b103      	cbz	r3, 80119fa <_close_r+0x1a>
 80119f8:	6023      	str	r3, [r4, #0]
 80119fa:	bd38      	pop	{r3, r4, r5, pc}
 80119fc:	200046ec 	.word	0x200046ec

08011a00 <_fstat_r>:
 8011a00:	b538      	push	{r3, r4, r5, lr}
 8011a02:	4d07      	ldr	r5, [pc, #28]	; (8011a20 <_fstat_r+0x20>)
 8011a04:	2300      	movs	r3, #0
 8011a06:	4604      	mov	r4, r0
 8011a08:	4608      	mov	r0, r1
 8011a0a:	4611      	mov	r1, r2
 8011a0c:	602b      	str	r3, [r5, #0]
 8011a0e:	f7ef fef6 	bl	80017fe <_fstat>
 8011a12:	1c43      	adds	r3, r0, #1
 8011a14:	d102      	bne.n	8011a1c <_fstat_r+0x1c>
 8011a16:	682b      	ldr	r3, [r5, #0]
 8011a18:	b103      	cbz	r3, 8011a1c <_fstat_r+0x1c>
 8011a1a:	6023      	str	r3, [r4, #0]
 8011a1c:	bd38      	pop	{r3, r4, r5, pc}
 8011a1e:	bf00      	nop
 8011a20:	200046ec 	.word	0x200046ec

08011a24 <_isatty_r>:
 8011a24:	b538      	push	{r3, r4, r5, lr}
 8011a26:	4d06      	ldr	r5, [pc, #24]	; (8011a40 <_isatty_r+0x1c>)
 8011a28:	2300      	movs	r3, #0
 8011a2a:	4604      	mov	r4, r0
 8011a2c:	4608      	mov	r0, r1
 8011a2e:	602b      	str	r3, [r5, #0]
 8011a30:	f7ef fef5 	bl	800181e <_isatty>
 8011a34:	1c43      	adds	r3, r0, #1
 8011a36:	d102      	bne.n	8011a3e <_isatty_r+0x1a>
 8011a38:	682b      	ldr	r3, [r5, #0]
 8011a3a:	b103      	cbz	r3, 8011a3e <_isatty_r+0x1a>
 8011a3c:	6023      	str	r3, [r4, #0]
 8011a3e:	bd38      	pop	{r3, r4, r5, pc}
 8011a40:	200046ec 	.word	0x200046ec

08011a44 <_lseek_r>:
 8011a44:	b538      	push	{r3, r4, r5, lr}
 8011a46:	4d07      	ldr	r5, [pc, #28]	; (8011a64 <_lseek_r+0x20>)
 8011a48:	4604      	mov	r4, r0
 8011a4a:	4608      	mov	r0, r1
 8011a4c:	4611      	mov	r1, r2
 8011a4e:	2200      	movs	r2, #0
 8011a50:	602a      	str	r2, [r5, #0]
 8011a52:	461a      	mov	r2, r3
 8011a54:	f7ef feee 	bl	8001834 <_lseek>
 8011a58:	1c43      	adds	r3, r0, #1
 8011a5a:	d102      	bne.n	8011a62 <_lseek_r+0x1e>
 8011a5c:	682b      	ldr	r3, [r5, #0]
 8011a5e:	b103      	cbz	r3, 8011a62 <_lseek_r+0x1e>
 8011a60:	6023      	str	r3, [r4, #0]
 8011a62:	bd38      	pop	{r3, r4, r5, pc}
 8011a64:	200046ec 	.word	0x200046ec

08011a68 <_read_r>:
 8011a68:	b538      	push	{r3, r4, r5, lr}
 8011a6a:	4d07      	ldr	r5, [pc, #28]	; (8011a88 <_read_r+0x20>)
 8011a6c:	4604      	mov	r4, r0
 8011a6e:	4608      	mov	r0, r1
 8011a70:	4611      	mov	r1, r2
 8011a72:	2200      	movs	r2, #0
 8011a74:	602a      	str	r2, [r5, #0]
 8011a76:	461a      	mov	r2, r3
 8011a78:	f7ef fe7c 	bl	8001774 <_read>
 8011a7c:	1c43      	adds	r3, r0, #1
 8011a7e:	d102      	bne.n	8011a86 <_read_r+0x1e>
 8011a80:	682b      	ldr	r3, [r5, #0]
 8011a82:	b103      	cbz	r3, 8011a86 <_read_r+0x1e>
 8011a84:	6023      	str	r3, [r4, #0]
 8011a86:	bd38      	pop	{r3, r4, r5, pc}
 8011a88:	200046ec 	.word	0x200046ec

08011a8c <_write_r>:
 8011a8c:	b538      	push	{r3, r4, r5, lr}
 8011a8e:	4d07      	ldr	r5, [pc, #28]	; (8011aac <_write_r+0x20>)
 8011a90:	4604      	mov	r4, r0
 8011a92:	4608      	mov	r0, r1
 8011a94:	4611      	mov	r1, r2
 8011a96:	2200      	movs	r2, #0
 8011a98:	602a      	str	r2, [r5, #0]
 8011a9a:	461a      	mov	r2, r3
 8011a9c:	f7ef fe87 	bl	80017ae <_write>
 8011aa0:	1c43      	adds	r3, r0, #1
 8011aa2:	d102      	bne.n	8011aaa <_write_r+0x1e>
 8011aa4:	682b      	ldr	r3, [r5, #0]
 8011aa6:	b103      	cbz	r3, 8011aaa <_write_r+0x1e>
 8011aa8:	6023      	str	r3, [r4, #0]
 8011aaa:	bd38      	pop	{r3, r4, r5, pc}
 8011aac:	200046ec 	.word	0x200046ec

08011ab0 <memcpy>:
 8011ab0:	440a      	add	r2, r1
 8011ab2:	4291      	cmp	r1, r2
 8011ab4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011ab8:	d100      	bne.n	8011abc <memcpy+0xc>
 8011aba:	4770      	bx	lr
 8011abc:	b510      	push	{r4, lr}
 8011abe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011ac2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011ac6:	4291      	cmp	r1, r2
 8011ac8:	d1f9      	bne.n	8011abe <memcpy+0xe>
 8011aca:	bd10      	pop	{r4, pc}

08011acc <_malloc_usable_size_r>:
 8011acc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011ad0:	1f18      	subs	r0, r3, #4
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	bfbc      	itt	lt
 8011ad6:	580b      	ldrlt	r3, [r1, r0]
 8011ad8:	18c0      	addlt	r0, r0, r3
 8011ada:	4770      	bx	lr

08011adc <_init>:
 8011adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ade:	bf00      	nop
 8011ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011ae2:	bc08      	pop	{r3}
 8011ae4:	469e      	mov	lr, r3
 8011ae6:	4770      	bx	lr

08011ae8 <_fini>:
 8011ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011aea:	bf00      	nop
 8011aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011aee:	bc08      	pop	{r3}
 8011af0:	469e      	mov	lr, r3
 8011af2:	4770      	bx	lr
