
CANRx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f04  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  0800a104  0800a104  0001a104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a38c  0800a38c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800a38c  0800a38c  0001a38c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a394  0800a394  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a394  0800a394  0001a394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a398  0800a398  0001a398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800a39c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000028c8  20000068  0800a404  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002930  0800a404  00022930  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014c16  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003252  00000000  00000000  00034cef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001110  00000000  00000000  00037f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cfb  00000000  00000000  00039058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ac0e  00000000  00000000  00039d53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000167e1  00000000  00000000  00064961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc8d2  00000000  00000000  0007b142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004eec  00000000  00000000  00177a14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0017c900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000068 	.word	0x20000068
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a0ec 	.word	0x0800a0ec

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000006c 	.word	0x2000006c
 800023c:	0800a0ec 	.word	0x0800a0ec

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005f0:	f000 fef3 	bl	80013da <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005f4:	f000 f910 	bl	8000818 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005f8:	f000 fa2a 	bl	8000a50 <MX_GPIO_Init>
	MX_DMA_Init();
 80005fc:	f000 fa02 	bl	8000a04 <MX_DMA_Init>
	MX_SDMMC1_SD_Init();
 8000600:	f000 f9aa 	bl	8000958 <MX_SDMMC1_SD_Init>
	MX_USART3_UART_Init();
 8000604:	f000 f9ce 	bl	80009a4 <MX_USART3_UART_Init>
	MX_FATFS_Init();
 8000608:	f005 ffe4 	bl	80065d4 <MX_FATFS_Init>
	if (f_mount(&SDFatFS, (TCHAR const*) SDPath, 1) != FR_OK) {
 800060c:	2201      	movs	r2, #1
 800060e:	4969      	ldr	r1, [pc, #420]	; (80007b4 <main+0x1c8>)
 8000610:	4869      	ldr	r0, [pc, #420]	; (80007b8 <main+0x1cc>)
 8000612:	f007 ff6f 	bl	80084f4 <f_mount>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d004      	beq.n	8000626 <main+0x3a>
		printf("\r\nMounting Failed!\r\n");
 800061c:	4867      	ldr	r0, [pc, #412]	; (80007bc <main+0x1d0>)
 800061e:	f008 fd43 	bl	80090a8 <puts>
		Error_Handler();
 8000622:	f000 fbc3 	bl	8000dac <Error_Handler>
	}
	printf("Mounting succeeded...\r\n");
 8000626:	4866      	ldr	r0, [pc, #408]	; (80007c0 <main+0x1d4>)
 8000628:	f008 fd3e 	bl	80090a8 <puts>

	//Open file for writing (Create)
	if (f_open(&SDFile, "CAN.log", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK) {
 800062c:	220a      	movs	r2, #10
 800062e:	4965      	ldr	r1, [pc, #404]	; (80007c4 <main+0x1d8>)
 8000630:	4865      	ldr	r0, [pc, #404]	; (80007c8 <main+0x1dc>)
 8000632:	f007 ffa5 	bl	8008580 <f_open>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d004      	beq.n	8000646 <main+0x5a>
		printf("\r\nOpen Failed!\r\n");
 800063c:	4863      	ldr	r0, [pc, #396]	; (80007cc <main+0x1e0>)
 800063e:	f008 fd33 	bl	80090a8 <puts>
		Error_Handler();
 8000642:	f000 fbb3 	bl	8000dac <Error_Handler>
	}
	printf("Starting new log...\r\n");
 8000646:	4862      	ldr	r0, [pc, #392]	; (80007d0 <main+0x1e4>)
 8000648:	f008 fd2e 	bl	80090a8 <puts>

	MX_CAN1_Init();
 800064c:	f000 f94e 	bl	80008ec <MX_CAN1_Init>


	/* USER CODE BEGIN 2 */
	HAL_CAN_Start(&hcan1);
 8000650:	4860      	ldr	r0, [pc, #384]	; (80007d4 <main+0x1e8>)
 8000652:	f001 f92b 	bl	80018ac <HAL_CAN_Start>
	CAN_Filter_Config();
 8000656:	f000 fb27 	bl	8000ca8 <CAN_Filter_Config>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	double_buffer[0][0] = '\00';
 800065a:	4b5f      	ldr	r3, [pc, #380]	; (80007d8 <main+0x1ec>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	double_buffer[1][0] = '\00';
 8000660:	4b5d      	ldr	r3, [pc, #372]	; (80007d8 <main+0x1ec>)
 8000662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000666:	2200      	movs	r2, #0
 8000668:	705a      	strb	r2, [r3, #1]
	double_buffer_fill_level[0] = 0;
 800066a:	4b5c      	ldr	r3, [pc, #368]	; (80007dc <main+0x1f0>)
 800066c:	2200      	movs	r2, #0
 800066e:	701a      	strb	r2, [r3, #0]
	double_buffer_fill_level[1] = 0;
 8000670:	4b5a      	ldr	r3, [pc, #360]	; (80007dc <main+0x1f0>)
 8000672:	2200      	movs	r2, #0
 8000674:	705a      	strb	r2, [r3, #1]
	filling_buffer = 0;
 8000676:	4b5a      	ldr	r3, [pc, #360]	; (80007e0 <main+0x1f4>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]

	while (buffer_emptyings < MAX_BUFFER_EMPTYINGS) {
 800067c:	e07c      	b.n	8000778 <main+0x18c>
		while (!buffer_filled);
 800067e:	bf00      	nop
 8000680:	4b58      	ldr	r3, [pc, #352]	; (80007e4 <main+0x1f8>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d0fb      	beq.n	8000680 <main+0x94>

		res = f_write(&SDFile, double_buffer[!filling_buffer], ENCODED_CAN_SIZE_BYTES*CAN_MESSAGES_TO_BUFFER, (void*) &byteswritten);
 8000688:	4b55      	ldr	r3, [pc, #340]	; (80007e0 <main+0x1f4>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	bf0c      	ite	eq
 8000690:	2301      	moveq	r3, #1
 8000692:	2300      	movne	r3, #0
 8000694:	b2db      	uxtb	r3, r3
 8000696:	461a      	mov	r2, r3
 8000698:	4613      	mov	r3, r2
 800069a:	031b      	lsls	r3, r3, #12
 800069c:	4413      	add	r3, r2
 800069e:	4a4e      	ldr	r2, [pc, #312]	; (80007d8 <main+0x1ec>)
 80006a0:	1899      	adds	r1, r3, r2
 80006a2:	4b51      	ldr	r3, [pc, #324]	; (80007e8 <main+0x1fc>)
 80006a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006a8:	4847      	ldr	r0, [pc, #284]	; (80007c8 <main+0x1dc>)
 80006aa:	f008 f927 	bl	80088fc <f_write>
 80006ae:	4603      	mov	r3, r0
 80006b0:	461a      	mov	r2, r3
 80006b2:	4b4e      	ldr	r3, [pc, #312]	; (80007ec <main+0x200>)
 80006b4:	701a      	strb	r2, [r3, #0]

		if ((byteswritten == 0) || (res != FR_OK)) {
 80006b6:	4b4c      	ldr	r3, [pc, #304]	; (80007e8 <main+0x1fc>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d003      	beq.n	80006c6 <main+0xda>
 80006be:	4b4b      	ldr	r3, [pc, #300]	; (80007ec <main+0x200>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d004      	beq.n	80006d0 <main+0xe4>
			printf("\r\nWriting Failed!\r\n");
 80006c6:	484a      	ldr	r0, [pc, #296]	; (80007f0 <main+0x204>)
 80006c8:	f008 fcee 	bl	80090a8 <puts>
			Error_Handler();
 80006cc:	f000 fb6e 	bl	8000dac <Error_Handler>
		}

		buffer_emptyings++;
 80006d0:	4b48      	ldr	r3, [pc, #288]	; (80007f4 <main+0x208>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	3301      	adds	r3, #1
 80006d6:	4a47      	ldr	r2, [pc, #284]	; (80007f4 <main+0x208>)
 80006d8:	6013      	str	r3, [r2, #0]
		printf("emptied buffer %d\n\r", !filling_buffer);
 80006da:	4b41      	ldr	r3, [pc, #260]	; (80007e0 <main+0x1f4>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	bf0c      	ite	eq
 80006e2:	2301      	moveq	r3, #1
 80006e4:	2300      	movne	r3, #0
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	4619      	mov	r1, r3
 80006ea:	4843      	ldr	r0, [pc, #268]	; (80007f8 <main+0x20c>)
 80006ec:	f008 fc76 	bl	8008fdc <iprintf>
		printf("buffers emptied: %d\n\r", buffer_emptyings);
 80006f0:	4b40      	ldr	r3, [pc, #256]	; (80007f4 <main+0x208>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4619      	mov	r1, r3
 80006f6:	4841      	ldr	r0, [pc, #260]	; (80007fc <main+0x210>)
 80006f8:	f008 fc70 	bl	8008fdc <iprintf>
		printf("sizeof: %d\n\r", byteswritten);
 80006fc:	4b3a      	ldr	r3, [pc, #232]	; (80007e8 <main+0x1fc>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4619      	mov	r1, r3
 8000702:	483f      	ldr	r0, [pc, #252]	; (8000800 <main+0x214>)
 8000704:	f008 fc6a 	bl	8008fdc <iprintf>
	    printf("buffer value: %x\n\r", double_buffer[!filling_buffer][ENCODED_CAN_SIZE_BYTES*CAN_MESSAGES_TO_BUFFER]);
 8000708:	4b35      	ldr	r3, [pc, #212]	; (80007e0 <main+0x1f4>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	bf0c      	ite	eq
 8000710:	2301      	moveq	r3, #1
 8000712:	2300      	movne	r3, #0
 8000714:	b2db      	uxtb	r3, r3
 8000716:	4619      	mov	r1, r3
 8000718:	4a2f      	ldr	r2, [pc, #188]	; (80007d8 <main+0x1ec>)
 800071a:	460b      	mov	r3, r1
 800071c:	031b      	lsls	r3, r3, #12
 800071e:	440b      	add	r3, r1
 8000720:	4413      	add	r3, r2
 8000722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	4619      	mov	r1, r3
 800072a:	4836      	ldr	r0, [pc, #216]	; (8000804 <main+0x218>)
 800072c:	f008 fc56 	bl	8008fdc <iprintf>

		total_size += byteswritten;
 8000730:	4b35      	ldr	r3, [pc, #212]	; (8000808 <main+0x21c>)
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	4b2c      	ldr	r3, [pc, #176]	; (80007e8 <main+0x1fc>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4413      	add	r3, r2
 800073a:	4a33      	ldr	r2, [pc, #204]	; (8000808 <main+0x21c>)
 800073c:	6013      	str	r3, [r2, #0]
		double_buffer[!filling_buffer][0] = '\00';
 800073e:	4b28      	ldr	r3, [pc, #160]	; (80007e0 <main+0x1f4>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	bf0c      	ite	eq
 8000746:	2301      	moveq	r3, #1
 8000748:	2300      	movne	r3, #0
 800074a:	b2db      	uxtb	r3, r3
 800074c:	4619      	mov	r1, r3
 800074e:	4a22      	ldr	r2, [pc, #136]	; (80007d8 <main+0x1ec>)
 8000750:	460b      	mov	r3, r1
 8000752:	031b      	lsls	r3, r3, #12
 8000754:	440b      	add	r3, r1
 8000756:	4413      	add	r3, r2
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
		double_buffer_fill_level[!filling_buffer] = 0;
 800075c:	4b20      	ldr	r3, [pc, #128]	; (80007e0 <main+0x1f4>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	bf0c      	ite	eq
 8000764:	2301      	moveq	r3, #1
 8000766:	2300      	movne	r3, #0
 8000768:	b2db      	uxtb	r3, r3
 800076a:	461a      	mov	r2, r3
 800076c:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <main+0x1f0>)
 800076e:	2100      	movs	r1, #0
 8000770:	5499      	strb	r1, [r3, r2]
		buffer_filled = 0;
 8000772:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <main+0x1f8>)
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
	while (buffer_emptyings < MAX_BUFFER_EMPTYINGS) {
 8000778:	4b1e      	ldr	r3, [pc, #120]	; (80007f4 <main+0x208>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b7f      	cmp	r3, #127	; 0x7f
 800077e:	f67f af7e 	bls.w	800067e <main+0x92>
	}
	/* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */
	printf("%d Messages received!", MAX_BUFFER_EMPTYINGS * CAN_MESSAGES_TO_BUFFER);
 8000782:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000786:	4821      	ldr	r0, [pc, #132]	; (800080c <main+0x220>)
 8000788:	f008 fc28 	bl	8008fdc <iprintf>
	printf("total sizeof: %d\n\r", total_size);
 800078c:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <main+0x21c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4619      	mov	r1, r3
 8000792:	481f      	ldr	r0, [pc, #124]	; (8000810 <main+0x224>)
 8000794:	f008 fc22 	bl	8008fdc <iprintf>

	printf("\r\nUnmounting!\r\n");
 8000798:	481e      	ldr	r0, [pc, #120]	; (8000814 <main+0x228>)
 800079a:	f008 fc85 	bl	80090a8 <puts>
	f_close(&SDFile);
 800079e:	480a      	ldr	r0, [pc, #40]	; (80007c8 <main+0x1dc>)
 80007a0:	f008 fa9f 	bl	8008ce2 <f_close>
	f_mount(&SDFatFS, (TCHAR const*) NULL, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2100      	movs	r1, #0
 80007a8:	4803      	ldr	r0, [pc, #12]	; (80007b8 <main+0x1cc>)
 80007aa:	f007 fea3 	bl	80084f4 <f_mount>
 80007ae:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20002344 	.word	0x20002344
 80007b8:	20002348 	.word	0x20002348
 80007bc:	0800a104 	.word	0x0800a104
 80007c0:	0800a118 	.word	0x0800a118
 80007c4:	0800a130 	.word	0x0800a130
 80007c8:	20002578 	.word	0x20002578
 80007cc:	0800a138 	.word	0x0800a138
 80007d0:	0800a148 	.word	0x0800a148
 80007d4:	20000084 	.word	0x20000084
 80007d8:	20000324 	.word	0x20000324
 80007dc:	20002328 	.word	0x20002328
 80007e0:	2000232a 	.word	0x2000232a
 80007e4:	20002330 	.word	0x20002330
 80007e8:	200002fc 	.word	0x200002fc
 80007ec:	20000278 	.word	0x20000278
 80007f0:	0800a160 	.word	0x0800a160
 80007f4:	2000232c 	.word	0x2000232c
 80007f8:	0800a174 	.word	0x0800a174
 80007fc:	0800a188 	.word	0x0800a188
 8000800:	0800a1a0 	.word	0x0800a1a0
 8000804:	0800a1b0 	.word	0x0800a1b0
 8000808:	20002334 	.word	0x20002334
 800080c:	0800a1c4 	.word	0x0800a1c4
 8000810:	0800a1dc 	.word	0x0800a1dc
 8000814:	0800a1f0 	.word	0x0800a1f0

08000818 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b094      	sub	sp, #80	; 0x50
 800081c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	2234      	movs	r2, #52	; 0x34
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f008 fc46 	bl	80090b8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800082c:	f107 0308 	add.w	r3, r7, #8
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 800083c:	f002 fa78 	bl	8002d30 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000840:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <SystemClock_Config+0xcc>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	4a27      	ldr	r2, [pc, #156]	; (80008e4 <SystemClock_Config+0xcc>)
 8000846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084a:	6413      	str	r3, [r2, #64]	; 0x40
 800084c:	4b25      	ldr	r3, [pc, #148]	; (80008e4 <SystemClock_Config+0xcc>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000858:	4b23      	ldr	r3, [pc, #140]	; (80008e8 <SystemClock_Config+0xd0>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000860:	4a21      	ldr	r2, [pc, #132]	; (80008e8 <SystemClock_Config+0xd0>)
 8000862:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000866:	6013      	str	r3, [r2, #0]
 8000868:	4b1f      	ldr	r3, [pc, #124]	; (80008e8 <SystemClock_Config+0xd0>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000874:	2301      	movs	r3, #1
 8000876:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000878:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800087c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087e:	2302      	movs	r3, #2
 8000880:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000882:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000886:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000888:	2304      	movs	r3, #4
 800088a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 96;
 800088c:	2360      	movs	r3, #96	; 0x60
 800088e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000890:	2304      	movs	r3, #4
 8000892:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000894:	2304      	movs	r3, #4
 8000896:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000898:	2302      	movs	r3, #2
 800089a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4618      	mov	r0, r3
 80008a2:	f002 fa55 	bl	8002d50 <HAL_RCC_OscConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0x98>
		Error_Handler();
 80008ac:	f000 fa7e 	bl	8000dac <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80008b0:	230f      	movs	r3, #15
 80008b2:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b4:	2302      	movs	r3, #2
 80008b6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80008c6:	f107 0308 	add.w	r3, r7, #8
 80008ca:	2101      	movs	r1, #1
 80008cc:	4618      	mov	r0, r3
 80008ce:	f002 fced 	bl	80032ac <HAL_RCC_ClockConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0xc4>
		Error_Handler();
 80008d8:	f000 fa68 	bl	8000dac <Error_Handler>
	}
}
 80008dc:	bf00      	nop
 80008de:	3750      	adds	r7, #80	; 0x50
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40007000 	.word	0x40007000

080008ec <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 80008f0:	4b17      	ldr	r3, [pc, #92]	; (8000950 <MX_CAN1_Init+0x64>)
 80008f2:	4a18      	ldr	r2, [pc, #96]	; (8000954 <MX_CAN1_Init+0x68>)
 80008f4:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 3;
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_CAN1_Init+0x64>)
 80008f8:	2203      	movs	r2, #3
 80008fa:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_CAN1_Init+0x64>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000902:	4b13      	ldr	r3, [pc, #76]	; (8000950 <MX_CAN1_Init+0x64>)
 8000904:	2200      	movs	r2, #0
 8000906:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_CAN1_Init+0x64>)
 800090a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800090e:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_CAN1_Init+0x64>)
 8000912:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000916:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000918:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <MX_CAN1_Init+0x64>)
 800091a:	2200      	movs	r2, #0
 800091c:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_CAN1_Init+0x64>)
 8000920:	2200      	movs	r2, #0
 8000922:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000924:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <MX_CAN1_Init+0x64>)
 8000926:	2200      	movs	r2, #0
 8000928:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_CAN1_Init+0x64>)
 800092c:	2200      	movs	r2, #0
 800092e:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000930:	4b07      	ldr	r3, [pc, #28]	; (8000950 <MX_CAN1_Init+0x64>)
 8000932:	2200      	movs	r2, #0
 8000934:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_CAN1_Init+0x64>)
 8000938:	2200      	movs	r2, #0
 800093a:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_CAN1_Init+0x64>)
 800093e:	f000 fdcd 	bl	80014dc <HAL_CAN_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_CAN1_Init+0x60>
		Error_Handler();
 8000948:	f000 fa30 	bl	8000dac <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000084 	.word	0x20000084
 8000954:	40006400 	.word	0x40006400

08000958 <MX_SDMMC1_SD_Init>:
/**
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void) {
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_SDMMC1_SD_Init+0x44>)
 800095e:	4a10      	ldr	r2, [pc, #64]	; (80009a0 <MX_SDMMC1_SD_Init+0x48>)
 8000960:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_SDMMC1_SD_Init+0x44>)
 8000964:	2200      	movs	r2, #0
 8000966:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_SDMMC1_SD_Init+0x44>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_SDMMC1_SD_Init+0x44>)
 8000970:	2200      	movs	r2, #0
 8000972:	60da      	str	r2, [r3, #12]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_SDMMC1_SD_Init+0x44>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <MX_SDMMC1_SD_Init+0x44>)
 800097c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000980:	615a      	str	r2, [r3, #20]
	hsd1.Init.ClockDiv = 0;
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_SDMMC1_SD_Init+0x44>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDMMC1_Init 2 */
	if (HAL_SD_Init(&hsd1) != HAL_OK) {
 8000988:	4804      	ldr	r0, [pc, #16]	; (800099c <MX_SDMMC1_SD_Init+0x44>)
 800098a:	f003 fadd 	bl	8003f48 <HAL_SD_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_SDMMC1_SD_Init+0x40>
		Error_Handler();
 8000994:	f000 fa0a 	bl	8000dac <Error_Handler>
	}
	/* USER CODE END SDMMC1_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	200000ac 	.word	0x200000ac
 80009a0:	40012c00 	.word	0x40012c00

080009a4 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009aa:	4a15      	ldr	r2, [pc, #84]	; (8000a00 <MX_USART3_UART_Init+0x5c>)
 80009ac:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b4:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009ca:	220c      	movs	r2, #12
 80009cc:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009e8:	f004 fbd6 	bl	8005198 <HAL_UART_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_USART3_UART_Init+0x52>
		Error_Handler();
 80009f2:	f000 f9db 	bl	8000dac <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200001f0 	.word	0x200001f0
 8000a00:	40004800 	.word	0x40004800

08000a04 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <MX_DMA_Init+0x48>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a0f      	ldr	r2, [pc, #60]	; (8000a4c <MX_DMA_Init+0x48>)
 8000a10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <MX_DMA_Init+0x48>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	203b      	movs	r0, #59	; 0x3b
 8000a28:	f001 fbc7 	bl	80021ba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000a2c:	203b      	movs	r0, #59	; 0x3b
 8000a2e:	f001 fbe0 	bl	80021f2 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2100      	movs	r1, #0
 8000a36:	2045      	movs	r0, #69	; 0x45
 8000a38:	f001 fbbf 	bl	80021ba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000a3c:	2045      	movs	r0, #69	; 0x45
 8000a3e:	f001 fbd8 	bl	80021f2 <HAL_NVIC_EnableIRQ>

}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800

08000a50 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08c      	sub	sp, #48	; 0x30
 8000a54:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
 8000a64:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a66:	4b47      	ldr	r3, [pc, #284]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a46      	ldr	r2, [pc, #280]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000a6c:	f043 0304 	orr.w	r3, r3, #4
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b44      	ldr	r3, [pc, #272]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0304 	and.w	r3, r3, #4
 8000a7a:	61bb      	str	r3, [r7, #24]
 8000a7c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7e:	4b41      	ldr	r3, [pc, #260]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a40      	ldr	r2, [pc, #256]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b3e      	ldr	r3, [pc, #248]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a92:	617b      	str	r3, [r7, #20]
 8000a94:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a96:	4b3b      	ldr	r3, [pc, #236]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a3a      	ldr	r2, [pc, #232]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000a9c:	f043 0302 	orr.w	r3, r3, #2
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b38      	ldr	r3, [pc, #224]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000aae:	4b35      	ldr	r3, [pc, #212]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a34      	ldr	r2, [pc, #208]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000ab4:	f043 0308 	orr.w	r3, r3, #8
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b32      	ldr	r3, [pc, #200]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0308 	and.w	r3, r3, #8
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000ac6:	4b2f      	ldr	r3, [pc, #188]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a2e      	ldr	r2, [pc, #184]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b2c      	ldr	r3, [pc, #176]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	4b29      	ldr	r3, [pc, #164]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a28      	ldr	r2, [pc, #160]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b26      	ldr	r3, [pc, #152]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	f244 0181 	movw	r1, #16513	; 0x4081
 8000afc:	4822      	ldr	r0, [pc, #136]	; (8000b88 <MX_GPIO_Init+0x138>)
 8000afe:	f002 f8fd 	bl	8002cfc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8000b02:	2200      	movs	r2, #0
 8000b04:	2140      	movs	r1, #64	; 0x40
 8000b06:	4821      	ldr	r0, [pc, #132]	; (8000b8c <MX_GPIO_Init+0x13c>)
 8000b08:	f002 f8f8 	bl	8002cfc <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b10:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b12:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b16:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	4619      	mov	r1, r3
 8000b22:	481b      	ldr	r0, [pc, #108]	; (8000b90 <MX_GPIO_Init+0x140>)
 8000b24:	f001 ff26 	bl	8002974 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8000b28:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b2c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4811      	ldr	r0, [pc, #68]	; (8000b88 <MX_GPIO_Init+0x138>)
 8000b42:	f001 ff17 	bl	8002974 <HAL_GPIO_Init>

	/*Configure GPIO pins : SD_CD_Pin USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = SD_CD_Pin | USB_OverCurrent_Pin;
 8000b46:	2384      	movs	r3, #132	; 0x84
 8000b48:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	4619      	mov	r1, r3
 8000b58:	480c      	ldr	r0, [pc, #48]	; (8000b8c <MX_GPIO_Init+0x13c>)
 8000b5a:	f001 ff0b 	bl	8002974 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b5e:	2340      	movs	r3, #64	; 0x40
 8000b60:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 031c 	add.w	r3, r7, #28
 8000b72:	4619      	mov	r1, r3
 8000b74:	4805      	ldr	r0, [pc, #20]	; (8000b8c <MX_GPIO_Init+0x13c>)
 8000b76:	f001 fefd 	bl	8002974 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000b7a:	bf00      	nop
 8000b7c:	3730      	adds	r7, #48	; 0x30
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020400 	.word	0x40020400
 8000b8c:	40021800 	.word	0x40021800
 8000b90:	40020800 	.word	0x40020800

08000b94 <Get_and_Append_CAN_Message_to_Buffer>:

/* USER CODE BEGIN 4 */
void Get_and_Append_CAN_Message_to_Buffer() {
 8000b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b96:	b089      	sub	sp, #36	; 0x24
 8000b98:	af06      	add	r7, sp, #24
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_msg) != HAL_OK) Error_Handler();
 8000b9a:	4b3a      	ldr	r3, [pc, #232]	; (8000c84 <Get_and_Append_CAN_Message_to_Buffer+0xf0>)
 8000b9c:	4a3a      	ldr	r2, [pc, #232]	; (8000c88 <Get_and_Append_CAN_Message_to_Buffer+0xf4>)
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	483a      	ldr	r0, [pc, #232]	; (8000c8c <Get_and_Append_CAN_Message_to_Buffer+0xf8>)
 8000ba2:	f000 fec7 	bl	8001934 <HAL_CAN_GetRxMessage>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <Get_and_Append_CAN_Message_to_Buffer+0x1c>
 8000bac:	f000 f8fe 	bl	8000dac <Error_Handler>

	uint16_t data1 = (rcvd_msg[0] << 8) + rcvd_msg[1];
 8000bb0:	4b34      	ldr	r3, [pc, #208]	; (8000c84 <Get_and_Append_CAN_Message_to_Buffer+0xf0>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	021b      	lsls	r3, r3, #8
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	4b32      	ldr	r3, [pc, #200]	; (8000c84 <Get_and_Append_CAN_Message_to_Buffer+0xf0>)
 8000bbc:	785b      	ldrb	r3, [r3, #1]
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	4413      	add	r3, r2
 8000bc2:	80fb      	strh	r3, [r7, #6]
	uint16_t data2 = (rcvd_msg[2] << 8) + rcvd_msg[3];
 8000bc4:	4b2f      	ldr	r3, [pc, #188]	; (8000c84 <Get_and_Append_CAN_Message_to_Buffer+0xf0>)
 8000bc6:	789b      	ldrb	r3, [r3, #2]
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	021b      	lsls	r3, r3, #8
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	4b2d      	ldr	r3, [pc, #180]	; (8000c84 <Get_and_Append_CAN_Message_to_Buffer+0xf0>)
 8000bd0:	78db      	ldrb	r3, [r3, #3]
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	4413      	add	r3, r2
 8000bd6:	80bb      	strh	r3, [r7, #4]
	uint16_t data3 = (rcvd_msg[4] << 8) + rcvd_msg[5];
 8000bd8:	4b2a      	ldr	r3, [pc, #168]	; (8000c84 <Get_and_Append_CAN_Message_to_Buffer+0xf0>)
 8000bda:	791b      	ldrb	r3, [r3, #4]
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	021b      	lsls	r3, r3, #8
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	4b28      	ldr	r3, [pc, #160]	; (8000c84 <Get_and_Append_CAN_Message_to_Buffer+0xf0>)
 8000be4:	795b      	ldrb	r3, [r3, #5]
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	4413      	add	r3, r2
 8000bea:	807b      	strh	r3, [r7, #2]
	uint16_t data4 = (rcvd_msg[6] << 8) + rcvd_msg[7];
 8000bec:	4b25      	ldr	r3, [pc, #148]	; (8000c84 <Get_and_Append_CAN_Message_to_Buffer+0xf0>)
 8000bee:	799b      	ldrb	r3, [r3, #6]
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	021b      	lsls	r3, r3, #8
 8000bf4:	b29a      	uxth	r2, r3
 8000bf6:	4b23      	ldr	r3, [pc, #140]	; (8000c84 <Get_and_Append_CAN_Message_to_Buffer+0xf0>)
 8000bf8:	79db      	ldrb	r3, [r3, #7]
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	4413      	add	r3, r2
 8000bfe:	803b      	strh	r3, [r7, #0]

	snprintf(encodedData, ENCODED_CAN_SIZE_BYTES+1, "(%d.0) X %08X#%04X%04X%04X%04X\n",
 8000c00:	f000 fc3c 	bl	800147c <HAL_GetTick>
 8000c04:	4605      	mov	r5, r0
 8000c06:	4b20      	ldr	r3, [pc, #128]	; (8000c88 <Get_and_Append_CAN_Message_to_Buffer+0xf4>)
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	88fa      	ldrh	r2, [r7, #6]
 8000c0c:	88b9      	ldrh	r1, [r7, #4]
 8000c0e:	8878      	ldrh	r0, [r7, #2]
 8000c10:	883c      	ldrh	r4, [r7, #0]
 8000c12:	9404      	str	r4, [sp, #16]
 8000c14:	9003      	str	r0, [sp, #12]
 8000c16:	9102      	str	r1, [sp, #8]
 8000c18:	9201      	str	r2, [sp, #4]
 8000c1a:	9300      	str	r3, [sp, #0]
 8000c1c:	462b      	mov	r3, r5
 8000c1e:	4a1c      	ldr	r2, [pc, #112]	; (8000c90 <Get_and_Append_CAN_Message_to_Buffer+0xfc>)
 8000c20:	2121      	movs	r1, #33	; 0x21
 8000c22:	481c      	ldr	r0, [pc, #112]	; (8000c94 <Get_and_Append_CAN_Message_to_Buffer+0x100>)
 8000c24:	f008 f8e4 	bl	8008df0 <sniprintf>
			HAL_GetTick(), RxHeader.ExtId, data1, data2, data3, data4);

	strcat(double_buffer[filling_buffer], "1234567890abcdefghijklmnopqrstu\n");//encodedData);
 8000c28:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <Get_and_Append_CAN_Message_to_Buffer+0x104>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4613      	mov	r3, r2
 8000c30:	031b      	lsls	r3, r3, #12
 8000c32:	4413      	add	r3, r2
 8000c34:	4a19      	ldr	r2, [pc, #100]	; (8000c9c <Get_and_Append_CAN_Message_to_Buffer+0x108>)
 8000c36:	189c      	adds	r4, r3, r2
 8000c38:	4620      	mov	r0, r4
 8000c3a:	f7ff fb01 	bl	8000240 <strlen>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	4423      	add	r3, r4
 8000c42:	4a17      	ldr	r2, [pc, #92]	; (8000ca0 <Get_and_Append_CAN_Message_to_Buffer+0x10c>)
 8000c44:	4614      	mov	r4, r2
 8000c46:	469c      	mov	ip, r3
 8000c48:	f104 0e20 	add.w	lr, r4, #32
 8000c4c:	4665      	mov	r5, ip
 8000c4e:	4626      	mov	r6, r4
 8000c50:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c52:	6028      	str	r0, [r5, #0]
 8000c54:	6069      	str	r1, [r5, #4]
 8000c56:	60aa      	str	r2, [r5, #8]
 8000c58:	60eb      	str	r3, [r5, #12]
 8000c5a:	3410      	adds	r4, #16
 8000c5c:	f10c 0c10 	add.w	ip, ip, #16
 8000c60:	4574      	cmp	r4, lr
 8000c62:	d1f3      	bne.n	8000c4c <Get_and_Append_CAN_Message_to_Buffer+0xb8>
 8000c64:	4663      	mov	r3, ip
 8000c66:	4622      	mov	r2, r4
 8000c68:	7812      	ldrb	r2, [r2, #0]
 8000c6a:	701a      	strb	r2, [r3, #0]
	double_buffer_fill_level[filling_buffer]++;
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <Get_and_Append_CAN_Message_to_Buffer+0x104>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	4a0c      	ldr	r2, [pc, #48]	; (8000ca4 <Get_and_Append_CAN_Message_to_Buffer+0x110>)
 8000c72:	5cd2      	ldrb	r2, [r2, r3]
 8000c74:	3201      	adds	r2, #1
 8000c76:	b2d1      	uxtb	r1, r2
 8000c78:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <Get_and_Append_CAN_Message_to_Buffer+0x110>)
 8000c7a:	54d1      	strb	r1, [r2, r3]
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c84:	2000031c 	.word	0x2000031c
 8000c88:	20000300 	.word	0x20000300
 8000c8c:	20000084 	.word	0x20000084
 8000c90:	0800a200 	.word	0x0800a200
 8000c94:	2000027c 	.word	0x2000027c
 8000c98:	2000232a 	.word	0x2000232a
 8000c9c:	20000324 	.word	0x20000324
 8000ca0:	0800a220 	.word	0x0800a220
 8000ca4:	20002328 	.word	0x20002328

08000ca8 <CAN_Filter_Config>:


void CAN_Filter_Config(void) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08c      	sub	sp, #48	; 0x30
 8000cac:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filter;

	uint32_t filter_mask = 0x00000000;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t filter_id = 0x000A0000;
 8000cb2:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28

	filter.FilterIdHigh = ((filter_id << 5) | (filter_id >> (32 - 5))) & 0xFFFF; // STID[10:0] & EXTID[17:13]
 8000cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cba:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = (filter_id >> (11 - 3)) & 0xFFF8; // EXID[12:5] & 3 Reserved bits
 8000cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc4:	0a1a      	lsrs	r2, r3, #8
 8000cc6:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000cca:	4013      	ands	r3, r2
 8000ccc:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = ((filter_mask << 5) | (filter_mask >> (32 - 5)))
 8000cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cd0:	ea4f 63f3 	mov.w	r3, r3, ror #27
			& 0xFFFF;
 8000cd4:	b29b      	uxth	r3, r3
	filter.FilterMaskIdHigh = ((filter_mask << 5) | (filter_mask >> (32 - 5)))
 8000cd6:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = (filter_mask >> (11 - 3)) & 0xFFF8;
 8000cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cda:	0a1a      	lsrs	r2, r3, #8
 8000cdc:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	60fb      	str	r3, [r7, #12]

	filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	613b      	str	r3, [r7, #16]
	filter.FilterBank = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61bb      	str	r3, [r7, #24]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	61fb      	str	r3, [r7, #28]
	filter.FilterActivation = ENABLE;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	623b      	str	r3, [r7, #32]

	if (HAL_CAN_ConfigFilter(&hcan1, &filter) != HAL_OK) {
 8000cf8:	463b      	mov	r3, r7
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	480a      	ldr	r0, [pc, #40]	; (8000d28 <CAN_Filter_Config+0x80>)
 8000cfe:	f000 fce9 	bl	80016d4 <HAL_CAN_ConfigFilter>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <CAN_Filter_Config+0x64>
		Error_Handler();
 8000d08:	f000 f850 	bl	8000dac <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)
 8000d0c:	2102      	movs	r1, #2
 8000d0e:	4806      	ldr	r0, [pc, #24]	; (8000d28 <CAN_Filter_Config+0x80>)
 8000d10:	f000 ff22 	bl	8001b58 <HAL_CAN_ActivateNotification>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <CAN_Filter_Config+0x76>
			!= HAL_OK) {
		/* Notification Error */
		Error_Handler();
 8000d1a:	f000 f847 	bl	8000dac <Error_Handler>
	}
}
 8000d1e:	bf00      	nop
 8000d20:	3730      	adds	r7, #48	; 0x30
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000084 	.word	0x20000084

08000d2c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	if (double_buffer_fill_level[0] == CAN_MESSAGES_TO_BUFFER &&
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b80      	cmp	r3, #128	; 0x80
 8000d3a:	d105      	bne.n	8000d48 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
			double_buffer_fill_level[1] == CAN_MESSAGES_TO_BUFFER) Error_Handler();
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000d3e:	785b      	ldrb	r3, [r3, #1]
	if (double_buffer_fill_level[0] == CAN_MESSAGES_TO_BUFFER &&
 8000d40:	2b80      	cmp	r3, #128	; 0x80
 8000d42:	d101      	bne.n	8000d48 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
			double_buffer_fill_level[1] == CAN_MESSAGES_TO_BUFFER) Error_Handler();
 8000d44:	f000 f832 	bl	8000dac <Error_Handler>

	Get_and_Append_CAN_Message_to_Buffer();
 8000d48:	f7ff ff24 	bl	8000b94 <Get_and_Append_CAN_Message_to_Buffer>

	if (double_buffer_fill_level[filling_buffer] == CAN_MESSAGES_TO_BUFFER) {
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000d54:	5c9b      	ldrb	r3, [r3, r2]
 8000d56:	2b80      	cmp	r3, #128	; 0x80
 8000d58:	d10c      	bne.n	8000d74 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
		buffer_filled = 1;
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	701a      	strb	r2, [r3, #0]
		filling_buffer = !filling_buffer;
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	bf0c      	ite	eq
 8000d68:	2301      	moveq	r3, #1
 8000d6a:	2300      	movne	r3, #0
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	461a      	mov	r2, r3
 8000d70:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000d72:	701a      	strb	r2, [r3, #0]
	}
}
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20002328 	.word	0x20002328
 8000d80:	2000232a 	.word	0x2000232a
 8000d84:	20002330 	.word	0x20002330

08000d88 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8000d90:	1d39      	adds	r1, r7, #4
 8000d92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d96:	2201      	movs	r2, #1
 8000d98:	4803      	ldr	r0, [pc, #12]	; (8000da8 <__io_putchar+0x20>)
 8000d9a:	f004 fa4b 	bl	8005234 <HAL_UART_Transmit>

	return ch;
 8000d9e:	687b      	ldr	r3, [r7, #4]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	200001f0 	.word	0x200001f0

08000dac <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db0:	b672      	cpsid	i
}
 8000db2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	printf("\r\nError Handler Reached\r\n");
 8000db4:	4801      	ldr	r0, [pc, #4]	; (8000dbc <Error_Handler+0x10>)
 8000db6:	f008 f977 	bl	80090a8 <puts>
	while (1) {
 8000dba:	e7fe      	b.n	8000dba <Error_Handler+0xe>
 8000dbc:	0800a244 	.word	0x0800a244

08000dc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <HAL_MspInit+0x44>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <HAL_MspInit+0x44>)
 8000dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <HAL_MspInit+0x44>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <HAL_MspInit+0x44>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	4a08      	ldr	r2, [pc, #32]	; (8000e04 <HAL_MspInit+0x44>)
 8000de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_MspInit+0x44>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	40023800 	.word	0x40023800

08000e08 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	; 0x28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a1b      	ldr	r2, [pc, #108]	; (8000e94 <HAL_CAN_MspInit+0x8c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d12f      	bne.n	8000e8a <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e2a:	4b1b      	ldr	r3, [pc, #108]	; (8000e98 <HAL_CAN_MspInit+0x90>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	4a1a      	ldr	r2, [pc, #104]	; (8000e98 <HAL_CAN_MspInit+0x90>)
 8000e30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e34:	6413      	str	r3, [r2, #64]	; 0x40
 8000e36:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <HAL_CAN_MspInit+0x90>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e42:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <HAL_CAN_MspInit+0x90>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a14      	ldr	r2, [pc, #80]	; (8000e98 <HAL_CAN_MspInit+0x90>)
 8000e48:	f043 0308 	orr.w	r3, r3, #8
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_CAN_MspInit+0x90>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0308 	and.w	r3, r3, #8
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e6a:	2309      	movs	r3, #9
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4619      	mov	r1, r3
 8000e74:	4809      	ldr	r0, [pc, #36]	; (8000e9c <HAL_CAN_MspInit+0x94>)
 8000e76:	f001 fd7d 	bl	8002974 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2014      	movs	r0, #20
 8000e80:	f001 f99b 	bl	80021ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000e84:	2014      	movs	r0, #20
 8000e86:	f001 f9b4 	bl	80021f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000e8a:	bf00      	nop
 8000e8c:	3728      	adds	r7, #40	; 0x28
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40006400 	.word	0x40006400
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020c00 	.word	0x40020c00

08000ea0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b0ae      	sub	sp, #184	; 0xb8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	2290      	movs	r2, #144	; 0x90
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f008 f8f9 	bl	80090b8 <memset>
  if(hsd->Instance==SDMMC1)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a73      	ldr	r2, [pc, #460]	; (8001098 <HAL_SD_MspInit+0x1f8>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	f040 80de 	bne.w	800108e <HAL_SD_MspInit+0x1ee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8000ed2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000ed6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 8000ed8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000edc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f002 fc07 	bl	80036f8 <HAL_RCCEx_PeriphCLKConfig>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8000ef0:	f7ff ff5c 	bl	8000dac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000ef4:	4b69      	ldr	r3, [pc, #420]	; (800109c <HAL_SD_MspInit+0x1fc>)
 8000ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef8:	4a68      	ldr	r2, [pc, #416]	; (800109c <HAL_SD_MspInit+0x1fc>)
 8000efa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000efe:	6453      	str	r3, [r2, #68]	; 0x44
 8000f00:	4b66      	ldr	r3, [pc, #408]	; (800109c <HAL_SD_MspInit+0x1fc>)
 8000f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0c:	4b63      	ldr	r3, [pc, #396]	; (800109c <HAL_SD_MspInit+0x1fc>)
 8000f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f10:	4a62      	ldr	r2, [pc, #392]	; (800109c <HAL_SD_MspInit+0x1fc>)
 8000f12:	f043 0304 	orr.w	r3, r3, #4
 8000f16:	6313      	str	r3, [r2, #48]	; 0x30
 8000f18:	4b60      	ldr	r3, [pc, #384]	; (800109c <HAL_SD_MspInit+0x1fc>)
 8000f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1c:	f003 0304 	and.w	r3, r3, #4
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f24:	4b5d      	ldr	r3, [pc, #372]	; (800109c <HAL_SD_MspInit+0x1fc>)
 8000f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f28:	4a5c      	ldr	r2, [pc, #368]	; (800109c <HAL_SD_MspInit+0x1fc>)
 8000f2a:	f043 0308 	orr.w	r3, r3, #8
 8000f2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f30:	4b5a      	ldr	r3, [pc, #360]	; (800109c <HAL_SD_MspInit+0x1fc>)
 8000f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f34:	f003 0308 	and.w	r3, r3, #8
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000f3c:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000f40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	2302      	movs	r3, #2
 8000f46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f50:	2303      	movs	r3, #3
 8000f52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000f56:	230c      	movs	r3, #12
 8000f58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f5c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f60:	4619      	mov	r1, r3
 8000f62:	484f      	ldr	r0, [pc, #316]	; (80010a0 <HAL_SD_MspInit+0x200>)
 8000f64:	f001 fd06 	bl	8002974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f68:	2304      	movs	r3, #4
 8000f6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000f80:	230c      	movs	r3, #12
 8000f82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f86:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4845      	ldr	r0, [pc, #276]	; (80010a4 <HAL_SD_MspInit+0x204>)
 8000f8e:	f001 fcf1 	bl	8002974 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8000f92:	4b45      	ldr	r3, [pc, #276]	; (80010a8 <HAL_SD_MspInit+0x208>)
 8000f94:	4a45      	ldr	r2, [pc, #276]	; (80010ac <HAL_SD_MspInit+0x20c>)
 8000f96:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8000f98:	4b43      	ldr	r3, [pc, #268]	; (80010a8 <HAL_SD_MspInit+0x208>)
 8000f9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f9e:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fa0:	4b41      	ldr	r3, [pc, #260]	; (80010a8 <HAL_SD_MspInit+0x208>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fa6:	4b40      	ldr	r3, [pc, #256]	; (80010a8 <HAL_SD_MspInit+0x208>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fac:	4b3e      	ldr	r3, [pc, #248]	; (80010a8 <HAL_SD_MspInit+0x208>)
 8000fae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fb2:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000fb4:	4b3c      	ldr	r3, [pc, #240]	; (80010a8 <HAL_SD_MspInit+0x208>)
 8000fb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fba:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000fbc:	4b3a      	ldr	r3, [pc, #232]	; (80010a8 <HAL_SD_MspInit+0x208>)
 8000fbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fc2:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8000fc4:	4b38      	ldr	r3, [pc, #224]	; (80010a8 <HAL_SD_MspInit+0x208>)
 8000fc6:	2220      	movs	r2, #32
 8000fc8:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fca:	4b37      	ldr	r3, [pc, #220]	; (80010a8 <HAL_SD_MspInit+0x208>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000fd0:	4b35      	ldr	r3, [pc, #212]	; (80010a8 <HAL_SD_MspInit+0x208>)
 8000fd2:	2204      	movs	r2, #4
 8000fd4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000fd6:	4b34      	ldr	r3, [pc, #208]	; (80010a8 <HAL_SD_MspInit+0x208>)
 8000fd8:	2203      	movs	r2, #3
 8000fda:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000fdc:	4b32      	ldr	r3, [pc, #200]	; (80010a8 <HAL_SD_MspInit+0x208>)
 8000fde:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000fe2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000fe4:	4b30      	ldr	r3, [pc, #192]	; (80010a8 <HAL_SD_MspInit+0x208>)
 8000fe6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000fea:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8000fec:	482e      	ldr	r0, [pc, #184]	; (80010a8 <HAL_SD_MspInit+0x208>)
 8000fee:	f001 f91b 	bl	8002228 <HAL_DMA_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <HAL_SD_MspInit+0x15c>
    {
      Error_Handler();
 8000ff8:	f7ff fed8 	bl	8000dac <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a2a      	ldr	r2, [pc, #168]	; (80010a8 <HAL_SD_MspInit+0x208>)
 8001000:	641a      	str	r2, [r3, #64]	; 0x40
 8001002:	4a29      	ldr	r2, [pc, #164]	; (80010a8 <HAL_SD_MspInit+0x208>)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8001008:	4b29      	ldr	r3, [pc, #164]	; (80010b0 <HAL_SD_MspInit+0x210>)
 800100a:	4a2a      	ldr	r2, [pc, #168]	; (80010b4 <HAL_SD_MspInit+0x214>)
 800100c:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800100e:	4b28      	ldr	r3, [pc, #160]	; (80010b0 <HAL_SD_MspInit+0x210>)
 8001010:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001014:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001016:	4b26      	ldr	r3, [pc, #152]	; (80010b0 <HAL_SD_MspInit+0x210>)
 8001018:	2240      	movs	r2, #64	; 0x40
 800101a:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800101c:	4b24      	ldr	r3, [pc, #144]	; (80010b0 <HAL_SD_MspInit+0x210>)
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001022:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <HAL_SD_MspInit+0x210>)
 8001024:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001028:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800102a:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <HAL_SD_MspInit+0x210>)
 800102c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001030:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001032:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <HAL_SD_MspInit+0x210>)
 8001034:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001038:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 800103a:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <HAL_SD_MspInit+0x210>)
 800103c:	2220      	movs	r2, #32
 800103e:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <HAL_SD_MspInit+0x210>)
 8001042:	2200      	movs	r2, #0
 8001044:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001046:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <HAL_SD_MspInit+0x210>)
 8001048:	2204      	movs	r2, #4
 800104a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800104c:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <HAL_SD_MspInit+0x210>)
 800104e:	2203      	movs	r2, #3
 8001050:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001052:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <HAL_SD_MspInit+0x210>)
 8001054:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001058:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <HAL_SD_MspInit+0x210>)
 800105c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001060:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8001062:	4813      	ldr	r0, [pc, #76]	; (80010b0 <HAL_SD_MspInit+0x210>)
 8001064:	f001 f8e0 	bl	8002228 <HAL_DMA_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <HAL_SD_MspInit+0x1d2>
    {
      Error_Handler();
 800106e:	f7ff fe9d 	bl	8000dac <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a0e      	ldr	r2, [pc, #56]	; (80010b0 <HAL_SD_MspInit+0x210>)
 8001076:	63da      	str	r2, [r3, #60]	; 0x3c
 8001078:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <HAL_SD_MspInit+0x210>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	2031      	movs	r0, #49	; 0x31
 8001084:	f001 f899 	bl	80021ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001088:	2031      	movs	r0, #49	; 0x31
 800108a:	f001 f8b2 	bl	80021f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800108e:	bf00      	nop
 8001090:	37b8      	adds	r7, #184	; 0xb8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40012c00 	.word	0x40012c00
 800109c:	40023800 	.word	0x40023800
 80010a0:	40020800 	.word	0x40020800
 80010a4:	40020c00 	.word	0x40020c00
 80010a8:	20000130 	.word	0x20000130
 80010ac:	40026458 	.word	0x40026458
 80010b0:	20000190 	.word	0x20000190
 80010b4:	400264a0 	.word	0x400264a0

080010b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b0ae      	sub	sp, #184	; 0xb8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	2290      	movs	r2, #144	; 0x90
 80010d6:	2100      	movs	r1, #0
 80010d8:	4618      	mov	r0, r3
 80010da:	f007 ffed 	bl	80090b8 <memset>
  if(huart->Instance==USART3)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a22      	ldr	r2, [pc, #136]	; (800116c <HAL_UART_MspInit+0xb4>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d13c      	bne.n	8001162 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ec:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010ee:	2300      	movs	r3, #0
 80010f0:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4618      	mov	r0, r3
 80010f8:	f002 fafe 	bl	80036f8 <HAL_RCCEx_PeriphCLKConfig>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001102:	f7ff fe53 	bl	8000dac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001106:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <HAL_UART_MspInit+0xb8>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	4a19      	ldr	r2, [pc, #100]	; (8001170 <HAL_UART_MspInit+0xb8>)
 800110c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001110:	6413      	str	r3, [r2, #64]	; 0x40
 8001112:	4b17      	ldr	r3, [pc, #92]	; (8001170 <HAL_UART_MspInit+0xb8>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800111e:	4b14      	ldr	r3, [pc, #80]	; (8001170 <HAL_UART_MspInit+0xb8>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a13      	ldr	r2, [pc, #76]	; (8001170 <HAL_UART_MspInit+0xb8>)
 8001124:	f043 0308 	orr.w	r3, r3, #8
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <HAL_UART_MspInit+0xb8>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0308 	and.w	r3, r3, #8
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001136:	f44f 7340 	mov.w	r3, #768	; 0x300
 800113a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114a:	2303      	movs	r3, #3
 800114c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001150:	2307      	movs	r3, #7
 8001152:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001156:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800115a:	4619      	mov	r1, r3
 800115c:	4805      	ldr	r0, [pc, #20]	; (8001174 <HAL_UART_MspInit+0xbc>)
 800115e:	f001 fc09 	bl	8002974 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001162:	bf00      	nop
 8001164:	37b8      	adds	r7, #184	; 0xb8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40004800 	.word	0x40004800
 8001170:	40023800 	.word	0x40023800
 8001174:	40020c00 	.word	0x40020c00

08001178 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800117c:	e7fe      	b.n	800117c <NMI_Handler+0x4>

0800117e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001182:	e7fe      	b.n	8001182 <HardFault_Handler+0x4>

08001184 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001188:	e7fe      	b.n	8001188 <MemManage_Handler+0x4>

0800118a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800118e:	e7fe      	b.n	800118e <BusFault_Handler+0x4>

08001190 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001194:	e7fe      	b.n	8001194 <UsageFault_Handler+0x4>

08001196 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011c4:	f000 f946 	bl	8001454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}

080011cc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80011d0:	4802      	ldr	r0, [pc, #8]	; (80011dc <CAN1_RX0_IRQHandler+0x10>)
 80011d2:	f000 fce7 	bl	8001ba4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000084 	.word	0x20000084

080011e0 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80011e4:	4802      	ldr	r0, [pc, #8]	; (80011f0 <SDMMC1_IRQHandler+0x10>)
 80011e6:	f003 f92f 	bl	8004448 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200000ac 	.word	0x200000ac

080011f4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 80011f8:	4802      	ldr	r0, [pc, #8]	; (8001204 <DMA2_Stream3_IRQHandler+0x10>)
 80011fa:	f001 f945 	bl	8002488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000130 	.word	0x20000130

08001208 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 800120c:	4802      	ldr	r0, [pc, #8]	; (8001218 <DMA2_Stream6_IRQHandler+0x10>)
 800120e:	f001 f93b 	bl	8002488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000190 	.word	0x20000190

0800121c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
 800122c:	e00a      	b.n	8001244 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800122e:	f3af 8000 	nop.w
 8001232:	4601      	mov	r1, r0
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	1c5a      	adds	r2, r3, #1
 8001238:	60ba      	str	r2, [r7, #8]
 800123a:	b2ca      	uxtb	r2, r1
 800123c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	3301      	adds	r3, #1
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	697a      	ldr	r2, [r7, #20]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	429a      	cmp	r2, r3
 800124a:	dbf0      	blt.n	800122e <_read+0x12>
  }

  return len;
 800124c:	687b      	ldr	r3, [r7, #4]
}
 800124e:	4618      	mov	r0, r3
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b086      	sub	sp, #24
 800125a:	af00      	add	r7, sp, #0
 800125c:	60f8      	str	r0, [r7, #12]
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
 8001266:	e009      	b.n	800127c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	1c5a      	adds	r2, r3, #1
 800126c:	60ba      	str	r2, [r7, #8]
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fd89 	bl	8000d88 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	3301      	adds	r3, #1
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	429a      	cmp	r2, r3
 8001282:	dbf1      	blt.n	8001268 <_write+0x12>
  }
  return len;
 8001284:	687b      	ldr	r3, [r7, #4]
}
 8001286:	4618      	mov	r0, r3
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <_close>:

int _close(int file)
{
 800128e:	b480      	push	{r7}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001296:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800129a:	4618      	mov	r0, r3
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b083      	sub	sp, #12
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
 80012ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012b6:	605a      	str	r2, [r3, #4]
  return 0;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <_isatty>:

int _isatty(int file)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012ce:	2301      	movs	r3, #1
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001300:	4a14      	ldr	r2, [pc, #80]	; (8001354 <_sbrk+0x5c>)
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <_sbrk+0x60>)
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800130c:	4b13      	ldr	r3, [pc, #76]	; (800135c <_sbrk+0x64>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d102      	bne.n	800131a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <_sbrk+0x64>)
 8001316:	4a12      	ldr	r2, [pc, #72]	; (8001360 <_sbrk+0x68>)
 8001318:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <_sbrk+0x64>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4413      	add	r3, r2
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	429a      	cmp	r2, r3
 8001326:	d207      	bcs.n	8001338 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001328:	f007 fece 	bl	80090c8 <__errno>
 800132c:	4603      	mov	r3, r0
 800132e:	220c      	movs	r2, #12
 8001330:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001332:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001336:	e009      	b.n	800134c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <_sbrk+0x64>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800133e:	4b07      	ldr	r3, [pc, #28]	; (800135c <_sbrk+0x64>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4413      	add	r3, r2
 8001346:	4a05      	ldr	r2, [pc, #20]	; (800135c <_sbrk+0x64>)
 8001348:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800134a:	68fb      	ldr	r3, [r7, #12]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20080000 	.word	0x20080000
 8001358:	00000400 	.word	0x00000400
 800135c:	20002338 	.word	0x20002338
 8001360:	20002930 	.word	0x20002930

08001364 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <SystemInit+0x20>)
 800136a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800136e:	4a05      	ldr	r2, [pc, #20]	; (8001384 <SystemInit+0x20>)
 8001370:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001374:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001388:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800138c:	480d      	ldr	r0, [pc, #52]	; (80013c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800138e:	490e      	ldr	r1, [pc, #56]	; (80013c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001390:	4a0e      	ldr	r2, [pc, #56]	; (80013cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001394:	e002      	b.n	800139c <LoopCopyDataInit>

08001396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800139a:	3304      	adds	r3, #4

0800139c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800139c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800139e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a0:	d3f9      	bcc.n	8001396 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013a2:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013a4:	4c0b      	ldr	r4, [pc, #44]	; (80013d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a8:	e001      	b.n	80013ae <LoopFillZerobss>

080013aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013ac:	3204      	adds	r2, #4

080013ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b0:	d3fb      	bcc.n	80013aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013b2:	f7ff ffd7 	bl	8001364 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013b6:	f007 fe8d 	bl	80090d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ba:	f7ff f917 	bl	80005ec <main>
  bx  lr    
 80013be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013c0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80013c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80013cc:	0800a39c 	.word	0x0800a39c
  ldr r2, =_sbss
 80013d0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80013d4:	20002930 	.word	0x20002930

080013d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013d8:	e7fe      	b.n	80013d8 <ADC_IRQHandler>

080013da <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013de:	2003      	movs	r0, #3
 80013e0:	f000 fee0 	bl	80021a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013e4:	2000      	movs	r0, #0
 80013e6:	f000 f805 	bl	80013f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013ea:	f7ff fce9 	bl	8000dc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <HAL_InitTick+0x54>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_InitTick+0x58>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4619      	mov	r1, r3
 8001406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140a:	fbb3 f3f1 	udiv	r3, r3, r1
 800140e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f000 fefb 	bl	800220e <HAL_SYSTICK_Config>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e00e      	b.n	8001440 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b0f      	cmp	r3, #15
 8001426:	d80a      	bhi.n	800143e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001428:	2200      	movs	r2, #0
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001430:	f000 fec3 	bl	80021ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001434:	4a06      	ldr	r2, [pc, #24]	; (8001450 <HAL_InitTick+0x5c>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	e000      	b.n	8001440 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
}
 8001440:	4618      	mov	r0, r3
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000000 	.word	0x20000000
 800144c:	20000008 	.word	0x20000008
 8001450:	20000004 	.word	0x20000004

08001454 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_IncTick+0x20>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_IncTick+0x24>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4413      	add	r3, r2
 8001464:	4a04      	ldr	r2, [pc, #16]	; (8001478 <HAL_IncTick+0x24>)
 8001466:	6013      	str	r3, [r2, #0]
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000008 	.word	0x20000008
 8001478:	2000233c 	.word	0x2000233c

0800147c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return uwTick;
 8001480:	4b03      	ldr	r3, [pc, #12]	; (8001490 <HAL_GetTick+0x14>)
 8001482:	681b      	ldr	r3, [r3, #0]
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	2000233c 	.word	0x2000233c

08001494 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800149c:	f7ff ffee 	bl	800147c <HAL_GetTick>
 80014a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014ac:	d005      	beq.n	80014ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <HAL_Delay+0x44>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4413      	add	r3, r2
 80014b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ba:	bf00      	nop
 80014bc:	f7ff ffde 	bl	800147c <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d8f7      	bhi.n	80014bc <HAL_Delay+0x28>
  {
  }
}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000008 	.word	0x20000008

080014dc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e0ed      	b.n	80016ca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d102      	bne.n	8001500 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff fc84 	bl	8000e08 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 0201 	orr.w	r2, r2, #1
 800150e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001510:	f7ff ffb4 	bl	800147c <HAL_GetTick>
 8001514:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001516:	e012      	b.n	800153e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001518:	f7ff ffb0 	bl	800147c <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b0a      	cmp	r3, #10
 8001524:	d90b      	bls.n	800153e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2205      	movs	r2, #5
 8001536:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e0c5      	b.n	80016ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0e5      	beq.n	8001518 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 0202 	bic.w	r2, r2, #2
 800155a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800155c:	f7ff ff8e 	bl	800147c <HAL_GetTick>
 8001560:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001562:	e012      	b.n	800158a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001564:	f7ff ff8a 	bl	800147c <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b0a      	cmp	r3, #10
 8001570:	d90b      	bls.n	800158a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001576:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2205      	movs	r2, #5
 8001582:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e09f      	b.n	80016ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1e5      	bne.n	8001564 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	7e1b      	ldrb	r3, [r3, #24]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d108      	bne.n	80015b2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	e007      	b.n	80015c2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	7e5b      	ldrb	r3, [r3, #25]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d108      	bne.n	80015dc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	e007      	b.n	80015ec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	7e9b      	ldrb	r3, [r3, #26]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d108      	bne.n	8001606 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f042 0220 	orr.w	r2, r2, #32
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	e007      	b.n	8001616 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 0220 	bic.w	r2, r2, #32
 8001614:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	7edb      	ldrb	r3, [r3, #27]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d108      	bne.n	8001630 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 0210 	bic.w	r2, r2, #16
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	e007      	b.n	8001640 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f042 0210 	orr.w	r2, r2, #16
 800163e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	7f1b      	ldrb	r3, [r3, #28]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d108      	bne.n	800165a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f042 0208 	orr.w	r2, r2, #8
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	e007      	b.n	800166a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 0208 	bic.w	r2, r2, #8
 8001668:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	7f5b      	ldrb	r3, [r3, #29]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d108      	bne.n	8001684 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f042 0204 	orr.w	r2, r2, #4
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	e007      	b.n	8001694 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f022 0204 	bic.w	r2, r2, #4
 8001692:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	431a      	orrs	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	695b      	ldr	r3, [r3, #20]
 80016a8:	ea42 0103 	orr.w	r1, r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	1e5a      	subs	r2, r3, #1
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b087      	sub	sp, #28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016ea:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80016ec:	7cfb      	ldrb	r3, [r7, #19]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d003      	beq.n	80016fa <HAL_CAN_ConfigFilter+0x26>
 80016f2:	7cfb      	ldrb	r3, [r7, #19]
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	f040 80c7 	bne.w	8001888 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a69      	ldr	r2, [pc, #420]	; (80018a4 <HAL_CAN_ConfigFilter+0x1d0>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d001      	beq.n	8001708 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001704:	4b68      	ldr	r3, [pc, #416]	; (80018a8 <HAL_CAN_ConfigFilter+0x1d4>)
 8001706:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800170e:	f043 0201 	orr.w	r2, r3, #1
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	4a63      	ldr	r2, [pc, #396]	; (80018a8 <HAL_CAN_ConfigFilter+0x1d4>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d111      	bne.n	8001744 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001726:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173a:	021b      	lsls	r3, r3, #8
 800173c:	431a      	orrs	r2, r3
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	695b      	ldr	r3, [r3, #20]
 8001748:	f003 031f 	and.w	r3, r3, #31
 800174c:	2201      	movs	r2, #1
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	43db      	mvns	r3, r3
 800175e:	401a      	ands	r2, r3
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d123      	bne.n	80017b6 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	43db      	mvns	r3, r3
 8001778:	401a      	ands	r2, r3
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001790:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	3248      	adds	r2, #72	; 0x48
 8001796:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017aa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017ac:	6979      	ldr	r1, [r7, #20]
 80017ae:	3348      	adds	r3, #72	; 0x48
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	440b      	add	r3, r1
 80017b4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d122      	bne.n	8001804 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	431a      	orrs	r2, r3
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80017de:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	3248      	adds	r2, #72	; 0x48
 80017e4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017f8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017fa:	6979      	ldr	r1, [r7, #20]
 80017fc:	3348      	adds	r3, #72	; 0x48
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	440b      	add	r3, r1
 8001802:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d109      	bne.n	8001820 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	43db      	mvns	r3, r3
 8001816:	401a      	ands	r2, r3
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800181e:	e007      	b.n	8001830 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	431a      	orrs	r2, r3
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d109      	bne.n	800184c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	43db      	mvns	r3, r3
 8001842:	401a      	ands	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800184a:	e007      	b.n	800185c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	431a      	orrs	r2, r3
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d107      	bne.n	8001874 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	431a      	orrs	r2, r3
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800187a:	f023 0201 	bic.w	r2, r3, #1
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001884:	2300      	movs	r3, #0
 8001886:	e006      	b.n	8001896 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
  }
}
 8001896:	4618      	mov	r0, r3
 8001898:	371c      	adds	r7, #28
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40003400 	.word	0x40003400
 80018a8:	40006400 	.word	0x40006400

080018ac <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d12e      	bne.n	800191e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2202      	movs	r2, #2
 80018c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 0201 	bic.w	r2, r2, #1
 80018d6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80018d8:	f7ff fdd0 	bl	800147c <HAL_GetTick>
 80018dc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80018de:	e012      	b.n	8001906 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018e0:	f7ff fdcc 	bl	800147c <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b0a      	cmp	r3, #10
 80018ec:	d90b      	bls.n	8001906 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2205      	movs	r2, #5
 80018fe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e012      	b.n	800192c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1e5      	bne.n	80018e0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800191a:	2300      	movs	r3, #0
 800191c:	e006      	b.n	800192c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001922:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
  }
}
 800192c:	4618      	mov	r0, r3
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001934:	b480      	push	{r7}
 8001936:	b087      	sub	sp, #28
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
 8001940:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001948:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800194a:	7dfb      	ldrb	r3, [r7, #23]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d003      	beq.n	8001958 <HAL_CAN_GetRxMessage+0x24>
 8001950:	7dfb      	ldrb	r3, [r7, #23]
 8001952:	2b02      	cmp	r3, #2
 8001954:	f040 80f3 	bne.w	8001b3e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10e      	bne.n	800197c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	f003 0303 	and.w	r3, r3, #3
 8001968:	2b00      	cmp	r3, #0
 800196a:	d116      	bne.n	800199a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001970:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e0e7      	b.n	8001b4c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d107      	bne.n	800199a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e0d8      	b.n	8001b4c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	331b      	adds	r3, #27
 80019a2:	011b      	lsls	r3, r3, #4
 80019a4:	4413      	add	r3, r2
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0204 	and.w	r2, r3, #4
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d10c      	bne.n	80019d2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	331b      	adds	r3, #27
 80019c0:	011b      	lsls	r3, r3, #4
 80019c2:	4413      	add	r3, r2
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	0d5b      	lsrs	r3, r3, #21
 80019c8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	e00b      	b.n	80019ea <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	331b      	adds	r3, #27
 80019da:	011b      	lsls	r3, r3, #4
 80019dc:	4413      	add	r3, r2
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	08db      	lsrs	r3, r3, #3
 80019e2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	331b      	adds	r3, #27
 80019f2:	011b      	lsls	r3, r3, #4
 80019f4:	4413      	add	r3, r2
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0202 	and.w	r2, r3, #2
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	331b      	adds	r3, #27
 8001a08:	011b      	lsls	r3, r3, #4
 8001a0a:	4413      	add	r3, r2
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 020f 	and.w	r2, r3, #15
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	331b      	adds	r3, #27
 8001a20:	011b      	lsls	r3, r3, #4
 8001a22:	4413      	add	r3, r2
 8001a24:	3304      	adds	r3, #4
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	0a1b      	lsrs	r3, r3, #8
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	331b      	adds	r3, #27
 8001a38:	011b      	lsls	r3, r3, #4
 8001a3a:	4413      	add	r3, r2
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	0c1b      	lsrs	r3, r3, #16
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	011b      	lsls	r3, r3, #4
 8001a50:	4413      	add	r3, r2
 8001a52:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	011b      	lsls	r3, r3, #4
 8001a66:	4413      	add	r3, r2
 8001a68:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	0a1a      	lsrs	r2, r3, #8
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	3301      	adds	r3, #1
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	011b      	lsls	r3, r3, #4
 8001a80:	4413      	add	r3, r2
 8001a82:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	0c1a      	lsrs	r2, r3, #16
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	011b      	lsls	r3, r3, #4
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	0e1a      	lsrs	r2, r3, #24
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	3303      	adds	r3, #3
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	011b      	lsls	r3, r3, #4
 8001ab4:	4413      	add	r3, r2
 8001ab6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	3304      	adds	r3, #4
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	011b      	lsls	r3, r3, #4
 8001acc:	4413      	add	r3, r2
 8001ace:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	0a1a      	lsrs	r2, r3, #8
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	3305      	adds	r3, #5
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	011b      	lsls	r3, r3, #4
 8001ae6:	4413      	add	r3, r2
 8001ae8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	0c1a      	lsrs	r2, r3, #16
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	3306      	adds	r3, #6
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	011b      	lsls	r3, r3, #4
 8001b00:	4413      	add	r3, r2
 8001b02:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	0e1a      	lsrs	r2, r3, #24
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	3307      	adds	r3, #7
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d108      	bne.n	8001b2a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 0220 	orr.w	r2, r2, #32
 8001b26:	60da      	str	r2, [r3, #12]
 8001b28:	e007      	b.n	8001b3a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	691a      	ldr	r2, [r3, #16]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f042 0220 	orr.w	r2, r2, #32
 8001b38:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	e006      	b.n	8001b4c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b42:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
  }
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	371c      	adds	r7, #28
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b68:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d002      	beq.n	8001b76 <HAL_CAN_ActivateNotification+0x1e>
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d109      	bne.n	8001b8a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6959      	ldr	r1, [r3, #20]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	e006      	b.n	8001b98 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
  }
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	; 0x28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001be0:	6a3b      	ldr	r3, [r7, #32]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d07c      	beq.n	8001ce4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d023      	beq.n	8001c3c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f983 	bl	8001f12 <HAL_CAN_TxMailbox0CompleteCallback>
 8001c0c:	e016      	b.n	8001c3c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d004      	beq.n	8001c22 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c20:	e00c      	b.n	8001c3c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	f003 0308 	and.w	r3, r3, #8
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d004      	beq.n	8001c36 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
 8001c34:	e002      	b.n	8001c3c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f989 	bl	8001f4e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d024      	beq.n	8001c90 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c4e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f963 	bl	8001f26 <HAL_CAN_TxMailbox1CompleteCallback>
 8001c60:	e016      	b.n	8001c90 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d004      	beq.n	8001c76 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
 8001c74:	e00c      	b.n	8001c90 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d004      	beq.n	8001c8a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
 8001c88:	e002      	b.n	8001c90 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f969 	bl	8001f62 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d024      	beq.n	8001ce4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ca2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f943 	bl	8001f3a <HAL_CAN_TxMailbox2CompleteCallback>
 8001cb4:	e016      	b.n	8001ce4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d004      	beq.n	8001cca <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc8:	e00c      	b.n	8001ce4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d004      	beq.n	8001cde <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
 8001cdc:	e002      	b.n	8001ce4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f949 	bl	8001f76 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00c      	beq.n	8001d08 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	f003 0310 	and.w	r3, r3, #16
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d007      	beq.n	8001d08 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2210      	movs	r2, #16
 8001d06:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001d08:	6a3b      	ldr	r3, [r7, #32]
 8001d0a:	f003 0304 	and.w	r3, r3, #4
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00b      	beq.n	8001d2a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d006      	beq.n	8001d2a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2208      	movs	r2, #8
 8001d22:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f930 	bl	8001f8a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001d2a:	6a3b      	ldr	r3, [r7, #32]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d009      	beq.n	8001d48 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d002      	beq.n	8001d48 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7fe fff2 	bl	8000d2c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001d48:	6a3b      	ldr	r3, [r7, #32]
 8001d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00c      	beq.n	8001d6c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	f003 0310 	and.w	r3, r3, #16
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d007      	beq.n	8001d6c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2210      	movs	r2, #16
 8001d6a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001d6c:	6a3b      	ldr	r3, [r7, #32]
 8001d6e:	f003 0320 	and.w	r3, r3, #32
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00b      	beq.n	8001d8e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d006      	beq.n	8001d8e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2208      	movs	r2, #8
 8001d86:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f912 	bl	8001fb2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001d8e:	6a3b      	ldr	r3, [r7, #32]
 8001d90:	f003 0310 	and.w	r3, r3, #16
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d009      	beq.n	8001dac <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d002      	beq.n	8001dac <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f8f9 	bl	8001f9e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001dac:	6a3b      	ldr	r3, [r7, #32]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00b      	beq.n	8001dce <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d006      	beq.n	8001dce <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2210      	movs	r2, #16
 8001dc6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 f8fc 	bl	8001fc6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001dce:	6a3b      	ldr	r3, [r7, #32]
 8001dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00b      	beq.n	8001df0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d006      	beq.n	8001df0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2208      	movs	r2, #8
 8001de8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f8f5 	bl	8001fda <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001df0:	6a3b      	ldr	r3, [r7, #32]
 8001df2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d07b      	beq.n	8001ef2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d072      	beq.n	8001eea <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e04:	6a3b      	ldr	r3, [r7, #32]
 8001e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d008      	beq.n	8001e20 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e20:	6a3b      	ldr	r3, [r7, #32]
 8001e22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d008      	beq.n	8001e3c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	f043 0302 	orr.w	r3, r3, #2
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e3c:	6a3b      	ldr	r3, [r7, #32]
 8001e3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d008      	beq.n	8001e58 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	f043 0304 	orr.w	r3, r3, #4
 8001e56:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e58:	6a3b      	ldr	r3, [r7, #32]
 8001e5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d043      	beq.n	8001eea <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d03e      	beq.n	8001eea <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e72:	2b60      	cmp	r3, #96	; 0x60
 8001e74:	d02b      	beq.n	8001ece <HAL_CAN_IRQHandler+0x32a>
 8001e76:	2b60      	cmp	r3, #96	; 0x60
 8001e78:	d82e      	bhi.n	8001ed8 <HAL_CAN_IRQHandler+0x334>
 8001e7a:	2b50      	cmp	r3, #80	; 0x50
 8001e7c:	d022      	beq.n	8001ec4 <HAL_CAN_IRQHandler+0x320>
 8001e7e:	2b50      	cmp	r3, #80	; 0x50
 8001e80:	d82a      	bhi.n	8001ed8 <HAL_CAN_IRQHandler+0x334>
 8001e82:	2b40      	cmp	r3, #64	; 0x40
 8001e84:	d019      	beq.n	8001eba <HAL_CAN_IRQHandler+0x316>
 8001e86:	2b40      	cmp	r3, #64	; 0x40
 8001e88:	d826      	bhi.n	8001ed8 <HAL_CAN_IRQHandler+0x334>
 8001e8a:	2b30      	cmp	r3, #48	; 0x30
 8001e8c:	d010      	beq.n	8001eb0 <HAL_CAN_IRQHandler+0x30c>
 8001e8e:	2b30      	cmp	r3, #48	; 0x30
 8001e90:	d822      	bhi.n	8001ed8 <HAL_CAN_IRQHandler+0x334>
 8001e92:	2b10      	cmp	r3, #16
 8001e94:	d002      	beq.n	8001e9c <HAL_CAN_IRQHandler+0x2f8>
 8001e96:	2b20      	cmp	r3, #32
 8001e98:	d005      	beq.n	8001ea6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001e9a:	e01d      	b.n	8001ed8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	f043 0308 	orr.w	r3, r3, #8
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ea4:	e019      	b.n	8001eda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	f043 0310 	orr.w	r3, r3, #16
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001eae:	e014      	b.n	8001eda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	f043 0320 	orr.w	r3, r3, #32
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001eb8:	e00f      	b.n	8001eda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ec2:	e00a      	b.n	8001eda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ecc:	e005      	b.n	8001eda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ed6:	e000      	b.n	8001eda <HAL_CAN_IRQHandler+0x336>
            break;
 8001ed8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	699a      	ldr	r2, [r3, #24]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001ee8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2204      	movs	r2, #4
 8001ef0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d008      	beq.n	8001f0a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f872 	bl	8001fee <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f0a:	bf00      	nop
 8001f0c:	3728      	adds	r7, #40	; 0x28
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
	...

08002004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002014:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <__NVIC_SetPriorityGrouping+0x40>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002020:	4013      	ands	r3, r2
 8002022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <__NVIC_SetPriorityGrouping+0x44>)
 800202e:	4313      	orrs	r3, r2
 8002030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002032:	4a04      	ldr	r2, [pc, #16]	; (8002044 <__NVIC_SetPriorityGrouping+0x40>)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	60d3      	str	r3, [r2, #12]
}
 8002038:	bf00      	nop
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000ed00 	.word	0xe000ed00
 8002048:	05fa0000 	.word	0x05fa0000

0800204c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002050:	4b04      	ldr	r3, [pc, #16]	; (8002064 <__NVIC_GetPriorityGrouping+0x18>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	0a1b      	lsrs	r3, r3, #8
 8002056:	f003 0307 	and.w	r3, r3, #7
}
 800205a:	4618      	mov	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002076:	2b00      	cmp	r3, #0
 8002078:	db0b      	blt.n	8002092 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	f003 021f 	and.w	r2, r3, #31
 8002080:	4907      	ldr	r1, [pc, #28]	; (80020a0 <__NVIC_EnableIRQ+0x38>)
 8002082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002086:	095b      	lsrs	r3, r3, #5
 8002088:	2001      	movs	r0, #1
 800208a:	fa00 f202 	lsl.w	r2, r0, r2
 800208e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	e000e100 	.word	0xe000e100

080020a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	6039      	str	r1, [r7, #0]
 80020ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	db0a      	blt.n	80020ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	490c      	ldr	r1, [pc, #48]	; (80020f0 <__NVIC_SetPriority+0x4c>)
 80020be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c2:	0112      	lsls	r2, r2, #4
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	440b      	add	r3, r1
 80020c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020cc:	e00a      	b.n	80020e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	4908      	ldr	r1, [pc, #32]	; (80020f4 <__NVIC_SetPriority+0x50>)
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	3b04      	subs	r3, #4
 80020dc:	0112      	lsls	r2, r2, #4
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	440b      	add	r3, r1
 80020e2:	761a      	strb	r2, [r3, #24]
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	e000e100 	.word	0xe000e100
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b089      	sub	sp, #36	; 0x24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f1c3 0307 	rsb	r3, r3, #7
 8002112:	2b04      	cmp	r3, #4
 8002114:	bf28      	it	cs
 8002116:	2304      	movcs	r3, #4
 8002118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	3304      	adds	r3, #4
 800211e:	2b06      	cmp	r3, #6
 8002120:	d902      	bls.n	8002128 <NVIC_EncodePriority+0x30>
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3b03      	subs	r3, #3
 8002126:	e000      	b.n	800212a <NVIC_EncodePriority+0x32>
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800212c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43da      	mvns	r2, r3
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	401a      	ands	r2, r3
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002140:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	fa01 f303 	lsl.w	r3, r1, r3
 800214a:	43d9      	mvns	r1, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002150:	4313      	orrs	r3, r2
         );
}
 8002152:	4618      	mov	r0, r3
 8002154:	3724      	adds	r7, #36	; 0x24
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
	...

08002160 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3b01      	subs	r3, #1
 800216c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002170:	d301      	bcc.n	8002176 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002172:	2301      	movs	r3, #1
 8002174:	e00f      	b.n	8002196 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002176:	4a0a      	ldr	r2, [pc, #40]	; (80021a0 <SysTick_Config+0x40>)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3b01      	subs	r3, #1
 800217c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800217e:	210f      	movs	r1, #15
 8002180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002184:	f7ff ff8e 	bl	80020a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002188:	4b05      	ldr	r3, [pc, #20]	; (80021a0 <SysTick_Config+0x40>)
 800218a:	2200      	movs	r2, #0
 800218c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800218e:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <SysTick_Config+0x40>)
 8002190:	2207      	movs	r2, #7
 8002192:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	e000e010 	.word	0xe000e010

080021a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7ff ff29 	bl	8002004 <__NVIC_SetPriorityGrouping>
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b086      	sub	sp, #24
 80021be:	af00      	add	r7, sp, #0
 80021c0:	4603      	mov	r3, r0
 80021c2:	60b9      	str	r1, [r7, #8]
 80021c4:	607a      	str	r2, [r7, #4]
 80021c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021cc:	f7ff ff3e 	bl	800204c <__NVIC_GetPriorityGrouping>
 80021d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	68b9      	ldr	r1, [r7, #8]
 80021d6:	6978      	ldr	r0, [r7, #20]
 80021d8:	f7ff ff8e 	bl	80020f8 <NVIC_EncodePriority>
 80021dc:	4602      	mov	r2, r0
 80021de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e2:	4611      	mov	r1, r2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff5d 	bl	80020a4 <__NVIC_SetPriority>
}
 80021ea:	bf00      	nop
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	4603      	mov	r3, r0
 80021fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff ff31 	bl	8002068 <__NVIC_EnableIRQ>
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff ffa2 	bl	8002160 <SysTick_Config>
 800221c:	4603      	mov	r3, r0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002234:	f7ff f922 	bl	800147c <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e099      	b.n	8002378 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2202      	movs	r2, #2
 8002248:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0201 	bic.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002264:	e00f      	b.n	8002286 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002266:	f7ff f909 	bl	800147c <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b05      	cmp	r3, #5
 8002272:	d908      	bls.n	8002286 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2220      	movs	r2, #32
 8002278:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2203      	movs	r2, #3
 800227e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e078      	b.n	8002378 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1e8      	bne.n	8002266 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	4b38      	ldr	r3, [pc, #224]	; (8002380 <HAL_DMA_Init+0x158>)
 80022a0:	4013      	ands	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d107      	bne.n	80022f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e8:	4313      	orrs	r3, r2
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f023 0307 	bic.w	r3, r3, #7
 8002306:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	4313      	orrs	r3, r2
 8002310:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	2b04      	cmp	r3, #4
 8002318:	d117      	bne.n	800234a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	4313      	orrs	r3, r2
 8002322:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00e      	beq.n	800234a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 faa5 	bl	800287c <DMA_CheckFifoParam>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d008      	beq.n	800234a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2240      	movs	r2, #64	; 0x40
 800233c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002346:	2301      	movs	r3, #1
 8002348:	e016      	b.n	8002378 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 fa5c 	bl	8002810 <DMA_CalcBaseAndBitshift>
 8002358:	4603      	mov	r3, r0
 800235a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002360:	223f      	movs	r2, #63	; 0x3f
 8002362:	409a      	lsls	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	e010803f 	.word	0xe010803f

08002384 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
 8002390:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d101      	bne.n	80023aa <HAL_DMA_Start_IT+0x26>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e048      	b.n	800243c <HAL_DMA_Start_IT+0xb8>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d137      	bne.n	800242e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2202      	movs	r2, #2
 80023c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68b9      	ldr	r1, [r7, #8]
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 f9ee 	bl	80027b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023dc:	223f      	movs	r2, #63	; 0x3f
 80023de:	409a      	lsls	r2, r3
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0216 	orr.w	r2, r2, #22
 80023f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	695a      	ldr	r2, [r3, #20]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002402:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	2b00      	cmp	r3, #0
 800240a:	d007      	beq.n	800241c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0208 	orr.w	r2, r2, #8
 800241a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 0201 	orr.w	r2, r2, #1
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	e005      	b.n	800243a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002436:	2302      	movs	r3, #2
 8002438:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800243a:	7dfb      	ldrb	r3, [r7, #23]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d004      	beq.n	8002462 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2280      	movs	r2, #128	; 0x80
 800245c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e00c      	b.n	800247c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2205      	movs	r2, #5
 8002466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0201 	bic.w	r2, r2, #1
 8002478:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002494:	4b8e      	ldr	r3, [pc, #568]	; (80026d0 <HAL_DMA_IRQHandler+0x248>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a8e      	ldr	r2, [pc, #568]	; (80026d4 <HAL_DMA_IRQHandler+0x24c>)
 800249a:	fba2 2303 	umull	r2, r3, r2, r3
 800249e:	0a9b      	lsrs	r3, r3, #10
 80024a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b2:	2208      	movs	r2, #8
 80024b4:	409a      	lsls	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d01a      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d013      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0204 	bic.w	r2, r2, #4
 80024da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e0:	2208      	movs	r2, #8
 80024e2:	409a      	lsls	r2, r3
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ec:	f043 0201 	orr.w	r2, r3, #1
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f8:	2201      	movs	r2, #1
 80024fa:	409a      	lsls	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4013      	ands	r3, r2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d012      	beq.n	800252a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00b      	beq.n	800252a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002516:	2201      	movs	r2, #1
 8002518:	409a      	lsls	r2, r3
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002522:	f043 0202 	orr.w	r2, r3, #2
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252e:	2204      	movs	r2, #4
 8002530:	409a      	lsls	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4013      	ands	r3, r2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d012      	beq.n	8002560 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00b      	beq.n	8002560 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254c:	2204      	movs	r2, #4
 800254e:	409a      	lsls	r2, r3
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002558:	f043 0204 	orr.w	r2, r3, #4
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002564:	2210      	movs	r2, #16
 8002566:	409a      	lsls	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4013      	ands	r3, r2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d043      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b00      	cmp	r3, #0
 800257c:	d03c      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002582:	2210      	movs	r2, #16
 8002584:	409a      	lsls	r2, r3
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d018      	beq.n	80025ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d108      	bne.n	80025b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d024      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	4798      	blx	r3
 80025b6:	e01f      	b.n	80025f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d01b      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	4798      	blx	r3
 80025c8:	e016      	b.n	80025f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d107      	bne.n	80025e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0208 	bic.w	r2, r2, #8
 80025e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fc:	2220      	movs	r2, #32
 80025fe:	409a      	lsls	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4013      	ands	r3, r2
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 808f 	beq.w	8002728 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0310 	and.w	r3, r3, #16
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 8087 	beq.w	8002728 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261e:	2220      	movs	r2, #32
 8002620:	409a      	lsls	r2, r3
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b05      	cmp	r3, #5
 8002630:	d136      	bne.n	80026a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0216 	bic.w	r2, r2, #22
 8002640:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	695a      	ldr	r2, [r3, #20]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002650:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	2b00      	cmp	r3, #0
 8002658:	d103      	bne.n	8002662 <HAL_DMA_IRQHandler+0x1da>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800265e:	2b00      	cmp	r3, #0
 8002660:	d007      	beq.n	8002672 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0208 	bic.w	r2, r2, #8
 8002670:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002676:	223f      	movs	r2, #63	; 0x3f
 8002678:	409a      	lsls	r2, r3
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002692:	2b00      	cmp	r3, #0
 8002694:	d07e      	beq.n	8002794 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	4798      	blx	r3
        }
        return;
 800269e:	e079      	b.n	8002794 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d01d      	beq.n	80026ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10d      	bne.n	80026d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d031      	beq.n	8002728 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	4798      	blx	r3
 80026cc:	e02c      	b.n	8002728 <HAL_DMA_IRQHandler+0x2a0>
 80026ce:	bf00      	nop
 80026d0:	20000000 	.word	0x20000000
 80026d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d023      	beq.n	8002728 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	4798      	blx	r3
 80026e8:	e01e      	b.n	8002728 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10f      	bne.n	8002718 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 0210 	bic.w	r2, r2, #16
 8002706:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272c:	2b00      	cmp	r3, #0
 800272e:	d032      	beq.n	8002796 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b00      	cmp	r3, #0
 800273a:	d022      	beq.n	8002782 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2205      	movs	r2, #5
 8002740:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 0201 	bic.w	r2, r2, #1
 8002752:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	3301      	adds	r3, #1
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	429a      	cmp	r2, r3
 800275e:	d307      	bcc.n	8002770 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f2      	bne.n	8002754 <HAL_DMA_IRQHandler+0x2cc>
 800276e:	e000      	b.n	8002772 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002770:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002786:	2b00      	cmp	r3, #0
 8002788:	d005      	beq.n	8002796 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	4798      	blx	r3
 8002792:	e000      	b.n	8002796 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002794:	bf00      	nop
    }
  }
}
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
 80027c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	2b40      	cmp	r3, #64	; 0x40
 80027e0:	d108      	bne.n	80027f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027f2:	e007      	b.n	8002804 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	60da      	str	r2, [r3, #12]
}
 8002804:	bf00      	nop
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	b2db      	uxtb	r3, r3
 800281e:	3b10      	subs	r3, #16
 8002820:	4a13      	ldr	r2, [pc, #76]	; (8002870 <DMA_CalcBaseAndBitshift+0x60>)
 8002822:	fba2 2303 	umull	r2, r3, r2, r3
 8002826:	091b      	lsrs	r3, r3, #4
 8002828:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800282a:	4a12      	ldr	r2, [pc, #72]	; (8002874 <DMA_CalcBaseAndBitshift+0x64>)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4413      	add	r3, r2
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	461a      	mov	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2b03      	cmp	r3, #3
 800283c:	d908      	bls.n	8002850 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	461a      	mov	r2, r3
 8002844:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <DMA_CalcBaseAndBitshift+0x68>)
 8002846:	4013      	ands	r3, r2
 8002848:	1d1a      	adds	r2, r3, #4
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	659a      	str	r2, [r3, #88]	; 0x58
 800284e:	e006      	b.n	800285e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	461a      	mov	r2, r3
 8002856:	4b08      	ldr	r3, [pc, #32]	; (8002878 <DMA_CalcBaseAndBitshift+0x68>)
 8002858:	4013      	ands	r3, r2
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002862:	4618      	mov	r0, r3
 8002864:	3714      	adds	r7, #20
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	aaaaaaab 	.word	0xaaaaaaab
 8002874:	0800a2bc 	.word	0x0800a2bc
 8002878:	fffffc00 	.word	0xfffffc00

0800287c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002884:	2300      	movs	r3, #0
 8002886:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d11f      	bne.n	80028d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	2b03      	cmp	r3, #3
 800289a:	d856      	bhi.n	800294a <DMA_CheckFifoParam+0xce>
 800289c:	a201      	add	r2, pc, #4	; (adr r2, 80028a4 <DMA_CheckFifoParam+0x28>)
 800289e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a2:	bf00      	nop
 80028a4:	080028b5 	.word	0x080028b5
 80028a8:	080028c7 	.word	0x080028c7
 80028ac:	080028b5 	.word	0x080028b5
 80028b0:	0800294b 	.word	0x0800294b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d046      	beq.n	800294e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028c4:	e043      	b.n	800294e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028ce:	d140      	bne.n	8002952 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028d4:	e03d      	b.n	8002952 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028de:	d121      	bne.n	8002924 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2b03      	cmp	r3, #3
 80028e4:	d837      	bhi.n	8002956 <DMA_CheckFifoParam+0xda>
 80028e6:	a201      	add	r2, pc, #4	; (adr r2, 80028ec <DMA_CheckFifoParam+0x70>)
 80028e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ec:	080028fd 	.word	0x080028fd
 80028f0:	08002903 	.word	0x08002903
 80028f4:	080028fd 	.word	0x080028fd
 80028f8:	08002915 	.word	0x08002915
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002900:	e030      	b.n	8002964 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002906:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d025      	beq.n	800295a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002912:	e022      	b.n	800295a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002918:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800291c:	d11f      	bne.n	800295e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002922:	e01c      	b.n	800295e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2b02      	cmp	r3, #2
 8002928:	d903      	bls.n	8002932 <DMA_CheckFifoParam+0xb6>
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	2b03      	cmp	r3, #3
 800292e:	d003      	beq.n	8002938 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002930:	e018      	b.n	8002964 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	73fb      	strb	r3, [r7, #15]
      break;
 8002936:	e015      	b.n	8002964 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00e      	beq.n	8002962 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	73fb      	strb	r3, [r7, #15]
      break;
 8002948:	e00b      	b.n	8002962 <DMA_CheckFifoParam+0xe6>
      break;
 800294a:	bf00      	nop
 800294c:	e00a      	b.n	8002964 <DMA_CheckFifoParam+0xe8>
      break;
 800294e:	bf00      	nop
 8002950:	e008      	b.n	8002964 <DMA_CheckFifoParam+0xe8>
      break;
 8002952:	bf00      	nop
 8002954:	e006      	b.n	8002964 <DMA_CheckFifoParam+0xe8>
      break;
 8002956:	bf00      	nop
 8002958:	e004      	b.n	8002964 <DMA_CheckFifoParam+0xe8>
      break;
 800295a:	bf00      	nop
 800295c:	e002      	b.n	8002964 <DMA_CheckFifoParam+0xe8>
      break;   
 800295e:	bf00      	nop
 8002960:	e000      	b.n	8002964 <DMA_CheckFifoParam+0xe8>
      break;
 8002962:	bf00      	nop
    }
  } 
  
  return status; 
 8002964:	7bfb      	ldrb	r3, [r7, #15]
}
 8002966:	4618      	mov	r0, r3
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop

08002974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002974:	b480      	push	{r7}
 8002976:	b089      	sub	sp, #36	; 0x24
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800297e:	2300      	movs	r3, #0
 8002980:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002986:	2300      	movs	r3, #0
 8002988:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800298a:	2300      	movs	r3, #0
 800298c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800298e:	2300      	movs	r3, #0
 8002990:	61fb      	str	r3, [r7, #28]
 8002992:	e175      	b.n	8002c80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002994:	2201      	movs	r2, #1
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	4013      	ands	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	f040 8164 	bne.w	8002c7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d005      	beq.n	80029ca <HAL_GPIO_Init+0x56>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d130      	bne.n	8002a2c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	2203      	movs	r2, #3
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43db      	mvns	r3, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4013      	ands	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a00:	2201      	movs	r2, #1
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	091b      	lsrs	r3, r3, #4
 8002a16:	f003 0201 	and.w	r2, r3, #1
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 0303 	and.w	r3, r3, #3
 8002a34:	2b03      	cmp	r3, #3
 8002a36:	d017      	beq.n	8002a68 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	2203      	movs	r2, #3
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f003 0303 	and.w	r3, r3, #3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d123      	bne.n	8002abc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	08da      	lsrs	r2, r3, #3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3208      	adds	r2, #8
 8002a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	220f      	movs	r2, #15
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4013      	ands	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	691a      	ldr	r2, [r3, #16]
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	08da      	lsrs	r2, r3, #3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	3208      	adds	r2, #8
 8002ab6:	69b9      	ldr	r1, [r7, #24]
 8002ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	2203      	movs	r2, #3
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 0203 	and.w	r2, r3, #3
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 80be 	beq.w	8002c7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002afe:	4b66      	ldr	r3, [pc, #408]	; (8002c98 <HAL_GPIO_Init+0x324>)
 8002b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b02:	4a65      	ldr	r2, [pc, #404]	; (8002c98 <HAL_GPIO_Init+0x324>)
 8002b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b08:	6453      	str	r3, [r2, #68]	; 0x44
 8002b0a:	4b63      	ldr	r3, [pc, #396]	; (8002c98 <HAL_GPIO_Init+0x324>)
 8002b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b16:	4a61      	ldr	r2, [pc, #388]	; (8002c9c <HAL_GPIO_Init+0x328>)
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	089b      	lsrs	r3, r3, #2
 8002b1c:	3302      	adds	r3, #2
 8002b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	220f      	movs	r2, #15
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43db      	mvns	r3, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4013      	ands	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a58      	ldr	r2, [pc, #352]	; (8002ca0 <HAL_GPIO_Init+0x32c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d037      	beq.n	8002bb2 <HAL_GPIO_Init+0x23e>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a57      	ldr	r2, [pc, #348]	; (8002ca4 <HAL_GPIO_Init+0x330>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d031      	beq.n	8002bae <HAL_GPIO_Init+0x23a>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a56      	ldr	r2, [pc, #344]	; (8002ca8 <HAL_GPIO_Init+0x334>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d02b      	beq.n	8002baa <HAL_GPIO_Init+0x236>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a55      	ldr	r2, [pc, #340]	; (8002cac <HAL_GPIO_Init+0x338>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d025      	beq.n	8002ba6 <HAL_GPIO_Init+0x232>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a54      	ldr	r2, [pc, #336]	; (8002cb0 <HAL_GPIO_Init+0x33c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d01f      	beq.n	8002ba2 <HAL_GPIO_Init+0x22e>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a53      	ldr	r2, [pc, #332]	; (8002cb4 <HAL_GPIO_Init+0x340>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d019      	beq.n	8002b9e <HAL_GPIO_Init+0x22a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a52      	ldr	r2, [pc, #328]	; (8002cb8 <HAL_GPIO_Init+0x344>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d013      	beq.n	8002b9a <HAL_GPIO_Init+0x226>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a51      	ldr	r2, [pc, #324]	; (8002cbc <HAL_GPIO_Init+0x348>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d00d      	beq.n	8002b96 <HAL_GPIO_Init+0x222>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a50      	ldr	r2, [pc, #320]	; (8002cc0 <HAL_GPIO_Init+0x34c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d007      	beq.n	8002b92 <HAL_GPIO_Init+0x21e>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a4f      	ldr	r2, [pc, #316]	; (8002cc4 <HAL_GPIO_Init+0x350>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d101      	bne.n	8002b8e <HAL_GPIO_Init+0x21a>
 8002b8a:	2309      	movs	r3, #9
 8002b8c:	e012      	b.n	8002bb4 <HAL_GPIO_Init+0x240>
 8002b8e:	230a      	movs	r3, #10
 8002b90:	e010      	b.n	8002bb4 <HAL_GPIO_Init+0x240>
 8002b92:	2308      	movs	r3, #8
 8002b94:	e00e      	b.n	8002bb4 <HAL_GPIO_Init+0x240>
 8002b96:	2307      	movs	r3, #7
 8002b98:	e00c      	b.n	8002bb4 <HAL_GPIO_Init+0x240>
 8002b9a:	2306      	movs	r3, #6
 8002b9c:	e00a      	b.n	8002bb4 <HAL_GPIO_Init+0x240>
 8002b9e:	2305      	movs	r3, #5
 8002ba0:	e008      	b.n	8002bb4 <HAL_GPIO_Init+0x240>
 8002ba2:	2304      	movs	r3, #4
 8002ba4:	e006      	b.n	8002bb4 <HAL_GPIO_Init+0x240>
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e004      	b.n	8002bb4 <HAL_GPIO_Init+0x240>
 8002baa:	2302      	movs	r3, #2
 8002bac:	e002      	b.n	8002bb4 <HAL_GPIO_Init+0x240>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e000      	b.n	8002bb4 <HAL_GPIO_Init+0x240>
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	69fa      	ldr	r2, [r7, #28]
 8002bb6:	f002 0203 	and.w	r2, r2, #3
 8002bba:	0092      	lsls	r2, r2, #2
 8002bbc:	4093      	lsls	r3, r2
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002bc4:	4935      	ldr	r1, [pc, #212]	; (8002c9c <HAL_GPIO_Init+0x328>)
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	089b      	lsrs	r3, r3, #2
 8002bca:	3302      	adds	r3, #2
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bd2:	4b3d      	ldr	r3, [pc, #244]	; (8002cc8 <HAL_GPIO_Init+0x354>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4013      	ands	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bf6:	4a34      	ldr	r2, [pc, #208]	; (8002cc8 <HAL_GPIO_Init+0x354>)
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bfc:	4b32      	ldr	r3, [pc, #200]	; (8002cc8 <HAL_GPIO_Init+0x354>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	43db      	mvns	r3, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c20:	4a29      	ldr	r2, [pc, #164]	; (8002cc8 <HAL_GPIO_Init+0x354>)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c26:	4b28      	ldr	r3, [pc, #160]	; (8002cc8 <HAL_GPIO_Init+0x354>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4013      	ands	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c4a:	4a1f      	ldr	r2, [pc, #124]	; (8002cc8 <HAL_GPIO_Init+0x354>)
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c50:	4b1d      	ldr	r3, [pc, #116]	; (8002cc8 <HAL_GPIO_Init+0x354>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c74:	4a14      	ldr	r2, [pc, #80]	; (8002cc8 <HAL_GPIO_Init+0x354>)
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	61fb      	str	r3, [r7, #28]
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	2b0f      	cmp	r3, #15
 8002c84:	f67f ae86 	bls.w	8002994 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002c88:	bf00      	nop
 8002c8a:	bf00      	nop
 8002c8c:	3724      	adds	r7, #36	; 0x24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	40013800 	.word	0x40013800
 8002ca0:	40020000 	.word	0x40020000
 8002ca4:	40020400 	.word	0x40020400
 8002ca8:	40020800 	.word	0x40020800
 8002cac:	40020c00 	.word	0x40020c00
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	40021400 	.word	0x40021400
 8002cb8:	40021800 	.word	0x40021800
 8002cbc:	40021c00 	.word	0x40021c00
 8002cc0:	40022000 	.word	0x40022000
 8002cc4:	40022400 	.word	0x40022400
 8002cc8:	40013c00 	.word	0x40013c00

08002ccc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691a      	ldr	r2, [r3, #16]
 8002cdc:	887b      	ldrh	r3, [r7, #2]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d002      	beq.n	8002cea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	73fb      	strb	r3, [r7, #15]
 8002ce8:	e001      	b.n	8002cee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cea:	2300      	movs	r3, #0
 8002cec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	460b      	mov	r3, r1
 8002d06:	807b      	strh	r3, [r7, #2]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d0c:	787b      	ldrb	r3, [r7, #1]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d12:	887a      	ldrh	r2, [r7, #2]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002d18:	e003      	b.n	8002d22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002d1a:	887b      	ldrh	r3, [r7, #2]
 8002d1c:	041a      	lsls	r2, r3, #16
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	619a      	str	r2, [r3, #24]
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
	...

08002d30 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d34:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a04      	ldr	r2, [pc, #16]	; (8002d4c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d3e:	6013      	str	r3, [r2, #0]
}
 8002d40:	bf00      	nop
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	40007000 	.word	0x40007000

08002d50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e29b      	b.n	800329e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 8087 	beq.w	8002e82 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d74:	4b96      	ldr	r3, [pc, #600]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 030c 	and.w	r3, r3, #12
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d00c      	beq.n	8002d9a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d80:	4b93      	ldr	r3, [pc, #588]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 030c 	and.w	r3, r3, #12
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d112      	bne.n	8002db2 <HAL_RCC_OscConfig+0x62>
 8002d8c:	4b90      	ldr	r3, [pc, #576]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d98:	d10b      	bne.n	8002db2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d9a:	4b8d      	ldr	r3, [pc, #564]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d06c      	beq.n	8002e80 <HAL_RCC_OscConfig+0x130>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d168      	bne.n	8002e80 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e275      	b.n	800329e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dba:	d106      	bne.n	8002dca <HAL_RCC_OscConfig+0x7a>
 8002dbc:	4b84      	ldr	r3, [pc, #528]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a83      	ldr	r2, [pc, #524]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc6:	6013      	str	r3, [r2, #0]
 8002dc8:	e02e      	b.n	8002e28 <HAL_RCC_OscConfig+0xd8>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10c      	bne.n	8002dec <HAL_RCC_OscConfig+0x9c>
 8002dd2:	4b7f      	ldr	r3, [pc, #508]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a7e      	ldr	r2, [pc, #504]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002dd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	4b7c      	ldr	r3, [pc, #496]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a7b      	ldr	r2, [pc, #492]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002de4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	e01d      	b.n	8002e28 <HAL_RCC_OscConfig+0xd8>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002df4:	d10c      	bne.n	8002e10 <HAL_RCC_OscConfig+0xc0>
 8002df6:	4b76      	ldr	r3, [pc, #472]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a75      	ldr	r2, [pc, #468]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002dfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	4b73      	ldr	r3, [pc, #460]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a72      	ldr	r2, [pc, #456]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e0c:	6013      	str	r3, [r2, #0]
 8002e0e:	e00b      	b.n	8002e28 <HAL_RCC_OscConfig+0xd8>
 8002e10:	4b6f      	ldr	r3, [pc, #444]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a6e      	ldr	r2, [pc, #440]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e1a:	6013      	str	r3, [r2, #0]
 8002e1c:	4b6c      	ldr	r3, [pc, #432]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a6b      	ldr	r2, [pc, #428]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002e22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d013      	beq.n	8002e58 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e30:	f7fe fb24 	bl	800147c <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e38:	f7fe fb20 	bl	800147c <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b64      	cmp	r3, #100	; 0x64
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e229      	b.n	800329e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4a:	4b61      	ldr	r3, [pc, #388]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0f0      	beq.n	8002e38 <HAL_RCC_OscConfig+0xe8>
 8002e56:	e014      	b.n	8002e82 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e58:	f7fe fb10 	bl	800147c <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e60:	f7fe fb0c 	bl	800147c <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b64      	cmp	r3, #100	; 0x64
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e215      	b.n	800329e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e72:	4b57      	ldr	r3, [pc, #348]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0x110>
 8002e7e:	e000      	b.n	8002e82 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d069      	beq.n	8002f62 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e8e:	4b50      	ldr	r3, [pc, #320]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 030c 	and.w	r3, r3, #12
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00b      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e9a:	4b4d      	ldr	r3, [pc, #308]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
 8002ea2:	2b08      	cmp	r3, #8
 8002ea4:	d11c      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x190>
 8002ea6:	4b4a      	ldr	r3, [pc, #296]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d116      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eb2:	4b47      	ldr	r3, [pc, #284]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d005      	beq.n	8002eca <HAL_RCC_OscConfig+0x17a>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d001      	beq.n	8002eca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e1e9      	b.n	800329e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eca:	4b41      	ldr	r3, [pc, #260]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	493d      	ldr	r1, [pc, #244]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ede:	e040      	b.n	8002f62 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d023      	beq.n	8002f30 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ee8:	4b39      	ldr	r3, [pc, #228]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a38      	ldr	r2, [pc, #224]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002eee:	f043 0301 	orr.w	r3, r3, #1
 8002ef2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef4:	f7fe fac2 	bl	800147c <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002efc:	f7fe fabe 	bl	800147c <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e1c7      	b.n	800329e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f0e:	4b30      	ldr	r3, [pc, #192]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0f0      	beq.n	8002efc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f1a:	4b2d      	ldr	r3, [pc, #180]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	4929      	ldr	r1, [pc, #164]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	600b      	str	r3, [r1, #0]
 8002f2e:	e018      	b.n	8002f62 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f30:	4b27      	ldr	r3, [pc, #156]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a26      	ldr	r2, [pc, #152]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002f36:	f023 0301 	bic.w	r3, r3, #1
 8002f3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3c:	f7fe fa9e 	bl	800147c <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f44:	f7fe fa9a 	bl	800147c <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e1a3      	b.n	800329e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f56:	4b1e      	ldr	r3, [pc, #120]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1f0      	bne.n	8002f44 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d038      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d019      	beq.n	8002faa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f76:	4b16      	ldr	r3, [pc, #88]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f7a:	4a15      	ldr	r2, [pc, #84]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002f7c:	f043 0301 	orr.w	r3, r3, #1
 8002f80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f82:	f7fe fa7b 	bl	800147c <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f8a:	f7fe fa77 	bl	800147c <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e180      	b.n	800329e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f9c:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002f9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0f0      	beq.n	8002f8a <HAL_RCC_OscConfig+0x23a>
 8002fa8:	e01a      	b.n	8002fe0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002faa:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fae:	4a08      	ldr	r2, [pc, #32]	; (8002fd0 <HAL_RCC_OscConfig+0x280>)
 8002fb0:	f023 0301 	bic.w	r3, r3, #1
 8002fb4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb6:	f7fe fa61 	bl	800147c <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fbc:	e00a      	b.n	8002fd4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fbe:	f7fe fa5d 	bl	800147c <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d903      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e166      	b.n	800329e <HAL_RCC_OscConfig+0x54e>
 8002fd0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd4:	4b92      	ldr	r3, [pc, #584]	; (8003220 <HAL_RCC_OscConfig+0x4d0>)
 8002fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1ee      	bne.n	8002fbe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 80a4 	beq.w	8003136 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fee:	4b8c      	ldr	r3, [pc, #560]	; (8003220 <HAL_RCC_OscConfig+0x4d0>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10d      	bne.n	8003016 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ffa:	4b89      	ldr	r3, [pc, #548]	; (8003220 <HAL_RCC_OscConfig+0x4d0>)
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	4a88      	ldr	r2, [pc, #544]	; (8003220 <HAL_RCC_OscConfig+0x4d0>)
 8003000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003004:	6413      	str	r3, [r2, #64]	; 0x40
 8003006:	4b86      	ldr	r3, [pc, #536]	; (8003220 <HAL_RCC_OscConfig+0x4d0>)
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300e:	60bb      	str	r3, [r7, #8]
 8003010:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003012:	2301      	movs	r3, #1
 8003014:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003016:	4b83      	ldr	r3, [pc, #524]	; (8003224 <HAL_RCC_OscConfig+0x4d4>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301e:	2b00      	cmp	r3, #0
 8003020:	d118      	bne.n	8003054 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003022:	4b80      	ldr	r3, [pc, #512]	; (8003224 <HAL_RCC_OscConfig+0x4d4>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a7f      	ldr	r2, [pc, #508]	; (8003224 <HAL_RCC_OscConfig+0x4d4>)
 8003028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800302c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800302e:	f7fe fa25 	bl	800147c <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003036:	f7fe fa21 	bl	800147c <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b64      	cmp	r3, #100	; 0x64
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e12a      	b.n	800329e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003048:	4b76      	ldr	r3, [pc, #472]	; (8003224 <HAL_RCC_OscConfig+0x4d4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0f0      	beq.n	8003036 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d106      	bne.n	800306a <HAL_RCC_OscConfig+0x31a>
 800305c:	4b70      	ldr	r3, [pc, #448]	; (8003220 <HAL_RCC_OscConfig+0x4d0>)
 800305e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003060:	4a6f      	ldr	r2, [pc, #444]	; (8003220 <HAL_RCC_OscConfig+0x4d0>)
 8003062:	f043 0301 	orr.w	r3, r3, #1
 8003066:	6713      	str	r3, [r2, #112]	; 0x70
 8003068:	e02d      	b.n	80030c6 <HAL_RCC_OscConfig+0x376>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10c      	bne.n	800308c <HAL_RCC_OscConfig+0x33c>
 8003072:	4b6b      	ldr	r3, [pc, #428]	; (8003220 <HAL_RCC_OscConfig+0x4d0>)
 8003074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003076:	4a6a      	ldr	r2, [pc, #424]	; (8003220 <HAL_RCC_OscConfig+0x4d0>)
 8003078:	f023 0301 	bic.w	r3, r3, #1
 800307c:	6713      	str	r3, [r2, #112]	; 0x70
 800307e:	4b68      	ldr	r3, [pc, #416]	; (8003220 <HAL_RCC_OscConfig+0x4d0>)
 8003080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003082:	4a67      	ldr	r2, [pc, #412]	; (8003220 <HAL_RCC_OscConfig+0x4d0>)
 8003084:	f023 0304 	bic.w	r3, r3, #4
 8003088:	6713      	str	r3, [r2, #112]	; 0x70
 800308a:	e01c      	b.n	80030c6 <HAL_RCC_OscConfig+0x376>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	2b05      	cmp	r3, #5
 8003092:	d10c      	bne.n	80030ae <HAL_RCC_OscConfig+0x35e>
 8003094:	4b62      	ldr	r3, [pc, #392]	; (8003220 <HAL_RCC_OscConfig+0x4d0>)
 8003096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003098:	4a61      	ldr	r2, [pc, #388]	; (8003220 <HAL_RCC_OscConfig+0x4d0>)
 800309a:	f043 0304 	orr.w	r3, r3, #4
 800309e:	6713      	str	r3, [r2, #112]	; 0x70
 80030a0:	4b5f      	ldr	r3, [pc, #380]	; (8003220 <HAL_RCC_OscConfig+0x4d0>)
 80030a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a4:	4a5e      	ldr	r2, [pc, #376]	; (8003220 <HAL_RCC_OscConfig+0x4d0>)
 80030a6:	f043 0301 	orr.w	r3, r3, #1
 80030aa:	6713      	str	r3, [r2, #112]	; 0x70
 80030ac:	e00b      	b.n	80030c6 <HAL_RCC_OscConfig+0x376>
 80030ae:	4b5c      	ldr	r3, [pc, #368]	; (8003220 <HAL_RCC_OscConfig+0x4d0>)
 80030b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b2:	4a5b      	ldr	r2, [pc, #364]	; (8003220 <HAL_RCC_OscConfig+0x4d0>)
 80030b4:	f023 0301 	bic.w	r3, r3, #1
 80030b8:	6713      	str	r3, [r2, #112]	; 0x70
 80030ba:	4b59      	ldr	r3, [pc, #356]	; (8003220 <HAL_RCC_OscConfig+0x4d0>)
 80030bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030be:	4a58      	ldr	r2, [pc, #352]	; (8003220 <HAL_RCC_OscConfig+0x4d0>)
 80030c0:	f023 0304 	bic.w	r3, r3, #4
 80030c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d015      	beq.n	80030fa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ce:	f7fe f9d5 	bl	800147c <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d4:	e00a      	b.n	80030ec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d6:	f7fe f9d1 	bl	800147c <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e0d8      	b.n	800329e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ec:	4b4c      	ldr	r3, [pc, #304]	; (8003220 <HAL_RCC_OscConfig+0x4d0>)
 80030ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0ee      	beq.n	80030d6 <HAL_RCC_OscConfig+0x386>
 80030f8:	e014      	b.n	8003124 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fa:	f7fe f9bf 	bl	800147c <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003100:	e00a      	b.n	8003118 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003102:	f7fe f9bb 	bl	800147c <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003110:	4293      	cmp	r3, r2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e0c2      	b.n	800329e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003118:	4b41      	ldr	r3, [pc, #260]	; (8003220 <HAL_RCC_OscConfig+0x4d0>)
 800311a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1ee      	bne.n	8003102 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003124:	7dfb      	ldrb	r3, [r7, #23]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d105      	bne.n	8003136 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800312a:	4b3d      	ldr	r3, [pc, #244]	; (8003220 <HAL_RCC_OscConfig+0x4d0>)
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	4a3c      	ldr	r2, [pc, #240]	; (8003220 <HAL_RCC_OscConfig+0x4d0>)
 8003130:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003134:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 80ae 	beq.w	800329c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003140:	4b37      	ldr	r3, [pc, #220]	; (8003220 <HAL_RCC_OscConfig+0x4d0>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 030c 	and.w	r3, r3, #12
 8003148:	2b08      	cmp	r3, #8
 800314a:	d06d      	beq.n	8003228 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	2b02      	cmp	r3, #2
 8003152:	d14b      	bne.n	80031ec <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003154:	4b32      	ldr	r3, [pc, #200]	; (8003220 <HAL_RCC_OscConfig+0x4d0>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a31      	ldr	r2, [pc, #196]	; (8003220 <HAL_RCC_OscConfig+0x4d0>)
 800315a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800315e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003160:	f7fe f98c 	bl	800147c <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003168:	f7fe f988 	bl	800147c <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e091      	b.n	800329e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800317a:	4b29      	ldr	r3, [pc, #164]	; (8003220 <HAL_RCC_OscConfig+0x4d0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f0      	bne.n	8003168 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69da      	ldr	r2, [r3, #28]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	019b      	lsls	r3, r3, #6
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319c:	085b      	lsrs	r3, r3, #1
 800319e:	3b01      	subs	r3, #1
 80031a0:	041b      	lsls	r3, r3, #16
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a8:	061b      	lsls	r3, r3, #24
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b0:	071b      	lsls	r3, r3, #28
 80031b2:	491b      	ldr	r1, [pc, #108]	; (8003220 <HAL_RCC_OscConfig+0x4d0>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031b8:	4b19      	ldr	r3, [pc, #100]	; (8003220 <HAL_RCC_OscConfig+0x4d0>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a18      	ldr	r2, [pc, #96]	; (8003220 <HAL_RCC_OscConfig+0x4d0>)
 80031be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c4:	f7fe f95a 	bl	800147c <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031cc:	f7fe f956 	bl	800147c <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e05f      	b.n	800329e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031de:	4b10      	ldr	r3, [pc, #64]	; (8003220 <HAL_RCC_OscConfig+0x4d0>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0f0      	beq.n	80031cc <HAL_RCC_OscConfig+0x47c>
 80031ea:	e057      	b.n	800329c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ec:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <HAL_RCC_OscConfig+0x4d0>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a0b      	ldr	r2, [pc, #44]	; (8003220 <HAL_RCC_OscConfig+0x4d0>)
 80031f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f8:	f7fe f940 	bl	800147c <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003200:	f7fe f93c 	bl	800147c <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e045      	b.n	800329e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003212:	4b03      	ldr	r3, [pc, #12]	; (8003220 <HAL_RCC_OscConfig+0x4d0>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1f0      	bne.n	8003200 <HAL_RCC_OscConfig+0x4b0>
 800321e:	e03d      	b.n	800329c <HAL_RCC_OscConfig+0x54c>
 8003220:	40023800 	.word	0x40023800
 8003224:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003228:	4b1f      	ldr	r3, [pc, #124]	; (80032a8 <HAL_RCC_OscConfig+0x558>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d030      	beq.n	8003298 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003240:	429a      	cmp	r2, r3
 8003242:	d129      	bne.n	8003298 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800324e:	429a      	cmp	r2, r3
 8003250:	d122      	bne.n	8003298 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003258:	4013      	ands	r3, r2
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800325e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003260:	4293      	cmp	r3, r2
 8003262:	d119      	bne.n	8003298 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326e:	085b      	lsrs	r3, r3, #1
 8003270:	3b01      	subs	r3, #1
 8003272:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003274:	429a      	cmp	r2, r3
 8003276:	d10f      	bne.n	8003298 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003282:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003284:	429a      	cmp	r2, r3
 8003286:	d107      	bne.n	8003298 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003294:	429a      	cmp	r2, r3
 8003296:	d001      	beq.n	800329c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e000      	b.n	800329e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40023800 	.word	0x40023800

080032ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80032b6:	2300      	movs	r3, #0
 80032b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e0d0      	b.n	8003466 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032c4:	4b6a      	ldr	r3, [pc, #424]	; (8003470 <HAL_RCC_ClockConfig+0x1c4>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 030f 	and.w	r3, r3, #15
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d910      	bls.n	80032f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d2:	4b67      	ldr	r3, [pc, #412]	; (8003470 <HAL_RCC_ClockConfig+0x1c4>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f023 020f 	bic.w	r2, r3, #15
 80032da:	4965      	ldr	r1, [pc, #404]	; (8003470 <HAL_RCC_ClockConfig+0x1c4>)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	4313      	orrs	r3, r2
 80032e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e2:	4b63      	ldr	r3, [pc, #396]	; (8003470 <HAL_RCC_ClockConfig+0x1c4>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 030f 	and.w	r3, r3, #15
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d001      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e0b8      	b.n	8003466 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d020      	beq.n	8003342 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0304 	and.w	r3, r3, #4
 8003308:	2b00      	cmp	r3, #0
 800330a:	d005      	beq.n	8003318 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800330c:	4b59      	ldr	r3, [pc, #356]	; (8003474 <HAL_RCC_ClockConfig+0x1c8>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	4a58      	ldr	r2, [pc, #352]	; (8003474 <HAL_RCC_ClockConfig+0x1c8>)
 8003312:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003316:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0308 	and.w	r3, r3, #8
 8003320:	2b00      	cmp	r3, #0
 8003322:	d005      	beq.n	8003330 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003324:	4b53      	ldr	r3, [pc, #332]	; (8003474 <HAL_RCC_ClockConfig+0x1c8>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	4a52      	ldr	r2, [pc, #328]	; (8003474 <HAL_RCC_ClockConfig+0x1c8>)
 800332a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800332e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003330:	4b50      	ldr	r3, [pc, #320]	; (8003474 <HAL_RCC_ClockConfig+0x1c8>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	494d      	ldr	r1, [pc, #308]	; (8003474 <HAL_RCC_ClockConfig+0x1c8>)
 800333e:	4313      	orrs	r3, r2
 8003340:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d040      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d107      	bne.n	8003366 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003356:	4b47      	ldr	r3, [pc, #284]	; (8003474 <HAL_RCC_ClockConfig+0x1c8>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d115      	bne.n	800338e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e07f      	b.n	8003466 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b02      	cmp	r3, #2
 800336c:	d107      	bne.n	800337e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800336e:	4b41      	ldr	r3, [pc, #260]	; (8003474 <HAL_RCC_ClockConfig+0x1c8>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d109      	bne.n	800338e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e073      	b.n	8003466 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800337e:	4b3d      	ldr	r3, [pc, #244]	; (8003474 <HAL_RCC_ClockConfig+0x1c8>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e06b      	b.n	8003466 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800338e:	4b39      	ldr	r3, [pc, #228]	; (8003474 <HAL_RCC_ClockConfig+0x1c8>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f023 0203 	bic.w	r2, r3, #3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	4936      	ldr	r1, [pc, #216]	; (8003474 <HAL_RCC_ClockConfig+0x1c8>)
 800339c:	4313      	orrs	r3, r2
 800339e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033a0:	f7fe f86c 	bl	800147c <HAL_GetTick>
 80033a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a6:	e00a      	b.n	80033be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a8:	f7fe f868 	bl	800147c <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e053      	b.n	8003466 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033be:	4b2d      	ldr	r3, [pc, #180]	; (8003474 <HAL_RCC_ClockConfig+0x1c8>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 020c 	and.w	r2, r3, #12
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d1eb      	bne.n	80033a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033d0:	4b27      	ldr	r3, [pc, #156]	; (8003470 <HAL_RCC_ClockConfig+0x1c4>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 030f 	and.w	r3, r3, #15
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d210      	bcs.n	8003400 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033de:	4b24      	ldr	r3, [pc, #144]	; (8003470 <HAL_RCC_ClockConfig+0x1c4>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f023 020f 	bic.w	r2, r3, #15
 80033e6:	4922      	ldr	r1, [pc, #136]	; (8003470 <HAL_RCC_ClockConfig+0x1c4>)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ee:	4b20      	ldr	r3, [pc, #128]	; (8003470 <HAL_RCC_ClockConfig+0x1c4>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d001      	beq.n	8003400 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e032      	b.n	8003466 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	d008      	beq.n	800341e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800340c:	4b19      	ldr	r3, [pc, #100]	; (8003474 <HAL_RCC_ClockConfig+0x1c8>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	4916      	ldr	r1, [pc, #88]	; (8003474 <HAL_RCC_ClockConfig+0x1c8>)
 800341a:	4313      	orrs	r3, r2
 800341c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b00      	cmp	r3, #0
 8003428:	d009      	beq.n	800343e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800342a:	4b12      	ldr	r3, [pc, #72]	; (8003474 <HAL_RCC_ClockConfig+0x1c8>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	490e      	ldr	r1, [pc, #56]	; (8003474 <HAL_RCC_ClockConfig+0x1c8>)
 800343a:	4313      	orrs	r3, r2
 800343c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800343e:	f000 f821 	bl	8003484 <HAL_RCC_GetSysClockFreq>
 8003442:	4602      	mov	r2, r0
 8003444:	4b0b      	ldr	r3, [pc, #44]	; (8003474 <HAL_RCC_ClockConfig+0x1c8>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	091b      	lsrs	r3, r3, #4
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	490a      	ldr	r1, [pc, #40]	; (8003478 <HAL_RCC_ClockConfig+0x1cc>)
 8003450:	5ccb      	ldrb	r3, [r1, r3]
 8003452:	fa22 f303 	lsr.w	r3, r2, r3
 8003456:	4a09      	ldr	r2, [pc, #36]	; (800347c <HAL_RCC_ClockConfig+0x1d0>)
 8003458:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800345a:	4b09      	ldr	r3, [pc, #36]	; (8003480 <HAL_RCC_ClockConfig+0x1d4>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f7fd ffc8 	bl	80013f4 <HAL_InitTick>

  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40023c00 	.word	0x40023c00
 8003474:	40023800 	.word	0x40023800
 8003478:	0800a2a4 	.word	0x0800a2a4
 800347c:	20000000 	.word	0x20000000
 8003480:	20000004 	.word	0x20000004

08003484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003488:	b094      	sub	sp, #80	; 0x50
 800348a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800348c:	2300      	movs	r3, #0
 800348e:	647b      	str	r3, [r7, #68]	; 0x44
 8003490:	2300      	movs	r3, #0
 8003492:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003494:	2300      	movs	r3, #0
 8003496:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003498:	2300      	movs	r3, #0
 800349a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800349c:	4b79      	ldr	r3, [pc, #484]	; (8003684 <HAL_RCC_GetSysClockFreq+0x200>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 030c 	and.w	r3, r3, #12
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d00d      	beq.n	80034c4 <HAL_RCC_GetSysClockFreq+0x40>
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	f200 80e1 	bhi.w	8003670 <HAL_RCC_GetSysClockFreq+0x1ec>
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d002      	beq.n	80034b8 <HAL_RCC_GetSysClockFreq+0x34>
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	d003      	beq.n	80034be <HAL_RCC_GetSysClockFreq+0x3a>
 80034b6:	e0db      	b.n	8003670 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034b8:	4b73      	ldr	r3, [pc, #460]	; (8003688 <HAL_RCC_GetSysClockFreq+0x204>)
 80034ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034bc:	e0db      	b.n	8003676 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034be:	4b73      	ldr	r3, [pc, #460]	; (800368c <HAL_RCC_GetSysClockFreq+0x208>)
 80034c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034c2:	e0d8      	b.n	8003676 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034c4:	4b6f      	ldr	r3, [pc, #444]	; (8003684 <HAL_RCC_GetSysClockFreq+0x200>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034cc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80034ce:	4b6d      	ldr	r3, [pc, #436]	; (8003684 <HAL_RCC_GetSysClockFreq+0x200>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d063      	beq.n	80035a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034da:	4b6a      	ldr	r3, [pc, #424]	; (8003684 <HAL_RCC_GetSysClockFreq+0x200>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	099b      	lsrs	r3, r3, #6
 80034e0:	2200      	movs	r2, #0
 80034e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80034e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80034e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ec:	633b      	str	r3, [r7, #48]	; 0x30
 80034ee:	2300      	movs	r3, #0
 80034f0:	637b      	str	r3, [r7, #52]	; 0x34
 80034f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80034f6:	4622      	mov	r2, r4
 80034f8:	462b      	mov	r3, r5
 80034fa:	f04f 0000 	mov.w	r0, #0
 80034fe:	f04f 0100 	mov.w	r1, #0
 8003502:	0159      	lsls	r1, r3, #5
 8003504:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003508:	0150      	lsls	r0, r2, #5
 800350a:	4602      	mov	r2, r0
 800350c:	460b      	mov	r3, r1
 800350e:	4621      	mov	r1, r4
 8003510:	1a51      	subs	r1, r2, r1
 8003512:	6139      	str	r1, [r7, #16]
 8003514:	4629      	mov	r1, r5
 8003516:	eb63 0301 	sbc.w	r3, r3, r1
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003528:	4659      	mov	r1, fp
 800352a:	018b      	lsls	r3, r1, #6
 800352c:	4651      	mov	r1, sl
 800352e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003532:	4651      	mov	r1, sl
 8003534:	018a      	lsls	r2, r1, #6
 8003536:	4651      	mov	r1, sl
 8003538:	ebb2 0801 	subs.w	r8, r2, r1
 800353c:	4659      	mov	r1, fp
 800353e:	eb63 0901 	sbc.w	r9, r3, r1
 8003542:	f04f 0200 	mov.w	r2, #0
 8003546:	f04f 0300 	mov.w	r3, #0
 800354a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800354e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003552:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003556:	4690      	mov	r8, r2
 8003558:	4699      	mov	r9, r3
 800355a:	4623      	mov	r3, r4
 800355c:	eb18 0303 	adds.w	r3, r8, r3
 8003560:	60bb      	str	r3, [r7, #8]
 8003562:	462b      	mov	r3, r5
 8003564:	eb49 0303 	adc.w	r3, r9, r3
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	f04f 0200 	mov.w	r2, #0
 800356e:	f04f 0300 	mov.w	r3, #0
 8003572:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003576:	4629      	mov	r1, r5
 8003578:	024b      	lsls	r3, r1, #9
 800357a:	4621      	mov	r1, r4
 800357c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003580:	4621      	mov	r1, r4
 8003582:	024a      	lsls	r2, r1, #9
 8003584:	4610      	mov	r0, r2
 8003586:	4619      	mov	r1, r3
 8003588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800358a:	2200      	movs	r2, #0
 800358c:	62bb      	str	r3, [r7, #40]	; 0x28
 800358e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003590:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003594:	f7fc feac 	bl	80002f0 <__aeabi_uldivmod>
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	4613      	mov	r3, r2
 800359e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035a0:	e058      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035a2:	4b38      	ldr	r3, [pc, #224]	; (8003684 <HAL_RCC_GetSysClockFreq+0x200>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	099b      	lsrs	r3, r3, #6
 80035a8:	2200      	movs	r2, #0
 80035aa:	4618      	mov	r0, r3
 80035ac:	4611      	mov	r1, r2
 80035ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035b2:	623b      	str	r3, [r7, #32]
 80035b4:	2300      	movs	r3, #0
 80035b6:	627b      	str	r3, [r7, #36]	; 0x24
 80035b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035bc:	4642      	mov	r2, r8
 80035be:	464b      	mov	r3, r9
 80035c0:	f04f 0000 	mov.w	r0, #0
 80035c4:	f04f 0100 	mov.w	r1, #0
 80035c8:	0159      	lsls	r1, r3, #5
 80035ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035ce:	0150      	lsls	r0, r2, #5
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	4641      	mov	r1, r8
 80035d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80035da:	4649      	mov	r1, r9
 80035dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80035e0:	f04f 0200 	mov.w	r2, #0
 80035e4:	f04f 0300 	mov.w	r3, #0
 80035e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035f4:	ebb2 040a 	subs.w	r4, r2, sl
 80035f8:	eb63 050b 	sbc.w	r5, r3, fp
 80035fc:	f04f 0200 	mov.w	r2, #0
 8003600:	f04f 0300 	mov.w	r3, #0
 8003604:	00eb      	lsls	r3, r5, #3
 8003606:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800360a:	00e2      	lsls	r2, r4, #3
 800360c:	4614      	mov	r4, r2
 800360e:	461d      	mov	r5, r3
 8003610:	4643      	mov	r3, r8
 8003612:	18e3      	adds	r3, r4, r3
 8003614:	603b      	str	r3, [r7, #0]
 8003616:	464b      	mov	r3, r9
 8003618:	eb45 0303 	adc.w	r3, r5, r3
 800361c:	607b      	str	r3, [r7, #4]
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	e9d7 4500 	ldrd	r4, r5, [r7]
 800362a:	4629      	mov	r1, r5
 800362c:	028b      	lsls	r3, r1, #10
 800362e:	4621      	mov	r1, r4
 8003630:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003634:	4621      	mov	r1, r4
 8003636:	028a      	lsls	r2, r1, #10
 8003638:	4610      	mov	r0, r2
 800363a:	4619      	mov	r1, r3
 800363c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800363e:	2200      	movs	r2, #0
 8003640:	61bb      	str	r3, [r7, #24]
 8003642:	61fa      	str	r2, [r7, #28]
 8003644:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003648:	f7fc fe52 	bl	80002f0 <__aeabi_uldivmod>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	4613      	mov	r3, r2
 8003652:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003654:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <HAL_RCC_GetSysClockFreq+0x200>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	0c1b      	lsrs	r3, r3, #16
 800365a:	f003 0303 	and.w	r3, r3, #3
 800365e:	3301      	adds	r3, #1
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003664:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003668:	fbb2 f3f3 	udiv	r3, r2, r3
 800366c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800366e:	e002      	b.n	8003676 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003670:	4b05      	ldr	r3, [pc, #20]	; (8003688 <HAL_RCC_GetSysClockFreq+0x204>)
 8003672:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003674:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003678:	4618      	mov	r0, r3
 800367a:	3750      	adds	r7, #80	; 0x50
 800367c:	46bd      	mov	sp, r7
 800367e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003682:	bf00      	nop
 8003684:	40023800 	.word	0x40023800
 8003688:	00f42400 	.word	0x00f42400
 800368c:	007a1200 	.word	0x007a1200

08003690 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003694:	4b03      	ldr	r3, [pc, #12]	; (80036a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003696:	681b      	ldr	r3, [r3, #0]
}
 8003698:	4618      	mov	r0, r3
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	20000000 	.word	0x20000000

080036a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036ac:	f7ff fff0 	bl	8003690 <HAL_RCC_GetHCLKFreq>
 80036b0:	4602      	mov	r2, r0
 80036b2:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	0a9b      	lsrs	r3, r3, #10
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	4903      	ldr	r1, [pc, #12]	; (80036cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80036be:	5ccb      	ldrb	r3, [r1, r3]
 80036c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40023800 	.word	0x40023800
 80036cc:	0800a2b4 	.word	0x0800a2b4

080036d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036d4:	f7ff ffdc 	bl	8003690 <HAL_RCC_GetHCLKFreq>
 80036d8:	4602      	mov	r2, r0
 80036da:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	0b5b      	lsrs	r3, r3, #13
 80036e0:	f003 0307 	and.w	r3, r3, #7
 80036e4:	4903      	ldr	r1, [pc, #12]	; (80036f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036e6:	5ccb      	ldrb	r3, [r1, r3]
 80036e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40023800 	.word	0x40023800
 80036f4:	0800a2b4 	.word	0x0800a2b4

080036f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b088      	sub	sp, #32
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003700:	2300      	movs	r3, #0
 8003702:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003704:	2300      	movs	r3, #0
 8003706:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003708:	2300      	movs	r3, #0
 800370a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800370c:	2300      	movs	r3, #0
 800370e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003710:	2300      	movs	r3, #0
 8003712:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b00      	cmp	r3, #0
 800371e:	d012      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003720:	4b69      	ldr	r3, [pc, #420]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	4a68      	ldr	r2, [pc, #416]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003726:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800372a:	6093      	str	r3, [r2, #8]
 800372c:	4b66      	ldr	r3, [pc, #408]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003734:	4964      	ldr	r1, [pc, #400]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003736:	4313      	orrs	r3, r2
 8003738:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003742:	2301      	movs	r3, #1
 8003744:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d017      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003752:	4b5d      	ldr	r3, [pc, #372]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003758:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003760:	4959      	ldr	r1, [pc, #356]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003762:	4313      	orrs	r3, r2
 8003764:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003770:	d101      	bne.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003772:	2301      	movs	r3, #1
 8003774:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800377e:	2301      	movs	r3, #1
 8003780:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d017      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800378e:	4b4e      	ldr	r3, [pc, #312]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003790:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003794:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	494a      	ldr	r1, [pc, #296]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037ac:	d101      	bne.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80037ae:	2301      	movs	r3, #1
 80037b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80037ba:	2301      	movs	r3, #1
 80037bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80037ca:	2301      	movs	r3, #1
 80037cc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 808b 	beq.w	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80037dc:	4b3a      	ldr	r3, [pc, #232]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e0:	4a39      	ldr	r2, [pc, #228]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037e6:	6413      	str	r3, [r2, #64]	; 0x40
 80037e8:	4b37      	ldr	r3, [pc, #220]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f0:	60bb      	str	r3, [r7, #8]
 80037f2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80037f4:	4b35      	ldr	r3, [pc, #212]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a34      	ldr	r2, [pc, #208]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003800:	f7fd fe3c 	bl	800147c <HAL_GetTick>
 8003804:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003806:	e008      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003808:	f7fd fe38 	bl	800147c <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b64      	cmp	r3, #100	; 0x64
 8003814:	d901      	bls.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e38f      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800381a:	4b2c      	ldr	r3, [pc, #176]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003822:	2b00      	cmp	r3, #0
 8003824:	d0f0      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003826:	4b28      	ldr	r3, [pc, #160]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800382e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d035      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	429a      	cmp	r2, r3
 8003842:	d02e      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003844:	4b20      	ldr	r3, [pc, #128]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800384c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800384e:	4b1e      	ldr	r3, [pc, #120]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003852:	4a1d      	ldr	r2, [pc, #116]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003858:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800385a:	4b1b      	ldr	r3, [pc, #108]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800385c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385e:	4a1a      	ldr	r2, [pc, #104]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003864:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003866:	4a18      	ldr	r2, [pc, #96]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800386c:	4b16      	ldr	r3, [pc, #88]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800386e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b01      	cmp	r3, #1
 8003876:	d114      	bne.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003878:	f7fd fe00 	bl	800147c <HAL_GetTick>
 800387c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800387e:	e00a      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003880:	f7fd fdfc 	bl	800147c <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	f241 3288 	movw	r2, #5000	; 0x1388
 800388e:	4293      	cmp	r3, r2
 8003890:	d901      	bls.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e351      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003896:	4b0c      	ldr	r3, [pc, #48]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0ee      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038ae:	d111      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80038b0:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038bc:	4b04      	ldr	r3, [pc, #16]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80038be:	400b      	ands	r3, r1
 80038c0:	4901      	ldr	r1, [pc, #4]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	608b      	str	r3, [r1, #8]
 80038c6:	e00b      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80038c8:	40023800 	.word	0x40023800
 80038cc:	40007000 	.word	0x40007000
 80038d0:	0ffffcff 	.word	0x0ffffcff
 80038d4:	4bac      	ldr	r3, [pc, #688]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	4aab      	ldr	r2, [pc, #684]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038da:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80038de:	6093      	str	r3, [r2, #8]
 80038e0:	4ba9      	ldr	r3, [pc, #676]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ec:	49a6      	ldr	r1, [pc, #664]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0310 	and.w	r3, r3, #16
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d010      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038fe:	4ba2      	ldr	r3, [pc, #648]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003900:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003904:	4aa0      	ldr	r2, [pc, #640]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003906:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800390a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800390e:	4b9e      	ldr	r3, [pc, #632]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003910:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003918:	499b      	ldr	r1, [pc, #620]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800391a:	4313      	orrs	r3, r2
 800391c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00a      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800392c:	4b96      	ldr	r3, [pc, #600]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800392e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003932:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800393a:	4993      	ldr	r1, [pc, #588]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800393c:	4313      	orrs	r3, r2
 800393e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00a      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800394e:	4b8e      	ldr	r3, [pc, #568]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003954:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800395c:	498a      	ldr	r1, [pc, #552]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800395e:	4313      	orrs	r3, r2
 8003960:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00a      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003970:	4b85      	ldr	r3, [pc, #532]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003976:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800397e:	4982      	ldr	r1, [pc, #520]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003980:	4313      	orrs	r3, r2
 8003982:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00a      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003992:	4b7d      	ldr	r3, [pc, #500]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003998:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a0:	4979      	ldr	r1, [pc, #484]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00a      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039b4:	4b74      	ldr	r3, [pc, #464]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ba:	f023 0203 	bic.w	r2, r3, #3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c2:	4971      	ldr	r1, [pc, #452]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00a      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039d6:	4b6c      	ldr	r3, [pc, #432]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039dc:	f023 020c 	bic.w	r2, r3, #12
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e4:	4968      	ldr	r1, [pc, #416]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00a      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039f8:	4b63      	ldr	r3, [pc, #396]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a06:	4960      	ldr	r1, [pc, #384]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a1a:	4b5b      	ldr	r3, [pc, #364]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a20:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a28:	4957      	ldr	r1, [pc, #348]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00a      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a3c:	4b52      	ldr	r3, [pc, #328]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4a:	494f      	ldr	r1, [pc, #316]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003a5e:	4b4a      	ldr	r3, [pc, #296]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a64:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6c:	4946      	ldr	r1, [pc, #280]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003a80:	4b41      	ldr	r3, [pc, #260]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a86:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8e:	493e      	ldr	r1, [pc, #248]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003aa2:	4b39      	ldr	r3, [pc, #228]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab0:	4935      	ldr	r1, [pc, #212]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ac4:	4b30      	ldr	r3, [pc, #192]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ad2:	492d      	ldr	r1, [pc, #180]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d011      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ae6:	4b28      	ldr	r3, [pc, #160]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003af4:	4924      	ldr	r1, [pc, #144]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b04:	d101      	bne.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003b06:	2301      	movs	r3, #1
 8003b08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0308 	and.w	r3, r3, #8
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003b16:	2301      	movs	r3, #1
 8003b18:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b26:	4b18      	ldr	r3, [pc, #96]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b34:	4914      	ldr	r1, [pc, #80]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00b      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b48:	4b0f      	ldr	r3, [pc, #60]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b58:	490b      	ldr	r1, [pc, #44]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00f      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003b6c:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b72:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b7c:	4902      	ldr	r1, [pc, #8]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b84:	e002      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003b86:	bf00      	nop
 8003b88:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00b      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b98:	4b8a      	ldr	r3, [pc, #552]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b9e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba8:	4986      	ldr	r1, [pc, #536]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00b      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003bbc:	4b81      	ldr	r3, [pc, #516]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bc2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bcc:	497d      	ldr	r1, [pc, #500]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d006      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f000 80d6 	beq.w	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003be8:	4b76      	ldr	r3, [pc, #472]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a75      	ldr	r2, [pc, #468]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bf4:	f7fd fc42 	bl	800147c <HAL_GetTick>
 8003bf8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003bfc:	f7fd fc3e 	bl	800147c <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b64      	cmp	r3, #100	; 0x64
 8003c08:	d901      	bls.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e195      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c0e:	4b6d      	ldr	r3, [pc, #436]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1f0      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d021      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d11d      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c2e:	4b65      	ldr	r3, [pc, #404]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c34:	0c1b      	lsrs	r3, r3, #16
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c3c:	4b61      	ldr	r3, [pc, #388]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c42:	0e1b      	lsrs	r3, r3, #24
 8003c44:	f003 030f 	and.w	r3, r3, #15
 8003c48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	019a      	lsls	r2, r3, #6
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	041b      	lsls	r3, r3, #16
 8003c54:	431a      	orrs	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	061b      	lsls	r3, r3, #24
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	071b      	lsls	r3, r3, #28
 8003c62:	4958      	ldr	r1, [pc, #352]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d004      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c7e:	d00a      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d02e      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c94:	d129      	bne.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c96:	4b4b      	ldr	r3, [pc, #300]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c9c:	0c1b      	lsrs	r3, r3, #16
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ca4:	4b47      	ldr	r3, [pc, #284]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003caa:	0f1b      	lsrs	r3, r3, #28
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	019a      	lsls	r2, r3, #6
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	041b      	lsls	r3, r3, #16
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	061b      	lsls	r3, r3, #24
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	071b      	lsls	r3, r3, #28
 8003cca:	493e      	ldr	r1, [pc, #248]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003cd2:	4b3c      	ldr	r3, [pc, #240]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cd8:	f023 021f 	bic.w	r2, r3, #31
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	4938      	ldr	r1, [pc, #224]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d01d      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003cf6:	4b33      	ldr	r3, [pc, #204]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cfc:	0e1b      	lsrs	r3, r3, #24
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d04:	4b2f      	ldr	r3, [pc, #188]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d0a:	0f1b      	lsrs	r3, r3, #28
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	019a      	lsls	r2, r3, #6
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	041b      	lsls	r3, r3, #16
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	061b      	lsls	r3, r3, #24
 8003d24:	431a      	orrs	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	071b      	lsls	r3, r3, #28
 8003d2a:	4926      	ldr	r1, [pc, #152]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d011      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	019a      	lsls	r2, r3, #6
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	041b      	lsls	r3, r3, #16
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	061b      	lsls	r3, r3, #24
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	071b      	lsls	r3, r3, #28
 8003d5a:	491a      	ldr	r1, [pc, #104]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d62:	4b18      	ldr	r3, [pc, #96]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a17      	ldr	r2, [pc, #92]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d6e:	f7fd fb85 	bl	800147c <HAL_GetTick>
 8003d72:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d74:	e008      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d76:	f7fd fb81 	bl	800147c <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b64      	cmp	r3, #100	; 0x64
 8003d82:	d901      	bls.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e0d8      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d88:	4b0e      	ldr	r3, [pc, #56]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0f0      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	f040 80ce 	bne.w	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d9c:	4b09      	ldr	r3, [pc, #36]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a08      	ldr	r2, [pc, #32]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003da2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003da6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003da8:	f7fd fb68 	bl	800147c <HAL_GetTick>
 8003dac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003dae:	e00b      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003db0:	f7fd fb64 	bl	800147c <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b64      	cmp	r3, #100	; 0x64
 8003dbc:	d904      	bls.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e0bb      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003dc2:	bf00      	nop
 8003dc4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003dc8:	4b5e      	ldr	r3, [pc, #376]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dd4:	d0ec      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d009      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d02e      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d12a      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003dfe:	4b51      	ldr	r3, [pc, #324]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e04:	0c1b      	lsrs	r3, r3, #16
 8003e06:	f003 0303 	and.w	r3, r3, #3
 8003e0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e0c:	4b4d      	ldr	r3, [pc, #308]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e12:	0f1b      	lsrs	r3, r3, #28
 8003e14:	f003 0307 	and.w	r3, r3, #7
 8003e18:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	019a      	lsls	r2, r3, #6
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	041b      	lsls	r3, r3, #16
 8003e24:	431a      	orrs	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	061b      	lsls	r3, r3, #24
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	071b      	lsls	r3, r3, #28
 8003e32:	4944      	ldr	r1, [pc, #272]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e3a:	4b42      	ldr	r3, [pc, #264]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e40:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	021b      	lsls	r3, r3, #8
 8003e4c:	493d      	ldr	r1, [pc, #244]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d022      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e68:	d11d      	bne.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e6a:	4b36      	ldr	r3, [pc, #216]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e70:	0e1b      	lsrs	r3, r3, #24
 8003e72:	f003 030f 	and.w	r3, r3, #15
 8003e76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e78:	4b32      	ldr	r3, [pc, #200]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7e:	0f1b      	lsrs	r3, r3, #28
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	019a      	lsls	r2, r3, #6
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	041b      	lsls	r3, r3, #16
 8003e92:	431a      	orrs	r2, r3
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	061b      	lsls	r3, r3, #24
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	071b      	lsls	r3, r3, #28
 8003e9e:	4929      	ldr	r1, [pc, #164]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0308 	and.w	r3, r3, #8
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d028      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003eb2:	4b24      	ldr	r3, [pc, #144]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb8:	0e1b      	lsrs	r3, r3, #24
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ec0:	4b20      	ldr	r3, [pc, #128]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec6:	0c1b      	lsrs	r3, r3, #16
 8003ec8:	f003 0303 	and.w	r3, r3, #3
 8003ecc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	019a      	lsls	r2, r3, #6
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	041b      	lsls	r3, r3, #16
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	061b      	lsls	r3, r3, #24
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	071b      	lsls	r3, r3, #28
 8003ee6:	4917      	ldr	r1, [pc, #92]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003eee:	4b15      	ldr	r3, [pc, #84]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ef4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efc:	4911      	ldr	r1, [pc, #68]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003f04:	4b0f      	ldr	r3, [pc, #60]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a0e      	ldr	r2, [pc, #56]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f10:	f7fd fab4 	bl	800147c <HAL_GetTick>
 8003f14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f16:	e008      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f18:	f7fd fab0 	bl	800147c <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b64      	cmp	r3, #100	; 0x64
 8003f24:	d901      	bls.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e007      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f2a:	4b06      	ldr	r3, [pc, #24]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f36:	d1ef      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3720      	adds	r7, #32
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	40023800 	.word	0x40023800

08003f48 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e022      	b.n	8003fa0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d105      	bne.n	8003f72 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f7fc ff97 	bl	8000ea0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2203      	movs	r2, #3
 8003f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f814 	bl	8003fa8 <HAL_SD_InitCard>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e00a      	b.n	8003fa0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003fa8:	b5b0      	push	{r4, r5, r7, lr}
 8003faa:	b08e      	sub	sp, #56	; 0x38
 8003fac:	af04      	add	r7, sp, #16
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8003fc4:	2376      	movs	r3, #118	; 0x76
 8003fc6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681d      	ldr	r5, [r3, #0]
 8003fcc:	466c      	mov	r4, sp
 8003fce:	f107 0314 	add.w	r3, r7, #20
 8003fd2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003fd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003fda:	f107 0308 	add.w	r3, r7, #8
 8003fde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fe0:	4628      	mov	r0, r5
 8003fe2:	f001 fdc5 	bl	8005b70 <SDMMC_Init>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003fec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e059      	b.n	80040ac <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004006:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4618      	mov	r0, r3
 800400e:	f001 fdf9 	bl	8005c04 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004020:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8004022:	2002      	movs	r0, #2
 8004024:	f7fd fa36 	bl	8001494 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 ff59 	bl	8004ee0 <SD_PowerON>
 800402e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004030:	6a3b      	ldr	r3, [r7, #32]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00b      	beq.n	800404e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	431a      	orrs	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e02e      	b.n	80040ac <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 fe78 	bl	8004d44 <SD_InitCard>
 8004054:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00b      	beq.n	8004074 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004068:	6a3b      	ldr	r3, [r7, #32]
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e01b      	b.n	80040ac <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f44f 7100 	mov.w	r1, #512	; 0x200
 800407c:	4618      	mov	r0, r3
 800407e:	f001 fe53 	bl	8005d28 <SDMMC_CmdBlockLength>
 8004082:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00f      	beq.n	80040aa <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a09      	ldr	r2, [pc, #36]	; (80040b4 <HAL_SD_InitCard+0x10c>)
 8004090:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004096:	6a3b      	ldr	r3, [r7, #32]
 8004098:	431a      	orrs	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e000      	b.n	80040ac <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3728      	adds	r7, #40	; 0x28
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bdb0      	pop	{r4, r5, r7, pc}
 80040b4:	004005ff 	.word	0x004005ff

080040b8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b08c      	sub	sp, #48	; 0x30
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
 80040c4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d107      	bne.n	80040e0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e0c3      	b.n	8004268 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	f040 80bc 	bne.w	8004266 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80040f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	441a      	add	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fe:	429a      	cmp	r2, r3
 8004100:	d907      	bls.n	8004112 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004106:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e0aa      	b.n	8004268 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2203      	movs	r2, #3
 8004116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2200      	movs	r2, #0
 8004120:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8004130:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	4a4e      	ldr	r2, [pc, #312]	; (8004270 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8004138:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	4a4d      	ldr	r2, [pc, #308]	; (8004274 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004140:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	2200      	movs	r2, #0
 8004148:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	2200      	movs	r2, #0
 8004150:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	3380      	adds	r3, #128	; 0x80
 8004178:	4619      	mov	r1, r3
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	025b      	lsls	r3, r3, #9
 8004180:	089b      	lsrs	r3, r3, #2
 8004182:	f7fe f8ff 	bl	8002384 <HAL_DMA_Start_IT>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d017      	beq.n	80041bc <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800419a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a35      	ldr	r2, [pc, #212]	; (8004278 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80041a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e055      	b.n	8004268 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0208 	orr.w	r2, r2, #8
 80041ca:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d002      	beq.n	80041da <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 80041d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d6:	025b      	lsls	r3, r3, #9
 80041d8:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80041da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041de:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	025b      	lsls	r3, r3, #9
 80041e4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80041e6:	2390      	movs	r3, #144	; 0x90
 80041e8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80041ea:	2302      	movs	r3, #2
 80041ec:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80041ee:	2300      	movs	r3, #0
 80041f0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80041f2:	2301      	movs	r3, #1
 80041f4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f107 0210 	add.w	r2, r7, #16
 80041fe:	4611      	mov	r1, r2
 8004200:	4618      	mov	r0, r3
 8004202:	f001 fd65 	bl	8005cd0 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d90a      	bls.n	8004222 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2282      	movs	r2, #130	; 0x82
 8004210:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004218:	4618      	mov	r0, r3
 800421a:	f001 fdc9 	bl	8005db0 <SDMMC_CmdReadMultiBlock>
 800421e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004220:	e009      	b.n	8004236 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2281      	movs	r2, #129	; 0x81
 8004226:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800422e:	4618      	mov	r0, r3
 8004230:	f001 fd9c 	bl	8005d6c <SDMMC_CmdReadSingleBlock>
 8004234:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004238:	2b00      	cmp	r3, #0
 800423a:	d012      	beq.n	8004262 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a0d      	ldr	r2, [pc, #52]	; (8004278 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8004242:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424a:	431a      	orrs	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e002      	b.n	8004268 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8004262:	2300      	movs	r3, #0
 8004264:	e000      	b.n	8004268 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8004266:	2302      	movs	r3, #2
  }
}
 8004268:	4618      	mov	r0, r3
 800426a:	3730      	adds	r7, #48	; 0x30
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	08004b53 	.word	0x08004b53
 8004274:	08004bc5 	.word	0x08004bc5
 8004278:	004005ff 	.word	0x004005ff

0800427c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b08c      	sub	sp, #48	; 0x30
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
 8004288:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d107      	bne.n	80042a4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004298:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e0c6      	b.n	8004432 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	f040 80bf 	bne.w	8004430 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80042b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	441a      	add	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d907      	bls.n	80042d6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e0ad      	b.n	8004432 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2203      	movs	r2, #3
 80042da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2200      	movs	r2, #0
 80042e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f042 021a 	orr.w	r2, r2, #26
 80042f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fa:	4a50      	ldr	r2, [pc, #320]	; (800443c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80042fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004302:	4a4f      	ldr	r2, [pc, #316]	; (8004440 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004304:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800430a:	2200      	movs	r2, #0
 800430c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004312:	2b01      	cmp	r3, #1
 8004314:	d002      	beq.n	800431c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8004316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004318:	025b      	lsls	r3, r3, #9
 800431a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d90a      	bls.n	8004338 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	22a0      	movs	r2, #160	; 0xa0
 8004326:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800432e:	4618      	mov	r0, r3
 8004330:	f001 fd82 	bl	8005e38 <SDMMC_CmdWriteMultiBlock>
 8004334:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004336:	e009      	b.n	800434c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2290      	movs	r2, #144	; 0x90
 800433c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004344:	4618      	mov	r0, r3
 8004346:	f001 fd55 	bl	8005df4 <SDMMC_CmdWriteSingleBlock>
 800434a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800434c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434e:	2b00      	cmp	r3, #0
 8004350:	d012      	beq.n	8004378 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a3b      	ldr	r2, [pc, #236]	; (8004444 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004358:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800435e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004360:	431a      	orrs	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e05c      	b.n	8004432 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0208 	orr.w	r2, r2, #8
 8004386:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438c:	2240      	movs	r2, #64	; 0x40
 800438e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a0:	689a      	ldr	r2, [r3, #8]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	430a      	orrs	r2, r1
 80043aa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80043b0:	68b9      	ldr	r1, [r7, #8]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	3380      	adds	r3, #128	; 0x80
 80043b8:	461a      	mov	r2, r3
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	025b      	lsls	r3, r3, #9
 80043be:	089b      	lsrs	r3, r3, #2
 80043c0:	f7fd ffe0 	bl	8002384 <HAL_DMA_Start_IT>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d01a      	beq.n	8004400 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 021a 	bic.w	r2, r2, #26
 80043d8:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a19      	ldr	r2, [pc, #100]	; (8004444 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80043e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e018      	b.n	8004432 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004400:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004404:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	025b      	lsls	r3, r3, #9
 800440a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800440c:	2390      	movs	r3, #144	; 0x90
 800440e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8004410:	2300      	movs	r3, #0
 8004412:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004414:	2300      	movs	r3, #0
 8004416:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8004418:	2301      	movs	r3, #1
 800441a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f107 0210 	add.w	r2, r7, #16
 8004424:	4611      	mov	r1, r2
 8004426:	4618      	mov	r0, r3
 8004428:	f001 fc52 	bl	8005cd0 <SDMMC_ConfigData>

      return HAL_OK;
 800442c:	2300      	movs	r3, #0
 800442e:	e000      	b.n	8004432 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8004430:	2302      	movs	r3, #2
  }
}
 8004432:	4618      	mov	r0, r3
 8004434:	3730      	adds	r7, #48	; 0x30
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	08004b29 	.word	0x08004b29
 8004440:	08004bc5 	.word	0x08004bc5
 8004444:	004005ff 	.word	0x004005ff

08004448 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004454:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800445c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d008      	beq.n	8004476 <HAL_SD_IRQHandler+0x2e>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f003 0308 	and.w	r3, r3, #8
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 fdec 	bl	800504c <SD_Read_IT>
 8004474:	e15a      	b.n	800472c <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800447c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 808d 	beq.w	80045a0 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800448e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	4b9a      	ldr	r3, [pc, #616]	; (8004704 <HAL_SD_IRQHandler+0x2bc>)
 800449c:	400b      	ands	r3, r1
 800449e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 0201 	bic.w	r2, r2, #1
 80044ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f003 0308 	and.w	r3, r3, #8
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d039      	beq.n	800452e <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d104      	bne.n	80044ce <HAL_SD_IRQHandler+0x86>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f003 0320 	and.w	r3, r3, #32
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d011      	beq.n	80044f2 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f001 fcd2 	bl	8005e7c <SDMMC_CmdStopTransfer>
 80044d8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d008      	beq.n	80044f2 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f921 	bl	8004734 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f240 523a 	movw	r2, #1338	; 0x53a
 80044fa:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b00      	cmp	r3, #0
 8004512:	d104      	bne.n	800451e <HAL_SD_IRQHandler+0xd6>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f002 f8f0 	bl	8006704 <HAL_SD_RxCpltCallback>
 8004524:	e102      	b.n	800472c <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f002 f8e2 	bl	80066f0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800452c:	e0fe      	b.n	800472c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 80f9 	beq.w	800472c <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f003 0320 	and.w	r3, r3, #32
 8004540:	2b00      	cmp	r3, #0
 8004542:	d011      	beq.n	8004568 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4618      	mov	r0, r3
 800454a:	f001 fc97 	bl	8005e7c <SDMMC_CmdStopTransfer>
 800454e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d008      	beq.n	8004568 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	431a      	orrs	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f8e6 	bl	8004734 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	f040 80dc 	bne.w	800472c <HAL_SD_IRQHandler+0x2e4>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	f040 80d6 	bne.w	800472c <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0208 	bic.w	r2, r2, #8
 800458e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f002 f8a9 	bl	80066f0 <HAL_SD_TxCpltCallback>
}
 800459e:	e0c5      	b.n	800472c <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d008      	beq.n	80045c0 <HAL_SD_IRQHandler+0x178>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f003 0308 	and.w	r3, r3, #8
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d003      	beq.n	80045c0 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 fd98 	bl	80050ee <SD_Write_IT>
 80045be:	e0b5      	b.n	800472c <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 80ae 	beq.w	800472c <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d005      	beq.n	80045ea <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e2:	f043 0202 	orr.w	r2, r3, #2
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f0:	f003 0308 	and.w	r3, r3, #8
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d005      	beq.n	8004604 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fc:	f043 0208 	orr.w	r2, r3, #8
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460a:	f003 0320 	and.w	r3, r3, #32
 800460e:	2b00      	cmp	r3, #0
 8004610:	d005      	beq.n	800461e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004616:	f043 0220 	orr.w	r2, r3, #32
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004624:	f003 0310 	and.w	r3, r3, #16
 8004628:	2b00      	cmp	r3, #0
 800462a:	d005      	beq.n	8004638 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004630:	f043 0210 	orr.w	r2, r3, #16
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f240 523a 	movw	r2, #1338	; 0x53a
 8004640:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004650:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4618      	mov	r0, r3
 8004658:	f001 fc10 	bl	8005e7c <SDMMC_CmdStopTransfer>
 800465c:	4602      	mov	r2, r0
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f003 0308 	and.w	r3, r3, #8
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00a      	beq.n	8004688 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f857 	bl	8004734 <HAL_SD_ErrorCallback>
}
 8004686:	e051      	b.n	800472c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800468e:	2b00      	cmp	r3, #0
 8004690:	d04c      	beq.n	800472c <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f003 0310 	and.w	r3, r3, #16
 8004698:	2b00      	cmp	r3, #0
 800469a:	d104      	bne.n	80046a6 <HAL_SD_IRQHandler+0x25e>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f003 0320 	and.w	r3, r3, #32
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d011      	beq.n	80046ca <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046aa:	4a17      	ldr	r2, [pc, #92]	; (8004708 <HAL_SD_IRQHandler+0x2c0>)
 80046ac:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7fd fec6 	bl	8002444 <HAL_DMA_Abort_IT>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d036      	beq.n	800472c <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 fad0 	bl	8004c68 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80046c8:	e030      	b.n	800472c <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d104      	bne.n	80046de <HAL_SD_IRQHandler+0x296>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d018      	beq.n	8004710 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	4a0a      	ldr	r2, [pc, #40]	; (800470c <HAL_SD_IRQHandler+0x2c4>)
 80046e4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7fd feaa 	bl	8002444 <HAL_DMA_Abort_IT>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d01a      	beq.n	800472c <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 faeb 	bl	8004cd6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004700:	e014      	b.n	800472c <HAL_SD_IRQHandler+0x2e4>
 8004702:	bf00      	nop
 8004704:	ffff3ec5 	.word	0xffff3ec5
 8004708:	08004c69 	.word	0x08004c69
 800470c:	08004cd7 	.word	0x08004cd7
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f001 ffd9 	bl	80066dc <HAL_SD_AbortCallback>
}
 800472a:	e7ff      	b.n	800472c <HAL_SD_IRQHandler+0x2e4>
 800472c:	bf00      	nop
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004756:	0f9b      	lsrs	r3, r3, #30
 8004758:	b2da      	uxtb	r2, r3
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004762:	0e9b      	lsrs	r3, r3, #26
 8004764:	b2db      	uxtb	r3, r3
 8004766:	f003 030f 	and.w	r3, r3, #15
 800476a:	b2da      	uxtb	r2, r3
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004774:	0e1b      	lsrs	r3, r3, #24
 8004776:	b2db      	uxtb	r3, r3
 8004778:	f003 0303 	and.w	r3, r3, #3
 800477c:	b2da      	uxtb	r2, r3
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004786:	0c1b      	lsrs	r3, r3, #16
 8004788:	b2da      	uxtb	r2, r3
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004792:	0a1b      	lsrs	r3, r3, #8
 8004794:	b2da      	uxtb	r2, r3
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047a8:	0d1b      	lsrs	r3, r3, #20
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047b4:	0c1b      	lsrs	r3, r3, #16
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	f003 030f 	and.w	r3, r3, #15
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047c6:	0bdb      	lsrs	r3, r3, #15
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047d8:	0b9b      	lsrs	r3, r3, #14
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047ea:	0b5b      	lsrs	r3, r3, #13
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047fc:	0b1b      	lsrs	r3, r3, #12
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	b2da      	uxtb	r2, r3
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2200      	movs	r2, #0
 800480e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004814:	2b00      	cmp	r3, #0
 8004816:	d163      	bne.n	80048e0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800481c:	009a      	lsls	r2, r3, #2
 800481e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004822:	4013      	ands	r3, r2
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004828:	0f92      	lsrs	r2, r2, #30
 800482a:	431a      	orrs	r2, r3
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004834:	0edb      	lsrs	r3, r3, #27
 8004836:	b2db      	uxtb	r3, r3
 8004838:	f003 0307 	and.w	r3, r3, #7
 800483c:	b2da      	uxtb	r2, r3
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004846:	0e1b      	lsrs	r3, r3, #24
 8004848:	b2db      	uxtb	r3, r3
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	b2da      	uxtb	r2, r3
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004858:	0d5b      	lsrs	r3, r3, #21
 800485a:	b2db      	uxtb	r3, r3
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	b2da      	uxtb	r2, r3
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800486a:	0c9b      	lsrs	r3, r3, #18
 800486c:	b2db      	uxtb	r3, r3
 800486e:	f003 0307 	and.w	r3, r3, #7
 8004872:	b2da      	uxtb	r2, r3
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800487c:	0bdb      	lsrs	r3, r3, #15
 800487e:	b2db      	uxtb	r3, r3
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	b2da      	uxtb	r2, r3
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	1c5a      	adds	r2, r3, #1
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	7e1b      	ldrb	r3, [r3, #24]
 8004898:	b2db      	uxtb	r3, r3
 800489a:	f003 0307 	and.w	r3, r3, #7
 800489e:	3302      	adds	r3, #2
 80048a0:	2201      	movs	r2, #1
 80048a2:	fa02 f303 	lsl.w	r3, r2, r3
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80048aa:	fb03 f202 	mul.w	r2, r3, r2
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	7a1b      	ldrb	r3, [r3, #8]
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	f003 030f 	and.w	r3, r3, #15
 80048bc:	2201      	movs	r2, #1
 80048be:	409a      	lsls	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80048cc:	0a52      	lsrs	r2, r2, #9
 80048ce:	fb03 f202 	mul.w	r2, r3, r2
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048dc:	661a      	str	r2, [r3, #96]	; 0x60
 80048de:	e031      	b.n	8004944 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d11d      	bne.n	8004924 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048ec:	041b      	lsls	r3, r3, #16
 80048ee:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048f6:	0c1b      	lsrs	r3, r3, #16
 80048f8:	431a      	orrs	r2, r3
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	3301      	adds	r3, #1
 8004904:	029a      	lsls	r2, r3, #10
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004918:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	661a      	str	r2, [r3, #96]	; 0x60
 8004922:	e00f      	b.n	8004944 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a58      	ldr	r2, [pc, #352]	; (8004a8c <HAL_SD_GetCardCSD+0x344>)
 800492a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004930:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e09d      	b.n	8004a80 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004948:	0b9b      	lsrs	r3, r3, #14
 800494a:	b2db      	uxtb	r3, r3
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	b2da      	uxtb	r2, r3
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800495a:	09db      	lsrs	r3, r3, #7
 800495c:	b2db      	uxtb	r3, r3
 800495e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004962:	b2da      	uxtb	r2, r3
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800496c:	b2db      	uxtb	r3, r3
 800496e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004972:	b2da      	uxtb	r2, r3
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497c:	0fdb      	lsrs	r3, r3, #31
 800497e:	b2da      	uxtb	r2, r3
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004988:	0f5b      	lsrs	r3, r3, #29
 800498a:	b2db      	uxtb	r3, r3
 800498c:	f003 0303 	and.w	r3, r3, #3
 8004990:	b2da      	uxtb	r2, r3
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499a:	0e9b      	lsrs	r3, r3, #26
 800499c:	b2db      	uxtb	r3, r3
 800499e:	f003 0307 	and.w	r3, r3, #7
 80049a2:	b2da      	uxtb	r2, r3
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ac:	0d9b      	lsrs	r3, r3, #22
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	f003 030f 	and.w	r3, r3, #15
 80049b4:	b2da      	uxtb	r2, r3
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049be:	0d5b      	lsrs	r3, r3, #21
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	b2da      	uxtb	r2, r3
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049da:	0c1b      	lsrs	r3, r3, #16
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	b2da      	uxtb	r2, r3
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ee:	0bdb      	lsrs	r3, r3, #15
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a02:	0b9b      	lsrs	r3, r3, #14
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	b2da      	uxtb	r2, r3
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a16:	0b5b      	lsrs	r3, r3, #13
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a2a:	0b1b      	lsrs	r3, r3, #12
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	b2da      	uxtb	r2, r3
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3e:	0a9b      	lsrs	r3, r3, #10
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	f003 0303 	and.w	r3, r3, #3
 8004a46:	b2da      	uxtb	r2, r3
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a52:	0a1b      	lsrs	r3, r3, #8
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	f003 0303 	and.w	r3, r3, #3
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a66:	085b      	lsrs	r3, r3, #1
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	004005ff 	.word	0x004005ff

08004a90 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004af0:	2300      	movs	r3, #0
 8004af2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004af4:	f107 030c 	add.w	r3, r7, #12
 8004af8:	4619      	mov	r1, r3
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 fa7e 	bl	8004ffc <SD_SendStatus>
 8004b00:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d005      	beq.n	8004b14 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	0a5b      	lsrs	r3, r3, #9
 8004b18:	f003 030f 	and.w	r3, r3, #15
 8004b1c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004b1e:	693b      	ldr	r3, [r7, #16]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3718      	adds	r7, #24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b34:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b44:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004b46:	bf00      	nop
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b084      	sub	sp, #16
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b64:	2b82      	cmp	r3, #130	; 0x82
 8004b66:	d111      	bne.n	8004b8c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f001 f985 	bl	8005e7c <SDMMC_CmdStopTransfer>
 8004b72:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d008      	beq.n	8004b8c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	431a      	orrs	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f7ff fdd4 	bl	8004734 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0208 	bic.w	r2, r2, #8
 8004b9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f240 523a 	movw	r2, #1338	; 0x53a
 8004ba4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f001 fda5 	bl	8006704 <HAL_SD_RxCpltCallback>
#endif
}
 8004bba:	bf00      	nop
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
	...

08004bc4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7fd fde2 	bl	800279c <HAL_DMA_GetError>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d03e      	beq.n	8004c5c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bec:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d002      	beq.n	8004bfa <SD_DMAError+0x36>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d12d      	bne.n	8004c56 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a19      	ldr	r2, [pc, #100]	; (8004c64 <SD_DMAError+0xa0>)
 8004c00:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004c10:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c16:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004c1e:	6978      	ldr	r0, [r7, #20]
 8004c20:	f7ff ff62 	bl	8004ae8 <HAL_SD_GetCardState>
 8004c24:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	2b06      	cmp	r3, #6
 8004c2a:	d002      	beq.n	8004c32 <SD_DMAError+0x6e>
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	2b05      	cmp	r3, #5
 8004c30:	d10a      	bne.n	8004c48 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f001 f920 	bl	8005e7c <SDMMC_CmdStopTransfer>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c42:	431a      	orrs	r2, r3
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	2200      	movs	r2, #0
 8004c54:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004c56:	6978      	ldr	r0, [r7, #20]
 8004c58:	f7ff fd6c 	bl	8004734 <HAL_SD_ErrorCallback>
#endif
  }
}
 8004c5c:	bf00      	nop
 8004c5e:	3718      	adds	r7, #24
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	004005ff 	.word	0x004005ff

08004c68 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c74:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f240 523a 	movw	r2, #1338	; 0x53a
 8004c7e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f7ff ff31 	bl	8004ae8 <HAL_SD_GetCardState>
 8004c86:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	2b06      	cmp	r3, #6
 8004c9a:	d002      	beq.n	8004ca2 <SD_DMATxAbort+0x3a>
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	2b05      	cmp	r3, #5
 8004ca0:	d10a      	bne.n	8004cb8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f001 f8e8 	bl	8005e7c <SDMMC_CmdStopTransfer>
 8004cac:	4602      	mov	r2, r0
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d103      	bne.n	8004cc8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f001 fd0b 	bl	80066dc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004cc6:	e002      	b.n	8004cce <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f7ff fd33 	bl	8004734 <HAL_SD_ErrorCallback>
}
 8004cce:	bf00      	nop
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b084      	sub	sp, #16
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f240 523a 	movw	r2, #1338	; 0x53a
 8004cec:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f7ff fefa 	bl	8004ae8 <HAL_SD_GetCardState>
 8004cf4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	2b06      	cmp	r3, #6
 8004d08:	d002      	beq.n	8004d10 <SD_DMARxAbort+0x3a>
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	2b05      	cmp	r3, #5
 8004d0e:	d10a      	bne.n	8004d26 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f001 f8b1 	bl	8005e7c <SDMMC_CmdStopTransfer>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d20:	431a      	orrs	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d103      	bne.n	8004d36 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f001 fcd4 	bl	80066dc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004d34:	e002      	b.n	8004d3c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f7ff fcfc 	bl	8004734 <HAL_SD_ErrorCallback>
}
 8004d3c:	bf00      	nop
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004d44:	b5b0      	push	{r4, r5, r7, lr}
 8004d46:	b094      	sub	sp, #80	; 0x50
 8004d48:	af04      	add	r7, sp, #16
 8004d4a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f000 ff63 	bl	8005c20 <SDMMC_GetPowerState>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d102      	bne.n	8004d66 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004d60:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004d64:	e0b8      	b.n	8004ed8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d6a:	2b03      	cmp	r3, #3
 8004d6c:	d02f      	beq.n	8004dce <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f001 f94a 	bl	800600c <SDMMC_CmdSendCID>
 8004d78:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <SD_InitCard+0x40>
    {
      return errorstate;
 8004d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d82:	e0a9      	b.n	8004ed8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2100      	movs	r1, #0
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 ff8d 	bl	8005caa <SDMMC_GetResponse>
 8004d90:	4602      	mov	r2, r0
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2104      	movs	r1, #4
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f000 ff84 	bl	8005caa <SDMMC_GetResponse>
 8004da2:	4602      	mov	r2, r0
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2108      	movs	r1, #8
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 ff7b 	bl	8005caa <SDMMC_GetResponse>
 8004db4:	4602      	mov	r2, r0
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	210c      	movs	r1, #12
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 ff72 	bl	8005caa <SDMMC_GetResponse>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd2:	2b03      	cmp	r3, #3
 8004dd4:	d00d      	beq.n	8004df2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f107 020e 	add.w	r2, r7, #14
 8004dde:	4611      	mov	r1, r2
 8004de0:	4618      	mov	r0, r3
 8004de2:	f001 f950 	bl	8006086 <SDMMC_CmdSetRelAdd>
 8004de6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <SD_InitCard+0xae>
    {
      return errorstate;
 8004dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004df0:	e072      	b.n	8004ed8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df6:	2b03      	cmp	r3, #3
 8004df8:	d036      	beq.n	8004e68 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004dfa:	89fb      	ldrh	r3, [r7, #14]
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e0a:	041b      	lsls	r3, r3, #16
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4610      	mov	r0, r2
 8004e10:	f001 f91a 	bl	8006048 <SDMMC_CmdSendCSD>
 8004e14:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e1e:	e05b      	b.n	8004ed8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2100      	movs	r1, #0
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 ff3f 	bl	8005caa <SDMMC_GetResponse>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2104      	movs	r1, #4
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f000 ff36 	bl	8005caa <SDMMC_GetResponse>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2108      	movs	r1, #8
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 ff2d 	bl	8005caa <SDMMC_GetResponse>
 8004e50:	4602      	mov	r2, r0
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	210c      	movs	r1, #12
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 ff24 	bl	8005caa <SDMMC_GetResponse>
 8004e62:	4602      	mov	r2, r0
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2104      	movs	r1, #4
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 ff1b 	bl	8005caa <SDMMC_GetResponse>
 8004e74:	4603      	mov	r3, r0
 8004e76:	0d1a      	lsrs	r2, r3, #20
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004e7c:	f107 0310 	add.w	r3, r7, #16
 8004e80:	4619      	mov	r1, r3
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f7ff fc60 	bl	8004748 <HAL_SD_GetCardCSD>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004e8e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004e92:	e021      	b.n	8004ed8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6819      	ldr	r1, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e9c:	041b      	lsls	r3, r3, #16
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	461c      	mov	r4, r3
 8004ea2:	4615      	mov	r5, r2
 8004ea4:	4622      	mov	r2, r4
 8004ea6:	462b      	mov	r3, r5
 8004ea8:	4608      	mov	r0, r1
 8004eaa:	f001 f809 	bl	8005ec0 <SDMMC_CmdSelDesel>
 8004eae:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <SD_InitCard+0x176>
  {
    return errorstate;
 8004eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eb8:	e00e      	b.n	8004ed8 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681d      	ldr	r5, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	466c      	mov	r4, sp
 8004ec2:	f103 0210 	add.w	r2, r3, #16
 8004ec6:	ca07      	ldmia	r2, {r0, r1, r2}
 8004ec8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004ecc:	3304      	adds	r3, #4
 8004ece:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	f000 fe4d 	bl	8005b70 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3740      	adds	r7, #64	; 0x40
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bdb0      	pop	{r4, r5, r7, pc}

08004ee0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004eec:	2300      	movs	r3, #0
 8004eee:	617b      	str	r3, [r7, #20]
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f001 f804 	bl	8005f06 <SDMMC_CmdGoIdleState>
 8004efe:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d001      	beq.n	8004f0a <SD_PowerON+0x2a>
  {
    return errorstate;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	e072      	b.n	8004ff0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f001 f817 	bl	8005f42 <SDMMC_CmdOperCond>
 8004f14:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00d      	beq.n	8004f38 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 ffed 	bl	8005f06 <SDMMC_CmdGoIdleState>
 8004f2c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d004      	beq.n	8004f3e <SD_PowerON+0x5e>
    {
      return errorstate;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	e05b      	b.n	8004ff0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d137      	bne.n	8004fb6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f001 f817 	bl	8005f80 <SDMMC_CmdAppCommand>
 8004f52:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d02d      	beq.n	8004fb6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004f5a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004f5e:	e047      	b.n	8004ff0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2100      	movs	r1, #0
 8004f66:	4618      	mov	r0, r3
 8004f68:	f001 f80a 	bl	8005f80 <SDMMC_CmdAppCommand>
 8004f6c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d001      	beq.n	8004f78 <SD_PowerON+0x98>
    {
      return errorstate;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	e03b      	b.n	8004ff0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	491e      	ldr	r1, [pc, #120]	; (8004ff8 <SD_PowerON+0x118>)
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f001 f820 	bl	8005fc4 <SDMMC_CmdAppOperCommand>
 8004f84:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d002      	beq.n	8004f92 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004f8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004f90:	e02e      	b.n	8004ff0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2100      	movs	r1, #0
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f000 fe86 	bl	8005caa <SDMMC_GetResponse>
 8004f9e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	0fdb      	lsrs	r3, r3, #31
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d101      	bne.n	8004fac <SD_PowerON+0xcc>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e000      	b.n	8004fae <SD_PowerON+0xce>
 8004fac:	2300      	movs	r3, #0
 8004fae:	613b      	str	r3, [r7, #16]

    count++;
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d802      	bhi.n	8004fc6 <SD_PowerON+0xe6>
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d0cc      	beq.n	8004f60 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d902      	bls.n	8004fd6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004fd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fd4:	e00c      	b.n	8004ff0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d003      	beq.n	8004fe8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	645a      	str	r2, [r3, #68]	; 0x44
 8004fe6:	e002      	b.n	8004fee <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3718      	adds	r7, #24
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	c1100000 	.word	0xc1100000

08004ffc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d102      	bne.n	8005012 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800500c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005010:	e018      	b.n	8005044 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800501a:	041b      	lsls	r3, r3, #16
 800501c:	4619      	mov	r1, r3
 800501e:	4610      	mov	r0, r2
 8005020:	f001 f852 	bl	80060c8 <SDMMC_CmdSendStatus>
 8005024:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d001      	beq.n	8005030 <SD_SendStatus+0x34>
  {
    return errorstate;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	e009      	b.n	8005044 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2100      	movs	r1, #0
 8005036:	4618      	mov	r0, r3
 8005038:	f000 fe37 	bl	8005caa <SDMMC_GetResponse>
 800503c:	4602      	mov	r2, r0
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005058:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d03f      	beq.n	80050e6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8005066:	2300      	movs	r3, #0
 8005068:	617b      	str	r3, [r7, #20]
 800506a:	e033      	b.n	80050d4 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4618      	mov	r0, r3
 8005072:	f000 fda9 	bl	8005bc8 <SDMMC_ReadFIFO>
 8005076:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	b2da      	uxtb	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	3301      	adds	r3, #1
 8005084:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	3b01      	subs	r3, #1
 800508a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	0a1b      	lsrs	r3, r3, #8
 8005090:	b2da      	uxtb	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	3301      	adds	r3, #1
 800509a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	3b01      	subs	r3, #1
 80050a0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	0c1b      	lsrs	r3, r3, #16
 80050a6:	b2da      	uxtb	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	701a      	strb	r2, [r3, #0]
      tmp++;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	3301      	adds	r3, #1
 80050b0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	3b01      	subs	r3, #1
 80050b6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	0e1b      	lsrs	r3, r3, #24
 80050bc:	b2da      	uxtb	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	3301      	adds	r3, #1
 80050c6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	3b01      	subs	r3, #1
 80050cc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	3301      	adds	r3, #1
 80050d2:	617b      	str	r3, [r7, #20]
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	2b07      	cmp	r3, #7
 80050d8:	d9c8      	bls.n	800506c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80050e6:	bf00      	nop
 80050e8:	3718      	adds	r7, #24
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b086      	sub	sp, #24
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d043      	beq.n	8005190 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005108:	2300      	movs	r3, #0
 800510a:	617b      	str	r3, [r7, #20]
 800510c:	e037      	b.n	800517e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	3301      	adds	r3, #1
 8005118:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	3b01      	subs	r3, #1
 800511e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	021a      	lsls	r2, r3, #8
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	4313      	orrs	r3, r2
 800512a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	3301      	adds	r3, #1
 8005130:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	3b01      	subs	r3, #1
 8005136:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	041a      	lsls	r2, r3, #16
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	4313      	orrs	r3, r2
 8005142:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	3301      	adds	r3, #1
 8005148:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	3b01      	subs	r3, #1
 800514e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	061a      	lsls	r2, r3, #24
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	4313      	orrs	r3, r2
 800515a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	3301      	adds	r3, #1
 8005160:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	3b01      	subs	r3, #1
 8005166:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f107 0208 	add.w	r2, r7, #8
 8005170:	4611      	mov	r1, r2
 8005172:	4618      	mov	r0, r3
 8005174:	f000 fd35 	bl	8005be2 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	3301      	adds	r3, #1
 800517c:	617b      	str	r3, [r7, #20]
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	2b07      	cmp	r3, #7
 8005182:	d9c4      	bls.n	800510e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8005190:	bf00      	nop
 8005192:	3718      	adds	r7, #24
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e040      	b.n	800522c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d106      	bne.n	80051c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7fb ff7c 	bl	80010b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2224      	movs	r2, #36	; 0x24
 80051c4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f022 0201 	bic.w	r2, r2, #1
 80051d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f8b0 	bl	800533c <UART_SetConfig>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d101      	bne.n	80051e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e022      	b.n	800522c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 fb08 	bl	8005804 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685a      	ldr	r2, [r3, #4]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005202:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	689a      	ldr	r2, [r3, #8]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005212:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0201 	orr.w	r2, r2, #1
 8005222:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 fb8f 	bl	8005948 <UART_CheckIdleState>
 800522a:	4603      	mov	r3, r0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3708      	adds	r7, #8
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b08a      	sub	sp, #40	; 0x28
 8005238:	af02      	add	r7, sp, #8
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	603b      	str	r3, [r7, #0]
 8005240:	4613      	mov	r3, r2
 8005242:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005248:	2b20      	cmp	r3, #32
 800524a:	d171      	bne.n	8005330 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d002      	beq.n	8005258 <HAL_UART_Transmit+0x24>
 8005252:	88fb      	ldrh	r3, [r7, #6]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d101      	bne.n	800525c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e06a      	b.n	8005332 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2221      	movs	r2, #33	; 0x21
 8005268:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800526a:	f7fc f907 	bl	800147c <HAL_GetTick>
 800526e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	88fa      	ldrh	r2, [r7, #6]
 8005274:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	88fa      	ldrh	r2, [r7, #6]
 800527c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005288:	d108      	bne.n	800529c <HAL_UART_Transmit+0x68>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d104      	bne.n	800529c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005292:	2300      	movs	r3, #0
 8005294:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	61bb      	str	r3, [r7, #24]
 800529a:	e003      	b.n	80052a4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052a0:	2300      	movs	r3, #0
 80052a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052a4:	e02c      	b.n	8005300 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	2200      	movs	r2, #0
 80052ae:	2180      	movs	r1, #128	; 0x80
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 fb96 	bl	80059e2 <UART_WaitOnFlagUntilTimeout>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e038      	b.n	8005332 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10b      	bne.n	80052de <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	881b      	ldrh	r3, [r3, #0]
 80052ca:	461a      	mov	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	3302      	adds	r3, #2
 80052da:	61bb      	str	r3, [r7, #24]
 80052dc:	e007      	b.n	80052ee <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	781a      	ldrb	r2, [r3, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	3301      	adds	r3, #1
 80052ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	3b01      	subs	r3, #1
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005306:	b29b      	uxth	r3, r3
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1cc      	bne.n	80052a6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	2200      	movs	r2, #0
 8005314:	2140      	movs	r1, #64	; 0x40
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f000 fb63 	bl	80059e2 <UART_WaitOnFlagUntilTimeout>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e005      	b.n	8005332 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2220      	movs	r2, #32
 800532a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800532c:	2300      	movs	r3, #0
 800532e:	e000      	b.n	8005332 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005330:	2302      	movs	r3, #2
  }
}
 8005332:	4618      	mov	r0, r3
 8005334:	3720      	adds	r7, #32
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
	...

0800533c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b088      	sub	sp, #32
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005344:	2300      	movs	r3, #0
 8005346:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	431a      	orrs	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	431a      	orrs	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	69db      	ldr	r3, [r3, #28]
 800535c:	4313      	orrs	r3, r2
 800535e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	4ba6      	ldr	r3, [pc, #664]	; (8005600 <UART_SetConfig+0x2c4>)
 8005368:	4013      	ands	r3, r2
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	6812      	ldr	r2, [r2, #0]
 800536e:	6979      	ldr	r1, [r7, #20]
 8005370:	430b      	orrs	r3, r1
 8005372:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68da      	ldr	r2, [r3, #12]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	4313      	orrs	r3, r2
 8005398:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a94      	ldr	r2, [pc, #592]	; (8005604 <UART_SetConfig+0x2c8>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d120      	bne.n	80053fa <UART_SetConfig+0xbe>
 80053b8:	4b93      	ldr	r3, [pc, #588]	; (8005608 <UART_SetConfig+0x2cc>)
 80053ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053be:	f003 0303 	and.w	r3, r3, #3
 80053c2:	2b03      	cmp	r3, #3
 80053c4:	d816      	bhi.n	80053f4 <UART_SetConfig+0xb8>
 80053c6:	a201      	add	r2, pc, #4	; (adr r2, 80053cc <UART_SetConfig+0x90>)
 80053c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053cc:	080053dd 	.word	0x080053dd
 80053d0:	080053e9 	.word	0x080053e9
 80053d4:	080053e3 	.word	0x080053e3
 80053d8:	080053ef 	.word	0x080053ef
 80053dc:	2301      	movs	r3, #1
 80053de:	77fb      	strb	r3, [r7, #31]
 80053e0:	e150      	b.n	8005684 <UART_SetConfig+0x348>
 80053e2:	2302      	movs	r3, #2
 80053e4:	77fb      	strb	r3, [r7, #31]
 80053e6:	e14d      	b.n	8005684 <UART_SetConfig+0x348>
 80053e8:	2304      	movs	r3, #4
 80053ea:	77fb      	strb	r3, [r7, #31]
 80053ec:	e14a      	b.n	8005684 <UART_SetConfig+0x348>
 80053ee:	2308      	movs	r3, #8
 80053f0:	77fb      	strb	r3, [r7, #31]
 80053f2:	e147      	b.n	8005684 <UART_SetConfig+0x348>
 80053f4:	2310      	movs	r3, #16
 80053f6:	77fb      	strb	r3, [r7, #31]
 80053f8:	e144      	b.n	8005684 <UART_SetConfig+0x348>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a83      	ldr	r2, [pc, #524]	; (800560c <UART_SetConfig+0x2d0>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d132      	bne.n	800546a <UART_SetConfig+0x12e>
 8005404:	4b80      	ldr	r3, [pc, #512]	; (8005608 <UART_SetConfig+0x2cc>)
 8005406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540a:	f003 030c 	and.w	r3, r3, #12
 800540e:	2b0c      	cmp	r3, #12
 8005410:	d828      	bhi.n	8005464 <UART_SetConfig+0x128>
 8005412:	a201      	add	r2, pc, #4	; (adr r2, 8005418 <UART_SetConfig+0xdc>)
 8005414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005418:	0800544d 	.word	0x0800544d
 800541c:	08005465 	.word	0x08005465
 8005420:	08005465 	.word	0x08005465
 8005424:	08005465 	.word	0x08005465
 8005428:	08005459 	.word	0x08005459
 800542c:	08005465 	.word	0x08005465
 8005430:	08005465 	.word	0x08005465
 8005434:	08005465 	.word	0x08005465
 8005438:	08005453 	.word	0x08005453
 800543c:	08005465 	.word	0x08005465
 8005440:	08005465 	.word	0x08005465
 8005444:	08005465 	.word	0x08005465
 8005448:	0800545f 	.word	0x0800545f
 800544c:	2300      	movs	r3, #0
 800544e:	77fb      	strb	r3, [r7, #31]
 8005450:	e118      	b.n	8005684 <UART_SetConfig+0x348>
 8005452:	2302      	movs	r3, #2
 8005454:	77fb      	strb	r3, [r7, #31]
 8005456:	e115      	b.n	8005684 <UART_SetConfig+0x348>
 8005458:	2304      	movs	r3, #4
 800545a:	77fb      	strb	r3, [r7, #31]
 800545c:	e112      	b.n	8005684 <UART_SetConfig+0x348>
 800545e:	2308      	movs	r3, #8
 8005460:	77fb      	strb	r3, [r7, #31]
 8005462:	e10f      	b.n	8005684 <UART_SetConfig+0x348>
 8005464:	2310      	movs	r3, #16
 8005466:	77fb      	strb	r3, [r7, #31]
 8005468:	e10c      	b.n	8005684 <UART_SetConfig+0x348>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a68      	ldr	r2, [pc, #416]	; (8005610 <UART_SetConfig+0x2d4>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d120      	bne.n	80054b6 <UART_SetConfig+0x17a>
 8005474:	4b64      	ldr	r3, [pc, #400]	; (8005608 <UART_SetConfig+0x2cc>)
 8005476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800547a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800547e:	2b30      	cmp	r3, #48	; 0x30
 8005480:	d013      	beq.n	80054aa <UART_SetConfig+0x16e>
 8005482:	2b30      	cmp	r3, #48	; 0x30
 8005484:	d814      	bhi.n	80054b0 <UART_SetConfig+0x174>
 8005486:	2b20      	cmp	r3, #32
 8005488:	d009      	beq.n	800549e <UART_SetConfig+0x162>
 800548a:	2b20      	cmp	r3, #32
 800548c:	d810      	bhi.n	80054b0 <UART_SetConfig+0x174>
 800548e:	2b00      	cmp	r3, #0
 8005490:	d002      	beq.n	8005498 <UART_SetConfig+0x15c>
 8005492:	2b10      	cmp	r3, #16
 8005494:	d006      	beq.n	80054a4 <UART_SetConfig+0x168>
 8005496:	e00b      	b.n	80054b0 <UART_SetConfig+0x174>
 8005498:	2300      	movs	r3, #0
 800549a:	77fb      	strb	r3, [r7, #31]
 800549c:	e0f2      	b.n	8005684 <UART_SetConfig+0x348>
 800549e:	2302      	movs	r3, #2
 80054a0:	77fb      	strb	r3, [r7, #31]
 80054a2:	e0ef      	b.n	8005684 <UART_SetConfig+0x348>
 80054a4:	2304      	movs	r3, #4
 80054a6:	77fb      	strb	r3, [r7, #31]
 80054a8:	e0ec      	b.n	8005684 <UART_SetConfig+0x348>
 80054aa:	2308      	movs	r3, #8
 80054ac:	77fb      	strb	r3, [r7, #31]
 80054ae:	e0e9      	b.n	8005684 <UART_SetConfig+0x348>
 80054b0:	2310      	movs	r3, #16
 80054b2:	77fb      	strb	r3, [r7, #31]
 80054b4:	e0e6      	b.n	8005684 <UART_SetConfig+0x348>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a56      	ldr	r2, [pc, #344]	; (8005614 <UART_SetConfig+0x2d8>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d120      	bne.n	8005502 <UART_SetConfig+0x1c6>
 80054c0:	4b51      	ldr	r3, [pc, #324]	; (8005608 <UART_SetConfig+0x2cc>)
 80054c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80054ca:	2bc0      	cmp	r3, #192	; 0xc0
 80054cc:	d013      	beq.n	80054f6 <UART_SetConfig+0x1ba>
 80054ce:	2bc0      	cmp	r3, #192	; 0xc0
 80054d0:	d814      	bhi.n	80054fc <UART_SetConfig+0x1c0>
 80054d2:	2b80      	cmp	r3, #128	; 0x80
 80054d4:	d009      	beq.n	80054ea <UART_SetConfig+0x1ae>
 80054d6:	2b80      	cmp	r3, #128	; 0x80
 80054d8:	d810      	bhi.n	80054fc <UART_SetConfig+0x1c0>
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d002      	beq.n	80054e4 <UART_SetConfig+0x1a8>
 80054de:	2b40      	cmp	r3, #64	; 0x40
 80054e0:	d006      	beq.n	80054f0 <UART_SetConfig+0x1b4>
 80054e2:	e00b      	b.n	80054fc <UART_SetConfig+0x1c0>
 80054e4:	2300      	movs	r3, #0
 80054e6:	77fb      	strb	r3, [r7, #31]
 80054e8:	e0cc      	b.n	8005684 <UART_SetConfig+0x348>
 80054ea:	2302      	movs	r3, #2
 80054ec:	77fb      	strb	r3, [r7, #31]
 80054ee:	e0c9      	b.n	8005684 <UART_SetConfig+0x348>
 80054f0:	2304      	movs	r3, #4
 80054f2:	77fb      	strb	r3, [r7, #31]
 80054f4:	e0c6      	b.n	8005684 <UART_SetConfig+0x348>
 80054f6:	2308      	movs	r3, #8
 80054f8:	77fb      	strb	r3, [r7, #31]
 80054fa:	e0c3      	b.n	8005684 <UART_SetConfig+0x348>
 80054fc:	2310      	movs	r3, #16
 80054fe:	77fb      	strb	r3, [r7, #31]
 8005500:	e0c0      	b.n	8005684 <UART_SetConfig+0x348>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a44      	ldr	r2, [pc, #272]	; (8005618 <UART_SetConfig+0x2dc>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d125      	bne.n	8005558 <UART_SetConfig+0x21c>
 800550c:	4b3e      	ldr	r3, [pc, #248]	; (8005608 <UART_SetConfig+0x2cc>)
 800550e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005516:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800551a:	d017      	beq.n	800554c <UART_SetConfig+0x210>
 800551c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005520:	d817      	bhi.n	8005552 <UART_SetConfig+0x216>
 8005522:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005526:	d00b      	beq.n	8005540 <UART_SetConfig+0x204>
 8005528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800552c:	d811      	bhi.n	8005552 <UART_SetConfig+0x216>
 800552e:	2b00      	cmp	r3, #0
 8005530:	d003      	beq.n	800553a <UART_SetConfig+0x1fe>
 8005532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005536:	d006      	beq.n	8005546 <UART_SetConfig+0x20a>
 8005538:	e00b      	b.n	8005552 <UART_SetConfig+0x216>
 800553a:	2300      	movs	r3, #0
 800553c:	77fb      	strb	r3, [r7, #31]
 800553e:	e0a1      	b.n	8005684 <UART_SetConfig+0x348>
 8005540:	2302      	movs	r3, #2
 8005542:	77fb      	strb	r3, [r7, #31]
 8005544:	e09e      	b.n	8005684 <UART_SetConfig+0x348>
 8005546:	2304      	movs	r3, #4
 8005548:	77fb      	strb	r3, [r7, #31]
 800554a:	e09b      	b.n	8005684 <UART_SetConfig+0x348>
 800554c:	2308      	movs	r3, #8
 800554e:	77fb      	strb	r3, [r7, #31]
 8005550:	e098      	b.n	8005684 <UART_SetConfig+0x348>
 8005552:	2310      	movs	r3, #16
 8005554:	77fb      	strb	r3, [r7, #31]
 8005556:	e095      	b.n	8005684 <UART_SetConfig+0x348>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a2f      	ldr	r2, [pc, #188]	; (800561c <UART_SetConfig+0x2e0>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d125      	bne.n	80055ae <UART_SetConfig+0x272>
 8005562:	4b29      	ldr	r3, [pc, #164]	; (8005608 <UART_SetConfig+0x2cc>)
 8005564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005568:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800556c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005570:	d017      	beq.n	80055a2 <UART_SetConfig+0x266>
 8005572:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005576:	d817      	bhi.n	80055a8 <UART_SetConfig+0x26c>
 8005578:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800557c:	d00b      	beq.n	8005596 <UART_SetConfig+0x25a>
 800557e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005582:	d811      	bhi.n	80055a8 <UART_SetConfig+0x26c>
 8005584:	2b00      	cmp	r3, #0
 8005586:	d003      	beq.n	8005590 <UART_SetConfig+0x254>
 8005588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800558c:	d006      	beq.n	800559c <UART_SetConfig+0x260>
 800558e:	e00b      	b.n	80055a8 <UART_SetConfig+0x26c>
 8005590:	2301      	movs	r3, #1
 8005592:	77fb      	strb	r3, [r7, #31]
 8005594:	e076      	b.n	8005684 <UART_SetConfig+0x348>
 8005596:	2302      	movs	r3, #2
 8005598:	77fb      	strb	r3, [r7, #31]
 800559a:	e073      	b.n	8005684 <UART_SetConfig+0x348>
 800559c:	2304      	movs	r3, #4
 800559e:	77fb      	strb	r3, [r7, #31]
 80055a0:	e070      	b.n	8005684 <UART_SetConfig+0x348>
 80055a2:	2308      	movs	r3, #8
 80055a4:	77fb      	strb	r3, [r7, #31]
 80055a6:	e06d      	b.n	8005684 <UART_SetConfig+0x348>
 80055a8:	2310      	movs	r3, #16
 80055aa:	77fb      	strb	r3, [r7, #31]
 80055ac:	e06a      	b.n	8005684 <UART_SetConfig+0x348>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a1b      	ldr	r2, [pc, #108]	; (8005620 <UART_SetConfig+0x2e4>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d138      	bne.n	800562a <UART_SetConfig+0x2ee>
 80055b8:	4b13      	ldr	r3, [pc, #76]	; (8005608 <UART_SetConfig+0x2cc>)
 80055ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055be:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80055c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055c6:	d017      	beq.n	80055f8 <UART_SetConfig+0x2bc>
 80055c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055cc:	d82a      	bhi.n	8005624 <UART_SetConfig+0x2e8>
 80055ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055d2:	d00b      	beq.n	80055ec <UART_SetConfig+0x2b0>
 80055d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055d8:	d824      	bhi.n	8005624 <UART_SetConfig+0x2e8>
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <UART_SetConfig+0x2aa>
 80055de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055e2:	d006      	beq.n	80055f2 <UART_SetConfig+0x2b6>
 80055e4:	e01e      	b.n	8005624 <UART_SetConfig+0x2e8>
 80055e6:	2300      	movs	r3, #0
 80055e8:	77fb      	strb	r3, [r7, #31]
 80055ea:	e04b      	b.n	8005684 <UART_SetConfig+0x348>
 80055ec:	2302      	movs	r3, #2
 80055ee:	77fb      	strb	r3, [r7, #31]
 80055f0:	e048      	b.n	8005684 <UART_SetConfig+0x348>
 80055f2:	2304      	movs	r3, #4
 80055f4:	77fb      	strb	r3, [r7, #31]
 80055f6:	e045      	b.n	8005684 <UART_SetConfig+0x348>
 80055f8:	2308      	movs	r3, #8
 80055fa:	77fb      	strb	r3, [r7, #31]
 80055fc:	e042      	b.n	8005684 <UART_SetConfig+0x348>
 80055fe:	bf00      	nop
 8005600:	efff69f3 	.word	0xefff69f3
 8005604:	40011000 	.word	0x40011000
 8005608:	40023800 	.word	0x40023800
 800560c:	40004400 	.word	0x40004400
 8005610:	40004800 	.word	0x40004800
 8005614:	40004c00 	.word	0x40004c00
 8005618:	40005000 	.word	0x40005000
 800561c:	40011400 	.word	0x40011400
 8005620:	40007800 	.word	0x40007800
 8005624:	2310      	movs	r3, #16
 8005626:	77fb      	strb	r3, [r7, #31]
 8005628:	e02c      	b.n	8005684 <UART_SetConfig+0x348>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a72      	ldr	r2, [pc, #456]	; (80057f8 <UART_SetConfig+0x4bc>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d125      	bne.n	8005680 <UART_SetConfig+0x344>
 8005634:	4b71      	ldr	r3, [pc, #452]	; (80057fc <UART_SetConfig+0x4c0>)
 8005636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800563a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800563e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005642:	d017      	beq.n	8005674 <UART_SetConfig+0x338>
 8005644:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005648:	d817      	bhi.n	800567a <UART_SetConfig+0x33e>
 800564a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800564e:	d00b      	beq.n	8005668 <UART_SetConfig+0x32c>
 8005650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005654:	d811      	bhi.n	800567a <UART_SetConfig+0x33e>
 8005656:	2b00      	cmp	r3, #0
 8005658:	d003      	beq.n	8005662 <UART_SetConfig+0x326>
 800565a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800565e:	d006      	beq.n	800566e <UART_SetConfig+0x332>
 8005660:	e00b      	b.n	800567a <UART_SetConfig+0x33e>
 8005662:	2300      	movs	r3, #0
 8005664:	77fb      	strb	r3, [r7, #31]
 8005666:	e00d      	b.n	8005684 <UART_SetConfig+0x348>
 8005668:	2302      	movs	r3, #2
 800566a:	77fb      	strb	r3, [r7, #31]
 800566c:	e00a      	b.n	8005684 <UART_SetConfig+0x348>
 800566e:	2304      	movs	r3, #4
 8005670:	77fb      	strb	r3, [r7, #31]
 8005672:	e007      	b.n	8005684 <UART_SetConfig+0x348>
 8005674:	2308      	movs	r3, #8
 8005676:	77fb      	strb	r3, [r7, #31]
 8005678:	e004      	b.n	8005684 <UART_SetConfig+0x348>
 800567a:	2310      	movs	r3, #16
 800567c:	77fb      	strb	r3, [r7, #31]
 800567e:	e001      	b.n	8005684 <UART_SetConfig+0x348>
 8005680:	2310      	movs	r3, #16
 8005682:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	69db      	ldr	r3, [r3, #28]
 8005688:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800568c:	d15b      	bne.n	8005746 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800568e:	7ffb      	ldrb	r3, [r7, #31]
 8005690:	2b08      	cmp	r3, #8
 8005692:	d828      	bhi.n	80056e6 <UART_SetConfig+0x3aa>
 8005694:	a201      	add	r2, pc, #4	; (adr r2, 800569c <UART_SetConfig+0x360>)
 8005696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569a:	bf00      	nop
 800569c:	080056c1 	.word	0x080056c1
 80056a0:	080056c9 	.word	0x080056c9
 80056a4:	080056d1 	.word	0x080056d1
 80056a8:	080056e7 	.word	0x080056e7
 80056ac:	080056d7 	.word	0x080056d7
 80056b0:	080056e7 	.word	0x080056e7
 80056b4:	080056e7 	.word	0x080056e7
 80056b8:	080056e7 	.word	0x080056e7
 80056bc:	080056df 	.word	0x080056df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056c0:	f7fd fff2 	bl	80036a8 <HAL_RCC_GetPCLK1Freq>
 80056c4:	61b8      	str	r0, [r7, #24]
        break;
 80056c6:	e013      	b.n	80056f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056c8:	f7fe f802 	bl	80036d0 <HAL_RCC_GetPCLK2Freq>
 80056cc:	61b8      	str	r0, [r7, #24]
        break;
 80056ce:	e00f      	b.n	80056f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056d0:	4b4b      	ldr	r3, [pc, #300]	; (8005800 <UART_SetConfig+0x4c4>)
 80056d2:	61bb      	str	r3, [r7, #24]
        break;
 80056d4:	e00c      	b.n	80056f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056d6:	f7fd fed5 	bl	8003484 <HAL_RCC_GetSysClockFreq>
 80056da:	61b8      	str	r0, [r7, #24]
        break;
 80056dc:	e008      	b.n	80056f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056e2:	61bb      	str	r3, [r7, #24]
        break;
 80056e4:	e004      	b.n	80056f0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80056e6:	2300      	movs	r3, #0
 80056e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	77bb      	strb	r3, [r7, #30]
        break;
 80056ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d074      	beq.n	80057e0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	005a      	lsls	r2, r3, #1
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	085b      	lsrs	r3, r3, #1
 8005700:	441a      	add	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	fbb2 f3f3 	udiv	r3, r2, r3
 800570a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	2b0f      	cmp	r3, #15
 8005710:	d916      	bls.n	8005740 <UART_SetConfig+0x404>
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005718:	d212      	bcs.n	8005740 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	b29b      	uxth	r3, r3
 800571e:	f023 030f 	bic.w	r3, r3, #15
 8005722:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	085b      	lsrs	r3, r3, #1
 8005728:	b29b      	uxth	r3, r3
 800572a:	f003 0307 	and.w	r3, r3, #7
 800572e:	b29a      	uxth	r2, r3
 8005730:	89fb      	ldrh	r3, [r7, #14]
 8005732:	4313      	orrs	r3, r2
 8005734:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	89fa      	ldrh	r2, [r7, #14]
 800573c:	60da      	str	r2, [r3, #12]
 800573e:	e04f      	b.n	80057e0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	77bb      	strb	r3, [r7, #30]
 8005744:	e04c      	b.n	80057e0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005746:	7ffb      	ldrb	r3, [r7, #31]
 8005748:	2b08      	cmp	r3, #8
 800574a:	d828      	bhi.n	800579e <UART_SetConfig+0x462>
 800574c:	a201      	add	r2, pc, #4	; (adr r2, 8005754 <UART_SetConfig+0x418>)
 800574e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005752:	bf00      	nop
 8005754:	08005779 	.word	0x08005779
 8005758:	08005781 	.word	0x08005781
 800575c:	08005789 	.word	0x08005789
 8005760:	0800579f 	.word	0x0800579f
 8005764:	0800578f 	.word	0x0800578f
 8005768:	0800579f 	.word	0x0800579f
 800576c:	0800579f 	.word	0x0800579f
 8005770:	0800579f 	.word	0x0800579f
 8005774:	08005797 	.word	0x08005797
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005778:	f7fd ff96 	bl	80036a8 <HAL_RCC_GetPCLK1Freq>
 800577c:	61b8      	str	r0, [r7, #24]
        break;
 800577e:	e013      	b.n	80057a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005780:	f7fd ffa6 	bl	80036d0 <HAL_RCC_GetPCLK2Freq>
 8005784:	61b8      	str	r0, [r7, #24]
        break;
 8005786:	e00f      	b.n	80057a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005788:	4b1d      	ldr	r3, [pc, #116]	; (8005800 <UART_SetConfig+0x4c4>)
 800578a:	61bb      	str	r3, [r7, #24]
        break;
 800578c:	e00c      	b.n	80057a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800578e:	f7fd fe79 	bl	8003484 <HAL_RCC_GetSysClockFreq>
 8005792:	61b8      	str	r0, [r7, #24]
        break;
 8005794:	e008      	b.n	80057a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800579a:	61bb      	str	r3, [r7, #24]
        break;
 800579c:	e004      	b.n	80057a8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800579e:	2300      	movs	r3, #0
 80057a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	77bb      	strb	r3, [r7, #30]
        break;
 80057a6:	bf00      	nop
    }

    if (pclk != 0U)
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d018      	beq.n	80057e0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	085a      	lsrs	r2, r3, #1
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	441a      	add	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	2b0f      	cmp	r3, #15
 80057c6:	d909      	bls.n	80057dc <UART_SetConfig+0x4a0>
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ce:	d205      	bcs.n	80057dc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	60da      	str	r2, [r3, #12]
 80057da:	e001      	b.n	80057e0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80057ec:	7fbb      	ldrb	r3, [r7, #30]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3720      	adds	r7, #32
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	40007c00 	.word	0x40007c00
 80057fc:	40023800 	.word	0x40023800
 8005800:	00f42400 	.word	0x00f42400

08005804 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005810:	f003 0301 	and.w	r3, r3, #1
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00a      	beq.n	800582e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	430a      	orrs	r2, r1
 800582c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00a      	beq.n	8005850 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	430a      	orrs	r2, r1
 800584e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	f003 0304 	and.w	r3, r3, #4
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00a      	beq.n	8005872 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	430a      	orrs	r2, r1
 8005870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	f003 0308 	and.w	r3, r3, #8
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00a      	beq.n	8005894 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	430a      	orrs	r2, r1
 8005892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005898:	f003 0310 	and.w	r3, r3, #16
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00a      	beq.n	80058b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	430a      	orrs	r2, r1
 80058b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ba:	f003 0320 	and.w	r3, r3, #32
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00a      	beq.n	80058d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	430a      	orrs	r2, r1
 80058d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d01a      	beq.n	800591a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005902:	d10a      	bne.n	800591a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00a      	beq.n	800593c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	430a      	orrs	r2, r1
 800593a:	605a      	str	r2, [r3, #4]
  }
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af02      	add	r7, sp, #8
 800594e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005958:	f7fb fd90 	bl	800147c <HAL_GetTick>
 800595c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0308 	and.w	r3, r3, #8
 8005968:	2b08      	cmp	r3, #8
 800596a:	d10e      	bne.n	800598a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800596c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f831 	bl	80059e2 <UART_WaitOnFlagUntilTimeout>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e027      	b.n	80059da <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0304 	and.w	r3, r3, #4
 8005994:	2b04      	cmp	r3, #4
 8005996:	d10e      	bne.n	80059b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005998:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 f81b 	bl	80059e2 <UART_WaitOnFlagUntilTimeout>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e011      	b.n	80059da <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2220      	movs	r2, #32
 80059ba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2220      	movs	r2, #32
 80059c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b09c      	sub	sp, #112	; 0x70
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	60f8      	str	r0, [r7, #12]
 80059ea:	60b9      	str	r1, [r7, #8]
 80059ec:	603b      	str	r3, [r7, #0]
 80059ee:	4613      	mov	r3, r2
 80059f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059f2:	e0a7      	b.n	8005b44 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059fa:	f000 80a3 	beq.w	8005b44 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059fe:	f7fb fd3d 	bl	800147c <HAL_GetTick>
 8005a02:	4602      	mov	r2, r0
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d302      	bcc.n	8005a14 <UART_WaitOnFlagUntilTimeout+0x32>
 8005a0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d13f      	bne.n	8005a94 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a1c:	e853 3f00 	ldrex	r3, [r3]
 8005a20:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a28:	667b      	str	r3, [r7, #100]	; 0x64
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a34:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a3a:	e841 2300 	strex	r3, r2, [r1]
 8005a3e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1e6      	bne.n	8005a14 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	3308      	adds	r3, #8
 8005a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a50:	e853 3f00 	ldrex	r3, [r3]
 8005a54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a58:	f023 0301 	bic.w	r3, r3, #1
 8005a5c:	663b      	str	r3, [r7, #96]	; 0x60
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	3308      	adds	r3, #8
 8005a64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a66:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a6e:	e841 2300 	strex	r3, r2, [r1]
 8005a72:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1e5      	bne.n	8005a46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2220      	movs	r2, #32
 8005a7e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2220      	movs	r2, #32
 8005a84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e068      	b.n	8005b66 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0304 	and.w	r3, r3, #4
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d050      	beq.n	8005b44 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	69db      	ldr	r3, [r3, #28]
 8005aa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005aac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ab0:	d148      	bne.n	8005b44 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005aba:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac4:	e853 3f00 	ldrex	r3, [r3]
 8005ac8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ad0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ada:	637b      	str	r3, [r7, #52]	; 0x34
 8005adc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ade:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ae0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ae2:	e841 2300 	strex	r3, r2, [r1]
 8005ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1e6      	bne.n	8005abc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3308      	adds	r3, #8
 8005af4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	e853 3f00 	ldrex	r3, [r3]
 8005afc:	613b      	str	r3, [r7, #16]
   return(result);
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	f023 0301 	bic.w	r3, r3, #1
 8005b04:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	3308      	adds	r3, #8
 8005b0c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b0e:	623a      	str	r2, [r7, #32]
 8005b10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b12:	69f9      	ldr	r1, [r7, #28]
 8005b14:	6a3a      	ldr	r2, [r7, #32]
 8005b16:	e841 2300 	strex	r3, r2, [r1]
 8005b1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1e5      	bne.n	8005aee <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2220      	movs	r2, #32
 8005b26:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2220      	movs	r2, #32
 8005b2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2220      	movs	r2, #32
 8005b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e010      	b.n	8005b66 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	69da      	ldr	r2, [r3, #28]
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	bf0c      	ite	eq
 8005b54:	2301      	moveq	r3, #1
 8005b56:	2300      	movne	r3, #0
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	79fb      	ldrb	r3, [r7, #7]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	f43f af48 	beq.w	80059f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3770      	adds	r7, #112	; 0x70
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
	...

08005b70 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8005b70:	b084      	sub	sp, #16
 8005b72:	b480      	push	{r7}
 8005b74:	b085      	sub	sp, #20
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
 8005b7a:	f107 001c 	add.w	r0, r7, #28
 8005b7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005b82:	2300      	movs	r3, #0
 8005b84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005b86:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005b88:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005b8a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005b8e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005b92:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005b96:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005b9a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	4b07      	ldr	r3, [pc, #28]	; (8005bc4 <SDMMC_Init+0x54>)
 8005ba8:	4013      	ands	r3, r2
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	431a      	orrs	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3714      	adds	r7, #20
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	b004      	add	sp, #16
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	ffff8100 	.word	0xffff8100

08005bc8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8005be2:	b480      	push	{r7}
 8005be4:	b083      	sub	sp, #12
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
 8005bea:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2203      	movs	r2, #3
 8005c10:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0303 	and.w	r3, r3, #3
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005c46:	2300      	movs	r3, #0
 8005c48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005c5a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005c60:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005c66:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	68da      	ldr	r2, [r3, #12]
 8005c72:	4b06      	ldr	r3, [pc, #24]	; (8005c8c <SDMMC_SendCommand+0x50>)
 8005c74:	4013      	ands	r3, r2
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	431a      	orrs	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3714      	adds	r7, #20
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr
 8005c8c:	fffff000 	.word	0xfffff000

08005c90 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	b2db      	uxtb	r3, r3
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8005caa:	b480      	push	{r7}
 8005cac:	b085      	sub	sp, #20
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
 8005cb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	3314      	adds	r3, #20
 8005cb8:	461a      	mov	r2, r3
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
}  
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3714      	adds	r7, #20
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	685a      	ldr	r2, [r3, #4]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005cf6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005cfc:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005d02:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	431a      	orrs	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0

}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3714      	adds	r7, #20
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b088      	sub	sp, #32
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005d36:	2310      	movs	r3, #16
 8005d38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005d3a:	2340      	movs	r3, #64	; 0x40
 8005d3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005d48:	f107 0308 	add.w	r3, r7, #8
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f7ff ff74 	bl	8005c3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8005d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d58:	2110      	movs	r1, #16
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f9d6 	bl	800610c <SDMMC_GetCmdResp1>
 8005d60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d62:	69fb      	ldr	r3, [r7, #28]
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3720      	adds	r7, #32
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b088      	sub	sp, #32
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005d7a:	2311      	movs	r3, #17
 8005d7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005d7e:	2340      	movs	r3, #64	; 0x40
 8005d80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005d82:	2300      	movs	r3, #0
 8005d84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005d86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005d8c:	f107 0308 	add.w	r3, r7, #8
 8005d90:	4619      	mov	r1, r3
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7ff ff52 	bl	8005c3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d9c:	2111      	movs	r1, #17
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f9b4 	bl	800610c <SDMMC_GetCmdResp1>
 8005da4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005da6:	69fb      	ldr	r3, [r7, #28]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3720      	adds	r7, #32
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b088      	sub	sp, #32
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005dbe:	2312      	movs	r3, #18
 8005dc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005dc2:	2340      	movs	r3, #64	; 0x40
 8005dc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005dd0:	f107 0308 	add.w	r3, r7, #8
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7ff ff30 	bl	8005c3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005de0:	2112      	movs	r1, #18
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f992 	bl	800610c <SDMMC_GetCmdResp1>
 8005de8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005dea:	69fb      	ldr	r3, [r7, #28]
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3720      	adds	r7, #32
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b088      	sub	sp, #32
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005e02:	2318      	movs	r3, #24
 8005e04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005e06:	2340      	movs	r3, #64	; 0x40
 8005e08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005e0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005e14:	f107 0308 	add.w	r3, r7, #8
 8005e18:	4619      	mov	r1, r3
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f7ff ff0e 	bl	8005c3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e24:	2118      	movs	r1, #24
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f970 	bl	800610c <SDMMC_GetCmdResp1>
 8005e2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e2e:	69fb      	ldr	r3, [r7, #28]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3720      	adds	r7, #32
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b088      	sub	sp, #32
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005e46:	2319      	movs	r3, #25
 8005e48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005e4a:	2340      	movs	r3, #64	; 0x40
 8005e4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005e52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005e58:	f107 0308 	add.w	r3, r7, #8
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7ff feec 	bl	8005c3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e68:	2119      	movs	r1, #25
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f94e 	bl	800610c <SDMMC_GetCmdResp1>
 8005e70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e72:	69fb      	ldr	r3, [r7, #28]
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3720      	adds	r7, #32
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b088      	sub	sp, #32
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005e84:	2300      	movs	r3, #0
 8005e86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005e88:	230c      	movs	r3, #12
 8005e8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005e8c:	2340      	movs	r3, #64	; 0x40
 8005e8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005e90:	2300      	movs	r3, #0
 8005e92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005e94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005e9a:	f107 0308 	add.w	r3, r7, #8
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f7ff fecb 	bl	8005c3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8005ea6:	4a05      	ldr	r2, [pc, #20]	; (8005ebc <SDMMC_CmdStopTransfer+0x40>)
 8005ea8:	210c      	movs	r1, #12
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f92e 	bl	800610c <SDMMC_GetCmdResp1>
 8005eb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005eb2:	69fb      	ldr	r3, [r7, #28]
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3720      	adds	r7, #32
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	05f5e100 	.word	0x05f5e100

08005ec0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b08a      	sub	sp, #40	; 0x28
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005ed0:	2307      	movs	r3, #7
 8005ed2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005ed4:	2340      	movs	r3, #64	; 0x40
 8005ed6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005edc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ee0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005ee2:	f107 0310 	add.w	r3, r7, #16
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f7ff fea7 	bl	8005c3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8005eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ef2:	2107      	movs	r1, #7
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 f909 	bl	800610c <SDMMC_GetCmdResp1>
 8005efa:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3728      	adds	r7, #40	; 0x28
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b088      	sub	sp, #32
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005f12:	2300      	movs	r3, #0
 8005f14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8005f16:	2300      	movs	r3, #0
 8005f18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005f1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005f24:	f107 0308 	add.w	r3, r7, #8
 8005f28:	4619      	mov	r1, r3
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f7ff fe86 	bl	8005c3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 fb23 	bl	800657c <SDMMC_GetCmdError>
 8005f36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f38:	69fb      	ldr	r3, [r7, #28]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3720      	adds	r7, #32
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b088      	sub	sp, #32
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005f4a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005f4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005f50:	2308      	movs	r3, #8
 8005f52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005f54:	2340      	movs	r3, #64	; 0x40
 8005f56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005f5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005f62:	f107 0308 	add.w	r3, r7, #8
 8005f66:	4619      	mov	r1, r3
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f7ff fe67 	bl	8005c3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fab6 	bl	80064e0 <SDMMC_GetCmdResp7>
 8005f74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f76:	69fb      	ldr	r3, [r7, #28]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3720      	adds	r7, #32
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b088      	sub	sp, #32
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005f8e:	2337      	movs	r3, #55	; 0x37
 8005f90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005f92:	2340      	movs	r3, #64	; 0x40
 8005f94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005f96:	2300      	movs	r3, #0
 8005f98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005f9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005fa0:	f107 0308 	add.w	r3, r7, #8
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7ff fe48 	bl	8005c3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8005fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fb0:	2137      	movs	r1, #55	; 0x37
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f8aa 	bl	800610c <SDMMC_GetCmdResp1>
 8005fb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fba:	69fb      	ldr	r3, [r7, #28]
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3720      	adds	r7, #32
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b088      	sub	sp, #32
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	4b0d      	ldr	r3, [pc, #52]	; (8006008 <SDMMC_CmdAppOperCommand+0x44>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005fd6:	2329      	movs	r3, #41	; 0x29
 8005fd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005fda:	2340      	movs	r3, #64	; 0x40
 8005fdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005fe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fe6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005fe8:	f107 0308 	add.w	r3, r7, #8
 8005fec:	4619      	mov	r1, r3
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f7ff fe24 	bl	8005c3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 f9bf 	bl	8006378 <SDMMC_GetCmdResp3>
 8005ffa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ffc:	69fb      	ldr	r3, [r7, #28]
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3720      	adds	r7, #32
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	80100000 	.word	0x80100000

0800600c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b088      	sub	sp, #32
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006014:	2300      	movs	r3, #0
 8006016:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006018:	2302      	movs	r3, #2
 800601a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800601c:	23c0      	movs	r3, #192	; 0xc0
 800601e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006020:	2300      	movs	r3, #0
 8006022:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006024:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006028:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800602a:	f107 0308 	add.w	r3, r7, #8
 800602e:	4619      	mov	r1, r3
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f7ff fe03 	bl	8005c3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f956 	bl	80062e8 <SDMMC_GetCmdResp2>
 800603c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800603e:	69fb      	ldr	r3, [r7, #28]
}
 8006040:	4618      	mov	r0, r3
 8006042:	3720      	adds	r7, #32
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b088      	sub	sp, #32
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006056:	2309      	movs	r3, #9
 8006058:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800605a:	23c0      	movs	r3, #192	; 0xc0
 800605c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800605e:	2300      	movs	r3, #0
 8006060:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006062:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006066:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006068:	f107 0308 	add.w	r3, r7, #8
 800606c:	4619      	mov	r1, r3
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f7ff fde4 	bl	8005c3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 f937 	bl	80062e8 <SDMMC_GetCmdResp2>
 800607a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800607c:	69fb      	ldr	r3, [r7, #28]
}
 800607e:	4618      	mov	r0, r3
 8006080:	3720      	adds	r7, #32
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b088      	sub	sp, #32
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
 800608e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006090:	2300      	movs	r3, #0
 8006092:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006094:	2303      	movs	r3, #3
 8006096:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006098:	2340      	movs	r3, #64	; 0x40
 800609a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800609c:	2300      	movs	r3, #0
 800609e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80060a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80060a6:	f107 0308 	add.w	r3, r7, #8
 80060aa:	4619      	mov	r1, r3
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f7ff fdc5 	bl	8005c3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80060b2:	683a      	ldr	r2, [r7, #0]
 80060b4:	2103      	movs	r1, #3
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f99c 	bl	80063f4 <SDMMC_GetCmdResp6>
 80060bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060be:	69fb      	ldr	r3, [r7, #28]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3720      	adds	r7, #32
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b088      	sub	sp, #32
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80060d6:	230d      	movs	r3, #13
 80060d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80060da:	2340      	movs	r3, #64	; 0x40
 80060dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80060de:	2300      	movs	r3, #0
 80060e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80060e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80060e8:	f107 0308 	add.w	r3, r7, #8
 80060ec:	4619      	mov	r1, r3
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7ff fda4 	bl	8005c3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80060f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80060f8:	210d      	movs	r1, #13
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f806 	bl	800610c <SDMMC_GetCmdResp1>
 8006100:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006102:	69fb      	ldr	r3, [r7, #28]
}
 8006104:	4618      	mov	r0, r3
 8006106:	3720      	adds	r7, #32
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b088      	sub	sp, #32
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	460b      	mov	r3, r1
 8006116:	607a      	str	r2, [r7, #4]
 8006118:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800611a:	4b70      	ldr	r3, [pc, #448]	; (80062dc <SDMMC_GetCmdResp1+0x1d0>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a70      	ldr	r2, [pc, #448]	; (80062e0 <SDMMC_GetCmdResp1+0x1d4>)
 8006120:	fba2 2303 	umull	r2, r3, r2, r3
 8006124:	0a5a      	lsrs	r2, r3, #9
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	fb02 f303 	mul.w	r3, r2, r3
 800612c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	1e5a      	subs	r2, r3, #1
 8006132:	61fa      	str	r2, [r7, #28]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d102      	bne.n	800613e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006138:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800613c:	e0c9      	b.n	80062d2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006142:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800614a:	2b00      	cmp	r3, #0
 800614c:	d0ef      	beq.n	800612e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1ea      	bne.n	800612e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800615c:	f003 0304 	and.w	r3, r3, #4
 8006160:	2b00      	cmp	r3, #0
 8006162:	d004      	beq.n	800616e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2204      	movs	r2, #4
 8006168:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800616a:	2304      	movs	r3, #4
 800616c:	e0b1      	b.n	80062d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006172:	f003 0301 	and.w	r3, r3, #1
 8006176:	2b00      	cmp	r3, #0
 8006178:	d004      	beq.n	8006184 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2201      	movs	r2, #1
 800617e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006180:	2301      	movs	r3, #1
 8006182:	e0a6      	b.n	80062d2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	22c5      	movs	r2, #197	; 0xc5
 8006188:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f7ff fd80 	bl	8005c90 <SDMMC_GetCommandResponse>
 8006190:	4603      	mov	r3, r0
 8006192:	461a      	mov	r2, r3
 8006194:	7afb      	ldrb	r3, [r7, #11]
 8006196:	4293      	cmp	r3, r2
 8006198:	d001      	beq.n	800619e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800619a:	2301      	movs	r3, #1
 800619c:	e099      	b.n	80062d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800619e:	2100      	movs	r1, #0
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f7ff fd82 	bl	8005caa <SDMMC_GetResponse>
 80061a6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	4b4e      	ldr	r3, [pc, #312]	; (80062e4 <SDMMC_GetCmdResp1+0x1d8>)
 80061ac:	4013      	ands	r3, r2
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d101      	bne.n	80061b6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80061b2:	2300      	movs	r3, #0
 80061b4:	e08d      	b.n	80062d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	da02      	bge.n	80061c2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80061bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061c0:	e087      	b.n	80062d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d001      	beq.n	80061d0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80061cc:	2340      	movs	r3, #64	; 0x40
 80061ce:	e080      	b.n	80062d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80061da:	2380      	movs	r3, #128	; 0x80
 80061dc:	e079      	b.n	80062d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d002      	beq.n	80061ee <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80061e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061ec:	e071      	b.n	80062d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d002      	beq.n	80061fe <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80061f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061fc:	e069      	b.n	80062d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d002      	beq.n	800620e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006208:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800620c:	e061      	b.n	80062d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d002      	beq.n	800621e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006218:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800621c:	e059      	b.n	80062d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d002      	beq.n	800622e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800622c:	e051      	b.n	80062d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d002      	beq.n	800623e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006238:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800623c:	e049      	b.n	80062d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d002      	beq.n	800624e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006248:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800624c:	e041      	b.n	80062d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d002      	beq.n	800625e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006258:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800625c:	e039      	b.n	80062d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d002      	beq.n	800626e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006268:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800626c:	e031      	b.n	80062d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d002      	beq.n	800627e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006278:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800627c:	e029      	b.n	80062d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d002      	beq.n	800628e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006288:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800628c:	e021      	b.n	80062d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006294:	2b00      	cmp	r3, #0
 8006296:	d002      	beq.n	800629e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006298:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800629c:	e019      	b.n	80062d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d002      	beq.n	80062ae <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80062a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80062ac:	e011      	b.n	80062d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80062b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80062bc:	e009      	b.n	80062d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f003 0308 	and.w	r3, r3, #8
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d002      	beq.n	80062ce <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80062c8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80062cc:	e001      	b.n	80062d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80062ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3720      	adds	r7, #32
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	20000000 	.word	0x20000000
 80062e0:	10624dd3 	.word	0x10624dd3
 80062e4:	fdffe008 	.word	0xfdffe008

080062e8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80062f0:	4b1f      	ldr	r3, [pc, #124]	; (8006370 <SDMMC_GetCmdResp2+0x88>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a1f      	ldr	r2, [pc, #124]	; (8006374 <SDMMC_GetCmdResp2+0x8c>)
 80062f6:	fba2 2303 	umull	r2, r3, r2, r3
 80062fa:	0a5b      	lsrs	r3, r3, #9
 80062fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006300:	fb02 f303 	mul.w	r3, r2, r3
 8006304:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	1e5a      	subs	r2, r3, #1
 800630a:	60fa      	str	r2, [r7, #12]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d102      	bne.n	8006316 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006310:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006314:	e026      	b.n	8006364 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800631a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8006322:	2b00      	cmp	r3, #0
 8006324:	d0ef      	beq.n	8006306 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1ea      	bne.n	8006306 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006334:	f003 0304 	and.w	r3, r3, #4
 8006338:	2b00      	cmp	r3, #0
 800633a:	d004      	beq.n	8006346 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2204      	movs	r2, #4
 8006340:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006342:	2304      	movs	r3, #4
 8006344:	e00e      	b.n	8006364 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	d004      	beq.n	800635c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2201      	movs	r2, #1
 8006356:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006358:	2301      	movs	r3, #1
 800635a:	e003      	b.n	8006364 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	22c5      	movs	r2, #197	; 0xc5
 8006360:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3714      	adds	r7, #20
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr
 8006370:	20000000 	.word	0x20000000
 8006374:	10624dd3 	.word	0x10624dd3

08006378 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006380:	4b1a      	ldr	r3, [pc, #104]	; (80063ec <SDMMC_GetCmdResp3+0x74>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a1a      	ldr	r2, [pc, #104]	; (80063f0 <SDMMC_GetCmdResp3+0x78>)
 8006386:	fba2 2303 	umull	r2, r3, r2, r3
 800638a:	0a5b      	lsrs	r3, r3, #9
 800638c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006390:	fb02 f303 	mul.w	r3, r2, r3
 8006394:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	1e5a      	subs	r2, r3, #1
 800639a:	60fa      	str	r2, [r7, #12]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d102      	bne.n	80063a6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80063a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80063a4:	e01b      	b.n	80063de <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063aa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d0ef      	beq.n	8006396 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1ea      	bne.n	8006396 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c4:	f003 0304 	and.w	r3, r3, #4
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d004      	beq.n	80063d6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2204      	movs	r2, #4
 80063d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80063d2:	2304      	movs	r3, #4
 80063d4:	e003      	b.n	80063de <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	22c5      	movs	r2, #197	; 0xc5
 80063da:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	20000000 	.word	0x20000000
 80063f0:	10624dd3 	.word	0x10624dd3

080063f4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b088      	sub	sp, #32
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	460b      	mov	r3, r1
 80063fe:	607a      	str	r2, [r7, #4]
 8006400:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006402:	4b35      	ldr	r3, [pc, #212]	; (80064d8 <SDMMC_GetCmdResp6+0xe4>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a35      	ldr	r2, [pc, #212]	; (80064dc <SDMMC_GetCmdResp6+0xe8>)
 8006408:	fba2 2303 	umull	r2, r3, r2, r3
 800640c:	0a5b      	lsrs	r3, r3, #9
 800640e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006412:	fb02 f303 	mul.w	r3, r2, r3
 8006416:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	1e5a      	subs	r2, r3, #1
 800641c:	61fa      	str	r2, [r7, #28]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d102      	bne.n	8006428 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006422:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006426:	e052      	b.n	80064ce <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800642c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8006434:	2b00      	cmp	r3, #0
 8006436:	d0ef      	beq.n	8006418 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1ea      	bne.n	8006418 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006446:	f003 0304 	and.w	r3, r3, #4
 800644a:	2b00      	cmp	r3, #0
 800644c:	d004      	beq.n	8006458 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2204      	movs	r2, #4
 8006452:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006454:	2304      	movs	r3, #4
 8006456:	e03a      	b.n	80064ce <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800645c:	f003 0301 	and.w	r3, r3, #1
 8006460:	2b00      	cmp	r3, #0
 8006462:	d004      	beq.n	800646e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2201      	movs	r2, #1
 8006468:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800646a:	2301      	movs	r3, #1
 800646c:	e02f      	b.n	80064ce <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f7ff fc0e 	bl	8005c90 <SDMMC_GetCommandResponse>
 8006474:	4603      	mov	r3, r0
 8006476:	461a      	mov	r2, r3
 8006478:	7afb      	ldrb	r3, [r7, #11]
 800647a:	4293      	cmp	r3, r2
 800647c:	d001      	beq.n	8006482 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800647e:	2301      	movs	r3, #1
 8006480:	e025      	b.n	80064ce <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	22c5      	movs	r2, #197	; 0xc5
 8006486:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006488:	2100      	movs	r1, #0
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f7ff fc0d 	bl	8005caa <SDMMC_GetResponse>
 8006490:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d106      	bne.n	80064aa <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	0c1b      	lsrs	r3, r3, #16
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80064a6:	2300      	movs	r3, #0
 80064a8:	e011      	b.n	80064ce <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d002      	beq.n	80064ba <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80064b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80064b8:	e009      	b.n	80064ce <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d002      	beq.n	80064ca <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80064c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064c8:	e001      	b.n	80064ce <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80064ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3720      	adds	r7, #32
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	20000000 	.word	0x20000000
 80064dc:	10624dd3 	.word	0x10624dd3

080064e0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80064e8:	4b22      	ldr	r3, [pc, #136]	; (8006574 <SDMMC_GetCmdResp7+0x94>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a22      	ldr	r2, [pc, #136]	; (8006578 <SDMMC_GetCmdResp7+0x98>)
 80064ee:	fba2 2303 	umull	r2, r3, r2, r3
 80064f2:	0a5b      	lsrs	r3, r3, #9
 80064f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80064f8:	fb02 f303 	mul.w	r3, r2, r3
 80064fc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	1e5a      	subs	r2, r3, #1
 8006502:	60fa      	str	r2, [r7, #12]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d102      	bne.n	800650e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006508:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800650c:	e02c      	b.n	8006568 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006512:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800651a:	2b00      	cmp	r3, #0
 800651c:	d0ef      	beq.n	80064fe <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1ea      	bne.n	80064fe <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800652c:	f003 0304 	and.w	r3, r3, #4
 8006530:	2b00      	cmp	r3, #0
 8006532:	d004      	beq.n	800653e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2204      	movs	r2, #4
 8006538:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800653a:	2304      	movs	r3, #4
 800653c:	e014      	b.n	8006568 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	2b00      	cmp	r3, #0
 8006548:	d004      	beq.n	8006554 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2201      	movs	r2, #1
 800654e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006550:	2301      	movs	r3, #1
 8006552:	e009      	b.n	8006568 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655c:	2b00      	cmp	r3, #0
 800655e:	d002      	beq.n	8006566 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2240      	movs	r2, #64	; 0x40
 8006564:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006566:	2300      	movs	r3, #0
  
}
 8006568:	4618      	mov	r0, r3
 800656a:	3714      	adds	r7, #20
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr
 8006574:	20000000 	.word	0x20000000
 8006578:	10624dd3 	.word	0x10624dd3

0800657c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006584:	4b11      	ldr	r3, [pc, #68]	; (80065cc <SDMMC_GetCmdError+0x50>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a11      	ldr	r2, [pc, #68]	; (80065d0 <SDMMC_GetCmdError+0x54>)
 800658a:	fba2 2303 	umull	r2, r3, r2, r3
 800658e:	0a5b      	lsrs	r3, r3, #9
 8006590:	f241 3288 	movw	r2, #5000	; 0x1388
 8006594:	fb02 f303 	mul.w	r3, r2, r3
 8006598:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	1e5a      	subs	r2, r3, #1
 800659e:	60fa      	str	r2, [r7, #12]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d102      	bne.n	80065aa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80065a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80065a8:	e009      	b.n	80065be <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d0f1      	beq.n	800659a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	22c5      	movs	r2, #197	; 0xc5
 80065ba:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3714      	adds	r7, #20
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	20000000 	.word	0x20000000
 80065d0:	10624dd3 	.word	0x10624dd3

080065d4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80065d8:	4904      	ldr	r1, [pc, #16]	; (80065ec <MX_FATFS_Init+0x18>)
 80065da:	4805      	ldr	r0, [pc, #20]	; (80065f0 <MX_FATFS_Init+0x1c>)
 80065dc:	f002 fbf8 	bl	8008dd0 <FATFS_LinkDriver>
 80065e0:	4603      	mov	r3, r0
 80065e2:	461a      	mov	r2, r3
 80065e4:	4b03      	ldr	r3, [pc, #12]	; (80065f4 <MX_FATFS_Init+0x20>)
 80065e6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80065e8:	bf00      	nop
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	20002344 	.word	0x20002344
 80065f0:	0800a2c4 	.word	0x0800a2c4
 80065f4:	20002340 	.word	0x20002340

080065f8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80065f8:	b480      	push	{r7}
 80065fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80065fc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80065fe:	4618      	mov	r0, r3
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800660e:	2300      	movs	r3, #0
 8006610:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006612:	f000 f888 	bl	8006726 <BSP_SD_IsDetected>
 8006616:	4603      	mov	r3, r0
 8006618:	2b01      	cmp	r3, #1
 800661a:	d001      	beq.n	8006620 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800661c:	2302      	movs	r3, #2
 800661e:	e005      	b.n	800662c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8006620:	4804      	ldr	r0, [pc, #16]	; (8006634 <BSP_SD_Init+0x2c>)
 8006622:	f7fd fc91 	bl	8003f48 <HAL_SD_Init>
 8006626:	4603      	mov	r3, r0
 8006628:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800662a:	79fb      	ldrb	r3, [r7, #7]
}
 800662c:	4618      	mov	r0, r3
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	200000ac 	.word	0x200000ac

08006638 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b086      	sub	sp, #24
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006644:	2300      	movs	r3, #0
 8006646:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68ba      	ldr	r2, [r7, #8]
 800664c:	68f9      	ldr	r1, [r7, #12]
 800664e:	4806      	ldr	r0, [pc, #24]	; (8006668 <BSP_SD_ReadBlocks_DMA+0x30>)
 8006650:	f7fd fd32 	bl	80040b8 <HAL_SD_ReadBlocks_DMA>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d001      	beq.n	800665e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800665e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006660:	4618      	mov	r0, r3
 8006662:	3718      	adds	r7, #24
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	200000ac 	.word	0x200000ac

0800666c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b086      	sub	sp, #24
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006678:	2300      	movs	r3, #0
 800667a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	68f9      	ldr	r1, [r7, #12]
 8006682:	4806      	ldr	r0, [pc, #24]	; (800669c <BSP_SD_WriteBlocks_DMA+0x30>)
 8006684:	f7fd fdfa 	bl	800427c <HAL_SD_WriteBlocks_DMA>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d001      	beq.n	8006692 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006692:	7dfb      	ldrb	r3, [r7, #23]
}
 8006694:	4618      	mov	r0, r3
 8006696:	3718      	adds	r7, #24
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	200000ac 	.word	0x200000ac

080066a0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80066a4:	4805      	ldr	r0, [pc, #20]	; (80066bc <BSP_SD_GetCardState+0x1c>)
 80066a6:	f7fe fa1f 	bl	8004ae8 <HAL_SD_GetCardState>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b04      	cmp	r3, #4
 80066ae:	bf14      	ite	ne
 80066b0:	2301      	movne	r3, #1
 80066b2:	2300      	moveq	r3, #0
 80066b4:	b2db      	uxtb	r3, r3
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	200000ac 	.word	0x200000ac

080066c0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80066c8:	6879      	ldr	r1, [r7, #4]
 80066ca:	4803      	ldr	r0, [pc, #12]	; (80066d8 <BSP_SD_GetCardInfo+0x18>)
 80066cc:	f7fe f9e0 	bl	8004a90 <HAL_SD_GetCardInfo>
}
 80066d0:	bf00      	nop
 80066d2:	3708      	adds	r7, #8
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	200000ac 	.word	0x200000ac

080066dc <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80066e4:	f000 f818 	bl	8006718 <BSP_SD_AbortCallback>
}
 80066e8:	bf00      	nop
 80066ea:	3708      	adds	r7, #8
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80066f8:	f000 f9a8 	bl	8006a4c <BSP_SD_WriteCpltCallback>
}
 80066fc:	bf00      	nop
 80066fe:	3708      	adds	r7, #8
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800670c:	f000 f9aa 	bl	8006a64 <BSP_SD_ReadCpltCallback>
}
 8006710:	bf00      	nop
 8006712:	3708      	adds	r7, #8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8006718:	b480      	push	{r7}
 800671a:	af00      	add	r7, sp, #0

}
 800671c:	bf00      	nop
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr

08006726 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006726:	b580      	push	{r7, lr}
 8006728:	b082      	sub	sp, #8
 800672a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800672c:	2301      	movs	r3, #1
 800672e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8006730:	f000 f80c 	bl	800674c <BSP_PlatformIsDetected>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d101      	bne.n	800673e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800673a:	2300      	movs	r3, #0
 800673c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800673e:	79fb      	ldrb	r3, [r7, #7]
 8006740:	b2db      	uxtb	r3, r3
}
 8006742:	4618      	mov	r0, r3
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
	...

0800674c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8006752:	2301      	movs	r3, #1
 8006754:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 8006756:	2104      	movs	r1, #4
 8006758:	4806      	ldr	r0, [pc, #24]	; (8006774 <BSP_PlatformIsDetected+0x28>)
 800675a:	f7fc fab7 	bl	8002ccc <HAL_GPIO_ReadPin>
 800675e:	4603      	mov	r3, r0
 8006760:	2b01      	cmp	r3, #1
 8006762:	d001      	beq.n	8006768 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8006764:	2300      	movs	r3, #0
 8006766:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8006768:	79fb      	ldrb	r3, [r7, #7]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	40021800 	.word	0x40021800

08006778 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8006780:	f7fa fe7c 	bl	800147c <HAL_GetTick>
 8006784:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8006786:	e006      	b.n	8006796 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006788:	f7ff ff8a 	bl	80066a0 <BSP_SD_GetCardState>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d101      	bne.n	8006796 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8006792:	2300      	movs	r3, #0
 8006794:	e009      	b.n	80067aa <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8006796:	f7fa fe71 	bl	800147c <HAL_GetTick>
 800679a:	4602      	mov	r2, r0
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d8f0      	bhi.n	8006788 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80067a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
	...

080067b4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	4603      	mov	r3, r0
 80067bc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80067be:	4b0b      	ldr	r3, [pc, #44]	; (80067ec <SD_CheckStatus+0x38>)
 80067c0:	2201      	movs	r2, #1
 80067c2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80067c4:	f7ff ff6c 	bl	80066a0 <BSP_SD_GetCardState>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d107      	bne.n	80067de <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80067ce:	4b07      	ldr	r3, [pc, #28]	; (80067ec <SD_CheckStatus+0x38>)
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	f023 0301 	bic.w	r3, r3, #1
 80067d8:	b2da      	uxtb	r2, r3
 80067da:	4b04      	ldr	r3, [pc, #16]	; (80067ec <SD_CheckStatus+0x38>)
 80067dc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80067de:	4b03      	ldr	r3, [pc, #12]	; (80067ec <SD_CheckStatus+0x38>)
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	b2db      	uxtb	r3, r3
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3708      	adds	r7, #8
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	20000009 	.word	0x20000009

080067f0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	4603      	mov	r3, r0
 80067f8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80067fa:	f7ff ff05 	bl	8006608 <BSP_SD_Init>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d107      	bne.n	8006814 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8006804:	79fb      	ldrb	r3, [r7, #7]
 8006806:	4618      	mov	r0, r3
 8006808:	f7ff ffd4 	bl	80067b4 <SD_CheckStatus>
 800680c:	4603      	mov	r3, r0
 800680e:	461a      	mov	r2, r3
 8006810:	4b04      	ldr	r3, [pc, #16]	; (8006824 <SD_initialize+0x34>)
 8006812:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006814:	4b03      	ldr	r3, [pc, #12]	; (8006824 <SD_initialize+0x34>)
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	b2db      	uxtb	r3, r3
}
 800681a:	4618      	mov	r0, r3
 800681c:	3708      	adds	r7, #8
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	20000009 	.word	0x20000009

08006828 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	4603      	mov	r3, r0
 8006830:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006832:	79fb      	ldrb	r3, [r7, #7]
 8006834:	4618      	mov	r0, r3
 8006836:	f7ff ffbd 	bl	80067b4 <SD_CheckStatus>
 800683a:	4603      	mov	r3, r0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3708      	adds	r7, #8
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	60b9      	str	r1, [r7, #8]
 800684c:	607a      	str	r2, [r7, #4]
 800684e:	603b      	str	r3, [r7, #0]
 8006850:	4603      	mov	r3, r0
 8006852:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006858:	f247 5030 	movw	r0, #30000	; 0x7530
 800685c:	f7ff ff8c 	bl	8006778 <SD_CheckStatusWithTimeout>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	da01      	bge.n	800686a <SD_read+0x26>
  {
    return res;
 8006866:	7dfb      	ldrb	r3, [r7, #23]
 8006868:	e03b      	b.n	80068e2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800686a:	683a      	ldr	r2, [r7, #0]
 800686c:	6879      	ldr	r1, [r7, #4]
 800686e:	68b8      	ldr	r0, [r7, #8]
 8006870:	f7ff fee2 	bl	8006638 <BSP_SD_ReadBlocks_DMA>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d132      	bne.n	80068e0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800687a:	4b1c      	ldr	r3, [pc, #112]	; (80068ec <SD_read+0xa8>)
 800687c:	2200      	movs	r2, #0
 800687e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8006880:	f7fa fdfc 	bl	800147c <HAL_GetTick>
 8006884:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006886:	bf00      	nop
 8006888:	4b18      	ldr	r3, [pc, #96]	; (80068ec <SD_read+0xa8>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d108      	bne.n	80068a2 <SD_read+0x5e>
 8006890:	f7fa fdf4 	bl	800147c <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	f247 522f 	movw	r2, #29999	; 0x752f
 800689e:	4293      	cmp	r3, r2
 80068a0:	d9f2      	bls.n	8006888 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80068a2:	4b12      	ldr	r3, [pc, #72]	; (80068ec <SD_read+0xa8>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d102      	bne.n	80068b0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	75fb      	strb	r3, [r7, #23]
 80068ae:	e017      	b.n	80068e0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80068b0:	4b0e      	ldr	r3, [pc, #56]	; (80068ec <SD_read+0xa8>)
 80068b2:	2200      	movs	r2, #0
 80068b4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80068b6:	f7fa fde1 	bl	800147c <HAL_GetTick>
 80068ba:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80068bc:	e007      	b.n	80068ce <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80068be:	f7ff feef 	bl	80066a0 <BSP_SD_GetCardState>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d102      	bne.n	80068ce <SD_read+0x8a>
          {
            res = RES_OK;
 80068c8:	2300      	movs	r3, #0
 80068ca:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80068cc:	e008      	b.n	80068e0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80068ce:	f7fa fdd5 	bl	800147c <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	f247 522f 	movw	r2, #29999	; 0x752f
 80068dc:	4293      	cmp	r3, r2
 80068de:	d9ee      	bls.n	80068be <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80068e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3718      	adds	r7, #24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	200027ac 	.word	0x200027ac

080068f0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60b9      	str	r1, [r7, #8]
 80068f8:	607a      	str	r2, [r7, #4]
 80068fa:	603b      	str	r3, [r7, #0]
 80068fc:	4603      	mov	r3, r0
 80068fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8006904:	4b24      	ldr	r3, [pc, #144]	; (8006998 <SD_write+0xa8>)
 8006906:	2200      	movs	r2, #0
 8006908:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800690a:	f247 5030 	movw	r0, #30000	; 0x7530
 800690e:	f7ff ff33 	bl	8006778 <SD_CheckStatusWithTimeout>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	da01      	bge.n	800691c <SD_write+0x2c>
  {
    return res;
 8006918:	7dfb      	ldrb	r3, [r7, #23]
 800691a:	e038      	b.n	800698e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800691c:	683a      	ldr	r2, [r7, #0]
 800691e:	6879      	ldr	r1, [r7, #4]
 8006920:	68b8      	ldr	r0, [r7, #8]
 8006922:	f7ff fea3 	bl	800666c <BSP_SD_WriteBlocks_DMA>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d12f      	bne.n	800698c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800692c:	f7fa fda6 	bl	800147c <HAL_GetTick>
 8006930:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006932:	bf00      	nop
 8006934:	4b18      	ldr	r3, [pc, #96]	; (8006998 <SD_write+0xa8>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d108      	bne.n	800694e <SD_write+0x5e>
 800693c:	f7fa fd9e 	bl	800147c <HAL_GetTick>
 8006940:	4602      	mov	r2, r0
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	f247 522f 	movw	r2, #29999	; 0x752f
 800694a:	4293      	cmp	r3, r2
 800694c:	d9f2      	bls.n	8006934 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800694e:	4b12      	ldr	r3, [pc, #72]	; (8006998 <SD_write+0xa8>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d102      	bne.n	800695c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	75fb      	strb	r3, [r7, #23]
 800695a:	e017      	b.n	800698c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800695c:	4b0e      	ldr	r3, [pc, #56]	; (8006998 <SD_write+0xa8>)
 800695e:	2200      	movs	r2, #0
 8006960:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006962:	f7fa fd8b 	bl	800147c <HAL_GetTick>
 8006966:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006968:	e007      	b.n	800697a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800696a:	f7ff fe99 	bl	80066a0 <BSP_SD_GetCardState>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d102      	bne.n	800697a <SD_write+0x8a>
          {
            res = RES_OK;
 8006974:	2300      	movs	r3, #0
 8006976:	75fb      	strb	r3, [r7, #23]
            break;
 8006978:	e008      	b.n	800698c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800697a:	f7fa fd7f 	bl	800147c <HAL_GetTick>
 800697e:	4602      	mov	r2, r0
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	f247 522f 	movw	r2, #29999	; 0x752f
 8006988:	4293      	cmp	r3, r2
 800698a:	d9ee      	bls.n	800696a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800698c:	7dfb      	ldrb	r3, [r7, #23]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3718      	adds	r7, #24
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	200027a8 	.word	0x200027a8

0800699c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b08c      	sub	sp, #48	; 0x30
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	4603      	mov	r3, r0
 80069a4:	603a      	str	r2, [r7, #0]
 80069a6:	71fb      	strb	r3, [r7, #7]
 80069a8:	460b      	mov	r3, r1
 80069aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80069b2:	4b25      	ldr	r3, [pc, #148]	; (8006a48 <SD_ioctl+0xac>)
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	f003 0301 	and.w	r3, r3, #1
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d001      	beq.n	80069c4 <SD_ioctl+0x28>
 80069c0:	2303      	movs	r3, #3
 80069c2:	e03c      	b.n	8006a3e <SD_ioctl+0xa2>

  switch (cmd)
 80069c4:	79bb      	ldrb	r3, [r7, #6]
 80069c6:	2b03      	cmp	r3, #3
 80069c8:	d834      	bhi.n	8006a34 <SD_ioctl+0x98>
 80069ca:	a201      	add	r2, pc, #4	; (adr r2, 80069d0 <SD_ioctl+0x34>)
 80069cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d0:	080069e1 	.word	0x080069e1
 80069d4:	080069e9 	.word	0x080069e9
 80069d8:	08006a01 	.word	0x08006a01
 80069dc:	08006a1b 	.word	0x08006a1b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80069e0:	2300      	movs	r3, #0
 80069e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80069e6:	e028      	b.n	8006a3a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80069e8:	f107 030c 	add.w	r3, r7, #12
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7ff fe67 	bl	80066c0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80069f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80069f8:	2300      	movs	r3, #0
 80069fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80069fe:	e01c      	b.n	8006a3a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006a00:	f107 030c 	add.w	r3, r7, #12
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7ff fe5b 	bl	80066c0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0c:	b29a      	uxth	r2, r3
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006a12:	2300      	movs	r3, #0
 8006a14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006a18:	e00f      	b.n	8006a3a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006a1a:	f107 030c 	add.w	r3, r7, #12
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7ff fe4e 	bl	80066c0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a26:	0a5a      	lsrs	r2, r3, #9
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006a32:	e002      	b.n	8006a3a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006a34:	2304      	movs	r3, #4
 8006a36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006a3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3730      	adds	r7, #48	; 0x30
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	20000009 	.word	0x20000009

08006a4c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8006a50:	4b03      	ldr	r3, [pc, #12]	; (8006a60 <BSP_SD_WriteCpltCallback+0x14>)
 8006a52:	2201      	movs	r2, #1
 8006a54:	601a      	str	r2, [r3, #0]
}
 8006a56:	bf00      	nop
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	200027a8 	.word	0x200027a8

08006a64 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006a64:	b480      	push	{r7}
 8006a66:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8006a68:	4b03      	ldr	r3, [pc, #12]	; (8006a78 <BSP_SD_ReadCpltCallback+0x14>)
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	601a      	str	r2, [r3, #0]
}
 8006a6e:	bf00      	nop
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr
 8006a78:	200027ac 	.word	0x200027ac

08006a7c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	4603      	mov	r3, r0
 8006a84:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006a86:	79fb      	ldrb	r3, [r7, #7]
 8006a88:	4a08      	ldr	r2, [pc, #32]	; (8006aac <disk_status+0x30>)
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	4413      	add	r3, r2
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	79fa      	ldrb	r2, [r7, #7]
 8006a94:	4905      	ldr	r1, [pc, #20]	; (8006aac <disk_status+0x30>)
 8006a96:	440a      	add	r2, r1
 8006a98:	7a12      	ldrb	r2, [r2, #8]
 8006a9a:	4610      	mov	r0, r2
 8006a9c:	4798      	blx	r3
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	200027d8 	.word	0x200027d8

08006ab0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006aba:	2300      	movs	r3, #0
 8006abc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006abe:	79fb      	ldrb	r3, [r7, #7]
 8006ac0:	4a0d      	ldr	r2, [pc, #52]	; (8006af8 <disk_initialize+0x48>)
 8006ac2:	5cd3      	ldrb	r3, [r2, r3]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d111      	bne.n	8006aec <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006ac8:	79fb      	ldrb	r3, [r7, #7]
 8006aca:	4a0b      	ldr	r2, [pc, #44]	; (8006af8 <disk_initialize+0x48>)
 8006acc:	2101      	movs	r1, #1
 8006ace:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006ad0:	79fb      	ldrb	r3, [r7, #7]
 8006ad2:	4a09      	ldr	r2, [pc, #36]	; (8006af8 <disk_initialize+0x48>)
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4413      	add	r3, r2
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	79fa      	ldrb	r2, [r7, #7]
 8006ade:	4906      	ldr	r1, [pc, #24]	; (8006af8 <disk_initialize+0x48>)
 8006ae0:	440a      	add	r2, r1
 8006ae2:	7a12      	ldrb	r2, [r2, #8]
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	4798      	blx	r3
 8006ae8:	4603      	mov	r3, r0
 8006aea:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	200027d8 	.word	0x200027d8

08006afc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006afc:	b590      	push	{r4, r7, lr}
 8006afe:	b087      	sub	sp, #28
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60b9      	str	r1, [r7, #8]
 8006b04:	607a      	str	r2, [r7, #4]
 8006b06:	603b      	str	r3, [r7, #0]
 8006b08:	4603      	mov	r3, r0
 8006b0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
 8006b0e:	4a0a      	ldr	r2, [pc, #40]	; (8006b38 <disk_read+0x3c>)
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	4413      	add	r3, r2
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	689c      	ldr	r4, [r3, #8]
 8006b18:	7bfb      	ldrb	r3, [r7, #15]
 8006b1a:	4a07      	ldr	r2, [pc, #28]	; (8006b38 <disk_read+0x3c>)
 8006b1c:	4413      	add	r3, r2
 8006b1e:	7a18      	ldrb	r0, [r3, #8]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	68b9      	ldr	r1, [r7, #8]
 8006b26:	47a0      	blx	r4
 8006b28:	4603      	mov	r3, r0
 8006b2a:	75fb      	strb	r3, [r7, #23]
  return res;
 8006b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	371c      	adds	r7, #28
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd90      	pop	{r4, r7, pc}
 8006b36:	bf00      	nop
 8006b38:	200027d8 	.word	0x200027d8

08006b3c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006b3c:	b590      	push	{r4, r7, lr}
 8006b3e:	b087      	sub	sp, #28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60b9      	str	r1, [r7, #8]
 8006b44:	607a      	str	r2, [r7, #4]
 8006b46:	603b      	str	r3, [r7, #0]
 8006b48:	4603      	mov	r3, r0
 8006b4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006b4c:	7bfb      	ldrb	r3, [r7, #15]
 8006b4e:	4a0a      	ldr	r2, [pc, #40]	; (8006b78 <disk_write+0x3c>)
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	4413      	add	r3, r2
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	68dc      	ldr	r4, [r3, #12]
 8006b58:	7bfb      	ldrb	r3, [r7, #15]
 8006b5a:	4a07      	ldr	r2, [pc, #28]	; (8006b78 <disk_write+0x3c>)
 8006b5c:	4413      	add	r3, r2
 8006b5e:	7a18      	ldrb	r0, [r3, #8]
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	68b9      	ldr	r1, [r7, #8]
 8006b66:	47a0      	blx	r4
 8006b68:	4603      	mov	r3, r0
 8006b6a:	75fb      	strb	r3, [r7, #23]
  return res;
 8006b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	371c      	adds	r7, #28
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd90      	pop	{r4, r7, pc}
 8006b76:	bf00      	nop
 8006b78:	200027d8 	.word	0x200027d8

08006b7c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	4603      	mov	r3, r0
 8006b84:	603a      	str	r2, [r7, #0]
 8006b86:	71fb      	strb	r3, [r7, #7]
 8006b88:	460b      	mov	r3, r1
 8006b8a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006b8c:	79fb      	ldrb	r3, [r7, #7]
 8006b8e:	4a09      	ldr	r2, [pc, #36]	; (8006bb4 <disk_ioctl+0x38>)
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4413      	add	r3, r2
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	79fa      	ldrb	r2, [r7, #7]
 8006b9a:	4906      	ldr	r1, [pc, #24]	; (8006bb4 <disk_ioctl+0x38>)
 8006b9c:	440a      	add	r2, r1
 8006b9e:	7a10      	ldrb	r0, [r2, #8]
 8006ba0:	79b9      	ldrb	r1, [r7, #6]
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	4798      	blx	r3
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	73fb      	strb	r3, [r7, #15]
  return res;
 8006baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	200027d8 	.word	0x200027d8

08006bb8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006bc8:	89fb      	ldrh	r3, [r7, #14]
 8006bca:	021b      	lsls	r3, r3, #8
 8006bcc:	b21a      	sxth	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	b21b      	sxth	r3, r3
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	b21b      	sxth	r3, r3
 8006bd8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006bda:	89fb      	ldrh	r3, [r7, #14]
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3714      	adds	r7, #20
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	3303      	adds	r3, #3
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	021b      	lsls	r3, r3, #8
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	3202      	adds	r2, #2
 8006c00:	7812      	ldrb	r2, [r2, #0]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	021b      	lsls	r3, r3, #8
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	3201      	adds	r2, #1
 8006c0e:	7812      	ldrb	r2, [r2, #0]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	021b      	lsls	r3, r3, #8
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	7812      	ldrb	r2, [r2, #0]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	60fb      	str	r3, [r7, #12]
	return rv;
 8006c20:	68fb      	ldr	r3, [r7, #12]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3714      	adds	r7, #20
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b083      	sub	sp, #12
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	460b      	mov	r3, r1
 8006c38:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	1c5a      	adds	r2, r3, #1
 8006c3e:	607a      	str	r2, [r7, #4]
 8006c40:	887a      	ldrh	r2, [r7, #2]
 8006c42:	b2d2      	uxtb	r2, r2
 8006c44:	701a      	strb	r2, [r3, #0]
 8006c46:	887b      	ldrh	r3, [r7, #2]
 8006c48:	0a1b      	lsrs	r3, r3, #8
 8006c4a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	1c5a      	adds	r2, r3, #1
 8006c50:	607a      	str	r2, [r7, #4]
 8006c52:	887a      	ldrh	r2, [r7, #2]
 8006c54:	b2d2      	uxtb	r2, r2
 8006c56:	701a      	strb	r2, [r3, #0]
}
 8006c58:	bf00      	nop
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	1c5a      	adds	r2, r3, #1
 8006c72:	607a      	str	r2, [r7, #4]
 8006c74:	683a      	ldr	r2, [r7, #0]
 8006c76:	b2d2      	uxtb	r2, r2
 8006c78:	701a      	strb	r2, [r3, #0]
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	0a1b      	lsrs	r3, r3, #8
 8006c7e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	1c5a      	adds	r2, r3, #1
 8006c84:	607a      	str	r2, [r7, #4]
 8006c86:	683a      	ldr	r2, [r7, #0]
 8006c88:	b2d2      	uxtb	r2, r2
 8006c8a:	701a      	strb	r2, [r3, #0]
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	0a1b      	lsrs	r3, r3, #8
 8006c90:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	1c5a      	adds	r2, r3, #1
 8006c96:	607a      	str	r2, [r7, #4]
 8006c98:	683a      	ldr	r2, [r7, #0]
 8006c9a:	b2d2      	uxtb	r2, r2
 8006c9c:	701a      	strb	r2, [r3, #0]
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	0a1b      	lsrs	r3, r3, #8
 8006ca2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	1c5a      	adds	r2, r3, #1
 8006ca8:	607a      	str	r2, [r7, #4]
 8006caa:	683a      	ldr	r2, [r7, #0]
 8006cac:	b2d2      	uxtb	r2, r2
 8006cae:	701a      	strb	r2, [r3, #0]
}
 8006cb0:	bf00      	nop
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006cbc:	b480      	push	{r7}
 8006cbe:	b087      	sub	sp, #28
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00d      	beq.n	8006cf2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006cd6:	693a      	ldr	r2, [r7, #16]
 8006cd8:	1c53      	adds	r3, r2, #1
 8006cda:	613b      	str	r3, [r7, #16]
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	1c59      	adds	r1, r3, #1
 8006ce0:	6179      	str	r1, [r7, #20]
 8006ce2:	7812      	ldrb	r2, [r2, #0]
 8006ce4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	607b      	str	r3, [r7, #4]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1f1      	bne.n	8006cd6 <mem_cpy+0x1a>
	}
}
 8006cf2:	bf00      	nop
 8006cf4:	371c      	adds	r7, #28
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr

08006cfe <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006cfe:	b480      	push	{r7}
 8006d00:	b087      	sub	sp, #28
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	60f8      	str	r0, [r7, #12]
 8006d06:	60b9      	str	r1, [r7, #8]
 8006d08:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	1c5a      	adds	r2, r3, #1
 8006d12:	617a      	str	r2, [r7, #20]
 8006d14:	68ba      	ldr	r2, [r7, #8]
 8006d16:	b2d2      	uxtb	r2, r2
 8006d18:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	607b      	str	r3, [r7, #4]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1f3      	bne.n	8006d0e <mem_set+0x10>
}
 8006d26:	bf00      	nop
 8006d28:	bf00      	nop
 8006d2a:	371c      	adds	r7, #28
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006d34:	b480      	push	{r7}
 8006d36:	b089      	sub	sp, #36	; 0x24
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	61fb      	str	r3, [r7, #28]
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	1c5a      	adds	r2, r3, #1
 8006d50:	61fa      	str	r2, [r7, #28]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	4619      	mov	r1, r3
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	1c5a      	adds	r2, r3, #1
 8006d5a:	61ba      	str	r2, [r7, #24]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	1acb      	subs	r3, r1, r3
 8006d60:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	3b01      	subs	r3, #1
 8006d66:	607b      	str	r3, [r7, #4]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d002      	beq.n	8006d74 <mem_cmp+0x40>
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d0eb      	beq.n	8006d4c <mem_cmp+0x18>

	return r;
 8006d74:	697b      	ldr	r3, [r7, #20]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3724      	adds	r7, #36	; 0x24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006d82:	b480      	push	{r7}
 8006d84:	b083      	sub	sp, #12
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
 8006d8a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006d8c:	e002      	b.n	8006d94 <chk_chr+0x12>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	3301      	adds	r3, #1
 8006d92:	607b      	str	r3, [r7, #4]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d005      	beq.n	8006da8 <chk_chr+0x26>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	461a      	mov	r2, r3
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d1f2      	bne.n	8006d8e <chk_chr+0xc>
	return *str;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	781b      	ldrb	r3, [r3, #0]
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	60bb      	str	r3, [r7, #8]
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	60fb      	str	r3, [r7, #12]
 8006dca:	e029      	b.n	8006e20 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006dcc:	4a27      	ldr	r2, [pc, #156]	; (8006e6c <chk_lock+0xb4>)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	011b      	lsls	r3, r3, #4
 8006dd2:	4413      	add	r3, r2
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d01d      	beq.n	8006e16 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006dda:	4a24      	ldr	r2, [pc, #144]	; (8006e6c <chk_lock+0xb4>)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	011b      	lsls	r3, r3, #4
 8006de0:	4413      	add	r3, r2
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d116      	bne.n	8006e1a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006dec:	4a1f      	ldr	r2, [pc, #124]	; (8006e6c <chk_lock+0xb4>)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	011b      	lsls	r3, r3, #4
 8006df2:	4413      	add	r3, r2
 8006df4:	3304      	adds	r3, #4
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d10c      	bne.n	8006e1a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006e00:	4a1a      	ldr	r2, [pc, #104]	; (8006e6c <chk_lock+0xb4>)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	011b      	lsls	r3, r3, #4
 8006e06:	4413      	add	r3, r2
 8006e08:	3308      	adds	r3, #8
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d102      	bne.n	8006e1a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006e14:	e007      	b.n	8006e26 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006e16:	2301      	movs	r3, #1
 8006e18:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	60fb      	str	r3, [r7, #12]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d9d2      	bls.n	8006dcc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d109      	bne.n	8006e40 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d102      	bne.n	8006e38 <chk_lock+0x80>
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d101      	bne.n	8006e3c <chk_lock+0x84>
 8006e38:	2300      	movs	r3, #0
 8006e3a:	e010      	b.n	8006e5e <chk_lock+0xa6>
 8006e3c:	2312      	movs	r3, #18
 8006e3e:	e00e      	b.n	8006e5e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d108      	bne.n	8006e58 <chk_lock+0xa0>
 8006e46:	4a09      	ldr	r2, [pc, #36]	; (8006e6c <chk_lock+0xb4>)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	011b      	lsls	r3, r3, #4
 8006e4c:	4413      	add	r3, r2
 8006e4e:	330c      	adds	r3, #12
 8006e50:	881b      	ldrh	r3, [r3, #0]
 8006e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e56:	d101      	bne.n	8006e5c <chk_lock+0xa4>
 8006e58:	2310      	movs	r3, #16
 8006e5a:	e000      	b.n	8006e5e <chk_lock+0xa6>
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3714      	adds	r7, #20
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	200027b8 	.word	0x200027b8

08006e70 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006e76:	2300      	movs	r3, #0
 8006e78:	607b      	str	r3, [r7, #4]
 8006e7a:	e002      	b.n	8006e82 <enq_lock+0x12>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	607b      	str	r3, [r7, #4]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d806      	bhi.n	8006e96 <enq_lock+0x26>
 8006e88:	4a09      	ldr	r2, [pc, #36]	; (8006eb0 <enq_lock+0x40>)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	011b      	lsls	r3, r3, #4
 8006e8e:	4413      	add	r3, r2
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1f2      	bne.n	8006e7c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	bf14      	ite	ne
 8006e9c:	2301      	movne	r3, #1
 8006e9e:	2300      	moveq	r3, #0
 8006ea0:	b2db      	uxtb	r3, r3
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	370c      	adds	r7, #12
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	200027b8 	.word	0x200027b8

08006eb4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	60fb      	str	r3, [r7, #12]
 8006ec2:	e01f      	b.n	8006f04 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006ec4:	4a41      	ldr	r2, [pc, #260]	; (8006fcc <inc_lock+0x118>)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	011b      	lsls	r3, r3, #4
 8006eca:	4413      	add	r3, r2
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d113      	bne.n	8006efe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006ed6:	4a3d      	ldr	r2, [pc, #244]	; (8006fcc <inc_lock+0x118>)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	011b      	lsls	r3, r3, #4
 8006edc:	4413      	add	r3, r2
 8006ede:	3304      	adds	r3, #4
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d109      	bne.n	8006efe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006eea:	4a38      	ldr	r2, [pc, #224]	; (8006fcc <inc_lock+0x118>)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	011b      	lsls	r3, r3, #4
 8006ef0:	4413      	add	r3, r2
 8006ef2:	3308      	adds	r3, #8
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d006      	beq.n	8006f0c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	3301      	adds	r3, #1
 8006f02:	60fb      	str	r3, [r7, #12]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d9dc      	bls.n	8006ec4 <inc_lock+0x10>
 8006f0a:	e000      	b.n	8006f0e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006f0c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d132      	bne.n	8006f7a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006f14:	2300      	movs	r3, #0
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	e002      	b.n	8006f20 <inc_lock+0x6c>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	60fb      	str	r3, [r7, #12]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d806      	bhi.n	8006f34 <inc_lock+0x80>
 8006f26:	4a29      	ldr	r2, [pc, #164]	; (8006fcc <inc_lock+0x118>)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	011b      	lsls	r3, r3, #4
 8006f2c:	4413      	add	r3, r2
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d1f2      	bne.n	8006f1a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d101      	bne.n	8006f3e <inc_lock+0x8a>
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	e040      	b.n	8006fc0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	4922      	ldr	r1, [pc, #136]	; (8006fcc <inc_lock+0x118>)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	011b      	lsls	r3, r3, #4
 8006f48:	440b      	add	r3, r1
 8006f4a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	689a      	ldr	r2, [r3, #8]
 8006f50:	491e      	ldr	r1, [pc, #120]	; (8006fcc <inc_lock+0x118>)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	011b      	lsls	r3, r3, #4
 8006f56:	440b      	add	r3, r1
 8006f58:	3304      	adds	r3, #4
 8006f5a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	695a      	ldr	r2, [r3, #20]
 8006f60:	491a      	ldr	r1, [pc, #104]	; (8006fcc <inc_lock+0x118>)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	011b      	lsls	r3, r3, #4
 8006f66:	440b      	add	r3, r1
 8006f68:	3308      	adds	r3, #8
 8006f6a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006f6c:	4a17      	ldr	r2, [pc, #92]	; (8006fcc <inc_lock+0x118>)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	011b      	lsls	r3, r3, #4
 8006f72:	4413      	add	r3, r2
 8006f74:	330c      	adds	r3, #12
 8006f76:	2200      	movs	r2, #0
 8006f78:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d009      	beq.n	8006f94 <inc_lock+0xe0>
 8006f80:	4a12      	ldr	r2, [pc, #72]	; (8006fcc <inc_lock+0x118>)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	011b      	lsls	r3, r3, #4
 8006f86:	4413      	add	r3, r2
 8006f88:	330c      	adds	r3, #12
 8006f8a:	881b      	ldrh	r3, [r3, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d001      	beq.n	8006f94 <inc_lock+0xe0>
 8006f90:	2300      	movs	r3, #0
 8006f92:	e015      	b.n	8006fc0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d108      	bne.n	8006fac <inc_lock+0xf8>
 8006f9a:	4a0c      	ldr	r2, [pc, #48]	; (8006fcc <inc_lock+0x118>)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	011b      	lsls	r3, r3, #4
 8006fa0:	4413      	add	r3, r2
 8006fa2:	330c      	adds	r3, #12
 8006fa4:	881b      	ldrh	r3, [r3, #0]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	e001      	b.n	8006fb0 <inc_lock+0xfc>
 8006fac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006fb0:	4906      	ldr	r1, [pc, #24]	; (8006fcc <inc_lock+0x118>)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	011b      	lsls	r3, r3, #4
 8006fb6:	440b      	add	r3, r1
 8006fb8:	330c      	adds	r3, #12
 8006fba:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	3301      	adds	r3, #1
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3714      	adds	r7, #20
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr
 8006fcc:	200027b8 	.word	0x200027b8

08006fd0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	607b      	str	r3, [r7, #4]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d825      	bhi.n	8007030 <dec_lock+0x60>
		n = Files[i].ctr;
 8006fe4:	4a17      	ldr	r2, [pc, #92]	; (8007044 <dec_lock+0x74>)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	011b      	lsls	r3, r3, #4
 8006fea:	4413      	add	r3, r2
 8006fec:	330c      	adds	r3, #12
 8006fee:	881b      	ldrh	r3, [r3, #0]
 8006ff0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006ff2:	89fb      	ldrh	r3, [r7, #14]
 8006ff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ff8:	d101      	bne.n	8006ffe <dec_lock+0x2e>
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006ffe:	89fb      	ldrh	r3, [r7, #14]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d002      	beq.n	800700a <dec_lock+0x3a>
 8007004:	89fb      	ldrh	r3, [r7, #14]
 8007006:	3b01      	subs	r3, #1
 8007008:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800700a:	4a0e      	ldr	r2, [pc, #56]	; (8007044 <dec_lock+0x74>)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	011b      	lsls	r3, r3, #4
 8007010:	4413      	add	r3, r2
 8007012:	330c      	adds	r3, #12
 8007014:	89fa      	ldrh	r2, [r7, #14]
 8007016:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007018:	89fb      	ldrh	r3, [r7, #14]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d105      	bne.n	800702a <dec_lock+0x5a>
 800701e:	4a09      	ldr	r2, [pc, #36]	; (8007044 <dec_lock+0x74>)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	011b      	lsls	r3, r3, #4
 8007024:	4413      	add	r3, r2
 8007026:	2200      	movs	r2, #0
 8007028:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800702a:	2300      	movs	r3, #0
 800702c:	737b      	strb	r3, [r7, #13]
 800702e:	e001      	b.n	8007034 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007030:	2302      	movs	r3, #2
 8007032:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007034:	7b7b      	ldrb	r3, [r7, #13]
}
 8007036:	4618      	mov	r0, r3
 8007038:	3714      	adds	r7, #20
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	200027b8 	.word	0x200027b8

08007048 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007050:	2300      	movs	r3, #0
 8007052:	60fb      	str	r3, [r7, #12]
 8007054:	e010      	b.n	8007078 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007056:	4a0d      	ldr	r2, [pc, #52]	; (800708c <clear_lock+0x44>)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	011b      	lsls	r3, r3, #4
 800705c:	4413      	add	r3, r2
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	429a      	cmp	r2, r3
 8007064:	d105      	bne.n	8007072 <clear_lock+0x2a>
 8007066:	4a09      	ldr	r2, [pc, #36]	; (800708c <clear_lock+0x44>)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	011b      	lsls	r3, r3, #4
 800706c:	4413      	add	r3, r2
 800706e:	2200      	movs	r2, #0
 8007070:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	3301      	adds	r3, #1
 8007076:	60fb      	str	r3, [r7, #12]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d9eb      	bls.n	8007056 <clear_lock+0xe>
	}
}
 800707e:	bf00      	nop
 8007080:	bf00      	nop
 8007082:	3714      	adds	r7, #20
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr
 800708c:	200027b8 	.word	0x200027b8

08007090 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007098:	2300      	movs	r3, #0
 800709a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	78db      	ldrb	r3, [r3, #3]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d034      	beq.n	800710e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	7858      	ldrb	r0, [r3, #1]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80070b4:	2301      	movs	r3, #1
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	f7ff fd40 	bl	8006b3c <disk_write>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d002      	beq.n	80070c8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	73fb      	strb	r3, [r7, #15]
 80070c6:	e022      	b.n	800710e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	697a      	ldr	r2, [r7, #20]
 80070d4:	1ad2      	subs	r2, r2, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	699b      	ldr	r3, [r3, #24]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d217      	bcs.n	800710e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	789b      	ldrb	r3, [r3, #2]
 80070e2:	613b      	str	r3, [r7, #16]
 80070e4:	e010      	b.n	8007108 <sync_window+0x78>
					wsect += fs->fsize;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	4413      	add	r3, r2
 80070ee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	7858      	ldrb	r0, [r3, #1]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80070fa:	2301      	movs	r3, #1
 80070fc:	697a      	ldr	r2, [r7, #20]
 80070fe:	f7ff fd1d 	bl	8006b3c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	3b01      	subs	r3, #1
 8007106:	613b      	str	r3, [r7, #16]
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	2b01      	cmp	r3, #1
 800710c:	d8eb      	bhi.n	80070e6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800710e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007110:	4618      	mov	r0, r3
 8007112:	3718      	adds	r7, #24
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007122:	2300      	movs	r3, #0
 8007124:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712a:	683a      	ldr	r2, [r7, #0]
 800712c:	429a      	cmp	r2, r3
 800712e:	d01b      	beq.n	8007168 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f7ff ffad 	bl	8007090 <sync_window>
 8007136:	4603      	mov	r3, r0
 8007138:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800713a:	7bfb      	ldrb	r3, [r7, #15]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d113      	bne.n	8007168 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	7858      	ldrb	r0, [r3, #1]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800714a:	2301      	movs	r3, #1
 800714c:	683a      	ldr	r2, [r7, #0]
 800714e:	f7ff fcd5 	bl	8006afc <disk_read>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d004      	beq.n	8007162 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007158:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800715c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800715e:	2301      	movs	r3, #1
 8007160:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	683a      	ldr	r2, [r7, #0]
 8007166:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8007168:	7bfb      	ldrb	r3, [r7, #15]
}
 800716a:	4618      	mov	r0, r3
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
	...

08007174 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f7ff ff87 	bl	8007090 <sync_window>
 8007182:	4603      	mov	r3, r0
 8007184:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007186:	7bfb      	ldrb	r3, [r7, #15]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d158      	bne.n	800723e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	2b03      	cmp	r3, #3
 8007192:	d148      	bne.n	8007226 <sync_fs+0xb2>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	791b      	ldrb	r3, [r3, #4]
 8007198:	2b01      	cmp	r3, #1
 800719a:	d144      	bne.n	8007226 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	3330      	adds	r3, #48	; 0x30
 80071a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071a4:	2100      	movs	r1, #0
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7ff fda9 	bl	8006cfe <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	3330      	adds	r3, #48	; 0x30
 80071b0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80071b4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7ff fd38 	bl	8006c2e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	3330      	adds	r3, #48	; 0x30
 80071c2:	4921      	ldr	r1, [pc, #132]	; (8007248 <sync_fs+0xd4>)
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7ff fd4d 	bl	8006c64 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	3330      	adds	r3, #48	; 0x30
 80071ce:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80071d2:	491e      	ldr	r1, [pc, #120]	; (800724c <sync_fs+0xd8>)
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7ff fd45 	bl	8006c64 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	3330      	adds	r3, #48	; 0x30
 80071de:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	4619      	mov	r1, r3
 80071e8:	4610      	mov	r0, r2
 80071ea:	f7ff fd3b 	bl	8006c64 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	3330      	adds	r3, #48	; 0x30
 80071f2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	4619      	mov	r1, r3
 80071fc:	4610      	mov	r0, r2
 80071fe:	f7ff fd31 	bl	8006c64 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	69db      	ldr	r3, [r3, #28]
 8007206:	1c5a      	adds	r2, r3, #1
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	7858      	ldrb	r0, [r3, #1]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800721a:	2301      	movs	r3, #1
 800721c:	f7ff fc8e 	bl	8006b3c <disk_write>
			fs->fsi_flag = 0;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	785b      	ldrb	r3, [r3, #1]
 800722a:	2200      	movs	r2, #0
 800722c:	2100      	movs	r1, #0
 800722e:	4618      	mov	r0, r3
 8007230:	f7ff fca4 	bl	8006b7c <disk_ioctl>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d001      	beq.n	800723e <sync_fs+0xca>
 800723a:	2301      	movs	r3, #1
 800723c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800723e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007240:	4618      	mov	r0, r3
 8007242:	3710      	adds	r7, #16
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}
 8007248:	41615252 	.word	0x41615252
 800724c:	61417272 	.word	0x61417272

08007250 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	3b02      	subs	r3, #2
 800725e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	695b      	ldr	r3, [r3, #20]
 8007264:	3b02      	subs	r3, #2
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	429a      	cmp	r2, r3
 800726a:	d301      	bcc.n	8007270 <clust2sect+0x20>
 800726c:	2300      	movs	r3, #0
 800726e:	e008      	b.n	8007282 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	895b      	ldrh	r3, [r3, #10]
 8007274:	461a      	mov	r2, r3
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	fb03 f202 	mul.w	r2, r3, r2
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007280:	4413      	add	r3, r2
}
 8007282:	4618      	mov	r0, r3
 8007284:	370c      	adds	r7, #12
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr

0800728e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b086      	sub	sp, #24
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
 8007296:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d904      	bls.n	80072ae <get_fat+0x20>
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	695b      	ldr	r3, [r3, #20]
 80072a8:	683a      	ldr	r2, [r7, #0]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d302      	bcc.n	80072b4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80072ae:	2301      	movs	r3, #1
 80072b0:	617b      	str	r3, [r7, #20]
 80072b2:	e08f      	b.n	80073d4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80072b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072b8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	2b03      	cmp	r3, #3
 80072c0:	d062      	beq.n	8007388 <get_fat+0xfa>
 80072c2:	2b03      	cmp	r3, #3
 80072c4:	dc7c      	bgt.n	80073c0 <get_fat+0x132>
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d002      	beq.n	80072d0 <get_fat+0x42>
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d042      	beq.n	8007354 <get_fat+0xc6>
 80072ce:	e077      	b.n	80073c0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	60fb      	str	r3, [r7, #12]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	085b      	lsrs	r3, r3, #1
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	4413      	add	r3, r2
 80072dc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	6a1a      	ldr	r2, [r3, #32]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	0a5b      	lsrs	r3, r3, #9
 80072e6:	4413      	add	r3, r2
 80072e8:	4619      	mov	r1, r3
 80072ea:	6938      	ldr	r0, [r7, #16]
 80072ec:	f7ff ff14 	bl	8007118 <move_window>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d167      	bne.n	80073c6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	1c5a      	adds	r2, r3, #1
 80072fa:	60fa      	str	r2, [r7, #12]
 80072fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007300:	693a      	ldr	r2, [r7, #16]
 8007302:	4413      	add	r3, r2
 8007304:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007308:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	6a1a      	ldr	r2, [r3, #32]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	0a5b      	lsrs	r3, r3, #9
 8007312:	4413      	add	r3, r2
 8007314:	4619      	mov	r1, r3
 8007316:	6938      	ldr	r0, [r7, #16]
 8007318:	f7ff fefe 	bl	8007118 <move_window>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d153      	bne.n	80073ca <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007328:	693a      	ldr	r2, [r7, #16]
 800732a:	4413      	add	r3, r2
 800732c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007330:	021b      	lsls	r3, r3, #8
 8007332:	461a      	mov	r2, r3
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	4313      	orrs	r3, r2
 8007338:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	f003 0301 	and.w	r3, r3, #1
 8007340:	2b00      	cmp	r3, #0
 8007342:	d002      	beq.n	800734a <get_fat+0xbc>
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	091b      	lsrs	r3, r3, #4
 8007348:	e002      	b.n	8007350 <get_fat+0xc2>
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007350:	617b      	str	r3, [r7, #20]
			break;
 8007352:	e03f      	b.n	80073d4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	6a1a      	ldr	r2, [r3, #32]
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	0a1b      	lsrs	r3, r3, #8
 800735c:	4413      	add	r3, r2
 800735e:	4619      	mov	r1, r3
 8007360:	6938      	ldr	r0, [r7, #16]
 8007362:	f7ff fed9 	bl	8007118 <move_window>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d130      	bne.n	80073ce <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	005b      	lsls	r3, r3, #1
 8007376:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800737a:	4413      	add	r3, r2
 800737c:	4618      	mov	r0, r3
 800737e:	f7ff fc1b 	bl	8006bb8 <ld_word>
 8007382:	4603      	mov	r3, r0
 8007384:	617b      	str	r3, [r7, #20]
			break;
 8007386:	e025      	b.n	80073d4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	6a1a      	ldr	r2, [r3, #32]
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	09db      	lsrs	r3, r3, #7
 8007390:	4413      	add	r3, r2
 8007392:	4619      	mov	r1, r3
 8007394:	6938      	ldr	r0, [r7, #16]
 8007396:	f7ff febf 	bl	8007118 <move_window>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d118      	bne.n	80073d2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80073ae:	4413      	add	r3, r2
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7ff fc19 	bl	8006be8 <ld_dword>
 80073b6:	4603      	mov	r3, r0
 80073b8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80073bc:	617b      	str	r3, [r7, #20]
			break;
 80073be:	e009      	b.n	80073d4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80073c0:	2301      	movs	r3, #1
 80073c2:	617b      	str	r3, [r7, #20]
 80073c4:	e006      	b.n	80073d4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80073c6:	bf00      	nop
 80073c8:	e004      	b.n	80073d4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80073ca:	bf00      	nop
 80073cc:	e002      	b.n	80073d4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80073ce:	bf00      	nop
 80073d0:	e000      	b.n	80073d4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80073d2:	bf00      	nop
		}
	}

	return val;
 80073d4:	697b      	ldr	r3, [r7, #20]
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3718      	adds	r7, #24
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80073de:	b590      	push	{r4, r7, lr}
 80073e0:	b089      	sub	sp, #36	; 0x24
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	60f8      	str	r0, [r7, #12]
 80073e6:	60b9      	str	r1, [r7, #8]
 80073e8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80073ea:	2302      	movs	r3, #2
 80073ec:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	f240 80d9 	bls.w	80075a8 <put_fat+0x1ca>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	f080 80d3 	bcs.w	80075a8 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	2b03      	cmp	r3, #3
 8007408:	f000 8096 	beq.w	8007538 <put_fat+0x15a>
 800740c:	2b03      	cmp	r3, #3
 800740e:	f300 80cb 	bgt.w	80075a8 <put_fat+0x1ca>
 8007412:	2b01      	cmp	r3, #1
 8007414:	d002      	beq.n	800741c <put_fat+0x3e>
 8007416:	2b02      	cmp	r3, #2
 8007418:	d06e      	beq.n	80074f8 <put_fat+0x11a>
 800741a:	e0c5      	b.n	80075a8 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	61bb      	str	r3, [r7, #24]
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	085b      	lsrs	r3, r3, #1
 8007424:	69ba      	ldr	r2, [r7, #24]
 8007426:	4413      	add	r3, r2
 8007428:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6a1a      	ldr	r2, [r3, #32]
 800742e:	69bb      	ldr	r3, [r7, #24]
 8007430:	0a5b      	lsrs	r3, r3, #9
 8007432:	4413      	add	r3, r2
 8007434:	4619      	mov	r1, r3
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	f7ff fe6e 	bl	8007118 <move_window>
 800743c:	4603      	mov	r3, r0
 800743e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007440:	7ffb      	ldrb	r3, [r7, #31]
 8007442:	2b00      	cmp	r3, #0
 8007444:	f040 80a9 	bne.w	800759a <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	1c59      	adds	r1, r3, #1
 8007452:	61b9      	str	r1, [r7, #24]
 8007454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007458:	4413      	add	r3, r2
 800745a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	f003 0301 	and.w	r3, r3, #1
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00d      	beq.n	8007482 <put_fat+0xa4>
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	b25b      	sxtb	r3, r3
 800746c:	f003 030f 	and.w	r3, r3, #15
 8007470:	b25a      	sxtb	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	b2db      	uxtb	r3, r3
 8007476:	011b      	lsls	r3, r3, #4
 8007478:	b25b      	sxtb	r3, r3
 800747a:	4313      	orrs	r3, r2
 800747c:	b25b      	sxtb	r3, r3
 800747e:	b2db      	uxtb	r3, r3
 8007480:	e001      	b.n	8007486 <put_fat+0xa8>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	b2db      	uxtb	r3, r3
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2201      	movs	r2, #1
 800748e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6a1a      	ldr	r2, [r3, #32]
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	0a5b      	lsrs	r3, r3, #9
 8007498:	4413      	add	r3, r2
 800749a:	4619      	mov	r1, r3
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f7ff fe3b 	bl	8007118 <move_window>
 80074a2:	4603      	mov	r3, r0
 80074a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80074a6:	7ffb      	ldrb	r3, [r7, #31]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d178      	bne.n	800759e <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074b8:	4413      	add	r3, r2
 80074ba:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	f003 0301 	and.w	r3, r3, #1
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d003      	beq.n	80074ce <put_fat+0xf0>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	091b      	lsrs	r3, r3, #4
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	e00e      	b.n	80074ec <put_fat+0x10e>
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	b25b      	sxtb	r3, r3
 80074d4:	f023 030f 	bic.w	r3, r3, #15
 80074d8:	b25a      	sxtb	r2, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	0a1b      	lsrs	r3, r3, #8
 80074de:	b25b      	sxtb	r3, r3
 80074e0:	f003 030f 	and.w	r3, r3, #15
 80074e4:	b25b      	sxtb	r3, r3
 80074e6:	4313      	orrs	r3, r2
 80074e8:	b25b      	sxtb	r3, r3
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	697a      	ldr	r2, [r7, #20]
 80074ee:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2201      	movs	r2, #1
 80074f4:	70da      	strb	r2, [r3, #3]
			break;
 80074f6:	e057      	b.n	80075a8 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6a1a      	ldr	r2, [r3, #32]
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	0a1b      	lsrs	r3, r3, #8
 8007500:	4413      	add	r3, r2
 8007502:	4619      	mov	r1, r3
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f7ff fe07 	bl	8007118 <move_window>
 800750a:	4603      	mov	r3, r0
 800750c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800750e:	7ffb      	ldrb	r3, [r7, #31]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d146      	bne.n	80075a2 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	005b      	lsls	r3, r3, #1
 800751e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007522:	4413      	add	r3, r2
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	b292      	uxth	r2, r2
 8007528:	4611      	mov	r1, r2
 800752a:	4618      	mov	r0, r3
 800752c:	f7ff fb7f 	bl	8006c2e <st_word>
			fs->wflag = 1;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2201      	movs	r2, #1
 8007534:	70da      	strb	r2, [r3, #3]
			break;
 8007536:	e037      	b.n	80075a8 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6a1a      	ldr	r2, [r3, #32]
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	09db      	lsrs	r3, r3, #7
 8007540:	4413      	add	r3, r2
 8007542:	4619      	mov	r1, r3
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f7ff fde7 	bl	8007118 <move_window>
 800754a:	4603      	mov	r3, r0
 800754c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800754e:	7ffb      	ldrb	r3, [r7, #31]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d128      	bne.n	80075a6 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007568:	4413      	add	r3, r2
 800756a:	4618      	mov	r0, r3
 800756c:	f7ff fb3c 	bl	8006be8 <ld_dword>
 8007570:	4603      	mov	r3, r0
 8007572:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007576:	4323      	orrs	r3, r4
 8007578:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007588:	4413      	add	r3, r2
 800758a:	6879      	ldr	r1, [r7, #4]
 800758c:	4618      	mov	r0, r3
 800758e:	f7ff fb69 	bl	8006c64 <st_dword>
			fs->wflag = 1;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2201      	movs	r2, #1
 8007596:	70da      	strb	r2, [r3, #3]
			break;
 8007598:	e006      	b.n	80075a8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800759a:	bf00      	nop
 800759c:	e004      	b.n	80075a8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800759e:	bf00      	nop
 80075a0:	e002      	b.n	80075a8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80075a2:	bf00      	nop
 80075a4:	e000      	b.n	80075a8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80075a6:	bf00      	nop
		}
	}
	return res;
 80075a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3724      	adds	r7, #36	; 0x24
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd90      	pop	{r4, r7, pc}

080075b2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b088      	sub	sp, #32
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	60f8      	str	r0, [r7, #12]
 80075ba:	60b9      	str	r1, [r7, #8]
 80075bc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80075be:	2300      	movs	r3, #0
 80075c0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d904      	bls.n	80075d8 <remove_chain+0x26>
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	695b      	ldr	r3, [r3, #20]
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d301      	bcc.n	80075dc <remove_chain+0x2a>
 80075d8:	2302      	movs	r3, #2
 80075da:	e04b      	b.n	8007674 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00c      	beq.n	80075fc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80075e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075e6:	6879      	ldr	r1, [r7, #4]
 80075e8:	69b8      	ldr	r0, [r7, #24]
 80075ea:	f7ff fef8 	bl	80073de <put_fat>
 80075ee:	4603      	mov	r3, r0
 80075f0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80075f2:	7ffb      	ldrb	r3, [r7, #31]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d001      	beq.n	80075fc <remove_chain+0x4a>
 80075f8:	7ffb      	ldrb	r3, [r7, #31]
 80075fa:	e03b      	b.n	8007674 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80075fc:	68b9      	ldr	r1, [r7, #8]
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f7ff fe45 	bl	800728e <get_fat>
 8007604:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d031      	beq.n	8007670 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	2b01      	cmp	r3, #1
 8007610:	d101      	bne.n	8007616 <remove_chain+0x64>
 8007612:	2302      	movs	r3, #2
 8007614:	e02e      	b.n	8007674 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800761c:	d101      	bne.n	8007622 <remove_chain+0x70>
 800761e:	2301      	movs	r3, #1
 8007620:	e028      	b.n	8007674 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007622:	2200      	movs	r2, #0
 8007624:	68b9      	ldr	r1, [r7, #8]
 8007626:	69b8      	ldr	r0, [r7, #24]
 8007628:	f7ff fed9 	bl	80073de <put_fat>
 800762c:	4603      	mov	r3, r0
 800762e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007630:	7ffb      	ldrb	r3, [r7, #31]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d001      	beq.n	800763a <remove_chain+0x88>
 8007636:	7ffb      	ldrb	r3, [r7, #31]
 8007638:	e01c      	b.n	8007674 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	691a      	ldr	r2, [r3, #16]
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	3b02      	subs	r3, #2
 8007644:	429a      	cmp	r2, r3
 8007646:	d20b      	bcs.n	8007660 <remove_chain+0xae>
			fs->free_clst++;
 8007648:	69bb      	ldr	r3, [r7, #24]
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	1c5a      	adds	r2, r3, #1
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	791b      	ldrb	r3, [r3, #4]
 8007656:	f043 0301 	orr.w	r3, r3, #1
 800765a:	b2da      	uxtb	r2, r3
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	695b      	ldr	r3, [r3, #20]
 8007668:	68ba      	ldr	r2, [r7, #8]
 800766a:	429a      	cmp	r2, r3
 800766c:	d3c6      	bcc.n	80075fc <remove_chain+0x4a>
 800766e:	e000      	b.n	8007672 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007670:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3720      	adds	r7, #32
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b088      	sub	sp, #32
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10d      	bne.n	80076ae <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d004      	beq.n	80076a8 <create_chain+0x2c>
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	695b      	ldr	r3, [r3, #20]
 80076a2:	69ba      	ldr	r2, [r7, #24]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d31b      	bcc.n	80076e0 <create_chain+0x64>
 80076a8:	2301      	movs	r3, #1
 80076aa:	61bb      	str	r3, [r7, #24]
 80076ac:	e018      	b.n	80076e0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80076ae:	6839      	ldr	r1, [r7, #0]
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f7ff fdec 	bl	800728e <get_fat>
 80076b6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d801      	bhi.n	80076c2 <create_chain+0x46>
 80076be:	2301      	movs	r3, #1
 80076c0:	e070      	b.n	80077a4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076c8:	d101      	bne.n	80076ce <create_chain+0x52>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	e06a      	b.n	80077a4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	695b      	ldr	r3, [r3, #20]
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d201      	bcs.n	80076dc <create_chain+0x60>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	e063      	b.n	80077a4 <create_chain+0x128>
		scl = clst;
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	3301      	adds	r3, #1
 80076e8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	695b      	ldr	r3, [r3, #20]
 80076ee:	69fa      	ldr	r2, [r7, #28]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d307      	bcc.n	8007704 <create_chain+0x88>
				ncl = 2;
 80076f4:	2302      	movs	r3, #2
 80076f6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80076f8:	69fa      	ldr	r2, [r7, #28]
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d901      	bls.n	8007704 <create_chain+0x88>
 8007700:	2300      	movs	r3, #0
 8007702:	e04f      	b.n	80077a4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007704:	69f9      	ldr	r1, [r7, #28]
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f7ff fdc1 	bl	800728e <get_fat>
 800770c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00e      	beq.n	8007732 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2b01      	cmp	r3, #1
 8007718:	d003      	beq.n	8007722 <create_chain+0xa6>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007720:	d101      	bne.n	8007726 <create_chain+0xaa>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	e03e      	b.n	80077a4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007726:	69fa      	ldr	r2, [r7, #28]
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	429a      	cmp	r2, r3
 800772c:	d1da      	bne.n	80076e4 <create_chain+0x68>
 800772e:	2300      	movs	r3, #0
 8007730:	e038      	b.n	80077a4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007732:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007734:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007738:	69f9      	ldr	r1, [r7, #28]
 800773a:	6938      	ldr	r0, [r7, #16]
 800773c:	f7ff fe4f 	bl	80073de <put_fat>
 8007740:	4603      	mov	r3, r0
 8007742:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007744:	7dfb      	ldrb	r3, [r7, #23]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d109      	bne.n	800775e <create_chain+0xe2>
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d006      	beq.n	800775e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007750:	69fa      	ldr	r2, [r7, #28]
 8007752:	6839      	ldr	r1, [r7, #0]
 8007754:	6938      	ldr	r0, [r7, #16]
 8007756:	f7ff fe42 	bl	80073de <put_fat>
 800775a:	4603      	mov	r3, r0
 800775c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800775e:	7dfb      	ldrb	r3, [r7, #23]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d116      	bne.n	8007792 <create_chain+0x116>
		fs->last_clst = ncl;
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	69fa      	ldr	r2, [r7, #28]
 8007768:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	691a      	ldr	r2, [r3, #16]
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	695b      	ldr	r3, [r3, #20]
 8007772:	3b02      	subs	r3, #2
 8007774:	429a      	cmp	r2, r3
 8007776:	d804      	bhi.n	8007782 <create_chain+0x106>
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	1e5a      	subs	r2, r3, #1
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	791b      	ldrb	r3, [r3, #4]
 8007786:	f043 0301 	orr.w	r3, r3, #1
 800778a:	b2da      	uxtb	r2, r3
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	711a      	strb	r2, [r3, #4]
 8007790:	e007      	b.n	80077a2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007792:	7dfb      	ldrb	r3, [r7, #23]
 8007794:	2b01      	cmp	r3, #1
 8007796:	d102      	bne.n	800779e <create_chain+0x122>
 8007798:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800779c:	e000      	b.n	80077a0 <create_chain+0x124>
 800779e:	2301      	movs	r3, #1
 80077a0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80077a2:	69fb      	ldr	r3, [r7, #28]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3720      	adds	r7, #32
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b087      	sub	sp, #28
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c0:	3304      	adds	r3, #4
 80077c2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	0a5b      	lsrs	r3, r3, #9
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	8952      	ldrh	r2, [r2, #10]
 80077cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80077d0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	1d1a      	adds	r2, r3, #4
 80077d6:	613a      	str	r2, [r7, #16]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d101      	bne.n	80077e6 <clmt_clust+0x3a>
 80077e2:	2300      	movs	r3, #0
 80077e4:	e010      	b.n	8007808 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80077e6:	697a      	ldr	r2, [r7, #20]
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d307      	bcc.n	80077fe <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80077ee:	697a      	ldr	r2, [r7, #20]
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	1ad3      	subs	r3, r2, r3
 80077f4:	617b      	str	r3, [r7, #20]
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	3304      	adds	r3, #4
 80077fa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80077fc:	e7e9      	b.n	80077d2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80077fe:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	4413      	add	r3, r2
}
 8007808:	4618      	mov	r0, r3
 800780a:	371c      	adds	r7, #28
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b086      	sub	sp, #24
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800782a:	d204      	bcs.n	8007836 <dir_sdi+0x22>
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	f003 031f 	and.w	r3, r3, #31
 8007832:	2b00      	cmp	r3, #0
 8007834:	d001      	beq.n	800783a <dir_sdi+0x26>
		return FR_INT_ERR;
 8007836:	2302      	movs	r3, #2
 8007838:	e063      	b.n	8007902 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	683a      	ldr	r2, [r7, #0]
 800783e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d106      	bne.n	800785a <dir_sdi+0x46>
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	2b02      	cmp	r3, #2
 8007852:	d902      	bls.n	800785a <dir_sdi+0x46>
		clst = fs->dirbase;
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007858:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d10c      	bne.n	800787a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	095b      	lsrs	r3, r3, #5
 8007864:	693a      	ldr	r2, [r7, #16]
 8007866:	8912      	ldrh	r2, [r2, #8]
 8007868:	4293      	cmp	r3, r2
 800786a:	d301      	bcc.n	8007870 <dir_sdi+0x5c>
 800786c:	2302      	movs	r3, #2
 800786e:	e048      	b.n	8007902 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	61da      	str	r2, [r3, #28]
 8007878:	e029      	b.n	80078ce <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	895b      	ldrh	r3, [r3, #10]
 800787e:	025b      	lsls	r3, r3, #9
 8007880:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007882:	e019      	b.n	80078b8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6979      	ldr	r1, [r7, #20]
 8007888:	4618      	mov	r0, r3
 800788a:	f7ff fd00 	bl	800728e <get_fat>
 800788e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007896:	d101      	bne.n	800789c <dir_sdi+0x88>
 8007898:	2301      	movs	r3, #1
 800789a:	e032      	b.n	8007902 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d904      	bls.n	80078ac <dir_sdi+0x98>
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d301      	bcc.n	80078b0 <dir_sdi+0x9c>
 80078ac:	2302      	movs	r3, #2
 80078ae:	e028      	b.n	8007902 <dir_sdi+0xee>
			ofs -= csz;
 80078b0:	683a      	ldr	r2, [r7, #0]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80078b8:	683a      	ldr	r2, [r7, #0]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d2e1      	bcs.n	8007884 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80078c0:	6979      	ldr	r1, [r7, #20]
 80078c2:	6938      	ldr	r0, [r7, #16]
 80078c4:	f7ff fcc4 	bl	8007250 <clust2sect>
 80078c8:	4602      	mov	r2, r0
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	697a      	ldr	r2, [r7, #20]
 80078d2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	69db      	ldr	r3, [r3, #28]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d101      	bne.n	80078e0 <dir_sdi+0xcc>
 80078dc:	2302      	movs	r3, #2
 80078de:	e010      	b.n	8007902 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	69da      	ldr	r2, [r3, #28]
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	0a5b      	lsrs	r3, r3, #9
 80078e8:	441a      	add	r2, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078fa:	441a      	add	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3718      	adds	r7, #24
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b086      	sub	sp, #24
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
 8007912:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	695b      	ldr	r3, [r3, #20]
 800791e:	3320      	adds	r3, #32
 8007920:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	69db      	ldr	r3, [r3, #28]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d003      	beq.n	8007932 <dir_next+0x28>
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007930:	d301      	bcc.n	8007936 <dir_next+0x2c>
 8007932:	2304      	movs	r3, #4
 8007934:	e0aa      	b.n	8007a8c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800793c:	2b00      	cmp	r3, #0
 800793e:	f040 8098 	bne.w	8007a72 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	69db      	ldr	r3, [r3, #28]
 8007946:	1c5a      	adds	r2, r3, #1
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	699b      	ldr	r3, [r3, #24]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10b      	bne.n	800796c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	095b      	lsrs	r3, r3, #5
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	8912      	ldrh	r2, [r2, #8]
 800795c:	4293      	cmp	r3, r2
 800795e:	f0c0 8088 	bcc.w	8007a72 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	61da      	str	r2, [r3, #28]
 8007968:	2304      	movs	r3, #4
 800796a:	e08f      	b.n	8007a8c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	0a5b      	lsrs	r3, r3, #9
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	8952      	ldrh	r2, [r2, #10]
 8007974:	3a01      	subs	r2, #1
 8007976:	4013      	ands	r3, r2
 8007978:	2b00      	cmp	r3, #0
 800797a:	d17a      	bne.n	8007a72 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	699b      	ldr	r3, [r3, #24]
 8007982:	4619      	mov	r1, r3
 8007984:	4610      	mov	r0, r2
 8007986:	f7ff fc82 	bl	800728e <get_fat>
 800798a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	2b01      	cmp	r3, #1
 8007990:	d801      	bhi.n	8007996 <dir_next+0x8c>
 8007992:	2302      	movs	r3, #2
 8007994:	e07a      	b.n	8007a8c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800799c:	d101      	bne.n	80079a2 <dir_next+0x98>
 800799e:	2301      	movs	r3, #1
 80079a0:	e074      	b.n	8007a8c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	697a      	ldr	r2, [r7, #20]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d358      	bcc.n	8007a5e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d104      	bne.n	80079bc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	61da      	str	r2, [r3, #28]
 80079b8:	2304      	movs	r3, #4
 80079ba:	e067      	b.n	8007a8c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	699b      	ldr	r3, [r3, #24]
 80079c2:	4619      	mov	r1, r3
 80079c4:	4610      	mov	r0, r2
 80079c6:	f7ff fe59 	bl	800767c <create_chain>
 80079ca:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d101      	bne.n	80079d6 <dir_next+0xcc>
 80079d2:	2307      	movs	r3, #7
 80079d4:	e05a      	b.n	8007a8c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d101      	bne.n	80079e0 <dir_next+0xd6>
 80079dc:	2302      	movs	r3, #2
 80079de:	e055      	b.n	8007a8c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079e6:	d101      	bne.n	80079ec <dir_next+0xe2>
 80079e8:	2301      	movs	r3, #1
 80079ea:	e04f      	b.n	8007a8c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80079ec:	68f8      	ldr	r0, [r7, #12]
 80079ee:	f7ff fb4f 	bl	8007090 <sync_window>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d001      	beq.n	80079fc <dir_next+0xf2>
 80079f8:	2301      	movs	r3, #1
 80079fa:	e047      	b.n	8007a8c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	3330      	adds	r3, #48	; 0x30
 8007a00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a04:	2100      	movs	r1, #0
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7ff f979 	bl	8006cfe <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	613b      	str	r3, [r7, #16]
 8007a10:	6979      	ldr	r1, [r7, #20]
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	f7ff fc1c 	bl	8007250 <clust2sect>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8007a1e:	e012      	b.n	8007a46 <dir_next+0x13c>
						fs->wflag = 1;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2201      	movs	r2, #1
 8007a24:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f7ff fb32 	bl	8007090 <sync_window>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d001      	beq.n	8007a36 <dir_next+0x12c>
 8007a32:	2301      	movs	r3, #1
 8007a34:	e02a      	b.n	8007a8c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	613b      	str	r3, [r7, #16]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a40:	1c5a      	adds	r2, r3, #1
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	62da      	str	r2, [r3, #44]	; 0x2c
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	895b      	ldrh	r3, [r3, #10]
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d3e6      	bcc.n	8007a20 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	1ad2      	subs	r2, r2, r3
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	697a      	ldr	r2, [r7, #20]
 8007a62:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007a64:	6979      	ldr	r1, [r7, #20]
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	f7ff fbf2 	bl	8007250 <clust2sect>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a84:	441a      	add	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3718      	adds	r7, #24
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b086      	sub	sp, #24
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007aa4:	2100      	movs	r1, #0
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f7ff feb4 	bl	8007814 <dir_sdi>
 8007aac:	4603      	mov	r3, r0
 8007aae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007ab0:	7dfb      	ldrb	r3, [r7, #23]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d12b      	bne.n	8007b0e <dir_alloc+0x7a>
		n = 0;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	69db      	ldr	r3, [r3, #28]
 8007abe:	4619      	mov	r1, r3
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f7ff fb29 	bl	8007118 <move_window>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007aca:	7dfb      	ldrb	r3, [r7, #23]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d11d      	bne.n	8007b0c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a1b      	ldr	r3, [r3, #32]
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	2be5      	cmp	r3, #229	; 0xe5
 8007ad8:	d004      	beq.n	8007ae4 <dir_alloc+0x50>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a1b      	ldr	r3, [r3, #32]
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d107      	bne.n	8007af4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	613b      	str	r3, [r7, #16]
 8007aea:	693a      	ldr	r2, [r7, #16]
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d102      	bne.n	8007af8 <dir_alloc+0x64>
 8007af2:	e00c      	b.n	8007b0e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007af4:	2300      	movs	r3, #0
 8007af6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007af8:	2101      	movs	r1, #1
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f7ff ff05 	bl	800790a <dir_next>
 8007b00:	4603      	mov	r3, r0
 8007b02:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007b04:	7dfb      	ldrb	r3, [r7, #23]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d0d7      	beq.n	8007aba <dir_alloc+0x26>
 8007b0a:	e000      	b.n	8007b0e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007b0c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007b0e:	7dfb      	ldrb	r3, [r7, #23]
 8007b10:	2b04      	cmp	r3, #4
 8007b12:	d101      	bne.n	8007b18 <dir_alloc+0x84>
 8007b14:	2307      	movs	r3, #7
 8007b16:	75fb      	strb	r3, [r7, #23]
	return res;
 8007b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3718      	adds	r7, #24
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b084      	sub	sp, #16
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
 8007b2a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	331a      	adds	r3, #26
 8007b30:	4618      	mov	r0, r3
 8007b32:	f7ff f841 	bl	8006bb8 <ld_word>
 8007b36:	4603      	mov	r3, r0
 8007b38:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	2b03      	cmp	r3, #3
 8007b40:	d109      	bne.n	8007b56 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	3314      	adds	r3, #20
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7ff f836 	bl	8006bb8 <ld_word>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	041b      	lsls	r3, r3, #16
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007b56:	68fb      	ldr	r3, [r7, #12]
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	331a      	adds	r3, #26
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	b292      	uxth	r2, r2
 8007b74:	4611      	mov	r1, r2
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7ff f859 	bl	8006c2e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	2b03      	cmp	r3, #3
 8007b82:	d109      	bne.n	8007b98 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	f103 0214 	add.w	r2, r3, #20
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	0c1b      	lsrs	r3, r3, #16
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	4619      	mov	r1, r3
 8007b92:	4610      	mov	r0, r2
 8007b94:	f7ff f84b 	bl	8006c2e <st_word>
	}
}
 8007b98:	bf00      	nop
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b086      	sub	sp, #24
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007bae:	2100      	movs	r1, #0
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f7ff fe2f 	bl	8007814 <dir_sdi>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007bba:	7dfb      	ldrb	r3, [r7, #23]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d001      	beq.n	8007bc4 <dir_find+0x24>
 8007bc0:	7dfb      	ldrb	r3, [r7, #23]
 8007bc2:	e03e      	b.n	8007c42 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	69db      	ldr	r3, [r3, #28]
 8007bc8:	4619      	mov	r1, r3
 8007bca:	6938      	ldr	r0, [r7, #16]
 8007bcc:	f7ff faa4 	bl	8007118 <move_window>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007bd4:	7dfb      	ldrb	r3, [r7, #23]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d12f      	bne.n	8007c3a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a1b      	ldr	r3, [r3, #32]
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007be2:	7bfb      	ldrb	r3, [r7, #15]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d102      	bne.n	8007bee <dir_find+0x4e>
 8007be8:	2304      	movs	r3, #4
 8007bea:	75fb      	strb	r3, [r7, #23]
 8007bec:	e028      	b.n	8007c40 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a1b      	ldr	r3, [r3, #32]
 8007bf2:	330b      	adds	r3, #11
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bfa:	b2da      	uxtb	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a1b      	ldr	r3, [r3, #32]
 8007c04:	330b      	adds	r3, #11
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	f003 0308 	and.w	r3, r3, #8
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d10a      	bne.n	8007c26 <dir_find+0x86>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6a18      	ldr	r0, [r3, #32]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	3324      	adds	r3, #36	; 0x24
 8007c18:	220b      	movs	r2, #11
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	f7ff f88a 	bl	8006d34 <mem_cmp>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00b      	beq.n	8007c3e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007c26:	2100      	movs	r1, #0
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f7ff fe6e 	bl	800790a <dir_next>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007c32:	7dfb      	ldrb	r3, [r7, #23]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d0c5      	beq.n	8007bc4 <dir_find+0x24>
 8007c38:	e002      	b.n	8007c40 <dir_find+0xa0>
		if (res != FR_OK) break;
 8007c3a:	bf00      	nop
 8007c3c:	e000      	b.n	8007c40 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007c3e:	bf00      	nop

	return res;
 8007c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3718      	adds	r7, #24
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b084      	sub	sp, #16
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007c58:	2101      	movs	r1, #1
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f7ff ff1a 	bl	8007a94 <dir_alloc>
 8007c60:	4603      	mov	r3, r0
 8007c62:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007c64:	7bfb      	ldrb	r3, [r7, #15]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d11c      	bne.n	8007ca4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	69db      	ldr	r3, [r3, #28]
 8007c6e:	4619      	mov	r1, r3
 8007c70:	68b8      	ldr	r0, [r7, #8]
 8007c72:	f7ff fa51 	bl	8007118 <move_window>
 8007c76:	4603      	mov	r3, r0
 8007c78:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d111      	bne.n	8007ca4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a1b      	ldr	r3, [r3, #32]
 8007c84:	2220      	movs	r2, #32
 8007c86:	2100      	movs	r1, #0
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f7ff f838 	bl	8006cfe <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a18      	ldr	r0, [r3, #32]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	3324      	adds	r3, #36	; 0x24
 8007c96:	220b      	movs	r2, #11
 8007c98:	4619      	mov	r1, r3
 8007c9a:	f7ff f80f 	bl	8006cbc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
	...

08007cb0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b088      	sub	sp, #32
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	60fb      	str	r3, [r7, #12]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	3324      	adds	r3, #36	; 0x24
 8007cc4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007cc6:	220b      	movs	r2, #11
 8007cc8:	2120      	movs	r1, #32
 8007cca:	68b8      	ldr	r0, [r7, #8]
 8007ccc:	f7ff f817 	bl	8006cfe <mem_set>
	si = i = 0; ni = 8;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	613b      	str	r3, [r7, #16]
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	61fb      	str	r3, [r7, #28]
 8007cd8:	2308      	movs	r3, #8
 8007cda:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	1c5a      	adds	r2, r3, #1
 8007ce0:	61fa      	str	r2, [r7, #28]
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007cea:	7efb      	ldrb	r3, [r7, #27]
 8007cec:	2b20      	cmp	r3, #32
 8007cee:	d94e      	bls.n	8007d8e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007cf0:	7efb      	ldrb	r3, [r7, #27]
 8007cf2:	2b2f      	cmp	r3, #47	; 0x2f
 8007cf4:	d006      	beq.n	8007d04 <create_name+0x54>
 8007cf6:	7efb      	ldrb	r3, [r7, #27]
 8007cf8:	2b5c      	cmp	r3, #92	; 0x5c
 8007cfa:	d110      	bne.n	8007d1e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007cfc:	e002      	b.n	8007d04 <create_name+0x54>
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	3301      	adds	r3, #1
 8007d02:	61fb      	str	r3, [r7, #28]
 8007d04:	68fa      	ldr	r2, [r7, #12]
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	4413      	add	r3, r2
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	2b2f      	cmp	r3, #47	; 0x2f
 8007d0e:	d0f6      	beq.n	8007cfe <create_name+0x4e>
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	4413      	add	r3, r2
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	2b5c      	cmp	r3, #92	; 0x5c
 8007d1a:	d0f0      	beq.n	8007cfe <create_name+0x4e>
			break;
 8007d1c:	e038      	b.n	8007d90 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007d1e:	7efb      	ldrb	r3, [r7, #27]
 8007d20:	2b2e      	cmp	r3, #46	; 0x2e
 8007d22:	d003      	beq.n	8007d2c <create_name+0x7c>
 8007d24:	693a      	ldr	r2, [r7, #16]
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d30c      	bcc.n	8007d46 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	2b0b      	cmp	r3, #11
 8007d30:	d002      	beq.n	8007d38 <create_name+0x88>
 8007d32:	7efb      	ldrb	r3, [r7, #27]
 8007d34:	2b2e      	cmp	r3, #46	; 0x2e
 8007d36:	d001      	beq.n	8007d3c <create_name+0x8c>
 8007d38:	2306      	movs	r3, #6
 8007d3a:	e044      	b.n	8007dc6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007d3c:	2308      	movs	r3, #8
 8007d3e:	613b      	str	r3, [r7, #16]
 8007d40:	230b      	movs	r3, #11
 8007d42:	617b      	str	r3, [r7, #20]
			continue;
 8007d44:	e022      	b.n	8007d8c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007d46:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	da04      	bge.n	8007d58 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007d4e:	7efb      	ldrb	r3, [r7, #27]
 8007d50:	3b80      	subs	r3, #128	; 0x80
 8007d52:	4a1f      	ldr	r2, [pc, #124]	; (8007dd0 <create_name+0x120>)
 8007d54:	5cd3      	ldrb	r3, [r2, r3]
 8007d56:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007d58:	7efb      	ldrb	r3, [r7, #27]
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	481d      	ldr	r0, [pc, #116]	; (8007dd4 <create_name+0x124>)
 8007d5e:	f7ff f810 	bl	8006d82 <chk_chr>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d001      	beq.n	8007d6c <create_name+0xbc>
 8007d68:	2306      	movs	r3, #6
 8007d6a:	e02c      	b.n	8007dc6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007d6c:	7efb      	ldrb	r3, [r7, #27]
 8007d6e:	2b60      	cmp	r3, #96	; 0x60
 8007d70:	d905      	bls.n	8007d7e <create_name+0xce>
 8007d72:	7efb      	ldrb	r3, [r7, #27]
 8007d74:	2b7a      	cmp	r3, #122	; 0x7a
 8007d76:	d802      	bhi.n	8007d7e <create_name+0xce>
 8007d78:	7efb      	ldrb	r3, [r7, #27]
 8007d7a:	3b20      	subs	r3, #32
 8007d7c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	1c5a      	adds	r2, r3, #1
 8007d82:	613a      	str	r2, [r7, #16]
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	4413      	add	r3, r2
 8007d88:	7efa      	ldrb	r2, [r7, #27]
 8007d8a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007d8c:	e7a6      	b.n	8007cdc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007d8e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007d90:	68fa      	ldr	r2, [r7, #12]
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	441a      	add	r2, r3
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d101      	bne.n	8007da4 <create_name+0xf4>
 8007da0:	2306      	movs	r3, #6
 8007da2:	e010      	b.n	8007dc6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	2be5      	cmp	r3, #229	; 0xe5
 8007daa:	d102      	bne.n	8007db2 <create_name+0x102>
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	2205      	movs	r2, #5
 8007db0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007db2:	7efb      	ldrb	r3, [r7, #27]
 8007db4:	2b20      	cmp	r3, #32
 8007db6:	d801      	bhi.n	8007dbc <create_name+0x10c>
 8007db8:	2204      	movs	r2, #4
 8007dba:	e000      	b.n	8007dbe <create_name+0x10e>
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	330b      	adds	r3, #11
 8007dc2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007dc4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3720      	adds	r7, #32
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	0800a2d8 	.word	0x0800a2d8
 8007dd4:	0800a260 	.word	0x0800a260

08007dd8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b086      	sub	sp, #24
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007dec:	e002      	b.n	8007df4 <follow_path+0x1c>
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	3301      	adds	r3, #1
 8007df2:	603b      	str	r3, [r7, #0]
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	2b2f      	cmp	r3, #47	; 0x2f
 8007dfa:	d0f8      	beq.n	8007dee <follow_path+0x16>
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	2b5c      	cmp	r3, #92	; 0x5c
 8007e02:	d0f4      	beq.n	8007dee <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	2200      	movs	r2, #0
 8007e08:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	2b1f      	cmp	r3, #31
 8007e10:	d80a      	bhi.n	8007e28 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2280      	movs	r2, #128	; 0x80
 8007e16:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007e1a:	2100      	movs	r1, #0
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f7ff fcf9 	bl	8007814 <dir_sdi>
 8007e22:	4603      	mov	r3, r0
 8007e24:	75fb      	strb	r3, [r7, #23]
 8007e26:	e043      	b.n	8007eb0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007e28:	463b      	mov	r3, r7
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f7ff ff3f 	bl	8007cb0 <create_name>
 8007e32:	4603      	mov	r3, r0
 8007e34:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007e36:	7dfb      	ldrb	r3, [r7, #23]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d134      	bne.n	8007ea6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f7ff feaf 	bl	8007ba0 <dir_find>
 8007e42:	4603      	mov	r3, r0
 8007e44:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007e4c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007e4e:	7dfb      	ldrb	r3, [r7, #23]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d00a      	beq.n	8007e6a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007e54:	7dfb      	ldrb	r3, [r7, #23]
 8007e56:	2b04      	cmp	r3, #4
 8007e58:	d127      	bne.n	8007eaa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007e5a:	7afb      	ldrb	r3, [r7, #11]
 8007e5c:	f003 0304 	and.w	r3, r3, #4
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d122      	bne.n	8007eaa <follow_path+0xd2>
 8007e64:	2305      	movs	r3, #5
 8007e66:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007e68:	e01f      	b.n	8007eaa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007e6a:	7afb      	ldrb	r3, [r7, #11]
 8007e6c:	f003 0304 	and.w	r3, r3, #4
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d11c      	bne.n	8007eae <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	799b      	ldrb	r3, [r3, #6]
 8007e78:	f003 0310 	and.w	r3, r3, #16
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d102      	bne.n	8007e86 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007e80:	2305      	movs	r3, #5
 8007e82:	75fb      	strb	r3, [r7, #23]
 8007e84:	e014      	b.n	8007eb0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	695b      	ldr	r3, [r3, #20]
 8007e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e94:	4413      	add	r3, r2
 8007e96:	4619      	mov	r1, r3
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f7ff fe42 	bl	8007b22 <ld_clust>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007ea4:	e7c0      	b.n	8007e28 <follow_path+0x50>
			if (res != FR_OK) break;
 8007ea6:	bf00      	nop
 8007ea8:	e002      	b.n	8007eb0 <follow_path+0xd8>
				break;
 8007eaa:	bf00      	nop
 8007eac:	e000      	b.n	8007eb0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007eae:	bf00      	nop
			}
		}
	}

	return res;
 8007eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3718      	adds	r7, #24
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007eba:	b480      	push	{r7}
 8007ebc:	b087      	sub	sp, #28
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007ec2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ec6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d031      	beq.n	8007f34 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	617b      	str	r3, [r7, #20]
 8007ed6:	e002      	b.n	8007ede <get_ldnumber+0x24>
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	3301      	adds	r3, #1
 8007edc:	617b      	str	r3, [r7, #20]
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	2b20      	cmp	r3, #32
 8007ee4:	d903      	bls.n	8007eee <get_ldnumber+0x34>
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	2b3a      	cmp	r3, #58	; 0x3a
 8007eec:	d1f4      	bne.n	8007ed8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	2b3a      	cmp	r3, #58	; 0x3a
 8007ef4:	d11c      	bne.n	8007f30 <get_ldnumber+0x76>
			tp = *path;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	1c5a      	adds	r2, r3, #1
 8007f00:	60fa      	str	r2, [r7, #12]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	3b30      	subs	r3, #48	; 0x30
 8007f06:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	2b09      	cmp	r3, #9
 8007f0c:	d80e      	bhi.n	8007f2c <get_ldnumber+0x72>
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d10a      	bne.n	8007f2c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d107      	bne.n	8007f2c <get_ldnumber+0x72>
					vol = (int)i;
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	3301      	adds	r3, #1
 8007f24:	617b      	str	r3, [r7, #20]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	697a      	ldr	r2, [r7, #20]
 8007f2a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	e002      	b.n	8007f36 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007f30:	2300      	movs	r3, #0
 8007f32:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007f34:	693b      	ldr	r3, [r7, #16]
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	371c      	adds	r7, #28
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
	...

08007f44 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	70da      	strb	r2, [r3, #3]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f5a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007f5c:	6839      	ldr	r1, [r7, #0]
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f7ff f8da 	bl	8007118 <move_window>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d001      	beq.n	8007f6e <check_fs+0x2a>
 8007f6a:	2304      	movs	r3, #4
 8007f6c:	e038      	b.n	8007fe0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	3330      	adds	r3, #48	; 0x30
 8007f72:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7fe fe1e 	bl	8006bb8 <ld_word>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	461a      	mov	r2, r3
 8007f80:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d001      	beq.n	8007f8c <check_fs+0x48>
 8007f88:	2303      	movs	r3, #3
 8007f8a:	e029      	b.n	8007fe0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007f92:	2be9      	cmp	r3, #233	; 0xe9
 8007f94:	d009      	beq.n	8007faa <check_fs+0x66>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007f9c:	2beb      	cmp	r3, #235	; 0xeb
 8007f9e:	d11e      	bne.n	8007fde <check_fs+0x9a>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007fa6:	2b90      	cmp	r3, #144	; 0x90
 8007fa8:	d119      	bne.n	8007fde <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	3330      	adds	r3, #48	; 0x30
 8007fae:	3336      	adds	r3, #54	; 0x36
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f7fe fe19 	bl	8006be8 <ld_dword>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007fbc:	4a0a      	ldr	r2, [pc, #40]	; (8007fe8 <check_fs+0xa4>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d101      	bne.n	8007fc6 <check_fs+0x82>
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	e00c      	b.n	8007fe0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	3330      	adds	r3, #48	; 0x30
 8007fca:	3352      	adds	r3, #82	; 0x52
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7fe fe0b 	bl	8006be8 <ld_dword>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	4a05      	ldr	r2, [pc, #20]	; (8007fec <check_fs+0xa8>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d101      	bne.n	8007fde <check_fs+0x9a>
 8007fda:	2300      	movs	r3, #0
 8007fdc:	e000      	b.n	8007fe0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007fde:	2302      	movs	r3, #2
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3708      	adds	r7, #8
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	00544146 	.word	0x00544146
 8007fec:	33544146 	.word	0x33544146

08007ff0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b096      	sub	sp, #88	; 0x58
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	2200      	movs	r2, #0
 8008002:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f7ff ff58 	bl	8007eba <get_ldnumber>
 800800a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800800c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800800e:	2b00      	cmp	r3, #0
 8008010:	da01      	bge.n	8008016 <find_volume+0x26>
 8008012:	230b      	movs	r3, #11
 8008014:	e22d      	b.n	8008472 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008016:	4aa1      	ldr	r2, [pc, #644]	; (800829c <find_volume+0x2ac>)
 8008018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800801a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800801e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008022:	2b00      	cmp	r3, #0
 8008024:	d101      	bne.n	800802a <find_volume+0x3a>
 8008026:	230c      	movs	r3, #12
 8008028:	e223      	b.n	8008472 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800802e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008030:	79fb      	ldrb	r3, [r7, #7]
 8008032:	f023 0301 	bic.w	r3, r3, #1
 8008036:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d01a      	beq.n	8008076 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008042:	785b      	ldrb	r3, [r3, #1]
 8008044:	4618      	mov	r0, r3
 8008046:	f7fe fd19 	bl	8006a7c <disk_status>
 800804a:	4603      	mov	r3, r0
 800804c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008050:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008054:	f003 0301 	and.w	r3, r3, #1
 8008058:	2b00      	cmp	r3, #0
 800805a:	d10c      	bne.n	8008076 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800805c:	79fb      	ldrb	r3, [r7, #7]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d007      	beq.n	8008072 <find_volume+0x82>
 8008062:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008066:	f003 0304 	and.w	r3, r3, #4
 800806a:	2b00      	cmp	r3, #0
 800806c:	d001      	beq.n	8008072 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800806e:	230a      	movs	r3, #10
 8008070:	e1ff      	b.n	8008472 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8008072:	2300      	movs	r3, #0
 8008074:	e1fd      	b.n	8008472 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008078:	2200      	movs	r2, #0
 800807a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800807c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800807e:	b2da      	uxtb	r2, r3
 8008080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008082:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008086:	785b      	ldrb	r3, [r3, #1]
 8008088:	4618      	mov	r0, r3
 800808a:	f7fe fd11 	bl	8006ab0 <disk_initialize>
 800808e:	4603      	mov	r3, r0
 8008090:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008094:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008098:	f003 0301 	and.w	r3, r3, #1
 800809c:	2b00      	cmp	r3, #0
 800809e:	d001      	beq.n	80080a4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80080a0:	2303      	movs	r3, #3
 80080a2:	e1e6      	b.n	8008472 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80080a4:	79fb      	ldrb	r3, [r7, #7]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d007      	beq.n	80080ba <find_volume+0xca>
 80080aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80080ae:	f003 0304 	and.w	r3, r3, #4
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d001      	beq.n	80080ba <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80080b6:	230a      	movs	r3, #10
 80080b8:	e1db      	b.n	8008472 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80080ba:	2300      	movs	r3, #0
 80080bc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80080be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80080c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80080c2:	f7ff ff3f 	bl	8007f44 <check_fs>
 80080c6:	4603      	mov	r3, r0
 80080c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80080cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80080d0:	2b02      	cmp	r3, #2
 80080d2:	d149      	bne.n	8008168 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80080d4:	2300      	movs	r3, #0
 80080d6:	643b      	str	r3, [r7, #64]	; 0x40
 80080d8:	e01e      	b.n	8008118 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80080da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80080e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080e2:	011b      	lsls	r3, r3, #4
 80080e4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80080e8:	4413      	add	r3, r2
 80080ea:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80080ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ee:	3304      	adds	r3, #4
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d006      	beq.n	8008104 <find_volume+0x114>
 80080f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f8:	3308      	adds	r3, #8
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7fe fd74 	bl	8006be8 <ld_dword>
 8008100:	4602      	mov	r2, r0
 8008102:	e000      	b.n	8008106 <find_volume+0x116>
 8008104:	2200      	movs	r2, #0
 8008106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	3358      	adds	r3, #88	; 0x58
 800810c:	443b      	add	r3, r7
 800810e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008114:	3301      	adds	r3, #1
 8008116:	643b      	str	r3, [r7, #64]	; 0x40
 8008118:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800811a:	2b03      	cmp	r3, #3
 800811c:	d9dd      	bls.n	80080da <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800811e:	2300      	movs	r3, #0
 8008120:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008122:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008124:	2b00      	cmp	r3, #0
 8008126:	d002      	beq.n	800812e <find_volume+0x13e>
 8008128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800812a:	3b01      	subs	r3, #1
 800812c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800812e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	3358      	adds	r3, #88	; 0x58
 8008134:	443b      	add	r3, r7
 8008136:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800813a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800813c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800813e:	2b00      	cmp	r3, #0
 8008140:	d005      	beq.n	800814e <find_volume+0x15e>
 8008142:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008144:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008146:	f7ff fefd 	bl	8007f44 <check_fs>
 800814a:	4603      	mov	r3, r0
 800814c:	e000      	b.n	8008150 <find_volume+0x160>
 800814e:	2303      	movs	r3, #3
 8008150:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008154:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008158:	2b01      	cmp	r3, #1
 800815a:	d905      	bls.n	8008168 <find_volume+0x178>
 800815c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800815e:	3301      	adds	r3, #1
 8008160:	643b      	str	r3, [r7, #64]	; 0x40
 8008162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008164:	2b03      	cmp	r3, #3
 8008166:	d9e2      	bls.n	800812e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008168:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800816c:	2b04      	cmp	r3, #4
 800816e:	d101      	bne.n	8008174 <find_volume+0x184>
 8008170:	2301      	movs	r3, #1
 8008172:	e17e      	b.n	8008472 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008174:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008178:	2b01      	cmp	r3, #1
 800817a:	d901      	bls.n	8008180 <find_volume+0x190>
 800817c:	230d      	movs	r3, #13
 800817e:	e178      	b.n	8008472 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008182:	3330      	adds	r3, #48	; 0x30
 8008184:	330b      	adds	r3, #11
 8008186:	4618      	mov	r0, r3
 8008188:	f7fe fd16 	bl	8006bb8 <ld_word>
 800818c:	4603      	mov	r3, r0
 800818e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008192:	d001      	beq.n	8008198 <find_volume+0x1a8>
 8008194:	230d      	movs	r3, #13
 8008196:	e16c      	b.n	8008472 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800819a:	3330      	adds	r3, #48	; 0x30
 800819c:	3316      	adds	r3, #22
 800819e:	4618      	mov	r0, r3
 80081a0:	f7fe fd0a 	bl	8006bb8 <ld_word>
 80081a4:	4603      	mov	r3, r0
 80081a6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80081a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d106      	bne.n	80081bc <find_volume+0x1cc>
 80081ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b0:	3330      	adds	r3, #48	; 0x30
 80081b2:	3324      	adds	r3, #36	; 0x24
 80081b4:	4618      	mov	r0, r3
 80081b6:	f7fe fd17 	bl	8006be8 <ld_dword>
 80081ba:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80081bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80081c0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80081c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80081c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80081cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ce:	789b      	ldrb	r3, [r3, #2]
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d005      	beq.n	80081e0 <find_volume+0x1f0>
 80081d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d6:	789b      	ldrb	r3, [r3, #2]
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d001      	beq.n	80081e0 <find_volume+0x1f0>
 80081dc:	230d      	movs	r3, #13
 80081de:	e148      	b.n	8008472 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80081e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e2:	789b      	ldrb	r3, [r3, #2]
 80081e4:	461a      	mov	r2, r3
 80081e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081e8:	fb02 f303 	mul.w	r3, r2, r3
 80081ec:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80081ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80081fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081fc:	895b      	ldrh	r3, [r3, #10]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d008      	beq.n	8008214 <find_volume+0x224>
 8008202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008204:	895b      	ldrh	r3, [r3, #10]
 8008206:	461a      	mov	r2, r3
 8008208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820a:	895b      	ldrh	r3, [r3, #10]
 800820c:	3b01      	subs	r3, #1
 800820e:	4013      	ands	r3, r2
 8008210:	2b00      	cmp	r3, #0
 8008212:	d001      	beq.n	8008218 <find_volume+0x228>
 8008214:	230d      	movs	r3, #13
 8008216:	e12c      	b.n	8008472 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821a:	3330      	adds	r3, #48	; 0x30
 800821c:	3311      	adds	r3, #17
 800821e:	4618      	mov	r0, r3
 8008220:	f7fe fcca 	bl	8006bb8 <ld_word>
 8008224:	4603      	mov	r3, r0
 8008226:	461a      	mov	r2, r3
 8008228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800822c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822e:	891b      	ldrh	r3, [r3, #8]
 8008230:	f003 030f 	and.w	r3, r3, #15
 8008234:	b29b      	uxth	r3, r3
 8008236:	2b00      	cmp	r3, #0
 8008238:	d001      	beq.n	800823e <find_volume+0x24e>
 800823a:	230d      	movs	r3, #13
 800823c:	e119      	b.n	8008472 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800823e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008240:	3330      	adds	r3, #48	; 0x30
 8008242:	3313      	adds	r3, #19
 8008244:	4618      	mov	r0, r3
 8008246:	f7fe fcb7 	bl	8006bb8 <ld_word>
 800824a:	4603      	mov	r3, r0
 800824c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800824e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008250:	2b00      	cmp	r3, #0
 8008252:	d106      	bne.n	8008262 <find_volume+0x272>
 8008254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008256:	3330      	adds	r3, #48	; 0x30
 8008258:	3320      	adds	r3, #32
 800825a:	4618      	mov	r0, r3
 800825c:	f7fe fcc4 	bl	8006be8 <ld_dword>
 8008260:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008264:	3330      	adds	r3, #48	; 0x30
 8008266:	330e      	adds	r3, #14
 8008268:	4618      	mov	r0, r3
 800826a:	f7fe fca5 	bl	8006bb8 <ld_word>
 800826e:	4603      	mov	r3, r0
 8008270:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008272:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008274:	2b00      	cmp	r3, #0
 8008276:	d101      	bne.n	800827c <find_volume+0x28c>
 8008278:	230d      	movs	r3, #13
 800827a:	e0fa      	b.n	8008472 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800827c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800827e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008280:	4413      	add	r3, r2
 8008282:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008284:	8912      	ldrh	r2, [r2, #8]
 8008286:	0912      	lsrs	r2, r2, #4
 8008288:	b292      	uxth	r2, r2
 800828a:	4413      	add	r3, r2
 800828c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800828e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008292:	429a      	cmp	r2, r3
 8008294:	d204      	bcs.n	80082a0 <find_volume+0x2b0>
 8008296:	230d      	movs	r3, #13
 8008298:	e0eb      	b.n	8008472 <find_volume+0x482>
 800829a:	bf00      	nop
 800829c:	200027b0 	.word	0x200027b0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80082a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a4:	1ad3      	subs	r3, r2, r3
 80082a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082a8:	8952      	ldrh	r2, [r2, #10]
 80082aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80082ae:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80082b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d101      	bne.n	80082ba <find_volume+0x2ca>
 80082b6:	230d      	movs	r3, #13
 80082b8:	e0db      	b.n	8008472 <find_volume+0x482>
		fmt = FS_FAT32;
 80082ba:	2303      	movs	r3, #3
 80082bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80082c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d802      	bhi.n	80082d0 <find_volume+0x2e0>
 80082ca:	2302      	movs	r3, #2
 80082cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80082d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d802      	bhi.n	80082e0 <find_volume+0x2f0>
 80082da:	2301      	movs	r3, #1
 80082dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80082e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e2:	1c9a      	adds	r2, r3, #2
 80082e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80082e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80082ec:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80082ee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80082f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082f2:	441a      	add	r2, r3
 80082f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80082f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80082fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fc:	441a      	add	r2, r3
 80082fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008300:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8008302:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008306:	2b03      	cmp	r3, #3
 8008308:	d11e      	bne.n	8008348 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800830a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830c:	3330      	adds	r3, #48	; 0x30
 800830e:	332a      	adds	r3, #42	; 0x2a
 8008310:	4618      	mov	r0, r3
 8008312:	f7fe fc51 	bl	8006bb8 <ld_word>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d001      	beq.n	8008320 <find_volume+0x330>
 800831c:	230d      	movs	r3, #13
 800831e:	e0a8      	b.n	8008472 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008322:	891b      	ldrh	r3, [r3, #8]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d001      	beq.n	800832c <find_volume+0x33c>
 8008328:	230d      	movs	r3, #13
 800832a:	e0a2      	b.n	8008472 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800832c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800832e:	3330      	adds	r3, #48	; 0x30
 8008330:	332c      	adds	r3, #44	; 0x2c
 8008332:	4618      	mov	r0, r3
 8008334:	f7fe fc58 	bl	8006be8 <ld_dword>
 8008338:	4602      	mov	r2, r0
 800833a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800833e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008340:	695b      	ldr	r3, [r3, #20]
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	647b      	str	r3, [r7, #68]	; 0x44
 8008346:	e01f      	b.n	8008388 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834a:	891b      	ldrh	r3, [r3, #8]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d101      	bne.n	8008354 <find_volume+0x364>
 8008350:	230d      	movs	r3, #13
 8008352:	e08e      	b.n	8008472 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008356:	6a1a      	ldr	r2, [r3, #32]
 8008358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800835a:	441a      	add	r2, r3
 800835c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008360:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008364:	2b02      	cmp	r3, #2
 8008366:	d103      	bne.n	8008370 <find_volume+0x380>
 8008368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836a:	695b      	ldr	r3, [r3, #20]
 800836c:	005b      	lsls	r3, r3, #1
 800836e:	e00a      	b.n	8008386 <find_volume+0x396>
 8008370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008372:	695a      	ldr	r2, [r3, #20]
 8008374:	4613      	mov	r3, r2
 8008376:	005b      	lsls	r3, r3, #1
 8008378:	4413      	add	r3, r2
 800837a:	085a      	lsrs	r2, r3, #1
 800837c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837e:	695b      	ldr	r3, [r3, #20]
 8008380:	f003 0301 	and.w	r3, r3, #1
 8008384:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008386:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800838a:	699a      	ldr	r2, [r3, #24]
 800838c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800838e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008392:	0a5b      	lsrs	r3, r3, #9
 8008394:	429a      	cmp	r2, r3
 8008396:	d201      	bcs.n	800839c <find_volume+0x3ac>
 8008398:	230d      	movs	r3, #13
 800839a:	e06a      	b.n	8008472 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800839c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800839e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083a2:	611a      	str	r2, [r3, #16]
 80083a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a6:	691a      	ldr	r2, [r3, #16]
 80083a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083aa:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80083ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ae:	2280      	movs	r2, #128	; 0x80
 80083b0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80083b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80083b6:	2b03      	cmp	r3, #3
 80083b8:	d149      	bne.n	800844e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80083ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083bc:	3330      	adds	r3, #48	; 0x30
 80083be:	3330      	adds	r3, #48	; 0x30
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7fe fbf9 	bl	8006bb8 <ld_word>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d140      	bne.n	800844e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80083cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083ce:	3301      	adds	r3, #1
 80083d0:	4619      	mov	r1, r3
 80083d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80083d4:	f7fe fea0 	bl	8007118 <move_window>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d137      	bne.n	800844e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80083de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e0:	2200      	movs	r2, #0
 80083e2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80083e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e6:	3330      	adds	r3, #48	; 0x30
 80083e8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80083ec:	4618      	mov	r0, r3
 80083ee:	f7fe fbe3 	bl	8006bb8 <ld_word>
 80083f2:	4603      	mov	r3, r0
 80083f4:	461a      	mov	r2, r3
 80083f6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d127      	bne.n	800844e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80083fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008400:	3330      	adds	r3, #48	; 0x30
 8008402:	4618      	mov	r0, r3
 8008404:	f7fe fbf0 	bl	8006be8 <ld_dword>
 8008408:	4603      	mov	r3, r0
 800840a:	4a1c      	ldr	r2, [pc, #112]	; (800847c <find_volume+0x48c>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d11e      	bne.n	800844e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008412:	3330      	adds	r3, #48	; 0x30
 8008414:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008418:	4618      	mov	r0, r3
 800841a:	f7fe fbe5 	bl	8006be8 <ld_dword>
 800841e:	4603      	mov	r3, r0
 8008420:	4a17      	ldr	r2, [pc, #92]	; (8008480 <find_volume+0x490>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d113      	bne.n	800844e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008428:	3330      	adds	r3, #48	; 0x30
 800842a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800842e:	4618      	mov	r0, r3
 8008430:	f7fe fbda 	bl	8006be8 <ld_dword>
 8008434:	4602      	mov	r2, r0
 8008436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008438:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800843a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843c:	3330      	adds	r3, #48	; 0x30
 800843e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008442:	4618      	mov	r0, r3
 8008444:	f7fe fbd0 	bl	8006be8 <ld_dword>
 8008448:	4602      	mov	r2, r0
 800844a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800844e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008450:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008454:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008456:	4b0b      	ldr	r3, [pc, #44]	; (8008484 <find_volume+0x494>)
 8008458:	881b      	ldrh	r3, [r3, #0]
 800845a:	3301      	adds	r3, #1
 800845c:	b29a      	uxth	r2, r3
 800845e:	4b09      	ldr	r3, [pc, #36]	; (8008484 <find_volume+0x494>)
 8008460:	801a      	strh	r2, [r3, #0]
 8008462:	4b08      	ldr	r3, [pc, #32]	; (8008484 <find_volume+0x494>)
 8008464:	881a      	ldrh	r2, [r3, #0]
 8008466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008468:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800846a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800846c:	f7fe fdec 	bl	8007048 <clear_lock>
#endif
	return FR_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	3758      	adds	r7, #88	; 0x58
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	41615252 	.word	0x41615252
 8008480:	61417272 	.word	0x61417272
 8008484:	200027b4 	.word	0x200027b4

08008488 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008492:	2309      	movs	r3, #9
 8008494:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d01c      	beq.n	80084d6 <validate+0x4e>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d018      	beq.n	80084d6 <validate+0x4e>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d013      	beq.n	80084d6 <validate+0x4e>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	889a      	ldrh	r2, [r3, #4]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	88db      	ldrh	r3, [r3, #6]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d10c      	bne.n	80084d6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	785b      	ldrb	r3, [r3, #1]
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7fe fada 	bl	8006a7c <disk_status>
 80084c8:	4603      	mov	r3, r0
 80084ca:	f003 0301 	and.w	r3, r3, #1
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d101      	bne.n	80084d6 <validate+0x4e>
			res = FR_OK;
 80084d2:	2300      	movs	r3, #0
 80084d4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80084d6:	7bfb      	ldrb	r3, [r7, #15]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d102      	bne.n	80084e2 <validate+0x5a>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	e000      	b.n	80084e4 <validate+0x5c>
 80084e2:	2300      	movs	r3, #0
 80084e4:	683a      	ldr	r2, [r7, #0]
 80084e6:	6013      	str	r3, [r2, #0]
	return res;
 80084e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
	...

080084f4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b088      	sub	sp, #32
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	4613      	mov	r3, r2
 8008500:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008506:	f107 0310 	add.w	r3, r7, #16
 800850a:	4618      	mov	r0, r3
 800850c:	f7ff fcd5 	bl	8007eba <get_ldnumber>
 8008510:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	2b00      	cmp	r3, #0
 8008516:	da01      	bge.n	800851c <f_mount+0x28>
 8008518:	230b      	movs	r3, #11
 800851a:	e02b      	b.n	8008574 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800851c:	4a17      	ldr	r2, [pc, #92]	; (800857c <f_mount+0x88>)
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008524:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008526:	69bb      	ldr	r3, [r7, #24]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d005      	beq.n	8008538 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800852c:	69b8      	ldr	r0, [r7, #24]
 800852e:	f7fe fd8b 	bl	8007048 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	2200      	movs	r2, #0
 8008536:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d002      	beq.n	8008544 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008544:	68fa      	ldr	r2, [r7, #12]
 8008546:	490d      	ldr	r1, [pc, #52]	; (800857c <f_mount+0x88>)
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d002      	beq.n	800855a <f_mount+0x66>
 8008554:	79fb      	ldrb	r3, [r7, #7]
 8008556:	2b01      	cmp	r3, #1
 8008558:	d001      	beq.n	800855e <f_mount+0x6a>
 800855a:	2300      	movs	r3, #0
 800855c:	e00a      	b.n	8008574 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800855e:	f107 010c 	add.w	r1, r7, #12
 8008562:	f107 0308 	add.w	r3, r7, #8
 8008566:	2200      	movs	r2, #0
 8008568:	4618      	mov	r0, r3
 800856a:	f7ff fd41 	bl	8007ff0 <find_volume>
 800856e:	4603      	mov	r3, r0
 8008570:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008572:	7dfb      	ldrb	r3, [r7, #23]
}
 8008574:	4618      	mov	r0, r3
 8008576:	3720      	adds	r7, #32
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}
 800857c:	200027b0 	.word	0x200027b0

08008580 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b098      	sub	sp, #96	; 0x60
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	4613      	mov	r3, r2
 800858c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d101      	bne.n	8008598 <f_open+0x18>
 8008594:	2309      	movs	r3, #9
 8008596:	e1ad      	b.n	80088f4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008598:	79fb      	ldrb	r3, [r7, #7]
 800859a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800859e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80085a0:	79fa      	ldrb	r2, [r7, #7]
 80085a2:	f107 0110 	add.w	r1, r7, #16
 80085a6:	f107 0308 	add.w	r3, r7, #8
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7ff fd20 	bl	8007ff0 <find_volume>
 80085b0:	4603      	mov	r3, r0
 80085b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80085b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	f040 8191 	bne.w	80088e2 <f_open+0x362>
		dj.obj.fs = fs;
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80085c4:	68ba      	ldr	r2, [r7, #8]
 80085c6:	f107 0314 	add.w	r3, r7, #20
 80085ca:	4611      	mov	r1, r2
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7ff fc03 	bl	8007dd8 <follow_path>
 80085d2:	4603      	mov	r3, r0
 80085d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80085d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d11a      	bne.n	8008616 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80085e0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80085e4:	b25b      	sxtb	r3, r3
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	da03      	bge.n	80085f2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80085ea:	2306      	movs	r3, #6
 80085ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80085f0:	e011      	b.n	8008616 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80085f2:	79fb      	ldrb	r3, [r7, #7]
 80085f4:	f023 0301 	bic.w	r3, r3, #1
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	bf14      	ite	ne
 80085fc:	2301      	movne	r3, #1
 80085fe:	2300      	moveq	r3, #0
 8008600:	b2db      	uxtb	r3, r3
 8008602:	461a      	mov	r2, r3
 8008604:	f107 0314 	add.w	r3, r7, #20
 8008608:	4611      	mov	r1, r2
 800860a:	4618      	mov	r0, r3
 800860c:	f7fe fbd4 	bl	8006db8 <chk_lock>
 8008610:	4603      	mov	r3, r0
 8008612:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008616:	79fb      	ldrb	r3, [r7, #7]
 8008618:	f003 031c 	and.w	r3, r3, #28
 800861c:	2b00      	cmp	r3, #0
 800861e:	d07f      	beq.n	8008720 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008620:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008624:	2b00      	cmp	r3, #0
 8008626:	d017      	beq.n	8008658 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008628:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800862c:	2b04      	cmp	r3, #4
 800862e:	d10e      	bne.n	800864e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008630:	f7fe fc1e 	bl	8006e70 <enq_lock>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d006      	beq.n	8008648 <f_open+0xc8>
 800863a:	f107 0314 	add.w	r3, r7, #20
 800863e:	4618      	mov	r0, r3
 8008640:	f7ff fb03 	bl	8007c4a <dir_register>
 8008644:	4603      	mov	r3, r0
 8008646:	e000      	b.n	800864a <f_open+0xca>
 8008648:	2312      	movs	r3, #18
 800864a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800864e:	79fb      	ldrb	r3, [r7, #7]
 8008650:	f043 0308 	orr.w	r3, r3, #8
 8008654:	71fb      	strb	r3, [r7, #7]
 8008656:	e010      	b.n	800867a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008658:	7ebb      	ldrb	r3, [r7, #26]
 800865a:	f003 0311 	and.w	r3, r3, #17
 800865e:	2b00      	cmp	r3, #0
 8008660:	d003      	beq.n	800866a <f_open+0xea>
					res = FR_DENIED;
 8008662:	2307      	movs	r3, #7
 8008664:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008668:	e007      	b.n	800867a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800866a:	79fb      	ldrb	r3, [r7, #7]
 800866c:	f003 0304 	and.w	r3, r3, #4
 8008670:	2b00      	cmp	r3, #0
 8008672:	d002      	beq.n	800867a <f_open+0xfa>
 8008674:	2308      	movs	r3, #8
 8008676:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800867a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800867e:	2b00      	cmp	r3, #0
 8008680:	d168      	bne.n	8008754 <f_open+0x1d4>
 8008682:	79fb      	ldrb	r3, [r7, #7]
 8008684:	f003 0308 	and.w	r3, r3, #8
 8008688:	2b00      	cmp	r3, #0
 800868a:	d063      	beq.n	8008754 <f_open+0x1d4>
				dw = GET_FATTIME();
 800868c:	f7fd ffb4 	bl	80065f8 <get_fattime>
 8008690:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008694:	330e      	adds	r3, #14
 8008696:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008698:	4618      	mov	r0, r3
 800869a:	f7fe fae3 	bl	8006c64 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800869e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a0:	3316      	adds	r3, #22
 80086a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7fe fadd 	bl	8006c64 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80086aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ac:	330b      	adds	r3, #11
 80086ae:	2220      	movs	r2, #32
 80086b0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086b6:	4611      	mov	r1, r2
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7ff fa32 	bl	8007b22 <ld_clust>
 80086be:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80086c4:	2200      	movs	r2, #0
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7ff fa4a 	bl	8007b60 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80086cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ce:	331c      	adds	r3, #28
 80086d0:	2100      	movs	r1, #0
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7fe fac6 	bl	8006c64 <st_dword>
					fs->wflag = 1;
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	2201      	movs	r2, #1
 80086dc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80086de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d037      	beq.n	8008754 <f_open+0x1d4>
						dw = fs->winsect;
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80086ea:	f107 0314 	add.w	r3, r7, #20
 80086ee:	2200      	movs	r2, #0
 80086f0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7fe ff5d 	bl	80075b2 <remove_chain>
 80086f8:	4603      	mov	r3, r0
 80086fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80086fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008702:	2b00      	cmp	r3, #0
 8008704:	d126      	bne.n	8008754 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800870a:	4618      	mov	r0, r3
 800870c:	f7fe fd04 	bl	8007118 <move_window>
 8008710:	4603      	mov	r3, r0
 8008712:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800871a:	3a01      	subs	r2, #1
 800871c:	60da      	str	r2, [r3, #12]
 800871e:	e019      	b.n	8008754 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008720:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008724:	2b00      	cmp	r3, #0
 8008726:	d115      	bne.n	8008754 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008728:	7ebb      	ldrb	r3, [r7, #26]
 800872a:	f003 0310 	and.w	r3, r3, #16
 800872e:	2b00      	cmp	r3, #0
 8008730:	d003      	beq.n	800873a <f_open+0x1ba>
					res = FR_NO_FILE;
 8008732:	2304      	movs	r3, #4
 8008734:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008738:	e00c      	b.n	8008754 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800873a:	79fb      	ldrb	r3, [r7, #7]
 800873c:	f003 0302 	and.w	r3, r3, #2
 8008740:	2b00      	cmp	r3, #0
 8008742:	d007      	beq.n	8008754 <f_open+0x1d4>
 8008744:	7ebb      	ldrb	r3, [r7, #26]
 8008746:	f003 0301 	and.w	r3, r3, #1
 800874a:	2b00      	cmp	r3, #0
 800874c:	d002      	beq.n	8008754 <f_open+0x1d4>
						res = FR_DENIED;
 800874e:	2307      	movs	r3, #7
 8008750:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008754:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008758:	2b00      	cmp	r3, #0
 800875a:	d128      	bne.n	80087ae <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800875c:	79fb      	ldrb	r3, [r7, #7]
 800875e:	f003 0308 	and.w	r3, r3, #8
 8008762:	2b00      	cmp	r3, #0
 8008764:	d003      	beq.n	800876e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008766:	79fb      	ldrb	r3, [r7, #7]
 8008768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800876c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008776:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800877c:	79fb      	ldrb	r3, [r7, #7]
 800877e:	f023 0301 	bic.w	r3, r3, #1
 8008782:	2b00      	cmp	r3, #0
 8008784:	bf14      	ite	ne
 8008786:	2301      	movne	r3, #1
 8008788:	2300      	moveq	r3, #0
 800878a:	b2db      	uxtb	r3, r3
 800878c:	461a      	mov	r2, r3
 800878e:	f107 0314 	add.w	r3, r7, #20
 8008792:	4611      	mov	r1, r2
 8008794:	4618      	mov	r0, r3
 8008796:	f7fe fb8d 	bl	8006eb4 <inc_lock>
 800879a:	4602      	mov	r2, r0
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d102      	bne.n	80087ae <f_open+0x22e>
 80087a8:	2302      	movs	r3, #2
 80087aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80087ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	f040 8095 	bne.w	80088e2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087bc:	4611      	mov	r1, r2
 80087be:	4618      	mov	r0, r3
 80087c0:	f7ff f9af 	bl	8007b22 <ld_clust>
 80087c4:	4602      	mov	r2, r0
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80087ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087cc:	331c      	adds	r3, #28
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7fe fa0a 	bl	8006be8 <ld_dword>
 80087d4:	4602      	mov	r2, r0
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2200      	movs	r2, #0
 80087de:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80087e0:	693a      	ldr	r2, [r7, #16]
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	88da      	ldrh	r2, [r3, #6]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	79fa      	ldrb	r2, [r7, #7]
 80087f2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2200      	movs	r2, #0
 80087f8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2200      	movs	r2, #0
 80087fe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2200      	movs	r2, #0
 8008804:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	3330      	adds	r3, #48	; 0x30
 800880a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800880e:	2100      	movs	r1, #0
 8008810:	4618      	mov	r0, r3
 8008812:	f7fe fa74 	bl	8006cfe <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008816:	79fb      	ldrb	r3, [r7, #7]
 8008818:	f003 0320 	and.w	r3, r3, #32
 800881c:	2b00      	cmp	r3, #0
 800881e:	d060      	beq.n	80088e2 <f_open+0x362>
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	68db      	ldr	r3, [r3, #12]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d05c      	beq.n	80088e2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	68da      	ldr	r2, [r3, #12]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	895b      	ldrh	r3, [r3, #10]
 8008834:	025b      	lsls	r3, r3, #9
 8008836:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	657b      	str	r3, [r7, #84]	; 0x54
 8008844:	e016      	b.n	8008874 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800884a:	4618      	mov	r0, r3
 800884c:	f7fe fd1f 	bl	800728e <get_fat>
 8008850:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008852:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008854:	2b01      	cmp	r3, #1
 8008856:	d802      	bhi.n	800885e <f_open+0x2de>
 8008858:	2302      	movs	r3, #2
 800885a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800885e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008860:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008864:	d102      	bne.n	800886c <f_open+0x2ec>
 8008866:	2301      	movs	r3, #1
 8008868:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800886c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800886e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008870:	1ad3      	subs	r3, r2, r3
 8008872:	657b      	str	r3, [r7, #84]	; 0x54
 8008874:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008878:	2b00      	cmp	r3, #0
 800887a:	d103      	bne.n	8008884 <f_open+0x304>
 800887c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800887e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008880:	429a      	cmp	r2, r3
 8008882:	d8e0      	bhi.n	8008846 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008888:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800888a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800888e:	2b00      	cmp	r3, #0
 8008890:	d127      	bne.n	80088e2 <f_open+0x362>
 8008892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008898:	2b00      	cmp	r3, #0
 800889a:	d022      	beq.n	80088e2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7fe fcd5 	bl	8007250 <clust2sect>
 80088a6:	6478      	str	r0, [r7, #68]	; 0x44
 80088a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d103      	bne.n	80088b6 <f_open+0x336>
						res = FR_INT_ERR;
 80088ae:	2302      	movs	r3, #2
 80088b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80088b4:	e015      	b.n	80088e2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80088b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088b8:	0a5a      	lsrs	r2, r3, #9
 80088ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088bc:	441a      	add	r2, r3
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	7858      	ldrb	r0, [r3, #1]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6a1a      	ldr	r2, [r3, #32]
 80088d0:	2301      	movs	r3, #1
 80088d2:	f7fe f913 	bl	8006afc <disk_read>
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d002      	beq.n	80088e2 <f_open+0x362>
 80088dc:	2301      	movs	r3, #1
 80088de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80088e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d002      	beq.n	80088f0 <f_open+0x370>
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2200      	movs	r2, #0
 80088ee:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80088f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3760      	adds	r7, #96	; 0x60
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b08c      	sub	sp, #48	; 0x30
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	607a      	str	r2, [r7, #4]
 8008908:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	2200      	movs	r2, #0
 8008912:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f107 0210 	add.w	r2, r7, #16
 800891a:	4611      	mov	r1, r2
 800891c:	4618      	mov	r0, r3
 800891e:	f7ff fdb3 	bl	8008488 <validate>
 8008922:	4603      	mov	r3, r0
 8008924:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008928:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800892c:	2b00      	cmp	r3, #0
 800892e:	d107      	bne.n	8008940 <f_write+0x44>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	7d5b      	ldrb	r3, [r3, #21]
 8008934:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008938:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800893c:	2b00      	cmp	r3, #0
 800893e:	d002      	beq.n	8008946 <f_write+0x4a>
 8008940:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008944:	e14b      	b.n	8008bde <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	7d1b      	ldrb	r3, [r3, #20]
 800894a:	f003 0302 	and.w	r3, r3, #2
 800894e:	2b00      	cmp	r3, #0
 8008950:	d101      	bne.n	8008956 <f_write+0x5a>
 8008952:	2307      	movs	r3, #7
 8008954:	e143      	b.n	8008bde <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	699a      	ldr	r2, [r3, #24]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	441a      	add	r2, r3
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	699b      	ldr	r3, [r3, #24]
 8008962:	429a      	cmp	r2, r3
 8008964:	f080 812d 	bcs.w	8008bc2 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	699b      	ldr	r3, [r3, #24]
 800896c:	43db      	mvns	r3, r3
 800896e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008970:	e127      	b.n	8008bc2 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	699b      	ldr	r3, [r3, #24]
 8008976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800897a:	2b00      	cmp	r3, #0
 800897c:	f040 80e3 	bne.w	8008b46 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	699b      	ldr	r3, [r3, #24]
 8008984:	0a5b      	lsrs	r3, r3, #9
 8008986:	693a      	ldr	r2, [r7, #16]
 8008988:	8952      	ldrh	r2, [r2, #10]
 800898a:	3a01      	subs	r2, #1
 800898c:	4013      	ands	r3, r2
 800898e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d143      	bne.n	8008a1e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	699b      	ldr	r3, [r3, #24]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d10c      	bne.n	80089b8 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80089a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d11a      	bne.n	80089e0 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2100      	movs	r1, #0
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7fe fe64 	bl	800767c <create_chain>
 80089b4:	62b8      	str	r0, [r7, #40]	; 0x28
 80089b6:	e013      	b.n	80089e0 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d007      	beq.n	80089d0 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	699b      	ldr	r3, [r3, #24]
 80089c4:	4619      	mov	r1, r3
 80089c6:	68f8      	ldr	r0, [r7, #12]
 80089c8:	f7fe fef0 	bl	80077ac <clmt_clust>
 80089cc:	62b8      	str	r0, [r7, #40]	; 0x28
 80089ce:	e007      	b.n	80089e0 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	69db      	ldr	r3, [r3, #28]
 80089d6:	4619      	mov	r1, r3
 80089d8:	4610      	mov	r0, r2
 80089da:	f7fe fe4f 	bl	800767c <create_chain>
 80089de:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80089e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	f000 80f2 	beq.w	8008bcc <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80089e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d104      	bne.n	80089f8 <f_write+0xfc>
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2202      	movs	r2, #2
 80089f2:	755a      	strb	r2, [r3, #21]
 80089f4:	2302      	movs	r3, #2
 80089f6:	e0f2      	b.n	8008bde <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80089f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089fe:	d104      	bne.n	8008a0a <f_write+0x10e>
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2201      	movs	r2, #1
 8008a04:	755a      	strb	r2, [r3, #21]
 8008a06:	2301      	movs	r3, #1
 8008a08:	e0e9      	b.n	8008bde <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a0e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d102      	bne.n	8008a1e <f_write+0x122>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a1c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	7d1b      	ldrb	r3, [r3, #20]
 8008a22:	b25b      	sxtb	r3, r3
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	da18      	bge.n	8008a5a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	7858      	ldrb	r0, [r3, #1]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	6a1a      	ldr	r2, [r3, #32]
 8008a36:	2301      	movs	r3, #1
 8008a38:	f7fe f880 	bl	8006b3c <disk_write>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d004      	beq.n	8008a4c <f_write+0x150>
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2201      	movs	r2, #1
 8008a46:	755a      	strb	r2, [r3, #21]
 8008a48:	2301      	movs	r3, #1
 8008a4a:	e0c8      	b.n	8008bde <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	7d1b      	ldrb	r3, [r3, #20]
 8008a50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a54:	b2da      	uxtb	r2, r3
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008a5a:	693a      	ldr	r2, [r7, #16]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	69db      	ldr	r3, [r3, #28]
 8008a60:	4619      	mov	r1, r3
 8008a62:	4610      	mov	r0, r2
 8008a64:	f7fe fbf4 	bl	8007250 <clust2sect>
 8008a68:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d104      	bne.n	8008a7a <f_write+0x17e>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2202      	movs	r2, #2
 8008a74:	755a      	strb	r2, [r3, #21]
 8008a76:	2302      	movs	r3, #2
 8008a78:	e0b1      	b.n	8008bde <f_write+0x2e2>
			sect += csect;
 8008a7a:	697a      	ldr	r2, [r7, #20]
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	4413      	add	r3, r2
 8008a80:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	0a5b      	lsrs	r3, r3, #9
 8008a86:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008a88:	6a3b      	ldr	r3, [r7, #32]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d03c      	beq.n	8008b08 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008a8e:	69ba      	ldr	r2, [r7, #24]
 8008a90:	6a3b      	ldr	r3, [r7, #32]
 8008a92:	4413      	add	r3, r2
 8008a94:	693a      	ldr	r2, [r7, #16]
 8008a96:	8952      	ldrh	r2, [r2, #10]
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d905      	bls.n	8008aa8 <f_write+0x1ac>
					cc = fs->csize - csect;
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	895b      	ldrh	r3, [r3, #10]
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	7858      	ldrb	r0, [r3, #1]
 8008aac:	6a3b      	ldr	r3, [r7, #32]
 8008aae:	697a      	ldr	r2, [r7, #20]
 8008ab0:	69f9      	ldr	r1, [r7, #28]
 8008ab2:	f7fe f843 	bl	8006b3c <disk_write>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d004      	beq.n	8008ac6 <f_write+0x1ca>
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	755a      	strb	r2, [r3, #21]
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e08b      	b.n	8008bde <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	6a1a      	ldr	r2, [r3, #32]
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	1ad3      	subs	r3, r2, r3
 8008ace:	6a3a      	ldr	r2, [r7, #32]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d915      	bls.n	8008b00 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6a1a      	ldr	r2, [r3, #32]
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	1ad3      	subs	r3, r2, r3
 8008ae2:	025b      	lsls	r3, r3, #9
 8008ae4:	69fa      	ldr	r2, [r7, #28]
 8008ae6:	4413      	add	r3, r2
 8008ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008aec:	4619      	mov	r1, r3
 8008aee:	f7fe f8e5 	bl	8006cbc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	7d1b      	ldrb	r3, [r3, #20]
 8008af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008afa:	b2da      	uxtb	r2, r3
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008b00:	6a3b      	ldr	r3, [r7, #32]
 8008b02:	025b      	lsls	r3, r3, #9
 8008b04:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008b06:	e03f      	b.n	8008b88 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6a1b      	ldr	r3, [r3, #32]
 8008b0c:	697a      	ldr	r2, [r7, #20]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d016      	beq.n	8008b40 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	699a      	ldr	r2, [r3, #24]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d210      	bcs.n	8008b40 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	7858      	ldrb	r0, [r3, #1]
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008b28:	2301      	movs	r3, #1
 8008b2a:	697a      	ldr	r2, [r7, #20]
 8008b2c:	f7fd ffe6 	bl	8006afc <disk_read>
 8008b30:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d004      	beq.n	8008b40 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2201      	movs	r2, #1
 8008b3a:	755a      	strb	r2, [r3, #21]
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e04e      	b.n	8008bde <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	697a      	ldr	r2, [r7, #20]
 8008b44:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	699b      	ldr	r3, [r3, #24]
 8008b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b4e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008b52:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d901      	bls.n	8008b60 <f_write+0x264>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	699b      	ldr	r3, [r3, #24]
 8008b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b6e:	4413      	add	r3, r2
 8008b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b72:	69f9      	ldr	r1, [r7, #28]
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7fe f8a1 	bl	8006cbc <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	7d1b      	ldrb	r3, [r3, #20]
 8008b7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b82:	b2da      	uxtb	r2, r3
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008b88:	69fa      	ldr	r2, [r7, #28]
 8008b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8c:	4413      	add	r3, r2
 8008b8e:	61fb      	str	r3, [r7, #28]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	699a      	ldr	r2, [r3, #24]
 8008b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b96:	441a      	add	r2, r3
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	619a      	str	r2, [r3, #24]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	68da      	ldr	r2, [r3, #12]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	699b      	ldr	r3, [r3, #24]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	bf38      	it	cc
 8008ba8:	461a      	movcc	r2, r3
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	60da      	str	r2, [r3, #12]
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb4:	441a      	add	r2, r3
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	601a      	str	r2, [r3, #0]
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bbe:	1ad3      	subs	r3, r2, r3
 8008bc0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f47f aed4 	bne.w	8008972 <f_write+0x76>
 8008bca:	e000      	b.n	8008bce <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008bcc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	7d1b      	ldrb	r3, [r3, #20]
 8008bd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bd6:	b2da      	uxtb	r2, r3
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3730      	adds	r7, #48	; 0x30
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b086      	sub	sp, #24
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f107 0208 	add.w	r2, r7, #8
 8008bf4:	4611      	mov	r1, r2
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7ff fc46 	bl	8008488 <validate>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008c00:	7dfb      	ldrb	r3, [r7, #23]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d168      	bne.n	8008cd8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	7d1b      	ldrb	r3, [r3, #20]
 8008c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d062      	beq.n	8008cd8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	7d1b      	ldrb	r3, [r3, #20]
 8008c16:	b25b      	sxtb	r3, r3
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	da15      	bge.n	8008c48 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	7858      	ldrb	r0, [r3, #1]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a1a      	ldr	r2, [r3, #32]
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	f7fd ff86 	bl	8006b3c <disk_write>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d001      	beq.n	8008c3a <f_sync+0x54>
 8008c36:	2301      	movs	r3, #1
 8008c38:	e04f      	b.n	8008cda <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	7d1b      	ldrb	r3, [r3, #20]
 8008c3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c42:	b2da      	uxtb	r2, r3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008c48:	f7fd fcd6 	bl	80065f8 <get_fattime>
 8008c4c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008c4e:	68ba      	ldr	r2, [r7, #8]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c54:	4619      	mov	r1, r3
 8008c56:	4610      	mov	r0, r2
 8008c58:	f7fe fa5e 	bl	8007118 <move_window>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008c60:	7dfb      	ldrb	r3, [r7, #23]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d138      	bne.n	8008cd8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c6a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	330b      	adds	r3, #11
 8008c70:	781a      	ldrb	r2, [r3, #0]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	330b      	adds	r3, #11
 8008c76:	f042 0220 	orr.w	r2, r2, #32
 8008c7a:	b2d2      	uxtb	r2, r2
 8008c7c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6818      	ldr	r0, [r3, #0]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	461a      	mov	r2, r3
 8008c88:	68f9      	ldr	r1, [r7, #12]
 8008c8a:	f7fe ff69 	bl	8007b60 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f103 021c 	add.w	r2, r3, #28
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	4619      	mov	r1, r3
 8008c9a:	4610      	mov	r0, r2
 8008c9c:	f7fd ffe2 	bl	8006c64 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	3316      	adds	r3, #22
 8008ca4:	6939      	ldr	r1, [r7, #16]
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7fd ffdc 	bl	8006c64 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	3312      	adds	r3, #18
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7fd ffbb 	bl	8006c2e <st_word>
					fs->wflag = 1;
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7fe fa57 	bl	8007174 <sync_fs>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	7d1b      	ldrb	r3, [r3, #20]
 8008cce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cd2:	b2da      	uxtb	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008cd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3718      	adds	r7, #24
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b084      	sub	sp, #16
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f7ff ff7b 	bl	8008be6 <f_sync>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008cf4:	7bfb      	ldrb	r3, [r7, #15]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d118      	bne.n	8008d2c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f107 0208 	add.w	r2, r7, #8
 8008d00:	4611      	mov	r1, r2
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7ff fbc0 	bl	8008488 <validate>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008d0c:	7bfb      	ldrb	r3, [r7, #15]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d10c      	bne.n	8008d2c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	691b      	ldr	r3, [r3, #16]
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7fe f95a 	bl	8006fd0 <dec_lock>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008d20:	7bfb      	ldrb	r3, [r7, #15]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d102      	bne.n	8008d2c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3710      	adds	r7, #16
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
	...

08008d38 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b087      	sub	sp, #28
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	4613      	mov	r3, r2
 8008d44:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008d46:	2301      	movs	r3, #1
 8008d48:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008d4e:	4b1f      	ldr	r3, [pc, #124]	; (8008dcc <FATFS_LinkDriverEx+0x94>)
 8008d50:	7a5b      	ldrb	r3, [r3, #9]
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d131      	bne.n	8008dbc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008d58:	4b1c      	ldr	r3, [pc, #112]	; (8008dcc <FATFS_LinkDriverEx+0x94>)
 8008d5a:	7a5b      	ldrb	r3, [r3, #9]
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	461a      	mov	r2, r3
 8008d60:	4b1a      	ldr	r3, [pc, #104]	; (8008dcc <FATFS_LinkDriverEx+0x94>)
 8008d62:	2100      	movs	r1, #0
 8008d64:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008d66:	4b19      	ldr	r3, [pc, #100]	; (8008dcc <FATFS_LinkDriverEx+0x94>)
 8008d68:	7a5b      	ldrb	r3, [r3, #9]
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	4a17      	ldr	r2, [pc, #92]	; (8008dcc <FATFS_LinkDriverEx+0x94>)
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	4413      	add	r3, r2
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008d76:	4b15      	ldr	r3, [pc, #84]	; (8008dcc <FATFS_LinkDriverEx+0x94>)
 8008d78:	7a5b      	ldrb	r3, [r3, #9]
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	4b13      	ldr	r3, [pc, #76]	; (8008dcc <FATFS_LinkDriverEx+0x94>)
 8008d80:	4413      	add	r3, r2
 8008d82:	79fa      	ldrb	r2, [r7, #7]
 8008d84:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008d86:	4b11      	ldr	r3, [pc, #68]	; (8008dcc <FATFS_LinkDriverEx+0x94>)
 8008d88:	7a5b      	ldrb	r3, [r3, #9]
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	1c5a      	adds	r2, r3, #1
 8008d8e:	b2d1      	uxtb	r1, r2
 8008d90:	4a0e      	ldr	r2, [pc, #56]	; (8008dcc <FATFS_LinkDriverEx+0x94>)
 8008d92:	7251      	strb	r1, [r2, #9]
 8008d94:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008d96:	7dbb      	ldrb	r3, [r7, #22]
 8008d98:	3330      	adds	r3, #48	; 0x30
 8008d9a:	b2da      	uxtb	r2, r3
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	3301      	adds	r3, #1
 8008da4:	223a      	movs	r2, #58	; 0x3a
 8008da6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	3302      	adds	r3, #2
 8008dac:	222f      	movs	r2, #47	; 0x2f
 8008dae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	3303      	adds	r3, #3
 8008db4:	2200      	movs	r2, #0
 8008db6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008db8:	2300      	movs	r3, #0
 8008dba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	371c      	adds	r7, #28
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	200027d8 	.word	0x200027d8

08008dd0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008dda:	2200      	movs	r2, #0
 8008ddc:	6839      	ldr	r1, [r7, #0]
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f7ff ffaa 	bl	8008d38 <FATFS_LinkDriverEx>
 8008de4:	4603      	mov	r3, r0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
	...

08008df0 <sniprintf>:
 8008df0:	b40c      	push	{r2, r3}
 8008df2:	b530      	push	{r4, r5, lr}
 8008df4:	4b17      	ldr	r3, [pc, #92]	; (8008e54 <sniprintf+0x64>)
 8008df6:	1e0c      	subs	r4, r1, #0
 8008df8:	681d      	ldr	r5, [r3, #0]
 8008dfa:	b09d      	sub	sp, #116	; 0x74
 8008dfc:	da08      	bge.n	8008e10 <sniprintf+0x20>
 8008dfe:	238b      	movs	r3, #139	; 0x8b
 8008e00:	602b      	str	r3, [r5, #0]
 8008e02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e06:	b01d      	add	sp, #116	; 0x74
 8008e08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e0c:	b002      	add	sp, #8
 8008e0e:	4770      	bx	lr
 8008e10:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008e14:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008e18:	bf14      	ite	ne
 8008e1a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8008e1e:	4623      	moveq	r3, r4
 8008e20:	9304      	str	r3, [sp, #16]
 8008e22:	9307      	str	r3, [sp, #28]
 8008e24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e28:	9002      	str	r0, [sp, #8]
 8008e2a:	9006      	str	r0, [sp, #24]
 8008e2c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008e30:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008e32:	ab21      	add	r3, sp, #132	; 0x84
 8008e34:	a902      	add	r1, sp, #8
 8008e36:	4628      	mov	r0, r5
 8008e38:	9301      	str	r3, [sp, #4]
 8008e3a:	f000 f9cd 	bl	80091d8 <_svfiprintf_r>
 8008e3e:	1c43      	adds	r3, r0, #1
 8008e40:	bfbc      	itt	lt
 8008e42:	238b      	movlt	r3, #139	; 0x8b
 8008e44:	602b      	strlt	r3, [r5, #0]
 8008e46:	2c00      	cmp	r4, #0
 8008e48:	d0dd      	beq.n	8008e06 <sniprintf+0x16>
 8008e4a:	9b02      	ldr	r3, [sp, #8]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	701a      	strb	r2, [r3, #0]
 8008e50:	e7d9      	b.n	8008e06 <sniprintf+0x16>
 8008e52:	bf00      	nop
 8008e54:	20000064 	.word	0x20000064

08008e58 <std>:
 8008e58:	2300      	movs	r3, #0
 8008e5a:	b510      	push	{r4, lr}
 8008e5c:	4604      	mov	r4, r0
 8008e5e:	e9c0 3300 	strd	r3, r3, [r0]
 8008e62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e66:	6083      	str	r3, [r0, #8]
 8008e68:	8181      	strh	r1, [r0, #12]
 8008e6a:	6643      	str	r3, [r0, #100]	; 0x64
 8008e6c:	81c2      	strh	r2, [r0, #14]
 8008e6e:	6183      	str	r3, [r0, #24]
 8008e70:	4619      	mov	r1, r3
 8008e72:	2208      	movs	r2, #8
 8008e74:	305c      	adds	r0, #92	; 0x5c
 8008e76:	f000 f91f 	bl	80090b8 <memset>
 8008e7a:	4b0d      	ldr	r3, [pc, #52]	; (8008eb0 <std+0x58>)
 8008e7c:	6263      	str	r3, [r4, #36]	; 0x24
 8008e7e:	4b0d      	ldr	r3, [pc, #52]	; (8008eb4 <std+0x5c>)
 8008e80:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e82:	4b0d      	ldr	r3, [pc, #52]	; (8008eb8 <std+0x60>)
 8008e84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e86:	4b0d      	ldr	r3, [pc, #52]	; (8008ebc <std+0x64>)
 8008e88:	6323      	str	r3, [r4, #48]	; 0x30
 8008e8a:	4b0d      	ldr	r3, [pc, #52]	; (8008ec0 <std+0x68>)
 8008e8c:	6224      	str	r4, [r4, #32]
 8008e8e:	429c      	cmp	r4, r3
 8008e90:	d006      	beq.n	8008ea0 <std+0x48>
 8008e92:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008e96:	4294      	cmp	r4, r2
 8008e98:	d002      	beq.n	8008ea0 <std+0x48>
 8008e9a:	33d0      	adds	r3, #208	; 0xd0
 8008e9c:	429c      	cmp	r4, r3
 8008e9e:	d105      	bne.n	8008eac <std+0x54>
 8008ea0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ea8:	f000 b938 	b.w	800911c <__retarget_lock_init_recursive>
 8008eac:	bd10      	pop	{r4, pc}
 8008eae:	bf00      	nop
 8008eb0:	08009c31 	.word	0x08009c31
 8008eb4:	08009c53 	.word	0x08009c53
 8008eb8:	08009c8b 	.word	0x08009c8b
 8008ebc:	08009caf 	.word	0x08009caf
 8008ec0:	200027e4 	.word	0x200027e4

08008ec4 <stdio_exit_handler>:
 8008ec4:	4a02      	ldr	r2, [pc, #8]	; (8008ed0 <stdio_exit_handler+0xc>)
 8008ec6:	4903      	ldr	r1, [pc, #12]	; (8008ed4 <stdio_exit_handler+0x10>)
 8008ec8:	4803      	ldr	r0, [pc, #12]	; (8008ed8 <stdio_exit_handler+0x14>)
 8008eca:	f000 b869 	b.w	8008fa0 <_fwalk_sglue>
 8008ece:	bf00      	nop
 8008ed0:	2000000c 	.word	0x2000000c
 8008ed4:	08009bc9 	.word	0x08009bc9
 8008ed8:	20000018 	.word	0x20000018

08008edc <cleanup_stdio>:
 8008edc:	6841      	ldr	r1, [r0, #4]
 8008ede:	4b0c      	ldr	r3, [pc, #48]	; (8008f10 <cleanup_stdio+0x34>)
 8008ee0:	4299      	cmp	r1, r3
 8008ee2:	b510      	push	{r4, lr}
 8008ee4:	4604      	mov	r4, r0
 8008ee6:	d001      	beq.n	8008eec <cleanup_stdio+0x10>
 8008ee8:	f000 fe6e 	bl	8009bc8 <_fflush_r>
 8008eec:	68a1      	ldr	r1, [r4, #8]
 8008eee:	4b09      	ldr	r3, [pc, #36]	; (8008f14 <cleanup_stdio+0x38>)
 8008ef0:	4299      	cmp	r1, r3
 8008ef2:	d002      	beq.n	8008efa <cleanup_stdio+0x1e>
 8008ef4:	4620      	mov	r0, r4
 8008ef6:	f000 fe67 	bl	8009bc8 <_fflush_r>
 8008efa:	68e1      	ldr	r1, [r4, #12]
 8008efc:	4b06      	ldr	r3, [pc, #24]	; (8008f18 <cleanup_stdio+0x3c>)
 8008efe:	4299      	cmp	r1, r3
 8008f00:	d004      	beq.n	8008f0c <cleanup_stdio+0x30>
 8008f02:	4620      	mov	r0, r4
 8008f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f08:	f000 be5e 	b.w	8009bc8 <_fflush_r>
 8008f0c:	bd10      	pop	{r4, pc}
 8008f0e:	bf00      	nop
 8008f10:	200027e4 	.word	0x200027e4
 8008f14:	2000284c 	.word	0x2000284c
 8008f18:	200028b4 	.word	0x200028b4

08008f1c <global_stdio_init.part.0>:
 8008f1c:	b510      	push	{r4, lr}
 8008f1e:	4b0b      	ldr	r3, [pc, #44]	; (8008f4c <global_stdio_init.part.0+0x30>)
 8008f20:	4c0b      	ldr	r4, [pc, #44]	; (8008f50 <global_stdio_init.part.0+0x34>)
 8008f22:	4a0c      	ldr	r2, [pc, #48]	; (8008f54 <global_stdio_init.part.0+0x38>)
 8008f24:	601a      	str	r2, [r3, #0]
 8008f26:	4620      	mov	r0, r4
 8008f28:	2200      	movs	r2, #0
 8008f2a:	2104      	movs	r1, #4
 8008f2c:	f7ff ff94 	bl	8008e58 <std>
 8008f30:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008f34:	2201      	movs	r2, #1
 8008f36:	2109      	movs	r1, #9
 8008f38:	f7ff ff8e 	bl	8008e58 <std>
 8008f3c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008f40:	2202      	movs	r2, #2
 8008f42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f46:	2112      	movs	r1, #18
 8008f48:	f7ff bf86 	b.w	8008e58 <std>
 8008f4c:	2000291c 	.word	0x2000291c
 8008f50:	200027e4 	.word	0x200027e4
 8008f54:	08008ec5 	.word	0x08008ec5

08008f58 <__sfp_lock_acquire>:
 8008f58:	4801      	ldr	r0, [pc, #4]	; (8008f60 <__sfp_lock_acquire+0x8>)
 8008f5a:	f000 b8e0 	b.w	800911e <__retarget_lock_acquire_recursive>
 8008f5e:	bf00      	nop
 8008f60:	20002921 	.word	0x20002921

08008f64 <__sfp_lock_release>:
 8008f64:	4801      	ldr	r0, [pc, #4]	; (8008f6c <__sfp_lock_release+0x8>)
 8008f66:	f000 b8db 	b.w	8009120 <__retarget_lock_release_recursive>
 8008f6a:	bf00      	nop
 8008f6c:	20002921 	.word	0x20002921

08008f70 <__sinit>:
 8008f70:	b510      	push	{r4, lr}
 8008f72:	4604      	mov	r4, r0
 8008f74:	f7ff fff0 	bl	8008f58 <__sfp_lock_acquire>
 8008f78:	6a23      	ldr	r3, [r4, #32]
 8008f7a:	b11b      	cbz	r3, 8008f84 <__sinit+0x14>
 8008f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f80:	f7ff bff0 	b.w	8008f64 <__sfp_lock_release>
 8008f84:	4b04      	ldr	r3, [pc, #16]	; (8008f98 <__sinit+0x28>)
 8008f86:	6223      	str	r3, [r4, #32]
 8008f88:	4b04      	ldr	r3, [pc, #16]	; (8008f9c <__sinit+0x2c>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d1f5      	bne.n	8008f7c <__sinit+0xc>
 8008f90:	f7ff ffc4 	bl	8008f1c <global_stdio_init.part.0>
 8008f94:	e7f2      	b.n	8008f7c <__sinit+0xc>
 8008f96:	bf00      	nop
 8008f98:	08008edd 	.word	0x08008edd
 8008f9c:	2000291c 	.word	0x2000291c

08008fa0 <_fwalk_sglue>:
 8008fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fa4:	4607      	mov	r7, r0
 8008fa6:	4688      	mov	r8, r1
 8008fa8:	4614      	mov	r4, r2
 8008faa:	2600      	movs	r6, #0
 8008fac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008fb0:	f1b9 0901 	subs.w	r9, r9, #1
 8008fb4:	d505      	bpl.n	8008fc2 <_fwalk_sglue+0x22>
 8008fb6:	6824      	ldr	r4, [r4, #0]
 8008fb8:	2c00      	cmp	r4, #0
 8008fba:	d1f7      	bne.n	8008fac <_fwalk_sglue+0xc>
 8008fbc:	4630      	mov	r0, r6
 8008fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fc2:	89ab      	ldrh	r3, [r5, #12]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d907      	bls.n	8008fd8 <_fwalk_sglue+0x38>
 8008fc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008fcc:	3301      	adds	r3, #1
 8008fce:	d003      	beq.n	8008fd8 <_fwalk_sglue+0x38>
 8008fd0:	4629      	mov	r1, r5
 8008fd2:	4638      	mov	r0, r7
 8008fd4:	47c0      	blx	r8
 8008fd6:	4306      	orrs	r6, r0
 8008fd8:	3568      	adds	r5, #104	; 0x68
 8008fda:	e7e9      	b.n	8008fb0 <_fwalk_sglue+0x10>

08008fdc <iprintf>:
 8008fdc:	b40f      	push	{r0, r1, r2, r3}
 8008fde:	b507      	push	{r0, r1, r2, lr}
 8008fe0:	4906      	ldr	r1, [pc, #24]	; (8008ffc <iprintf+0x20>)
 8008fe2:	ab04      	add	r3, sp, #16
 8008fe4:	6808      	ldr	r0, [r1, #0]
 8008fe6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fea:	6881      	ldr	r1, [r0, #8]
 8008fec:	9301      	str	r3, [sp, #4]
 8008fee:	f000 fa1b 	bl	8009428 <_vfiprintf_r>
 8008ff2:	b003      	add	sp, #12
 8008ff4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ff8:	b004      	add	sp, #16
 8008ffa:	4770      	bx	lr
 8008ffc:	20000064 	.word	0x20000064

08009000 <_puts_r>:
 8009000:	6a03      	ldr	r3, [r0, #32]
 8009002:	b570      	push	{r4, r5, r6, lr}
 8009004:	6884      	ldr	r4, [r0, #8]
 8009006:	4605      	mov	r5, r0
 8009008:	460e      	mov	r6, r1
 800900a:	b90b      	cbnz	r3, 8009010 <_puts_r+0x10>
 800900c:	f7ff ffb0 	bl	8008f70 <__sinit>
 8009010:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009012:	07db      	lsls	r3, r3, #31
 8009014:	d405      	bmi.n	8009022 <_puts_r+0x22>
 8009016:	89a3      	ldrh	r3, [r4, #12]
 8009018:	0598      	lsls	r0, r3, #22
 800901a:	d402      	bmi.n	8009022 <_puts_r+0x22>
 800901c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800901e:	f000 f87e 	bl	800911e <__retarget_lock_acquire_recursive>
 8009022:	89a3      	ldrh	r3, [r4, #12]
 8009024:	0719      	lsls	r1, r3, #28
 8009026:	d513      	bpl.n	8009050 <_puts_r+0x50>
 8009028:	6923      	ldr	r3, [r4, #16]
 800902a:	b18b      	cbz	r3, 8009050 <_puts_r+0x50>
 800902c:	3e01      	subs	r6, #1
 800902e:	68a3      	ldr	r3, [r4, #8]
 8009030:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009034:	3b01      	subs	r3, #1
 8009036:	60a3      	str	r3, [r4, #8]
 8009038:	b9e9      	cbnz	r1, 8009076 <_puts_r+0x76>
 800903a:	2b00      	cmp	r3, #0
 800903c:	da2e      	bge.n	800909c <_puts_r+0x9c>
 800903e:	4622      	mov	r2, r4
 8009040:	210a      	movs	r1, #10
 8009042:	4628      	mov	r0, r5
 8009044:	f000 fe66 	bl	8009d14 <__swbuf_r>
 8009048:	3001      	adds	r0, #1
 800904a:	d007      	beq.n	800905c <_puts_r+0x5c>
 800904c:	250a      	movs	r5, #10
 800904e:	e007      	b.n	8009060 <_puts_r+0x60>
 8009050:	4621      	mov	r1, r4
 8009052:	4628      	mov	r0, r5
 8009054:	f000 fe9c 	bl	8009d90 <__swsetup_r>
 8009058:	2800      	cmp	r0, #0
 800905a:	d0e7      	beq.n	800902c <_puts_r+0x2c>
 800905c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009060:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009062:	07da      	lsls	r2, r3, #31
 8009064:	d405      	bmi.n	8009072 <_puts_r+0x72>
 8009066:	89a3      	ldrh	r3, [r4, #12]
 8009068:	059b      	lsls	r3, r3, #22
 800906a:	d402      	bmi.n	8009072 <_puts_r+0x72>
 800906c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800906e:	f000 f857 	bl	8009120 <__retarget_lock_release_recursive>
 8009072:	4628      	mov	r0, r5
 8009074:	bd70      	pop	{r4, r5, r6, pc}
 8009076:	2b00      	cmp	r3, #0
 8009078:	da04      	bge.n	8009084 <_puts_r+0x84>
 800907a:	69a2      	ldr	r2, [r4, #24]
 800907c:	429a      	cmp	r2, r3
 800907e:	dc06      	bgt.n	800908e <_puts_r+0x8e>
 8009080:	290a      	cmp	r1, #10
 8009082:	d004      	beq.n	800908e <_puts_r+0x8e>
 8009084:	6823      	ldr	r3, [r4, #0]
 8009086:	1c5a      	adds	r2, r3, #1
 8009088:	6022      	str	r2, [r4, #0]
 800908a:	7019      	strb	r1, [r3, #0]
 800908c:	e7cf      	b.n	800902e <_puts_r+0x2e>
 800908e:	4622      	mov	r2, r4
 8009090:	4628      	mov	r0, r5
 8009092:	f000 fe3f 	bl	8009d14 <__swbuf_r>
 8009096:	3001      	adds	r0, #1
 8009098:	d1c9      	bne.n	800902e <_puts_r+0x2e>
 800909a:	e7df      	b.n	800905c <_puts_r+0x5c>
 800909c:	6823      	ldr	r3, [r4, #0]
 800909e:	250a      	movs	r5, #10
 80090a0:	1c5a      	adds	r2, r3, #1
 80090a2:	6022      	str	r2, [r4, #0]
 80090a4:	701d      	strb	r5, [r3, #0]
 80090a6:	e7db      	b.n	8009060 <_puts_r+0x60>

080090a8 <puts>:
 80090a8:	4b02      	ldr	r3, [pc, #8]	; (80090b4 <puts+0xc>)
 80090aa:	4601      	mov	r1, r0
 80090ac:	6818      	ldr	r0, [r3, #0]
 80090ae:	f7ff bfa7 	b.w	8009000 <_puts_r>
 80090b2:	bf00      	nop
 80090b4:	20000064 	.word	0x20000064

080090b8 <memset>:
 80090b8:	4402      	add	r2, r0
 80090ba:	4603      	mov	r3, r0
 80090bc:	4293      	cmp	r3, r2
 80090be:	d100      	bne.n	80090c2 <memset+0xa>
 80090c0:	4770      	bx	lr
 80090c2:	f803 1b01 	strb.w	r1, [r3], #1
 80090c6:	e7f9      	b.n	80090bc <memset+0x4>

080090c8 <__errno>:
 80090c8:	4b01      	ldr	r3, [pc, #4]	; (80090d0 <__errno+0x8>)
 80090ca:	6818      	ldr	r0, [r3, #0]
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop
 80090d0:	20000064 	.word	0x20000064

080090d4 <__libc_init_array>:
 80090d4:	b570      	push	{r4, r5, r6, lr}
 80090d6:	4d0d      	ldr	r5, [pc, #52]	; (800910c <__libc_init_array+0x38>)
 80090d8:	4c0d      	ldr	r4, [pc, #52]	; (8009110 <__libc_init_array+0x3c>)
 80090da:	1b64      	subs	r4, r4, r5
 80090dc:	10a4      	asrs	r4, r4, #2
 80090de:	2600      	movs	r6, #0
 80090e0:	42a6      	cmp	r6, r4
 80090e2:	d109      	bne.n	80090f8 <__libc_init_array+0x24>
 80090e4:	4d0b      	ldr	r5, [pc, #44]	; (8009114 <__libc_init_array+0x40>)
 80090e6:	4c0c      	ldr	r4, [pc, #48]	; (8009118 <__libc_init_array+0x44>)
 80090e8:	f001 f800 	bl	800a0ec <_init>
 80090ec:	1b64      	subs	r4, r4, r5
 80090ee:	10a4      	asrs	r4, r4, #2
 80090f0:	2600      	movs	r6, #0
 80090f2:	42a6      	cmp	r6, r4
 80090f4:	d105      	bne.n	8009102 <__libc_init_array+0x2e>
 80090f6:	bd70      	pop	{r4, r5, r6, pc}
 80090f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80090fc:	4798      	blx	r3
 80090fe:	3601      	adds	r6, #1
 8009100:	e7ee      	b.n	80090e0 <__libc_init_array+0xc>
 8009102:	f855 3b04 	ldr.w	r3, [r5], #4
 8009106:	4798      	blx	r3
 8009108:	3601      	adds	r6, #1
 800910a:	e7f2      	b.n	80090f2 <__libc_init_array+0x1e>
 800910c:	0800a394 	.word	0x0800a394
 8009110:	0800a394 	.word	0x0800a394
 8009114:	0800a394 	.word	0x0800a394
 8009118:	0800a398 	.word	0x0800a398

0800911c <__retarget_lock_init_recursive>:
 800911c:	4770      	bx	lr

0800911e <__retarget_lock_acquire_recursive>:
 800911e:	4770      	bx	lr

08009120 <__retarget_lock_release_recursive>:
 8009120:	4770      	bx	lr

08009122 <__ssputs_r>:
 8009122:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009126:	688e      	ldr	r6, [r1, #8]
 8009128:	461f      	mov	r7, r3
 800912a:	42be      	cmp	r6, r7
 800912c:	680b      	ldr	r3, [r1, #0]
 800912e:	4682      	mov	sl, r0
 8009130:	460c      	mov	r4, r1
 8009132:	4690      	mov	r8, r2
 8009134:	d82c      	bhi.n	8009190 <__ssputs_r+0x6e>
 8009136:	898a      	ldrh	r2, [r1, #12]
 8009138:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800913c:	d026      	beq.n	800918c <__ssputs_r+0x6a>
 800913e:	6965      	ldr	r5, [r4, #20]
 8009140:	6909      	ldr	r1, [r1, #16]
 8009142:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009146:	eba3 0901 	sub.w	r9, r3, r1
 800914a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800914e:	1c7b      	adds	r3, r7, #1
 8009150:	444b      	add	r3, r9
 8009152:	106d      	asrs	r5, r5, #1
 8009154:	429d      	cmp	r5, r3
 8009156:	bf38      	it	cc
 8009158:	461d      	movcc	r5, r3
 800915a:	0553      	lsls	r3, r2, #21
 800915c:	d527      	bpl.n	80091ae <__ssputs_r+0x8c>
 800915e:	4629      	mov	r1, r5
 8009160:	f000 fa9c 	bl	800969c <_malloc_r>
 8009164:	4606      	mov	r6, r0
 8009166:	b360      	cbz	r0, 80091c2 <__ssputs_r+0xa0>
 8009168:	6921      	ldr	r1, [r4, #16]
 800916a:	464a      	mov	r2, r9
 800916c:	f000 ff5c 	bl	800a028 <memcpy>
 8009170:	89a3      	ldrh	r3, [r4, #12]
 8009172:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800917a:	81a3      	strh	r3, [r4, #12]
 800917c:	6126      	str	r6, [r4, #16]
 800917e:	6165      	str	r5, [r4, #20]
 8009180:	444e      	add	r6, r9
 8009182:	eba5 0509 	sub.w	r5, r5, r9
 8009186:	6026      	str	r6, [r4, #0]
 8009188:	60a5      	str	r5, [r4, #8]
 800918a:	463e      	mov	r6, r7
 800918c:	42be      	cmp	r6, r7
 800918e:	d900      	bls.n	8009192 <__ssputs_r+0x70>
 8009190:	463e      	mov	r6, r7
 8009192:	6820      	ldr	r0, [r4, #0]
 8009194:	4632      	mov	r2, r6
 8009196:	4641      	mov	r1, r8
 8009198:	f000 feb4 	bl	8009f04 <memmove>
 800919c:	68a3      	ldr	r3, [r4, #8]
 800919e:	1b9b      	subs	r3, r3, r6
 80091a0:	60a3      	str	r3, [r4, #8]
 80091a2:	6823      	ldr	r3, [r4, #0]
 80091a4:	4433      	add	r3, r6
 80091a6:	6023      	str	r3, [r4, #0]
 80091a8:	2000      	movs	r0, #0
 80091aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ae:	462a      	mov	r2, r5
 80091b0:	f000 fd81 	bl	8009cb6 <_realloc_r>
 80091b4:	4606      	mov	r6, r0
 80091b6:	2800      	cmp	r0, #0
 80091b8:	d1e0      	bne.n	800917c <__ssputs_r+0x5a>
 80091ba:	6921      	ldr	r1, [r4, #16]
 80091bc:	4650      	mov	r0, sl
 80091be:	f000 ff41 	bl	800a044 <_free_r>
 80091c2:	230c      	movs	r3, #12
 80091c4:	f8ca 3000 	str.w	r3, [sl]
 80091c8:	89a3      	ldrh	r3, [r4, #12]
 80091ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091ce:	81a3      	strh	r3, [r4, #12]
 80091d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091d4:	e7e9      	b.n	80091aa <__ssputs_r+0x88>
	...

080091d8 <_svfiprintf_r>:
 80091d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091dc:	4698      	mov	r8, r3
 80091de:	898b      	ldrh	r3, [r1, #12]
 80091e0:	061b      	lsls	r3, r3, #24
 80091e2:	b09d      	sub	sp, #116	; 0x74
 80091e4:	4607      	mov	r7, r0
 80091e6:	460d      	mov	r5, r1
 80091e8:	4614      	mov	r4, r2
 80091ea:	d50e      	bpl.n	800920a <_svfiprintf_r+0x32>
 80091ec:	690b      	ldr	r3, [r1, #16]
 80091ee:	b963      	cbnz	r3, 800920a <_svfiprintf_r+0x32>
 80091f0:	2140      	movs	r1, #64	; 0x40
 80091f2:	f000 fa53 	bl	800969c <_malloc_r>
 80091f6:	6028      	str	r0, [r5, #0]
 80091f8:	6128      	str	r0, [r5, #16]
 80091fa:	b920      	cbnz	r0, 8009206 <_svfiprintf_r+0x2e>
 80091fc:	230c      	movs	r3, #12
 80091fe:	603b      	str	r3, [r7, #0]
 8009200:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009204:	e0d0      	b.n	80093a8 <_svfiprintf_r+0x1d0>
 8009206:	2340      	movs	r3, #64	; 0x40
 8009208:	616b      	str	r3, [r5, #20]
 800920a:	2300      	movs	r3, #0
 800920c:	9309      	str	r3, [sp, #36]	; 0x24
 800920e:	2320      	movs	r3, #32
 8009210:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009214:	f8cd 800c 	str.w	r8, [sp, #12]
 8009218:	2330      	movs	r3, #48	; 0x30
 800921a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80093c0 <_svfiprintf_r+0x1e8>
 800921e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009222:	f04f 0901 	mov.w	r9, #1
 8009226:	4623      	mov	r3, r4
 8009228:	469a      	mov	sl, r3
 800922a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800922e:	b10a      	cbz	r2, 8009234 <_svfiprintf_r+0x5c>
 8009230:	2a25      	cmp	r2, #37	; 0x25
 8009232:	d1f9      	bne.n	8009228 <_svfiprintf_r+0x50>
 8009234:	ebba 0b04 	subs.w	fp, sl, r4
 8009238:	d00b      	beq.n	8009252 <_svfiprintf_r+0x7a>
 800923a:	465b      	mov	r3, fp
 800923c:	4622      	mov	r2, r4
 800923e:	4629      	mov	r1, r5
 8009240:	4638      	mov	r0, r7
 8009242:	f7ff ff6e 	bl	8009122 <__ssputs_r>
 8009246:	3001      	adds	r0, #1
 8009248:	f000 80a9 	beq.w	800939e <_svfiprintf_r+0x1c6>
 800924c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800924e:	445a      	add	r2, fp
 8009250:	9209      	str	r2, [sp, #36]	; 0x24
 8009252:	f89a 3000 	ldrb.w	r3, [sl]
 8009256:	2b00      	cmp	r3, #0
 8009258:	f000 80a1 	beq.w	800939e <_svfiprintf_r+0x1c6>
 800925c:	2300      	movs	r3, #0
 800925e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009262:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009266:	f10a 0a01 	add.w	sl, sl, #1
 800926a:	9304      	str	r3, [sp, #16]
 800926c:	9307      	str	r3, [sp, #28]
 800926e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009272:	931a      	str	r3, [sp, #104]	; 0x68
 8009274:	4654      	mov	r4, sl
 8009276:	2205      	movs	r2, #5
 8009278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800927c:	4850      	ldr	r0, [pc, #320]	; (80093c0 <_svfiprintf_r+0x1e8>)
 800927e:	f7f6 ffe7 	bl	8000250 <memchr>
 8009282:	9a04      	ldr	r2, [sp, #16]
 8009284:	b9d8      	cbnz	r0, 80092be <_svfiprintf_r+0xe6>
 8009286:	06d0      	lsls	r0, r2, #27
 8009288:	bf44      	itt	mi
 800928a:	2320      	movmi	r3, #32
 800928c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009290:	0711      	lsls	r1, r2, #28
 8009292:	bf44      	itt	mi
 8009294:	232b      	movmi	r3, #43	; 0x2b
 8009296:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800929a:	f89a 3000 	ldrb.w	r3, [sl]
 800929e:	2b2a      	cmp	r3, #42	; 0x2a
 80092a0:	d015      	beq.n	80092ce <_svfiprintf_r+0xf6>
 80092a2:	9a07      	ldr	r2, [sp, #28]
 80092a4:	4654      	mov	r4, sl
 80092a6:	2000      	movs	r0, #0
 80092a8:	f04f 0c0a 	mov.w	ip, #10
 80092ac:	4621      	mov	r1, r4
 80092ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092b2:	3b30      	subs	r3, #48	; 0x30
 80092b4:	2b09      	cmp	r3, #9
 80092b6:	d94d      	bls.n	8009354 <_svfiprintf_r+0x17c>
 80092b8:	b1b0      	cbz	r0, 80092e8 <_svfiprintf_r+0x110>
 80092ba:	9207      	str	r2, [sp, #28]
 80092bc:	e014      	b.n	80092e8 <_svfiprintf_r+0x110>
 80092be:	eba0 0308 	sub.w	r3, r0, r8
 80092c2:	fa09 f303 	lsl.w	r3, r9, r3
 80092c6:	4313      	orrs	r3, r2
 80092c8:	9304      	str	r3, [sp, #16]
 80092ca:	46a2      	mov	sl, r4
 80092cc:	e7d2      	b.n	8009274 <_svfiprintf_r+0x9c>
 80092ce:	9b03      	ldr	r3, [sp, #12]
 80092d0:	1d19      	adds	r1, r3, #4
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	9103      	str	r1, [sp, #12]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	bfbb      	ittet	lt
 80092da:	425b      	neglt	r3, r3
 80092dc:	f042 0202 	orrlt.w	r2, r2, #2
 80092e0:	9307      	strge	r3, [sp, #28]
 80092e2:	9307      	strlt	r3, [sp, #28]
 80092e4:	bfb8      	it	lt
 80092e6:	9204      	strlt	r2, [sp, #16]
 80092e8:	7823      	ldrb	r3, [r4, #0]
 80092ea:	2b2e      	cmp	r3, #46	; 0x2e
 80092ec:	d10c      	bne.n	8009308 <_svfiprintf_r+0x130>
 80092ee:	7863      	ldrb	r3, [r4, #1]
 80092f0:	2b2a      	cmp	r3, #42	; 0x2a
 80092f2:	d134      	bne.n	800935e <_svfiprintf_r+0x186>
 80092f4:	9b03      	ldr	r3, [sp, #12]
 80092f6:	1d1a      	adds	r2, r3, #4
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	9203      	str	r2, [sp, #12]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	bfb8      	it	lt
 8009300:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009304:	3402      	adds	r4, #2
 8009306:	9305      	str	r3, [sp, #20]
 8009308:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80093d0 <_svfiprintf_r+0x1f8>
 800930c:	7821      	ldrb	r1, [r4, #0]
 800930e:	2203      	movs	r2, #3
 8009310:	4650      	mov	r0, sl
 8009312:	f7f6 ff9d 	bl	8000250 <memchr>
 8009316:	b138      	cbz	r0, 8009328 <_svfiprintf_r+0x150>
 8009318:	9b04      	ldr	r3, [sp, #16]
 800931a:	eba0 000a 	sub.w	r0, r0, sl
 800931e:	2240      	movs	r2, #64	; 0x40
 8009320:	4082      	lsls	r2, r0
 8009322:	4313      	orrs	r3, r2
 8009324:	3401      	adds	r4, #1
 8009326:	9304      	str	r3, [sp, #16]
 8009328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800932c:	4825      	ldr	r0, [pc, #148]	; (80093c4 <_svfiprintf_r+0x1ec>)
 800932e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009332:	2206      	movs	r2, #6
 8009334:	f7f6 ff8c 	bl	8000250 <memchr>
 8009338:	2800      	cmp	r0, #0
 800933a:	d038      	beq.n	80093ae <_svfiprintf_r+0x1d6>
 800933c:	4b22      	ldr	r3, [pc, #136]	; (80093c8 <_svfiprintf_r+0x1f0>)
 800933e:	bb1b      	cbnz	r3, 8009388 <_svfiprintf_r+0x1b0>
 8009340:	9b03      	ldr	r3, [sp, #12]
 8009342:	3307      	adds	r3, #7
 8009344:	f023 0307 	bic.w	r3, r3, #7
 8009348:	3308      	adds	r3, #8
 800934a:	9303      	str	r3, [sp, #12]
 800934c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800934e:	4433      	add	r3, r6
 8009350:	9309      	str	r3, [sp, #36]	; 0x24
 8009352:	e768      	b.n	8009226 <_svfiprintf_r+0x4e>
 8009354:	fb0c 3202 	mla	r2, ip, r2, r3
 8009358:	460c      	mov	r4, r1
 800935a:	2001      	movs	r0, #1
 800935c:	e7a6      	b.n	80092ac <_svfiprintf_r+0xd4>
 800935e:	2300      	movs	r3, #0
 8009360:	3401      	adds	r4, #1
 8009362:	9305      	str	r3, [sp, #20]
 8009364:	4619      	mov	r1, r3
 8009366:	f04f 0c0a 	mov.w	ip, #10
 800936a:	4620      	mov	r0, r4
 800936c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009370:	3a30      	subs	r2, #48	; 0x30
 8009372:	2a09      	cmp	r2, #9
 8009374:	d903      	bls.n	800937e <_svfiprintf_r+0x1a6>
 8009376:	2b00      	cmp	r3, #0
 8009378:	d0c6      	beq.n	8009308 <_svfiprintf_r+0x130>
 800937a:	9105      	str	r1, [sp, #20]
 800937c:	e7c4      	b.n	8009308 <_svfiprintf_r+0x130>
 800937e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009382:	4604      	mov	r4, r0
 8009384:	2301      	movs	r3, #1
 8009386:	e7f0      	b.n	800936a <_svfiprintf_r+0x192>
 8009388:	ab03      	add	r3, sp, #12
 800938a:	9300      	str	r3, [sp, #0]
 800938c:	462a      	mov	r2, r5
 800938e:	4b0f      	ldr	r3, [pc, #60]	; (80093cc <_svfiprintf_r+0x1f4>)
 8009390:	a904      	add	r1, sp, #16
 8009392:	4638      	mov	r0, r7
 8009394:	f3af 8000 	nop.w
 8009398:	1c42      	adds	r2, r0, #1
 800939a:	4606      	mov	r6, r0
 800939c:	d1d6      	bne.n	800934c <_svfiprintf_r+0x174>
 800939e:	89ab      	ldrh	r3, [r5, #12]
 80093a0:	065b      	lsls	r3, r3, #25
 80093a2:	f53f af2d 	bmi.w	8009200 <_svfiprintf_r+0x28>
 80093a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093a8:	b01d      	add	sp, #116	; 0x74
 80093aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ae:	ab03      	add	r3, sp, #12
 80093b0:	9300      	str	r3, [sp, #0]
 80093b2:	462a      	mov	r2, r5
 80093b4:	4b05      	ldr	r3, [pc, #20]	; (80093cc <_svfiprintf_r+0x1f4>)
 80093b6:	a904      	add	r1, sp, #16
 80093b8:	4638      	mov	r0, r7
 80093ba:	f000 fa5d 	bl	8009878 <_printf_i>
 80093be:	e7eb      	b.n	8009398 <_svfiprintf_r+0x1c0>
 80093c0:	0800a358 	.word	0x0800a358
 80093c4:	0800a362 	.word	0x0800a362
 80093c8:	00000000 	.word	0x00000000
 80093cc:	08009123 	.word	0x08009123
 80093d0:	0800a35e 	.word	0x0800a35e

080093d4 <__sfputc_r>:
 80093d4:	6893      	ldr	r3, [r2, #8]
 80093d6:	3b01      	subs	r3, #1
 80093d8:	2b00      	cmp	r3, #0
 80093da:	b410      	push	{r4}
 80093dc:	6093      	str	r3, [r2, #8]
 80093de:	da08      	bge.n	80093f2 <__sfputc_r+0x1e>
 80093e0:	6994      	ldr	r4, [r2, #24]
 80093e2:	42a3      	cmp	r3, r4
 80093e4:	db01      	blt.n	80093ea <__sfputc_r+0x16>
 80093e6:	290a      	cmp	r1, #10
 80093e8:	d103      	bne.n	80093f2 <__sfputc_r+0x1e>
 80093ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093ee:	f000 bc91 	b.w	8009d14 <__swbuf_r>
 80093f2:	6813      	ldr	r3, [r2, #0]
 80093f4:	1c58      	adds	r0, r3, #1
 80093f6:	6010      	str	r0, [r2, #0]
 80093f8:	7019      	strb	r1, [r3, #0]
 80093fa:	4608      	mov	r0, r1
 80093fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009400:	4770      	bx	lr

08009402 <__sfputs_r>:
 8009402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009404:	4606      	mov	r6, r0
 8009406:	460f      	mov	r7, r1
 8009408:	4614      	mov	r4, r2
 800940a:	18d5      	adds	r5, r2, r3
 800940c:	42ac      	cmp	r4, r5
 800940e:	d101      	bne.n	8009414 <__sfputs_r+0x12>
 8009410:	2000      	movs	r0, #0
 8009412:	e007      	b.n	8009424 <__sfputs_r+0x22>
 8009414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009418:	463a      	mov	r2, r7
 800941a:	4630      	mov	r0, r6
 800941c:	f7ff ffda 	bl	80093d4 <__sfputc_r>
 8009420:	1c43      	adds	r3, r0, #1
 8009422:	d1f3      	bne.n	800940c <__sfputs_r+0xa>
 8009424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009428 <_vfiprintf_r>:
 8009428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800942c:	460d      	mov	r5, r1
 800942e:	b09d      	sub	sp, #116	; 0x74
 8009430:	4614      	mov	r4, r2
 8009432:	4698      	mov	r8, r3
 8009434:	4606      	mov	r6, r0
 8009436:	b118      	cbz	r0, 8009440 <_vfiprintf_r+0x18>
 8009438:	6a03      	ldr	r3, [r0, #32]
 800943a:	b90b      	cbnz	r3, 8009440 <_vfiprintf_r+0x18>
 800943c:	f7ff fd98 	bl	8008f70 <__sinit>
 8009440:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009442:	07d9      	lsls	r1, r3, #31
 8009444:	d405      	bmi.n	8009452 <_vfiprintf_r+0x2a>
 8009446:	89ab      	ldrh	r3, [r5, #12]
 8009448:	059a      	lsls	r2, r3, #22
 800944a:	d402      	bmi.n	8009452 <_vfiprintf_r+0x2a>
 800944c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800944e:	f7ff fe66 	bl	800911e <__retarget_lock_acquire_recursive>
 8009452:	89ab      	ldrh	r3, [r5, #12]
 8009454:	071b      	lsls	r3, r3, #28
 8009456:	d501      	bpl.n	800945c <_vfiprintf_r+0x34>
 8009458:	692b      	ldr	r3, [r5, #16]
 800945a:	b99b      	cbnz	r3, 8009484 <_vfiprintf_r+0x5c>
 800945c:	4629      	mov	r1, r5
 800945e:	4630      	mov	r0, r6
 8009460:	f000 fc96 	bl	8009d90 <__swsetup_r>
 8009464:	b170      	cbz	r0, 8009484 <_vfiprintf_r+0x5c>
 8009466:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009468:	07dc      	lsls	r4, r3, #31
 800946a:	d504      	bpl.n	8009476 <_vfiprintf_r+0x4e>
 800946c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009470:	b01d      	add	sp, #116	; 0x74
 8009472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009476:	89ab      	ldrh	r3, [r5, #12]
 8009478:	0598      	lsls	r0, r3, #22
 800947a:	d4f7      	bmi.n	800946c <_vfiprintf_r+0x44>
 800947c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800947e:	f7ff fe4f 	bl	8009120 <__retarget_lock_release_recursive>
 8009482:	e7f3      	b.n	800946c <_vfiprintf_r+0x44>
 8009484:	2300      	movs	r3, #0
 8009486:	9309      	str	r3, [sp, #36]	; 0x24
 8009488:	2320      	movs	r3, #32
 800948a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800948e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009492:	2330      	movs	r3, #48	; 0x30
 8009494:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009648 <_vfiprintf_r+0x220>
 8009498:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800949c:	f04f 0901 	mov.w	r9, #1
 80094a0:	4623      	mov	r3, r4
 80094a2:	469a      	mov	sl, r3
 80094a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094a8:	b10a      	cbz	r2, 80094ae <_vfiprintf_r+0x86>
 80094aa:	2a25      	cmp	r2, #37	; 0x25
 80094ac:	d1f9      	bne.n	80094a2 <_vfiprintf_r+0x7a>
 80094ae:	ebba 0b04 	subs.w	fp, sl, r4
 80094b2:	d00b      	beq.n	80094cc <_vfiprintf_r+0xa4>
 80094b4:	465b      	mov	r3, fp
 80094b6:	4622      	mov	r2, r4
 80094b8:	4629      	mov	r1, r5
 80094ba:	4630      	mov	r0, r6
 80094bc:	f7ff ffa1 	bl	8009402 <__sfputs_r>
 80094c0:	3001      	adds	r0, #1
 80094c2:	f000 80a9 	beq.w	8009618 <_vfiprintf_r+0x1f0>
 80094c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094c8:	445a      	add	r2, fp
 80094ca:	9209      	str	r2, [sp, #36]	; 0x24
 80094cc:	f89a 3000 	ldrb.w	r3, [sl]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	f000 80a1 	beq.w	8009618 <_vfiprintf_r+0x1f0>
 80094d6:	2300      	movs	r3, #0
 80094d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80094dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094e0:	f10a 0a01 	add.w	sl, sl, #1
 80094e4:	9304      	str	r3, [sp, #16]
 80094e6:	9307      	str	r3, [sp, #28]
 80094e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094ec:	931a      	str	r3, [sp, #104]	; 0x68
 80094ee:	4654      	mov	r4, sl
 80094f0:	2205      	movs	r2, #5
 80094f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094f6:	4854      	ldr	r0, [pc, #336]	; (8009648 <_vfiprintf_r+0x220>)
 80094f8:	f7f6 feaa 	bl	8000250 <memchr>
 80094fc:	9a04      	ldr	r2, [sp, #16]
 80094fe:	b9d8      	cbnz	r0, 8009538 <_vfiprintf_r+0x110>
 8009500:	06d1      	lsls	r1, r2, #27
 8009502:	bf44      	itt	mi
 8009504:	2320      	movmi	r3, #32
 8009506:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800950a:	0713      	lsls	r3, r2, #28
 800950c:	bf44      	itt	mi
 800950e:	232b      	movmi	r3, #43	; 0x2b
 8009510:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009514:	f89a 3000 	ldrb.w	r3, [sl]
 8009518:	2b2a      	cmp	r3, #42	; 0x2a
 800951a:	d015      	beq.n	8009548 <_vfiprintf_r+0x120>
 800951c:	9a07      	ldr	r2, [sp, #28]
 800951e:	4654      	mov	r4, sl
 8009520:	2000      	movs	r0, #0
 8009522:	f04f 0c0a 	mov.w	ip, #10
 8009526:	4621      	mov	r1, r4
 8009528:	f811 3b01 	ldrb.w	r3, [r1], #1
 800952c:	3b30      	subs	r3, #48	; 0x30
 800952e:	2b09      	cmp	r3, #9
 8009530:	d94d      	bls.n	80095ce <_vfiprintf_r+0x1a6>
 8009532:	b1b0      	cbz	r0, 8009562 <_vfiprintf_r+0x13a>
 8009534:	9207      	str	r2, [sp, #28]
 8009536:	e014      	b.n	8009562 <_vfiprintf_r+0x13a>
 8009538:	eba0 0308 	sub.w	r3, r0, r8
 800953c:	fa09 f303 	lsl.w	r3, r9, r3
 8009540:	4313      	orrs	r3, r2
 8009542:	9304      	str	r3, [sp, #16]
 8009544:	46a2      	mov	sl, r4
 8009546:	e7d2      	b.n	80094ee <_vfiprintf_r+0xc6>
 8009548:	9b03      	ldr	r3, [sp, #12]
 800954a:	1d19      	adds	r1, r3, #4
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	9103      	str	r1, [sp, #12]
 8009550:	2b00      	cmp	r3, #0
 8009552:	bfbb      	ittet	lt
 8009554:	425b      	neglt	r3, r3
 8009556:	f042 0202 	orrlt.w	r2, r2, #2
 800955a:	9307      	strge	r3, [sp, #28]
 800955c:	9307      	strlt	r3, [sp, #28]
 800955e:	bfb8      	it	lt
 8009560:	9204      	strlt	r2, [sp, #16]
 8009562:	7823      	ldrb	r3, [r4, #0]
 8009564:	2b2e      	cmp	r3, #46	; 0x2e
 8009566:	d10c      	bne.n	8009582 <_vfiprintf_r+0x15a>
 8009568:	7863      	ldrb	r3, [r4, #1]
 800956a:	2b2a      	cmp	r3, #42	; 0x2a
 800956c:	d134      	bne.n	80095d8 <_vfiprintf_r+0x1b0>
 800956e:	9b03      	ldr	r3, [sp, #12]
 8009570:	1d1a      	adds	r2, r3, #4
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	9203      	str	r2, [sp, #12]
 8009576:	2b00      	cmp	r3, #0
 8009578:	bfb8      	it	lt
 800957a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800957e:	3402      	adds	r4, #2
 8009580:	9305      	str	r3, [sp, #20]
 8009582:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009658 <_vfiprintf_r+0x230>
 8009586:	7821      	ldrb	r1, [r4, #0]
 8009588:	2203      	movs	r2, #3
 800958a:	4650      	mov	r0, sl
 800958c:	f7f6 fe60 	bl	8000250 <memchr>
 8009590:	b138      	cbz	r0, 80095a2 <_vfiprintf_r+0x17a>
 8009592:	9b04      	ldr	r3, [sp, #16]
 8009594:	eba0 000a 	sub.w	r0, r0, sl
 8009598:	2240      	movs	r2, #64	; 0x40
 800959a:	4082      	lsls	r2, r0
 800959c:	4313      	orrs	r3, r2
 800959e:	3401      	adds	r4, #1
 80095a0:	9304      	str	r3, [sp, #16]
 80095a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095a6:	4829      	ldr	r0, [pc, #164]	; (800964c <_vfiprintf_r+0x224>)
 80095a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095ac:	2206      	movs	r2, #6
 80095ae:	f7f6 fe4f 	bl	8000250 <memchr>
 80095b2:	2800      	cmp	r0, #0
 80095b4:	d03f      	beq.n	8009636 <_vfiprintf_r+0x20e>
 80095b6:	4b26      	ldr	r3, [pc, #152]	; (8009650 <_vfiprintf_r+0x228>)
 80095b8:	bb1b      	cbnz	r3, 8009602 <_vfiprintf_r+0x1da>
 80095ba:	9b03      	ldr	r3, [sp, #12]
 80095bc:	3307      	adds	r3, #7
 80095be:	f023 0307 	bic.w	r3, r3, #7
 80095c2:	3308      	adds	r3, #8
 80095c4:	9303      	str	r3, [sp, #12]
 80095c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095c8:	443b      	add	r3, r7
 80095ca:	9309      	str	r3, [sp, #36]	; 0x24
 80095cc:	e768      	b.n	80094a0 <_vfiprintf_r+0x78>
 80095ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80095d2:	460c      	mov	r4, r1
 80095d4:	2001      	movs	r0, #1
 80095d6:	e7a6      	b.n	8009526 <_vfiprintf_r+0xfe>
 80095d8:	2300      	movs	r3, #0
 80095da:	3401      	adds	r4, #1
 80095dc:	9305      	str	r3, [sp, #20]
 80095de:	4619      	mov	r1, r3
 80095e0:	f04f 0c0a 	mov.w	ip, #10
 80095e4:	4620      	mov	r0, r4
 80095e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095ea:	3a30      	subs	r2, #48	; 0x30
 80095ec:	2a09      	cmp	r2, #9
 80095ee:	d903      	bls.n	80095f8 <_vfiprintf_r+0x1d0>
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d0c6      	beq.n	8009582 <_vfiprintf_r+0x15a>
 80095f4:	9105      	str	r1, [sp, #20]
 80095f6:	e7c4      	b.n	8009582 <_vfiprintf_r+0x15a>
 80095f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80095fc:	4604      	mov	r4, r0
 80095fe:	2301      	movs	r3, #1
 8009600:	e7f0      	b.n	80095e4 <_vfiprintf_r+0x1bc>
 8009602:	ab03      	add	r3, sp, #12
 8009604:	9300      	str	r3, [sp, #0]
 8009606:	462a      	mov	r2, r5
 8009608:	4b12      	ldr	r3, [pc, #72]	; (8009654 <_vfiprintf_r+0x22c>)
 800960a:	a904      	add	r1, sp, #16
 800960c:	4630      	mov	r0, r6
 800960e:	f3af 8000 	nop.w
 8009612:	4607      	mov	r7, r0
 8009614:	1c78      	adds	r0, r7, #1
 8009616:	d1d6      	bne.n	80095c6 <_vfiprintf_r+0x19e>
 8009618:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800961a:	07d9      	lsls	r1, r3, #31
 800961c:	d405      	bmi.n	800962a <_vfiprintf_r+0x202>
 800961e:	89ab      	ldrh	r3, [r5, #12]
 8009620:	059a      	lsls	r2, r3, #22
 8009622:	d402      	bmi.n	800962a <_vfiprintf_r+0x202>
 8009624:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009626:	f7ff fd7b 	bl	8009120 <__retarget_lock_release_recursive>
 800962a:	89ab      	ldrh	r3, [r5, #12]
 800962c:	065b      	lsls	r3, r3, #25
 800962e:	f53f af1d 	bmi.w	800946c <_vfiprintf_r+0x44>
 8009632:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009634:	e71c      	b.n	8009470 <_vfiprintf_r+0x48>
 8009636:	ab03      	add	r3, sp, #12
 8009638:	9300      	str	r3, [sp, #0]
 800963a:	462a      	mov	r2, r5
 800963c:	4b05      	ldr	r3, [pc, #20]	; (8009654 <_vfiprintf_r+0x22c>)
 800963e:	a904      	add	r1, sp, #16
 8009640:	4630      	mov	r0, r6
 8009642:	f000 f919 	bl	8009878 <_printf_i>
 8009646:	e7e4      	b.n	8009612 <_vfiprintf_r+0x1ea>
 8009648:	0800a358 	.word	0x0800a358
 800964c:	0800a362 	.word	0x0800a362
 8009650:	00000000 	.word	0x00000000
 8009654:	08009403 	.word	0x08009403
 8009658:	0800a35e 	.word	0x0800a35e

0800965c <sbrk_aligned>:
 800965c:	b570      	push	{r4, r5, r6, lr}
 800965e:	4e0e      	ldr	r6, [pc, #56]	; (8009698 <sbrk_aligned+0x3c>)
 8009660:	460c      	mov	r4, r1
 8009662:	6831      	ldr	r1, [r6, #0]
 8009664:	4605      	mov	r5, r0
 8009666:	b911      	cbnz	r1, 800966e <sbrk_aligned+0x12>
 8009668:	f000 fcbc 	bl	8009fe4 <_sbrk_r>
 800966c:	6030      	str	r0, [r6, #0]
 800966e:	4621      	mov	r1, r4
 8009670:	4628      	mov	r0, r5
 8009672:	f000 fcb7 	bl	8009fe4 <_sbrk_r>
 8009676:	1c43      	adds	r3, r0, #1
 8009678:	d00a      	beq.n	8009690 <sbrk_aligned+0x34>
 800967a:	1cc4      	adds	r4, r0, #3
 800967c:	f024 0403 	bic.w	r4, r4, #3
 8009680:	42a0      	cmp	r0, r4
 8009682:	d007      	beq.n	8009694 <sbrk_aligned+0x38>
 8009684:	1a21      	subs	r1, r4, r0
 8009686:	4628      	mov	r0, r5
 8009688:	f000 fcac 	bl	8009fe4 <_sbrk_r>
 800968c:	3001      	adds	r0, #1
 800968e:	d101      	bne.n	8009694 <sbrk_aligned+0x38>
 8009690:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009694:	4620      	mov	r0, r4
 8009696:	bd70      	pop	{r4, r5, r6, pc}
 8009698:	20002928 	.word	0x20002928

0800969c <_malloc_r>:
 800969c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096a0:	1ccd      	adds	r5, r1, #3
 80096a2:	f025 0503 	bic.w	r5, r5, #3
 80096a6:	3508      	adds	r5, #8
 80096a8:	2d0c      	cmp	r5, #12
 80096aa:	bf38      	it	cc
 80096ac:	250c      	movcc	r5, #12
 80096ae:	2d00      	cmp	r5, #0
 80096b0:	4607      	mov	r7, r0
 80096b2:	db01      	blt.n	80096b8 <_malloc_r+0x1c>
 80096b4:	42a9      	cmp	r1, r5
 80096b6:	d905      	bls.n	80096c4 <_malloc_r+0x28>
 80096b8:	230c      	movs	r3, #12
 80096ba:	603b      	str	r3, [r7, #0]
 80096bc:	2600      	movs	r6, #0
 80096be:	4630      	mov	r0, r6
 80096c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009798 <_malloc_r+0xfc>
 80096c8:	f000 faa6 	bl	8009c18 <__malloc_lock>
 80096cc:	f8d8 3000 	ldr.w	r3, [r8]
 80096d0:	461c      	mov	r4, r3
 80096d2:	bb5c      	cbnz	r4, 800972c <_malloc_r+0x90>
 80096d4:	4629      	mov	r1, r5
 80096d6:	4638      	mov	r0, r7
 80096d8:	f7ff ffc0 	bl	800965c <sbrk_aligned>
 80096dc:	1c43      	adds	r3, r0, #1
 80096de:	4604      	mov	r4, r0
 80096e0:	d155      	bne.n	800978e <_malloc_r+0xf2>
 80096e2:	f8d8 4000 	ldr.w	r4, [r8]
 80096e6:	4626      	mov	r6, r4
 80096e8:	2e00      	cmp	r6, #0
 80096ea:	d145      	bne.n	8009778 <_malloc_r+0xdc>
 80096ec:	2c00      	cmp	r4, #0
 80096ee:	d048      	beq.n	8009782 <_malloc_r+0xe6>
 80096f0:	6823      	ldr	r3, [r4, #0]
 80096f2:	4631      	mov	r1, r6
 80096f4:	4638      	mov	r0, r7
 80096f6:	eb04 0903 	add.w	r9, r4, r3
 80096fa:	f000 fc73 	bl	8009fe4 <_sbrk_r>
 80096fe:	4581      	cmp	r9, r0
 8009700:	d13f      	bne.n	8009782 <_malloc_r+0xe6>
 8009702:	6821      	ldr	r1, [r4, #0]
 8009704:	1a6d      	subs	r5, r5, r1
 8009706:	4629      	mov	r1, r5
 8009708:	4638      	mov	r0, r7
 800970a:	f7ff ffa7 	bl	800965c <sbrk_aligned>
 800970e:	3001      	adds	r0, #1
 8009710:	d037      	beq.n	8009782 <_malloc_r+0xe6>
 8009712:	6823      	ldr	r3, [r4, #0]
 8009714:	442b      	add	r3, r5
 8009716:	6023      	str	r3, [r4, #0]
 8009718:	f8d8 3000 	ldr.w	r3, [r8]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d038      	beq.n	8009792 <_malloc_r+0xf6>
 8009720:	685a      	ldr	r2, [r3, #4]
 8009722:	42a2      	cmp	r2, r4
 8009724:	d12b      	bne.n	800977e <_malloc_r+0xe2>
 8009726:	2200      	movs	r2, #0
 8009728:	605a      	str	r2, [r3, #4]
 800972a:	e00f      	b.n	800974c <_malloc_r+0xb0>
 800972c:	6822      	ldr	r2, [r4, #0]
 800972e:	1b52      	subs	r2, r2, r5
 8009730:	d41f      	bmi.n	8009772 <_malloc_r+0xd6>
 8009732:	2a0b      	cmp	r2, #11
 8009734:	d917      	bls.n	8009766 <_malloc_r+0xca>
 8009736:	1961      	adds	r1, r4, r5
 8009738:	42a3      	cmp	r3, r4
 800973a:	6025      	str	r5, [r4, #0]
 800973c:	bf18      	it	ne
 800973e:	6059      	strne	r1, [r3, #4]
 8009740:	6863      	ldr	r3, [r4, #4]
 8009742:	bf08      	it	eq
 8009744:	f8c8 1000 	streq.w	r1, [r8]
 8009748:	5162      	str	r2, [r4, r5]
 800974a:	604b      	str	r3, [r1, #4]
 800974c:	4638      	mov	r0, r7
 800974e:	f104 060b 	add.w	r6, r4, #11
 8009752:	f000 fa67 	bl	8009c24 <__malloc_unlock>
 8009756:	f026 0607 	bic.w	r6, r6, #7
 800975a:	1d23      	adds	r3, r4, #4
 800975c:	1af2      	subs	r2, r6, r3
 800975e:	d0ae      	beq.n	80096be <_malloc_r+0x22>
 8009760:	1b9b      	subs	r3, r3, r6
 8009762:	50a3      	str	r3, [r4, r2]
 8009764:	e7ab      	b.n	80096be <_malloc_r+0x22>
 8009766:	42a3      	cmp	r3, r4
 8009768:	6862      	ldr	r2, [r4, #4]
 800976a:	d1dd      	bne.n	8009728 <_malloc_r+0x8c>
 800976c:	f8c8 2000 	str.w	r2, [r8]
 8009770:	e7ec      	b.n	800974c <_malloc_r+0xb0>
 8009772:	4623      	mov	r3, r4
 8009774:	6864      	ldr	r4, [r4, #4]
 8009776:	e7ac      	b.n	80096d2 <_malloc_r+0x36>
 8009778:	4634      	mov	r4, r6
 800977a:	6876      	ldr	r6, [r6, #4]
 800977c:	e7b4      	b.n	80096e8 <_malloc_r+0x4c>
 800977e:	4613      	mov	r3, r2
 8009780:	e7cc      	b.n	800971c <_malloc_r+0x80>
 8009782:	230c      	movs	r3, #12
 8009784:	603b      	str	r3, [r7, #0]
 8009786:	4638      	mov	r0, r7
 8009788:	f000 fa4c 	bl	8009c24 <__malloc_unlock>
 800978c:	e797      	b.n	80096be <_malloc_r+0x22>
 800978e:	6025      	str	r5, [r4, #0]
 8009790:	e7dc      	b.n	800974c <_malloc_r+0xb0>
 8009792:	605b      	str	r3, [r3, #4]
 8009794:	deff      	udf	#255	; 0xff
 8009796:	bf00      	nop
 8009798:	20002924 	.word	0x20002924

0800979c <_printf_common>:
 800979c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097a0:	4616      	mov	r6, r2
 80097a2:	4699      	mov	r9, r3
 80097a4:	688a      	ldr	r2, [r1, #8]
 80097a6:	690b      	ldr	r3, [r1, #16]
 80097a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097ac:	4293      	cmp	r3, r2
 80097ae:	bfb8      	it	lt
 80097b0:	4613      	movlt	r3, r2
 80097b2:	6033      	str	r3, [r6, #0]
 80097b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097b8:	4607      	mov	r7, r0
 80097ba:	460c      	mov	r4, r1
 80097bc:	b10a      	cbz	r2, 80097c2 <_printf_common+0x26>
 80097be:	3301      	adds	r3, #1
 80097c0:	6033      	str	r3, [r6, #0]
 80097c2:	6823      	ldr	r3, [r4, #0]
 80097c4:	0699      	lsls	r1, r3, #26
 80097c6:	bf42      	ittt	mi
 80097c8:	6833      	ldrmi	r3, [r6, #0]
 80097ca:	3302      	addmi	r3, #2
 80097cc:	6033      	strmi	r3, [r6, #0]
 80097ce:	6825      	ldr	r5, [r4, #0]
 80097d0:	f015 0506 	ands.w	r5, r5, #6
 80097d4:	d106      	bne.n	80097e4 <_printf_common+0x48>
 80097d6:	f104 0a19 	add.w	sl, r4, #25
 80097da:	68e3      	ldr	r3, [r4, #12]
 80097dc:	6832      	ldr	r2, [r6, #0]
 80097de:	1a9b      	subs	r3, r3, r2
 80097e0:	42ab      	cmp	r3, r5
 80097e2:	dc26      	bgt.n	8009832 <_printf_common+0x96>
 80097e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80097e8:	1e13      	subs	r3, r2, #0
 80097ea:	6822      	ldr	r2, [r4, #0]
 80097ec:	bf18      	it	ne
 80097ee:	2301      	movne	r3, #1
 80097f0:	0692      	lsls	r2, r2, #26
 80097f2:	d42b      	bmi.n	800984c <_printf_common+0xb0>
 80097f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80097f8:	4649      	mov	r1, r9
 80097fa:	4638      	mov	r0, r7
 80097fc:	47c0      	blx	r8
 80097fe:	3001      	adds	r0, #1
 8009800:	d01e      	beq.n	8009840 <_printf_common+0xa4>
 8009802:	6823      	ldr	r3, [r4, #0]
 8009804:	6922      	ldr	r2, [r4, #16]
 8009806:	f003 0306 	and.w	r3, r3, #6
 800980a:	2b04      	cmp	r3, #4
 800980c:	bf02      	ittt	eq
 800980e:	68e5      	ldreq	r5, [r4, #12]
 8009810:	6833      	ldreq	r3, [r6, #0]
 8009812:	1aed      	subeq	r5, r5, r3
 8009814:	68a3      	ldr	r3, [r4, #8]
 8009816:	bf0c      	ite	eq
 8009818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800981c:	2500      	movne	r5, #0
 800981e:	4293      	cmp	r3, r2
 8009820:	bfc4      	itt	gt
 8009822:	1a9b      	subgt	r3, r3, r2
 8009824:	18ed      	addgt	r5, r5, r3
 8009826:	2600      	movs	r6, #0
 8009828:	341a      	adds	r4, #26
 800982a:	42b5      	cmp	r5, r6
 800982c:	d11a      	bne.n	8009864 <_printf_common+0xc8>
 800982e:	2000      	movs	r0, #0
 8009830:	e008      	b.n	8009844 <_printf_common+0xa8>
 8009832:	2301      	movs	r3, #1
 8009834:	4652      	mov	r2, sl
 8009836:	4649      	mov	r1, r9
 8009838:	4638      	mov	r0, r7
 800983a:	47c0      	blx	r8
 800983c:	3001      	adds	r0, #1
 800983e:	d103      	bne.n	8009848 <_printf_common+0xac>
 8009840:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009848:	3501      	adds	r5, #1
 800984a:	e7c6      	b.n	80097da <_printf_common+0x3e>
 800984c:	18e1      	adds	r1, r4, r3
 800984e:	1c5a      	adds	r2, r3, #1
 8009850:	2030      	movs	r0, #48	; 0x30
 8009852:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009856:	4422      	add	r2, r4
 8009858:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800985c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009860:	3302      	adds	r3, #2
 8009862:	e7c7      	b.n	80097f4 <_printf_common+0x58>
 8009864:	2301      	movs	r3, #1
 8009866:	4622      	mov	r2, r4
 8009868:	4649      	mov	r1, r9
 800986a:	4638      	mov	r0, r7
 800986c:	47c0      	blx	r8
 800986e:	3001      	adds	r0, #1
 8009870:	d0e6      	beq.n	8009840 <_printf_common+0xa4>
 8009872:	3601      	adds	r6, #1
 8009874:	e7d9      	b.n	800982a <_printf_common+0x8e>
	...

08009878 <_printf_i>:
 8009878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800987c:	7e0f      	ldrb	r7, [r1, #24]
 800987e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009880:	2f78      	cmp	r7, #120	; 0x78
 8009882:	4691      	mov	r9, r2
 8009884:	4680      	mov	r8, r0
 8009886:	460c      	mov	r4, r1
 8009888:	469a      	mov	sl, r3
 800988a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800988e:	d807      	bhi.n	80098a0 <_printf_i+0x28>
 8009890:	2f62      	cmp	r7, #98	; 0x62
 8009892:	d80a      	bhi.n	80098aa <_printf_i+0x32>
 8009894:	2f00      	cmp	r7, #0
 8009896:	f000 80d4 	beq.w	8009a42 <_printf_i+0x1ca>
 800989a:	2f58      	cmp	r7, #88	; 0x58
 800989c:	f000 80c0 	beq.w	8009a20 <_printf_i+0x1a8>
 80098a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80098a8:	e03a      	b.n	8009920 <_printf_i+0xa8>
 80098aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80098ae:	2b15      	cmp	r3, #21
 80098b0:	d8f6      	bhi.n	80098a0 <_printf_i+0x28>
 80098b2:	a101      	add	r1, pc, #4	; (adr r1, 80098b8 <_printf_i+0x40>)
 80098b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80098b8:	08009911 	.word	0x08009911
 80098bc:	08009925 	.word	0x08009925
 80098c0:	080098a1 	.word	0x080098a1
 80098c4:	080098a1 	.word	0x080098a1
 80098c8:	080098a1 	.word	0x080098a1
 80098cc:	080098a1 	.word	0x080098a1
 80098d0:	08009925 	.word	0x08009925
 80098d4:	080098a1 	.word	0x080098a1
 80098d8:	080098a1 	.word	0x080098a1
 80098dc:	080098a1 	.word	0x080098a1
 80098e0:	080098a1 	.word	0x080098a1
 80098e4:	08009a29 	.word	0x08009a29
 80098e8:	08009951 	.word	0x08009951
 80098ec:	080099e3 	.word	0x080099e3
 80098f0:	080098a1 	.word	0x080098a1
 80098f4:	080098a1 	.word	0x080098a1
 80098f8:	08009a4b 	.word	0x08009a4b
 80098fc:	080098a1 	.word	0x080098a1
 8009900:	08009951 	.word	0x08009951
 8009904:	080098a1 	.word	0x080098a1
 8009908:	080098a1 	.word	0x080098a1
 800990c:	080099eb 	.word	0x080099eb
 8009910:	682b      	ldr	r3, [r5, #0]
 8009912:	1d1a      	adds	r2, r3, #4
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	602a      	str	r2, [r5, #0]
 8009918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800991c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009920:	2301      	movs	r3, #1
 8009922:	e09f      	b.n	8009a64 <_printf_i+0x1ec>
 8009924:	6820      	ldr	r0, [r4, #0]
 8009926:	682b      	ldr	r3, [r5, #0]
 8009928:	0607      	lsls	r7, r0, #24
 800992a:	f103 0104 	add.w	r1, r3, #4
 800992e:	6029      	str	r1, [r5, #0]
 8009930:	d501      	bpl.n	8009936 <_printf_i+0xbe>
 8009932:	681e      	ldr	r6, [r3, #0]
 8009934:	e003      	b.n	800993e <_printf_i+0xc6>
 8009936:	0646      	lsls	r6, r0, #25
 8009938:	d5fb      	bpl.n	8009932 <_printf_i+0xba>
 800993a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800993e:	2e00      	cmp	r6, #0
 8009940:	da03      	bge.n	800994a <_printf_i+0xd2>
 8009942:	232d      	movs	r3, #45	; 0x2d
 8009944:	4276      	negs	r6, r6
 8009946:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800994a:	485a      	ldr	r0, [pc, #360]	; (8009ab4 <_printf_i+0x23c>)
 800994c:	230a      	movs	r3, #10
 800994e:	e012      	b.n	8009976 <_printf_i+0xfe>
 8009950:	682b      	ldr	r3, [r5, #0]
 8009952:	6820      	ldr	r0, [r4, #0]
 8009954:	1d19      	adds	r1, r3, #4
 8009956:	6029      	str	r1, [r5, #0]
 8009958:	0605      	lsls	r5, r0, #24
 800995a:	d501      	bpl.n	8009960 <_printf_i+0xe8>
 800995c:	681e      	ldr	r6, [r3, #0]
 800995e:	e002      	b.n	8009966 <_printf_i+0xee>
 8009960:	0641      	lsls	r1, r0, #25
 8009962:	d5fb      	bpl.n	800995c <_printf_i+0xe4>
 8009964:	881e      	ldrh	r6, [r3, #0]
 8009966:	4853      	ldr	r0, [pc, #332]	; (8009ab4 <_printf_i+0x23c>)
 8009968:	2f6f      	cmp	r7, #111	; 0x6f
 800996a:	bf0c      	ite	eq
 800996c:	2308      	moveq	r3, #8
 800996e:	230a      	movne	r3, #10
 8009970:	2100      	movs	r1, #0
 8009972:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009976:	6865      	ldr	r5, [r4, #4]
 8009978:	60a5      	str	r5, [r4, #8]
 800997a:	2d00      	cmp	r5, #0
 800997c:	bfa2      	ittt	ge
 800997e:	6821      	ldrge	r1, [r4, #0]
 8009980:	f021 0104 	bicge.w	r1, r1, #4
 8009984:	6021      	strge	r1, [r4, #0]
 8009986:	b90e      	cbnz	r6, 800998c <_printf_i+0x114>
 8009988:	2d00      	cmp	r5, #0
 800998a:	d04b      	beq.n	8009a24 <_printf_i+0x1ac>
 800998c:	4615      	mov	r5, r2
 800998e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009992:	fb03 6711 	mls	r7, r3, r1, r6
 8009996:	5dc7      	ldrb	r7, [r0, r7]
 8009998:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800999c:	4637      	mov	r7, r6
 800999e:	42bb      	cmp	r3, r7
 80099a0:	460e      	mov	r6, r1
 80099a2:	d9f4      	bls.n	800998e <_printf_i+0x116>
 80099a4:	2b08      	cmp	r3, #8
 80099a6:	d10b      	bne.n	80099c0 <_printf_i+0x148>
 80099a8:	6823      	ldr	r3, [r4, #0]
 80099aa:	07de      	lsls	r6, r3, #31
 80099ac:	d508      	bpl.n	80099c0 <_printf_i+0x148>
 80099ae:	6923      	ldr	r3, [r4, #16]
 80099b0:	6861      	ldr	r1, [r4, #4]
 80099b2:	4299      	cmp	r1, r3
 80099b4:	bfde      	ittt	le
 80099b6:	2330      	movle	r3, #48	; 0x30
 80099b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80099bc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80099c0:	1b52      	subs	r2, r2, r5
 80099c2:	6122      	str	r2, [r4, #16]
 80099c4:	f8cd a000 	str.w	sl, [sp]
 80099c8:	464b      	mov	r3, r9
 80099ca:	aa03      	add	r2, sp, #12
 80099cc:	4621      	mov	r1, r4
 80099ce:	4640      	mov	r0, r8
 80099d0:	f7ff fee4 	bl	800979c <_printf_common>
 80099d4:	3001      	adds	r0, #1
 80099d6:	d14a      	bne.n	8009a6e <_printf_i+0x1f6>
 80099d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099dc:	b004      	add	sp, #16
 80099de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099e2:	6823      	ldr	r3, [r4, #0]
 80099e4:	f043 0320 	orr.w	r3, r3, #32
 80099e8:	6023      	str	r3, [r4, #0]
 80099ea:	4833      	ldr	r0, [pc, #204]	; (8009ab8 <_printf_i+0x240>)
 80099ec:	2778      	movs	r7, #120	; 0x78
 80099ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80099f2:	6823      	ldr	r3, [r4, #0]
 80099f4:	6829      	ldr	r1, [r5, #0]
 80099f6:	061f      	lsls	r7, r3, #24
 80099f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80099fc:	d402      	bmi.n	8009a04 <_printf_i+0x18c>
 80099fe:	065f      	lsls	r7, r3, #25
 8009a00:	bf48      	it	mi
 8009a02:	b2b6      	uxthmi	r6, r6
 8009a04:	07df      	lsls	r7, r3, #31
 8009a06:	bf48      	it	mi
 8009a08:	f043 0320 	orrmi.w	r3, r3, #32
 8009a0c:	6029      	str	r1, [r5, #0]
 8009a0e:	bf48      	it	mi
 8009a10:	6023      	strmi	r3, [r4, #0]
 8009a12:	b91e      	cbnz	r6, 8009a1c <_printf_i+0x1a4>
 8009a14:	6823      	ldr	r3, [r4, #0]
 8009a16:	f023 0320 	bic.w	r3, r3, #32
 8009a1a:	6023      	str	r3, [r4, #0]
 8009a1c:	2310      	movs	r3, #16
 8009a1e:	e7a7      	b.n	8009970 <_printf_i+0xf8>
 8009a20:	4824      	ldr	r0, [pc, #144]	; (8009ab4 <_printf_i+0x23c>)
 8009a22:	e7e4      	b.n	80099ee <_printf_i+0x176>
 8009a24:	4615      	mov	r5, r2
 8009a26:	e7bd      	b.n	80099a4 <_printf_i+0x12c>
 8009a28:	682b      	ldr	r3, [r5, #0]
 8009a2a:	6826      	ldr	r6, [r4, #0]
 8009a2c:	6961      	ldr	r1, [r4, #20]
 8009a2e:	1d18      	adds	r0, r3, #4
 8009a30:	6028      	str	r0, [r5, #0]
 8009a32:	0635      	lsls	r5, r6, #24
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	d501      	bpl.n	8009a3c <_printf_i+0x1c4>
 8009a38:	6019      	str	r1, [r3, #0]
 8009a3a:	e002      	b.n	8009a42 <_printf_i+0x1ca>
 8009a3c:	0670      	lsls	r0, r6, #25
 8009a3e:	d5fb      	bpl.n	8009a38 <_printf_i+0x1c0>
 8009a40:	8019      	strh	r1, [r3, #0]
 8009a42:	2300      	movs	r3, #0
 8009a44:	6123      	str	r3, [r4, #16]
 8009a46:	4615      	mov	r5, r2
 8009a48:	e7bc      	b.n	80099c4 <_printf_i+0x14c>
 8009a4a:	682b      	ldr	r3, [r5, #0]
 8009a4c:	1d1a      	adds	r2, r3, #4
 8009a4e:	602a      	str	r2, [r5, #0]
 8009a50:	681d      	ldr	r5, [r3, #0]
 8009a52:	6862      	ldr	r2, [r4, #4]
 8009a54:	2100      	movs	r1, #0
 8009a56:	4628      	mov	r0, r5
 8009a58:	f7f6 fbfa 	bl	8000250 <memchr>
 8009a5c:	b108      	cbz	r0, 8009a62 <_printf_i+0x1ea>
 8009a5e:	1b40      	subs	r0, r0, r5
 8009a60:	6060      	str	r0, [r4, #4]
 8009a62:	6863      	ldr	r3, [r4, #4]
 8009a64:	6123      	str	r3, [r4, #16]
 8009a66:	2300      	movs	r3, #0
 8009a68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a6c:	e7aa      	b.n	80099c4 <_printf_i+0x14c>
 8009a6e:	6923      	ldr	r3, [r4, #16]
 8009a70:	462a      	mov	r2, r5
 8009a72:	4649      	mov	r1, r9
 8009a74:	4640      	mov	r0, r8
 8009a76:	47d0      	blx	sl
 8009a78:	3001      	adds	r0, #1
 8009a7a:	d0ad      	beq.n	80099d8 <_printf_i+0x160>
 8009a7c:	6823      	ldr	r3, [r4, #0]
 8009a7e:	079b      	lsls	r3, r3, #30
 8009a80:	d413      	bmi.n	8009aaa <_printf_i+0x232>
 8009a82:	68e0      	ldr	r0, [r4, #12]
 8009a84:	9b03      	ldr	r3, [sp, #12]
 8009a86:	4298      	cmp	r0, r3
 8009a88:	bfb8      	it	lt
 8009a8a:	4618      	movlt	r0, r3
 8009a8c:	e7a6      	b.n	80099dc <_printf_i+0x164>
 8009a8e:	2301      	movs	r3, #1
 8009a90:	4632      	mov	r2, r6
 8009a92:	4649      	mov	r1, r9
 8009a94:	4640      	mov	r0, r8
 8009a96:	47d0      	blx	sl
 8009a98:	3001      	adds	r0, #1
 8009a9a:	d09d      	beq.n	80099d8 <_printf_i+0x160>
 8009a9c:	3501      	adds	r5, #1
 8009a9e:	68e3      	ldr	r3, [r4, #12]
 8009aa0:	9903      	ldr	r1, [sp, #12]
 8009aa2:	1a5b      	subs	r3, r3, r1
 8009aa4:	42ab      	cmp	r3, r5
 8009aa6:	dcf2      	bgt.n	8009a8e <_printf_i+0x216>
 8009aa8:	e7eb      	b.n	8009a82 <_printf_i+0x20a>
 8009aaa:	2500      	movs	r5, #0
 8009aac:	f104 0619 	add.w	r6, r4, #25
 8009ab0:	e7f5      	b.n	8009a9e <_printf_i+0x226>
 8009ab2:	bf00      	nop
 8009ab4:	0800a369 	.word	0x0800a369
 8009ab8:	0800a37a 	.word	0x0800a37a

08009abc <__sflush_r>:
 8009abc:	898a      	ldrh	r2, [r1, #12]
 8009abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ac2:	4605      	mov	r5, r0
 8009ac4:	0710      	lsls	r0, r2, #28
 8009ac6:	460c      	mov	r4, r1
 8009ac8:	d458      	bmi.n	8009b7c <__sflush_r+0xc0>
 8009aca:	684b      	ldr	r3, [r1, #4]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	dc05      	bgt.n	8009adc <__sflush_r+0x20>
 8009ad0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	dc02      	bgt.n	8009adc <__sflush_r+0x20>
 8009ad6:	2000      	movs	r0, #0
 8009ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009adc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ade:	2e00      	cmp	r6, #0
 8009ae0:	d0f9      	beq.n	8009ad6 <__sflush_r+0x1a>
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009ae8:	682f      	ldr	r7, [r5, #0]
 8009aea:	6a21      	ldr	r1, [r4, #32]
 8009aec:	602b      	str	r3, [r5, #0]
 8009aee:	d032      	beq.n	8009b56 <__sflush_r+0x9a>
 8009af0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009af2:	89a3      	ldrh	r3, [r4, #12]
 8009af4:	075a      	lsls	r2, r3, #29
 8009af6:	d505      	bpl.n	8009b04 <__sflush_r+0x48>
 8009af8:	6863      	ldr	r3, [r4, #4]
 8009afa:	1ac0      	subs	r0, r0, r3
 8009afc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009afe:	b10b      	cbz	r3, 8009b04 <__sflush_r+0x48>
 8009b00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b02:	1ac0      	subs	r0, r0, r3
 8009b04:	2300      	movs	r3, #0
 8009b06:	4602      	mov	r2, r0
 8009b08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b0a:	6a21      	ldr	r1, [r4, #32]
 8009b0c:	4628      	mov	r0, r5
 8009b0e:	47b0      	blx	r6
 8009b10:	1c43      	adds	r3, r0, #1
 8009b12:	89a3      	ldrh	r3, [r4, #12]
 8009b14:	d106      	bne.n	8009b24 <__sflush_r+0x68>
 8009b16:	6829      	ldr	r1, [r5, #0]
 8009b18:	291d      	cmp	r1, #29
 8009b1a:	d82b      	bhi.n	8009b74 <__sflush_r+0xb8>
 8009b1c:	4a29      	ldr	r2, [pc, #164]	; (8009bc4 <__sflush_r+0x108>)
 8009b1e:	410a      	asrs	r2, r1
 8009b20:	07d6      	lsls	r6, r2, #31
 8009b22:	d427      	bmi.n	8009b74 <__sflush_r+0xb8>
 8009b24:	2200      	movs	r2, #0
 8009b26:	6062      	str	r2, [r4, #4]
 8009b28:	04d9      	lsls	r1, r3, #19
 8009b2a:	6922      	ldr	r2, [r4, #16]
 8009b2c:	6022      	str	r2, [r4, #0]
 8009b2e:	d504      	bpl.n	8009b3a <__sflush_r+0x7e>
 8009b30:	1c42      	adds	r2, r0, #1
 8009b32:	d101      	bne.n	8009b38 <__sflush_r+0x7c>
 8009b34:	682b      	ldr	r3, [r5, #0]
 8009b36:	b903      	cbnz	r3, 8009b3a <__sflush_r+0x7e>
 8009b38:	6560      	str	r0, [r4, #84]	; 0x54
 8009b3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b3c:	602f      	str	r7, [r5, #0]
 8009b3e:	2900      	cmp	r1, #0
 8009b40:	d0c9      	beq.n	8009ad6 <__sflush_r+0x1a>
 8009b42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b46:	4299      	cmp	r1, r3
 8009b48:	d002      	beq.n	8009b50 <__sflush_r+0x94>
 8009b4a:	4628      	mov	r0, r5
 8009b4c:	f000 fa7a 	bl	800a044 <_free_r>
 8009b50:	2000      	movs	r0, #0
 8009b52:	6360      	str	r0, [r4, #52]	; 0x34
 8009b54:	e7c0      	b.n	8009ad8 <__sflush_r+0x1c>
 8009b56:	2301      	movs	r3, #1
 8009b58:	4628      	mov	r0, r5
 8009b5a:	47b0      	blx	r6
 8009b5c:	1c41      	adds	r1, r0, #1
 8009b5e:	d1c8      	bne.n	8009af2 <__sflush_r+0x36>
 8009b60:	682b      	ldr	r3, [r5, #0]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d0c5      	beq.n	8009af2 <__sflush_r+0x36>
 8009b66:	2b1d      	cmp	r3, #29
 8009b68:	d001      	beq.n	8009b6e <__sflush_r+0xb2>
 8009b6a:	2b16      	cmp	r3, #22
 8009b6c:	d101      	bne.n	8009b72 <__sflush_r+0xb6>
 8009b6e:	602f      	str	r7, [r5, #0]
 8009b70:	e7b1      	b.n	8009ad6 <__sflush_r+0x1a>
 8009b72:	89a3      	ldrh	r3, [r4, #12]
 8009b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b78:	81a3      	strh	r3, [r4, #12]
 8009b7a:	e7ad      	b.n	8009ad8 <__sflush_r+0x1c>
 8009b7c:	690f      	ldr	r7, [r1, #16]
 8009b7e:	2f00      	cmp	r7, #0
 8009b80:	d0a9      	beq.n	8009ad6 <__sflush_r+0x1a>
 8009b82:	0793      	lsls	r3, r2, #30
 8009b84:	680e      	ldr	r6, [r1, #0]
 8009b86:	bf08      	it	eq
 8009b88:	694b      	ldreq	r3, [r1, #20]
 8009b8a:	600f      	str	r7, [r1, #0]
 8009b8c:	bf18      	it	ne
 8009b8e:	2300      	movne	r3, #0
 8009b90:	eba6 0807 	sub.w	r8, r6, r7
 8009b94:	608b      	str	r3, [r1, #8]
 8009b96:	f1b8 0f00 	cmp.w	r8, #0
 8009b9a:	dd9c      	ble.n	8009ad6 <__sflush_r+0x1a>
 8009b9c:	6a21      	ldr	r1, [r4, #32]
 8009b9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009ba0:	4643      	mov	r3, r8
 8009ba2:	463a      	mov	r2, r7
 8009ba4:	4628      	mov	r0, r5
 8009ba6:	47b0      	blx	r6
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	dc06      	bgt.n	8009bba <__sflush_r+0xfe>
 8009bac:	89a3      	ldrh	r3, [r4, #12]
 8009bae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bb2:	81a3      	strh	r3, [r4, #12]
 8009bb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bb8:	e78e      	b.n	8009ad8 <__sflush_r+0x1c>
 8009bba:	4407      	add	r7, r0
 8009bbc:	eba8 0800 	sub.w	r8, r8, r0
 8009bc0:	e7e9      	b.n	8009b96 <__sflush_r+0xda>
 8009bc2:	bf00      	nop
 8009bc4:	dfbffffe 	.word	0xdfbffffe

08009bc8 <_fflush_r>:
 8009bc8:	b538      	push	{r3, r4, r5, lr}
 8009bca:	690b      	ldr	r3, [r1, #16]
 8009bcc:	4605      	mov	r5, r0
 8009bce:	460c      	mov	r4, r1
 8009bd0:	b913      	cbnz	r3, 8009bd8 <_fflush_r+0x10>
 8009bd2:	2500      	movs	r5, #0
 8009bd4:	4628      	mov	r0, r5
 8009bd6:	bd38      	pop	{r3, r4, r5, pc}
 8009bd8:	b118      	cbz	r0, 8009be2 <_fflush_r+0x1a>
 8009bda:	6a03      	ldr	r3, [r0, #32]
 8009bdc:	b90b      	cbnz	r3, 8009be2 <_fflush_r+0x1a>
 8009bde:	f7ff f9c7 	bl	8008f70 <__sinit>
 8009be2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d0f3      	beq.n	8009bd2 <_fflush_r+0xa>
 8009bea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009bec:	07d0      	lsls	r0, r2, #31
 8009bee:	d404      	bmi.n	8009bfa <_fflush_r+0x32>
 8009bf0:	0599      	lsls	r1, r3, #22
 8009bf2:	d402      	bmi.n	8009bfa <_fflush_r+0x32>
 8009bf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bf6:	f7ff fa92 	bl	800911e <__retarget_lock_acquire_recursive>
 8009bfa:	4628      	mov	r0, r5
 8009bfc:	4621      	mov	r1, r4
 8009bfe:	f7ff ff5d 	bl	8009abc <__sflush_r>
 8009c02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c04:	07da      	lsls	r2, r3, #31
 8009c06:	4605      	mov	r5, r0
 8009c08:	d4e4      	bmi.n	8009bd4 <_fflush_r+0xc>
 8009c0a:	89a3      	ldrh	r3, [r4, #12]
 8009c0c:	059b      	lsls	r3, r3, #22
 8009c0e:	d4e1      	bmi.n	8009bd4 <_fflush_r+0xc>
 8009c10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c12:	f7ff fa85 	bl	8009120 <__retarget_lock_release_recursive>
 8009c16:	e7dd      	b.n	8009bd4 <_fflush_r+0xc>

08009c18 <__malloc_lock>:
 8009c18:	4801      	ldr	r0, [pc, #4]	; (8009c20 <__malloc_lock+0x8>)
 8009c1a:	f7ff ba80 	b.w	800911e <__retarget_lock_acquire_recursive>
 8009c1e:	bf00      	nop
 8009c20:	20002920 	.word	0x20002920

08009c24 <__malloc_unlock>:
 8009c24:	4801      	ldr	r0, [pc, #4]	; (8009c2c <__malloc_unlock+0x8>)
 8009c26:	f7ff ba7b 	b.w	8009120 <__retarget_lock_release_recursive>
 8009c2a:	bf00      	nop
 8009c2c:	20002920 	.word	0x20002920

08009c30 <__sread>:
 8009c30:	b510      	push	{r4, lr}
 8009c32:	460c      	mov	r4, r1
 8009c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c38:	f000 f9c2 	bl	8009fc0 <_read_r>
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	bfab      	itete	ge
 8009c40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c42:	89a3      	ldrhlt	r3, [r4, #12]
 8009c44:	181b      	addge	r3, r3, r0
 8009c46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009c4a:	bfac      	ite	ge
 8009c4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009c4e:	81a3      	strhlt	r3, [r4, #12]
 8009c50:	bd10      	pop	{r4, pc}

08009c52 <__swrite>:
 8009c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c56:	461f      	mov	r7, r3
 8009c58:	898b      	ldrh	r3, [r1, #12]
 8009c5a:	05db      	lsls	r3, r3, #23
 8009c5c:	4605      	mov	r5, r0
 8009c5e:	460c      	mov	r4, r1
 8009c60:	4616      	mov	r6, r2
 8009c62:	d505      	bpl.n	8009c70 <__swrite+0x1e>
 8009c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c68:	2302      	movs	r3, #2
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f000 f996 	bl	8009f9c <_lseek_r>
 8009c70:	89a3      	ldrh	r3, [r4, #12]
 8009c72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c7a:	81a3      	strh	r3, [r4, #12]
 8009c7c:	4632      	mov	r2, r6
 8009c7e:	463b      	mov	r3, r7
 8009c80:	4628      	mov	r0, r5
 8009c82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c86:	f000 b9bd 	b.w	800a004 <_write_r>

08009c8a <__sseek>:
 8009c8a:	b510      	push	{r4, lr}
 8009c8c:	460c      	mov	r4, r1
 8009c8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c92:	f000 f983 	bl	8009f9c <_lseek_r>
 8009c96:	1c43      	adds	r3, r0, #1
 8009c98:	89a3      	ldrh	r3, [r4, #12]
 8009c9a:	bf15      	itete	ne
 8009c9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ca2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ca6:	81a3      	strheq	r3, [r4, #12]
 8009ca8:	bf18      	it	ne
 8009caa:	81a3      	strhne	r3, [r4, #12]
 8009cac:	bd10      	pop	{r4, pc}

08009cae <__sclose>:
 8009cae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cb2:	f000 b941 	b.w	8009f38 <_close_r>

08009cb6 <_realloc_r>:
 8009cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cba:	4680      	mov	r8, r0
 8009cbc:	4614      	mov	r4, r2
 8009cbe:	460e      	mov	r6, r1
 8009cc0:	b921      	cbnz	r1, 8009ccc <_realloc_r+0x16>
 8009cc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cc6:	4611      	mov	r1, r2
 8009cc8:	f7ff bce8 	b.w	800969c <_malloc_r>
 8009ccc:	b92a      	cbnz	r2, 8009cda <_realloc_r+0x24>
 8009cce:	f000 f9b9 	bl	800a044 <_free_r>
 8009cd2:	4625      	mov	r5, r4
 8009cd4:	4628      	mov	r0, r5
 8009cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cda:	f000 f9ff 	bl	800a0dc <_malloc_usable_size_r>
 8009cde:	4284      	cmp	r4, r0
 8009ce0:	4607      	mov	r7, r0
 8009ce2:	d802      	bhi.n	8009cea <_realloc_r+0x34>
 8009ce4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009ce8:	d812      	bhi.n	8009d10 <_realloc_r+0x5a>
 8009cea:	4621      	mov	r1, r4
 8009cec:	4640      	mov	r0, r8
 8009cee:	f7ff fcd5 	bl	800969c <_malloc_r>
 8009cf2:	4605      	mov	r5, r0
 8009cf4:	2800      	cmp	r0, #0
 8009cf6:	d0ed      	beq.n	8009cd4 <_realloc_r+0x1e>
 8009cf8:	42bc      	cmp	r4, r7
 8009cfa:	4622      	mov	r2, r4
 8009cfc:	4631      	mov	r1, r6
 8009cfe:	bf28      	it	cs
 8009d00:	463a      	movcs	r2, r7
 8009d02:	f000 f991 	bl	800a028 <memcpy>
 8009d06:	4631      	mov	r1, r6
 8009d08:	4640      	mov	r0, r8
 8009d0a:	f000 f99b 	bl	800a044 <_free_r>
 8009d0e:	e7e1      	b.n	8009cd4 <_realloc_r+0x1e>
 8009d10:	4635      	mov	r5, r6
 8009d12:	e7df      	b.n	8009cd4 <_realloc_r+0x1e>

08009d14 <__swbuf_r>:
 8009d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d16:	460e      	mov	r6, r1
 8009d18:	4614      	mov	r4, r2
 8009d1a:	4605      	mov	r5, r0
 8009d1c:	b118      	cbz	r0, 8009d26 <__swbuf_r+0x12>
 8009d1e:	6a03      	ldr	r3, [r0, #32]
 8009d20:	b90b      	cbnz	r3, 8009d26 <__swbuf_r+0x12>
 8009d22:	f7ff f925 	bl	8008f70 <__sinit>
 8009d26:	69a3      	ldr	r3, [r4, #24]
 8009d28:	60a3      	str	r3, [r4, #8]
 8009d2a:	89a3      	ldrh	r3, [r4, #12]
 8009d2c:	071a      	lsls	r2, r3, #28
 8009d2e:	d525      	bpl.n	8009d7c <__swbuf_r+0x68>
 8009d30:	6923      	ldr	r3, [r4, #16]
 8009d32:	b31b      	cbz	r3, 8009d7c <__swbuf_r+0x68>
 8009d34:	6823      	ldr	r3, [r4, #0]
 8009d36:	6922      	ldr	r2, [r4, #16]
 8009d38:	1a98      	subs	r0, r3, r2
 8009d3a:	6963      	ldr	r3, [r4, #20]
 8009d3c:	b2f6      	uxtb	r6, r6
 8009d3e:	4283      	cmp	r3, r0
 8009d40:	4637      	mov	r7, r6
 8009d42:	dc04      	bgt.n	8009d4e <__swbuf_r+0x3a>
 8009d44:	4621      	mov	r1, r4
 8009d46:	4628      	mov	r0, r5
 8009d48:	f7ff ff3e 	bl	8009bc8 <_fflush_r>
 8009d4c:	b9e0      	cbnz	r0, 8009d88 <__swbuf_r+0x74>
 8009d4e:	68a3      	ldr	r3, [r4, #8]
 8009d50:	3b01      	subs	r3, #1
 8009d52:	60a3      	str	r3, [r4, #8]
 8009d54:	6823      	ldr	r3, [r4, #0]
 8009d56:	1c5a      	adds	r2, r3, #1
 8009d58:	6022      	str	r2, [r4, #0]
 8009d5a:	701e      	strb	r6, [r3, #0]
 8009d5c:	6962      	ldr	r2, [r4, #20]
 8009d5e:	1c43      	adds	r3, r0, #1
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d004      	beq.n	8009d6e <__swbuf_r+0x5a>
 8009d64:	89a3      	ldrh	r3, [r4, #12]
 8009d66:	07db      	lsls	r3, r3, #31
 8009d68:	d506      	bpl.n	8009d78 <__swbuf_r+0x64>
 8009d6a:	2e0a      	cmp	r6, #10
 8009d6c:	d104      	bne.n	8009d78 <__swbuf_r+0x64>
 8009d6e:	4621      	mov	r1, r4
 8009d70:	4628      	mov	r0, r5
 8009d72:	f7ff ff29 	bl	8009bc8 <_fflush_r>
 8009d76:	b938      	cbnz	r0, 8009d88 <__swbuf_r+0x74>
 8009d78:	4638      	mov	r0, r7
 8009d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d7c:	4621      	mov	r1, r4
 8009d7e:	4628      	mov	r0, r5
 8009d80:	f000 f806 	bl	8009d90 <__swsetup_r>
 8009d84:	2800      	cmp	r0, #0
 8009d86:	d0d5      	beq.n	8009d34 <__swbuf_r+0x20>
 8009d88:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009d8c:	e7f4      	b.n	8009d78 <__swbuf_r+0x64>
	...

08009d90 <__swsetup_r>:
 8009d90:	b538      	push	{r3, r4, r5, lr}
 8009d92:	4b2a      	ldr	r3, [pc, #168]	; (8009e3c <__swsetup_r+0xac>)
 8009d94:	4605      	mov	r5, r0
 8009d96:	6818      	ldr	r0, [r3, #0]
 8009d98:	460c      	mov	r4, r1
 8009d9a:	b118      	cbz	r0, 8009da4 <__swsetup_r+0x14>
 8009d9c:	6a03      	ldr	r3, [r0, #32]
 8009d9e:	b90b      	cbnz	r3, 8009da4 <__swsetup_r+0x14>
 8009da0:	f7ff f8e6 	bl	8008f70 <__sinit>
 8009da4:	89a3      	ldrh	r3, [r4, #12]
 8009da6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009daa:	0718      	lsls	r0, r3, #28
 8009dac:	d422      	bmi.n	8009df4 <__swsetup_r+0x64>
 8009dae:	06d9      	lsls	r1, r3, #27
 8009db0:	d407      	bmi.n	8009dc2 <__swsetup_r+0x32>
 8009db2:	2309      	movs	r3, #9
 8009db4:	602b      	str	r3, [r5, #0]
 8009db6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009dba:	81a3      	strh	r3, [r4, #12]
 8009dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dc0:	e034      	b.n	8009e2c <__swsetup_r+0x9c>
 8009dc2:	0758      	lsls	r0, r3, #29
 8009dc4:	d512      	bpl.n	8009dec <__swsetup_r+0x5c>
 8009dc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dc8:	b141      	cbz	r1, 8009ddc <__swsetup_r+0x4c>
 8009dca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dce:	4299      	cmp	r1, r3
 8009dd0:	d002      	beq.n	8009dd8 <__swsetup_r+0x48>
 8009dd2:	4628      	mov	r0, r5
 8009dd4:	f000 f936 	bl	800a044 <_free_r>
 8009dd8:	2300      	movs	r3, #0
 8009dda:	6363      	str	r3, [r4, #52]	; 0x34
 8009ddc:	89a3      	ldrh	r3, [r4, #12]
 8009dde:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009de2:	81a3      	strh	r3, [r4, #12]
 8009de4:	2300      	movs	r3, #0
 8009de6:	6063      	str	r3, [r4, #4]
 8009de8:	6923      	ldr	r3, [r4, #16]
 8009dea:	6023      	str	r3, [r4, #0]
 8009dec:	89a3      	ldrh	r3, [r4, #12]
 8009dee:	f043 0308 	orr.w	r3, r3, #8
 8009df2:	81a3      	strh	r3, [r4, #12]
 8009df4:	6923      	ldr	r3, [r4, #16]
 8009df6:	b94b      	cbnz	r3, 8009e0c <__swsetup_r+0x7c>
 8009df8:	89a3      	ldrh	r3, [r4, #12]
 8009dfa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009dfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e02:	d003      	beq.n	8009e0c <__swsetup_r+0x7c>
 8009e04:	4621      	mov	r1, r4
 8009e06:	4628      	mov	r0, r5
 8009e08:	f000 f840 	bl	8009e8c <__smakebuf_r>
 8009e0c:	89a0      	ldrh	r0, [r4, #12]
 8009e0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e12:	f010 0301 	ands.w	r3, r0, #1
 8009e16:	d00a      	beq.n	8009e2e <__swsetup_r+0x9e>
 8009e18:	2300      	movs	r3, #0
 8009e1a:	60a3      	str	r3, [r4, #8]
 8009e1c:	6963      	ldr	r3, [r4, #20]
 8009e1e:	425b      	negs	r3, r3
 8009e20:	61a3      	str	r3, [r4, #24]
 8009e22:	6923      	ldr	r3, [r4, #16]
 8009e24:	b943      	cbnz	r3, 8009e38 <__swsetup_r+0xa8>
 8009e26:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e2a:	d1c4      	bne.n	8009db6 <__swsetup_r+0x26>
 8009e2c:	bd38      	pop	{r3, r4, r5, pc}
 8009e2e:	0781      	lsls	r1, r0, #30
 8009e30:	bf58      	it	pl
 8009e32:	6963      	ldrpl	r3, [r4, #20]
 8009e34:	60a3      	str	r3, [r4, #8]
 8009e36:	e7f4      	b.n	8009e22 <__swsetup_r+0x92>
 8009e38:	2000      	movs	r0, #0
 8009e3a:	e7f7      	b.n	8009e2c <__swsetup_r+0x9c>
 8009e3c:	20000064 	.word	0x20000064

08009e40 <__swhatbuf_r>:
 8009e40:	b570      	push	{r4, r5, r6, lr}
 8009e42:	460c      	mov	r4, r1
 8009e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e48:	2900      	cmp	r1, #0
 8009e4a:	b096      	sub	sp, #88	; 0x58
 8009e4c:	4615      	mov	r5, r2
 8009e4e:	461e      	mov	r6, r3
 8009e50:	da0d      	bge.n	8009e6e <__swhatbuf_r+0x2e>
 8009e52:	89a3      	ldrh	r3, [r4, #12]
 8009e54:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009e58:	f04f 0100 	mov.w	r1, #0
 8009e5c:	bf0c      	ite	eq
 8009e5e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009e62:	2340      	movne	r3, #64	; 0x40
 8009e64:	2000      	movs	r0, #0
 8009e66:	6031      	str	r1, [r6, #0]
 8009e68:	602b      	str	r3, [r5, #0]
 8009e6a:	b016      	add	sp, #88	; 0x58
 8009e6c:	bd70      	pop	{r4, r5, r6, pc}
 8009e6e:	466a      	mov	r2, sp
 8009e70:	f000 f872 	bl	8009f58 <_fstat_r>
 8009e74:	2800      	cmp	r0, #0
 8009e76:	dbec      	blt.n	8009e52 <__swhatbuf_r+0x12>
 8009e78:	9901      	ldr	r1, [sp, #4]
 8009e7a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009e7e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009e82:	4259      	negs	r1, r3
 8009e84:	4159      	adcs	r1, r3
 8009e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e8a:	e7eb      	b.n	8009e64 <__swhatbuf_r+0x24>

08009e8c <__smakebuf_r>:
 8009e8c:	898b      	ldrh	r3, [r1, #12]
 8009e8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e90:	079d      	lsls	r5, r3, #30
 8009e92:	4606      	mov	r6, r0
 8009e94:	460c      	mov	r4, r1
 8009e96:	d507      	bpl.n	8009ea8 <__smakebuf_r+0x1c>
 8009e98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e9c:	6023      	str	r3, [r4, #0]
 8009e9e:	6123      	str	r3, [r4, #16]
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	6163      	str	r3, [r4, #20]
 8009ea4:	b002      	add	sp, #8
 8009ea6:	bd70      	pop	{r4, r5, r6, pc}
 8009ea8:	ab01      	add	r3, sp, #4
 8009eaa:	466a      	mov	r2, sp
 8009eac:	f7ff ffc8 	bl	8009e40 <__swhatbuf_r>
 8009eb0:	9900      	ldr	r1, [sp, #0]
 8009eb2:	4605      	mov	r5, r0
 8009eb4:	4630      	mov	r0, r6
 8009eb6:	f7ff fbf1 	bl	800969c <_malloc_r>
 8009eba:	b948      	cbnz	r0, 8009ed0 <__smakebuf_r+0x44>
 8009ebc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ec0:	059a      	lsls	r2, r3, #22
 8009ec2:	d4ef      	bmi.n	8009ea4 <__smakebuf_r+0x18>
 8009ec4:	f023 0303 	bic.w	r3, r3, #3
 8009ec8:	f043 0302 	orr.w	r3, r3, #2
 8009ecc:	81a3      	strh	r3, [r4, #12]
 8009ece:	e7e3      	b.n	8009e98 <__smakebuf_r+0xc>
 8009ed0:	89a3      	ldrh	r3, [r4, #12]
 8009ed2:	6020      	str	r0, [r4, #0]
 8009ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ed8:	81a3      	strh	r3, [r4, #12]
 8009eda:	9b00      	ldr	r3, [sp, #0]
 8009edc:	6163      	str	r3, [r4, #20]
 8009ede:	9b01      	ldr	r3, [sp, #4]
 8009ee0:	6120      	str	r0, [r4, #16]
 8009ee2:	b15b      	cbz	r3, 8009efc <__smakebuf_r+0x70>
 8009ee4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ee8:	4630      	mov	r0, r6
 8009eea:	f000 f847 	bl	8009f7c <_isatty_r>
 8009eee:	b128      	cbz	r0, 8009efc <__smakebuf_r+0x70>
 8009ef0:	89a3      	ldrh	r3, [r4, #12]
 8009ef2:	f023 0303 	bic.w	r3, r3, #3
 8009ef6:	f043 0301 	orr.w	r3, r3, #1
 8009efa:	81a3      	strh	r3, [r4, #12]
 8009efc:	89a3      	ldrh	r3, [r4, #12]
 8009efe:	431d      	orrs	r5, r3
 8009f00:	81a5      	strh	r5, [r4, #12]
 8009f02:	e7cf      	b.n	8009ea4 <__smakebuf_r+0x18>

08009f04 <memmove>:
 8009f04:	4288      	cmp	r0, r1
 8009f06:	b510      	push	{r4, lr}
 8009f08:	eb01 0402 	add.w	r4, r1, r2
 8009f0c:	d902      	bls.n	8009f14 <memmove+0x10>
 8009f0e:	4284      	cmp	r4, r0
 8009f10:	4623      	mov	r3, r4
 8009f12:	d807      	bhi.n	8009f24 <memmove+0x20>
 8009f14:	1e43      	subs	r3, r0, #1
 8009f16:	42a1      	cmp	r1, r4
 8009f18:	d008      	beq.n	8009f2c <memmove+0x28>
 8009f1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f22:	e7f8      	b.n	8009f16 <memmove+0x12>
 8009f24:	4402      	add	r2, r0
 8009f26:	4601      	mov	r1, r0
 8009f28:	428a      	cmp	r2, r1
 8009f2a:	d100      	bne.n	8009f2e <memmove+0x2a>
 8009f2c:	bd10      	pop	{r4, pc}
 8009f2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f36:	e7f7      	b.n	8009f28 <memmove+0x24>

08009f38 <_close_r>:
 8009f38:	b538      	push	{r3, r4, r5, lr}
 8009f3a:	4d06      	ldr	r5, [pc, #24]	; (8009f54 <_close_r+0x1c>)
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	4604      	mov	r4, r0
 8009f40:	4608      	mov	r0, r1
 8009f42:	602b      	str	r3, [r5, #0]
 8009f44:	f7f7 f9a3 	bl	800128e <_close>
 8009f48:	1c43      	adds	r3, r0, #1
 8009f4a:	d102      	bne.n	8009f52 <_close_r+0x1a>
 8009f4c:	682b      	ldr	r3, [r5, #0]
 8009f4e:	b103      	cbz	r3, 8009f52 <_close_r+0x1a>
 8009f50:	6023      	str	r3, [r4, #0]
 8009f52:	bd38      	pop	{r3, r4, r5, pc}
 8009f54:	2000292c 	.word	0x2000292c

08009f58 <_fstat_r>:
 8009f58:	b538      	push	{r3, r4, r5, lr}
 8009f5a:	4d07      	ldr	r5, [pc, #28]	; (8009f78 <_fstat_r+0x20>)
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	4604      	mov	r4, r0
 8009f60:	4608      	mov	r0, r1
 8009f62:	4611      	mov	r1, r2
 8009f64:	602b      	str	r3, [r5, #0]
 8009f66:	f7f7 f99e 	bl	80012a6 <_fstat>
 8009f6a:	1c43      	adds	r3, r0, #1
 8009f6c:	d102      	bne.n	8009f74 <_fstat_r+0x1c>
 8009f6e:	682b      	ldr	r3, [r5, #0]
 8009f70:	b103      	cbz	r3, 8009f74 <_fstat_r+0x1c>
 8009f72:	6023      	str	r3, [r4, #0]
 8009f74:	bd38      	pop	{r3, r4, r5, pc}
 8009f76:	bf00      	nop
 8009f78:	2000292c 	.word	0x2000292c

08009f7c <_isatty_r>:
 8009f7c:	b538      	push	{r3, r4, r5, lr}
 8009f7e:	4d06      	ldr	r5, [pc, #24]	; (8009f98 <_isatty_r+0x1c>)
 8009f80:	2300      	movs	r3, #0
 8009f82:	4604      	mov	r4, r0
 8009f84:	4608      	mov	r0, r1
 8009f86:	602b      	str	r3, [r5, #0]
 8009f88:	f7f7 f99d 	bl	80012c6 <_isatty>
 8009f8c:	1c43      	adds	r3, r0, #1
 8009f8e:	d102      	bne.n	8009f96 <_isatty_r+0x1a>
 8009f90:	682b      	ldr	r3, [r5, #0]
 8009f92:	b103      	cbz	r3, 8009f96 <_isatty_r+0x1a>
 8009f94:	6023      	str	r3, [r4, #0]
 8009f96:	bd38      	pop	{r3, r4, r5, pc}
 8009f98:	2000292c 	.word	0x2000292c

08009f9c <_lseek_r>:
 8009f9c:	b538      	push	{r3, r4, r5, lr}
 8009f9e:	4d07      	ldr	r5, [pc, #28]	; (8009fbc <_lseek_r+0x20>)
 8009fa0:	4604      	mov	r4, r0
 8009fa2:	4608      	mov	r0, r1
 8009fa4:	4611      	mov	r1, r2
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	602a      	str	r2, [r5, #0]
 8009faa:	461a      	mov	r2, r3
 8009fac:	f7f7 f996 	bl	80012dc <_lseek>
 8009fb0:	1c43      	adds	r3, r0, #1
 8009fb2:	d102      	bne.n	8009fba <_lseek_r+0x1e>
 8009fb4:	682b      	ldr	r3, [r5, #0]
 8009fb6:	b103      	cbz	r3, 8009fba <_lseek_r+0x1e>
 8009fb8:	6023      	str	r3, [r4, #0]
 8009fba:	bd38      	pop	{r3, r4, r5, pc}
 8009fbc:	2000292c 	.word	0x2000292c

08009fc0 <_read_r>:
 8009fc0:	b538      	push	{r3, r4, r5, lr}
 8009fc2:	4d07      	ldr	r5, [pc, #28]	; (8009fe0 <_read_r+0x20>)
 8009fc4:	4604      	mov	r4, r0
 8009fc6:	4608      	mov	r0, r1
 8009fc8:	4611      	mov	r1, r2
 8009fca:	2200      	movs	r2, #0
 8009fcc:	602a      	str	r2, [r5, #0]
 8009fce:	461a      	mov	r2, r3
 8009fd0:	f7f7 f924 	bl	800121c <_read>
 8009fd4:	1c43      	adds	r3, r0, #1
 8009fd6:	d102      	bne.n	8009fde <_read_r+0x1e>
 8009fd8:	682b      	ldr	r3, [r5, #0]
 8009fda:	b103      	cbz	r3, 8009fde <_read_r+0x1e>
 8009fdc:	6023      	str	r3, [r4, #0]
 8009fde:	bd38      	pop	{r3, r4, r5, pc}
 8009fe0:	2000292c 	.word	0x2000292c

08009fe4 <_sbrk_r>:
 8009fe4:	b538      	push	{r3, r4, r5, lr}
 8009fe6:	4d06      	ldr	r5, [pc, #24]	; (800a000 <_sbrk_r+0x1c>)
 8009fe8:	2300      	movs	r3, #0
 8009fea:	4604      	mov	r4, r0
 8009fec:	4608      	mov	r0, r1
 8009fee:	602b      	str	r3, [r5, #0]
 8009ff0:	f7f7 f982 	bl	80012f8 <_sbrk>
 8009ff4:	1c43      	adds	r3, r0, #1
 8009ff6:	d102      	bne.n	8009ffe <_sbrk_r+0x1a>
 8009ff8:	682b      	ldr	r3, [r5, #0]
 8009ffa:	b103      	cbz	r3, 8009ffe <_sbrk_r+0x1a>
 8009ffc:	6023      	str	r3, [r4, #0]
 8009ffe:	bd38      	pop	{r3, r4, r5, pc}
 800a000:	2000292c 	.word	0x2000292c

0800a004 <_write_r>:
 800a004:	b538      	push	{r3, r4, r5, lr}
 800a006:	4d07      	ldr	r5, [pc, #28]	; (800a024 <_write_r+0x20>)
 800a008:	4604      	mov	r4, r0
 800a00a:	4608      	mov	r0, r1
 800a00c:	4611      	mov	r1, r2
 800a00e:	2200      	movs	r2, #0
 800a010:	602a      	str	r2, [r5, #0]
 800a012:	461a      	mov	r2, r3
 800a014:	f7f7 f91f 	bl	8001256 <_write>
 800a018:	1c43      	adds	r3, r0, #1
 800a01a:	d102      	bne.n	800a022 <_write_r+0x1e>
 800a01c:	682b      	ldr	r3, [r5, #0]
 800a01e:	b103      	cbz	r3, 800a022 <_write_r+0x1e>
 800a020:	6023      	str	r3, [r4, #0]
 800a022:	bd38      	pop	{r3, r4, r5, pc}
 800a024:	2000292c 	.word	0x2000292c

0800a028 <memcpy>:
 800a028:	440a      	add	r2, r1
 800a02a:	4291      	cmp	r1, r2
 800a02c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a030:	d100      	bne.n	800a034 <memcpy+0xc>
 800a032:	4770      	bx	lr
 800a034:	b510      	push	{r4, lr}
 800a036:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a03a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a03e:	4291      	cmp	r1, r2
 800a040:	d1f9      	bne.n	800a036 <memcpy+0xe>
 800a042:	bd10      	pop	{r4, pc}

0800a044 <_free_r>:
 800a044:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a046:	2900      	cmp	r1, #0
 800a048:	d044      	beq.n	800a0d4 <_free_r+0x90>
 800a04a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a04e:	9001      	str	r0, [sp, #4]
 800a050:	2b00      	cmp	r3, #0
 800a052:	f1a1 0404 	sub.w	r4, r1, #4
 800a056:	bfb8      	it	lt
 800a058:	18e4      	addlt	r4, r4, r3
 800a05a:	f7ff fddd 	bl	8009c18 <__malloc_lock>
 800a05e:	4a1e      	ldr	r2, [pc, #120]	; (800a0d8 <_free_r+0x94>)
 800a060:	9801      	ldr	r0, [sp, #4]
 800a062:	6813      	ldr	r3, [r2, #0]
 800a064:	b933      	cbnz	r3, 800a074 <_free_r+0x30>
 800a066:	6063      	str	r3, [r4, #4]
 800a068:	6014      	str	r4, [r2, #0]
 800a06a:	b003      	add	sp, #12
 800a06c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a070:	f7ff bdd8 	b.w	8009c24 <__malloc_unlock>
 800a074:	42a3      	cmp	r3, r4
 800a076:	d908      	bls.n	800a08a <_free_r+0x46>
 800a078:	6825      	ldr	r5, [r4, #0]
 800a07a:	1961      	adds	r1, r4, r5
 800a07c:	428b      	cmp	r3, r1
 800a07e:	bf01      	itttt	eq
 800a080:	6819      	ldreq	r1, [r3, #0]
 800a082:	685b      	ldreq	r3, [r3, #4]
 800a084:	1949      	addeq	r1, r1, r5
 800a086:	6021      	streq	r1, [r4, #0]
 800a088:	e7ed      	b.n	800a066 <_free_r+0x22>
 800a08a:	461a      	mov	r2, r3
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	b10b      	cbz	r3, 800a094 <_free_r+0x50>
 800a090:	42a3      	cmp	r3, r4
 800a092:	d9fa      	bls.n	800a08a <_free_r+0x46>
 800a094:	6811      	ldr	r1, [r2, #0]
 800a096:	1855      	adds	r5, r2, r1
 800a098:	42a5      	cmp	r5, r4
 800a09a:	d10b      	bne.n	800a0b4 <_free_r+0x70>
 800a09c:	6824      	ldr	r4, [r4, #0]
 800a09e:	4421      	add	r1, r4
 800a0a0:	1854      	adds	r4, r2, r1
 800a0a2:	42a3      	cmp	r3, r4
 800a0a4:	6011      	str	r1, [r2, #0]
 800a0a6:	d1e0      	bne.n	800a06a <_free_r+0x26>
 800a0a8:	681c      	ldr	r4, [r3, #0]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	6053      	str	r3, [r2, #4]
 800a0ae:	440c      	add	r4, r1
 800a0b0:	6014      	str	r4, [r2, #0]
 800a0b2:	e7da      	b.n	800a06a <_free_r+0x26>
 800a0b4:	d902      	bls.n	800a0bc <_free_r+0x78>
 800a0b6:	230c      	movs	r3, #12
 800a0b8:	6003      	str	r3, [r0, #0]
 800a0ba:	e7d6      	b.n	800a06a <_free_r+0x26>
 800a0bc:	6825      	ldr	r5, [r4, #0]
 800a0be:	1961      	adds	r1, r4, r5
 800a0c0:	428b      	cmp	r3, r1
 800a0c2:	bf04      	itt	eq
 800a0c4:	6819      	ldreq	r1, [r3, #0]
 800a0c6:	685b      	ldreq	r3, [r3, #4]
 800a0c8:	6063      	str	r3, [r4, #4]
 800a0ca:	bf04      	itt	eq
 800a0cc:	1949      	addeq	r1, r1, r5
 800a0ce:	6021      	streq	r1, [r4, #0]
 800a0d0:	6054      	str	r4, [r2, #4]
 800a0d2:	e7ca      	b.n	800a06a <_free_r+0x26>
 800a0d4:	b003      	add	sp, #12
 800a0d6:	bd30      	pop	{r4, r5, pc}
 800a0d8:	20002924 	.word	0x20002924

0800a0dc <_malloc_usable_size_r>:
 800a0dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0e0:	1f18      	subs	r0, r3, #4
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	bfbc      	itt	lt
 800a0e6:	580b      	ldrlt	r3, [r1, r0]
 800a0e8:	18c0      	addlt	r0, r0, r3
 800a0ea:	4770      	bx	lr

0800a0ec <_init>:
 800a0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ee:	bf00      	nop
 800a0f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0f2:	bc08      	pop	{r3}
 800a0f4:	469e      	mov	lr, r3
 800a0f6:	4770      	bx	lr

0800a0f8 <_fini>:
 800a0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0fa:	bf00      	nop
 800a0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0fe:	bc08      	pop	{r3}
 800a100:	469e      	mov	lr, r3
 800a102:	4770      	bx	lr
