
CANRx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000108dc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000075c  08010adc  08010adc  00020adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011238  08011238  00030168  2**0
                  CONTENTS
  4 .ARM          00000008  08011238  08011238  00021238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011240  08011240  00030168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011240  08011240  00021240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011244  08011244  00021244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  08011248  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004eb0  20000168  080113b0  00030168  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005018  080113b0  00035018  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030168  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030196  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f0f1  00000000  00000000  000301d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b16  00000000  00000000  0004f2ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001828  00000000  00000000  00053de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001250  00000000  00000000  00055608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e06a  00000000  00000000  00056858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021927  00000000  00000000  000848c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00100991  00000000  00000000  000a61e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006cf0  00000000  00000000  001a6b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001ad86c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000168 	.word	0x20000168
 800021c:	00000000 	.word	0x00000000
 8000220:	08010ac4 	.word	0x08010ac4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000016c 	.word	0x2000016c
 800023c:	08010ac4 	.word	0x08010ac4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b0c2      	sub	sp, #264	; 0x108
 80005e0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005e2:	f000 ffb4 	bl	800154e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005e6:	f000 f9c5 	bl	8000974 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005ea:	f000 fadd 	bl	8000ba8 <MX_GPIO_Init>
	MX_DMA_Init();
 80005ee:	f000 fab5 	bl	8000b5c <MX_DMA_Init>
	MX_CAN1_Init();
 80005f2:	f000 fa27 	bl	8000a44 <MX_CAN1_Init>
	MX_SDMMC1_SD_Init();
 80005f6:	f000 fa5b 	bl	8000ab0 <MX_SDMMC1_SD_Init>
	MX_USART3_UART_Init();
 80005fa:	f000 fa7f 	bl	8000afc <MX_USART3_UART_Init>
	MX_FATFS_Init();
 80005fe:	f008 ffdf 	bl	80095c0 <MX_FATFS_Init>
	MX_USB_DEVICE_Init();
 8000602:	f00e fb3b 	bl	800ec7c <MX_USB_DEVICE_Init>
		USB_TRANSMIT_ERROR,
		RESET_BUFFER,
		RESET_STATE
	} state_t;
	//Starting state is PERIPHERAL_INIT
	state_t state = PERIPHERAL_INIT;
 8000606:	2300      	movs	r3, #0
 8000608:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		switch (state) {
 800060c:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8000610:	2b0a      	cmp	r3, #10
 8000612:	f200 8158 	bhi.w	80008c6 <main+0x2ea>
 8000616:	a201      	add	r2, pc, #4	; (adr r2, 800061c <main+0x40>)
 8000618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800061c:	08000649 	.word	0x08000649
 8000620:	080006c7 	.word	0x080006c7
 8000624:	0800077b 	.word	0x0800077b
 8000628:	080008db 	.word	0x080008db
 800062c:	080008db 	.word	0x080008db
 8000630:	0800078d 	.word	0x0800078d
 8000634:	080008db 	.word	0x080008db
 8000638:	080007d1 	.word	0x080007d1
 800063c:	080008db 	.word	0x080008db
 8000640:	080007f1 	.word	0x080007f1
 8000644:	08000881 	.word	0x08000881
		case PERIPHERAL_INIT:
			buffer1[0] = '\00';
 8000648:	4ba6      	ldr	r3, [pc, #664]	; (80008e4 <main+0x308>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
			buffer2[0] = '\00';
 800064e:	4ba6      	ldr	r3, [pc, #664]	; (80008e8 <main+0x30c>)
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]
			double_buffer_fill_level[0] = 0;
 8000654:	4ba5      	ldr	r3, [pc, #660]	; (80008ec <main+0x310>)
 8000656:	2200      	movs	r2, #0
 8000658:	701a      	strb	r2, [r3, #0]
			double_buffer_fill_level[1] = 0;
 800065a:	4ba4      	ldr	r3, [pc, #656]	; (80008ec <main+0x310>)
 800065c:	2200      	movs	r2, #0
 800065e:	705a      	strb	r2, [r3, #1]
			filling_buffer = 0;
 8000660:	4ba3      	ldr	r3, [pc, #652]	; (80008f0 <main+0x314>)
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]

			printf("Initializing Peripherals...\r\n");
 8000666:	48a3      	ldr	r0, [pc, #652]	; (80008f4 <main+0x318>)
 8000668:	f00f faa6 	bl	800fbb8 <puts>
			HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin,
 800066c:	2200      	movs	r2, #0
 800066e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000672:	48a1      	ldr	r0, [pc, #644]	; (80008f8 <main+0x31c>)
 8000674:	f002 fc44 	bl	8002f00 <HAL_GPIO_WritePin>
					GPIO_PIN_RESET); //Red LED

			//Initializing CAN
			if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000678:	48a0      	ldr	r0, [pc, #640]	; (80008fc <main+0x320>)
 800067a:	f001 f9d1 	bl	8001a20 <HAL_CAN_Start>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d002      	beq.n	800068a <main+0xae>
				Error_Handler();
 8000684:	f000 fc3a 	bl	8000efc <Error_Handler>
 8000688:	e006      	b.n	8000698 <main+0xbc>
			else if (CAN_Filter_Config() != HAL_OK)
 800068a:	f000 fbc3 	bl	8000e14 <CAN_Filter_Config>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <main+0xbc>
				Error_Handler();
 8000694:	f000 fc32 	bl	8000efc <Error_Handler>

			printf("CAN initialization succeeded...\r\n");
 8000698:	4899      	ldr	r0, [pc, #612]	; (8000900 <main+0x324>)
 800069a:	f00f fa8d 	bl	800fbb8 <puts>

			//Mount and Format SD Card
			if (f_mount(&SDFatFS, SDPath, 1) != FR_OK) {
 800069e:	2201      	movs	r2, #1
 80006a0:	4998      	ldr	r1, [pc, #608]	; (8000904 <main+0x328>)
 80006a2:	4899      	ldr	r0, [pc, #612]	; (8000908 <main+0x32c>)
 80006a4:	f00d fcd0 	bl	800e048 <f_mount>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d004      	beq.n	80006b8 <main+0xdc>
				printf("Mounting failed!\r\n");
 80006ae:	4897      	ldr	r0, [pc, #604]	; (800090c <main+0x330>)
 80006b0:	f00f fa82 	bl	800fbb8 <puts>
				Error_Handler();
 80006b4:	f000 fc22 	bl	8000efc <Error_Handler>
			}

			printf("SD initialization succeeded...\r\n");
 80006b8:	4895      	ldr	r0, [pc, #596]	; (8000910 <main+0x334>)
 80006ba:	f00f fa7d 	bl	800fbb8 <puts>

			state = CREATE_LOG_FILE;
 80006be:	2301      	movs	r3, #1
 80006c0:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

			break;
 80006c4:	e10c      	b.n	80008e0 <main+0x304>

		case CREATE_LOG_FILE:
			printf("Creating new log file...\r\n");
 80006c6:	4893      	ldr	r0, [pc, #588]	; (8000914 <main+0x338>)
 80006c8:	f00f fa76 	bl	800fbb8 <puts>

			uint16_t file_number = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
			TCHAR filename[FILENAME_MAX_BYTES];

			if (f_opendir(&dir, "/CAN_DATA") != FR_OK) {
 80006d2:	4991      	ldr	r1, [pc, #580]	; (8000918 <main+0x33c>)
 80006d4:	4891      	ldr	r0, [pc, #580]	; (800091c <main+0x340>)
 80006d6:	f00e f8d8 	bl	800e88a <f_opendir>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d004      	beq.n	80006ea <main+0x10e>
				printf("Failed to open root directory!\r\n");
 80006e0:	488f      	ldr	r0, [pc, #572]	; (8000920 <main+0x344>)
 80006e2:	f00f fa69 	bl	800fbb8 <puts>
				Error_Handler();
 80006e6:	f000 fc09 	bl	8000efc <Error_Handler>
			}
			do {
				f_readdir(&dir, &fno);
 80006ea:	498e      	ldr	r1, [pc, #568]	; (8000924 <main+0x348>)
 80006ec:	488b      	ldr	r0, [pc, #556]	; (800091c <main+0x340>)
 80006ee:	f00e f965 	bl	800e9bc <f_readdir>
				if (fno.fname[0] != 0){
 80006f2:	4b8c      	ldr	r3, [pc, #560]	; (8000924 <main+0x348>)
 80006f4:	7d9b      	ldrb	r3, [r3, #22]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d008      	beq.n	800070c <main+0x130>
					file_number++;
 80006fa:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 80006fe:	3301      	adds	r3, #1
 8000700:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
					printf("File found: %s\n\r", fno.fname); // Print File Name
 8000704:	4988      	ldr	r1, [pc, #544]	; (8000928 <main+0x34c>)
 8000706:	4889      	ldr	r0, [pc, #548]	; (800092c <main+0x350>)
 8000708:	f00f f9f0 	bl	800faec <iprintf>
				}
			} while (fno.fname[0] != 0);
 800070c:	4b85      	ldr	r3, [pc, #532]	; (8000924 <main+0x348>)
 800070e:	7d9b      	ldrb	r3, [r3, #22]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d1ea      	bne.n	80006ea <main+0x10e>

			snprintf(filename, FILENAME_MAX_BYTES, "/CAN_DATA/CAN_%05d.log", file_number);
 8000714:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 8000718:	1d38      	adds	r0, r7, #4
 800071a:	4a85      	ldr	r2, [pc, #532]	; (8000930 <main+0x354>)
 800071c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000720:	f00f f8e2 	bl	800f8e8 <sniprintf>

			f_closedir(&dir);
 8000724:	487d      	ldr	r0, [pc, #500]	; (800091c <main+0x340>)
 8000726:	f00e f923 	bl	800e970 <f_closedir>
			//Open file for writing (Create)
			if (f_open(&SDFile, filename, FA_CREATE_ALWAYS | FA_WRITE)
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	220a      	movs	r2, #10
 800072e:	4619      	mov	r1, r3
 8000730:	4880      	ldr	r0, [pc, #512]	; (8000934 <main+0x358>)
 8000732:	f00d fccf 	bl	800e0d4 <f_open>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d006      	beq.n	800074a <main+0x16e>
					!= FR_OK) {
				printf("Failed to create new log file: %s ...!\r\n", filename);
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	4619      	mov	r1, r3
 8000740:	487d      	ldr	r0, [pc, #500]	; (8000938 <main+0x35c>)
 8000742:	f00f f9d3 	bl	800faec <iprintf>
				Error_Handler();
 8000746:	f000 fbd9 	bl	8000efc <Error_Handler>
			}
			printf("Starting new log file: %s ...\r\n", filename);
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	4619      	mov	r1, r3
 800074e:	487b      	ldr	r0, [pc, #492]	; (800093c <main+0x360>)
 8000750:	f00f f9cc 	bl	800faec <iprintf>

			if (HAL_CAN_ActivateNotification(&hcan1,
 8000754:	2102      	movs	r1, #2
 8000756:	4869      	ldr	r0, [pc, #420]	; (80008fc <main+0x320>)
 8000758:	f001 fb01 	bl	8001d5e <HAL_CAN_ActivateNotification>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <main+0x18a>
					CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
				/* Notification Error */
				Error_Handler();
 8000762:	f000 fbcb 	bl	8000efc <Error_Handler>
			}

			HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_SET); // Green LED
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800076c:	4862      	ldr	r0, [pc, #392]	; (80008f8 <main+0x31c>)
 800076e:	f002 fbc7 	bl	8002f00 <HAL_GPIO_WritePin>

			state = STANDBY;
 8000772:	2302      	movs	r3, #2
 8000774:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
			break;
 8000778:	e0b2      	b.n	80008e0 <main+0x304>

		case STANDBY:
			if (buffer_filled) {
 800077a:	4b71      	ldr	r3, [pc, #452]	; (8000940 <main+0x364>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	f000 80ad 	beq.w	80008de <main+0x302>
				state = SD_CARD_WRITE;
 8000784:	2305      	movs	r3, #5
 8000786:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
			}
			break;
 800078a:	e0a8      	b.n	80008de <main+0x302>

		case SWITCH_BUFFER:
			break;

		case SD_CARD_WRITE:
			res = f_write(&SDFile, filling_buffer ? buffer1 : buffer2,
 800078c:	4b58      	ldr	r3, [pc, #352]	; (80008f0 <main+0x314>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <main+0x1bc>
 8000794:	4953      	ldr	r1, [pc, #332]	; (80008e4 <main+0x308>)
 8000796:	e000      	b.n	800079a <main+0x1be>
 8000798:	4953      	ldr	r1, [pc, #332]	; (80008e8 <main+0x30c>)
 800079a:	4b6a      	ldr	r3, [pc, #424]	; (8000944 <main+0x368>)
 800079c:	f44f 52a4 	mov.w	r2, #5248	; 0x1480
 80007a0:	4864      	ldr	r0, [pc, #400]	; (8000934 <main+0x358>)
 80007a2:	f00d fe55 	bl	800e450 <f_write>
 80007a6:	4603      	mov	r3, r0
 80007a8:	461a      	mov	r2, r3
 80007aa:	4b67      	ldr	r3, [pc, #412]	; (8000948 <main+0x36c>)
 80007ac:	701a      	strb	r2, [r3, #0]
			ENCODED_CAN_SIZE_BYTES * CAN_MESSAGES_TO_BUFFER,
					(void*) &byteswritten);
			if ((byteswritten == 0) || (res != FR_OK)) {
 80007ae:	4b65      	ldr	r3, [pc, #404]	; (8000944 <main+0x368>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d003      	beq.n	80007be <main+0x1e2>
 80007b6:	4b64      	ldr	r3, [pc, #400]	; (8000948 <main+0x36c>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d004      	beq.n	80007c8 <main+0x1ec>
				printf("\r\nWriting Failed!\r\n");
 80007be:	4863      	ldr	r0, [pc, #396]	; (800094c <main+0x370>)
 80007c0:	f00f f9fa 	bl	800fbb8 <puts>
				Error_Handler();
 80007c4:	f000 fb9a 	bl	8000efc <Error_Handler>
			}

			state = USB_TRANSMIT;
 80007c8:	2307      	movs	r3, #7
 80007ca:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
			break;
 80007ce:	e087      	b.n	80008e0 <main+0x304>

		case SD_CARD_WRITE_ERROR:
			break;

		case USB_TRANSMIT:
			CDC_Transmit_FS(filling_buffer ? buffer1 : buffer2,
 80007d0:	4b47      	ldr	r3, [pc, #284]	; (80008f0 <main+0x314>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <main+0x200>
 80007d8:	4b42      	ldr	r3, [pc, #264]	; (80008e4 <main+0x308>)
 80007da:	e000      	b.n	80007de <main+0x202>
 80007dc:	4b42      	ldr	r3, [pc, #264]	; (80008e8 <main+0x30c>)
 80007de:	f44f 51a4 	mov.w	r1, #5248	; 0x1480
 80007e2:	4618      	mov	r0, r3
 80007e4:	f00e fb08 	bl	800edf8 <CDC_Transmit_FS>
			ENCODED_CAN_SIZE_BYTES * CAN_MESSAGES_TO_BUFFER);

			state = RESET_BUFFER;
 80007e8:	2309      	movs	r3, #9
 80007ea:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
			break;
 80007ee:	e077      	b.n	80008e0 <main+0x304>

		case USB_TRANSMIT_ERROR:
			break;

		case RESET_BUFFER:
			buffer_emptyings++;
 80007f0:	4b57      	ldr	r3, [pc, #348]	; (8000950 <main+0x374>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	3301      	adds	r3, #1
 80007f6:	4a56      	ldr	r2, [pc, #344]	; (8000950 <main+0x374>)
 80007f8:	6013      	str	r3, [r2, #0]
			printf("emptied buffer %d\n\r", !filling_buffer);
 80007fa:	4b3d      	ldr	r3, [pc, #244]	; (80008f0 <main+0x314>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	bf0c      	ite	eq
 8000802:	2301      	moveq	r3, #1
 8000804:	2300      	movne	r3, #0
 8000806:	b2db      	uxtb	r3, r3
 8000808:	4619      	mov	r1, r3
 800080a:	4852      	ldr	r0, [pc, #328]	; (8000954 <main+0x378>)
 800080c:	f00f f96e 	bl	800faec <iprintf>
			printf("buffers emptied: %ld\n\r", buffer_emptyings);
 8000810:	4b4f      	ldr	r3, [pc, #316]	; (8000950 <main+0x374>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4619      	mov	r1, r3
 8000816:	4850      	ldr	r0, [pc, #320]	; (8000958 <main+0x37c>)
 8000818:	f00f f968 	bl	800faec <iprintf>
			printf("sizeof: %ld\n\r", byteswritten);
 800081c:	4b49      	ldr	r3, [pc, #292]	; (8000944 <main+0x368>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4619      	mov	r1, r3
 8000822:	484e      	ldr	r0, [pc, #312]	; (800095c <main+0x380>)
 8000824:	f00f f962 	bl	800faec <iprintf>

			total_size += byteswritten;
 8000828:	4b4d      	ldr	r3, [pc, #308]	; (8000960 <main+0x384>)
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	4b45      	ldr	r3, [pc, #276]	; (8000944 <main+0x368>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4413      	add	r3, r2
 8000832:	4a4b      	ldr	r2, [pc, #300]	; (8000960 <main+0x384>)
 8000834:	6013      	str	r3, [r2, #0]
			if (filling_buffer) {
 8000836:	4b2e      	ldr	r3, [pc, #184]	; (80008f0 <main+0x314>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d003      	beq.n	8000846 <main+0x26a>
				buffer1[0] = '\00';
 800083e:	4b29      	ldr	r3, [pc, #164]	; (80008e4 <main+0x308>)
 8000840:	2200      	movs	r2, #0
 8000842:	701a      	strb	r2, [r3, #0]
 8000844:	e002      	b.n	800084c <main+0x270>
			} else {
				buffer2[0] = '\00';
 8000846:	4b28      	ldr	r3, [pc, #160]	; (80008e8 <main+0x30c>)
 8000848:	2200      	movs	r2, #0
 800084a:	701a      	strb	r2, [r3, #0]
			}
			double_buffer_fill_level[!filling_buffer] = 0;
 800084c:	4b28      	ldr	r3, [pc, #160]	; (80008f0 <main+0x314>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	bf0c      	ite	eq
 8000854:	2301      	moveq	r3, #1
 8000856:	2300      	movne	r3, #0
 8000858:	b2db      	uxtb	r3, r3
 800085a:	461a      	mov	r2, r3
 800085c:	4b23      	ldr	r3, [pc, #140]	; (80008ec <main+0x310>)
 800085e:	2100      	movs	r1, #0
 8000860:	5499      	strb	r1, [r3, r2]
			buffer_filled = 0;
 8000862:	4b37      	ldr	r3, [pc, #220]	; (8000940 <main+0x364>)
 8000864:	2200      	movs	r2, #0
 8000866:	701a      	strb	r2, [r3, #0]

			if (buffer_emptyings >= MAX_BUFFER_EMPTYINGS) {
 8000868:	4b39      	ldr	r3, [pc, #228]	; (8000950 <main+0x374>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b7f      	cmp	r3, #127	; 0x7f
 800086e:	d903      	bls.n	8000878 <main+0x29c>
				state = RESET_STATE;
 8000870:	230a      	movs	r3, #10
 8000872:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
			}
			else {
				state = STANDBY;
			}
			break;
 8000876:	e033      	b.n	80008e0 <main+0x304>
				state = STANDBY;
 8000878:	2302      	movs	r3, #2
 800087a:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
			break;
 800087e:	e02f      	b.n	80008e0 <main+0x304>

		case RESET_STATE:
			HAL_CAN_Stop(&hcan1);
 8000880:	481e      	ldr	r0, [pc, #120]	; (80008fc <main+0x320>)
 8000882:	f001 f911 	bl	8001aa8 <HAL_CAN_Stop>
			HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin,
 8000886:	2200      	movs	r2, #0
 8000888:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800088c:	481a      	ldr	r0, [pc, #104]	; (80008f8 <main+0x31c>)
 800088e:	f002 fb37 	bl	8002f00 <HAL_GPIO_WritePin>
					GPIO_PIN_RESET); //Red LED

			printf("%d Messages received!",
 8000892:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000896:	4833      	ldr	r0, [pc, #204]	; (8000964 <main+0x388>)
 8000898:	f00f f928 	bl	800faec <iprintf>
			MAX_BUFFER_EMPTYINGS * CAN_MESSAGES_TO_BUFFER);
			printf("total sizeof: %ld\n\r", total_size);
 800089c:	4b30      	ldr	r3, [pc, #192]	; (8000960 <main+0x384>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4619      	mov	r1, r3
 80008a2:	4831      	ldr	r0, [pc, #196]	; (8000968 <main+0x38c>)
 80008a4:	f00f f922 	bl	800faec <iprintf>

			printf("\r\nUnmounting!\r\n");
 80008a8:	4830      	ldr	r0, [pc, #192]	; (800096c <main+0x390>)
 80008aa:	f00f f985 	bl	800fbb8 <puts>
			f_close(&SDFile);
 80008ae:	4821      	ldr	r0, [pc, #132]	; (8000934 <main+0x358>)
 80008b0:	f00d ffc1 	bl	800e836 <f_close>
			f_mount(&SDFatFS, (TCHAR const*) NULL, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2100      	movs	r1, #0
 80008b8:	4813      	ldr	r0, [pc, #76]	; (8000908 <main+0x32c>)
 80008ba:	f00d fbc5 	bl	800e048 <f_mount>

			state = STANDBY;
 80008be:	2302      	movs	r3, #2
 80008c0:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
			break;
 80008c4:	e00c      	b.n	80008e0 <main+0x304>

		default:
			printf("CAN logger in unknown state!");
 80008c6:	482a      	ldr	r0, [pc, #168]	; (8000970 <main+0x394>)
 80008c8:	f00f f910 	bl	800faec <iprintf>
			HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin,
 80008cc:	2200      	movs	r2, #0
 80008ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008d2:	4809      	ldr	r0, [pc, #36]	; (80008f8 <main+0x31c>)
 80008d4:	f002 fb14 	bl	8002f00 <HAL_GPIO_WritePin>
					GPIO_PIN_RESET); // Red LED
			break;
 80008d8:	e002      	b.n	80008e0 <main+0x304>
			break;
 80008da:	bf00      	nop
 80008dc:	e696      	b.n	800060c <main+0x30>
			break;
 80008de:	bf00      	nop
		switch (state) {
 80008e0:	e694      	b.n	800060c <main+0x30>
 80008e2:	bf00      	nop
 80008e4:	2000051c 	.word	0x2000051c
 80008e8:	200019a0 	.word	0x200019a0
 80008ec:	20002e24 	.word	0x20002e24
 80008f0:	20002e26 	.word	0x20002e26
 80008f4:	08010adc 	.word	0x08010adc
 80008f8:	40021400 	.word	0x40021400
 80008fc:	20000184 	.word	0x20000184
 8000900:	08010afc 	.word	0x08010afc
 8000904:	20002e40 	.word	0x20002e40
 8000908:	20002e44 	.word	0x20002e44
 800090c:	08010b20 	.word	0x08010b20
 8000910:	08010b34 	.word	0x08010b34
 8000914:	08010b54 	.word	0x08010b54
 8000918:	08010b70 	.word	0x08010b70
 800091c:	2000037c 	.word	0x2000037c
 8000920:	08010b7c 	.word	0x08010b7c
 8000924:	200003b0 	.word	0x200003b0
 8000928:	200003c6 	.word	0x200003c6
 800092c:	08010b9c 	.word	0x08010b9c
 8000930:	08010bb0 	.word	0x08010bb0
 8000934:	20003078 	.word	0x20003078
 8000938:	08010bc8 	.word	0x08010bc8
 800093c:	08010bf4 	.word	0x08010bf4
 8000940:	20002e2c 	.word	0x20002e2c
 8000944:	200004f4 	.word	0x200004f4
 8000948:	20000378 	.word	0x20000378
 800094c:	08010c14 	.word	0x08010c14
 8000950:	20002e28 	.word	0x20002e28
 8000954:	08010c28 	.word	0x08010c28
 8000958:	08010c3c 	.word	0x08010c3c
 800095c:	08010c54 	.word	0x08010c54
 8000960:	20002e30 	.word	0x20002e30
 8000964:	08010c64 	.word	0x08010c64
 8000968:	08010c7c 	.word	0x08010c7c
 800096c:	08010c90 	.word	0x08010c90
 8000970:	08010ca0 	.word	0x08010ca0

08000974 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b094      	sub	sp, #80	; 0x50
 8000978:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	2234      	movs	r2, #52	; 0x34
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f00f f92f 	bl	800fbe6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000988:	f107 0308 	add.w	r3, r7, #8
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000998:	4b28      	ldr	r3, [pc, #160]	; (8000a3c <SystemClock_Config+0xc8>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099c:	4a27      	ldr	r2, [pc, #156]	; (8000a3c <SystemClock_Config+0xc8>)
 800099e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a2:	6413      	str	r3, [r2, #64]	; 0x40
 80009a4:	4b25      	ldr	r3, [pc, #148]	; (8000a3c <SystemClock_Config+0xc8>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009b0:	4b23      	ldr	r3, [pc, #140]	; (8000a40 <SystemClock_Config+0xcc>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009b8:	4a21      	ldr	r2, [pc, #132]	; (8000a40 <SystemClock_Config+0xcc>)
 80009ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009be:	6013      	str	r3, [r2, #0]
 80009c0:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <SystemClock_Config+0xcc>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009cc:	2301      	movs	r3, #1
 80009ce:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009d4:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d6:	2302      	movs	r3, #2
 80009d8:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009de:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 80009e0:	2304      	movs	r3, #4
 80009e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 96;
 80009e4:	2360      	movs	r3, #96	; 0x60
 80009e6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009e8:	2304      	movs	r3, #4
 80009ea:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80009ec:	2304      	movs	r3, #4
 80009ee:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80009f0:	2302      	movs	r3, #2
 80009f2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4618      	mov	r0, r3
 80009fa:	f003 fd53 	bl	80044a4 <HAL_RCC_OscConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0x94>
		Error_Handler();
 8000a04:	f000 fa7a 	bl	8000efc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a08:	230f      	movs	r3, #15
 8000a0a:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a18:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000a1e:	f107 0308 	add.w	r3, r7, #8
 8000a22:	2101      	movs	r1, #1
 8000a24:	4618      	mov	r0, r3
 8000a26:	f003 ffeb 	bl	8004a00 <HAL_RCC_ClockConfig>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <SystemClock_Config+0xc0>
		Error_Handler();
 8000a30:	f000 fa64 	bl	8000efc <Error_Handler>
	}
}
 8000a34:	bf00      	nop
 8000a36:	3750      	adds	r7, #80	; 0x50
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40007000 	.word	0x40007000

08000a44 <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8000a48:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <MX_CAN1_Init+0x64>)
 8000a4a:	4a18      	ldr	r2, [pc, #96]	; (8000aac <MX_CAN1_Init+0x68>)
 8000a4c:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 3;
 8000a4e:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <MX_CAN1_Init+0x64>)
 8000a50:	2203      	movs	r2, #3
 8000a52:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <MX_CAN1_Init+0x64>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <MX_CAN1_Init+0x64>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_CAN1_Init+0x64>)
 8000a62:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000a66:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_CAN1_Init+0x64>)
 8000a6a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a6e:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a70:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <MX_CAN1_Init+0x64>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8000a76:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_CAN1_Init+0x64>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <MX_CAN1_Init+0x64>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_CAN1_Init+0x64>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a88:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <MX_CAN1_Init+0x64>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_CAN1_Init+0x64>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8000a94:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <MX_CAN1_Init+0x64>)
 8000a96:	f000 fddb 	bl	8001650 <HAL_CAN_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_CAN1_Init+0x60>
		Error_Handler();
 8000aa0:	f000 fa2c 	bl	8000efc <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000184 	.word	0x20000184
 8000aac:	40006400 	.word	0x40006400

08000ab0 <MX_SDMMC1_SD_Init>:
/**
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_SDMMC1_SD_Init+0x44>)
 8000ab6:	4a10      	ldr	r2, [pc, #64]	; (8000af8 <MX_SDMMC1_SD_Init+0x48>)
 8000ab8:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_SDMMC1_SD_Init+0x44>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_SDMMC1_SD_Init+0x44>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <MX_SDMMC1_SD_Init+0x44>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	60da      	str	r2, [r3, #12]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_SDMMC1_SD_Init+0x44>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <MX_SDMMC1_SD_Init+0x44>)
 8000ad4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ad8:	615a      	str	r2, [r3, #20]
	hsd1.Init.ClockDiv = 0;
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_SDMMC1_SD_Init+0x44>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDMMC1_Init 2 */
	if (HAL_SD_Init(&hsd1) != HAL_OK) {
 8000ae0:	4804      	ldr	r0, [pc, #16]	; (8000af4 <MX_SDMMC1_SD_Init+0x44>)
 8000ae2:	f004 fddb 	bl	800569c <HAL_SD_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_SDMMC1_SD_Init+0x40>
		Error_Handler();
 8000aec:	f000 fa06 	bl	8000efc <Error_Handler>
	}
	/* USER CODE END SDMMC1_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	200001ac 	.word	0x200001ac
 8000af8:	40012c00 	.word	0x40012c00

08000afc <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <MX_USART3_UART_Init+0x58>)
 8000b02:	4a15      	ldr	r2, [pc, #84]	; (8000b58 <MX_USART3_UART_Init+0x5c>)
 8000b04:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000b06:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <MX_USART3_UART_Init+0x58>)
 8000b08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b0c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0e:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_USART3_UART_Init+0x58>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <MX_USART3_UART_Init+0x58>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <MX_USART3_UART_Init+0x58>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <MX_USART3_UART_Init+0x58>)
 8000b22:	220c      	movs	r2, #12
 8000b24:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <MX_USART3_UART_Init+0x58>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MX_USART3_UART_Init+0x58>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b32:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <MX_USART3_UART_Init+0x58>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <MX_USART3_UART_Init+0x58>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000b3e:	4805      	ldr	r0, [pc, #20]	; (8000b54 <MX_USART3_UART_Init+0x58>)
 8000b40:	f005 fed4 	bl	80068ec <HAL_UART_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_USART3_UART_Init+0x52>
		Error_Handler();
 8000b4a:	f000 f9d7 	bl	8000efc <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200002f0 	.word	0x200002f0
 8000b58:	40004800 	.word	0x40004800

08000b5c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <MX_DMA_Init+0x48>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a0f      	ldr	r2, [pc, #60]	; (8000ba4 <MX_DMA_Init+0x48>)
 8000b68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <MX_DMA_Init+0x48>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	203b      	movs	r0, #59	; 0x3b
 8000b80:	f001 fc1d 	bl	80023be <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000b84:	203b      	movs	r0, #59	; 0x3b
 8000b86:	f001 fc36 	bl	80023f6 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2045      	movs	r0, #69	; 0x45
 8000b90:	f001 fc15 	bl	80023be <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000b94:	2045      	movs	r0, #69	; 0x45
 8000b96:	f001 fc2e 	bl	80023f6 <HAL_NVIC_EnableIRQ>

}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40023800 	.word	0x40023800

08000ba8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08c      	sub	sp, #48	; 0x30
 8000bac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbe:	4b56      	ldr	r3, [pc, #344]	; (8000d18 <MX_GPIO_Init+0x170>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a55      	ldr	r2, [pc, #340]	; (8000d18 <MX_GPIO_Init+0x170>)
 8000bc4:	f043 0304 	orr.w	r3, r3, #4
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b53      	ldr	r3, [pc, #332]	; (8000d18 <MX_GPIO_Init+0x170>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0304 	and.w	r3, r3, #4
 8000bd2:	61bb      	str	r3, [r7, #24]
 8000bd4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000bd6:	4b50      	ldr	r3, [pc, #320]	; (8000d18 <MX_GPIO_Init+0x170>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a4f      	ldr	r2, [pc, #316]	; (8000d18 <MX_GPIO_Init+0x170>)
 8000bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b4d      	ldr	r3, [pc, #308]	; (8000d18 <MX_GPIO_Init+0x170>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bea:	617b      	str	r3, [r7, #20]
 8000bec:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000bee:	4b4a      	ldr	r3, [pc, #296]	; (8000d18 <MX_GPIO_Init+0x170>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a49      	ldr	r2, [pc, #292]	; (8000d18 <MX_GPIO_Init+0x170>)
 8000bf4:	f043 0320 	orr.w	r3, r3, #32
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b47      	ldr	r3, [pc, #284]	; (8000d18 <MX_GPIO_Init+0x170>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0320 	and.w	r3, r3, #32
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000c06:	4b44      	ldr	r3, [pc, #272]	; (8000d18 <MX_GPIO_Init+0x170>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a43      	ldr	r2, [pc, #268]	; (8000d18 <MX_GPIO_Init+0x170>)
 8000c0c:	f043 0308 	orr.w	r3, r3, #8
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b41      	ldr	r3, [pc, #260]	; (8000d18 <MX_GPIO_Init+0x170>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0308 	and.w	r3, r3, #8
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000c1e:	4b3e      	ldr	r3, [pc, #248]	; (8000d18 <MX_GPIO_Init+0x170>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a3d      	ldr	r2, [pc, #244]	; (8000d18 <MX_GPIO_Init+0x170>)
 8000c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b3b      	ldr	r3, [pc, #236]	; (8000d18 <MX_GPIO_Init+0x170>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	4b38      	ldr	r3, [pc, #224]	; (8000d18 <MX_GPIO_Init+0x170>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a37      	ldr	r2, [pc, #220]	; (8000d18 <MX_GPIO_Init+0x170>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b35      	ldr	r3, [pc, #212]	; (8000d18 <MX_GPIO_Init+0x170>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4e:	4b32      	ldr	r3, [pc, #200]	; (8000d18 <MX_GPIO_Init+0x170>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a31      	ldr	r2, [pc, #196]	; (8000d18 <MX_GPIO_Init+0x170>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b2f      	ldr	r3, [pc, #188]	; (8000d18 <MX_GPIO_Init+0x170>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c6c:	482b      	ldr	r0, [pc, #172]	; (8000d1c <MX_GPIO_Init+0x174>)
 8000c6e:	f002 f947 	bl	8002f00 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8000c72:	2200      	movs	r2, #0
 8000c74:	2140      	movs	r1, #64	; 0x40
 8000c76:	482a      	ldr	r0, [pc, #168]	; (8000d20 <MX_GPIO_Init+0x178>)
 8000c78:	f002 f942 	bl	8002f00 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2180      	movs	r1, #128	; 0x80
 8000c80:	4828      	ldr	r0, [pc, #160]	; (8000d24 <MX_GPIO_Init+0x17c>)
 8000c82:	f002 f93d 	bl	8002f00 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c8a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c8c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c90:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4822      	ldr	r0, [pc, #136]	; (8000d28 <MX_GPIO_Init+0x180>)
 8000c9e:	f001 ff6b 	bl	8002b78 <HAL_GPIO_Init>

	/*Configure GPIO pin : Error_LED_Pin */
	GPIO_InitStruct.Pin = Error_LED_Pin;
 8000ca2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(Error_LED_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 031c 	add.w	r3, r7, #28
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4818      	ldr	r0, [pc, #96]	; (8000d1c <MX_GPIO_Init+0x174>)
 8000cbc:	f001 ff5c 	bl	8002b78 <HAL_GPIO_Init>

	/*Configure GPIO pins : SD_CD_Pin USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = SD_CD_Pin | USB_OverCurrent_Pin;
 8000cc0:	2384      	movs	r3, #132	; 0x84
 8000cc2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4813      	ldr	r0, [pc, #76]	; (8000d20 <MX_GPIO_Init+0x178>)
 8000cd4:	f001 ff50 	bl	8002b78 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000cd8:	2340      	movs	r3, #64	; 0x40
 8000cda:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ce8:	f107 031c 	add.w	r3, r7, #28
 8000cec:	4619      	mov	r1, r3
 8000cee:	480c      	ldr	r0, [pc, #48]	; (8000d20 <MX_GPIO_Init+0x178>)
 8000cf0:	f001 ff42 	bl	8002b78 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d04:	f107 031c 	add.w	r3, r7, #28
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4806      	ldr	r0, [pc, #24]	; (8000d24 <MX_GPIO_Init+0x17c>)
 8000d0c:	f001 ff34 	bl	8002b78 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000d10:	bf00      	nop
 8000d12:	3730      	adds	r7, #48	; 0x30
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40021400 	.word	0x40021400
 8000d20:	40021800 	.word	0x40021800
 8000d24:	40020400 	.word	0x40020400
 8000d28:	40020800 	.word	0x40020800

08000d2c <Get_and_Append_CAN_Message_to_Buffer>:

/* USER CODE BEGIN 4 */
void Get_and_Append_CAN_Message_to_Buffer() {
 8000d2c:	b5b0      	push	{r4, r5, r7, lr}
 8000d2e:	b088      	sub	sp, #32
 8000d30:	af06      	add	r7, sp, #24
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_msg)
 8000d32:	4b2f      	ldr	r3, [pc, #188]	; (8000df0 <Get_and_Append_CAN_Message_to_Buffer+0xc4>)
 8000d34:	4a2f      	ldr	r2, [pc, #188]	; (8000df4 <Get_and_Append_CAN_Message_to_Buffer+0xc8>)
 8000d36:	2100      	movs	r1, #0
 8000d38:	482f      	ldr	r0, [pc, #188]	; (8000df8 <Get_and_Append_CAN_Message_to_Buffer+0xcc>)
 8000d3a:	f000 fefe 	bl	8001b3a <HAL_CAN_GetRxMessage>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <Get_and_Append_CAN_Message_to_Buffer+0x1c>
			!= HAL_OK)
		Error_Handler();
 8000d44:	f000 f8da 	bl	8000efc <Error_Handler>

	uint16_t data1 = (rcvd_msg[0] << 8) + rcvd_msg[1];
 8000d48:	4b29      	ldr	r3, [pc, #164]	; (8000df0 <Get_and_Append_CAN_Message_to_Buffer+0xc4>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	021b      	lsls	r3, r3, #8
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	4b27      	ldr	r3, [pc, #156]	; (8000df0 <Get_and_Append_CAN_Message_to_Buffer+0xc4>)
 8000d54:	785b      	ldrb	r3, [r3, #1]
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	4413      	add	r3, r2
 8000d5a:	80fb      	strh	r3, [r7, #6]
	uint16_t data2 = (rcvd_msg[2] << 8) + rcvd_msg[3];
 8000d5c:	4b24      	ldr	r3, [pc, #144]	; (8000df0 <Get_and_Append_CAN_Message_to_Buffer+0xc4>)
 8000d5e:	789b      	ldrb	r3, [r3, #2]
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	021b      	lsls	r3, r3, #8
 8000d64:	b29a      	uxth	r2, r3
 8000d66:	4b22      	ldr	r3, [pc, #136]	; (8000df0 <Get_and_Append_CAN_Message_to_Buffer+0xc4>)
 8000d68:	78db      	ldrb	r3, [r3, #3]
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	4413      	add	r3, r2
 8000d6e:	80bb      	strh	r3, [r7, #4]
	uint16_t data3 = (rcvd_msg[4] << 8) + rcvd_msg[5];
 8000d70:	4b1f      	ldr	r3, [pc, #124]	; (8000df0 <Get_and_Append_CAN_Message_to_Buffer+0xc4>)
 8000d72:	791b      	ldrb	r3, [r3, #4]
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	021b      	lsls	r3, r3, #8
 8000d78:	b29a      	uxth	r2, r3
 8000d7a:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <Get_and_Append_CAN_Message_to_Buffer+0xc4>)
 8000d7c:	795b      	ldrb	r3, [r3, #5]
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	4413      	add	r3, r2
 8000d82:	807b      	strh	r3, [r7, #2]
	uint16_t data4 = (rcvd_msg[6] << 8) + rcvd_msg[7];
 8000d84:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <Get_and_Append_CAN_Message_to_Buffer+0xc4>)
 8000d86:	799b      	ldrb	r3, [r3, #6]
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	021b      	lsls	r3, r3, #8
 8000d8c:	b29a      	uxth	r2, r3
 8000d8e:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <Get_and_Append_CAN_Message_to_Buffer+0xc4>)
 8000d90:	79db      	ldrb	r3, [r3, #7]
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	4413      	add	r3, r2
 8000d96:	803b      	strh	r3, [r7, #0]

	snprintf(encodedData, ENCODED_CAN_SIZE_BYTES + 1,
 8000d98:	f000 fc2a 	bl	80015f0 <HAL_GetTick>
 8000d9c:	4605      	mov	r5, r0
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <Get_and_Append_CAN_Message_to_Buffer+0xc8>)
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	88fa      	ldrh	r2, [r7, #6]
 8000da4:	88b9      	ldrh	r1, [r7, #4]
 8000da6:	8878      	ldrh	r0, [r7, #2]
 8000da8:	883c      	ldrh	r4, [r7, #0]
 8000daa:	9404      	str	r4, [sp, #16]
 8000dac:	9003      	str	r0, [sp, #12]
 8000dae:	9102      	str	r1, [sp, #8]
 8000db0:	9201      	str	r2, [sp, #4]
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	462b      	mov	r3, r5
 8000db6:	4a11      	ldr	r2, [pc, #68]	; (8000dfc <Get_and_Append_CAN_Message_to_Buffer+0xd0>)
 8000db8:	212a      	movs	r1, #42	; 0x2a
 8000dba:	4811      	ldr	r0, [pc, #68]	; (8000e00 <Get_and_Append_CAN_Message_to_Buffer+0xd4>)
 8000dbc:	f00e fd94 	bl	800f8e8 <sniprintf>
			"(%010ld) X %08lX#%04X%04X%04X%04X\n", HAL_GetTick(),
			RxHeader.ExtId, data1, data2, data3, data4);

	strcat(filling_buffer ? buffer2 : buffer1, encodedData);
 8000dc0:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <Get_and_Append_CAN_Message_to_Buffer+0xd8>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <Get_and_Append_CAN_Message_to_Buffer+0xa0>
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <Get_and_Append_CAN_Message_to_Buffer+0xdc>)
 8000dca:	e000      	b.n	8000dce <Get_and_Append_CAN_Message_to_Buffer+0xa2>
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <Get_and_Append_CAN_Message_to_Buffer+0xe0>)
 8000dce:	490c      	ldr	r1, [pc, #48]	; (8000e00 <Get_and_Append_CAN_Message_to_Buffer+0xd4>)
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f00e fef9 	bl	800fbc8 <strcat>
	double_buffer_fill_level[filling_buffer]++;
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <Get_and_Append_CAN_Message_to_Buffer+0xd8>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	4a0d      	ldr	r2, [pc, #52]	; (8000e10 <Get_and_Append_CAN_Message_to_Buffer+0xe4>)
 8000ddc:	5cd2      	ldrb	r2, [r2, r3]
 8000dde:	3201      	adds	r2, #1
 8000de0:	b2d1      	uxtb	r1, r2
 8000de2:	4a0b      	ldr	r2, [pc, #44]	; (8000e10 <Get_and_Append_CAN_Message_to_Buffer+0xe4>)
 8000de4:	54d1      	strb	r1, [r2, r3]
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bdb0      	pop	{r4, r5, r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000514 	.word	0x20000514
 8000df4:	200004f8 	.word	0x200004f8
 8000df8:	20000184 	.word	0x20000184
 8000dfc:	08010cc0 	.word	0x08010cc0
 8000e00:	200004c8 	.word	0x200004c8
 8000e04:	20002e26 	.word	0x20002e26
 8000e08:	200019a0 	.word	0x200019a0
 8000e0c:	2000051c 	.word	0x2000051c
 8000e10:	20002e24 	.word	0x20002e24

08000e14 <CAN_Filter_Config>:

HAL_StatusTypeDef CAN_Filter_Config(void) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08c      	sub	sp, #48	; 0x30
 8000e18:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filter;

	uint32_t filter_mask = 0x00000000;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t filter_id = 0x000A0000;
 8000e1e:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 8000e22:	62bb      	str	r3, [r7, #40]	; 0x28

	filter.FilterIdHigh = ((filter_id << 5) | (filter_id >> (32 - 5))) & 0xFFFF; // STID[10:0] & EXTID[17:13]
 8000e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e26:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = (filter_id >> (11 - 3)) & 0xFFF8; // EXID[12:5] & 3 Reserved bits
 8000e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e30:	0a1a      	lsrs	r2, r3, #8
 8000e32:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000e36:	4013      	ands	r3, r2
 8000e38:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = ((filter_mask << 5) | (filter_mask >> (32 - 5)))
 8000e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e3c:	ea4f 63f3 	mov.w	r3, r3, ror #27
			& 0xFFFF;
 8000e40:	b29b      	uxth	r3, r3
	filter.FilterMaskIdHigh = ((filter_mask << 5) | (filter_mask >> (32 - 5)))
 8000e42:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = (filter_mask >> (11 - 3)) & 0xFFF8;
 8000e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e46:	0a1a      	lsrs	r2, r3, #8
 8000e48:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	60fb      	str	r3, [r7, #12]

	filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	613b      	str	r3, [r7, #16]
	filter.FilterBank = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61bb      	str	r3, [r7, #24]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	61fb      	str	r3, [r7, #28]
	filter.FilterActivation = ENABLE;
 8000e60:	2301      	movs	r3, #1
 8000e62:	623b      	str	r3, [r7, #32]

	return HAL_CAN_ConfigFilter(&hcan1, &filter);
 8000e64:	463b      	mov	r3, r7
 8000e66:	4619      	mov	r1, r3
 8000e68:	4803      	ldr	r0, [pc, #12]	; (8000e78 <CAN_Filter_Config+0x64>)
 8000e6a:	f000 fced 	bl	8001848 <HAL_CAN_ConfigFilter>
 8000e6e:	4603      	mov	r3, r0
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3730      	adds	r7, #48	; 0x30
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000184 	.word	0x20000184

08000e7c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
	if (double_buffer_fill_level[0] == CAN_MESSAGES_TO_BUFFER
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b80      	cmp	r3, #128	; 0x80
 8000e8a:	d105      	bne.n	8000e98 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
			&& double_buffer_fill_level[1] == CAN_MESSAGES_TO_BUFFER)
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000e8e:	785b      	ldrb	r3, [r3, #1]
 8000e90:	2b80      	cmp	r3, #128	; 0x80
 8000e92:	d101      	bne.n	8000e98 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
		Error_Handler();
 8000e94:	f000 f832 	bl	8000efc <Error_Handler>

	Get_and_Append_CAN_Message_to_Buffer();
 8000e98:	f7ff ff48 	bl	8000d2c <Get_and_Append_CAN_Message_to_Buffer>

	if (double_buffer_fill_level[filling_buffer] == CAN_MESSAGES_TO_BUFFER) {
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000ea4:	5c9b      	ldrb	r3, [r3, r2]
 8000ea6:	2b80      	cmp	r3, #128	; 0x80
 8000ea8:	d10c      	bne.n	8000ec4 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
		buffer_filled = 1;
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	701a      	strb	r2, [r3, #0]
		filling_buffer = !filling_buffer;
 8000eb0:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	bf0c      	ite	eq
 8000eb8:	2301      	moveq	r3, #1
 8000eba:	2300      	movne	r3, #0
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	4b03      	ldr	r3, [pc, #12]	; (8000ed0 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000ec2:	701a      	strb	r2, [r3, #0]
	}
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20002e24 	.word	0x20002e24
 8000ed0:	20002e26 	.word	0x20002e26
 8000ed4:	20002e2c 	.word	0x20002e2c

08000ed8 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8000ee0:	1d39      	adds	r1, r7, #4
 8000ee2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	4803      	ldr	r0, [pc, #12]	; (8000ef8 <__io_putchar+0x20>)
 8000eea:	f005 fd4d 	bl	8006988 <HAL_UART_Transmit>

	return ch;
 8000eee:	687b      	ldr	r3, [r7, #4]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	200002f0 	.word	0x200002f0

08000efc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f00:	b672      	cpsid	i
}
 8000f02:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	printf("\r\nError Handler Reached\r\n");
 8000f04:	4804      	ldr	r0, [pc, #16]	; (8000f18 <Error_Handler+0x1c>)
 8000f06:	f00e fe57 	bl	800fbb8 <puts>
	HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f10:	4802      	ldr	r0, [pc, #8]	; (8000f1c <Error_Handler+0x20>)
 8000f12:	f001 fff5 	bl	8002f00 <HAL_GPIO_WritePin>

	while (1) {
 8000f16:	e7fe      	b.n	8000f16 <Error_Handler+0x1a>
 8000f18:	08010ce4 	.word	0x08010ce4
 8000f1c:	40021400 	.word	0x40021400

08000f20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f26:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <HAL_MspInit+0x44>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	4a0e      	ldr	r2, [pc, #56]	; (8000f64 <HAL_MspInit+0x44>)
 8000f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f30:	6413      	str	r3, [r2, #64]	; 0x40
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <HAL_MspInit+0x44>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <HAL_MspInit+0x44>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	4a08      	ldr	r2, [pc, #32]	; (8000f64 <HAL_MspInit+0x44>)
 8000f44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f48:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_MspInit+0x44>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f52:	603b      	str	r3, [r7, #0]
 8000f54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	40023800 	.word	0x40023800

08000f68 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a1b      	ldr	r2, [pc, #108]	; (8000ff4 <HAL_CAN_MspInit+0x8c>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d12f      	bne.n	8000fea <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f8a:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <HAL_CAN_MspInit+0x90>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	4a1a      	ldr	r2, [pc, #104]	; (8000ff8 <HAL_CAN_MspInit+0x90>)
 8000f90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f94:	6413      	str	r3, [r2, #64]	; 0x40
 8000f96:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <HAL_CAN_MspInit+0x90>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <HAL_CAN_MspInit+0x90>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a14      	ldr	r2, [pc, #80]	; (8000ff8 <HAL_CAN_MspInit+0x90>)
 8000fa8:	f043 0308 	orr.w	r3, r3, #8
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <HAL_CAN_MspInit+0x90>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0308 	and.w	r3, r3, #8
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000fca:	2309      	movs	r3, #9
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4809      	ldr	r0, [pc, #36]	; (8000ffc <HAL_CAN_MspInit+0x94>)
 8000fd6:	f001 fdcf 	bl	8002b78 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2100      	movs	r1, #0
 8000fde:	2014      	movs	r0, #20
 8000fe0:	f001 f9ed 	bl	80023be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000fe4:	2014      	movs	r0, #20
 8000fe6:	f001 fa06 	bl	80023f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000fea:	bf00      	nop
 8000fec:	3728      	adds	r7, #40	; 0x28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40006400 	.word	0x40006400
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40020c00 	.word	0x40020c00

08001000 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b0ae      	sub	sp, #184	; 0xb8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	2290      	movs	r2, #144	; 0x90
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f00e fde0 	bl	800fbe6 <memset>
  if(hsd->Instance==SDMMC1)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a73      	ldr	r2, [pc, #460]	; (80011f8 <HAL_SD_MspInit+0x1f8>)
 800102c:	4293      	cmp	r3, r2
 800102e:	f040 80de 	bne.w	80011ee <HAL_SD_MspInit+0x1ee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001032:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001036:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 8001038:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800103c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4618      	mov	r0, r3
 8001046:	f003 ff01 	bl	8004e4c <HAL_RCCEx_PeriphCLKConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001050:	f7ff ff54 	bl	8000efc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001054:	4b69      	ldr	r3, [pc, #420]	; (80011fc <HAL_SD_MspInit+0x1fc>)
 8001056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001058:	4a68      	ldr	r2, [pc, #416]	; (80011fc <HAL_SD_MspInit+0x1fc>)
 800105a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800105e:	6453      	str	r3, [r2, #68]	; 0x44
 8001060:	4b66      	ldr	r3, [pc, #408]	; (80011fc <HAL_SD_MspInit+0x1fc>)
 8001062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001064:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800106c:	4b63      	ldr	r3, [pc, #396]	; (80011fc <HAL_SD_MspInit+0x1fc>)
 800106e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001070:	4a62      	ldr	r2, [pc, #392]	; (80011fc <HAL_SD_MspInit+0x1fc>)
 8001072:	f043 0304 	orr.w	r3, r3, #4
 8001076:	6313      	str	r3, [r2, #48]	; 0x30
 8001078:	4b60      	ldr	r3, [pc, #384]	; (80011fc <HAL_SD_MspInit+0x1fc>)
 800107a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107c:	f003 0304 	and.w	r3, r3, #4
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001084:	4b5d      	ldr	r3, [pc, #372]	; (80011fc <HAL_SD_MspInit+0x1fc>)
 8001086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001088:	4a5c      	ldr	r2, [pc, #368]	; (80011fc <HAL_SD_MspInit+0x1fc>)
 800108a:	f043 0308 	orr.w	r3, r3, #8
 800108e:	6313      	str	r3, [r2, #48]	; 0x30
 8001090:	4b5a      	ldr	r3, [pc, #360]	; (80011fc <HAL_SD_MspInit+0x1fc>)
 8001092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001094:	f003 0308 	and.w	r3, r3, #8
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800109c:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80010a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a4:	2302      	movs	r3, #2
 80010a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b0:	2303      	movs	r3, #3
 80010b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80010b6:	230c      	movs	r3, #12
 80010b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010c0:	4619      	mov	r1, r3
 80010c2:	484f      	ldr	r0, [pc, #316]	; (8001200 <HAL_SD_MspInit+0x200>)
 80010c4:	f001 fd58 	bl	8002b78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010c8:	2304      	movs	r3, #4
 80010ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010da:	2303      	movs	r3, #3
 80010dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80010e0:	230c      	movs	r3, #12
 80010e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010ea:	4619      	mov	r1, r3
 80010ec:	4845      	ldr	r0, [pc, #276]	; (8001204 <HAL_SD_MspInit+0x204>)
 80010ee:	f001 fd43 	bl	8002b78 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 80010f2:	4b45      	ldr	r3, [pc, #276]	; (8001208 <HAL_SD_MspInit+0x208>)
 80010f4:	4a45      	ldr	r2, [pc, #276]	; (800120c <HAL_SD_MspInit+0x20c>)
 80010f6:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80010f8:	4b43      	ldr	r3, [pc, #268]	; (8001208 <HAL_SD_MspInit+0x208>)
 80010fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010fe:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001100:	4b41      	ldr	r3, [pc, #260]	; (8001208 <HAL_SD_MspInit+0x208>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001106:	4b40      	ldr	r3, [pc, #256]	; (8001208 <HAL_SD_MspInit+0x208>)
 8001108:	2200      	movs	r2, #0
 800110a:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800110c:	4b3e      	ldr	r3, [pc, #248]	; (8001208 <HAL_SD_MspInit+0x208>)
 800110e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001112:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001114:	4b3c      	ldr	r3, [pc, #240]	; (8001208 <HAL_SD_MspInit+0x208>)
 8001116:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800111a:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800111c:	4b3a      	ldr	r3, [pc, #232]	; (8001208 <HAL_SD_MspInit+0x208>)
 800111e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001122:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001124:	4b38      	ldr	r3, [pc, #224]	; (8001208 <HAL_SD_MspInit+0x208>)
 8001126:	2220      	movs	r2, #32
 8001128:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800112a:	4b37      	ldr	r3, [pc, #220]	; (8001208 <HAL_SD_MspInit+0x208>)
 800112c:	2200      	movs	r2, #0
 800112e:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001130:	4b35      	ldr	r3, [pc, #212]	; (8001208 <HAL_SD_MspInit+0x208>)
 8001132:	2204      	movs	r2, #4
 8001134:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001136:	4b34      	ldr	r3, [pc, #208]	; (8001208 <HAL_SD_MspInit+0x208>)
 8001138:	2203      	movs	r2, #3
 800113a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 800113c:	4b32      	ldr	r3, [pc, #200]	; (8001208 <HAL_SD_MspInit+0x208>)
 800113e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001142:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001144:	4b30      	ldr	r3, [pc, #192]	; (8001208 <HAL_SD_MspInit+0x208>)
 8001146:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800114a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 800114c:	482e      	ldr	r0, [pc, #184]	; (8001208 <HAL_SD_MspInit+0x208>)
 800114e:	f001 f96d 	bl	800242c <HAL_DMA_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <HAL_SD_MspInit+0x15c>
    {
      Error_Handler();
 8001158:	f7ff fed0 	bl	8000efc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a2a      	ldr	r2, [pc, #168]	; (8001208 <HAL_SD_MspInit+0x208>)
 8001160:	641a      	str	r2, [r3, #64]	; 0x40
 8001162:	4a29      	ldr	r2, [pc, #164]	; (8001208 <HAL_SD_MspInit+0x208>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8001168:	4b29      	ldr	r3, [pc, #164]	; (8001210 <HAL_SD_MspInit+0x210>)
 800116a:	4a2a      	ldr	r2, [pc, #168]	; (8001214 <HAL_SD_MspInit+0x214>)
 800116c:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800116e:	4b28      	ldr	r3, [pc, #160]	; (8001210 <HAL_SD_MspInit+0x210>)
 8001170:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001174:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001176:	4b26      	ldr	r3, [pc, #152]	; (8001210 <HAL_SD_MspInit+0x210>)
 8001178:	2240      	movs	r2, #64	; 0x40
 800117a:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800117c:	4b24      	ldr	r3, [pc, #144]	; (8001210 <HAL_SD_MspInit+0x210>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001182:	4b23      	ldr	r3, [pc, #140]	; (8001210 <HAL_SD_MspInit+0x210>)
 8001184:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001188:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800118a:	4b21      	ldr	r3, [pc, #132]	; (8001210 <HAL_SD_MspInit+0x210>)
 800118c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001190:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001192:	4b1f      	ldr	r3, [pc, #124]	; (8001210 <HAL_SD_MspInit+0x210>)
 8001194:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001198:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 800119a:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <HAL_SD_MspInit+0x210>)
 800119c:	2220      	movs	r2, #32
 800119e:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011a0:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <HAL_SD_MspInit+0x210>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011a6:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <HAL_SD_MspInit+0x210>)
 80011a8:	2204      	movs	r2, #4
 80011aa:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80011ac:	4b18      	ldr	r3, [pc, #96]	; (8001210 <HAL_SD_MspInit+0x210>)
 80011ae:	2203      	movs	r2, #3
 80011b0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <HAL_SD_MspInit+0x210>)
 80011b4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80011b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <HAL_SD_MspInit+0x210>)
 80011bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80011c0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80011c2:	4813      	ldr	r0, [pc, #76]	; (8001210 <HAL_SD_MspInit+0x210>)
 80011c4:	f001 f932 	bl	800242c <HAL_DMA_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_SD_MspInit+0x1d2>
    {
      Error_Handler();
 80011ce:	f7ff fe95 	bl	8000efc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a0e      	ldr	r2, [pc, #56]	; (8001210 <HAL_SD_MspInit+0x210>)
 80011d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80011d8:	4a0d      	ldr	r2, [pc, #52]	; (8001210 <HAL_SD_MspInit+0x210>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2100      	movs	r1, #0
 80011e2:	2031      	movs	r0, #49	; 0x31
 80011e4:	f001 f8eb 	bl	80023be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80011e8:	2031      	movs	r0, #49	; 0x31
 80011ea:	f001 f904 	bl	80023f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80011ee:	bf00      	nop
 80011f0:	37b8      	adds	r7, #184	; 0xb8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40012c00 	.word	0x40012c00
 80011fc:	40023800 	.word	0x40023800
 8001200:	40020800 	.word	0x40020800
 8001204:	40020c00 	.word	0x40020c00
 8001208:	20000230 	.word	0x20000230
 800120c:	40026458 	.word	0x40026458
 8001210:	20000290 	.word	0x20000290
 8001214:	400264a0 	.word	0x400264a0

08001218 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b0ae      	sub	sp, #184	; 0xb8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	2290      	movs	r2, #144	; 0x90
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f00e fcd4 	bl	800fbe6 <memset>
  if(huart->Instance==USART3)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a22      	ldr	r2, [pc, #136]	; (80012cc <HAL_UART_MspInit+0xb4>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d13c      	bne.n	80012c2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001248:	f44f 7380 	mov.w	r3, #256	; 0x100
 800124c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800124e:	2300      	movs	r3, #0
 8001250:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	4618      	mov	r0, r3
 8001258:	f003 fdf8 	bl	8004e4c <HAL_RCCEx_PeriphCLKConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001262:	f7ff fe4b 	bl	8000efc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001266:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <HAL_UART_MspInit+0xb8>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	4a19      	ldr	r2, [pc, #100]	; (80012d0 <HAL_UART_MspInit+0xb8>)
 800126c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001270:	6413      	str	r3, [r2, #64]	; 0x40
 8001272:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <HAL_UART_MspInit+0xb8>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800127e:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <HAL_UART_MspInit+0xb8>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a13      	ldr	r2, [pc, #76]	; (80012d0 <HAL_UART_MspInit+0xb8>)
 8001284:	f043 0308 	orr.w	r3, r3, #8
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <HAL_UART_MspInit+0xb8>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0308 	and.w	r3, r3, #8
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001296:	f44f 7340 	mov.w	r3, #768	; 0x300
 800129a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012aa:	2303      	movs	r3, #3
 80012ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012b0:	2307      	movs	r3, #7
 80012b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012ba:	4619      	mov	r1, r3
 80012bc:	4805      	ldr	r0, [pc, #20]	; (80012d4 <HAL_UART_MspInit+0xbc>)
 80012be:	f001 fc5b 	bl	8002b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012c2:	bf00      	nop
 80012c4:	37b8      	adds	r7, #184	; 0xb8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40004800 	.word	0x40004800
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40020c00 	.word	0x40020c00

080012d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <NMI_Handler+0x4>

080012de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e2:	e7fe      	b.n	80012e2 <HardFault_Handler+0x4>

080012e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <MemManage_Handler+0x4>

080012ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ee:	e7fe      	b.n	80012ee <BusFault_Handler+0x4>

080012f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <UsageFault_Handler+0x4>

080012f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001324:	f000 f950 	bl	80015c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}

0800132c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001330:	4802      	ldr	r0, [pc, #8]	; (800133c <CAN1_RX0_IRQHandler+0x10>)
 8001332:	f000 fd3a 	bl	8001daa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000184 	.word	0x20000184

08001340 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001344:	4802      	ldr	r0, [pc, #8]	; (8001350 <SDMMC1_IRQHandler+0x10>)
 8001346:	f004 fc29 	bl	8005b9c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200001ac 	.word	0x200001ac

08001354 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001358:	4802      	ldr	r0, [pc, #8]	; (8001364 <DMA2_Stream3_IRQHandler+0x10>)
 800135a:	f001 f997 	bl	800268c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000230 	.word	0x20000230

08001368 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800136c:	4802      	ldr	r0, [pc, #8]	; (8001378 <OTG_FS_IRQHandler+0x10>)
 800136e:	f001 ff26 	bl	80031be <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	200049c4 	.word	0x200049c4

0800137c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <DMA2_Stream6_IRQHandler+0x10>)
 8001382:	f001 f983 	bl	800268c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000290 	.word	0x20000290

08001390 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	e00a      	b.n	80013b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013a2:	f3af 8000 	nop.w
 80013a6:	4601      	mov	r1, r0
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	60ba      	str	r2, [r7, #8]
 80013ae:	b2ca      	uxtb	r2, r1
 80013b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	3301      	adds	r3, #1
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	697a      	ldr	r2, [r7, #20]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	429a      	cmp	r2, r3
 80013be:	dbf0      	blt.n	80013a2 <_read+0x12>
  }

  return len;
 80013c0:	687b      	ldr	r3, [r7, #4]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b086      	sub	sp, #24
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	60f8      	str	r0, [r7, #12]
 80013d2:	60b9      	str	r1, [r7, #8]
 80013d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	e009      	b.n	80013f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	1c5a      	adds	r2, r3, #1
 80013e0:	60ba      	str	r2, [r7, #8]
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fd77 	bl	8000ed8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	3301      	adds	r3, #1
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	dbf1      	blt.n	80013dc <_write+0x12>
  }
  return len;
 80013f8:	687b      	ldr	r3, [r7, #4]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <_close>:

int _close(int file)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800140a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800140e:	4618      	mov	r0, r3
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
 8001422:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800142a:	605a      	str	r2, [r3, #4]
  return 0;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <_isatty>:

int _isatty(int file)
{
 800143a:	b480      	push	{r7}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001442:	2301      	movs	r3, #1
}
 8001444:	4618      	mov	r0, r3
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
	...

0800146c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001474:	4a14      	ldr	r2, [pc, #80]	; (80014c8 <_sbrk+0x5c>)
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <_sbrk+0x60>)
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001480:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <_sbrk+0x64>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d102      	bne.n	800148e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <_sbrk+0x64>)
 800148a:	4a12      	ldr	r2, [pc, #72]	; (80014d4 <_sbrk+0x68>)
 800148c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <_sbrk+0x64>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4413      	add	r3, r2
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	429a      	cmp	r2, r3
 800149a:	d207      	bcs.n	80014ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800149c:	f00e fbbc 	bl	800fc18 <__errno>
 80014a0:	4603      	mov	r3, r0
 80014a2:	220c      	movs	r2, #12
 80014a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014aa:	e009      	b.n	80014c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <_sbrk+0x64>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014b2:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <_sbrk+0x64>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4413      	add	r3, r2
 80014ba:	4a05      	ldr	r2, [pc, #20]	; (80014d0 <_sbrk+0x64>)
 80014bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014be:	68fb      	ldr	r3, [r7, #12]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20080000 	.word	0x20080000
 80014cc:	00000400 	.word	0x00000400
 80014d0:	20002e34 	.word	0x20002e34
 80014d4:	20005018 	.word	0x20005018

080014d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <SystemInit+0x20>)
 80014de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014e2:	4a05      	ldr	r2, [pc, #20]	; (80014f8 <SystemInit+0x20>)
 80014e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001534 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001500:	480d      	ldr	r0, [pc, #52]	; (8001538 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001502:	490e      	ldr	r1, [pc, #56]	; (800153c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001504:	4a0e      	ldr	r2, [pc, #56]	; (8001540 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001508:	e002      	b.n	8001510 <LoopCopyDataInit>

0800150a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800150a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800150c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800150e:	3304      	adds	r3, #4

08001510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001514:	d3f9      	bcc.n	800150a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001516:	4a0b      	ldr	r2, [pc, #44]	; (8001544 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001518:	4c0b      	ldr	r4, [pc, #44]	; (8001548 <LoopFillZerobss+0x26>)
  movs r3, #0
 800151a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800151c:	e001      	b.n	8001522 <LoopFillZerobss>

0800151e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800151e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001520:	3204      	adds	r2, #4

08001522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001524:	d3fb      	bcc.n	800151e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001526:	f7ff ffd7 	bl	80014d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800152a:	f00e fb7b 	bl	800fc24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800152e:	f7ff f855 	bl	80005dc <main>
  bx  lr    
 8001532:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001534:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800153c:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8001540:	08011248 	.word	0x08011248
  ldr r2, =_sbss
 8001544:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8001548:	20005018 	.word	0x20005018

0800154c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800154c:	e7fe      	b.n	800154c <ADC_IRQHandler>

0800154e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001552:	2003      	movs	r0, #3
 8001554:	f000 ff28 	bl	80023a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001558:	2000      	movs	r0, #0
 800155a:	f000 f805 	bl	8001568 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800155e:	f7ff fcdf 	bl	8000f20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	bd80      	pop	{r7, pc}

08001568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <HAL_InitTick+0x54>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <HAL_InitTick+0x58>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	4619      	mov	r1, r3
 800157a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001582:	fbb2 f3f3 	udiv	r3, r2, r3
 8001586:	4618      	mov	r0, r3
 8001588:	f000 ff43 	bl	8002412 <HAL_SYSTICK_Config>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e00e      	b.n	80015b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2b0f      	cmp	r3, #15
 800159a:	d80a      	bhi.n	80015b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800159c:	2200      	movs	r2, #0
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015a4:	f000 ff0b 	bl	80023be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015a8:	4a06      	ldr	r2, [pc, #24]	; (80015c4 <HAL_InitTick+0x5c>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
 80015b0:	e000      	b.n	80015b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000000 	.word	0x20000000
 80015c0:	20000008 	.word	0x20000008
 80015c4:	20000004 	.word	0x20000004

080015c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_IncTick+0x20>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_IncTick+0x24>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4413      	add	r3, r2
 80015d8:	4a04      	ldr	r2, [pc, #16]	; (80015ec <HAL_IncTick+0x24>)
 80015da:	6013      	str	r3, [r2, #0]
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	20000008 	.word	0x20000008
 80015ec:	20002e38 	.word	0x20002e38

080015f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return uwTick;
 80015f4:	4b03      	ldr	r3, [pc, #12]	; (8001604 <HAL_GetTick+0x14>)
 80015f6:	681b      	ldr	r3, [r3, #0]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	20002e38 	.word	0x20002e38

08001608 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001610:	f7ff ffee 	bl	80015f0 <HAL_GetTick>
 8001614:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001620:	d005      	beq.n	800162e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001622:	4b0a      	ldr	r3, [pc, #40]	; (800164c <HAL_Delay+0x44>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	461a      	mov	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4413      	add	r3, r2
 800162c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800162e:	bf00      	nop
 8001630:	f7ff ffde 	bl	80015f0 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	429a      	cmp	r2, r3
 800163e:	d8f7      	bhi.n	8001630 <HAL_Delay+0x28>
  {
  }
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000008 	.word	0x20000008

08001650 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e0ed      	b.n	800183e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d102      	bne.n	8001674 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff fc7a 	bl	8000f68 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0201 	orr.w	r2, r2, #1
 8001682:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001684:	f7ff ffb4 	bl	80015f0 <HAL_GetTick>
 8001688:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800168a:	e012      	b.n	80016b2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800168c:	f7ff ffb0 	bl	80015f0 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b0a      	cmp	r3, #10
 8001698:	d90b      	bls.n	80016b2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2205      	movs	r2, #5
 80016aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e0c5      	b.n	800183e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0e5      	beq.n	800168c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0202 	bic.w	r2, r2, #2
 80016ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016d0:	f7ff ff8e 	bl	80015f0 <HAL_GetTick>
 80016d4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016d6:	e012      	b.n	80016fe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016d8:	f7ff ff8a 	bl	80015f0 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b0a      	cmp	r3, #10
 80016e4:	d90b      	bls.n	80016fe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2205      	movs	r2, #5
 80016f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e09f      	b.n	800183e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1e5      	bne.n	80016d8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	7e1b      	ldrb	r3, [r3, #24]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d108      	bne.n	8001726 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	e007      	b.n	8001736 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001734:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	7e5b      	ldrb	r3, [r3, #25]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d108      	bne.n	8001750 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	e007      	b.n	8001760 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800175e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	7e9b      	ldrb	r3, [r3, #26]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d108      	bne.n	800177a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f042 0220 	orr.w	r2, r2, #32
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	e007      	b.n	800178a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 0220 	bic.w	r2, r2, #32
 8001788:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	7edb      	ldrb	r3, [r3, #27]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d108      	bne.n	80017a4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 0210 	bic.w	r2, r2, #16
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	e007      	b.n	80017b4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f042 0210 	orr.w	r2, r2, #16
 80017b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	7f1b      	ldrb	r3, [r3, #28]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d108      	bne.n	80017ce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 0208 	orr.w	r2, r2, #8
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	e007      	b.n	80017de <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 0208 	bic.w	r2, r2, #8
 80017dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	7f5b      	ldrb	r3, [r3, #29]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d108      	bne.n	80017f8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f042 0204 	orr.w	r2, r2, #4
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	e007      	b.n	8001808 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f022 0204 	bic.w	r2, r2, #4
 8001806:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	431a      	orrs	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	ea42 0103 	orr.w	r1, r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	1e5a      	subs	r2, r3, #1
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	430a      	orrs	r2, r1
 800182c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001848:	b480      	push	{r7}
 800184a:	b087      	sub	sp, #28
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800185e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001860:	7cfb      	ldrb	r3, [r7, #19]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d003      	beq.n	800186e <HAL_CAN_ConfigFilter+0x26>
 8001866:	7cfb      	ldrb	r3, [r7, #19]
 8001868:	2b02      	cmp	r3, #2
 800186a:	f040 80c7 	bne.w	80019fc <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a69      	ldr	r2, [pc, #420]	; (8001a18 <HAL_CAN_ConfigFilter+0x1d0>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d001      	beq.n	800187c <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001878:	4b68      	ldr	r3, [pc, #416]	; (8001a1c <HAL_CAN_ConfigFilter+0x1d4>)
 800187a:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001882:	f043 0201 	orr.w	r2, r3, #1
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	4a63      	ldr	r2, [pc, #396]	; (8001a1c <HAL_CAN_ConfigFilter+0x1d4>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d111      	bne.n	80018b8 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800189a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ae:	021b      	lsls	r3, r3, #8
 80018b0:	431a      	orrs	r2, r3
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	f003 031f 	and.w	r3, r3, #31
 80018c0:	2201      	movs	r2, #1
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	43db      	mvns	r3, r3
 80018d2:	401a      	ands	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d123      	bne.n	800192a <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	401a      	ands	r2, r3
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001904:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	3248      	adds	r2, #72	; 0x48
 800190a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800191e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001920:	6979      	ldr	r1, [r7, #20]
 8001922:	3348      	adds	r3, #72	; 0x48
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	440b      	add	r3, r1
 8001928:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d122      	bne.n	8001978 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	431a      	orrs	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001952:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	3248      	adds	r2, #72	; 0x48
 8001958:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800196c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800196e:	6979      	ldr	r1, [r7, #20]
 8001970:	3348      	adds	r3, #72	; 0x48
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	440b      	add	r3, r1
 8001976:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d109      	bne.n	8001994 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	43db      	mvns	r3, r3
 800198a:	401a      	ands	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001992:	e007      	b.n	80019a4 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	431a      	orrs	r2, r3
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d109      	bne.n	80019c0 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	401a      	ands	r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80019be:	e007      	b.n	80019d0 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	431a      	orrs	r2, r3
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d107      	bne.n	80019e8 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	431a      	orrs	r2, r3
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019ee:	f023 0201 	bic.w	r2, r3, #1
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80019f8:	2300      	movs	r3, #0
 80019fa:	e006      	b.n	8001a0a <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
  }
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	371c      	adds	r7, #28
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40003400 	.word	0x40003400
 8001a1c:	40006400 	.word	0x40006400

08001a20 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d12e      	bne.n	8001a92 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2202      	movs	r2, #2
 8001a38:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 0201 	bic.w	r2, r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a4c:	f7ff fdd0 	bl	80015f0 <HAL_GetTick>
 8001a50:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a52:	e012      	b.n	8001a7a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a54:	f7ff fdcc 	bl	80015f0 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b0a      	cmp	r3, #10
 8001a60:	d90b      	bls.n	8001a7a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2205      	movs	r2, #5
 8001a72:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e012      	b.n	8001aa0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1e5      	bne.n	8001a54 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	e006      	b.n	8001aa0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a96:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
  }
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d133      	bne.n	8001b24 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 0201 	orr.w	r2, r2, #1
 8001aca:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001acc:	f7ff fd90 	bl	80015f0 <HAL_GetTick>
 8001ad0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ad2:	e012      	b.n	8001afa <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ad4:	f7ff fd8c 	bl	80015f0 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b0a      	cmp	r3, #10
 8001ae0:	d90b      	bls.n	8001afa <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2205      	movs	r2, #5
 8001af2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e01b      	b.n	8001b32 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0e5      	beq.n	8001ad4 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 0202 	bic.w	r2, r2, #2
 8001b16:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	e006      	b.n	8001b32 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b28:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
  }
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b087      	sub	sp, #28
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	60f8      	str	r0, [r7, #12]
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
 8001b46:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b4e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b50:	7dfb      	ldrb	r3, [r7, #23]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d003      	beq.n	8001b5e <HAL_CAN_GetRxMessage+0x24>
 8001b56:	7dfb      	ldrb	r3, [r7, #23]
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	f040 80f3 	bne.w	8001d44 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d10e      	bne.n	8001b82 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d116      	bne.n	8001ba0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b76:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e0e7      	b.n	8001d52 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d107      	bne.n	8001ba0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e0d8      	b.n	8001d52 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	331b      	adds	r3, #27
 8001ba8:	011b      	lsls	r3, r3, #4
 8001baa:	4413      	add	r3, r2
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0204 	and.w	r2, r3, #4
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10c      	bne.n	8001bd8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	331b      	adds	r3, #27
 8001bc6:	011b      	lsls	r3, r3, #4
 8001bc8:	4413      	add	r3, r2
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	0d5b      	lsrs	r3, r3, #21
 8001bce:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	e00b      	b.n	8001bf0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	331b      	adds	r3, #27
 8001be0:	011b      	lsls	r3, r3, #4
 8001be2:	4413      	add	r3, r2
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	08db      	lsrs	r3, r3, #3
 8001be8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	331b      	adds	r3, #27
 8001bf8:	011b      	lsls	r3, r3, #4
 8001bfa:	4413      	add	r3, r2
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0202 	and.w	r2, r3, #2
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	331b      	adds	r3, #27
 8001c0e:	011b      	lsls	r3, r3, #4
 8001c10:	4413      	add	r3, r2
 8001c12:	3304      	adds	r3, #4
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 020f 	and.w	r2, r3, #15
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	331b      	adds	r3, #27
 8001c26:	011b      	lsls	r3, r3, #4
 8001c28:	4413      	add	r3, r2
 8001c2a:	3304      	adds	r3, #4
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	0a1b      	lsrs	r3, r3, #8
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	331b      	adds	r3, #27
 8001c3e:	011b      	lsls	r3, r3, #4
 8001c40:	4413      	add	r3, r2
 8001c42:	3304      	adds	r3, #4
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	0c1b      	lsrs	r3, r3, #16
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	011b      	lsls	r3, r3, #4
 8001c56:	4413      	add	r3, r2
 8001c58:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	011b      	lsls	r3, r3, #4
 8001c6c:	4413      	add	r3, r2
 8001c6e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	0a1a      	lsrs	r2, r3, #8
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	011b      	lsls	r3, r3, #4
 8001c86:	4413      	add	r3, r2
 8001c88:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	0c1a      	lsrs	r2, r3, #16
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	3302      	adds	r3, #2
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	011b      	lsls	r3, r3, #4
 8001ca0:	4413      	add	r3, r2
 8001ca2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	0e1a      	lsrs	r2, r3, #24
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	3303      	adds	r3, #3
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	011b      	lsls	r3, r3, #4
 8001cba:	4413      	add	r3, r2
 8001cbc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	4413      	add	r3, r2
 8001cd4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	0a1a      	lsrs	r2, r3, #8
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	3305      	adds	r3, #5
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	011b      	lsls	r3, r3, #4
 8001cec:	4413      	add	r3, r2
 8001cee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	0c1a      	lsrs	r2, r3, #16
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	3306      	adds	r3, #6
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	011b      	lsls	r3, r3, #4
 8001d06:	4413      	add	r3, r2
 8001d08:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	0e1a      	lsrs	r2, r3, #24
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	3307      	adds	r3, #7
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d108      	bne.n	8001d30 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f042 0220 	orr.w	r2, r2, #32
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	e007      	b.n	8001d40 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	691a      	ldr	r2, [r3, #16]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 0220 	orr.w	r2, r2, #32
 8001d3e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001d40:	2300      	movs	r3, #0
 8001d42:	e006      	b.n	8001d52 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
  }
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	371c      	adds	r7, #28
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b085      	sub	sp, #20
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
 8001d66:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d6e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d002      	beq.n	8001d7c <HAL_CAN_ActivateNotification+0x1e>
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d109      	bne.n	8001d90 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6959      	ldr	r1, [r3, #20]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	e006      	b.n	8001d9e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d94:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
  }
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b08a      	sub	sp, #40	; 0x28
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001db2:	2300      	movs	r3, #0
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001de6:	6a3b      	ldr	r3, [r7, #32]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d07c      	beq.n	8001eea <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d023      	beq.n	8001e42 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f983 	bl	8002118 <HAL_CAN_TxMailbox0CompleteCallback>
 8001e12:	e016      	b.n	8001e42 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d004      	beq.n	8001e28 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
 8001e26:	e00c      	b.n	8001e42 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d004      	beq.n	8001e3c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
 8001e3a:	e002      	b.n	8001e42 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 f989 	bl	8002154 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d024      	beq.n	8001e96 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e54:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 f963 	bl	800212c <HAL_CAN_TxMailbox1CompleteCallback>
 8001e66:	e016      	b.n	8001e96 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d004      	beq.n	8001e7c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
 8001e7a:	e00c      	b.n	8001e96 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d004      	beq.n	8001e90 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e8e:	e002      	b.n	8001e96 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f969 	bl	8002168 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d024      	beq.n	8001eea <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ea8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f943 	bl	8002140 <HAL_CAN_TxMailbox2CompleteCallback>
 8001eba:	e016      	b.n	8001eea <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d004      	beq.n	8001ed0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ece:	e00c      	b.n	8001eea <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d004      	beq.n	8001ee4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee2:	e002      	b.n	8001eea <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f949 	bl	800217c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001eea:	6a3b      	ldr	r3, [r7, #32]
 8001eec:	f003 0308 	and.w	r3, r3, #8
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00c      	beq.n	8001f0e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	f003 0310 	and.w	r3, r3, #16
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d007      	beq.n	8001f0e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2210      	movs	r2, #16
 8001f0c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001f0e:	6a3b      	ldr	r3, [r7, #32]
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00b      	beq.n	8001f30 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d006      	beq.n	8001f30 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2208      	movs	r2, #8
 8001f28:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f930 	bl	8002190 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001f30:	6a3b      	ldr	r3, [r7, #32]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d009      	beq.n	8001f4e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d002      	beq.n	8001f4e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7fe ff97 	bl	8000e7c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001f4e:	6a3b      	ldr	r3, [r7, #32]
 8001f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00c      	beq.n	8001f72 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	f003 0310 	and.w	r3, r3, #16
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d007      	beq.n	8001f72 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2210      	movs	r2, #16
 8001f70:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001f72:	6a3b      	ldr	r3, [r7, #32]
 8001f74:	f003 0320 	and.w	r3, r3, #32
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00b      	beq.n	8001f94 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d006      	beq.n	8001f94 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2208      	movs	r2, #8
 8001f8c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f912 	bl	80021b8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001f94:	6a3b      	ldr	r3, [r7, #32]
 8001f96:	f003 0310 	and.w	r3, r3, #16
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d009      	beq.n	8001fb2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d002      	beq.n	8001fb2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 f8f9 	bl	80021a4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001fb2:	6a3b      	ldr	r3, [r7, #32]
 8001fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00b      	beq.n	8001fd4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f003 0310 	and.w	r3, r3, #16
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d006      	beq.n	8001fd4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2210      	movs	r2, #16
 8001fcc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f8fc 	bl	80021cc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001fd4:	6a3b      	ldr	r3, [r7, #32]
 8001fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00b      	beq.n	8001ff6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	f003 0308 	and.w	r3, r3, #8
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d006      	beq.n	8001ff6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2208      	movs	r2, #8
 8001fee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f8f5 	bl	80021e0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001ff6:	6a3b      	ldr	r3, [r7, #32]
 8001ff8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d07b      	beq.n	80020f8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	2b00      	cmp	r3, #0
 8002008:	d072      	beq.n	80020f0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800200a:	6a3b      	ldr	r3, [r7, #32]
 800200c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002010:	2b00      	cmp	r3, #0
 8002012:	d008      	beq.n	8002026 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002026:	6a3b      	ldr	r3, [r7, #32]
 8002028:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800202c:	2b00      	cmp	r3, #0
 800202e:	d008      	beq.n	8002042 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002042:	6a3b      	ldr	r3, [r7, #32]
 8002044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002048:	2b00      	cmp	r3, #0
 800204a:	d008      	beq.n	800205e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	f043 0304 	orr.w	r3, r3, #4
 800205c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800205e:	6a3b      	ldr	r3, [r7, #32]
 8002060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002064:	2b00      	cmp	r3, #0
 8002066:	d043      	beq.n	80020f0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800206e:	2b00      	cmp	r3, #0
 8002070:	d03e      	beq.n	80020f0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002078:	2b60      	cmp	r3, #96	; 0x60
 800207a:	d02b      	beq.n	80020d4 <HAL_CAN_IRQHandler+0x32a>
 800207c:	2b60      	cmp	r3, #96	; 0x60
 800207e:	d82e      	bhi.n	80020de <HAL_CAN_IRQHandler+0x334>
 8002080:	2b50      	cmp	r3, #80	; 0x50
 8002082:	d022      	beq.n	80020ca <HAL_CAN_IRQHandler+0x320>
 8002084:	2b50      	cmp	r3, #80	; 0x50
 8002086:	d82a      	bhi.n	80020de <HAL_CAN_IRQHandler+0x334>
 8002088:	2b40      	cmp	r3, #64	; 0x40
 800208a:	d019      	beq.n	80020c0 <HAL_CAN_IRQHandler+0x316>
 800208c:	2b40      	cmp	r3, #64	; 0x40
 800208e:	d826      	bhi.n	80020de <HAL_CAN_IRQHandler+0x334>
 8002090:	2b30      	cmp	r3, #48	; 0x30
 8002092:	d010      	beq.n	80020b6 <HAL_CAN_IRQHandler+0x30c>
 8002094:	2b30      	cmp	r3, #48	; 0x30
 8002096:	d822      	bhi.n	80020de <HAL_CAN_IRQHandler+0x334>
 8002098:	2b10      	cmp	r3, #16
 800209a:	d002      	beq.n	80020a2 <HAL_CAN_IRQHandler+0x2f8>
 800209c:	2b20      	cmp	r3, #32
 800209e:	d005      	beq.n	80020ac <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80020a0:	e01d      	b.n	80020de <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	f043 0308 	orr.w	r3, r3, #8
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020aa:	e019      	b.n	80020e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	f043 0310 	orr.w	r3, r3, #16
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020b4:	e014      	b.n	80020e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	f043 0320 	orr.w	r3, r3, #32
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020be:	e00f      	b.n	80020e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020c8:	e00a      	b.n	80020e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020d2:	e005      	b.n	80020e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020dc:	e000      	b.n	80020e0 <HAL_CAN_IRQHandler+0x336>
            break;
 80020de:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	699a      	ldr	r2, [r3, #24]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80020ee:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2204      	movs	r2, #4
 80020f6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d008      	beq.n	8002110 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f872 	bl	80021f4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002110:	bf00      	nop
 8002112:	3728      	adds	r7, #40	; 0x28
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <__NVIC_SetPriorityGrouping+0x40>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002224:	4013      	ands	r3, r2
 8002226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <__NVIC_SetPriorityGrouping+0x44>)
 8002232:	4313      	orrs	r3, r2
 8002234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002236:	4a04      	ldr	r2, [pc, #16]	; (8002248 <__NVIC_SetPriorityGrouping+0x40>)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	60d3      	str	r3, [r2, #12]
}
 800223c:	bf00      	nop
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	e000ed00 	.word	0xe000ed00
 800224c:	05fa0000 	.word	0x05fa0000

08002250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002254:	4b04      	ldr	r3, [pc, #16]	; (8002268 <__NVIC_GetPriorityGrouping+0x18>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	0a1b      	lsrs	r3, r3, #8
 800225a:	f003 0307 	and.w	r3, r3, #7
}
 800225e:	4618      	mov	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227a:	2b00      	cmp	r3, #0
 800227c:	db0b      	blt.n	8002296 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	f003 021f 	and.w	r2, r3, #31
 8002284:	4907      	ldr	r1, [pc, #28]	; (80022a4 <__NVIC_EnableIRQ+0x38>)
 8002286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228a:	095b      	lsrs	r3, r3, #5
 800228c:	2001      	movs	r0, #1
 800228e:	fa00 f202 	lsl.w	r2, r0, r2
 8002292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	e000e100 	.word	0xe000e100

080022a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	6039      	str	r1, [r7, #0]
 80022b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	db0a      	blt.n	80022d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	490c      	ldr	r1, [pc, #48]	; (80022f4 <__NVIC_SetPriority+0x4c>)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	0112      	lsls	r2, r2, #4
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	440b      	add	r3, r1
 80022cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d0:	e00a      	b.n	80022e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	4908      	ldr	r1, [pc, #32]	; (80022f8 <__NVIC_SetPriority+0x50>)
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	3b04      	subs	r3, #4
 80022e0:	0112      	lsls	r2, r2, #4
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	440b      	add	r3, r1
 80022e6:	761a      	strb	r2, [r3, #24]
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	e000e100 	.word	0xe000e100
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b089      	sub	sp, #36	; 0x24
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f1c3 0307 	rsb	r3, r3, #7
 8002316:	2b04      	cmp	r3, #4
 8002318:	bf28      	it	cs
 800231a:	2304      	movcs	r3, #4
 800231c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	3304      	adds	r3, #4
 8002322:	2b06      	cmp	r3, #6
 8002324:	d902      	bls.n	800232c <NVIC_EncodePriority+0x30>
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3b03      	subs	r3, #3
 800232a:	e000      	b.n	800232e <NVIC_EncodePriority+0x32>
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002330:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43da      	mvns	r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	401a      	ands	r2, r3
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002344:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	fa01 f303 	lsl.w	r3, r1, r3
 800234e:	43d9      	mvns	r1, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002354:	4313      	orrs	r3, r2
         );
}
 8002356:	4618      	mov	r0, r3
 8002358:	3724      	adds	r7, #36	; 0x24
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
	...

08002364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3b01      	subs	r3, #1
 8002370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002374:	d301      	bcc.n	800237a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002376:	2301      	movs	r3, #1
 8002378:	e00f      	b.n	800239a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800237a:	4a0a      	ldr	r2, [pc, #40]	; (80023a4 <SysTick_Config+0x40>)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3b01      	subs	r3, #1
 8002380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002382:	210f      	movs	r1, #15
 8002384:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002388:	f7ff ff8e 	bl	80022a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800238c:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <SysTick_Config+0x40>)
 800238e:	2200      	movs	r2, #0
 8002390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002392:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <SysTick_Config+0x40>)
 8002394:	2207      	movs	r2, #7
 8002396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	e000e010 	.word	0xe000e010

080023a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff ff29 	bl	8002208 <__NVIC_SetPriorityGrouping>
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023be:	b580      	push	{r7, lr}
 80023c0:	b086      	sub	sp, #24
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	4603      	mov	r3, r0
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	607a      	str	r2, [r7, #4]
 80023ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023d0:	f7ff ff3e 	bl	8002250 <__NVIC_GetPriorityGrouping>
 80023d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68b9      	ldr	r1, [r7, #8]
 80023da:	6978      	ldr	r0, [r7, #20]
 80023dc:	f7ff ff8e 	bl	80022fc <NVIC_EncodePriority>
 80023e0:	4602      	mov	r2, r0
 80023e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023e6:	4611      	mov	r1, r2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff5d 	bl	80022a8 <__NVIC_SetPriority>
}
 80023ee:	bf00      	nop
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	4603      	mov	r3, r0
 80023fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ff31 	bl	800226c <__NVIC_EnableIRQ>
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7ff ffa2 	bl	8002364 <SysTick_Config>
 8002420:	4603      	mov	r3, r0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002438:	f7ff f8da 	bl	80015f0 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e099      	b.n	800257c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2202      	movs	r2, #2
 800244c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0201 	bic.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002468:	e00f      	b.n	800248a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800246a:	f7ff f8c1 	bl	80015f0 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b05      	cmp	r3, #5
 8002476:	d908      	bls.n	800248a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2220      	movs	r2, #32
 800247c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2203      	movs	r2, #3
 8002482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e078      	b.n	800257c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1e8      	bne.n	800246a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	4b38      	ldr	r3, [pc, #224]	; (8002584 <HAL_DMA_Init+0x158>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	4313      	orrs	r3, r2
 80024da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d107      	bne.n	80024f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ec:	4313      	orrs	r3, r2
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f023 0307 	bic.w	r3, r3, #7
 800250a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	4313      	orrs	r3, r2
 8002514:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	2b04      	cmp	r3, #4
 800251c:	d117      	bne.n	800254e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	4313      	orrs	r3, r2
 8002526:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00e      	beq.n	800254e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 faa5 	bl	8002a80 <DMA_CheckFifoParam>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d008      	beq.n	800254e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2240      	movs	r2, #64	; 0x40
 8002540:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800254a:	2301      	movs	r3, #1
 800254c:	e016      	b.n	800257c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 fa5c 	bl	8002a14 <DMA_CalcBaseAndBitshift>
 800255c:	4603      	mov	r3, r0
 800255e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002564:	223f      	movs	r2, #63	; 0x3f
 8002566:	409a      	lsls	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	e010803f 	.word	0xe010803f

08002588 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
 8002594:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002596:	2300      	movs	r3, #0
 8002598:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d101      	bne.n	80025ae <HAL_DMA_Start_IT+0x26>
 80025aa:	2302      	movs	r3, #2
 80025ac:	e048      	b.n	8002640 <HAL_DMA_Start_IT+0xb8>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d137      	bne.n	8002632 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2202      	movs	r2, #2
 80025c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	68b9      	ldr	r1, [r7, #8]
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 f9ee 	bl	80029b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e0:	223f      	movs	r2, #63	; 0x3f
 80025e2:	409a      	lsls	r2, r3
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0216 	orr.w	r2, r2, #22
 80025f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695a      	ldr	r2, [r3, #20]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002606:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	2b00      	cmp	r3, #0
 800260e:	d007      	beq.n	8002620 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f042 0208 	orr.w	r2, r2, #8
 800261e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 0201 	orr.w	r2, r2, #1
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	e005      	b.n	800263e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800263a:	2302      	movs	r3, #2
 800263c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800263e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d004      	beq.n	8002666 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2280      	movs	r2, #128	; 0x80
 8002660:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e00c      	b.n	8002680 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2205      	movs	r2, #5
 800266a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0201 	bic.w	r2, r2, #1
 800267c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002694:	2300      	movs	r3, #0
 8002696:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002698:	4b8e      	ldr	r3, [pc, #568]	; (80028d4 <HAL_DMA_IRQHandler+0x248>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a8e      	ldr	r2, [pc, #568]	; (80028d8 <HAL_DMA_IRQHandler+0x24c>)
 800269e:	fba2 2303 	umull	r2, r3, r2, r3
 80026a2:	0a9b      	lsrs	r3, r3, #10
 80026a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b6:	2208      	movs	r2, #8
 80026b8:	409a      	lsls	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	4013      	ands	r3, r2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d01a      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d013      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0204 	bic.w	r2, r2, #4
 80026de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e4:	2208      	movs	r2, #8
 80026e6:	409a      	lsls	r2, r3
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f0:	f043 0201 	orr.w	r2, r3, #1
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fc:	2201      	movs	r2, #1
 80026fe:	409a      	lsls	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4013      	ands	r3, r2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d012      	beq.n	800272e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00b      	beq.n	800272e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271a:	2201      	movs	r2, #1
 800271c:	409a      	lsls	r2, r3
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002726:	f043 0202 	orr.w	r2, r3, #2
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002732:	2204      	movs	r2, #4
 8002734:	409a      	lsls	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4013      	ands	r3, r2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d012      	beq.n	8002764 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00b      	beq.n	8002764 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002750:	2204      	movs	r2, #4
 8002752:	409a      	lsls	r2, r3
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275c:	f043 0204 	orr.w	r2, r3, #4
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002768:	2210      	movs	r2, #16
 800276a:	409a      	lsls	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4013      	ands	r3, r2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d043      	beq.n	80027fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d03c      	beq.n	80027fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002786:	2210      	movs	r2, #16
 8002788:	409a      	lsls	r2, r3
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d018      	beq.n	80027ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d108      	bne.n	80027bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d024      	beq.n	80027fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	4798      	blx	r3
 80027ba:	e01f      	b.n	80027fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d01b      	beq.n	80027fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	4798      	blx	r3
 80027cc:	e016      	b.n	80027fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d107      	bne.n	80027ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0208 	bic.w	r2, r2, #8
 80027ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002800:	2220      	movs	r2, #32
 8002802:	409a      	lsls	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4013      	ands	r3, r2
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 808f 	beq.w	800292c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0310 	and.w	r3, r3, #16
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 8087 	beq.w	800292c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002822:	2220      	movs	r2, #32
 8002824:	409a      	lsls	r2, r3
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b05      	cmp	r3, #5
 8002834:	d136      	bne.n	80028a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0216 	bic.w	r2, r2, #22
 8002844:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695a      	ldr	r2, [r3, #20]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002854:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	d103      	bne.n	8002866 <HAL_DMA_IRQHandler+0x1da>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002862:	2b00      	cmp	r3, #0
 8002864:	d007      	beq.n	8002876 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0208 	bic.w	r2, r2, #8
 8002874:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287a:	223f      	movs	r2, #63	; 0x3f
 800287c:	409a      	lsls	r2, r3
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002896:	2b00      	cmp	r3, #0
 8002898:	d07e      	beq.n	8002998 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	4798      	blx	r3
        }
        return;
 80028a2:	e079      	b.n	8002998 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d01d      	beq.n	80028ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10d      	bne.n	80028dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d031      	beq.n	800292c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	4798      	blx	r3
 80028d0:	e02c      	b.n	800292c <HAL_DMA_IRQHandler+0x2a0>
 80028d2:	bf00      	nop
 80028d4:	20000000 	.word	0x20000000
 80028d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d023      	beq.n	800292c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	4798      	blx	r3
 80028ec:	e01e      	b.n	800292c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10f      	bne.n	800291c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0210 	bic.w	r2, r2, #16
 800290a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002930:	2b00      	cmp	r3, #0
 8002932:	d032      	beq.n	800299a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b00      	cmp	r3, #0
 800293e:	d022      	beq.n	8002986 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2205      	movs	r2, #5
 8002944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0201 	bic.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	3301      	adds	r3, #1
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	429a      	cmp	r2, r3
 8002962:	d307      	bcc.n	8002974 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f2      	bne.n	8002958 <HAL_DMA_IRQHandler+0x2cc>
 8002972:	e000      	b.n	8002976 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002974:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800298a:	2b00      	cmp	r3, #0
 800298c:	d005      	beq.n	800299a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	4798      	blx	r3
 8002996:	e000      	b.n	800299a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002998:	bf00      	nop
    }
  }
}
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
 80029c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	2b40      	cmp	r3, #64	; 0x40
 80029e4:	d108      	bne.n	80029f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029f6:	e007      	b.n	8002a08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	60da      	str	r2, [r3, #12]
}
 8002a08:	bf00      	nop
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	3b10      	subs	r3, #16
 8002a24:	4a13      	ldr	r2, [pc, #76]	; (8002a74 <DMA_CalcBaseAndBitshift+0x60>)
 8002a26:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2a:	091b      	lsrs	r3, r3, #4
 8002a2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a2e:	4a12      	ldr	r2, [pc, #72]	; (8002a78 <DMA_CalcBaseAndBitshift+0x64>)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4413      	add	r3, r2
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	461a      	mov	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d908      	bls.n	8002a54 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	461a      	mov	r2, r3
 8002a48:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <DMA_CalcBaseAndBitshift+0x68>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	1d1a      	adds	r2, r3, #4
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	659a      	str	r2, [r3, #88]	; 0x58
 8002a52:	e006      	b.n	8002a62 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <DMA_CalcBaseAndBitshift+0x68>)
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	aaaaaaab 	.word	0xaaaaaaab
 8002a78:	08010da8 	.word	0x08010da8
 8002a7c:	fffffc00 	.word	0xfffffc00

08002a80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d11f      	bne.n	8002ada <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d856      	bhi.n	8002b4e <DMA_CheckFifoParam+0xce>
 8002aa0:	a201      	add	r2, pc, #4	; (adr r2, 8002aa8 <DMA_CheckFifoParam+0x28>)
 8002aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa6:	bf00      	nop
 8002aa8:	08002ab9 	.word	0x08002ab9
 8002aac:	08002acb 	.word	0x08002acb
 8002ab0:	08002ab9 	.word	0x08002ab9
 8002ab4:	08002b4f 	.word	0x08002b4f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d046      	beq.n	8002b52 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ac8:	e043      	b.n	8002b52 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ace:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ad2:	d140      	bne.n	8002b56 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ad8:	e03d      	b.n	8002b56 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ae2:	d121      	bne.n	8002b28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	d837      	bhi.n	8002b5a <DMA_CheckFifoParam+0xda>
 8002aea:	a201      	add	r2, pc, #4	; (adr r2, 8002af0 <DMA_CheckFifoParam+0x70>)
 8002aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af0:	08002b01 	.word	0x08002b01
 8002af4:	08002b07 	.word	0x08002b07
 8002af8:	08002b01 	.word	0x08002b01
 8002afc:	08002b19 	.word	0x08002b19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]
      break;
 8002b04:	e030      	b.n	8002b68 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d025      	beq.n	8002b5e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b16:	e022      	b.n	8002b5e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b20:	d11f      	bne.n	8002b62 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b26:	e01c      	b.n	8002b62 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d903      	bls.n	8002b36 <DMA_CheckFifoParam+0xb6>
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d003      	beq.n	8002b3c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b34:	e018      	b.n	8002b68 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	73fb      	strb	r3, [r7, #15]
      break;
 8002b3a:	e015      	b.n	8002b68 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00e      	beq.n	8002b66 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b4c:	e00b      	b.n	8002b66 <DMA_CheckFifoParam+0xe6>
      break;
 8002b4e:	bf00      	nop
 8002b50:	e00a      	b.n	8002b68 <DMA_CheckFifoParam+0xe8>
      break;
 8002b52:	bf00      	nop
 8002b54:	e008      	b.n	8002b68 <DMA_CheckFifoParam+0xe8>
      break;
 8002b56:	bf00      	nop
 8002b58:	e006      	b.n	8002b68 <DMA_CheckFifoParam+0xe8>
      break;
 8002b5a:	bf00      	nop
 8002b5c:	e004      	b.n	8002b68 <DMA_CheckFifoParam+0xe8>
      break;
 8002b5e:	bf00      	nop
 8002b60:	e002      	b.n	8002b68 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b62:	bf00      	nop
 8002b64:	e000      	b.n	8002b68 <DMA_CheckFifoParam+0xe8>
      break;
 8002b66:	bf00      	nop
    }
  } 
  
  return status; 
 8002b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop

08002b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b089      	sub	sp, #36	; 0x24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b92:	2300      	movs	r3, #0
 8002b94:	61fb      	str	r3, [r7, #28]
 8002b96:	e175      	b.n	8002e84 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b98:	2201      	movs	r2, #1
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	f040 8164 	bne.w	8002e7e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d005      	beq.n	8002bce <HAL_GPIO_Init+0x56>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f003 0303 	and.w	r3, r3, #3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d130      	bne.n	8002c30 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	2203      	movs	r2, #3
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	68da      	ldr	r2, [r3, #12]
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c04:	2201      	movs	r2, #1
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4013      	ands	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	091b      	lsrs	r3, r3, #4
 8002c1a:	f003 0201 	and.w	r2, r3, #1
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f003 0303 	and.w	r3, r3, #3
 8002c38:	2b03      	cmp	r3, #3
 8002c3a:	d017      	beq.n	8002c6c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	2203      	movs	r2, #3
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4013      	ands	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f003 0303 	and.w	r3, r3, #3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d123      	bne.n	8002cc0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	08da      	lsrs	r2, r3, #3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3208      	adds	r2, #8
 8002c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	220f      	movs	r2, #15
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	43db      	mvns	r3, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	691a      	ldr	r2, [r3, #16]
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	08da      	lsrs	r2, r3, #3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	3208      	adds	r2, #8
 8002cba:	69b9      	ldr	r1, [r7, #24]
 8002cbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	2203      	movs	r2, #3
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f003 0203 	and.w	r2, r3, #3
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f000 80be 	beq.w	8002e7e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d02:	4b66      	ldr	r3, [pc, #408]	; (8002e9c <HAL_GPIO_Init+0x324>)
 8002d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d06:	4a65      	ldr	r2, [pc, #404]	; (8002e9c <HAL_GPIO_Init+0x324>)
 8002d08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d0e:	4b63      	ldr	r3, [pc, #396]	; (8002e9c <HAL_GPIO_Init+0x324>)
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d1a:	4a61      	ldr	r2, [pc, #388]	; (8002ea0 <HAL_GPIO_Init+0x328>)
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	089b      	lsrs	r3, r3, #2
 8002d20:	3302      	adds	r3, #2
 8002d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f003 0303 	and.w	r3, r3, #3
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	220f      	movs	r2, #15
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a58      	ldr	r2, [pc, #352]	; (8002ea4 <HAL_GPIO_Init+0x32c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d037      	beq.n	8002db6 <HAL_GPIO_Init+0x23e>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a57      	ldr	r2, [pc, #348]	; (8002ea8 <HAL_GPIO_Init+0x330>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d031      	beq.n	8002db2 <HAL_GPIO_Init+0x23a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a56      	ldr	r2, [pc, #344]	; (8002eac <HAL_GPIO_Init+0x334>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d02b      	beq.n	8002dae <HAL_GPIO_Init+0x236>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a55      	ldr	r2, [pc, #340]	; (8002eb0 <HAL_GPIO_Init+0x338>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d025      	beq.n	8002daa <HAL_GPIO_Init+0x232>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a54      	ldr	r2, [pc, #336]	; (8002eb4 <HAL_GPIO_Init+0x33c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d01f      	beq.n	8002da6 <HAL_GPIO_Init+0x22e>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a53      	ldr	r2, [pc, #332]	; (8002eb8 <HAL_GPIO_Init+0x340>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d019      	beq.n	8002da2 <HAL_GPIO_Init+0x22a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a52      	ldr	r2, [pc, #328]	; (8002ebc <HAL_GPIO_Init+0x344>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d013      	beq.n	8002d9e <HAL_GPIO_Init+0x226>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a51      	ldr	r2, [pc, #324]	; (8002ec0 <HAL_GPIO_Init+0x348>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d00d      	beq.n	8002d9a <HAL_GPIO_Init+0x222>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a50      	ldr	r2, [pc, #320]	; (8002ec4 <HAL_GPIO_Init+0x34c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d007      	beq.n	8002d96 <HAL_GPIO_Init+0x21e>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a4f      	ldr	r2, [pc, #316]	; (8002ec8 <HAL_GPIO_Init+0x350>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d101      	bne.n	8002d92 <HAL_GPIO_Init+0x21a>
 8002d8e:	2309      	movs	r3, #9
 8002d90:	e012      	b.n	8002db8 <HAL_GPIO_Init+0x240>
 8002d92:	230a      	movs	r3, #10
 8002d94:	e010      	b.n	8002db8 <HAL_GPIO_Init+0x240>
 8002d96:	2308      	movs	r3, #8
 8002d98:	e00e      	b.n	8002db8 <HAL_GPIO_Init+0x240>
 8002d9a:	2307      	movs	r3, #7
 8002d9c:	e00c      	b.n	8002db8 <HAL_GPIO_Init+0x240>
 8002d9e:	2306      	movs	r3, #6
 8002da0:	e00a      	b.n	8002db8 <HAL_GPIO_Init+0x240>
 8002da2:	2305      	movs	r3, #5
 8002da4:	e008      	b.n	8002db8 <HAL_GPIO_Init+0x240>
 8002da6:	2304      	movs	r3, #4
 8002da8:	e006      	b.n	8002db8 <HAL_GPIO_Init+0x240>
 8002daa:	2303      	movs	r3, #3
 8002dac:	e004      	b.n	8002db8 <HAL_GPIO_Init+0x240>
 8002dae:	2302      	movs	r3, #2
 8002db0:	e002      	b.n	8002db8 <HAL_GPIO_Init+0x240>
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <HAL_GPIO_Init+0x240>
 8002db6:	2300      	movs	r3, #0
 8002db8:	69fa      	ldr	r2, [r7, #28]
 8002dba:	f002 0203 	and.w	r2, r2, #3
 8002dbe:	0092      	lsls	r2, r2, #2
 8002dc0:	4093      	lsls	r3, r2
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002dc8:	4935      	ldr	r1, [pc, #212]	; (8002ea0 <HAL_GPIO_Init+0x328>)
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	089b      	lsrs	r3, r3, #2
 8002dce:	3302      	adds	r3, #2
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dd6:	4b3d      	ldr	r3, [pc, #244]	; (8002ecc <HAL_GPIO_Init+0x354>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	43db      	mvns	r3, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4013      	ands	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dfa:	4a34      	ldr	r2, [pc, #208]	; (8002ecc <HAL_GPIO_Init+0x354>)
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e00:	4b32      	ldr	r3, [pc, #200]	; (8002ecc <HAL_GPIO_Init+0x354>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e24:	4a29      	ldr	r2, [pc, #164]	; (8002ecc <HAL_GPIO_Init+0x354>)
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e2a:	4b28      	ldr	r3, [pc, #160]	; (8002ecc <HAL_GPIO_Init+0x354>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	43db      	mvns	r3, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4013      	ands	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e4e:	4a1f      	ldr	r2, [pc, #124]	; (8002ecc <HAL_GPIO_Init+0x354>)
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e54:	4b1d      	ldr	r3, [pc, #116]	; (8002ecc <HAL_GPIO_Init+0x354>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4013      	ands	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e78:	4a14      	ldr	r2, [pc, #80]	; (8002ecc <HAL_GPIO_Init+0x354>)
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	3301      	adds	r3, #1
 8002e82:	61fb      	str	r3, [r7, #28]
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	2b0f      	cmp	r3, #15
 8002e88:	f67f ae86 	bls.w	8002b98 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e8c:	bf00      	nop
 8002e8e:	bf00      	nop
 8002e90:	3724      	adds	r7, #36	; 0x24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	40013800 	.word	0x40013800
 8002ea4:	40020000 	.word	0x40020000
 8002ea8:	40020400 	.word	0x40020400
 8002eac:	40020800 	.word	0x40020800
 8002eb0:	40020c00 	.word	0x40020c00
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	40021400 	.word	0x40021400
 8002ebc:	40021800 	.word	0x40021800
 8002ec0:	40021c00 	.word	0x40021c00
 8002ec4:	40022000 	.word	0x40022000
 8002ec8:	40022400 	.word	0x40022400
 8002ecc:	40013c00 	.word	0x40013c00

08002ed0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691a      	ldr	r2, [r3, #16]
 8002ee0:	887b      	ldrh	r3, [r7, #2]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d002      	beq.n	8002eee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	73fb      	strb	r3, [r7, #15]
 8002eec:	e001      	b.n	8002ef2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	807b      	strh	r3, [r7, #2]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f10:	787b      	ldrb	r3, [r7, #1]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f16:	887a      	ldrh	r2, [r7, #2]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f1c:	e003      	b.n	8002f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f1e:	887b      	ldrh	r3, [r7, #2]
 8002f20:	041a      	lsls	r2, r3, #16
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	619a      	str	r2, [r3, #24]
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f34:	b08f      	sub	sp, #60	; 0x3c
 8002f36:	af0a      	add	r7, sp, #40	; 0x28
 8002f38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e116      	b.n	8003172 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d106      	bne.n	8002f64 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f00c f8a4 	bl	800f0ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2203      	movs	r2, #3
 8002f68:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d102      	bne.n	8002f7e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f004 ffdb 	bl	8007f3e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	603b      	str	r3, [r7, #0]
 8002f8e:	687e      	ldr	r6, [r7, #4]
 8002f90:	466d      	mov	r5, sp
 8002f92:	f106 0410 	add.w	r4, r6, #16
 8002f96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fa2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fa6:	1d33      	adds	r3, r6, #4
 8002fa8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002faa:	6838      	ldr	r0, [r7, #0]
 8002fac:	f004 febc 	bl	8007d28 <USB_CoreInit>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d005      	beq.n	8002fc2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2202      	movs	r2, #2
 8002fba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e0d7      	b.n	8003172 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f004 ffc9 	bl	8007f60 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fce:	2300      	movs	r3, #0
 8002fd0:	73fb      	strb	r3, [r7, #15]
 8002fd2:	e04a      	b.n	800306a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002fd4:	7bfa      	ldrb	r2, [r7, #15]
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4413      	add	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	333d      	adds	r3, #61	; 0x3d
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fe8:	7bfa      	ldrb	r2, [r7, #15]
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	4613      	mov	r3, r2
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	333c      	adds	r3, #60	; 0x3c
 8002ff8:	7bfa      	ldrb	r2, [r7, #15]
 8002ffa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ffc:	7bfa      	ldrb	r2, [r7, #15]
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
 8003000:	b298      	uxth	r0, r3
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	4613      	mov	r3, r2
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	4413      	add	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	3344      	adds	r3, #68	; 0x44
 8003010:	4602      	mov	r2, r0
 8003012:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003014:	7bfa      	ldrb	r2, [r7, #15]
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	4413      	add	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	3340      	adds	r3, #64	; 0x40
 8003024:	2200      	movs	r2, #0
 8003026:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003028:	7bfa      	ldrb	r2, [r7, #15]
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	4613      	mov	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	3348      	adds	r3, #72	; 0x48
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800303c:	7bfa      	ldrb	r2, [r7, #15]
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	4413      	add	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	334c      	adds	r3, #76	; 0x4c
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003050:	7bfa      	ldrb	r2, [r7, #15]
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	4613      	mov	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	4413      	add	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	3354      	adds	r3, #84	; 0x54
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003064:	7bfb      	ldrb	r3, [r7, #15]
 8003066:	3301      	adds	r3, #1
 8003068:	73fb      	strb	r3, [r7, #15]
 800306a:	7bfa      	ldrb	r2, [r7, #15]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	429a      	cmp	r2, r3
 8003072:	d3af      	bcc.n	8002fd4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003074:	2300      	movs	r3, #0
 8003076:	73fb      	strb	r3, [r7, #15]
 8003078:	e044      	b.n	8003104 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800307a:	7bfa      	ldrb	r2, [r7, #15]
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800308c:	2200      	movs	r2, #0
 800308e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003090:	7bfa      	ldrb	r2, [r7, #15]
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4413      	add	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80030a2:	7bfa      	ldrb	r2, [r7, #15]
 80030a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030a6:	7bfa      	ldrb	r2, [r7, #15]
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80030b8:	2200      	movs	r2, #0
 80030ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030bc:	7bfa      	ldrb	r2, [r7, #15]
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	4413      	add	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030d2:	7bfa      	ldrb	r2, [r7, #15]
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	4413      	add	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	440b      	add	r3, r1
 80030e0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030e8:	7bfa      	ldrb	r2, [r7, #15]
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	4613      	mov	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
 8003100:	3301      	adds	r3, #1
 8003102:	73fb      	strb	r3, [r7, #15]
 8003104:	7bfa      	ldrb	r2, [r7, #15]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	429a      	cmp	r2, r3
 800310c:	d3b5      	bcc.n	800307a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	603b      	str	r3, [r7, #0]
 8003114:	687e      	ldr	r6, [r7, #4]
 8003116:	466d      	mov	r5, sp
 8003118:	f106 0410 	add.w	r4, r6, #16
 800311c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800311e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003120:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003122:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003124:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003128:	e885 0003 	stmia.w	r5, {r0, r1}
 800312c:	1d33      	adds	r3, r6, #4
 800312e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003130:	6838      	ldr	r0, [r7, #0]
 8003132:	f004 ff61 	bl	8007ff8 <USB_DevInit>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2202      	movs	r2, #2
 8003140:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e014      	b.n	8003172 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	2b01      	cmp	r3, #1
 800315e:	d102      	bne.n	8003166 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f001 f97b 	bl	800445c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f006 f8af 	bl	80092ce <USB_DevDisconnect>

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3714      	adds	r7, #20
 8003176:	46bd      	mov	sp, r7
 8003178:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800317a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b082      	sub	sp, #8
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003188:	2b01      	cmp	r3, #1
 800318a:	d101      	bne.n	8003190 <HAL_PCD_Start+0x16>
 800318c:	2302      	movs	r3, #2
 800318e:	e012      	b.n	80031b6 <HAL_PCD_Start+0x3c>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4618      	mov	r0, r3
 800319e:	f004 febd 	bl	8007f1c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f006 f870 	bl	800928c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80031be:	b590      	push	{r4, r7, lr}
 80031c0:	b08d      	sub	sp, #52	; 0x34
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f006 f92e 	bl	8009436 <USB_GetMode>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f040 84b7 	bne.w	8003b50 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f006 f892 	bl	8009310 <USB_ReadInterrupts>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 84ad 	beq.w	8003b4e <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	0a1b      	lsrs	r3, r3, #8
 80031fe:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f006 f87f 	bl	8009310 <USB_ReadInterrupts>
 8003212:	4603      	mov	r3, r0
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b02      	cmp	r3, #2
 800321a:	d107      	bne.n	800322c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695a      	ldr	r2, [r3, #20]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f002 0202 	and.w	r2, r2, #2
 800322a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f006 f86d 	bl	8009310 <USB_ReadInterrupts>
 8003236:	4603      	mov	r3, r0
 8003238:	f003 0310 	and.w	r3, r3, #16
 800323c:	2b10      	cmp	r3, #16
 800323e:	d161      	bne.n	8003304 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699a      	ldr	r2, [r3, #24]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0210 	bic.w	r2, r2, #16
 800324e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	f003 020f 	and.w	r2, r3, #15
 800325c:	4613      	mov	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	4413      	add	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	4413      	add	r3, r2
 800326c:	3304      	adds	r3, #4
 800326e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	0c5b      	lsrs	r3, r3, #17
 8003274:	f003 030f 	and.w	r3, r3, #15
 8003278:	2b02      	cmp	r3, #2
 800327a:	d124      	bne.n	80032c6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003282:	4013      	ands	r3, r2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d035      	beq.n	80032f4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	091b      	lsrs	r3, r3, #4
 8003290:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003292:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003296:	b29b      	uxth	r3, r3
 8003298:	461a      	mov	r2, r3
 800329a:	6a38      	ldr	r0, [r7, #32]
 800329c:	f005 fea4 	bl	8008fe8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	091b      	lsrs	r3, r3, #4
 80032a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032ac:	441a      	add	r2, r3
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	6a1a      	ldr	r2, [r3, #32]
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	091b      	lsrs	r3, r3, #4
 80032ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032be:	441a      	add	r2, r3
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	621a      	str	r2, [r3, #32]
 80032c4:	e016      	b.n	80032f4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	0c5b      	lsrs	r3, r3, #17
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	2b06      	cmp	r3, #6
 80032d0:	d110      	bne.n	80032f4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032d8:	2208      	movs	r2, #8
 80032da:	4619      	mov	r1, r3
 80032dc:	6a38      	ldr	r0, [r7, #32]
 80032de:	f005 fe83 	bl	8008fe8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	6a1a      	ldr	r2, [r3, #32]
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	091b      	lsrs	r3, r3, #4
 80032ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032ee:	441a      	add	r2, r3
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	699a      	ldr	r2, [r3, #24]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0210 	orr.w	r2, r2, #16
 8003302:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f006 f801 	bl	8009310 <USB_ReadInterrupts>
 800330e:	4603      	mov	r3, r0
 8003310:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003314:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003318:	f040 80a7 	bne.w	800346a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800331c:	2300      	movs	r3, #0
 800331e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f006 f806 	bl	8009336 <USB_ReadDevAllOutEpInterrupt>
 800332a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800332c:	e099      	b.n	8003462 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800332e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 808e 	beq.w	8003456 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003340:	b2d2      	uxtb	r2, r2
 8003342:	4611      	mov	r1, r2
 8003344:	4618      	mov	r0, r3
 8003346:	f006 f82a 	bl	800939e <USB_ReadDevOutEPInterrupt>
 800334a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00c      	beq.n	8003370 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	015a      	lsls	r2, r3, #5
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	4413      	add	r3, r2
 800335e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003362:	461a      	mov	r2, r3
 8003364:	2301      	movs	r3, #1
 8003366:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003368:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 fef0 	bl	8004150 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00c      	beq.n	8003394 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	015a      	lsls	r2, r3, #5
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	4413      	add	r3, r2
 8003382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003386:	461a      	mov	r2, r3
 8003388:	2308      	movs	r3, #8
 800338a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800338c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 ffc6 	bl	8004320 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f003 0310 	and.w	r3, r3, #16
 800339a:	2b00      	cmp	r3, #0
 800339c:	d008      	beq.n	80033b0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	015a      	lsls	r2, r3, #5
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	4413      	add	r3, r2
 80033a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033aa:	461a      	mov	r2, r3
 80033ac:	2310      	movs	r3, #16
 80033ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d030      	beq.n	800341c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c2:	2b80      	cmp	r3, #128	; 0x80
 80033c4:	d109      	bne.n	80033da <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	69fa      	ldr	r2, [r7, #28]
 80033d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033d8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80033da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033dc:	4613      	mov	r3, r2
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	4413      	add	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	4413      	add	r3, r2
 80033ec:	3304      	adds	r3, #4
 80033ee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	78db      	ldrb	r3, [r3, #3]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d108      	bne.n	800340a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	2200      	movs	r2, #0
 80033fc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	b2db      	uxtb	r3, r3
 8003402:	4619      	mov	r1, r3
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f00b ff75 	bl	800f2f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	015a      	lsls	r2, r3, #5
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	4413      	add	r3, r2
 8003412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003416:	461a      	mov	r2, r3
 8003418:	2302      	movs	r3, #2
 800341a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	f003 0320 	and.w	r3, r3, #32
 8003422:	2b00      	cmp	r3, #0
 8003424:	d008      	beq.n	8003438 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	015a      	lsls	r2, r3, #5
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	4413      	add	r3, r2
 800342e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003432:	461a      	mov	r2, r3
 8003434:	2320      	movs	r3, #32
 8003436:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d009      	beq.n	8003456 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	015a      	lsls	r2, r3, #5
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	4413      	add	r3, r2
 800344a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800344e:	461a      	mov	r2, r3
 8003450:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003454:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	3301      	adds	r3, #1
 800345a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800345c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345e:	085b      	lsrs	r3, r3, #1
 8003460:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003464:	2b00      	cmp	r3, #0
 8003466:	f47f af62 	bne.w	800332e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f005 ff4e 	bl	8009310 <USB_ReadInterrupts>
 8003474:	4603      	mov	r3, r0
 8003476:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800347a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800347e:	f040 80db 	bne.w	8003638 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f005 ff6f 	bl	800936a <USB_ReadDevAllInEpInterrupt>
 800348c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003492:	e0cd      	b.n	8003630 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 80c2 	beq.w	8003624 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a6:	b2d2      	uxtb	r2, r2
 80034a8:	4611      	mov	r1, r2
 80034aa:	4618      	mov	r0, r3
 80034ac:	f005 ff95 	bl	80093da <USB_ReadDevInEPInterrupt>
 80034b0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d057      	beq.n	800356c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	2201      	movs	r2, #1
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	43db      	mvns	r3, r3
 80034d6:	69f9      	ldr	r1, [r7, #28]
 80034d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034dc:	4013      	ands	r3, r2
 80034de:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	015a      	lsls	r2, r3, #5
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	4413      	add	r3, r2
 80034e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034ec:	461a      	mov	r2, r3
 80034ee:	2301      	movs	r3, #1
 80034f0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d132      	bne.n	8003560 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034fe:	4613      	mov	r3, r2
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	4413      	add	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	440b      	add	r3, r1
 8003508:	334c      	adds	r3, #76	; 0x4c
 800350a:	6819      	ldr	r1, [r3, #0]
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003510:	4613      	mov	r3, r2
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	4413      	add	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4403      	add	r3, r0
 800351a:	3348      	adds	r3, #72	; 0x48
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4419      	add	r1, r3
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003524:	4613      	mov	r3, r2
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	4413      	add	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4403      	add	r3, r0
 800352e:	334c      	adds	r3, #76	; 0x4c
 8003530:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	2b00      	cmp	r3, #0
 8003536:	d113      	bne.n	8003560 <HAL_PCD_IRQHandler+0x3a2>
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800353c:	4613      	mov	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	3354      	adds	r3, #84	; 0x54
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d108      	bne.n	8003560 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6818      	ldr	r0, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003558:	461a      	mov	r2, r3
 800355a:	2101      	movs	r1, #1
 800355c:	f005 ff9e 	bl	800949c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	b2db      	uxtb	r3, r3
 8003564:	4619      	mov	r1, r3
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f00b fe3f 	bl	800f1ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	2b00      	cmp	r3, #0
 8003574:	d008      	beq.n	8003588 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	4413      	add	r3, r2
 800357e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003582:	461a      	mov	r2, r3
 8003584:	2308      	movs	r3, #8
 8003586:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	f003 0310 	and.w	r3, r3, #16
 800358e:	2b00      	cmp	r3, #0
 8003590:	d008      	beq.n	80035a4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	015a      	lsls	r2, r3, #5
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	4413      	add	r3, r2
 800359a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800359e:	461a      	mov	r2, r3
 80035a0:	2310      	movs	r3, #16
 80035a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d008      	beq.n	80035c0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	015a      	lsls	r2, r3, #5
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	4413      	add	r3, r2
 80035b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ba:	461a      	mov	r2, r3
 80035bc:	2340      	movs	r3, #64	; 0x40
 80035be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d023      	beq.n	8003612 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80035ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035cc:	6a38      	ldr	r0, [r7, #32]
 80035ce:	f004 fe71 	bl	80082b4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80035d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d4:	4613      	mov	r3, r2
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	3338      	adds	r3, #56	; 0x38
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	4413      	add	r3, r2
 80035e2:	3304      	adds	r3, #4
 80035e4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	78db      	ldrb	r3, [r3, #3]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d108      	bne.n	8003600 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2200      	movs	r2, #0
 80035f2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	4619      	mov	r1, r3
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f00b fe8c 	bl	800f318 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	4413      	add	r3, r2
 8003608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800360c:	461a      	mov	r2, r3
 800360e:	2302      	movs	r3, #2
 8003610:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003618:	2b00      	cmp	r3, #0
 800361a:	d003      	beq.n	8003624 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800361c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 fd08 	bl	8004034 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003626:	3301      	adds	r3, #1
 8003628:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800362a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362c:	085b      	lsrs	r3, r3, #1
 800362e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003632:	2b00      	cmp	r3, #0
 8003634:	f47f af2e 	bne.w	8003494 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	f005 fe67 	bl	8009310 <USB_ReadInterrupts>
 8003642:	4603      	mov	r3, r0
 8003644:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003648:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800364c:	d122      	bne.n	8003694 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	69fa      	ldr	r2, [r7, #28]
 8003658:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800365c:	f023 0301 	bic.w	r3, r3, #1
 8003660:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003668:	2b01      	cmp	r3, #1
 800366a:	d108      	bne.n	800367e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003674:	2100      	movs	r1, #0
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f00c f806 	bl	800f688 <HAL_PCDEx_LPM_Callback>
 800367c:	e002      	b.n	8003684 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f00b fe2a 	bl	800f2d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	695a      	ldr	r2, [r3, #20]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003692:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4618      	mov	r0, r3
 800369a:	f005 fe39 	bl	8009310 <USB_ReadInterrupts>
 800369e:	4603      	mov	r3, r0
 80036a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036a8:	d112      	bne.n	80036d0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d102      	bne.n	80036c0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f00b fde6 	bl	800f28c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695a      	ldr	r2, [r3, #20]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80036ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f005 fe1b 	bl	8009310 <USB_ReadInterrupts>
 80036da:	4603      	mov	r3, r0
 80036dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036e4:	d121      	bne.n	800372a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	695a      	ldr	r2, [r3, #20]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80036f4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d111      	bne.n	8003724 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370e:	089b      	lsrs	r3, r3, #2
 8003710:	f003 020f 	and.w	r2, r3, #15
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800371a:	2101      	movs	r1, #1
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f00b ffb3 	bl	800f688 <HAL_PCDEx_LPM_Callback>
 8003722:	e002      	b.n	800372a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f00b fdb1 	bl	800f28c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f005 fdee 	bl	8009310 <USB_ReadInterrupts>
 8003734:	4603      	mov	r3, r0
 8003736:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800373a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800373e:	f040 80b7 	bne.w	80038b0 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	69fa      	ldr	r2, [r7, #28]
 800374c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003750:	f023 0301 	bic.w	r3, r3, #1
 8003754:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2110      	movs	r1, #16
 800375c:	4618      	mov	r0, r3
 800375e:	f004 fda9 	bl	80082b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003762:	2300      	movs	r3, #0
 8003764:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003766:	e046      	b.n	80037f6 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	4413      	add	r3, r2
 8003770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003774:	461a      	mov	r2, r3
 8003776:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800377a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800377c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800377e:	015a      	lsls	r2, r3, #5
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	4413      	add	r3, r2
 8003784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800378c:	0151      	lsls	r1, r2, #5
 800378e:	69fa      	ldr	r2, [r7, #28]
 8003790:	440a      	add	r2, r1
 8003792:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003796:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800379a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800379c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379e:	015a      	lsls	r2, r3, #5
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	4413      	add	r3, r2
 80037a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037a8:	461a      	mov	r2, r3
 80037aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037ae:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80037b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b2:	015a      	lsls	r2, r3, #5
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037c0:	0151      	lsls	r1, r2, #5
 80037c2:	69fa      	ldr	r2, [r7, #28]
 80037c4:	440a      	add	r2, r1
 80037c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037ce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80037d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037e0:	0151      	lsls	r1, r2, #5
 80037e2:	69fa      	ldr	r2, [r7, #28]
 80037e4:	440a      	add	r2, r1
 80037e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80037ee:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f2:	3301      	adds	r3, #1
 80037f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d3b3      	bcc.n	8003768 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	69fa      	ldr	r2, [r7, #28]
 800380a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800380e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003812:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	2b00      	cmp	r3, #0
 800381a:	d016      	beq.n	800384a <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003822:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003826:	69fa      	ldr	r2, [r7, #28]
 8003828:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800382c:	f043 030b 	orr.w	r3, r3, #11
 8003830:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800383a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383c:	69fa      	ldr	r2, [r7, #28]
 800383e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003842:	f043 030b 	orr.w	r3, r3, #11
 8003846:	6453      	str	r3, [r2, #68]	; 0x44
 8003848:	e015      	b.n	8003876 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003850:	695a      	ldr	r2, [r3, #20]
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003858:	4619      	mov	r1, r3
 800385a:	f242 032b 	movw	r3, #8235	; 0x202b
 800385e:	4313      	orrs	r3, r2
 8003860:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	69fa      	ldr	r2, [r7, #28]
 800386c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003870:	f043 030b 	orr.w	r3, r3, #11
 8003874:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	69fa      	ldr	r2, [r7, #28]
 8003880:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003884:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003888:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6818      	ldr	r0, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800389a:	461a      	mov	r2, r3
 800389c:	f005 fdfe 	bl	800949c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695a      	ldr	r2, [r3, #20]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80038ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f005 fd2b 	bl	8009310 <USB_ReadInterrupts>
 80038ba:	4603      	mov	r3, r0
 80038bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038c4:	d124      	bne.n	8003910 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f005 fdc2 	bl	8009454 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f004 fd6a 	bl	80083ae <USB_GetDevSpeed>
 80038da:	4603      	mov	r3, r0
 80038dc:	461a      	mov	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681c      	ldr	r4, [r3, #0]
 80038e6:	f001 fa7d 	bl	8004de4 <HAL_RCC_GetHCLKFreq>
 80038ea:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	461a      	mov	r2, r3
 80038f4:	4620      	mov	r0, r4
 80038f6:	f004 fa6f 	bl	8007dd8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f00b fc9d 	bl	800f23a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695a      	ldr	r2, [r3, #20]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800390e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f005 fcfb 	bl	8009310 <USB_ReadInterrupts>
 800391a:	4603      	mov	r3, r0
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	2b08      	cmp	r3, #8
 8003922:	d10a      	bne.n	800393a <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f00b fc7a 	bl	800f21e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	695a      	ldr	r2, [r3, #20]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f002 0208 	and.w	r2, r2, #8
 8003938:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f005 fce6 	bl	8009310 <USB_ReadInterrupts>
 8003944:	4603      	mov	r3, r0
 8003946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394a:	2b80      	cmp	r3, #128	; 0x80
 800394c:	d122      	bne.n	8003994 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800394e:	6a3b      	ldr	r3, [r7, #32]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800395a:	2301      	movs	r3, #1
 800395c:	627b      	str	r3, [r7, #36]	; 0x24
 800395e:	e014      	b.n	800398a <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003964:	4613      	mov	r3, r2
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	4413      	add	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	440b      	add	r3, r1
 800396e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d105      	bne.n	8003984 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	b2db      	uxtb	r3, r3
 800397c:	4619      	mov	r1, r3
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 fb27 	bl	8003fd2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	3301      	adds	r3, #1
 8003988:	627b      	str	r3, [r7, #36]	; 0x24
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003990:	429a      	cmp	r2, r3
 8003992:	d3e5      	bcc.n	8003960 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f005 fcb9 	bl	8009310 <USB_ReadInterrupts>
 800399e:	4603      	mov	r3, r0
 80039a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039a8:	d13b      	bne.n	8003a22 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039aa:	2301      	movs	r3, #1
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24
 80039ae:	e02b      	b.n	8003a08 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	015a      	lsls	r2, r3, #5
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	4413      	add	r3, r2
 80039b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c4:	4613      	mov	r3, r2
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	4413      	add	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	440b      	add	r3, r1
 80039ce:	3340      	adds	r3, #64	; 0x40
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d115      	bne.n	8003a02 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80039d6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039d8:	2b00      	cmp	r3, #0
 80039da:	da12      	bge.n	8003a02 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e0:	4613      	mov	r3, r2
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	4413      	add	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	440b      	add	r3, r1
 80039ea:	333f      	adds	r3, #63	; 0x3f
 80039ec:	2201      	movs	r2, #1
 80039ee:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80039f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	4619      	mov	r1, r3
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 fae8 	bl	8003fd2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	3301      	adds	r3, #1
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d3ce      	bcc.n	80039b0 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695a      	ldr	r2, [r3, #20]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003a20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f005 fc72 	bl	8009310 <USB_ReadInterrupts>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a36:	d155      	bne.n	8003ae4 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a38:	2301      	movs	r3, #1
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a3c:	e045      	b.n	8003aca <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	015a      	lsls	r2, r3, #5
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a52:	4613      	mov	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	4413      	add	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	440b      	add	r3, r1
 8003a5c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d12e      	bne.n	8003ac4 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a66:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	da2b      	bge.n	8003ac4 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003a78:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d121      	bne.n	8003ac4 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a84:	4613      	mov	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	4413      	add	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003a92:	2201      	movs	r2, #1
 8003a94:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10a      	bne.n	8003ac4 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	69fa      	ldr	r2, [r7, #28]
 8003ab8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003abc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ac0:	6053      	str	r3, [r2, #4]
            break;
 8003ac2:	e007      	b.n	8003ad4 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d3b4      	bcc.n	8003a3e <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	695a      	ldr	r2, [r3, #20]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003ae2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f005 fc11 	bl	8009310 <USB_ReadInterrupts>
 8003aee:	4603      	mov	r3, r0
 8003af0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003af8:	d10a      	bne.n	8003b10 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f00b fc1e 	bl	800f33c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	695a      	ldr	r2, [r3, #20]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003b0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f005 fbfb 	bl	8009310 <USB_ReadInterrupts>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	d115      	bne.n	8003b50 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	f003 0304 	and.w	r3, r3, #4
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f00b fc0e 	bl	800f358 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6859      	ldr	r1, [r3, #4]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	605a      	str	r2, [r3, #4]
 8003b4c:	e000      	b.n	8003b50 <HAL_PCD_IRQHandler+0x992>
      return;
 8003b4e:	bf00      	nop
    }
  }
}
 8003b50:	3734      	adds	r7, #52	; 0x34
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd90      	pop	{r4, r7, pc}

08003b56 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b082      	sub	sp, #8
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
 8003b5e:	460b      	mov	r3, r1
 8003b60:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <HAL_PCD_SetAddress+0x1a>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e013      	b.n	8003b98 <HAL_PCD_SetAddress+0x42>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	78fa      	ldrb	r2, [r7, #3]
 8003b7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	78fa      	ldrb	r2, [r7, #3]
 8003b86:	4611      	mov	r1, r2
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f005 fb59 	bl	8009240 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	4608      	mov	r0, r1
 8003baa:	4611      	mov	r1, r2
 8003bac:	461a      	mov	r2, r3
 8003bae:	4603      	mov	r3, r0
 8003bb0:	70fb      	strb	r3, [r7, #3]
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	803b      	strh	r3, [r7, #0]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	da0f      	bge.n	8003be6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bc6:	78fb      	ldrb	r3, [r7, #3]
 8003bc8:	f003 020f 	and.w	r2, r3, #15
 8003bcc:	4613      	mov	r3, r2
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	3338      	adds	r3, #56	; 0x38
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	4413      	add	r3, r2
 8003bda:	3304      	adds	r3, #4
 8003bdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2201      	movs	r2, #1
 8003be2:	705a      	strb	r2, [r3, #1]
 8003be4:	e00f      	b.n	8003c06 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003be6:	78fb      	ldrb	r3, [r7, #3]
 8003be8:	f003 020f 	and.w	r2, r3, #15
 8003bec:	4613      	mov	r3, r2
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	4413      	add	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c06:	78fb      	ldrb	r3, [r7, #3]
 8003c08:	f003 030f 	and.w	r3, r3, #15
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003c12:	883a      	ldrh	r2, [r7, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	78ba      	ldrb	r2, [r7, #2]
 8003c1c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	785b      	ldrb	r3, [r3, #1]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d004      	beq.n	8003c30 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c30:	78bb      	ldrb	r3, [r7, #2]
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d102      	bne.n	8003c3c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d101      	bne.n	8003c4a <HAL_PCD_EP_Open+0xaa>
 8003c46:	2302      	movs	r3, #2
 8003c48:	e00e      	b.n	8003c68 <HAL_PCD_EP_Open+0xc8>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68f9      	ldr	r1, [r7, #12]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f004 fbcd 	bl	80083f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003c66:	7afb      	ldrb	r3, [r7, #11]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	da0f      	bge.n	8003ca4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c84:	78fb      	ldrb	r3, [r7, #3]
 8003c86:	f003 020f 	and.w	r2, r3, #15
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	4413      	add	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	3338      	adds	r3, #56	; 0x38
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	4413      	add	r3, r2
 8003c98:	3304      	adds	r3, #4
 8003c9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	705a      	strb	r2, [r3, #1]
 8003ca2:	e00f      	b.n	8003cc4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ca4:	78fb      	ldrb	r3, [r7, #3]
 8003ca6:	f003 020f 	and.w	r2, r3, #15
 8003caa:	4613      	mov	r3, r2
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	4413      	add	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	4413      	add	r3, r2
 8003cba:	3304      	adds	r3, #4
 8003cbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003cc4:	78fb      	ldrb	r3, [r7, #3]
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d101      	bne.n	8003cde <HAL_PCD_EP_Close+0x6e>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	e00e      	b.n	8003cfc <HAL_PCD_EP_Close+0x8c>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68f9      	ldr	r1, [r7, #12]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f004 fc0b 	bl	8008508 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	607a      	str	r2, [r7, #4]
 8003d0e:	603b      	str	r3, [r7, #0]
 8003d10:	460b      	mov	r3, r1
 8003d12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d14:	7afb      	ldrb	r3, [r7, #11]
 8003d16:	f003 020f 	and.w	r2, r3, #15
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	4413      	add	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	4413      	add	r3, r2
 8003d2a:	3304      	adds	r3, #4
 8003d2c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	2200      	movs	r2, #0
 8003d44:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d46:	7afb      	ldrb	r3, [r7, #11]
 8003d48:	f003 030f 	and.w	r3, r3, #15
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d102      	bne.n	8003d60 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d60:	7afb      	ldrb	r3, [r7, #11]
 8003d62:	f003 030f 	and.w	r3, r3, #15
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d109      	bne.n	8003d7e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6818      	ldr	r0, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	461a      	mov	r2, r3
 8003d76:	6979      	ldr	r1, [r7, #20]
 8003d78:	f004 fef2 	bl	8008b60 <USB_EP0StartXfer>
 8003d7c:	e008      	b.n	8003d90 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6818      	ldr	r0, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	461a      	mov	r2, r3
 8003d8a:	6979      	ldr	r1, [r7, #20]
 8003d8c:	f004 fc98 	bl	80086c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3718      	adds	r7, #24
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b083      	sub	sp, #12
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
 8003da2:	460b      	mov	r3, r1
 8003da4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003da6:	78fb      	ldrb	r3, [r7, #3]
 8003da8:	f003 020f 	and.w	r2, r3, #15
 8003dac:	6879      	ldr	r1, [r7, #4]
 8003dae:	4613      	mov	r3, r2
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	4413      	add	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	440b      	add	r3, r1
 8003db8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003dbc:	681b      	ldr	r3, [r3, #0]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b086      	sub	sp, #24
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	60f8      	str	r0, [r7, #12]
 8003dd2:	607a      	str	r2, [r7, #4]
 8003dd4:	603b      	str	r3, [r7, #0]
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dda:	7afb      	ldrb	r3, [r7, #11]
 8003ddc:	f003 020f 	and.w	r2, r3, #15
 8003de0:	4613      	mov	r3, r2
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	4413      	add	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	3338      	adds	r3, #56	; 0x38
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	4413      	add	r3, r2
 8003dee:	3304      	adds	r3, #4
 8003df0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	2200      	movs	r2, #0
 8003e02:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	2201      	movs	r2, #1
 8003e08:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e0a:	7afb      	ldrb	r3, [r7, #11]
 8003e0c:	f003 030f 	and.w	r3, r3, #15
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d102      	bne.n	8003e24 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e24:	7afb      	ldrb	r3, [r7, #11]
 8003e26:	f003 030f 	and.w	r3, r3, #15
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d109      	bne.n	8003e42 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6818      	ldr	r0, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	461a      	mov	r2, r3
 8003e3a:	6979      	ldr	r1, [r7, #20]
 8003e3c:	f004 fe90 	bl	8008b60 <USB_EP0StartXfer>
 8003e40:	e008      	b.n	8003e54 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6818      	ldr	r0, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	6979      	ldr	r1, [r7, #20]
 8003e50:	f004 fc36 	bl	80086c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b084      	sub	sp, #16
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
 8003e66:	460b      	mov	r3, r1
 8003e68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003e6a:	78fb      	ldrb	r3, [r7, #3]
 8003e6c:	f003 020f 	and.w	r2, r3, #15
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d901      	bls.n	8003e7c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e050      	b.n	8003f1e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	da0f      	bge.n	8003ea4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e84:	78fb      	ldrb	r3, [r7, #3]
 8003e86:	f003 020f 	and.w	r2, r3, #15
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	4413      	add	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	3338      	adds	r3, #56	; 0x38
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	4413      	add	r3, r2
 8003e98:	3304      	adds	r3, #4
 8003e9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	705a      	strb	r2, [r3, #1]
 8003ea2:	e00d      	b.n	8003ec0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ea4:	78fa      	ldrb	r2, [r7, #3]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	4413      	add	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ec6:	78fb      	ldrb	r3, [r7, #3]
 8003ec8:	f003 030f 	and.w	r3, r3, #15
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d101      	bne.n	8003ee0 <HAL_PCD_EP_SetStall+0x82>
 8003edc:	2302      	movs	r3, #2
 8003ede:	e01e      	b.n	8003f1e <HAL_PCD_EP_SetStall+0xc0>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68f9      	ldr	r1, [r7, #12]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f005 f8d2 	bl	8009098 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ef4:	78fb      	ldrb	r3, [r7, #3]
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10a      	bne.n	8003f14 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6818      	ldr	r0, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	b2d9      	uxtb	r1, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f0e:	461a      	mov	r2, r3
 8003f10:	f005 fac4 	bl	800949c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b084      	sub	sp, #16
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
 8003f2e:	460b      	mov	r3, r1
 8003f30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003f32:	78fb      	ldrb	r3, [r7, #3]
 8003f34:	f003 020f 	and.w	r2, r3, #15
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d901      	bls.n	8003f44 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e042      	b.n	8003fca <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	da0f      	bge.n	8003f6c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f4c:	78fb      	ldrb	r3, [r7, #3]
 8003f4e:	f003 020f 	and.w	r2, r3, #15
 8003f52:	4613      	mov	r3, r2
 8003f54:	00db      	lsls	r3, r3, #3
 8003f56:	4413      	add	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	3338      	adds	r3, #56	; 0x38
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	4413      	add	r3, r2
 8003f60:	3304      	adds	r3, #4
 8003f62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2201      	movs	r2, #1
 8003f68:	705a      	strb	r2, [r3, #1]
 8003f6a:	e00f      	b.n	8003f8c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f6c:	78fb      	ldrb	r3, [r7, #3]
 8003f6e:	f003 020f 	and.w	r2, r3, #15
 8003f72:	4613      	mov	r3, r2
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	4413      	add	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	4413      	add	r3, r2
 8003f82:	3304      	adds	r3, #4
 8003f84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f92:	78fb      	ldrb	r3, [r7, #3]
 8003f94:	f003 030f 	and.w	r3, r3, #15
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d101      	bne.n	8003fac <HAL_PCD_EP_ClrStall+0x86>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e00e      	b.n	8003fca <HAL_PCD_EP_ClrStall+0xa4>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68f9      	ldr	r1, [r7, #12]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f005 f8da 	bl	8009174 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b084      	sub	sp, #16
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
 8003fda:	460b      	mov	r3, r1
 8003fdc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003fde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	da0c      	bge.n	8004000 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fe6:	78fb      	ldrb	r3, [r7, #3]
 8003fe8:	f003 020f 	and.w	r2, r3, #15
 8003fec:	4613      	mov	r3, r2
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	4413      	add	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	3338      	adds	r3, #56	; 0x38
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	e00c      	b.n	800401a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004000:	78fb      	ldrb	r3, [r7, #3]
 8004002:	f003 020f 	and.w	r2, r3, #15
 8004006:	4613      	mov	r3, r2
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	4413      	add	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	4413      	add	r3, r2
 8004016:	3304      	adds	r3, #4
 8004018:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68f9      	ldr	r1, [r7, #12]
 8004020:	4618      	mov	r0, r3
 8004022:	f004 fef9 	bl	8008e18 <USB_EPStopXfer>
 8004026:	4603      	mov	r3, r0
 8004028:	72fb      	strb	r3, [r7, #11]

  return ret;
 800402a:	7afb      	ldrb	r3, [r7, #11]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b08a      	sub	sp, #40	; 0x28
 8004038:	af02      	add	r7, sp, #8
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	4613      	mov	r3, r2
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	4413      	add	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	3338      	adds	r3, #56	; 0x38
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	4413      	add	r3, r2
 8004058:	3304      	adds	r3, #4
 800405a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a1a      	ldr	r2, [r3, #32]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	429a      	cmp	r2, r3
 8004066:	d901      	bls.n	800406c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e06c      	b.n	8004146 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	699a      	ldr	r2, [r3, #24]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6a1b      	ldr	r3, [r3, #32]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	69fa      	ldr	r2, [r7, #28]
 800407e:	429a      	cmp	r2, r3
 8004080:	d902      	bls.n	8004088 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	3303      	adds	r3, #3
 800408c:	089b      	lsrs	r3, r3, #2
 800408e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004090:	e02b      	b.n	80040ea <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	699a      	ldr	r2, [r3, #24]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	69fa      	ldr	r2, [r7, #28]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d902      	bls.n	80040ae <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	3303      	adds	r3, #3
 80040b2:	089b      	lsrs	r3, r3, #2
 80040b4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6919      	ldr	r1, [r3, #16]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	4603      	mov	r3, r0
 80040cc:	6978      	ldr	r0, [r7, #20]
 80040ce:	f004 ff4d 	bl	8008f6c <USB_WritePacket>

    ep->xfer_buff  += len;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	691a      	ldr	r2, [r3, #16]
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	441a      	add	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6a1a      	ldr	r2, [r3, #32]
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	441a      	add	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	015a      	lsls	r2, r3, #5
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	4413      	add	r3, r2
 80040f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d809      	bhi.n	8004114 <PCD_WriteEmptyTxFifo+0xe0>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6a1a      	ldr	r2, [r3, #32]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004108:	429a      	cmp	r2, r3
 800410a:	d203      	bcs.n	8004114 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1be      	bne.n	8004092 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	699a      	ldr	r2, [r3, #24]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	429a      	cmp	r2, r3
 800411e:	d811      	bhi.n	8004144 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	2201      	movs	r2, #1
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004134:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	43db      	mvns	r3, r3
 800413a:	6939      	ldr	r1, [r7, #16]
 800413c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004140:	4013      	ands	r3, r2
 8004142:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3720      	adds	r7, #32
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
	...

08004150 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b088      	sub	sp, #32
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	333c      	adds	r3, #60	; 0x3c
 8004168:	3304      	adds	r3, #4
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	015a      	lsls	r2, r3, #5
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	4413      	add	r3, r2
 8004176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d17b      	bne.n	800427e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	f003 0308 	and.w	r3, r3, #8
 800418c:	2b00      	cmp	r3, #0
 800418e:	d015      	beq.n	80041bc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	4a61      	ldr	r2, [pc, #388]	; (8004318 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004194:	4293      	cmp	r3, r2
 8004196:	f240 80b9 	bls.w	800430c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f000 80b3 	beq.w	800430c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	015a      	lsls	r2, r3, #5
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	4413      	add	r3, r2
 80041ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b2:	461a      	mov	r2, r3
 80041b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041b8:	6093      	str	r3, [r2, #8]
 80041ba:	e0a7      	b.n	800430c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	f003 0320 	and.w	r3, r3, #32
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d009      	beq.n	80041da <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d2:	461a      	mov	r2, r3
 80041d4:	2320      	movs	r3, #32
 80041d6:	6093      	str	r3, [r2, #8]
 80041d8:	e098      	b.n	800430c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f040 8093 	bne.w	800430c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	4a4b      	ldr	r2, [pc, #300]	; (8004318 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d90f      	bls.n	800420e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00a      	beq.n	800420e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004204:	461a      	mov	r2, r3
 8004206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800420a:	6093      	str	r3, [r2, #8]
 800420c:	e07e      	b.n	800430c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	4613      	mov	r3, r2
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	4413      	add	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	4413      	add	r3, r2
 8004220:	3304      	adds	r3, #4
 8004222:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	69da      	ldr	r2, [r3, #28]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	0159      	lsls	r1, r3, #5
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	440b      	add	r3, r1
 8004230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800423a:	1ad2      	subs	r2, r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d114      	bne.n	8004270 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d109      	bne.n	8004262 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6818      	ldr	r0, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004258:	461a      	mov	r2, r3
 800425a:	2101      	movs	r1, #1
 800425c:	f005 f91e 	bl	800949c <USB_EP0_OutStart>
 8004260:	e006      	b.n	8004270 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	691a      	ldr	r2, [r3, #16]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	441a      	add	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	b2db      	uxtb	r3, r3
 8004274:	4619      	mov	r1, r3
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f00a ff9c 	bl	800f1b4 <HAL_PCD_DataOutStageCallback>
 800427c:	e046      	b.n	800430c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	4a26      	ldr	r2, [pc, #152]	; (800431c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d124      	bne.n	80042d0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00a      	beq.n	80042a6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	015a      	lsls	r2, r3, #5
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	4413      	add	r3, r2
 8004298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800429c:	461a      	mov	r2, r3
 800429e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042a2:	6093      	str	r3, [r2, #8]
 80042a4:	e032      	b.n	800430c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	f003 0320 	and.w	r3, r3, #32
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d008      	beq.n	80042c2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	015a      	lsls	r2, r3, #5
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	4413      	add	r3, r2
 80042b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042bc:	461a      	mov	r2, r3
 80042be:	2320      	movs	r3, #32
 80042c0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	4619      	mov	r1, r3
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f00a ff73 	bl	800f1b4 <HAL_PCD_DataOutStageCallback>
 80042ce:	e01d      	b.n	800430c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d114      	bne.n	8004300 <PCD_EP_OutXfrComplete_int+0x1b0>
 80042d6:	6879      	ldr	r1, [r7, #4]
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	4613      	mov	r3, r2
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	4413      	add	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	440b      	add	r3, r1
 80042e4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d108      	bne.n	8004300 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6818      	ldr	r0, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042f8:	461a      	mov	r2, r3
 80042fa:	2100      	movs	r1, #0
 80042fc:	f005 f8ce 	bl	800949c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	b2db      	uxtb	r3, r3
 8004304:	4619      	mov	r1, r3
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f00a ff54 	bl	800f1b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3720      	adds	r7, #32
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	4f54300a 	.word	0x4f54300a
 800431c:	4f54310a 	.word	0x4f54310a

08004320 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	333c      	adds	r3, #60	; 0x3c
 8004338:	3304      	adds	r3, #4
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	4413      	add	r3, r2
 8004346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4a15      	ldr	r2, [pc, #84]	; (80043a8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d90e      	bls.n	8004374 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800435c:	2b00      	cmp	r3, #0
 800435e:	d009      	beq.n	8004374 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	015a      	lsls	r2, r3, #5
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	4413      	add	r3, r2
 8004368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436c:	461a      	mov	r2, r3
 800436e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004372:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f00a ff0b 	bl	800f190 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	4a0a      	ldr	r2, [pc, #40]	; (80043a8 <PCD_EP_OutSetupPacket_int+0x88>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d90c      	bls.n	800439c <PCD_EP_OutSetupPacket_int+0x7c>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d108      	bne.n	800439c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6818      	ldr	r0, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004394:	461a      	mov	r2, r3
 8004396:	2101      	movs	r1, #1
 8004398:	f005 f880 	bl	800949c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3718      	adds	r7, #24
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	4f54300a 	.word	0x4f54300a

080043ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	460b      	mov	r3, r1
 80043b6:	70fb      	strb	r3, [r7, #3]
 80043b8:	4613      	mov	r3, r2
 80043ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80043c4:	78fb      	ldrb	r3, [r7, #3]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d107      	bne.n	80043da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80043ca:	883b      	ldrh	r3, [r7, #0]
 80043cc:	0419      	lsls	r1, r3, #16
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	430a      	orrs	r2, r1
 80043d6:	629a      	str	r2, [r3, #40]	; 0x28
 80043d8:	e028      	b.n	800442c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e0:	0c1b      	lsrs	r3, r3, #16
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	4413      	add	r3, r2
 80043e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80043e8:	2300      	movs	r3, #0
 80043ea:	73fb      	strb	r3, [r7, #15]
 80043ec:	e00d      	b.n	800440a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
 80043f4:	3340      	adds	r3, #64	; 0x40
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4413      	add	r3, r2
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	0c1b      	lsrs	r3, r3, #16
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	4413      	add	r3, r2
 8004402:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004404:	7bfb      	ldrb	r3, [r7, #15]
 8004406:	3301      	adds	r3, #1
 8004408:	73fb      	strb	r3, [r7, #15]
 800440a:	7bfa      	ldrb	r2, [r7, #15]
 800440c:	78fb      	ldrb	r3, [r7, #3]
 800440e:	3b01      	subs	r3, #1
 8004410:	429a      	cmp	r2, r3
 8004412:	d3ec      	bcc.n	80043ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004414:	883b      	ldrh	r3, [r7, #0]
 8004416:	0418      	lsls	r0, r3, #16
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6819      	ldr	r1, [r3, #0]
 800441c:	78fb      	ldrb	r3, [r7, #3]
 800441e:	3b01      	subs	r3, #1
 8004420:	68ba      	ldr	r2, [r7, #8]
 8004422:	4302      	orrs	r2, r0
 8004424:	3340      	adds	r3, #64	; 0x40
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	440b      	add	r3, r1
 800442a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3714      	adds	r7, #20
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
 8004442:	460b      	mov	r3, r1
 8004444:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	887a      	ldrh	r2, [r7, #2]
 800444c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800448a:	4b05      	ldr	r3, [pc, #20]	; (80044a0 <HAL_PCDEx_ActivateLPM+0x44>)
 800448c:	4313      	orrs	r3, r2
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	10000003 	.word	0x10000003

080044a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80044ac:	2300      	movs	r3, #0
 80044ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e29b      	b.n	80049f2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 8087 	beq.w	80045d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044c8:	4b96      	ldr	r3, [pc, #600]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f003 030c 	and.w	r3, r3, #12
 80044d0:	2b04      	cmp	r3, #4
 80044d2:	d00c      	beq.n	80044ee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044d4:	4b93      	ldr	r3, [pc, #588]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f003 030c 	and.w	r3, r3, #12
 80044dc:	2b08      	cmp	r3, #8
 80044de:	d112      	bne.n	8004506 <HAL_RCC_OscConfig+0x62>
 80044e0:	4b90      	ldr	r3, [pc, #576]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044ec:	d10b      	bne.n	8004506 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ee:	4b8d      	ldr	r3, [pc, #564]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d06c      	beq.n	80045d4 <HAL_RCC_OscConfig+0x130>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d168      	bne.n	80045d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e275      	b.n	80049f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800450e:	d106      	bne.n	800451e <HAL_RCC_OscConfig+0x7a>
 8004510:	4b84      	ldr	r3, [pc, #528]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a83      	ldr	r2, [pc, #524]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 8004516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	e02e      	b.n	800457c <HAL_RCC_OscConfig+0xd8>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10c      	bne.n	8004540 <HAL_RCC_OscConfig+0x9c>
 8004526:	4b7f      	ldr	r3, [pc, #508]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a7e      	ldr	r2, [pc, #504]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 800452c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004530:	6013      	str	r3, [r2, #0]
 8004532:	4b7c      	ldr	r3, [pc, #496]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a7b      	ldr	r2, [pc, #492]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 8004538:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800453c:	6013      	str	r3, [r2, #0]
 800453e:	e01d      	b.n	800457c <HAL_RCC_OscConfig+0xd8>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004548:	d10c      	bne.n	8004564 <HAL_RCC_OscConfig+0xc0>
 800454a:	4b76      	ldr	r3, [pc, #472]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a75      	ldr	r2, [pc, #468]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 8004550:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	4b73      	ldr	r3, [pc, #460]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a72      	ldr	r2, [pc, #456]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 800455c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004560:	6013      	str	r3, [r2, #0]
 8004562:	e00b      	b.n	800457c <HAL_RCC_OscConfig+0xd8>
 8004564:	4b6f      	ldr	r3, [pc, #444]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a6e      	ldr	r2, [pc, #440]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 800456a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800456e:	6013      	str	r3, [r2, #0]
 8004570:	4b6c      	ldr	r3, [pc, #432]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a6b      	ldr	r2, [pc, #428]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 8004576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800457a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d013      	beq.n	80045ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004584:	f7fd f834 	bl	80015f0 <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800458c:	f7fd f830 	bl	80015f0 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b64      	cmp	r3, #100	; 0x64
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e229      	b.n	80049f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800459e:	4b61      	ldr	r3, [pc, #388]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d0f0      	beq.n	800458c <HAL_RCC_OscConfig+0xe8>
 80045aa:	e014      	b.n	80045d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ac:	f7fd f820 	bl	80015f0 <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045b4:	f7fd f81c 	bl	80015f0 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b64      	cmp	r3, #100	; 0x64
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e215      	b.n	80049f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045c6:	4b57      	ldr	r3, [pc, #348]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1f0      	bne.n	80045b4 <HAL_RCC_OscConfig+0x110>
 80045d2:	e000      	b.n	80045d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d069      	beq.n	80046b6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045e2:	4b50      	ldr	r3, [pc, #320]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 030c 	and.w	r3, r3, #12
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00b      	beq.n	8004606 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ee:	4b4d      	ldr	r3, [pc, #308]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 030c 	and.w	r3, r3, #12
 80045f6:	2b08      	cmp	r3, #8
 80045f8:	d11c      	bne.n	8004634 <HAL_RCC_OscConfig+0x190>
 80045fa:	4b4a      	ldr	r3, [pc, #296]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d116      	bne.n	8004634 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004606:	4b47      	ldr	r3, [pc, #284]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d005      	beq.n	800461e <HAL_RCC_OscConfig+0x17a>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d001      	beq.n	800461e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e1e9      	b.n	80049f2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800461e:	4b41      	ldr	r3, [pc, #260]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	493d      	ldr	r1, [pc, #244]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 800462e:	4313      	orrs	r3, r2
 8004630:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004632:	e040      	b.n	80046b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d023      	beq.n	8004684 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800463c:	4b39      	ldr	r3, [pc, #228]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a38      	ldr	r2, [pc, #224]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 8004642:	f043 0301 	orr.w	r3, r3, #1
 8004646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004648:	f7fc ffd2 	bl	80015f0 <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004650:	f7fc ffce 	bl	80015f0 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e1c7      	b.n	80049f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004662:	4b30      	ldr	r3, [pc, #192]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0f0      	beq.n	8004650 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800466e:	4b2d      	ldr	r3, [pc, #180]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	4929      	ldr	r1, [pc, #164]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 800467e:	4313      	orrs	r3, r2
 8004680:	600b      	str	r3, [r1, #0]
 8004682:	e018      	b.n	80046b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004684:	4b27      	ldr	r3, [pc, #156]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a26      	ldr	r2, [pc, #152]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 800468a:	f023 0301 	bic.w	r3, r3, #1
 800468e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004690:	f7fc ffae 	bl	80015f0 <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004698:	f7fc ffaa 	bl	80015f0 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e1a3      	b.n	80049f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046aa:	4b1e      	ldr	r3, [pc, #120]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1f0      	bne.n	8004698 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0308 	and.w	r3, r3, #8
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d038      	beq.n	8004734 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d019      	beq.n	80046fe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046ca:	4b16      	ldr	r3, [pc, #88]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 80046cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ce:	4a15      	ldr	r2, [pc, #84]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 80046d0:	f043 0301 	orr.w	r3, r3, #1
 80046d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d6:	f7fc ff8b 	bl	80015f0 <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046dc:	e008      	b.n	80046f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046de:	f7fc ff87 	bl	80015f0 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e180      	b.n	80049f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046f0:	4b0c      	ldr	r3, [pc, #48]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 80046f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0f0      	beq.n	80046de <HAL_RCC_OscConfig+0x23a>
 80046fc:	e01a      	b.n	8004734 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046fe:	4b09      	ldr	r3, [pc, #36]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 8004700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004702:	4a08      	ldr	r2, [pc, #32]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 8004704:	f023 0301 	bic.w	r3, r3, #1
 8004708:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800470a:	f7fc ff71 	bl	80015f0 <HAL_GetTick>
 800470e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004710:	e00a      	b.n	8004728 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004712:	f7fc ff6d 	bl	80015f0 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d903      	bls.n	8004728 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e166      	b.n	80049f2 <HAL_RCC_OscConfig+0x54e>
 8004724:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004728:	4b92      	ldr	r3, [pc, #584]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 800472a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1ee      	bne.n	8004712 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 80a4 	beq.w	800488a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004742:	4b8c      	ldr	r3, [pc, #560]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10d      	bne.n	800476a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800474e:	4b89      	ldr	r3, [pc, #548]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	4a88      	ldr	r2, [pc, #544]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 8004754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004758:	6413      	str	r3, [r2, #64]	; 0x40
 800475a:	4b86      	ldr	r3, [pc, #536]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004762:	60bb      	str	r3, [r7, #8]
 8004764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004766:	2301      	movs	r3, #1
 8004768:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800476a:	4b83      	ldr	r3, [pc, #524]	; (8004978 <HAL_RCC_OscConfig+0x4d4>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004772:	2b00      	cmp	r3, #0
 8004774:	d118      	bne.n	80047a8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004776:	4b80      	ldr	r3, [pc, #512]	; (8004978 <HAL_RCC_OscConfig+0x4d4>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a7f      	ldr	r2, [pc, #508]	; (8004978 <HAL_RCC_OscConfig+0x4d4>)
 800477c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004782:	f7fc ff35 	bl	80015f0 <HAL_GetTick>
 8004786:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004788:	e008      	b.n	800479c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800478a:	f7fc ff31 	bl	80015f0 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b64      	cmp	r3, #100	; 0x64
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e12a      	b.n	80049f2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800479c:	4b76      	ldr	r3, [pc, #472]	; (8004978 <HAL_RCC_OscConfig+0x4d4>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0f0      	beq.n	800478a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d106      	bne.n	80047be <HAL_RCC_OscConfig+0x31a>
 80047b0:	4b70      	ldr	r3, [pc, #448]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 80047b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b4:	4a6f      	ldr	r2, [pc, #444]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 80047b6:	f043 0301 	orr.w	r3, r3, #1
 80047ba:	6713      	str	r3, [r2, #112]	; 0x70
 80047bc:	e02d      	b.n	800481a <HAL_RCC_OscConfig+0x376>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10c      	bne.n	80047e0 <HAL_RCC_OscConfig+0x33c>
 80047c6:	4b6b      	ldr	r3, [pc, #428]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 80047c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ca:	4a6a      	ldr	r2, [pc, #424]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 80047cc:	f023 0301 	bic.w	r3, r3, #1
 80047d0:	6713      	str	r3, [r2, #112]	; 0x70
 80047d2:	4b68      	ldr	r3, [pc, #416]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 80047d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d6:	4a67      	ldr	r2, [pc, #412]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 80047d8:	f023 0304 	bic.w	r3, r3, #4
 80047dc:	6713      	str	r3, [r2, #112]	; 0x70
 80047de:	e01c      	b.n	800481a <HAL_RCC_OscConfig+0x376>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	2b05      	cmp	r3, #5
 80047e6:	d10c      	bne.n	8004802 <HAL_RCC_OscConfig+0x35e>
 80047e8:	4b62      	ldr	r3, [pc, #392]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 80047ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ec:	4a61      	ldr	r2, [pc, #388]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 80047ee:	f043 0304 	orr.w	r3, r3, #4
 80047f2:	6713      	str	r3, [r2, #112]	; 0x70
 80047f4:	4b5f      	ldr	r3, [pc, #380]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 80047f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f8:	4a5e      	ldr	r2, [pc, #376]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 80047fa:	f043 0301 	orr.w	r3, r3, #1
 80047fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004800:	e00b      	b.n	800481a <HAL_RCC_OscConfig+0x376>
 8004802:	4b5c      	ldr	r3, [pc, #368]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 8004804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004806:	4a5b      	ldr	r2, [pc, #364]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 8004808:	f023 0301 	bic.w	r3, r3, #1
 800480c:	6713      	str	r3, [r2, #112]	; 0x70
 800480e:	4b59      	ldr	r3, [pc, #356]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 8004810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004812:	4a58      	ldr	r2, [pc, #352]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 8004814:	f023 0304 	bic.w	r3, r3, #4
 8004818:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d015      	beq.n	800484e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004822:	f7fc fee5 	bl	80015f0 <HAL_GetTick>
 8004826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004828:	e00a      	b.n	8004840 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800482a:	f7fc fee1 	bl	80015f0 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	f241 3288 	movw	r2, #5000	; 0x1388
 8004838:	4293      	cmp	r3, r2
 800483a:	d901      	bls.n	8004840 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e0d8      	b.n	80049f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004840:	4b4c      	ldr	r3, [pc, #304]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 8004842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d0ee      	beq.n	800482a <HAL_RCC_OscConfig+0x386>
 800484c:	e014      	b.n	8004878 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800484e:	f7fc fecf 	bl	80015f0 <HAL_GetTick>
 8004852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004854:	e00a      	b.n	800486c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004856:	f7fc fecb 	bl	80015f0 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	f241 3288 	movw	r2, #5000	; 0x1388
 8004864:	4293      	cmp	r3, r2
 8004866:	d901      	bls.n	800486c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e0c2      	b.n	80049f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800486c:	4b41      	ldr	r3, [pc, #260]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 800486e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1ee      	bne.n	8004856 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004878:	7dfb      	ldrb	r3, [r7, #23]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d105      	bne.n	800488a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800487e:	4b3d      	ldr	r3, [pc, #244]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	4a3c      	ldr	r2, [pc, #240]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 8004884:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004888:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	2b00      	cmp	r3, #0
 8004890:	f000 80ae 	beq.w	80049f0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004894:	4b37      	ldr	r3, [pc, #220]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f003 030c 	and.w	r3, r3, #12
 800489c:	2b08      	cmp	r3, #8
 800489e:	d06d      	beq.n	800497c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d14b      	bne.n	8004940 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048a8:	4b32      	ldr	r3, [pc, #200]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a31      	ldr	r2, [pc, #196]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 80048ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b4:	f7fc fe9c 	bl	80015f0 <HAL_GetTick>
 80048b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048bc:	f7fc fe98 	bl	80015f0 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e091      	b.n	80049f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ce:	4b29      	ldr	r3, [pc, #164]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1f0      	bne.n	80048bc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	69da      	ldr	r2, [r3, #28]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	431a      	orrs	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e8:	019b      	lsls	r3, r3, #6
 80048ea:	431a      	orrs	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f0:	085b      	lsrs	r3, r3, #1
 80048f2:	3b01      	subs	r3, #1
 80048f4:	041b      	lsls	r3, r3, #16
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fc:	061b      	lsls	r3, r3, #24
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004904:	071b      	lsls	r3, r3, #28
 8004906:	491b      	ldr	r1, [pc, #108]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 8004908:	4313      	orrs	r3, r2
 800490a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800490c:	4b19      	ldr	r3, [pc, #100]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a18      	ldr	r2, [pc, #96]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 8004912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004918:	f7fc fe6a 	bl	80015f0 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004920:	f7fc fe66 	bl	80015f0 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e05f      	b.n	80049f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004932:	4b10      	ldr	r3, [pc, #64]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d0f0      	beq.n	8004920 <HAL_RCC_OscConfig+0x47c>
 800493e:	e057      	b.n	80049f0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004940:	4b0c      	ldr	r3, [pc, #48]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a0b      	ldr	r2, [pc, #44]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 8004946:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800494a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494c:	f7fc fe50 	bl	80015f0 <HAL_GetTick>
 8004950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004954:	f7fc fe4c 	bl	80015f0 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e045      	b.n	80049f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004966:	4b03      	ldr	r3, [pc, #12]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1f0      	bne.n	8004954 <HAL_RCC_OscConfig+0x4b0>
 8004972:	e03d      	b.n	80049f0 <HAL_RCC_OscConfig+0x54c>
 8004974:	40023800 	.word	0x40023800
 8004978:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800497c:	4b1f      	ldr	r3, [pc, #124]	; (80049fc <HAL_RCC_OscConfig+0x558>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d030      	beq.n	80049ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004994:	429a      	cmp	r2, r3
 8004996:	d129      	bne.n	80049ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d122      	bne.n	80049ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049ac:	4013      	ands	r3, r2
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d119      	bne.n	80049ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c2:	085b      	lsrs	r3, r3, #1
 80049c4:	3b01      	subs	r3, #1
 80049c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d10f      	bne.n	80049ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80049d8:	429a      	cmp	r2, r3
 80049da:	d107      	bne.n	80049ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d001      	beq.n	80049f0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e000      	b.n	80049f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3718      	adds	r7, #24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	40023800 	.word	0x40023800

08004a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e0d0      	b.n	8004bba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a18:	4b6a      	ldr	r3, [pc, #424]	; (8004bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 030f 	and.w	r3, r3, #15
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d910      	bls.n	8004a48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a26:	4b67      	ldr	r3, [pc, #412]	; (8004bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f023 020f 	bic.w	r2, r3, #15
 8004a2e:	4965      	ldr	r1, [pc, #404]	; (8004bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a36:	4b63      	ldr	r3, [pc, #396]	; (8004bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 030f 	and.w	r3, r3, #15
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d001      	beq.n	8004a48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e0b8      	b.n	8004bba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d020      	beq.n	8004a96 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d005      	beq.n	8004a6c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a60:	4b59      	ldr	r3, [pc, #356]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	4a58      	ldr	r2, [pc, #352]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0308 	and.w	r3, r3, #8
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d005      	beq.n	8004a84 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a78:	4b53      	ldr	r3, [pc, #332]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	4a52      	ldr	r2, [pc, #328]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a84:	4b50      	ldr	r3, [pc, #320]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	494d      	ldr	r1, [pc, #308]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d040      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d107      	bne.n	8004aba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aaa:	4b47      	ldr	r3, [pc, #284]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d115      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e07f      	b.n	8004bba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d107      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ac2:	4b41      	ldr	r3, [pc, #260]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d109      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e073      	b.n	8004bba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad2:	4b3d      	ldr	r3, [pc, #244]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e06b      	b.n	8004bba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ae2:	4b39      	ldr	r3, [pc, #228]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f023 0203 	bic.w	r2, r3, #3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	4936      	ldr	r1, [pc, #216]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004af4:	f7fc fd7c 	bl	80015f0 <HAL_GetTick>
 8004af8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004afa:	e00a      	b.n	8004b12 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004afc:	f7fc fd78 	bl	80015f0 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e053      	b.n	8004bba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b12:	4b2d      	ldr	r3, [pc, #180]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 020c 	and.w	r2, r3, #12
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d1eb      	bne.n	8004afc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b24:	4b27      	ldr	r3, [pc, #156]	; (8004bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 030f 	and.w	r3, r3, #15
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d210      	bcs.n	8004b54 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b32:	4b24      	ldr	r3, [pc, #144]	; (8004bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f023 020f 	bic.w	r2, r3, #15
 8004b3a:	4922      	ldr	r1, [pc, #136]	; (8004bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b42:	4b20      	ldr	r3, [pc, #128]	; (8004bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 030f 	and.w	r3, r3, #15
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d001      	beq.n	8004b54 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e032      	b.n	8004bba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d008      	beq.n	8004b72 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b60:	4b19      	ldr	r3, [pc, #100]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	4916      	ldr	r1, [pc, #88]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0308 	and.w	r3, r3, #8
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d009      	beq.n	8004b92 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b7e:	4b12      	ldr	r3, [pc, #72]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	490e      	ldr	r1, [pc, #56]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b92:	f000 f821 	bl	8004bd8 <HAL_RCC_GetSysClockFreq>
 8004b96:	4602      	mov	r2, r0
 8004b98:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	091b      	lsrs	r3, r3, #4
 8004b9e:	f003 030f 	and.w	r3, r3, #15
 8004ba2:	490a      	ldr	r1, [pc, #40]	; (8004bcc <HAL_RCC_ClockConfig+0x1cc>)
 8004ba4:	5ccb      	ldrb	r3, [r1, r3]
 8004ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8004baa:	4a09      	ldr	r2, [pc, #36]	; (8004bd0 <HAL_RCC_ClockConfig+0x1d0>)
 8004bac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004bae:	4b09      	ldr	r3, [pc, #36]	; (8004bd4 <HAL_RCC_ClockConfig+0x1d4>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7fc fcd8 	bl	8001568 <HAL_InitTick>

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	40023c00 	.word	0x40023c00
 8004bc8:	40023800 	.word	0x40023800
 8004bcc:	08010d90 	.word	0x08010d90
 8004bd0:	20000000 	.word	0x20000000
 8004bd4:	20000004 	.word	0x20000004

08004bd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bdc:	b094      	sub	sp, #80	; 0x50
 8004bde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004be0:	2300      	movs	r3, #0
 8004be2:	647b      	str	r3, [r7, #68]	; 0x44
 8004be4:	2300      	movs	r3, #0
 8004be6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004be8:	2300      	movs	r3, #0
 8004bea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004bec:	2300      	movs	r3, #0
 8004bee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bf0:	4b79      	ldr	r3, [pc, #484]	; (8004dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f003 030c 	and.w	r3, r3, #12
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	d00d      	beq.n	8004c18 <HAL_RCC_GetSysClockFreq+0x40>
 8004bfc:	2b08      	cmp	r3, #8
 8004bfe:	f200 80e1 	bhi.w	8004dc4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <HAL_RCC_GetSysClockFreq+0x34>
 8004c06:	2b04      	cmp	r3, #4
 8004c08:	d003      	beq.n	8004c12 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c0a:	e0db      	b.n	8004dc4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c0c:	4b73      	ldr	r3, [pc, #460]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x204>)
 8004c0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c10:	e0db      	b.n	8004dca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c12:	4b73      	ldr	r3, [pc, #460]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c16:	e0d8      	b.n	8004dca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c18:	4b6f      	ldr	r3, [pc, #444]	; (8004dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c20:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004c22:	4b6d      	ldr	r3, [pc, #436]	; (8004dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d063      	beq.n	8004cf6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c2e:	4b6a      	ldr	r3, [pc, #424]	; (8004dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	099b      	lsrs	r3, r3, #6
 8004c34:	2200      	movs	r2, #0
 8004c36:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c40:	633b      	str	r3, [r7, #48]	; 0x30
 8004c42:	2300      	movs	r3, #0
 8004c44:	637b      	str	r3, [r7, #52]	; 0x34
 8004c46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c4a:	4622      	mov	r2, r4
 8004c4c:	462b      	mov	r3, r5
 8004c4e:	f04f 0000 	mov.w	r0, #0
 8004c52:	f04f 0100 	mov.w	r1, #0
 8004c56:	0159      	lsls	r1, r3, #5
 8004c58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c5c:	0150      	lsls	r0, r2, #5
 8004c5e:	4602      	mov	r2, r0
 8004c60:	460b      	mov	r3, r1
 8004c62:	4621      	mov	r1, r4
 8004c64:	1a51      	subs	r1, r2, r1
 8004c66:	6139      	str	r1, [r7, #16]
 8004c68:	4629      	mov	r1, r5
 8004c6a:	eb63 0301 	sbc.w	r3, r3, r1
 8004c6e:	617b      	str	r3, [r7, #20]
 8004c70:	f04f 0200 	mov.w	r2, #0
 8004c74:	f04f 0300 	mov.w	r3, #0
 8004c78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c7c:	4659      	mov	r1, fp
 8004c7e:	018b      	lsls	r3, r1, #6
 8004c80:	4651      	mov	r1, sl
 8004c82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c86:	4651      	mov	r1, sl
 8004c88:	018a      	lsls	r2, r1, #6
 8004c8a:	4651      	mov	r1, sl
 8004c8c:	ebb2 0801 	subs.w	r8, r2, r1
 8004c90:	4659      	mov	r1, fp
 8004c92:	eb63 0901 	sbc.w	r9, r3, r1
 8004c96:	f04f 0200 	mov.w	r2, #0
 8004c9a:	f04f 0300 	mov.w	r3, #0
 8004c9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ca2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ca6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004caa:	4690      	mov	r8, r2
 8004cac:	4699      	mov	r9, r3
 8004cae:	4623      	mov	r3, r4
 8004cb0:	eb18 0303 	adds.w	r3, r8, r3
 8004cb4:	60bb      	str	r3, [r7, #8]
 8004cb6:	462b      	mov	r3, r5
 8004cb8:	eb49 0303 	adc.w	r3, r9, r3
 8004cbc:	60fb      	str	r3, [r7, #12]
 8004cbe:	f04f 0200 	mov.w	r2, #0
 8004cc2:	f04f 0300 	mov.w	r3, #0
 8004cc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cca:	4629      	mov	r1, r5
 8004ccc:	024b      	lsls	r3, r1, #9
 8004cce:	4621      	mov	r1, r4
 8004cd0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cd4:	4621      	mov	r1, r4
 8004cd6:	024a      	lsls	r2, r1, #9
 8004cd8:	4610      	mov	r0, r2
 8004cda:	4619      	mov	r1, r3
 8004cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cde:	2200      	movs	r2, #0
 8004ce0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ce2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ce4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ce8:	f7fb fafa 	bl	80002e0 <__aeabi_uldivmod>
 8004cec:	4602      	mov	r2, r0
 8004cee:	460b      	mov	r3, r1
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cf4:	e058      	b.n	8004da8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cf6:	4b38      	ldr	r3, [pc, #224]	; (8004dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	099b      	lsrs	r3, r3, #6
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	4618      	mov	r0, r3
 8004d00:	4611      	mov	r1, r2
 8004d02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d06:	623b      	str	r3, [r7, #32]
 8004d08:	2300      	movs	r3, #0
 8004d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d10:	4642      	mov	r2, r8
 8004d12:	464b      	mov	r3, r9
 8004d14:	f04f 0000 	mov.w	r0, #0
 8004d18:	f04f 0100 	mov.w	r1, #0
 8004d1c:	0159      	lsls	r1, r3, #5
 8004d1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d22:	0150      	lsls	r0, r2, #5
 8004d24:	4602      	mov	r2, r0
 8004d26:	460b      	mov	r3, r1
 8004d28:	4641      	mov	r1, r8
 8004d2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d2e:	4649      	mov	r1, r9
 8004d30:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d34:	f04f 0200 	mov.w	r2, #0
 8004d38:	f04f 0300 	mov.w	r3, #0
 8004d3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d48:	ebb2 040a 	subs.w	r4, r2, sl
 8004d4c:	eb63 050b 	sbc.w	r5, r3, fp
 8004d50:	f04f 0200 	mov.w	r2, #0
 8004d54:	f04f 0300 	mov.w	r3, #0
 8004d58:	00eb      	lsls	r3, r5, #3
 8004d5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d5e:	00e2      	lsls	r2, r4, #3
 8004d60:	4614      	mov	r4, r2
 8004d62:	461d      	mov	r5, r3
 8004d64:	4643      	mov	r3, r8
 8004d66:	18e3      	adds	r3, r4, r3
 8004d68:	603b      	str	r3, [r7, #0]
 8004d6a:	464b      	mov	r3, r9
 8004d6c:	eb45 0303 	adc.w	r3, r5, r3
 8004d70:	607b      	str	r3, [r7, #4]
 8004d72:	f04f 0200 	mov.w	r2, #0
 8004d76:	f04f 0300 	mov.w	r3, #0
 8004d7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d7e:	4629      	mov	r1, r5
 8004d80:	028b      	lsls	r3, r1, #10
 8004d82:	4621      	mov	r1, r4
 8004d84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d88:	4621      	mov	r1, r4
 8004d8a:	028a      	lsls	r2, r1, #10
 8004d8c:	4610      	mov	r0, r2
 8004d8e:	4619      	mov	r1, r3
 8004d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d92:	2200      	movs	r2, #0
 8004d94:	61bb      	str	r3, [r7, #24]
 8004d96:	61fa      	str	r2, [r7, #28]
 8004d98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d9c:	f7fb faa0 	bl	80002e0 <__aeabi_uldivmod>
 8004da0:	4602      	mov	r2, r0
 8004da2:	460b      	mov	r3, r1
 8004da4:	4613      	mov	r3, r2
 8004da6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004da8:	4b0b      	ldr	r3, [pc, #44]	; (8004dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	0c1b      	lsrs	r3, r3, #16
 8004dae:	f003 0303 	and.w	r3, r3, #3
 8004db2:	3301      	adds	r3, #1
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004db8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dc2:	e002      	b.n	8004dca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dc4:	4b05      	ldr	r3, [pc, #20]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x204>)
 8004dc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3750      	adds	r7, #80	; 0x50
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dd6:	bf00      	nop
 8004dd8:	40023800 	.word	0x40023800
 8004ddc:	00f42400 	.word	0x00f42400
 8004de0:	007a1200 	.word	0x007a1200

08004de4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004de4:	b480      	push	{r7}
 8004de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004de8:	4b03      	ldr	r3, [pc, #12]	; (8004df8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004dea:	681b      	ldr	r3, [r3, #0]
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	20000000 	.word	0x20000000

08004dfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e00:	f7ff fff0 	bl	8004de4 <HAL_RCC_GetHCLKFreq>
 8004e04:	4602      	mov	r2, r0
 8004e06:	4b05      	ldr	r3, [pc, #20]	; (8004e1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	0a9b      	lsrs	r3, r3, #10
 8004e0c:	f003 0307 	and.w	r3, r3, #7
 8004e10:	4903      	ldr	r1, [pc, #12]	; (8004e20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e12:	5ccb      	ldrb	r3, [r1, r3]
 8004e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	40023800 	.word	0x40023800
 8004e20:	08010da0 	.word	0x08010da0

08004e24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e28:	f7ff ffdc 	bl	8004de4 <HAL_RCC_GetHCLKFreq>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	4b05      	ldr	r3, [pc, #20]	; (8004e44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	0b5b      	lsrs	r3, r3, #13
 8004e34:	f003 0307 	and.w	r3, r3, #7
 8004e38:	4903      	ldr	r1, [pc, #12]	; (8004e48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e3a:	5ccb      	ldrb	r3, [r1, r3]
 8004e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	40023800 	.word	0x40023800
 8004e48:	08010da0 	.word	0x08010da0

08004e4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b088      	sub	sp, #32
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004e54:	2300      	movs	r3, #0
 8004e56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004e60:	2300      	movs	r3, #0
 8004e62:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004e64:	2300      	movs	r3, #0
 8004e66:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d012      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e74:	4b69      	ldr	r3, [pc, #420]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	4a68      	ldr	r2, [pc, #416]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e7a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004e7e:	6093      	str	r3, [r2, #8]
 8004e80:	4b66      	ldr	r3, [pc, #408]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e82:	689a      	ldr	r2, [r3, #8]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e88:	4964      	ldr	r1, [pc, #400]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004e96:	2301      	movs	r3, #1
 8004e98:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d017      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ea6:	4b5d      	ldr	r3, [pc, #372]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb4:	4959      	ldr	r1, [pc, #356]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ec4:	d101      	bne.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d017      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ee2:	4b4e      	ldr	r3, [pc, #312]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ee8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef0:	494a      	ldr	r1, [pc, #296]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f00:	d101      	bne.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004f02:	2301      	movs	r3, #1
 8004f04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0320 	and.w	r3, r3, #32
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 808b 	beq.w	8005046 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f30:	4b3a      	ldr	r3, [pc, #232]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f34:	4a39      	ldr	r2, [pc, #228]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f3a:	6413      	str	r3, [r2, #64]	; 0x40
 8004f3c:	4b37      	ldr	r3, [pc, #220]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f44:	60bb      	str	r3, [r7, #8]
 8004f46:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f48:	4b35      	ldr	r3, [pc, #212]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a34      	ldr	r2, [pc, #208]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f54:	f7fc fb4c 	bl	80015f0 <HAL_GetTick>
 8004f58:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f5c:	f7fc fb48 	bl	80015f0 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b64      	cmp	r3, #100	; 0x64
 8004f68:	d901      	bls.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e38f      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f6e:	4b2c      	ldr	r3, [pc, #176]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d0f0      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f7a:	4b28      	ldr	r3, [pc, #160]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f82:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d035      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d02e      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f98:	4b20      	ldr	r3, [pc, #128]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fa0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fa2:	4b1e      	ldr	r3, [pc, #120]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa6:	4a1d      	ldr	r2, [pc, #116]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fac:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fae:	4b1b      	ldr	r3, [pc, #108]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb2:	4a1a      	ldr	r2, [pc, #104]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fb8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004fba:	4a18      	ldr	r2, [pc, #96]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004fc0:	4b16      	ldr	r3, [pc, #88]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d114      	bne.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fcc:	f7fc fb10 	bl	80015f0 <HAL_GetTick>
 8004fd0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fd2:	e00a      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fd4:	f7fc fb0c 	bl	80015f0 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e351      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fea:	4b0c      	ldr	r3, [pc, #48]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d0ee      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ffe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005002:	d111      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005004:	4b05      	ldr	r3, [pc, #20]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005010:	4b04      	ldr	r3, [pc, #16]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005012:	400b      	ands	r3, r1
 8005014:	4901      	ldr	r1, [pc, #4]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005016:	4313      	orrs	r3, r2
 8005018:	608b      	str	r3, [r1, #8]
 800501a:	e00b      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800501c:	40023800 	.word	0x40023800
 8005020:	40007000 	.word	0x40007000
 8005024:	0ffffcff 	.word	0x0ffffcff
 8005028:	4bac      	ldr	r3, [pc, #688]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	4aab      	ldr	r2, [pc, #684]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800502e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005032:	6093      	str	r3, [r2, #8]
 8005034:	4ba9      	ldr	r3, [pc, #676]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005036:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005040:	49a6      	ldr	r1, [pc, #664]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005042:	4313      	orrs	r3, r2
 8005044:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0310 	and.w	r3, r3, #16
 800504e:	2b00      	cmp	r3, #0
 8005050:	d010      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005052:	4ba2      	ldr	r3, [pc, #648]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005054:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005058:	4aa0      	ldr	r2, [pc, #640]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800505a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800505e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005062:	4b9e      	ldr	r3, [pc, #632]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005064:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506c:	499b      	ldr	r1, [pc, #620]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800506e:	4313      	orrs	r3, r2
 8005070:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00a      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005080:	4b96      	ldr	r3, [pc, #600]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005086:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800508e:	4993      	ldr	r1, [pc, #588]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005090:	4313      	orrs	r3, r2
 8005092:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00a      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050a2:	4b8e      	ldr	r3, [pc, #568]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050b0:	498a      	ldr	r1, [pc, #552]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00a      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050c4:	4b85      	ldr	r3, [pc, #532]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050d2:	4982      	ldr	r1, [pc, #520]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00a      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80050e6:	4b7d      	ldr	r3, [pc, #500]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f4:	4979      	ldr	r1, [pc, #484]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00a      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005108:	4b74      	ldr	r3, [pc, #464]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800510a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510e:	f023 0203 	bic.w	r2, r3, #3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005116:	4971      	ldr	r1, [pc, #452]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005118:	4313      	orrs	r3, r2
 800511a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00a      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800512a:	4b6c      	ldr	r3, [pc, #432]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800512c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005130:	f023 020c 	bic.w	r2, r3, #12
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005138:	4968      	ldr	r1, [pc, #416]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800513a:	4313      	orrs	r3, r2
 800513c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00a      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800514c:	4b63      	ldr	r3, [pc, #396]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800514e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005152:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800515a:	4960      	ldr	r1, [pc, #384]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800515c:	4313      	orrs	r3, r2
 800515e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00a      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800516e:	4b5b      	ldr	r3, [pc, #364]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005174:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800517c:	4957      	ldr	r1, [pc, #348]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800517e:	4313      	orrs	r3, r2
 8005180:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00a      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005190:	4b52      	ldr	r3, [pc, #328]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005196:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519e:	494f      	ldr	r1, [pc, #316]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00a      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80051b2:	4b4a      	ldr	r3, [pc, #296]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c0:	4946      	ldr	r1, [pc, #280]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00a      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80051d4:	4b41      	ldr	r3, [pc, #260]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e2:	493e      	ldr	r1, [pc, #248]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00a      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80051f6:	4b39      	ldr	r3, [pc, #228]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005204:	4935      	ldr	r1, [pc, #212]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005206:	4313      	orrs	r3, r2
 8005208:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00a      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005218:	4b30      	ldr	r3, [pc, #192]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800521a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800521e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005226:	492d      	ldr	r1, [pc, #180]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005228:	4313      	orrs	r3, r2
 800522a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d011      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800523a:	4b28      	ldr	r3, [pc, #160]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800523c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005240:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005248:	4924      	ldr	r1, [pc, #144]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800524a:	4313      	orrs	r3, r2
 800524c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005254:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005258:	d101      	bne.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800525a:	2301      	movs	r3, #1
 800525c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0308 	and.w	r3, r3, #8
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800526a:	2301      	movs	r3, #1
 800526c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00a      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800527a:	4b18      	ldr	r3, [pc, #96]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800527c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005280:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005288:	4914      	ldr	r1, [pc, #80]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800528a:	4313      	orrs	r3, r2
 800528c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00b      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800529c:	4b0f      	ldr	r3, [pc, #60]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800529e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052ac:	490b      	ldr	r1, [pc, #44]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00f      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80052c0:	4b06      	ldr	r3, [pc, #24]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052d0:	4902      	ldr	r1, [pc, #8]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80052d8:	e002      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80052da:	bf00      	nop
 80052dc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00b      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80052ec:	4b8a      	ldr	r3, [pc, #552]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052fc:	4986      	ldr	r1, [pc, #536]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00b      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005310:	4b81      	ldr	r3, [pc, #516]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005312:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005316:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005320:	497d      	ldr	r1, [pc, #500]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005322:	4313      	orrs	r3, r2
 8005324:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d006      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005336:	2b00      	cmp	r3, #0
 8005338:	f000 80d6 	beq.w	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800533c:	4b76      	ldr	r3, [pc, #472]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a75      	ldr	r2, [pc, #468]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005342:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005346:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005348:	f7fc f952 	bl	80015f0 <HAL_GetTick>
 800534c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800534e:	e008      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005350:	f7fc f94e 	bl	80015f0 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b64      	cmp	r3, #100	; 0x64
 800535c:	d901      	bls.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e195      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005362:	4b6d      	ldr	r3, [pc, #436]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1f0      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0301 	and.w	r3, r3, #1
 8005376:	2b00      	cmp	r3, #0
 8005378:	d021      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x572>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800537e:	2b00      	cmp	r3, #0
 8005380:	d11d      	bne.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005382:	4b65      	ldr	r3, [pc, #404]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005388:	0c1b      	lsrs	r3, r3, #16
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005390:	4b61      	ldr	r3, [pc, #388]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005392:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005396:	0e1b      	lsrs	r3, r3, #24
 8005398:	f003 030f 	and.w	r3, r3, #15
 800539c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	019a      	lsls	r2, r3, #6
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	041b      	lsls	r3, r3, #16
 80053a8:	431a      	orrs	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	061b      	lsls	r3, r3, #24
 80053ae:	431a      	orrs	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	071b      	lsls	r3, r3, #28
 80053b6:	4958      	ldr	r1, [pc, #352]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d004      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053d2:	d00a      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d02e      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053e8:	d129      	bne.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80053ea:	4b4b      	ldr	r3, [pc, #300]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053f0:	0c1b      	lsrs	r3, r3, #16
 80053f2:	f003 0303 	and.w	r3, r3, #3
 80053f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80053f8:	4b47      	ldr	r3, [pc, #284]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053fe:	0f1b      	lsrs	r3, r3, #28
 8005400:	f003 0307 	and.w	r3, r3, #7
 8005404:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	019a      	lsls	r2, r3, #6
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	041b      	lsls	r3, r3, #16
 8005410:	431a      	orrs	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	061b      	lsls	r3, r3, #24
 8005418:	431a      	orrs	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	071b      	lsls	r3, r3, #28
 800541e:	493e      	ldr	r1, [pc, #248]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005420:	4313      	orrs	r3, r2
 8005422:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005426:	4b3c      	ldr	r3, [pc, #240]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005428:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800542c:	f023 021f 	bic.w	r2, r3, #31
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005434:	3b01      	subs	r3, #1
 8005436:	4938      	ldr	r1, [pc, #224]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005438:	4313      	orrs	r3, r2
 800543a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d01d      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800544a:	4b33      	ldr	r3, [pc, #204]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800544c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005450:	0e1b      	lsrs	r3, r3, #24
 8005452:	f003 030f 	and.w	r3, r3, #15
 8005456:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005458:	4b2f      	ldr	r3, [pc, #188]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800545a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800545e:	0f1b      	lsrs	r3, r3, #28
 8005460:	f003 0307 	and.w	r3, r3, #7
 8005464:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	019a      	lsls	r2, r3, #6
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	041b      	lsls	r3, r3, #16
 8005472:	431a      	orrs	r2, r3
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	061b      	lsls	r3, r3, #24
 8005478:	431a      	orrs	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	071b      	lsls	r3, r3, #28
 800547e:	4926      	ldr	r1, [pc, #152]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005480:	4313      	orrs	r3, r2
 8005482:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d011      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	019a      	lsls	r2, r3, #6
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	041b      	lsls	r3, r3, #16
 800549e:	431a      	orrs	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	061b      	lsls	r3, r3, #24
 80054a6:	431a      	orrs	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	071b      	lsls	r3, r3, #28
 80054ae:	491a      	ldr	r1, [pc, #104]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80054b6:	4b18      	ldr	r3, [pc, #96]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a17      	ldr	r2, [pc, #92]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054c2:	f7fc f895 	bl	80015f0 <HAL_GetTick>
 80054c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054c8:	e008      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80054ca:	f7fc f891 	bl	80015f0 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	2b64      	cmp	r3, #100	; 0x64
 80054d6:	d901      	bls.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e0d8      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054dc:	4b0e      	ldr	r3, [pc, #56]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d0f0      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	f040 80ce 	bne.w	800568c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80054f0:	4b09      	ldr	r3, [pc, #36]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a08      	ldr	r2, [pc, #32]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054fc:	f7fc f878 	bl	80015f0 <HAL_GetTick>
 8005500:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005502:	e00b      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005504:	f7fc f874 	bl	80015f0 <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b64      	cmp	r3, #100	; 0x64
 8005510:	d904      	bls.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e0bb      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005516:	bf00      	nop
 8005518:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800551c:	4b5e      	ldr	r3, [pc, #376]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005524:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005528:	d0ec      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800553a:	2b00      	cmp	r3, #0
 800553c:	d009      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005546:	2b00      	cmp	r3, #0
 8005548:	d02e      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554e:	2b00      	cmp	r3, #0
 8005550:	d12a      	bne.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005552:	4b51      	ldr	r3, [pc, #324]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005558:	0c1b      	lsrs	r3, r3, #16
 800555a:	f003 0303 	and.w	r3, r3, #3
 800555e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005560:	4b4d      	ldr	r3, [pc, #308]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005566:	0f1b      	lsrs	r3, r3, #28
 8005568:	f003 0307 	and.w	r3, r3, #7
 800556c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	019a      	lsls	r2, r3, #6
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	041b      	lsls	r3, r3, #16
 8005578:	431a      	orrs	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	061b      	lsls	r3, r3, #24
 8005580:	431a      	orrs	r2, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	071b      	lsls	r3, r3, #28
 8005586:	4944      	ldr	r1, [pc, #272]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005588:	4313      	orrs	r3, r2
 800558a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800558e:	4b42      	ldr	r3, [pc, #264]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005590:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005594:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559c:	3b01      	subs	r3, #1
 800559e:	021b      	lsls	r3, r3, #8
 80055a0:	493d      	ldr	r1, [pc, #244]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d022      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055bc:	d11d      	bne.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80055be:	4b36      	ldr	r3, [pc, #216]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c4:	0e1b      	lsrs	r3, r3, #24
 80055c6:	f003 030f 	and.w	r3, r3, #15
 80055ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80055cc:	4b32      	ldr	r3, [pc, #200]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d2:	0f1b      	lsrs	r3, r3, #28
 80055d4:	f003 0307 	and.w	r3, r3, #7
 80055d8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	019a      	lsls	r2, r3, #6
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	041b      	lsls	r3, r3, #16
 80055e6:	431a      	orrs	r2, r3
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	061b      	lsls	r3, r3, #24
 80055ec:	431a      	orrs	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	071b      	lsls	r3, r3, #28
 80055f2:	4929      	ldr	r1, [pc, #164]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0308 	and.w	r3, r3, #8
 8005602:	2b00      	cmp	r3, #0
 8005604:	d028      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005606:	4b24      	ldr	r3, [pc, #144]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800560c:	0e1b      	lsrs	r3, r3, #24
 800560e:	f003 030f 	and.w	r3, r3, #15
 8005612:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005614:	4b20      	ldr	r3, [pc, #128]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800561a:	0c1b      	lsrs	r3, r3, #16
 800561c:	f003 0303 	and.w	r3, r3, #3
 8005620:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	019a      	lsls	r2, r3, #6
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	041b      	lsls	r3, r3, #16
 800562c:	431a      	orrs	r2, r3
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	061b      	lsls	r3, r3, #24
 8005632:	431a      	orrs	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	69db      	ldr	r3, [r3, #28]
 8005638:	071b      	lsls	r3, r3, #28
 800563a:	4917      	ldr	r1, [pc, #92]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800563c:	4313      	orrs	r3, r2
 800563e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005642:	4b15      	ldr	r3, [pc, #84]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005644:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005648:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005650:	4911      	ldr	r1, [pc, #68]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005652:	4313      	orrs	r3, r2
 8005654:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005658:	4b0f      	ldr	r3, [pc, #60]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a0e      	ldr	r2, [pc, #56]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800565e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005662:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005664:	f7fb ffc4 	bl	80015f0 <HAL_GetTick>
 8005668:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800566a:	e008      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800566c:	f7fb ffc0 	bl	80015f0 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	2b64      	cmp	r3, #100	; 0x64
 8005678:	d901      	bls.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e007      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800567e:	4b06      	ldr	r3, [pc, #24]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005686:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800568a:	d1ef      	bne.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3720      	adds	r7, #32
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	40023800 	.word	0x40023800

0800569c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e022      	b.n	80056f4 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d105      	bne.n	80056c6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f7fb fc9d 	bl	8001000 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2203      	movs	r2, #3
 80056ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f814 	bl	80056fc <HAL_SD_InitCard>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e00a      	b.n	80056f4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3708      	adds	r7, #8
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80056fc:	b5b0      	push	{r4, r5, r7, lr}
 80056fe:	b08e      	sub	sp, #56	; 0x38
 8005700:	af04      	add	r7, sp, #16
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005704:	2300      	movs	r3, #0
 8005706:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8005708:	2300      	movs	r3, #0
 800570a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800570c:	2300      	movs	r3, #0
 800570e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005710:	2300      	movs	r3, #0
 8005712:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005714:	2300      	movs	r3, #0
 8005716:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8005718:	2376      	movs	r3, #118	; 0x76
 800571a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681d      	ldr	r5, [r3, #0]
 8005720:	466c      	mov	r4, sp
 8005722:	f107 0314 	add.w	r3, r7, #20
 8005726:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800572a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800572e:	f107 0308 	add.w	r3, r7, #8
 8005732:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005734:	4628      	mov	r0, r5
 8005736:	f001 fdc5 	bl	80072c4 <SDMMC_Init>
 800573a:	4603      	mov	r3, r0
 800573c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005740:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e059      	b.n	8005800 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685a      	ldr	r2, [r3, #4]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800575a:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4618      	mov	r0, r3
 8005762:	f001 fdf9 	bl	8007358 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005774:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8005776:	2002      	movs	r0, #2
 8005778:	f7fb ff46 	bl	8001608 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 ff59 	bl	8006634 <SD_PowerON>
 8005782:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005784:	6a3b      	ldr	r3, [r7, #32]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00b      	beq.n	80057a2 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	431a      	orrs	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e02e      	b.n	8005800 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 fe78 	bl	8006498 <SD_InitCard>
 80057a8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00b      	beq.n	80057c8 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	431a      	orrs	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e01b      	b.n	8005800 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80057d0:	4618      	mov	r0, r3
 80057d2:	f001 fe53 	bl	800747c <SDMMC_CmdBlockLength>
 80057d6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80057d8:	6a3b      	ldr	r3, [r7, #32]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00f      	beq.n	80057fe <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a09      	ldr	r2, [pc, #36]	; (8005808 <HAL_SD_InitCard+0x10c>)
 80057e4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	431a      	orrs	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e000      	b.n	8005800 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3728      	adds	r7, #40	; 0x28
 8005804:	46bd      	mov	sp, r7
 8005806:	bdb0      	pop	{r4, r5, r7, pc}
 8005808:	004005ff 	.word	0x004005ff

0800580c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b08c      	sub	sp, #48	; 0x30
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
 8005818:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d107      	bne.n	8005834 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005828:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e0c3      	b.n	80059bc <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b01      	cmp	r3, #1
 800583e:	f040 80bc 	bne.w	80059ba <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005848:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	441a      	add	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005852:	429a      	cmp	r2, r3
 8005854:	d907      	bls.n	8005866 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e0aa      	b.n	80059bc <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2203      	movs	r2, #3
 800586a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2200      	movs	r2, #0
 8005874:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8005884:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588a:	4a4e      	ldr	r2, [pc, #312]	; (80059c4 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800588c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	4a4d      	ldr	r2, [pc, #308]	; (80059c8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8005894:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	2200      	movs	r2, #0
 800589c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a2:	2200      	movs	r2, #0
 80058a4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b6:	689a      	ldr	r2, [r3, #8]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	3380      	adds	r3, #128	; 0x80
 80058cc:	4619      	mov	r1, r3
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	025b      	lsls	r3, r3, #9
 80058d4:	089b      	lsrs	r3, r3, #2
 80058d6:	f7fc fe57 	bl	8002588 <HAL_DMA_Start_IT>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d017      	beq.n	8005910 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80058ee:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a35      	ldr	r2, [pc, #212]	; (80059cc <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80058f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e055      	b.n	80059bc <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f042 0208 	orr.w	r2, r2, #8
 800591e:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005924:	2b01      	cmp	r3, #1
 8005926:	d002      	beq.n	800592e <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8005928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592a:	025b      	lsls	r3, r3, #9
 800592c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800592e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005932:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	025b      	lsls	r3, r3, #9
 8005938:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800593a:	2390      	movs	r3, #144	; 0x90
 800593c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800593e:	2302      	movs	r3, #2
 8005940:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005942:	2300      	movs	r3, #0
 8005944:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8005946:	2301      	movs	r3, #1
 8005948:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f107 0210 	add.w	r2, r7, #16
 8005952:	4611      	mov	r1, r2
 8005954:	4618      	mov	r0, r3
 8005956:	f001 fd65 	bl	8007424 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d90a      	bls.n	8005976 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2282      	movs	r2, #130	; 0x82
 8005964:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800596c:	4618      	mov	r0, r3
 800596e:	f001 fdc9 	bl	8007504 <SDMMC_CmdReadMultiBlock>
 8005972:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005974:	e009      	b.n	800598a <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2281      	movs	r2, #129	; 0x81
 800597a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005982:	4618      	mov	r0, r3
 8005984:	f001 fd9c 	bl	80074c0 <SDMMC_CmdReadSingleBlock>
 8005988:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800598a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800598c:	2b00      	cmp	r3, #0
 800598e:	d012      	beq.n	80059b6 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a0d      	ldr	r2, [pc, #52]	; (80059cc <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8005996:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800599c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599e:	431a      	orrs	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e002      	b.n	80059bc <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 80059b6:	2300      	movs	r3, #0
 80059b8:	e000      	b.n	80059bc <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 80059ba:	2302      	movs	r3, #2
  }
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3730      	adds	r7, #48	; 0x30
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	080062a7 	.word	0x080062a7
 80059c8:	08006319 	.word	0x08006319
 80059cc:	004005ff 	.word	0x004005ff

080059d0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b08c      	sub	sp, #48	; 0x30
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
 80059dc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d107      	bne.n	80059f8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e0c6      	b.n	8005b86 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	f040 80bf 	bne.w	8005b84 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005a0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	441a      	add	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d907      	bls.n	8005a2a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e0ad      	b.n	8005b86 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2203      	movs	r2, #3
 8005a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2200      	movs	r2, #0
 8005a38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f042 021a 	orr.w	r2, r2, #26
 8005a48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a4e:	4a50      	ldr	r2, [pc, #320]	; (8005b90 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8005a50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a56:	4a4f      	ldr	r2, [pc, #316]	; (8005b94 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8005a58:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a5e:	2200      	movs	r2, #0
 8005a60:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d002      	beq.n	8005a70 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8005a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6c:	025b      	lsls	r3, r3, #9
 8005a6e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d90a      	bls.n	8005a8c <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	22a0      	movs	r2, #160	; 0xa0
 8005a7a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a82:	4618      	mov	r0, r3
 8005a84:	f001 fd82 	bl	800758c <SDMMC_CmdWriteMultiBlock>
 8005a88:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005a8a:	e009      	b.n	8005aa0 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2290      	movs	r2, #144	; 0x90
 8005a90:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f001 fd55 	bl	8007548 <SDMMC_CmdWriteSingleBlock>
 8005a9e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d012      	beq.n	8005acc <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a3b      	ldr	r2, [pc, #236]	; (8005b98 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8005aac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e05c      	b.n	8005b86 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f042 0208 	orr.w	r2, r2, #8
 8005ada:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae0:	2240      	movs	r2, #64	; 0x40
 8005ae2:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af4:	689a      	ldr	r2, [r3, #8]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005b04:	68b9      	ldr	r1, [r7, #8]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	3380      	adds	r3, #128	; 0x80
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	025b      	lsls	r3, r3, #9
 8005b12:	089b      	lsrs	r3, r3, #2
 8005b14:	f7fc fd38 	bl	8002588 <HAL_DMA_Start_IT>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d01a      	beq.n	8005b54 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 021a 	bic.w	r2, r2, #26
 8005b2c:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a19      	ldr	r2, [pc, #100]	; (8005b98 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8005b34:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e018      	b.n	8005b86 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005b54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b58:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	025b      	lsls	r3, r3, #9
 8005b5e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005b60:	2390      	movs	r3, #144	; 0x90
 8005b62:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005b64:	2300      	movs	r3, #0
 8005b66:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f107 0210 	add.w	r2, r7, #16
 8005b78:	4611      	mov	r1, r2
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f001 fc52 	bl	8007424 <SDMMC_ConfigData>

      return HAL_OK;
 8005b80:	2300      	movs	r3, #0
 8005b82:	e000      	b.n	8005b86 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8005b84:	2302      	movs	r3, #2
  }
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3730      	adds	r7, #48	; 0x30
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	0800627d 	.word	0x0800627d
 8005b94:	08006319 	.word	0x08006319
 8005b98:	004005ff 	.word	0x004005ff

08005b9c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d008      	beq.n	8005bca <HAL_SD_IRQHandler+0x2e>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f003 0308 	and.w	r3, r3, #8
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fdec 	bl	80067a0 <SD_Read_IT>
 8005bc8:	e15a      	b.n	8005e80 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 808d 	beq.w	8005cf4 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005be2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	4b9a      	ldr	r3, [pc, #616]	; (8005e58 <HAL_SD_IRQHandler+0x2bc>)
 8005bf0:	400b      	ands	r3, r1
 8005bf2:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f022 0201 	bic.w	r2, r2, #1
 8005c02:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f003 0308 	and.w	r3, r3, #8
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d039      	beq.n	8005c82 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f003 0302 	and.w	r3, r3, #2
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d104      	bne.n	8005c22 <HAL_SD_IRQHandler+0x86>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f003 0320 	and.w	r3, r3, #32
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d011      	beq.n	8005c46 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f001 fcd2 	bl	80075d0 <SDMMC_CmdStopTransfer>
 8005c2c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d008      	beq.n	8005c46 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 f921 	bl	8005e88 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f240 523a 	movw	r2, #1338	; 0x53a
 8005c4e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d104      	bne.n	8005c72 <HAL_SD_IRQHandler+0xd6>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f003 0302 	and.w	r3, r3, #2
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d003      	beq.n	8005c7a <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f003 fd3c 	bl	80096f0 <HAL_SD_RxCpltCallback>
 8005c78:	e102      	b.n	8005e80 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f003 fd2e 	bl	80096dc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005c80:	e0fe      	b.n	8005e80 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f000 80f9 	beq.w	8005e80 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f003 0320 	and.w	r3, r3, #32
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d011      	beq.n	8005cbc <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f001 fc97 	bl	80075d0 <SDMMC_CmdStopTransfer>
 8005ca2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d008      	beq.n	8005cbc <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	431a      	orrs	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 f8e6 	bl	8005e88 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f040 80dc 	bne.w	8005e80 <HAL_SD_IRQHandler+0x2e4>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f003 0302 	and.w	r3, r3, #2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f040 80d6 	bne.w	8005e80 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 0208 	bic.w	r2, r2, #8
 8005ce2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f003 fcf5 	bl	80096dc <HAL_SD_TxCpltCallback>
}
 8005cf2:	e0c5      	b.n	8005e80 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d008      	beq.n	8005d14 <HAL_SD_IRQHandler+0x178>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f003 0308 	and.w	r3, r3, #8
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d003      	beq.n	8005d14 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 fd98 	bl	8006842 <SD_Write_IT>
 8005d12:	e0b5      	b.n	8005e80 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d1a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f000 80ae 	beq.w	8005e80 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d2a:	f003 0302 	and.w	r3, r3, #2
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d005      	beq.n	8005d3e <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d36:	f043 0202 	orr.w	r2, r3, #2
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d44:	f003 0308 	and.w	r3, r3, #8
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d005      	beq.n	8005d58 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d50:	f043 0208 	orr.w	r2, r3, #8
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d5e:	f003 0320 	and.w	r3, r3, #32
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d005      	beq.n	8005d72 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6a:	f043 0220 	orr.w	r2, r3, #32
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d78:	f003 0310 	and.w	r3, r3, #16
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d005      	beq.n	8005d8c <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d84:	f043 0210 	orr.w	r2, r3, #16
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f240 523a 	movw	r2, #1338	; 0x53a
 8005d94:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005da4:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f001 fc10 	bl	80075d0 <SDMMC_CmdStopTransfer>
 8005db0:	4602      	mov	r2, r0
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db6:	431a      	orrs	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f003 0308 	and.w	r3, r3, #8
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00a      	beq.n	8005ddc <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 f857 	bl	8005e88 <HAL_SD_ErrorCallback>
}
 8005dda:	e051      	b.n	8005e80 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d04c      	beq.n	8005e80 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f003 0310 	and.w	r3, r3, #16
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d104      	bne.n	8005dfa <HAL_SD_IRQHandler+0x25e>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f003 0320 	and.w	r3, r3, #32
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d011      	beq.n	8005e1e <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dfe:	4a17      	ldr	r2, [pc, #92]	; (8005e5c <HAL_SD_IRQHandler+0x2c0>)
 8005e00:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7fc fc1e 	bl	8002648 <HAL_DMA_Abort_IT>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d036      	beq.n	8005e80 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 fad0 	bl	80063bc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005e1c:	e030      	b.n	8005e80 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d104      	bne.n	8005e32 <HAL_SD_IRQHandler+0x296>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d018      	beq.n	8005e64 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e36:	4a0a      	ldr	r2, [pc, #40]	; (8005e60 <HAL_SD_IRQHandler+0x2c4>)
 8005e38:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7fc fc02 	bl	8002648 <HAL_DMA_Abort_IT>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d01a      	beq.n	8005e80 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 faeb 	bl	800642a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005e54:	e014      	b.n	8005e80 <HAL_SD_IRQHandler+0x2e4>
 8005e56:	bf00      	nop
 8005e58:	ffff3ec5 	.word	0xffff3ec5
 8005e5c:	080063bd 	.word	0x080063bd
 8005e60:	0800642b 	.word	0x0800642b
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f003 fc25 	bl	80096c8 <HAL_SD_AbortCallback>
}
 8005e7e:	e7ff      	b.n	8005e80 <HAL_SD_IRQHandler+0x2e4>
 8005e80:	bf00      	nop
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005eaa:	0f9b      	lsrs	r3, r3, #30
 8005eac:	b2da      	uxtb	r2, r3
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005eb6:	0e9b      	lsrs	r3, r3, #26
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	f003 030f 	and.w	r3, r3, #15
 8005ebe:	b2da      	uxtb	r2, r3
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ec8:	0e1b      	lsrs	r3, r3, #24
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	f003 0303 	and.w	r3, r3, #3
 8005ed0:	b2da      	uxtb	r2, r3
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005eda:	0c1b      	lsrs	r3, r3, #16
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ee6:	0a1b      	lsrs	r3, r3, #8
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ef2:	b2da      	uxtb	r2, r3
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005efc:	0d1b      	lsrs	r3, r3, #20
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f08:	0c1b      	lsrs	r3, r3, #16
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	f003 030f 	and.w	r3, r3, #15
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f1a:	0bdb      	lsrs	r3, r3, #15
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	b2da      	uxtb	r2, r3
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f2c:	0b9b      	lsrs	r3, r3, #14
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	f003 0301 	and.w	r3, r3, #1
 8005f34:	b2da      	uxtb	r2, r3
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f3e:	0b5b      	lsrs	r3, r3, #13
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	b2da      	uxtb	r2, r3
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f50:	0b1b      	lsrs	r3, r3, #12
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	f003 0301 	and.w	r3, r3, #1
 8005f58:	b2da      	uxtb	r2, r3
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	2200      	movs	r2, #0
 8005f62:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d163      	bne.n	8006034 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f70:	009a      	lsls	r2, r3, #2
 8005f72:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005f76:	4013      	ands	r3, r2
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005f7c:	0f92      	lsrs	r2, r2, #30
 8005f7e:	431a      	orrs	r2, r3
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f88:	0edb      	lsrs	r3, r3, #27
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	f003 0307 	and.w	r3, r3, #7
 8005f90:	b2da      	uxtb	r2, r3
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f9a:	0e1b      	lsrs	r3, r3, #24
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	f003 0307 	and.w	r3, r3, #7
 8005fa2:	b2da      	uxtb	r2, r3
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fac:	0d5b      	lsrs	r3, r3, #21
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	f003 0307 	and.w	r3, r3, #7
 8005fb4:	b2da      	uxtb	r2, r3
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fbe:	0c9b      	lsrs	r3, r3, #18
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	f003 0307 	and.w	r3, r3, #7
 8005fc6:	b2da      	uxtb	r2, r3
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fd0:	0bdb      	lsrs	r3, r3, #15
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	f003 0307 	and.w	r3, r3, #7
 8005fd8:	b2da      	uxtb	r2, r3
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	1c5a      	adds	r2, r3, #1
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	7e1b      	ldrb	r3, [r3, #24]
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	f003 0307 	and.w	r3, r3, #7
 8005ff2:	3302      	adds	r3, #2
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005ffe:	fb03 f202 	mul.w	r2, r3, r2
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	7a1b      	ldrb	r3, [r3, #8]
 800600a:	b2db      	uxtb	r3, r3
 800600c:	f003 030f 	and.w	r3, r3, #15
 8006010:	2201      	movs	r2, #1
 8006012:	409a      	lsls	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006020:	0a52      	lsrs	r2, r2, #9
 8006022:	fb03 f202 	mul.w	r2, r3, r2
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006030:	661a      	str	r2, [r3, #96]	; 0x60
 8006032:	e031      	b.n	8006098 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006038:	2b01      	cmp	r3, #1
 800603a:	d11d      	bne.n	8006078 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006040:	041b      	lsls	r3, r3, #16
 8006042:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800604a:	0c1b      	lsrs	r3, r3, #16
 800604c:	431a      	orrs	r2, r3
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	3301      	adds	r3, #1
 8006058:	029a      	lsls	r2, r3, #10
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f44f 7200 	mov.w	r2, #512	; 0x200
 800606c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	661a      	str	r2, [r3, #96]	; 0x60
 8006076:	e00f      	b.n	8006098 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a58      	ldr	r2, [pc, #352]	; (80061e0 <HAL_SD_GetCardCSD+0x344>)
 800607e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006084:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e09d      	b.n	80061d4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800609c:	0b9b      	lsrs	r3, r3, #14
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060ae:	09db      	lsrs	r3, r3, #7
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060b6:	b2da      	uxtb	r2, r3
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060c6:	b2da      	uxtb	r2, r3
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d0:	0fdb      	lsrs	r3, r3, #31
 80060d2:	b2da      	uxtb	r2, r3
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060dc:	0f5b      	lsrs	r3, r3, #29
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	f003 0303 	and.w	r3, r3, #3
 80060e4:	b2da      	uxtb	r2, r3
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ee:	0e9b      	lsrs	r3, r3, #26
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	f003 0307 	and.w	r3, r3, #7
 80060f6:	b2da      	uxtb	r2, r3
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006100:	0d9b      	lsrs	r3, r3, #22
 8006102:	b2db      	uxtb	r3, r3
 8006104:	f003 030f 	and.w	r3, r3, #15
 8006108:	b2da      	uxtb	r2, r3
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006112:	0d5b      	lsrs	r3, r3, #21
 8006114:	b2db      	uxtb	r3, r3
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	b2da      	uxtb	r2, r3
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800612e:	0c1b      	lsrs	r3, r3, #16
 8006130:	b2db      	uxtb	r3, r3
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	b2da      	uxtb	r2, r3
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006142:	0bdb      	lsrs	r3, r3, #15
 8006144:	b2db      	uxtb	r3, r3
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	b2da      	uxtb	r2, r3
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006156:	0b9b      	lsrs	r3, r3, #14
 8006158:	b2db      	uxtb	r3, r3
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	b2da      	uxtb	r2, r3
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800616a:	0b5b      	lsrs	r3, r3, #13
 800616c:	b2db      	uxtb	r3, r3
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	b2da      	uxtb	r2, r3
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800617e:	0b1b      	lsrs	r3, r3, #12
 8006180:	b2db      	uxtb	r3, r3
 8006182:	f003 0301 	and.w	r3, r3, #1
 8006186:	b2da      	uxtb	r2, r3
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006192:	0a9b      	lsrs	r3, r3, #10
 8006194:	b2db      	uxtb	r3, r3
 8006196:	f003 0303 	and.w	r3, r3, #3
 800619a:	b2da      	uxtb	r2, r3
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a6:	0a1b      	lsrs	r3, r3, #8
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	f003 0303 	and.w	r3, r3, #3
 80061ae:	b2da      	uxtb	r2, r3
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ba:	085b      	lsrs	r3, r3, #1
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061c2:	b2da      	uxtb	r2, r3
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	004005ff 	.word	0x004005ff

080061e4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b086      	sub	sp, #24
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006244:	2300      	movs	r3, #0
 8006246:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006248:	f107 030c 	add.w	r3, r7, #12
 800624c:	4619      	mov	r1, r3
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fa7e 	bl	8006750 <SD_SendStatus>
 8006254:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d005      	beq.n	8006268 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	431a      	orrs	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	0a5b      	lsrs	r3, r3, #9
 800626c:	f003 030f 	and.w	r3, r3, #15
 8006270:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006272:	693b      	ldr	r3, [r7, #16]
}
 8006274:	4618      	mov	r0, r3
 8006276:	3718      	adds	r7, #24
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006288:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006298:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800629a:	bf00      	nop
 800629c:	3714      	adds	r7, #20
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr

080062a6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b084      	sub	sp, #16
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b8:	2b82      	cmp	r3, #130	; 0x82
 80062ba:	d111      	bne.n	80062e0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4618      	mov	r0, r3
 80062c2:	f001 f985 	bl	80075d0 <SDMMC_CmdStopTransfer>
 80062c6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d008      	beq.n	80062e0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	431a      	orrs	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f7ff fdd4 	bl	8005e88 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f022 0208 	bic.w	r2, r2, #8
 80062ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f240 523a 	movw	r2, #1338	; 0x53a
 80062f8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f003 f9f1 	bl	80096f0 <HAL_SD_RxCpltCallback>
#endif
}
 800630e:	bf00      	nop
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
	...

08006318 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b086      	sub	sp, #24
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006324:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f7fc fb3a 	bl	80029a0 <HAL_DMA_GetError>
 800632c:	4603      	mov	r3, r0
 800632e:	2b02      	cmp	r3, #2
 8006330:	d03e      	beq.n	80063b0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006338:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800633e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006340:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d002      	beq.n	800634e <SD_DMAError+0x36>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d12d      	bne.n	80063aa <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a19      	ldr	r2, [pc, #100]	; (80063b8 <SD_DMAError+0xa0>)
 8006354:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006364:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006372:	6978      	ldr	r0, [r7, #20]
 8006374:	f7ff ff62 	bl	800623c <HAL_SD_GetCardState>
 8006378:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	2b06      	cmp	r3, #6
 800637e:	d002      	beq.n	8006386 <SD_DMAError+0x6e>
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	2b05      	cmp	r3, #5
 8006384:	d10a      	bne.n	800639c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4618      	mov	r0, r3
 800638c:	f001 f920 	bl	80075d0 <SDMMC_CmdStopTransfer>
 8006390:	4602      	mov	r2, r0
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006396:	431a      	orrs	r2, r3
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	2200      	movs	r2, #0
 80063a8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80063aa:	6978      	ldr	r0, [r7, #20]
 80063ac:	f7ff fd6c 	bl	8005e88 <HAL_SD_ErrorCallback>
#endif
  }
}
 80063b0:	bf00      	nop
 80063b2:	3718      	adds	r7, #24
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	004005ff 	.word	0x004005ff

080063bc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f240 523a 	movw	r2, #1338	; 0x53a
 80063d2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f7ff ff31 	bl	800623c <HAL_SD_GetCardState>
 80063da:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	2b06      	cmp	r3, #6
 80063ee:	d002      	beq.n	80063f6 <SD_DMATxAbort+0x3a>
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	2b05      	cmp	r3, #5
 80063f4:	d10a      	bne.n	800640c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4618      	mov	r0, r3
 80063fc:	f001 f8e8 	bl	80075d0 <SDMMC_CmdStopTransfer>
 8006400:	4602      	mov	r2, r0
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006406:	431a      	orrs	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006410:	2b00      	cmp	r3, #0
 8006412:	d103      	bne.n	800641c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f003 f957 	bl	80096c8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800641a:	e002      	b.n	8006422 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f7ff fd33 	bl	8005e88 <HAL_SD_ErrorCallback>
}
 8006422:	bf00      	nop
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b084      	sub	sp, #16
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006436:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f240 523a 	movw	r2, #1338	; 0x53a
 8006440:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f7ff fefa 	bl	800623c <HAL_SD_GetCardState>
 8006448:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2201      	movs	r2, #1
 800644e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	2b06      	cmp	r3, #6
 800645c:	d002      	beq.n	8006464 <SD_DMARxAbort+0x3a>
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	2b05      	cmp	r3, #5
 8006462:	d10a      	bne.n	800647a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4618      	mov	r0, r3
 800646a:	f001 f8b1 	bl	80075d0 <SDMMC_CmdStopTransfer>
 800646e:	4602      	mov	r2, r0
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006474:	431a      	orrs	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647e:	2b00      	cmp	r3, #0
 8006480:	d103      	bne.n	800648a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f003 f920 	bl	80096c8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006488:	e002      	b.n	8006490 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f7ff fcfc 	bl	8005e88 <HAL_SD_ErrorCallback>
}
 8006490:	bf00      	nop
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006498:	b5b0      	push	{r4, r5, r7, lr}
 800649a:	b094      	sub	sp, #80	; 0x50
 800649c:	af04      	add	r7, sp, #16
 800649e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80064a0:	2301      	movs	r3, #1
 80064a2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4618      	mov	r0, r3
 80064aa:	f000 ff63 	bl	8007374 <SDMMC_GetPowerState>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d102      	bne.n	80064ba <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80064b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80064b8:	e0b8      	b.n	800662c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064be:	2b03      	cmp	r3, #3
 80064c0:	d02f      	beq.n	8006522 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f001 f94a 	bl	8007760 <SDMMC_CmdSendCID>
 80064cc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80064ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d001      	beq.n	80064d8 <SD_InitCard+0x40>
    {
      return errorstate;
 80064d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064d6:	e0a9      	b.n	800662c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2100      	movs	r1, #0
 80064de:	4618      	mov	r0, r3
 80064e0:	f000 ff8d 	bl	80073fe <SDMMC_GetResponse>
 80064e4:	4602      	mov	r2, r0
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2104      	movs	r1, #4
 80064f0:	4618      	mov	r0, r3
 80064f2:	f000 ff84 	bl	80073fe <SDMMC_GetResponse>
 80064f6:	4602      	mov	r2, r0
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2108      	movs	r1, #8
 8006502:	4618      	mov	r0, r3
 8006504:	f000 ff7b 	bl	80073fe <SDMMC_GetResponse>
 8006508:	4602      	mov	r2, r0
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	210c      	movs	r1, #12
 8006514:	4618      	mov	r0, r3
 8006516:	f000 ff72 	bl	80073fe <SDMMC_GetResponse>
 800651a:	4602      	mov	r2, r0
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006526:	2b03      	cmp	r3, #3
 8006528:	d00d      	beq.n	8006546 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f107 020e 	add.w	r2, r7, #14
 8006532:	4611      	mov	r1, r2
 8006534:	4618      	mov	r0, r3
 8006536:	f001 f950 	bl	80077da <SDMMC_CmdSetRelAdd>
 800653a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800653c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <SD_InitCard+0xae>
    {
      return errorstate;
 8006542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006544:	e072      	b.n	800662c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800654a:	2b03      	cmp	r3, #3
 800654c:	d036      	beq.n	80065bc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800654e:	89fb      	ldrh	r3, [r7, #14]
 8006550:	461a      	mov	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800655e:	041b      	lsls	r3, r3, #16
 8006560:	4619      	mov	r1, r3
 8006562:	4610      	mov	r0, r2
 8006564:	f001 f91a 	bl	800779c <SDMMC_CmdSendCSD>
 8006568:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800656a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800656c:	2b00      	cmp	r3, #0
 800656e:	d001      	beq.n	8006574 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006572:	e05b      	b.n	800662c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2100      	movs	r1, #0
 800657a:	4618      	mov	r0, r3
 800657c:	f000 ff3f 	bl	80073fe <SDMMC_GetResponse>
 8006580:	4602      	mov	r2, r0
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2104      	movs	r1, #4
 800658c:	4618      	mov	r0, r3
 800658e:	f000 ff36 	bl	80073fe <SDMMC_GetResponse>
 8006592:	4602      	mov	r2, r0
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2108      	movs	r1, #8
 800659e:	4618      	mov	r0, r3
 80065a0:	f000 ff2d 	bl	80073fe <SDMMC_GetResponse>
 80065a4:	4602      	mov	r2, r0
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	210c      	movs	r1, #12
 80065b0:	4618      	mov	r0, r3
 80065b2:	f000 ff24 	bl	80073fe <SDMMC_GetResponse>
 80065b6:	4602      	mov	r2, r0
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2104      	movs	r1, #4
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 ff1b 	bl	80073fe <SDMMC_GetResponse>
 80065c8:	4603      	mov	r3, r0
 80065ca:	0d1a      	lsrs	r2, r3, #20
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80065d0:	f107 0310 	add.w	r3, r7, #16
 80065d4:	4619      	mov	r1, r3
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7ff fc60 	bl	8005e9c <HAL_SD_GetCardCSD>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d002      	beq.n	80065e8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80065e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80065e6:	e021      	b.n	800662c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6819      	ldr	r1, [r3, #0]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065f0:	041b      	lsls	r3, r3, #16
 80065f2:	2200      	movs	r2, #0
 80065f4:	461c      	mov	r4, r3
 80065f6:	4615      	mov	r5, r2
 80065f8:	4622      	mov	r2, r4
 80065fa:	462b      	mov	r3, r5
 80065fc:	4608      	mov	r0, r1
 80065fe:	f001 f809 	bl	8007614 <SDMMC_CmdSelDesel>
 8006602:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006606:	2b00      	cmp	r3, #0
 8006608:	d001      	beq.n	800660e <SD_InitCard+0x176>
  {
    return errorstate;
 800660a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800660c:	e00e      	b.n	800662c <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681d      	ldr	r5, [r3, #0]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	466c      	mov	r4, sp
 8006616:	f103 0210 	add.w	r2, r3, #16
 800661a:	ca07      	ldmia	r2, {r0, r1, r2}
 800661c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006620:	3304      	adds	r3, #4
 8006622:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006624:	4628      	mov	r0, r5
 8006626:	f000 fe4d 	bl	80072c4 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3740      	adds	r7, #64	; 0x40
 8006630:	46bd      	mov	sp, r7
 8006632:	bdb0      	pop	{r4, r5, r7, pc}

08006634 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b086      	sub	sp, #24
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800663c:	2300      	movs	r3, #0
 800663e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006640:	2300      	movs	r3, #0
 8006642:	617b      	str	r3, [r7, #20]
 8006644:	2300      	movs	r3, #0
 8006646:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4618      	mov	r0, r3
 800664e:	f001 f804 	bl	800765a <SDMMC_CmdGoIdleState>
 8006652:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d001      	beq.n	800665e <SD_PowerON+0x2a>
  {
    return errorstate;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	e072      	b.n	8006744 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4618      	mov	r0, r3
 8006664:	f001 f817 	bl	8007696 <SDMMC_CmdOperCond>
 8006668:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00d      	beq.n	800668c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4618      	mov	r0, r3
 800667c:	f000 ffed 	bl	800765a <SDMMC_CmdGoIdleState>
 8006680:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d004      	beq.n	8006692 <SD_PowerON+0x5e>
    {
      return errorstate;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	e05b      	b.n	8006744 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006696:	2b01      	cmp	r3, #1
 8006698:	d137      	bne.n	800670a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2100      	movs	r1, #0
 80066a0:	4618      	mov	r0, r3
 80066a2:	f001 f817 	bl	80076d4 <SDMMC_CmdAppCommand>
 80066a6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d02d      	beq.n	800670a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80066ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80066b2:	e047      	b.n	8006744 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2100      	movs	r1, #0
 80066ba:	4618      	mov	r0, r3
 80066bc:	f001 f80a 	bl	80076d4 <SDMMC_CmdAppCommand>
 80066c0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d001      	beq.n	80066cc <SD_PowerON+0x98>
    {
      return errorstate;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	e03b      	b.n	8006744 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	491e      	ldr	r1, [pc, #120]	; (800674c <SD_PowerON+0x118>)
 80066d2:	4618      	mov	r0, r3
 80066d4:	f001 f820 	bl	8007718 <SDMMC_CmdAppOperCommand>
 80066d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d002      	beq.n	80066e6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80066e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80066e4:	e02e      	b.n	8006744 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2100      	movs	r1, #0
 80066ec:	4618      	mov	r0, r3
 80066ee:	f000 fe86 	bl	80073fe <SDMMC_GetResponse>
 80066f2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	0fdb      	lsrs	r3, r3, #31
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d101      	bne.n	8006700 <SD_PowerON+0xcc>
 80066fc:	2301      	movs	r3, #1
 80066fe:	e000      	b.n	8006702 <SD_PowerON+0xce>
 8006700:	2300      	movs	r3, #0
 8006702:	613b      	str	r3, [r7, #16]

    count++;
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	3301      	adds	r3, #1
 8006708:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006710:	4293      	cmp	r3, r2
 8006712:	d802      	bhi.n	800671a <SD_PowerON+0xe6>
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d0cc      	beq.n	80066b4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006720:	4293      	cmp	r3, r2
 8006722:	d902      	bls.n	800672a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006724:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006728:	e00c      	b.n	8006744 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d003      	beq.n	800673c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	645a      	str	r2, [r3, #68]	; 0x44
 800673a:	e002      	b.n	8006742 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3718      	adds	r7, #24
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	c1100000 	.word	0xc1100000

08006750 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d102      	bne.n	8006766 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006760:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006764:	e018      	b.n	8006798 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800676e:	041b      	lsls	r3, r3, #16
 8006770:	4619      	mov	r1, r3
 8006772:	4610      	mov	r0, r2
 8006774:	f001 f852 	bl	800781c <SDMMC_CmdSendStatus>
 8006778:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d001      	beq.n	8006784 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	e009      	b.n	8006798 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2100      	movs	r1, #0
 800678a:	4618      	mov	r0, r3
 800678c:	f000 fe37 	bl	80073fe <SDMMC_GetResponse>
 8006790:	4602      	mov	r2, r0
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b086      	sub	sp, #24
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ac:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d03f      	beq.n	800683a <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80067ba:	2300      	movs	r3, #0
 80067bc:	617b      	str	r3, [r7, #20]
 80067be:	e033      	b.n	8006828 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4618      	mov	r0, r3
 80067c6:	f000 fda9 	bl	800731c <SDMMC_ReadFIFO>
 80067ca:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	b2da      	uxtb	r2, r3
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	3301      	adds	r3, #1
 80067d8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	3b01      	subs	r3, #1
 80067de:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	0a1b      	lsrs	r3, r3, #8
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	3301      	adds	r3, #1
 80067ee:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	3b01      	subs	r3, #1
 80067f4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	0c1b      	lsrs	r3, r3, #16
 80067fa:	b2da      	uxtb	r2, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	3301      	adds	r3, #1
 8006804:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	3b01      	subs	r3, #1
 800680a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	0e1b      	lsrs	r3, r3, #24
 8006810:	b2da      	uxtb	r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	3301      	adds	r3, #1
 800681a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	3b01      	subs	r3, #1
 8006820:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	3301      	adds	r3, #1
 8006826:	617b      	str	r3, [r7, #20]
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	2b07      	cmp	r3, #7
 800682c:	d9c8      	bls.n	80067c0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	693a      	ldr	r2, [r7, #16]
 8006838:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800683a:	bf00      	nop
 800683c:	3718      	adds	r7, #24
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006842:	b580      	push	{r7, lr}
 8006844:	b086      	sub	sp, #24
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006854:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d043      	beq.n	80068e4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800685c:	2300      	movs	r3, #0
 800685e:	617b      	str	r3, [r7, #20]
 8006860:	e037      	b.n	80068d2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	3301      	adds	r3, #1
 800686c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	3b01      	subs	r3, #1
 8006872:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	021a      	lsls	r2, r3, #8
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	4313      	orrs	r3, r2
 800687e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	3301      	adds	r3, #1
 8006884:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	3b01      	subs	r3, #1
 800688a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	041a      	lsls	r2, r3, #16
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	4313      	orrs	r3, r2
 8006896:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	3301      	adds	r3, #1
 800689c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	3b01      	subs	r3, #1
 80068a2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	061a      	lsls	r2, r3, #24
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	60bb      	str	r3, [r7, #8]
      tmp++;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	3301      	adds	r3, #1
 80068b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	3b01      	subs	r3, #1
 80068ba:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f107 0208 	add.w	r2, r7, #8
 80068c4:	4611      	mov	r1, r2
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 fd35 	bl	8007336 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	3301      	adds	r3, #1
 80068d0:	617b      	str	r3, [r7, #20]
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	2b07      	cmp	r3, #7
 80068d6:	d9c4      	bls.n	8006862 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80068e4:	bf00      	nop
 80068e6:	3718      	adds	r7, #24
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d101      	bne.n	80068fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e040      	b.n	8006980 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006902:	2b00      	cmp	r3, #0
 8006904:	d106      	bne.n	8006914 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f7fa fc82 	bl	8001218 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2224      	movs	r2, #36	; 0x24
 8006918:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f022 0201 	bic.w	r2, r2, #1
 8006928:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 f8b0 	bl	8006a90 <UART_SetConfig>
 8006930:	4603      	mov	r3, r0
 8006932:	2b01      	cmp	r3, #1
 8006934:	d101      	bne.n	800693a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e022      	b.n	8006980 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693e:	2b00      	cmp	r3, #0
 8006940:	d002      	beq.n	8006948 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 fb08 	bl	8006f58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	685a      	ldr	r2, [r3, #4]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006956:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	689a      	ldr	r2, [r3, #8]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006966:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f042 0201 	orr.w	r2, r2, #1
 8006976:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 fb8f 	bl	800709c <UART_CheckIdleState>
 800697e:	4603      	mov	r3, r0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3708      	adds	r7, #8
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b08a      	sub	sp, #40	; 0x28
 800698c:	af02      	add	r7, sp, #8
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	603b      	str	r3, [r7, #0]
 8006994:	4613      	mov	r3, r2
 8006996:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800699c:	2b20      	cmp	r3, #32
 800699e:	d171      	bne.n	8006a84 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d002      	beq.n	80069ac <HAL_UART_Transmit+0x24>
 80069a6:	88fb      	ldrh	r3, [r7, #6]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d101      	bne.n	80069b0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e06a      	b.n	8006a86 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2221      	movs	r2, #33	; 0x21
 80069bc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069be:	f7fa fe17 	bl	80015f0 <HAL_GetTick>
 80069c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	88fa      	ldrh	r2, [r7, #6]
 80069c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	88fa      	ldrh	r2, [r7, #6]
 80069d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069dc:	d108      	bne.n	80069f0 <HAL_UART_Transmit+0x68>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d104      	bne.n	80069f0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80069e6:	2300      	movs	r3, #0
 80069e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	61bb      	str	r3, [r7, #24]
 80069ee:	e003      	b.n	80069f8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069f4:	2300      	movs	r3, #0
 80069f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80069f8:	e02c      	b.n	8006a54 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	2200      	movs	r2, #0
 8006a02:	2180      	movs	r1, #128	; 0x80
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f000 fb96 	bl	8007136 <UART_WaitOnFlagUntilTimeout>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e038      	b.n	8006a86 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d10b      	bne.n	8006a32 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	881b      	ldrh	r3, [r3, #0]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a28:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	3302      	adds	r3, #2
 8006a2e:	61bb      	str	r3, [r7, #24]
 8006a30:	e007      	b.n	8006a42 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	781a      	ldrb	r2, [r3, #0]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1cc      	bne.n	80069fa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	9300      	str	r3, [sp, #0]
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	2200      	movs	r2, #0
 8006a68:	2140      	movs	r1, #64	; 0x40
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f000 fb63 	bl	8007136 <UART_WaitOnFlagUntilTimeout>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d001      	beq.n	8006a7a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e005      	b.n	8006a86 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006a80:	2300      	movs	r3, #0
 8006a82:	e000      	b.n	8006a86 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006a84:	2302      	movs	r3, #2
  }
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3720      	adds	r7, #32
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
	...

08006a90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b088      	sub	sp, #32
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	689a      	ldr	r2, [r3, #8]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	431a      	orrs	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	431a      	orrs	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	69db      	ldr	r3, [r3, #28]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	4ba6      	ldr	r3, [pc, #664]	; (8006d54 <UART_SetConfig+0x2c4>)
 8006abc:	4013      	ands	r3, r2
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	6812      	ldr	r2, [r2, #0]
 8006ac2:	6979      	ldr	r1, [r7, #20]
 8006ac4:	430b      	orrs	r3, r1
 8006ac6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	68da      	ldr	r2, [r3, #12]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	430a      	orrs	r2, r1
 8006adc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a1b      	ldr	r3, [r3, #32]
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	430a      	orrs	r2, r1
 8006b00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a94      	ldr	r2, [pc, #592]	; (8006d58 <UART_SetConfig+0x2c8>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d120      	bne.n	8006b4e <UART_SetConfig+0xbe>
 8006b0c:	4b93      	ldr	r3, [pc, #588]	; (8006d5c <UART_SetConfig+0x2cc>)
 8006b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b12:	f003 0303 	and.w	r3, r3, #3
 8006b16:	2b03      	cmp	r3, #3
 8006b18:	d816      	bhi.n	8006b48 <UART_SetConfig+0xb8>
 8006b1a:	a201      	add	r2, pc, #4	; (adr r2, 8006b20 <UART_SetConfig+0x90>)
 8006b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b20:	08006b31 	.word	0x08006b31
 8006b24:	08006b3d 	.word	0x08006b3d
 8006b28:	08006b37 	.word	0x08006b37
 8006b2c:	08006b43 	.word	0x08006b43
 8006b30:	2301      	movs	r3, #1
 8006b32:	77fb      	strb	r3, [r7, #31]
 8006b34:	e150      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006b36:	2302      	movs	r3, #2
 8006b38:	77fb      	strb	r3, [r7, #31]
 8006b3a:	e14d      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006b3c:	2304      	movs	r3, #4
 8006b3e:	77fb      	strb	r3, [r7, #31]
 8006b40:	e14a      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006b42:	2308      	movs	r3, #8
 8006b44:	77fb      	strb	r3, [r7, #31]
 8006b46:	e147      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006b48:	2310      	movs	r3, #16
 8006b4a:	77fb      	strb	r3, [r7, #31]
 8006b4c:	e144      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a83      	ldr	r2, [pc, #524]	; (8006d60 <UART_SetConfig+0x2d0>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d132      	bne.n	8006bbe <UART_SetConfig+0x12e>
 8006b58:	4b80      	ldr	r3, [pc, #512]	; (8006d5c <UART_SetConfig+0x2cc>)
 8006b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b5e:	f003 030c 	and.w	r3, r3, #12
 8006b62:	2b0c      	cmp	r3, #12
 8006b64:	d828      	bhi.n	8006bb8 <UART_SetConfig+0x128>
 8006b66:	a201      	add	r2, pc, #4	; (adr r2, 8006b6c <UART_SetConfig+0xdc>)
 8006b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6c:	08006ba1 	.word	0x08006ba1
 8006b70:	08006bb9 	.word	0x08006bb9
 8006b74:	08006bb9 	.word	0x08006bb9
 8006b78:	08006bb9 	.word	0x08006bb9
 8006b7c:	08006bad 	.word	0x08006bad
 8006b80:	08006bb9 	.word	0x08006bb9
 8006b84:	08006bb9 	.word	0x08006bb9
 8006b88:	08006bb9 	.word	0x08006bb9
 8006b8c:	08006ba7 	.word	0x08006ba7
 8006b90:	08006bb9 	.word	0x08006bb9
 8006b94:	08006bb9 	.word	0x08006bb9
 8006b98:	08006bb9 	.word	0x08006bb9
 8006b9c:	08006bb3 	.word	0x08006bb3
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	77fb      	strb	r3, [r7, #31]
 8006ba4:	e118      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	77fb      	strb	r3, [r7, #31]
 8006baa:	e115      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006bac:	2304      	movs	r3, #4
 8006bae:	77fb      	strb	r3, [r7, #31]
 8006bb0:	e112      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006bb2:	2308      	movs	r3, #8
 8006bb4:	77fb      	strb	r3, [r7, #31]
 8006bb6:	e10f      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006bb8:	2310      	movs	r3, #16
 8006bba:	77fb      	strb	r3, [r7, #31]
 8006bbc:	e10c      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a68      	ldr	r2, [pc, #416]	; (8006d64 <UART_SetConfig+0x2d4>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d120      	bne.n	8006c0a <UART_SetConfig+0x17a>
 8006bc8:	4b64      	ldr	r3, [pc, #400]	; (8006d5c <UART_SetConfig+0x2cc>)
 8006bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006bd2:	2b30      	cmp	r3, #48	; 0x30
 8006bd4:	d013      	beq.n	8006bfe <UART_SetConfig+0x16e>
 8006bd6:	2b30      	cmp	r3, #48	; 0x30
 8006bd8:	d814      	bhi.n	8006c04 <UART_SetConfig+0x174>
 8006bda:	2b20      	cmp	r3, #32
 8006bdc:	d009      	beq.n	8006bf2 <UART_SetConfig+0x162>
 8006bde:	2b20      	cmp	r3, #32
 8006be0:	d810      	bhi.n	8006c04 <UART_SetConfig+0x174>
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d002      	beq.n	8006bec <UART_SetConfig+0x15c>
 8006be6:	2b10      	cmp	r3, #16
 8006be8:	d006      	beq.n	8006bf8 <UART_SetConfig+0x168>
 8006bea:	e00b      	b.n	8006c04 <UART_SetConfig+0x174>
 8006bec:	2300      	movs	r3, #0
 8006bee:	77fb      	strb	r3, [r7, #31]
 8006bf0:	e0f2      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006bf2:	2302      	movs	r3, #2
 8006bf4:	77fb      	strb	r3, [r7, #31]
 8006bf6:	e0ef      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006bf8:	2304      	movs	r3, #4
 8006bfa:	77fb      	strb	r3, [r7, #31]
 8006bfc:	e0ec      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006bfe:	2308      	movs	r3, #8
 8006c00:	77fb      	strb	r3, [r7, #31]
 8006c02:	e0e9      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006c04:	2310      	movs	r3, #16
 8006c06:	77fb      	strb	r3, [r7, #31]
 8006c08:	e0e6      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a56      	ldr	r2, [pc, #344]	; (8006d68 <UART_SetConfig+0x2d8>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d120      	bne.n	8006c56 <UART_SetConfig+0x1c6>
 8006c14:	4b51      	ldr	r3, [pc, #324]	; (8006d5c <UART_SetConfig+0x2cc>)
 8006c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c1e:	2bc0      	cmp	r3, #192	; 0xc0
 8006c20:	d013      	beq.n	8006c4a <UART_SetConfig+0x1ba>
 8006c22:	2bc0      	cmp	r3, #192	; 0xc0
 8006c24:	d814      	bhi.n	8006c50 <UART_SetConfig+0x1c0>
 8006c26:	2b80      	cmp	r3, #128	; 0x80
 8006c28:	d009      	beq.n	8006c3e <UART_SetConfig+0x1ae>
 8006c2a:	2b80      	cmp	r3, #128	; 0x80
 8006c2c:	d810      	bhi.n	8006c50 <UART_SetConfig+0x1c0>
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d002      	beq.n	8006c38 <UART_SetConfig+0x1a8>
 8006c32:	2b40      	cmp	r3, #64	; 0x40
 8006c34:	d006      	beq.n	8006c44 <UART_SetConfig+0x1b4>
 8006c36:	e00b      	b.n	8006c50 <UART_SetConfig+0x1c0>
 8006c38:	2300      	movs	r3, #0
 8006c3a:	77fb      	strb	r3, [r7, #31]
 8006c3c:	e0cc      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006c3e:	2302      	movs	r3, #2
 8006c40:	77fb      	strb	r3, [r7, #31]
 8006c42:	e0c9      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006c44:	2304      	movs	r3, #4
 8006c46:	77fb      	strb	r3, [r7, #31]
 8006c48:	e0c6      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006c4a:	2308      	movs	r3, #8
 8006c4c:	77fb      	strb	r3, [r7, #31]
 8006c4e:	e0c3      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006c50:	2310      	movs	r3, #16
 8006c52:	77fb      	strb	r3, [r7, #31]
 8006c54:	e0c0      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a44      	ldr	r2, [pc, #272]	; (8006d6c <UART_SetConfig+0x2dc>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d125      	bne.n	8006cac <UART_SetConfig+0x21c>
 8006c60:	4b3e      	ldr	r3, [pc, #248]	; (8006d5c <UART_SetConfig+0x2cc>)
 8006c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c6e:	d017      	beq.n	8006ca0 <UART_SetConfig+0x210>
 8006c70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c74:	d817      	bhi.n	8006ca6 <UART_SetConfig+0x216>
 8006c76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c7a:	d00b      	beq.n	8006c94 <UART_SetConfig+0x204>
 8006c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c80:	d811      	bhi.n	8006ca6 <UART_SetConfig+0x216>
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d003      	beq.n	8006c8e <UART_SetConfig+0x1fe>
 8006c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c8a:	d006      	beq.n	8006c9a <UART_SetConfig+0x20a>
 8006c8c:	e00b      	b.n	8006ca6 <UART_SetConfig+0x216>
 8006c8e:	2300      	movs	r3, #0
 8006c90:	77fb      	strb	r3, [r7, #31]
 8006c92:	e0a1      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006c94:	2302      	movs	r3, #2
 8006c96:	77fb      	strb	r3, [r7, #31]
 8006c98:	e09e      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006c9a:	2304      	movs	r3, #4
 8006c9c:	77fb      	strb	r3, [r7, #31]
 8006c9e:	e09b      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006ca0:	2308      	movs	r3, #8
 8006ca2:	77fb      	strb	r3, [r7, #31]
 8006ca4:	e098      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006ca6:	2310      	movs	r3, #16
 8006ca8:	77fb      	strb	r3, [r7, #31]
 8006caa:	e095      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a2f      	ldr	r2, [pc, #188]	; (8006d70 <UART_SetConfig+0x2e0>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d125      	bne.n	8006d02 <UART_SetConfig+0x272>
 8006cb6:	4b29      	ldr	r3, [pc, #164]	; (8006d5c <UART_SetConfig+0x2cc>)
 8006cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cbc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006cc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cc4:	d017      	beq.n	8006cf6 <UART_SetConfig+0x266>
 8006cc6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cca:	d817      	bhi.n	8006cfc <UART_SetConfig+0x26c>
 8006ccc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cd0:	d00b      	beq.n	8006cea <UART_SetConfig+0x25a>
 8006cd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cd6:	d811      	bhi.n	8006cfc <UART_SetConfig+0x26c>
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d003      	beq.n	8006ce4 <UART_SetConfig+0x254>
 8006cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ce0:	d006      	beq.n	8006cf0 <UART_SetConfig+0x260>
 8006ce2:	e00b      	b.n	8006cfc <UART_SetConfig+0x26c>
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	77fb      	strb	r3, [r7, #31]
 8006ce8:	e076      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006cea:	2302      	movs	r3, #2
 8006cec:	77fb      	strb	r3, [r7, #31]
 8006cee:	e073      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006cf0:	2304      	movs	r3, #4
 8006cf2:	77fb      	strb	r3, [r7, #31]
 8006cf4:	e070      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006cf6:	2308      	movs	r3, #8
 8006cf8:	77fb      	strb	r3, [r7, #31]
 8006cfa:	e06d      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006cfc:	2310      	movs	r3, #16
 8006cfe:	77fb      	strb	r3, [r7, #31]
 8006d00:	e06a      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a1b      	ldr	r2, [pc, #108]	; (8006d74 <UART_SetConfig+0x2e4>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d138      	bne.n	8006d7e <UART_SetConfig+0x2ee>
 8006d0c:	4b13      	ldr	r3, [pc, #76]	; (8006d5c <UART_SetConfig+0x2cc>)
 8006d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d12:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006d16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d1a:	d017      	beq.n	8006d4c <UART_SetConfig+0x2bc>
 8006d1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d20:	d82a      	bhi.n	8006d78 <UART_SetConfig+0x2e8>
 8006d22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d26:	d00b      	beq.n	8006d40 <UART_SetConfig+0x2b0>
 8006d28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d2c:	d824      	bhi.n	8006d78 <UART_SetConfig+0x2e8>
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d003      	beq.n	8006d3a <UART_SetConfig+0x2aa>
 8006d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d36:	d006      	beq.n	8006d46 <UART_SetConfig+0x2b6>
 8006d38:	e01e      	b.n	8006d78 <UART_SetConfig+0x2e8>
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	77fb      	strb	r3, [r7, #31]
 8006d3e:	e04b      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006d40:	2302      	movs	r3, #2
 8006d42:	77fb      	strb	r3, [r7, #31]
 8006d44:	e048      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006d46:	2304      	movs	r3, #4
 8006d48:	77fb      	strb	r3, [r7, #31]
 8006d4a:	e045      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006d4c:	2308      	movs	r3, #8
 8006d4e:	77fb      	strb	r3, [r7, #31]
 8006d50:	e042      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006d52:	bf00      	nop
 8006d54:	efff69f3 	.word	0xefff69f3
 8006d58:	40011000 	.word	0x40011000
 8006d5c:	40023800 	.word	0x40023800
 8006d60:	40004400 	.word	0x40004400
 8006d64:	40004800 	.word	0x40004800
 8006d68:	40004c00 	.word	0x40004c00
 8006d6c:	40005000 	.word	0x40005000
 8006d70:	40011400 	.word	0x40011400
 8006d74:	40007800 	.word	0x40007800
 8006d78:	2310      	movs	r3, #16
 8006d7a:	77fb      	strb	r3, [r7, #31]
 8006d7c:	e02c      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a72      	ldr	r2, [pc, #456]	; (8006f4c <UART_SetConfig+0x4bc>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d125      	bne.n	8006dd4 <UART_SetConfig+0x344>
 8006d88:	4b71      	ldr	r3, [pc, #452]	; (8006f50 <UART_SetConfig+0x4c0>)
 8006d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d8e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006d92:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006d96:	d017      	beq.n	8006dc8 <UART_SetConfig+0x338>
 8006d98:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006d9c:	d817      	bhi.n	8006dce <UART_SetConfig+0x33e>
 8006d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006da2:	d00b      	beq.n	8006dbc <UART_SetConfig+0x32c>
 8006da4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006da8:	d811      	bhi.n	8006dce <UART_SetConfig+0x33e>
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d003      	beq.n	8006db6 <UART_SetConfig+0x326>
 8006dae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006db2:	d006      	beq.n	8006dc2 <UART_SetConfig+0x332>
 8006db4:	e00b      	b.n	8006dce <UART_SetConfig+0x33e>
 8006db6:	2300      	movs	r3, #0
 8006db8:	77fb      	strb	r3, [r7, #31]
 8006dba:	e00d      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006dbc:	2302      	movs	r3, #2
 8006dbe:	77fb      	strb	r3, [r7, #31]
 8006dc0:	e00a      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006dc2:	2304      	movs	r3, #4
 8006dc4:	77fb      	strb	r3, [r7, #31]
 8006dc6:	e007      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006dc8:	2308      	movs	r3, #8
 8006dca:	77fb      	strb	r3, [r7, #31]
 8006dcc:	e004      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006dce:	2310      	movs	r3, #16
 8006dd0:	77fb      	strb	r3, [r7, #31]
 8006dd2:	e001      	b.n	8006dd8 <UART_SetConfig+0x348>
 8006dd4:	2310      	movs	r3, #16
 8006dd6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	69db      	ldr	r3, [r3, #28]
 8006ddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006de0:	d15b      	bne.n	8006e9a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006de2:	7ffb      	ldrb	r3, [r7, #31]
 8006de4:	2b08      	cmp	r3, #8
 8006de6:	d828      	bhi.n	8006e3a <UART_SetConfig+0x3aa>
 8006de8:	a201      	add	r2, pc, #4	; (adr r2, 8006df0 <UART_SetConfig+0x360>)
 8006dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dee:	bf00      	nop
 8006df0:	08006e15 	.word	0x08006e15
 8006df4:	08006e1d 	.word	0x08006e1d
 8006df8:	08006e25 	.word	0x08006e25
 8006dfc:	08006e3b 	.word	0x08006e3b
 8006e00:	08006e2b 	.word	0x08006e2b
 8006e04:	08006e3b 	.word	0x08006e3b
 8006e08:	08006e3b 	.word	0x08006e3b
 8006e0c:	08006e3b 	.word	0x08006e3b
 8006e10:	08006e33 	.word	0x08006e33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e14:	f7fd fff2 	bl	8004dfc <HAL_RCC_GetPCLK1Freq>
 8006e18:	61b8      	str	r0, [r7, #24]
        break;
 8006e1a:	e013      	b.n	8006e44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e1c:	f7fe f802 	bl	8004e24 <HAL_RCC_GetPCLK2Freq>
 8006e20:	61b8      	str	r0, [r7, #24]
        break;
 8006e22:	e00f      	b.n	8006e44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e24:	4b4b      	ldr	r3, [pc, #300]	; (8006f54 <UART_SetConfig+0x4c4>)
 8006e26:	61bb      	str	r3, [r7, #24]
        break;
 8006e28:	e00c      	b.n	8006e44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e2a:	f7fd fed5 	bl	8004bd8 <HAL_RCC_GetSysClockFreq>
 8006e2e:	61b8      	str	r0, [r7, #24]
        break;
 8006e30:	e008      	b.n	8006e44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e36:	61bb      	str	r3, [r7, #24]
        break;
 8006e38:	e004      	b.n	8006e44 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	77bb      	strb	r3, [r7, #30]
        break;
 8006e42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d074      	beq.n	8006f34 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	005a      	lsls	r2, r3, #1
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	085b      	lsrs	r3, r3, #1
 8006e54:	441a      	add	r2, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	2b0f      	cmp	r3, #15
 8006e64:	d916      	bls.n	8006e94 <UART_SetConfig+0x404>
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e6c:	d212      	bcs.n	8006e94 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	f023 030f 	bic.w	r3, r3, #15
 8006e76:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	085b      	lsrs	r3, r3, #1
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	f003 0307 	and.w	r3, r3, #7
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	89fb      	ldrh	r3, [r7, #14]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	89fa      	ldrh	r2, [r7, #14]
 8006e90:	60da      	str	r2, [r3, #12]
 8006e92:	e04f      	b.n	8006f34 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	77bb      	strb	r3, [r7, #30]
 8006e98:	e04c      	b.n	8006f34 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e9a:	7ffb      	ldrb	r3, [r7, #31]
 8006e9c:	2b08      	cmp	r3, #8
 8006e9e:	d828      	bhi.n	8006ef2 <UART_SetConfig+0x462>
 8006ea0:	a201      	add	r2, pc, #4	; (adr r2, 8006ea8 <UART_SetConfig+0x418>)
 8006ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea6:	bf00      	nop
 8006ea8:	08006ecd 	.word	0x08006ecd
 8006eac:	08006ed5 	.word	0x08006ed5
 8006eb0:	08006edd 	.word	0x08006edd
 8006eb4:	08006ef3 	.word	0x08006ef3
 8006eb8:	08006ee3 	.word	0x08006ee3
 8006ebc:	08006ef3 	.word	0x08006ef3
 8006ec0:	08006ef3 	.word	0x08006ef3
 8006ec4:	08006ef3 	.word	0x08006ef3
 8006ec8:	08006eeb 	.word	0x08006eeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ecc:	f7fd ff96 	bl	8004dfc <HAL_RCC_GetPCLK1Freq>
 8006ed0:	61b8      	str	r0, [r7, #24]
        break;
 8006ed2:	e013      	b.n	8006efc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ed4:	f7fd ffa6 	bl	8004e24 <HAL_RCC_GetPCLK2Freq>
 8006ed8:	61b8      	str	r0, [r7, #24]
        break;
 8006eda:	e00f      	b.n	8006efc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006edc:	4b1d      	ldr	r3, [pc, #116]	; (8006f54 <UART_SetConfig+0x4c4>)
 8006ede:	61bb      	str	r3, [r7, #24]
        break;
 8006ee0:	e00c      	b.n	8006efc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ee2:	f7fd fe79 	bl	8004bd8 <HAL_RCC_GetSysClockFreq>
 8006ee6:	61b8      	str	r0, [r7, #24]
        break;
 8006ee8:	e008      	b.n	8006efc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eee:	61bb      	str	r3, [r7, #24]
        break;
 8006ef0:	e004      	b.n	8006efc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	77bb      	strb	r3, [r7, #30]
        break;
 8006efa:	bf00      	nop
    }

    if (pclk != 0U)
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d018      	beq.n	8006f34 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	085a      	lsrs	r2, r3, #1
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	441a      	add	r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f14:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	2b0f      	cmp	r3, #15
 8006f1a:	d909      	bls.n	8006f30 <UART_SetConfig+0x4a0>
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f22:	d205      	bcs.n	8006f30 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	b29a      	uxth	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	60da      	str	r2, [r3, #12]
 8006f2e:	e001      	b.n	8006f34 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006f40:	7fbb      	ldrb	r3, [r7, #30]
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3720      	adds	r7, #32
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	40007c00 	.word	0x40007c00
 8006f50:	40023800 	.word	0x40023800
 8006f54:	00f42400 	.word	0x00f42400

08006f58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f64:	f003 0301 	and.w	r3, r3, #1
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00a      	beq.n	8006f82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	430a      	orrs	r2, r1
 8006f80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f86:	f003 0302 	and.w	r3, r3, #2
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00a      	beq.n	8006fa4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	430a      	orrs	r2, r1
 8006fa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa8:	f003 0304 	and.w	r3, r3, #4
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00a      	beq.n	8006fc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fca:	f003 0308 	and.w	r3, r3, #8
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00a      	beq.n	8006fe8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	430a      	orrs	r2, r1
 8006fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fec:	f003 0310 	and.w	r3, r3, #16
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00a      	beq.n	800700a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	430a      	orrs	r2, r1
 8007008:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700e:	f003 0320 	and.w	r3, r3, #32
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00a      	beq.n	800702c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	430a      	orrs	r2, r1
 800702a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007034:	2b00      	cmp	r3, #0
 8007036:	d01a      	beq.n	800706e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	430a      	orrs	r2, r1
 800704c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007052:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007056:	d10a      	bne.n	800706e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	430a      	orrs	r2, r1
 800706c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00a      	beq.n	8007090 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	430a      	orrs	r2, r1
 800708e:	605a      	str	r2, [r3, #4]
  }
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b086      	sub	sp, #24
 80070a0:	af02      	add	r7, sp, #8
 80070a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070ac:	f7fa faa0 	bl	80015f0 <HAL_GetTick>
 80070b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 0308 	and.w	r3, r3, #8
 80070bc:	2b08      	cmp	r3, #8
 80070be:	d10e      	bne.n	80070de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070c4:	9300      	str	r3, [sp, #0]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f831 	bl	8007136 <UART_WaitOnFlagUntilTimeout>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d001      	beq.n	80070de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070da:	2303      	movs	r3, #3
 80070dc:	e027      	b.n	800712e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0304 	and.w	r3, r3, #4
 80070e8:	2b04      	cmp	r3, #4
 80070ea:	d10e      	bne.n	800710a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f81b 	bl	8007136 <UART_WaitOnFlagUntilTimeout>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d001      	beq.n	800710a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e011      	b.n	800712e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2220      	movs	r2, #32
 800710e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2220      	movs	r2, #32
 8007114:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b09c      	sub	sp, #112	; 0x70
 800713a:	af00      	add	r7, sp, #0
 800713c:	60f8      	str	r0, [r7, #12]
 800713e:	60b9      	str	r1, [r7, #8]
 8007140:	603b      	str	r3, [r7, #0]
 8007142:	4613      	mov	r3, r2
 8007144:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007146:	e0a7      	b.n	8007298 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007148:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800714a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800714e:	f000 80a3 	beq.w	8007298 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007152:	f7fa fa4d 	bl	80015f0 <HAL_GetTick>
 8007156:	4602      	mov	r2, r0
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800715e:	429a      	cmp	r2, r3
 8007160:	d302      	bcc.n	8007168 <UART_WaitOnFlagUntilTimeout+0x32>
 8007162:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007164:	2b00      	cmp	r3, #0
 8007166:	d13f      	bne.n	80071e8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007170:	e853 3f00 	ldrex	r3, [r3]
 8007174:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007178:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800717c:	667b      	str	r3, [r7, #100]	; 0x64
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	461a      	mov	r2, r3
 8007184:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007186:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007188:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800718c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800718e:	e841 2300 	strex	r3, r2, [r1]
 8007192:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007194:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1e6      	bne.n	8007168 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	3308      	adds	r3, #8
 80071a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071a4:	e853 3f00 	ldrex	r3, [r3]
 80071a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ac:	f023 0301 	bic.w	r3, r3, #1
 80071b0:	663b      	str	r3, [r7, #96]	; 0x60
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	3308      	adds	r3, #8
 80071b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80071ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80071bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80071c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071c2:	e841 2300 	strex	r3, r2, [r1]
 80071c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80071c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1e5      	bne.n	800719a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2220      	movs	r2, #32
 80071d2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2220      	movs	r2, #32
 80071d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80071e4:	2303      	movs	r3, #3
 80071e6:	e068      	b.n	80072ba <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0304 	and.w	r3, r3, #4
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d050      	beq.n	8007298 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	69db      	ldr	r3, [r3, #28]
 80071fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007200:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007204:	d148      	bne.n	8007298 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800720e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007218:	e853 3f00 	ldrex	r3, [r3]
 800721c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800721e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007220:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007224:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	461a      	mov	r2, r3
 800722c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800722e:	637b      	str	r3, [r7, #52]	; 0x34
 8007230:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007232:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007234:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007236:	e841 2300 	strex	r3, r2, [r1]
 800723a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800723c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1e6      	bne.n	8007210 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	3308      	adds	r3, #8
 8007248:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	e853 3f00 	ldrex	r3, [r3]
 8007250:	613b      	str	r3, [r7, #16]
   return(result);
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	f023 0301 	bic.w	r3, r3, #1
 8007258:	66bb      	str	r3, [r7, #104]	; 0x68
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	3308      	adds	r3, #8
 8007260:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007262:	623a      	str	r2, [r7, #32]
 8007264:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007266:	69f9      	ldr	r1, [r7, #28]
 8007268:	6a3a      	ldr	r2, [r7, #32]
 800726a:	e841 2300 	strex	r3, r2, [r1]
 800726e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1e5      	bne.n	8007242 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2220      	movs	r2, #32
 800727a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2220      	movs	r2, #32
 8007280:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2220      	movs	r2, #32
 8007288:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007294:	2303      	movs	r3, #3
 8007296:	e010      	b.n	80072ba <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	69da      	ldr	r2, [r3, #28]
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	4013      	ands	r3, r2
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	bf0c      	ite	eq
 80072a8:	2301      	moveq	r3, #1
 80072aa:	2300      	movne	r3, #0
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	461a      	mov	r2, r3
 80072b0:	79fb      	ldrb	r3, [r7, #7]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	f43f af48 	beq.w	8007148 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3770      	adds	r7, #112	; 0x70
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
	...

080072c4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80072c4:	b084      	sub	sp, #16
 80072c6:	b480      	push	{r7}
 80072c8:	b085      	sub	sp, #20
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
 80072ce:	f107 001c 	add.w	r0, r7, #28
 80072d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80072d6:	2300      	movs	r3, #0
 80072d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80072da:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80072dc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80072de:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80072e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80072e2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80072e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80072e6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80072e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80072ea:	431a      	orrs	r2, r3
             Init.ClockDiv
 80072ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80072ee:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	685a      	ldr	r2, [r3, #4]
 80072fa:	4b07      	ldr	r3, [pc, #28]	; (8007318 <SDMMC_Init+0x54>)
 80072fc:	4013      	ands	r3, r2
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	431a      	orrs	r2, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3714      	adds	r7, #20
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	b004      	add	sp, #16
 8007314:	4770      	bx	lr
 8007316:	bf00      	nop
 8007318:	ffff8100 	.word	0xffff8100

0800731c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800732a:	4618      	mov	r0, r3
 800732c:	370c      	adds	r7, #12
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr

08007336 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8007336:	b480      	push	{r7}
 8007338:	b083      	sub	sp, #12
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
 800733e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2203      	movs	r2, #3
 8007364:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0303 	and.w	r3, r3, #3
}
 8007384:	4618      	mov	r0, r3
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8007390:	b480      	push	{r7}
 8007392:	b085      	sub	sp, #20
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800739a:	2300      	movs	r3, #0
 800739c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80073ae:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80073b4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80073ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	4313      	orrs	r3, r2
 80073c0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	68da      	ldr	r2, [r3, #12]
 80073c6:	4b06      	ldr	r3, [pc, #24]	; (80073e0 <SDMMC_SendCommand+0x50>)
 80073c8:	4013      	ands	r3, r2
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	431a      	orrs	r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3714      	adds	r7, #20
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr
 80073e0:	fffff000 	.word	0xfffff000

080073e4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	b2db      	uxtb	r3, r3
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	370c      	adds	r7, #12
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80073fe:	b480      	push	{r7}
 8007400:	b085      	sub	sp, #20
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
 8007406:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	3314      	adds	r3, #20
 800740c:	461a      	mov	r2, r3
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	4413      	add	r3, r2
 8007412:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
}  
 8007418:	4618      	mov	r0, r3
 800741a:	3714      	adds	r7, #20
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8007424:	b480      	push	{r7}
 8007426:	b085      	sub	sp, #20
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800742e:	2300      	movs	r3, #0
 8007430:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	685a      	ldr	r2, [r3, #4]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800744a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007450:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007456:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	4313      	orrs	r3, r2
 800745c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007462:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	431a      	orrs	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800746e:	2300      	movs	r3, #0

}
 8007470:	4618      	mov	r0, r3
 8007472:	3714      	adds	r7, #20
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b088      	sub	sp, #32
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800748a:	2310      	movs	r3, #16
 800748c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800748e:	2340      	movs	r3, #64	; 0x40
 8007490:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007492:	2300      	movs	r3, #0
 8007494:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800749a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800749c:	f107 0308 	add.w	r3, r7, #8
 80074a0:	4619      	mov	r1, r3
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f7ff ff74 	bl	8007390 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80074a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ac:	2110      	movs	r1, #16
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f9d6 	bl	8007860 <SDMMC_GetCmdResp1>
 80074b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074b6:	69fb      	ldr	r3, [r7, #28]
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3720      	adds	r7, #32
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b088      	sub	sp, #32
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80074ce:	2311      	movs	r3, #17
 80074d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80074d2:	2340      	movs	r3, #64	; 0x40
 80074d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074d6:	2300      	movs	r3, #0
 80074d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80074da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074e0:	f107 0308 	add.w	r3, r7, #8
 80074e4:	4619      	mov	r1, r3
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f7ff ff52 	bl	8007390 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80074ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80074f0:	2111      	movs	r1, #17
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f9b4 	bl	8007860 <SDMMC_GetCmdResp1>
 80074f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074fa:	69fb      	ldr	r3, [r7, #28]
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3720      	adds	r7, #32
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b088      	sub	sp, #32
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007512:	2312      	movs	r3, #18
 8007514:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007516:	2340      	movs	r3, #64	; 0x40
 8007518:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800751a:	2300      	movs	r3, #0
 800751c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800751e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007522:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007524:	f107 0308 	add.w	r3, r7, #8
 8007528:	4619      	mov	r1, r3
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f7ff ff30 	bl	8007390 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007530:	f241 3288 	movw	r2, #5000	; 0x1388
 8007534:	2112      	movs	r1, #18
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f992 	bl	8007860 <SDMMC_GetCmdResp1>
 800753c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800753e:	69fb      	ldr	r3, [r7, #28]
}
 8007540:	4618      	mov	r0, r3
 8007542:	3720      	adds	r7, #32
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b088      	sub	sp, #32
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007556:	2318      	movs	r3, #24
 8007558:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800755a:	2340      	movs	r3, #64	; 0x40
 800755c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800755e:	2300      	movs	r3, #0
 8007560:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007562:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007566:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007568:	f107 0308 	add.w	r3, r7, #8
 800756c:	4619      	mov	r1, r3
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7ff ff0e 	bl	8007390 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007574:	f241 3288 	movw	r2, #5000	; 0x1388
 8007578:	2118      	movs	r1, #24
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 f970 	bl	8007860 <SDMMC_GetCmdResp1>
 8007580:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007582:	69fb      	ldr	r3, [r7, #28]
}
 8007584:	4618      	mov	r0, r3
 8007586:	3720      	adds	r7, #32
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b088      	sub	sp, #32
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800759a:	2319      	movs	r3, #25
 800759c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800759e:	2340      	movs	r3, #64	; 0x40
 80075a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80075a2:	2300      	movs	r3, #0
 80075a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80075a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80075ac:	f107 0308 	add.w	r3, r7, #8
 80075b0:	4619      	mov	r1, r3
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f7ff feec 	bl	8007390 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80075b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80075bc:	2119      	movs	r1, #25
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f94e 	bl	8007860 <SDMMC_GetCmdResp1>
 80075c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075c6:	69fb      	ldr	r3, [r7, #28]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3720      	adds	r7, #32
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b088      	sub	sp, #32
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80075d8:	2300      	movs	r3, #0
 80075da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80075dc:	230c      	movs	r3, #12
 80075de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80075e0:	2340      	movs	r3, #64	; 0x40
 80075e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80075e4:	2300      	movs	r3, #0
 80075e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80075e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80075ee:	f107 0308 	add.w	r3, r7, #8
 80075f2:	4619      	mov	r1, r3
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f7ff fecb 	bl	8007390 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80075fa:	4a05      	ldr	r2, [pc, #20]	; (8007610 <SDMMC_CmdStopTransfer+0x40>)
 80075fc:	210c      	movs	r1, #12
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 f92e 	bl	8007860 <SDMMC_GetCmdResp1>
 8007604:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007606:	69fb      	ldr	r3, [r7, #28]
}
 8007608:	4618      	mov	r0, r3
 800760a:	3720      	adds	r7, #32
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	05f5e100 	.word	0x05f5e100

08007614 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b08a      	sub	sp, #40	; 0x28
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007624:	2307      	movs	r3, #7
 8007626:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007628:	2340      	movs	r3, #64	; 0x40
 800762a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800762c:	2300      	movs	r3, #0
 800762e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007634:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007636:	f107 0310 	add.w	r3, r7, #16
 800763a:	4619      	mov	r1, r3
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	f7ff fea7 	bl	8007390 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8007642:	f241 3288 	movw	r2, #5000	; 0x1388
 8007646:	2107      	movs	r1, #7
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f000 f909 	bl	8007860 <SDMMC_GetCmdResp1>
 800764e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007652:	4618      	mov	r0, r3
 8007654:	3728      	adds	r7, #40	; 0x28
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b088      	sub	sp, #32
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007662:	2300      	movs	r3, #0
 8007664:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007666:	2300      	movs	r3, #0
 8007668:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800766a:	2300      	movs	r3, #0
 800766c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800766e:	2300      	movs	r3, #0
 8007670:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007672:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007676:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007678:	f107 0308 	add.w	r3, r7, #8
 800767c:	4619      	mov	r1, r3
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f7ff fe86 	bl	8007390 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 fb23 	bl	8007cd0 <SDMMC_GetCmdError>
 800768a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800768c:	69fb      	ldr	r3, [r7, #28]
}
 800768e:	4618      	mov	r0, r3
 8007690:	3720      	adds	r7, #32
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b088      	sub	sp, #32
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800769e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80076a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80076a4:	2308      	movs	r3, #8
 80076a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80076a8:	2340      	movs	r3, #64	; 0x40
 80076aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80076ac:	2300      	movs	r3, #0
 80076ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80076b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076b6:	f107 0308 	add.w	r3, r7, #8
 80076ba:	4619      	mov	r1, r3
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f7ff fe67 	bl	8007390 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 fab6 	bl	8007c34 <SDMMC_GetCmdResp7>
 80076c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076ca:	69fb      	ldr	r3, [r7, #28]
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3720      	adds	r7, #32
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b088      	sub	sp, #32
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80076e2:	2337      	movs	r3, #55	; 0x37
 80076e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80076e6:	2340      	movs	r3, #64	; 0x40
 80076e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80076ea:	2300      	movs	r3, #0
 80076ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80076ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076f4:	f107 0308 	add.w	r3, r7, #8
 80076f8:	4619      	mov	r1, r3
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f7ff fe48 	bl	8007390 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8007700:	f241 3288 	movw	r2, #5000	; 0x1388
 8007704:	2137      	movs	r1, #55	; 0x37
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f8aa 	bl	8007860 <SDMMC_GetCmdResp1>
 800770c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800770e:	69fb      	ldr	r3, [r7, #28]
}
 8007710:	4618      	mov	r0, r3
 8007712:	3720      	adds	r7, #32
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b088      	sub	sp, #32
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007722:	683a      	ldr	r2, [r7, #0]
 8007724:	4b0d      	ldr	r3, [pc, #52]	; (800775c <SDMMC_CmdAppOperCommand+0x44>)
 8007726:	4313      	orrs	r3, r2
 8007728:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800772a:	2329      	movs	r3, #41	; 0x29
 800772c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800772e:	2340      	movs	r3, #64	; 0x40
 8007730:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007732:	2300      	movs	r3, #0
 8007734:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800773a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800773c:	f107 0308 	add.w	r3, r7, #8
 8007740:	4619      	mov	r1, r3
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f7ff fe24 	bl	8007390 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 f9bf 	bl	8007acc <SDMMC_GetCmdResp3>
 800774e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007750:	69fb      	ldr	r3, [r7, #28]
}
 8007752:	4618      	mov	r0, r3
 8007754:	3720      	adds	r7, #32
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	80100000 	.word	0x80100000

08007760 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b088      	sub	sp, #32
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007768:	2300      	movs	r3, #0
 800776a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800776c:	2302      	movs	r3, #2
 800776e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007770:	23c0      	movs	r3, #192	; 0xc0
 8007772:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007774:	2300      	movs	r3, #0
 8007776:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007778:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800777c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800777e:	f107 0308 	add.w	r3, r7, #8
 8007782:	4619      	mov	r1, r3
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f7ff fe03 	bl	8007390 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 f956 	bl	8007a3c <SDMMC_GetCmdResp2>
 8007790:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007792:	69fb      	ldr	r3, [r7, #28]
}
 8007794:	4618      	mov	r0, r3
 8007796:	3720      	adds	r7, #32
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b088      	sub	sp, #32
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80077aa:	2309      	movs	r3, #9
 80077ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80077ae:	23c0      	movs	r3, #192	; 0xc0
 80077b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80077b2:	2300      	movs	r3, #0
 80077b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80077b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077bc:	f107 0308 	add.w	r3, r7, #8
 80077c0:	4619      	mov	r1, r3
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f7ff fde4 	bl	8007390 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 f937 	bl	8007a3c <SDMMC_GetCmdResp2>
 80077ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077d0:	69fb      	ldr	r3, [r7, #28]
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3720      	adds	r7, #32
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b088      	sub	sp, #32
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
 80077e2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80077e4:	2300      	movs	r3, #0
 80077e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80077e8:	2303      	movs	r3, #3
 80077ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80077ec:	2340      	movs	r3, #64	; 0x40
 80077ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80077f0:	2300      	movs	r3, #0
 80077f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80077f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077fa:	f107 0308 	add.w	r3, r7, #8
 80077fe:	4619      	mov	r1, r3
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f7ff fdc5 	bl	8007390 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007806:	683a      	ldr	r2, [r7, #0]
 8007808:	2103      	movs	r1, #3
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f99c 	bl	8007b48 <SDMMC_GetCmdResp6>
 8007810:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007812:	69fb      	ldr	r3, [r7, #28]
}
 8007814:	4618      	mov	r0, r3
 8007816:	3720      	adds	r7, #32
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b088      	sub	sp, #32
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800782a:	230d      	movs	r3, #13
 800782c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800782e:	2340      	movs	r3, #64	; 0x40
 8007830:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007832:	2300      	movs	r3, #0
 8007834:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800783a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800783c:	f107 0308 	add.w	r3, r7, #8
 8007840:	4619      	mov	r1, r3
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7ff fda4 	bl	8007390 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8007848:	f241 3288 	movw	r2, #5000	; 0x1388
 800784c:	210d      	movs	r1, #13
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f806 	bl	8007860 <SDMMC_GetCmdResp1>
 8007854:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007856:	69fb      	ldr	r3, [r7, #28]
}
 8007858:	4618      	mov	r0, r3
 800785a:	3720      	adds	r7, #32
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b088      	sub	sp, #32
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	460b      	mov	r3, r1
 800786a:	607a      	str	r2, [r7, #4]
 800786c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800786e:	4b70      	ldr	r3, [pc, #448]	; (8007a30 <SDMMC_GetCmdResp1+0x1d0>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a70      	ldr	r2, [pc, #448]	; (8007a34 <SDMMC_GetCmdResp1+0x1d4>)
 8007874:	fba2 2303 	umull	r2, r3, r2, r3
 8007878:	0a5a      	lsrs	r2, r3, #9
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	fb02 f303 	mul.w	r3, r2, r3
 8007880:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	1e5a      	subs	r2, r3, #1
 8007886:	61fa      	str	r2, [r7, #28]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d102      	bne.n	8007892 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800788c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007890:	e0c9      	b.n	8007a26 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007896:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d0ef      	beq.n	8007882 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1ea      	bne.n	8007882 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078b0:	f003 0304 	and.w	r3, r3, #4
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d004      	beq.n	80078c2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2204      	movs	r2, #4
 80078bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80078be:	2304      	movs	r3, #4
 80078c0:	e0b1      	b.n	8007a26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078c6:	f003 0301 	and.w	r3, r3, #1
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d004      	beq.n	80078d8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2201      	movs	r2, #1
 80078d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80078d4:	2301      	movs	r3, #1
 80078d6:	e0a6      	b.n	8007a26 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	22c5      	movs	r2, #197	; 0xc5
 80078dc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	f7ff fd80 	bl	80073e4 <SDMMC_GetCommandResponse>
 80078e4:	4603      	mov	r3, r0
 80078e6:	461a      	mov	r2, r3
 80078e8:	7afb      	ldrb	r3, [r7, #11]
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d001      	beq.n	80078f2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80078ee:	2301      	movs	r3, #1
 80078f0:	e099      	b.n	8007a26 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80078f2:	2100      	movs	r1, #0
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f7ff fd82 	bl	80073fe <SDMMC_GetResponse>
 80078fa:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80078fc:	697a      	ldr	r2, [r7, #20]
 80078fe:	4b4e      	ldr	r3, [pc, #312]	; (8007a38 <SDMMC_GetCmdResp1+0x1d8>)
 8007900:	4013      	ands	r3, r2
 8007902:	2b00      	cmp	r3, #0
 8007904:	d101      	bne.n	800790a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007906:	2300      	movs	r3, #0
 8007908:	e08d      	b.n	8007a26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	2b00      	cmp	r3, #0
 800790e:	da02      	bge.n	8007916 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007910:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007914:	e087      	b.n	8007a26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800791c:	2b00      	cmp	r3, #0
 800791e:	d001      	beq.n	8007924 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007920:	2340      	movs	r3, #64	; 0x40
 8007922:	e080      	b.n	8007a26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800792a:	2b00      	cmp	r3, #0
 800792c:	d001      	beq.n	8007932 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800792e:	2380      	movs	r3, #128	; 0x80
 8007930:	e079      	b.n	8007a26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007938:	2b00      	cmp	r3, #0
 800793a:	d002      	beq.n	8007942 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800793c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007940:	e071      	b.n	8007a26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007948:	2b00      	cmp	r3, #0
 800794a:	d002      	beq.n	8007952 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800794c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007950:	e069      	b.n	8007a26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007958:	2b00      	cmp	r3, #0
 800795a:	d002      	beq.n	8007962 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800795c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007960:	e061      	b.n	8007a26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007968:	2b00      	cmp	r3, #0
 800796a:	d002      	beq.n	8007972 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800796c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007970:	e059      	b.n	8007a26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007978:	2b00      	cmp	r3, #0
 800797a:	d002      	beq.n	8007982 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800797c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007980:	e051      	b.n	8007a26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007988:	2b00      	cmp	r3, #0
 800798a:	d002      	beq.n	8007992 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800798c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007990:	e049      	b.n	8007a26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007998:	2b00      	cmp	r3, #0
 800799a:	d002      	beq.n	80079a2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800799c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80079a0:	e041      	b.n	8007a26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d002      	beq.n	80079b2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80079ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079b0:	e039      	b.n	8007a26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d002      	beq.n	80079c2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80079bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80079c0:	e031      	b.n	8007a26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d002      	beq.n	80079d2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80079cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80079d0:	e029      	b.n	8007a26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d002      	beq.n	80079e2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80079dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80079e0:	e021      	b.n	8007a26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d002      	beq.n	80079f2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80079ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80079f0:	e019      	b.n	8007a26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d002      	beq.n	8007a02 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80079fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007a00:	e011      	b.n	8007a26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d002      	beq.n	8007a12 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007a0c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007a10:	e009      	b.n	8007a26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	f003 0308 	and.w	r3, r3, #8
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d002      	beq.n	8007a22 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007a1c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007a20:	e001      	b.n	8007a26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007a22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3720      	adds	r7, #32
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	20000000 	.word	0x20000000
 8007a34:	10624dd3 	.word	0x10624dd3
 8007a38:	fdffe008 	.word	0xfdffe008

08007a3c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a44:	4b1f      	ldr	r3, [pc, #124]	; (8007ac4 <SDMMC_GetCmdResp2+0x88>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a1f      	ldr	r2, [pc, #124]	; (8007ac8 <SDMMC_GetCmdResp2+0x8c>)
 8007a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a4e:	0a5b      	lsrs	r3, r3, #9
 8007a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a54:	fb02 f303 	mul.w	r3, r2, r3
 8007a58:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	1e5a      	subs	r2, r3, #1
 8007a5e:	60fa      	str	r2, [r7, #12]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d102      	bne.n	8007a6a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007a64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007a68:	e026      	b.n	8007ab8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a6e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d0ef      	beq.n	8007a5a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1ea      	bne.n	8007a5a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a88:	f003 0304 	and.w	r3, r3, #4
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d004      	beq.n	8007a9a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2204      	movs	r2, #4
 8007a94:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007a96:	2304      	movs	r3, #4
 8007a98:	e00e      	b.n	8007ab8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a9e:	f003 0301 	and.w	r3, r3, #1
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d004      	beq.n	8007ab0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007aac:	2301      	movs	r3, #1
 8007aae:	e003      	b.n	8007ab8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	22c5      	movs	r2, #197	; 0xc5
 8007ab4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007ab6:	2300      	movs	r3, #0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr
 8007ac4:	20000000 	.word	0x20000000
 8007ac8:	10624dd3 	.word	0x10624dd3

08007acc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007ad4:	4b1a      	ldr	r3, [pc, #104]	; (8007b40 <SDMMC_GetCmdResp3+0x74>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a1a      	ldr	r2, [pc, #104]	; (8007b44 <SDMMC_GetCmdResp3+0x78>)
 8007ada:	fba2 2303 	umull	r2, r3, r2, r3
 8007ade:	0a5b      	lsrs	r3, r3, #9
 8007ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ae4:	fb02 f303 	mul.w	r3, r2, r3
 8007ae8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	1e5a      	subs	r2, r3, #1
 8007aee:	60fa      	str	r2, [r7, #12]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d102      	bne.n	8007afa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007af4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007af8:	e01b      	b.n	8007b32 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007afe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d0ef      	beq.n	8007aea <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1ea      	bne.n	8007aea <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b18:	f003 0304 	and.w	r3, r3, #4
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d004      	beq.n	8007b2a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2204      	movs	r2, #4
 8007b24:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007b26:	2304      	movs	r3, #4
 8007b28:	e003      	b.n	8007b32 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	22c5      	movs	r2, #197	; 0xc5
 8007b2e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3714      	adds	r7, #20
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	20000000 	.word	0x20000000
 8007b44:	10624dd3 	.word	0x10624dd3

08007b48 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b088      	sub	sp, #32
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	460b      	mov	r3, r1
 8007b52:	607a      	str	r2, [r7, #4]
 8007b54:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007b56:	4b35      	ldr	r3, [pc, #212]	; (8007c2c <SDMMC_GetCmdResp6+0xe4>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a35      	ldr	r2, [pc, #212]	; (8007c30 <SDMMC_GetCmdResp6+0xe8>)
 8007b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b60:	0a5b      	lsrs	r3, r3, #9
 8007b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b66:	fb02 f303 	mul.w	r3, r2, r3
 8007b6a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	1e5a      	subs	r2, r3, #1
 8007b70:	61fa      	str	r2, [r7, #28]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d102      	bne.n	8007b7c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007b76:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b7a:	e052      	b.n	8007c22 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b80:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d0ef      	beq.n	8007b6c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d1ea      	bne.n	8007b6c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b9a:	f003 0304 	and.w	r3, r3, #4
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d004      	beq.n	8007bac <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2204      	movs	r2, #4
 8007ba6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007ba8:	2304      	movs	r3, #4
 8007baa:	e03a      	b.n	8007c22 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bb0:	f003 0301 	and.w	r3, r3, #1
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d004      	beq.n	8007bc2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e02f      	b.n	8007c22 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f7ff fc0e 	bl	80073e4 <SDMMC_GetCommandResponse>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	461a      	mov	r2, r3
 8007bcc:	7afb      	ldrb	r3, [r7, #11]
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d001      	beq.n	8007bd6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e025      	b.n	8007c22 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	22c5      	movs	r2, #197	; 0xc5
 8007bda:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007bdc:	2100      	movs	r1, #0
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	f7ff fc0d 	bl	80073fe <SDMMC_GetResponse>
 8007be4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d106      	bne.n	8007bfe <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	0c1b      	lsrs	r3, r3, #16
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	e011      	b.n	8007c22 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d002      	beq.n	8007c0e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007c08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007c0c:	e009      	b.n	8007c22 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d002      	beq.n	8007c1e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c1c:	e001      	b.n	8007c22 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007c1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3720      	adds	r7, #32
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	20000000 	.word	0x20000000
 8007c30:	10624dd3 	.word	0x10624dd3

08007c34 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007c3c:	4b22      	ldr	r3, [pc, #136]	; (8007cc8 <SDMMC_GetCmdResp7+0x94>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a22      	ldr	r2, [pc, #136]	; (8007ccc <SDMMC_GetCmdResp7+0x98>)
 8007c42:	fba2 2303 	umull	r2, r3, r2, r3
 8007c46:	0a5b      	lsrs	r3, r3, #9
 8007c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c4c:	fb02 f303 	mul.w	r3, r2, r3
 8007c50:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	1e5a      	subs	r2, r3, #1
 8007c56:	60fa      	str	r2, [r7, #12]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d102      	bne.n	8007c62 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007c5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c60:	e02c      	b.n	8007cbc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c66:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d0ef      	beq.n	8007c52 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d1ea      	bne.n	8007c52 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c80:	f003 0304 	and.w	r3, r3, #4
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d004      	beq.n	8007c92 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2204      	movs	r2, #4
 8007c8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007c8e:	2304      	movs	r3, #4
 8007c90:	e014      	b.n	8007cbc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c96:	f003 0301 	and.w	r3, r3, #1
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d004      	beq.n	8007ca8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e009      	b.n	8007cbc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d002      	beq.n	8007cba <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2240      	movs	r2, #64	; 0x40
 8007cb8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007cba:	2300      	movs	r3, #0
  
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3714      	adds	r7, #20
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr
 8007cc8:	20000000 	.word	0x20000000
 8007ccc:	10624dd3 	.word	0x10624dd3

08007cd0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007cd8:	4b11      	ldr	r3, [pc, #68]	; (8007d20 <SDMMC_GetCmdError+0x50>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a11      	ldr	r2, [pc, #68]	; (8007d24 <SDMMC_GetCmdError+0x54>)
 8007cde:	fba2 2303 	umull	r2, r3, r2, r3
 8007ce2:	0a5b      	lsrs	r3, r3, #9
 8007ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ce8:	fb02 f303 	mul.w	r3, r2, r3
 8007cec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	1e5a      	subs	r2, r3, #1
 8007cf2:	60fa      	str	r2, [r7, #12]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d102      	bne.n	8007cfe <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007cf8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007cfc:	e009      	b.n	8007d12 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d0f1      	beq.n	8007cee <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	22c5      	movs	r2, #197	; 0xc5
 8007d0e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3714      	adds	r7, #20
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	20000000 	.word	0x20000000
 8007d24:	10624dd3 	.word	0x10624dd3

08007d28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d28:	b084      	sub	sp, #16
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b084      	sub	sp, #16
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
 8007d32:	f107 001c 	add.w	r0, r7, #28
 8007d36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d120      	bne.n	8007d82 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	68da      	ldr	r2, [r3, #12]
 8007d50:	4b20      	ldr	r3, [pc, #128]	; (8007dd4 <USB_CoreInit+0xac>)
 8007d52:	4013      	ands	r3, r2
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d105      	bne.n	8007d76 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f001 fbee 	bl	8009558 <USB_CoreReset>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	73fb      	strb	r3, [r7, #15]
 8007d80:	e010      	b.n	8007da4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f001 fbe2 	bl	8009558 <USB_CoreReset>
 8007d94:	4603      	mov	r3, r0
 8007d96:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d10b      	bne.n	8007dc2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f043 0206 	orr.w	r2, r3, #6
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	f043 0220 	orr.w	r2, r3, #32
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3710      	adds	r7, #16
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007dce:	b004      	add	sp, #16
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop
 8007dd4:	ffbdffbf 	.word	0xffbdffbf

08007dd8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b087      	sub	sp, #28
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	4613      	mov	r3, r2
 8007de4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007de6:	79fb      	ldrb	r3, [r7, #7]
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	d165      	bne.n	8007eb8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	4a41      	ldr	r2, [pc, #260]	; (8007ef4 <USB_SetTurnaroundTime+0x11c>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d906      	bls.n	8007e02 <USB_SetTurnaroundTime+0x2a>
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	4a40      	ldr	r2, [pc, #256]	; (8007ef8 <USB_SetTurnaroundTime+0x120>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d202      	bcs.n	8007e02 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007dfc:	230f      	movs	r3, #15
 8007dfe:	617b      	str	r3, [r7, #20]
 8007e00:	e062      	b.n	8007ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	4a3c      	ldr	r2, [pc, #240]	; (8007ef8 <USB_SetTurnaroundTime+0x120>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d306      	bcc.n	8007e18 <USB_SetTurnaroundTime+0x40>
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	4a3b      	ldr	r2, [pc, #236]	; (8007efc <USB_SetTurnaroundTime+0x124>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d202      	bcs.n	8007e18 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007e12:	230e      	movs	r3, #14
 8007e14:	617b      	str	r3, [r7, #20]
 8007e16:	e057      	b.n	8007ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	4a38      	ldr	r2, [pc, #224]	; (8007efc <USB_SetTurnaroundTime+0x124>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d306      	bcc.n	8007e2e <USB_SetTurnaroundTime+0x56>
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	4a37      	ldr	r2, [pc, #220]	; (8007f00 <USB_SetTurnaroundTime+0x128>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d202      	bcs.n	8007e2e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007e28:	230d      	movs	r3, #13
 8007e2a:	617b      	str	r3, [r7, #20]
 8007e2c:	e04c      	b.n	8007ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	4a33      	ldr	r2, [pc, #204]	; (8007f00 <USB_SetTurnaroundTime+0x128>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d306      	bcc.n	8007e44 <USB_SetTurnaroundTime+0x6c>
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	4a32      	ldr	r2, [pc, #200]	; (8007f04 <USB_SetTurnaroundTime+0x12c>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d802      	bhi.n	8007e44 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007e3e:	230c      	movs	r3, #12
 8007e40:	617b      	str	r3, [r7, #20]
 8007e42:	e041      	b.n	8007ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	4a2f      	ldr	r2, [pc, #188]	; (8007f04 <USB_SetTurnaroundTime+0x12c>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d906      	bls.n	8007e5a <USB_SetTurnaroundTime+0x82>
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	4a2e      	ldr	r2, [pc, #184]	; (8007f08 <USB_SetTurnaroundTime+0x130>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d802      	bhi.n	8007e5a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007e54:	230b      	movs	r3, #11
 8007e56:	617b      	str	r3, [r7, #20]
 8007e58:	e036      	b.n	8007ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	4a2a      	ldr	r2, [pc, #168]	; (8007f08 <USB_SetTurnaroundTime+0x130>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d906      	bls.n	8007e70 <USB_SetTurnaroundTime+0x98>
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	4a29      	ldr	r2, [pc, #164]	; (8007f0c <USB_SetTurnaroundTime+0x134>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d802      	bhi.n	8007e70 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007e6a:	230a      	movs	r3, #10
 8007e6c:	617b      	str	r3, [r7, #20]
 8007e6e:	e02b      	b.n	8007ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	4a26      	ldr	r2, [pc, #152]	; (8007f0c <USB_SetTurnaroundTime+0x134>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d906      	bls.n	8007e86 <USB_SetTurnaroundTime+0xae>
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	4a25      	ldr	r2, [pc, #148]	; (8007f10 <USB_SetTurnaroundTime+0x138>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d202      	bcs.n	8007e86 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007e80:	2309      	movs	r3, #9
 8007e82:	617b      	str	r3, [r7, #20]
 8007e84:	e020      	b.n	8007ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	4a21      	ldr	r2, [pc, #132]	; (8007f10 <USB_SetTurnaroundTime+0x138>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d306      	bcc.n	8007e9c <USB_SetTurnaroundTime+0xc4>
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	4a20      	ldr	r2, [pc, #128]	; (8007f14 <USB_SetTurnaroundTime+0x13c>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d802      	bhi.n	8007e9c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007e96:	2308      	movs	r3, #8
 8007e98:	617b      	str	r3, [r7, #20]
 8007e9a:	e015      	b.n	8007ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	4a1d      	ldr	r2, [pc, #116]	; (8007f14 <USB_SetTurnaroundTime+0x13c>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d906      	bls.n	8007eb2 <USB_SetTurnaroundTime+0xda>
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	4a1c      	ldr	r2, [pc, #112]	; (8007f18 <USB_SetTurnaroundTime+0x140>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d202      	bcs.n	8007eb2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007eac:	2307      	movs	r3, #7
 8007eae:	617b      	str	r3, [r7, #20]
 8007eb0:	e00a      	b.n	8007ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007eb2:	2306      	movs	r3, #6
 8007eb4:	617b      	str	r3, [r7, #20]
 8007eb6:	e007      	b.n	8007ec8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007eb8:	79fb      	ldrb	r3, [r7, #7]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d102      	bne.n	8007ec4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007ebe:	2309      	movs	r3, #9
 8007ec0:	617b      	str	r3, [r7, #20]
 8007ec2:	e001      	b.n	8007ec8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007ec4:	2309      	movs	r3, #9
 8007ec6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	68da      	ldr	r2, [r3, #12]
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	029b      	lsls	r3, r3, #10
 8007edc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007ee0:	431a      	orrs	r2, r3
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	371c      	adds	r7, #28
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr
 8007ef4:	00d8acbf 	.word	0x00d8acbf
 8007ef8:	00e4e1c0 	.word	0x00e4e1c0
 8007efc:	00f42400 	.word	0x00f42400
 8007f00:	01067380 	.word	0x01067380
 8007f04:	011a499f 	.word	0x011a499f
 8007f08:	01312cff 	.word	0x01312cff
 8007f0c:	014ca43f 	.word	0x014ca43f
 8007f10:	016e3600 	.word	0x016e3600
 8007f14:	01a6ab1f 	.word	0x01a6ab1f
 8007f18:	01e84800 	.word	0x01e84800

08007f1c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	f043 0201 	orr.w	r2, r3, #1
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	370c      	adds	r7, #12
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr

08007f3e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f3e:	b480      	push	{r7}
 8007f40:	b083      	sub	sp, #12
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	f023 0201 	bic.w	r2, r3, #1
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	460b      	mov	r3, r1
 8007f6a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007f7c:	78fb      	ldrb	r3, [r7, #3]
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d115      	bne.n	8007fae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007f8e:	2001      	movs	r0, #1
 8007f90:	f7f9 fb3a 	bl	8001608 <HAL_Delay>
      ms++;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	3301      	adds	r3, #1
 8007f98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f001 fa4b 	bl	8009436 <USB_GetMode>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d01e      	beq.n	8007fe4 <USB_SetCurrentMode+0x84>
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2b31      	cmp	r3, #49	; 0x31
 8007faa:	d9f0      	bls.n	8007f8e <USB_SetCurrentMode+0x2e>
 8007fac:	e01a      	b.n	8007fe4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007fae:	78fb      	ldrb	r3, [r7, #3]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d115      	bne.n	8007fe0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007fc0:	2001      	movs	r0, #1
 8007fc2:	f7f9 fb21 	bl	8001608 <HAL_Delay>
      ms++;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	3301      	adds	r3, #1
 8007fca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f001 fa32 	bl	8009436 <USB_GetMode>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d005      	beq.n	8007fe4 <USB_SetCurrentMode+0x84>
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2b31      	cmp	r3, #49	; 0x31
 8007fdc:	d9f0      	bls.n	8007fc0 <USB_SetCurrentMode+0x60>
 8007fde:	e001      	b.n	8007fe4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e005      	b.n	8007ff0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2b32      	cmp	r3, #50	; 0x32
 8007fe8:	d101      	bne.n	8007fee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e000      	b.n	8007ff0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007fee:	2300      	movs	r3, #0
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ff8:	b084      	sub	sp, #16
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b086      	sub	sp, #24
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008006:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800800a:	2300      	movs	r3, #0
 800800c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008012:	2300      	movs	r3, #0
 8008014:	613b      	str	r3, [r7, #16]
 8008016:	e009      	b.n	800802c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	3340      	adds	r3, #64	; 0x40
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	4413      	add	r3, r2
 8008022:	2200      	movs	r2, #0
 8008024:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	3301      	adds	r3, #1
 800802a:	613b      	str	r3, [r7, #16]
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	2b0e      	cmp	r3, #14
 8008030:	d9f2      	bls.n	8008018 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008034:	2b00      	cmp	r3, #0
 8008036:	d11c      	bne.n	8008072 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008046:	f043 0302 	orr.w	r3, r3, #2
 800804a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008050:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	601a      	str	r2, [r3, #0]
 8008070:	e005      	b.n	800807e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008076:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008084:	461a      	mov	r2, r3
 8008086:	2300      	movs	r3, #0
 8008088:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008090:	4619      	mov	r1, r3
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008098:	461a      	mov	r2, r3
 800809a:	680b      	ldr	r3, [r1, #0]
 800809c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800809e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d10c      	bne.n	80080be <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80080a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d104      	bne.n	80080b4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80080aa:	2100      	movs	r1, #0
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f965 	bl	800837c <USB_SetDevSpeed>
 80080b2:	e008      	b.n	80080c6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80080b4:	2101      	movs	r1, #1
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 f960 	bl	800837c <USB_SetDevSpeed>
 80080bc:	e003      	b.n	80080c6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80080be:	2103      	movs	r1, #3
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 f95b 	bl	800837c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80080c6:	2110      	movs	r1, #16
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 f8f3 	bl	80082b4 <USB_FlushTxFifo>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d001      	beq.n	80080d8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 f91f 	bl	800831c <USB_FlushRxFifo>
 80080de:	4603      	mov	r3, r0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d001      	beq.n	80080e8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ee:	461a      	mov	r2, r3
 80080f0:	2300      	movs	r3, #0
 80080f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080fa:	461a      	mov	r2, r3
 80080fc:	2300      	movs	r3, #0
 80080fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008106:	461a      	mov	r2, r3
 8008108:	2300      	movs	r3, #0
 800810a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800810c:	2300      	movs	r3, #0
 800810e:	613b      	str	r3, [r7, #16]
 8008110:	e043      	b.n	800819a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	015a      	lsls	r2, r3, #5
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	4413      	add	r3, r2
 800811a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008124:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008128:	d118      	bne.n	800815c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d10a      	bne.n	8008146 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	015a      	lsls	r2, r3, #5
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	4413      	add	r3, r2
 8008138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800813c:	461a      	mov	r2, r3
 800813e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008142:	6013      	str	r3, [r2, #0]
 8008144:	e013      	b.n	800816e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	015a      	lsls	r2, r3, #5
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	4413      	add	r3, r2
 800814e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008152:	461a      	mov	r2, r3
 8008154:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008158:	6013      	str	r3, [r2, #0]
 800815a:	e008      	b.n	800816e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	015a      	lsls	r2, r3, #5
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	4413      	add	r3, r2
 8008164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008168:	461a      	mov	r2, r3
 800816a:	2300      	movs	r3, #0
 800816c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	015a      	lsls	r2, r3, #5
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	4413      	add	r3, r2
 8008176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800817a:	461a      	mov	r2, r3
 800817c:	2300      	movs	r3, #0
 800817e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	015a      	lsls	r2, r3, #5
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	4413      	add	r3, r2
 8008188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800818c:	461a      	mov	r2, r3
 800818e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008192:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	3301      	adds	r3, #1
 8008198:	613b      	str	r3, [r7, #16]
 800819a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819c:	693a      	ldr	r2, [r7, #16]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d3b7      	bcc.n	8008112 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081a2:	2300      	movs	r3, #0
 80081a4:	613b      	str	r3, [r7, #16]
 80081a6:	e043      	b.n	8008230 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	015a      	lsls	r2, r3, #5
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	4413      	add	r3, r2
 80081b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081be:	d118      	bne.n	80081f2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d10a      	bne.n	80081dc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	015a      	lsls	r2, r3, #5
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	4413      	add	r3, r2
 80081ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081d2:	461a      	mov	r2, r3
 80081d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80081d8:	6013      	str	r3, [r2, #0]
 80081da:	e013      	b.n	8008204 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	015a      	lsls	r2, r3, #5
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	4413      	add	r3, r2
 80081e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081e8:	461a      	mov	r2, r3
 80081ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80081ee:	6013      	str	r3, [r2, #0]
 80081f0:	e008      	b.n	8008204 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	015a      	lsls	r2, r3, #5
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	4413      	add	r3, r2
 80081fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081fe:	461a      	mov	r2, r3
 8008200:	2300      	movs	r3, #0
 8008202:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	015a      	lsls	r2, r3, #5
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	4413      	add	r3, r2
 800820c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008210:	461a      	mov	r2, r3
 8008212:	2300      	movs	r3, #0
 8008214:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	015a      	lsls	r2, r3, #5
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	4413      	add	r3, r2
 800821e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008222:	461a      	mov	r2, r3
 8008224:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008228:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	3301      	adds	r3, #1
 800822e:	613b      	str	r3, [r7, #16]
 8008230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008232:	693a      	ldr	r2, [r7, #16]
 8008234:	429a      	cmp	r2, r3
 8008236:	d3b7      	bcc.n	80081a8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800823e:	691b      	ldr	r3, [r3, #16]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008246:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800824a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008258:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800825a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825c:	2b00      	cmp	r3, #0
 800825e:	d105      	bne.n	800826c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	699b      	ldr	r3, [r3, #24]
 8008264:	f043 0210 	orr.w	r2, r3, #16
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	699a      	ldr	r2, [r3, #24]
 8008270:	4b0e      	ldr	r3, [pc, #56]	; (80082ac <USB_DevInit+0x2b4>)
 8008272:	4313      	orrs	r3, r2
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800827a:	2b00      	cmp	r3, #0
 800827c:	d005      	beq.n	800828a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	f043 0208 	orr.w	r2, r3, #8
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800828a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800828c:	2b01      	cmp	r3, #1
 800828e:	d105      	bne.n	800829c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	699a      	ldr	r2, [r3, #24]
 8008294:	4b06      	ldr	r3, [pc, #24]	; (80082b0 <USB_DevInit+0x2b8>)
 8008296:	4313      	orrs	r3, r2
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800829c:	7dfb      	ldrb	r3, [r7, #23]
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3718      	adds	r7, #24
 80082a2:	46bd      	mov	sp, r7
 80082a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082a8:	b004      	add	sp, #16
 80082aa:	4770      	bx	lr
 80082ac:	803c3800 	.word	0x803c3800
 80082b0:	40000004 	.word	0x40000004

080082b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80082be:	2300      	movs	r3, #0
 80082c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	3301      	adds	r3, #1
 80082c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	4a13      	ldr	r2, [pc, #76]	; (8008318 <USB_FlushTxFifo+0x64>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d901      	bls.n	80082d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80082d0:	2303      	movs	r3, #3
 80082d2:	e01b      	b.n	800830c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	daf2      	bge.n	80082c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80082dc:	2300      	movs	r3, #0
 80082de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	019b      	lsls	r3, r3, #6
 80082e4:	f043 0220 	orr.w	r2, r3, #32
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	3301      	adds	r3, #1
 80082f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	4a08      	ldr	r2, [pc, #32]	; (8008318 <USB_FlushTxFifo+0x64>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d901      	bls.n	80082fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80082fa:	2303      	movs	r3, #3
 80082fc:	e006      	b.n	800830c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	f003 0320 	and.w	r3, r3, #32
 8008306:	2b20      	cmp	r3, #32
 8008308:	d0f0      	beq.n	80082ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800830a:	2300      	movs	r3, #0
}
 800830c:	4618      	mov	r0, r3
 800830e:	3714      	adds	r7, #20
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr
 8008318:	00030d40 	.word	0x00030d40

0800831c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008324:	2300      	movs	r3, #0
 8008326:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	3301      	adds	r3, #1
 800832c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	4a11      	ldr	r2, [pc, #68]	; (8008378 <USB_FlushRxFifo+0x5c>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d901      	bls.n	800833a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	e018      	b.n	800836c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	2b00      	cmp	r3, #0
 8008340:	daf2      	bge.n	8008328 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008342:	2300      	movs	r3, #0
 8008344:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2210      	movs	r2, #16
 800834a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	3301      	adds	r3, #1
 8008350:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	4a08      	ldr	r2, [pc, #32]	; (8008378 <USB_FlushRxFifo+0x5c>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d901      	bls.n	800835e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800835a:	2303      	movs	r3, #3
 800835c:	e006      	b.n	800836c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	691b      	ldr	r3, [r3, #16]
 8008362:	f003 0310 	and.w	r3, r3, #16
 8008366:	2b10      	cmp	r3, #16
 8008368:	d0f0      	beq.n	800834c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	3714      	adds	r7, #20
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr
 8008378:	00030d40 	.word	0x00030d40

0800837c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	460b      	mov	r3, r1
 8008386:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	78fb      	ldrb	r3, [r7, #3]
 8008396:	68f9      	ldr	r1, [r7, #12]
 8008398:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800839c:	4313      	orrs	r3, r2
 800839e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr

080083ae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80083ae:	b480      	push	{r7}
 80083b0:	b087      	sub	sp, #28
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	f003 0306 	and.w	r3, r3, #6
 80083c6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d102      	bne.n	80083d4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80083ce:	2300      	movs	r3, #0
 80083d0:	75fb      	strb	r3, [r7, #23]
 80083d2:	e00a      	b.n	80083ea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d002      	beq.n	80083e0 <USB_GetDevSpeed+0x32>
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2b06      	cmp	r3, #6
 80083de:	d102      	bne.n	80083e6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80083e0:	2302      	movs	r3, #2
 80083e2:	75fb      	strb	r3, [r7, #23]
 80083e4:	e001      	b.n	80083ea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80083e6:	230f      	movs	r3, #15
 80083e8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80083ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	371c      	adds	r7, #28
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	785b      	ldrb	r3, [r3, #1]
 8008410:	2b01      	cmp	r3, #1
 8008412:	d139      	bne.n	8008488 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800841a:	69da      	ldr	r2, [r3, #28]
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	f003 030f 	and.w	r3, r3, #15
 8008424:	2101      	movs	r1, #1
 8008426:	fa01 f303 	lsl.w	r3, r1, r3
 800842a:	b29b      	uxth	r3, r3
 800842c:	68f9      	ldr	r1, [r7, #12]
 800842e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008432:	4313      	orrs	r3, r2
 8008434:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	015a      	lsls	r2, r3, #5
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	4413      	add	r3, r2
 800843e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008448:	2b00      	cmp	r3, #0
 800844a:	d153      	bne.n	80084f4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	015a      	lsls	r2, r3, #5
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	4413      	add	r3, r2
 8008454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	791b      	ldrb	r3, [r3, #4]
 8008466:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008468:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	059b      	lsls	r3, r3, #22
 800846e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008470:	431a      	orrs	r2, r3
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	0159      	lsls	r1, r3, #5
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	440b      	add	r3, r1
 800847a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800847e:	4619      	mov	r1, r3
 8008480:	4b20      	ldr	r3, [pc, #128]	; (8008504 <USB_ActivateEndpoint+0x10c>)
 8008482:	4313      	orrs	r3, r2
 8008484:	600b      	str	r3, [r1, #0]
 8008486:	e035      	b.n	80084f4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800848e:	69da      	ldr	r2, [r3, #28]
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	f003 030f 	and.w	r3, r3, #15
 8008498:	2101      	movs	r1, #1
 800849a:	fa01 f303 	lsl.w	r3, r1, r3
 800849e:	041b      	lsls	r3, r3, #16
 80084a0:	68f9      	ldr	r1, [r7, #12]
 80084a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084a6:	4313      	orrs	r3, r2
 80084a8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	015a      	lsls	r2, r3, #5
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	4413      	add	r3, r2
 80084b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d119      	bne.n	80084f4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	015a      	lsls	r2, r3, #5
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	4413      	add	r3, r2
 80084c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	791b      	ldrb	r3, [r3, #4]
 80084da:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80084dc:	430b      	orrs	r3, r1
 80084de:	431a      	orrs	r2, r3
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	0159      	lsls	r1, r3, #5
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	440b      	add	r3, r1
 80084e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ec:	4619      	mov	r1, r3
 80084ee:	4b05      	ldr	r3, [pc, #20]	; (8008504 <USB_ActivateEndpoint+0x10c>)
 80084f0:	4313      	orrs	r3, r2
 80084f2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3714      	adds	r7, #20
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop
 8008504:	10008000 	.word	0x10008000

08008508 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008508:	b480      	push	{r7}
 800850a:	b085      	sub	sp, #20
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	785b      	ldrb	r3, [r3, #1]
 8008520:	2b01      	cmp	r3, #1
 8008522:	d161      	bne.n	80085e8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	015a      	lsls	r2, r3, #5
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	4413      	add	r3, r2
 800852c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008536:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800853a:	d11f      	bne.n	800857c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	015a      	lsls	r2, r3, #5
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	4413      	add	r3, r2
 8008544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	68ba      	ldr	r2, [r7, #8]
 800854c:	0151      	lsls	r1, r2, #5
 800854e:	68fa      	ldr	r2, [r7, #12]
 8008550:	440a      	add	r2, r1
 8008552:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008556:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800855a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	015a      	lsls	r2, r3, #5
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	4413      	add	r3, r2
 8008564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	68ba      	ldr	r2, [r7, #8]
 800856c:	0151      	lsls	r1, r2, #5
 800856e:	68fa      	ldr	r2, [r7, #12]
 8008570:	440a      	add	r2, r1
 8008572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008576:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800857a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008582:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	f003 030f 	and.w	r3, r3, #15
 800858c:	2101      	movs	r1, #1
 800858e:	fa01 f303 	lsl.w	r3, r1, r3
 8008592:	b29b      	uxth	r3, r3
 8008594:	43db      	mvns	r3, r3
 8008596:	68f9      	ldr	r1, [r7, #12]
 8008598:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800859c:	4013      	ands	r3, r2
 800859e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085a6:	69da      	ldr	r2, [r3, #28]
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	f003 030f 	and.w	r3, r3, #15
 80085b0:	2101      	movs	r1, #1
 80085b2:	fa01 f303 	lsl.w	r3, r1, r3
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	43db      	mvns	r3, r3
 80085ba:	68f9      	ldr	r1, [r7, #12]
 80085bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085c0:	4013      	ands	r3, r2
 80085c2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	015a      	lsls	r2, r3, #5
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	4413      	add	r3, r2
 80085cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	0159      	lsls	r1, r3, #5
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	440b      	add	r3, r1
 80085da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085de:	4619      	mov	r1, r3
 80085e0:	4b35      	ldr	r3, [pc, #212]	; (80086b8 <USB_DeactivateEndpoint+0x1b0>)
 80085e2:	4013      	ands	r3, r2
 80085e4:	600b      	str	r3, [r1, #0]
 80085e6:	e060      	b.n	80086aa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	015a      	lsls	r2, r3, #5
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	4413      	add	r3, r2
 80085f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085fe:	d11f      	bne.n	8008640 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	015a      	lsls	r2, r3, #5
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	4413      	add	r3, r2
 8008608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	68ba      	ldr	r2, [r7, #8]
 8008610:	0151      	lsls	r1, r2, #5
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	440a      	add	r2, r1
 8008616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800861a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800861e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	015a      	lsls	r2, r3, #5
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	4413      	add	r3, r2
 8008628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	68ba      	ldr	r2, [r7, #8]
 8008630:	0151      	lsls	r1, r2, #5
 8008632:	68fa      	ldr	r2, [r7, #12]
 8008634:	440a      	add	r2, r1
 8008636:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800863a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800863e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008646:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	f003 030f 	and.w	r3, r3, #15
 8008650:	2101      	movs	r1, #1
 8008652:	fa01 f303 	lsl.w	r3, r1, r3
 8008656:	041b      	lsls	r3, r3, #16
 8008658:	43db      	mvns	r3, r3
 800865a:	68f9      	ldr	r1, [r7, #12]
 800865c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008660:	4013      	ands	r3, r2
 8008662:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800866a:	69da      	ldr	r2, [r3, #28]
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	f003 030f 	and.w	r3, r3, #15
 8008674:	2101      	movs	r1, #1
 8008676:	fa01 f303 	lsl.w	r3, r1, r3
 800867a:	041b      	lsls	r3, r3, #16
 800867c:	43db      	mvns	r3, r3
 800867e:	68f9      	ldr	r1, [r7, #12]
 8008680:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008684:	4013      	ands	r3, r2
 8008686:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	015a      	lsls	r2, r3, #5
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	4413      	add	r3, r2
 8008690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	0159      	lsls	r1, r3, #5
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	440b      	add	r3, r1
 800869e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086a2:	4619      	mov	r1, r3
 80086a4:	4b05      	ldr	r3, [pc, #20]	; (80086bc <USB_DeactivateEndpoint+0x1b4>)
 80086a6:	4013      	ands	r3, r2
 80086a8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3714      	adds	r7, #20
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr
 80086b8:	ec337800 	.word	0xec337800
 80086bc:	eff37800 	.word	0xeff37800

080086c0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b08a      	sub	sp, #40	; 0x28
 80086c4:	af02      	add	r7, sp, #8
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	4613      	mov	r3, r2
 80086cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	785b      	ldrb	r3, [r3, #1]
 80086dc:	2b01      	cmp	r3, #1
 80086de:	f040 8163 	bne.w	80089a8 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	699b      	ldr	r3, [r3, #24]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d132      	bne.n	8008750 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	015a      	lsls	r2, r3, #5
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	4413      	add	r3, r2
 80086f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086f6:	691a      	ldr	r2, [r3, #16]
 80086f8:	69bb      	ldr	r3, [r7, #24]
 80086fa:	0159      	lsls	r1, r3, #5
 80086fc:	69fb      	ldr	r3, [r7, #28]
 80086fe:	440b      	add	r3, r1
 8008700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008704:	4619      	mov	r1, r3
 8008706:	4ba5      	ldr	r3, [pc, #660]	; (800899c <USB_EPStartXfer+0x2dc>)
 8008708:	4013      	ands	r3, r2
 800870a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800870c:	69bb      	ldr	r3, [r7, #24]
 800870e:	015a      	lsls	r2, r3, #5
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	4413      	add	r3, r2
 8008714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008718:	691b      	ldr	r3, [r3, #16]
 800871a:	69ba      	ldr	r2, [r7, #24]
 800871c:	0151      	lsls	r1, r2, #5
 800871e:	69fa      	ldr	r2, [r7, #28]
 8008720:	440a      	add	r2, r1
 8008722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008726:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800872a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	015a      	lsls	r2, r3, #5
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	4413      	add	r3, r2
 8008734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008738:	691a      	ldr	r2, [r3, #16]
 800873a:	69bb      	ldr	r3, [r7, #24]
 800873c:	0159      	lsls	r1, r3, #5
 800873e:	69fb      	ldr	r3, [r7, #28]
 8008740:	440b      	add	r3, r1
 8008742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008746:	4619      	mov	r1, r3
 8008748:	4b95      	ldr	r3, [pc, #596]	; (80089a0 <USB_EPStartXfer+0x2e0>)
 800874a:	4013      	ands	r3, r2
 800874c:	610b      	str	r3, [r1, #16]
 800874e:	e074      	b.n	800883a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	015a      	lsls	r2, r3, #5
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	4413      	add	r3, r2
 8008758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800875c:	691a      	ldr	r2, [r3, #16]
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	0159      	lsls	r1, r3, #5
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	440b      	add	r3, r1
 8008766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800876a:	4619      	mov	r1, r3
 800876c:	4b8c      	ldr	r3, [pc, #560]	; (80089a0 <USB_EPStartXfer+0x2e0>)
 800876e:	4013      	ands	r3, r2
 8008770:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	015a      	lsls	r2, r3, #5
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	4413      	add	r3, r2
 800877a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800877e:	691a      	ldr	r2, [r3, #16]
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	0159      	lsls	r1, r3, #5
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	440b      	add	r3, r1
 8008788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800878c:	4619      	mov	r1, r3
 800878e:	4b83      	ldr	r3, [pc, #524]	; (800899c <USB_EPStartXfer+0x2dc>)
 8008790:	4013      	ands	r3, r2
 8008792:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	015a      	lsls	r2, r3, #5
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	4413      	add	r3, r2
 800879c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087a0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	6999      	ldr	r1, [r3, #24]
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	440b      	add	r3, r1
 80087ac:	1e59      	subs	r1, r3, #1
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80087b6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80087b8:	4b7a      	ldr	r3, [pc, #488]	; (80089a4 <USB_EPStartXfer+0x2e4>)
 80087ba:	400b      	ands	r3, r1
 80087bc:	69b9      	ldr	r1, [r7, #24]
 80087be:	0148      	lsls	r0, r1, #5
 80087c0:	69f9      	ldr	r1, [r7, #28]
 80087c2:	4401      	add	r1, r0
 80087c4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80087c8:	4313      	orrs	r3, r2
 80087ca:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80087cc:	69bb      	ldr	r3, [r7, #24]
 80087ce:	015a      	lsls	r2, r3, #5
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	4413      	add	r3, r2
 80087d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087d8:	691a      	ldr	r2, [r3, #16]
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	699b      	ldr	r3, [r3, #24]
 80087de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087e2:	69b9      	ldr	r1, [r7, #24]
 80087e4:	0148      	lsls	r0, r1, #5
 80087e6:	69f9      	ldr	r1, [r7, #28]
 80087e8:	4401      	add	r1, r0
 80087ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80087ee:	4313      	orrs	r3, r2
 80087f0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	791b      	ldrb	r3, [r3, #4]
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d11f      	bne.n	800883a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	015a      	lsls	r2, r3, #5
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	4413      	add	r3, r2
 8008802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008806:	691b      	ldr	r3, [r3, #16]
 8008808:	69ba      	ldr	r2, [r7, #24]
 800880a:	0151      	lsls	r1, r2, #5
 800880c:	69fa      	ldr	r2, [r7, #28]
 800880e:	440a      	add	r2, r1
 8008810:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008814:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008818:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800881a:	69bb      	ldr	r3, [r7, #24]
 800881c:	015a      	lsls	r2, r3, #5
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	4413      	add	r3, r2
 8008822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	69ba      	ldr	r2, [r7, #24]
 800882a:	0151      	lsls	r1, r2, #5
 800882c:	69fa      	ldr	r2, [r7, #28]
 800882e:	440a      	add	r2, r1
 8008830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008834:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008838:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800883a:	79fb      	ldrb	r3, [r7, #7]
 800883c:	2b01      	cmp	r3, #1
 800883e:	d14b      	bne.n	80088d8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	695b      	ldr	r3, [r3, #20]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d009      	beq.n	800885c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	015a      	lsls	r2, r3, #5
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	4413      	add	r3, r2
 8008850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008854:	461a      	mov	r2, r3
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	695b      	ldr	r3, [r3, #20]
 800885a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	791b      	ldrb	r3, [r3, #4]
 8008860:	2b01      	cmp	r3, #1
 8008862:	d128      	bne.n	80088b6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008870:	2b00      	cmp	r3, #0
 8008872:	d110      	bne.n	8008896 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	015a      	lsls	r2, r3, #5
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	4413      	add	r3, r2
 800887c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	69ba      	ldr	r2, [r7, #24]
 8008884:	0151      	lsls	r1, r2, #5
 8008886:	69fa      	ldr	r2, [r7, #28]
 8008888:	440a      	add	r2, r1
 800888a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800888e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008892:	6013      	str	r3, [r2, #0]
 8008894:	e00f      	b.n	80088b6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	015a      	lsls	r2, r3, #5
 800889a:	69fb      	ldr	r3, [r7, #28]
 800889c:	4413      	add	r3, r2
 800889e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	69ba      	ldr	r2, [r7, #24]
 80088a6:	0151      	lsls	r1, r2, #5
 80088a8:	69fa      	ldr	r2, [r7, #28]
 80088aa:	440a      	add	r2, r1
 80088ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088b4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	015a      	lsls	r2, r3, #5
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	4413      	add	r3, r2
 80088be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	69ba      	ldr	r2, [r7, #24]
 80088c6:	0151      	lsls	r1, r2, #5
 80088c8:	69fa      	ldr	r2, [r7, #28]
 80088ca:	440a      	add	r2, r1
 80088cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80088d4:	6013      	str	r3, [r2, #0]
 80088d6:	e137      	b.n	8008b48 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80088d8:	69bb      	ldr	r3, [r7, #24]
 80088da:	015a      	lsls	r2, r3, #5
 80088dc:	69fb      	ldr	r3, [r7, #28]
 80088de:	4413      	add	r3, r2
 80088e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	69ba      	ldr	r2, [r7, #24]
 80088e8:	0151      	lsls	r1, r2, #5
 80088ea:	69fa      	ldr	r2, [r7, #28]
 80088ec:	440a      	add	r2, r1
 80088ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80088f6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	791b      	ldrb	r3, [r3, #4]
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d015      	beq.n	800892c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	699b      	ldr	r3, [r3, #24]
 8008904:	2b00      	cmp	r3, #0
 8008906:	f000 811f 	beq.w	8008b48 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008910:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	f003 030f 	and.w	r3, r3, #15
 800891a:	2101      	movs	r1, #1
 800891c:	fa01 f303 	lsl.w	r3, r1, r3
 8008920:	69f9      	ldr	r1, [r7, #28]
 8008922:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008926:	4313      	orrs	r3, r2
 8008928:	634b      	str	r3, [r1, #52]	; 0x34
 800892a:	e10d      	b.n	8008b48 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008938:	2b00      	cmp	r3, #0
 800893a:	d110      	bne.n	800895e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800893c:	69bb      	ldr	r3, [r7, #24]
 800893e:	015a      	lsls	r2, r3, #5
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	4413      	add	r3, r2
 8008944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	69ba      	ldr	r2, [r7, #24]
 800894c:	0151      	lsls	r1, r2, #5
 800894e:	69fa      	ldr	r2, [r7, #28]
 8008950:	440a      	add	r2, r1
 8008952:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008956:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800895a:	6013      	str	r3, [r2, #0]
 800895c:	e00f      	b.n	800897e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800895e:	69bb      	ldr	r3, [r7, #24]
 8008960:	015a      	lsls	r2, r3, #5
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	4413      	add	r3, r2
 8008966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	69ba      	ldr	r2, [r7, #24]
 800896e:	0151      	lsls	r1, r2, #5
 8008970:	69fa      	ldr	r2, [r7, #28]
 8008972:	440a      	add	r2, r1
 8008974:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800897c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	6919      	ldr	r1, [r3, #16]
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	781a      	ldrb	r2, [r3, #0]
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	699b      	ldr	r3, [r3, #24]
 800898a:	b298      	uxth	r0, r3
 800898c:	79fb      	ldrb	r3, [r7, #7]
 800898e:	9300      	str	r3, [sp, #0]
 8008990:	4603      	mov	r3, r0
 8008992:	68f8      	ldr	r0, [r7, #12]
 8008994:	f000 faea 	bl	8008f6c <USB_WritePacket>
 8008998:	e0d6      	b.n	8008b48 <USB_EPStartXfer+0x488>
 800899a:	bf00      	nop
 800899c:	e007ffff 	.word	0xe007ffff
 80089a0:	fff80000 	.word	0xfff80000
 80089a4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80089a8:	69bb      	ldr	r3, [r7, #24]
 80089aa:	015a      	lsls	r2, r3, #5
 80089ac:	69fb      	ldr	r3, [r7, #28]
 80089ae:	4413      	add	r3, r2
 80089b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089b4:	691a      	ldr	r2, [r3, #16]
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	0159      	lsls	r1, r3, #5
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	440b      	add	r3, r1
 80089be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089c2:	4619      	mov	r1, r3
 80089c4:	4b63      	ldr	r3, [pc, #396]	; (8008b54 <USB_EPStartXfer+0x494>)
 80089c6:	4013      	ands	r3, r2
 80089c8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	015a      	lsls	r2, r3, #5
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	4413      	add	r3, r2
 80089d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089d6:	691a      	ldr	r2, [r3, #16]
 80089d8:	69bb      	ldr	r3, [r7, #24]
 80089da:	0159      	lsls	r1, r3, #5
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	440b      	add	r3, r1
 80089e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089e4:	4619      	mov	r1, r3
 80089e6:	4b5c      	ldr	r3, [pc, #368]	; (8008b58 <USB_EPStartXfer+0x498>)
 80089e8:	4013      	ands	r3, r2
 80089ea:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	699b      	ldr	r3, [r3, #24]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d123      	bne.n	8008a3c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80089f4:	69bb      	ldr	r3, [r7, #24]
 80089f6:	015a      	lsls	r2, r3, #5
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	4413      	add	r3, r2
 80089fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a00:	691a      	ldr	r2, [r3, #16]
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a0a:	69b9      	ldr	r1, [r7, #24]
 8008a0c:	0148      	lsls	r0, r1, #5
 8008a0e:	69f9      	ldr	r1, [r7, #28]
 8008a10:	4401      	add	r1, r0
 8008a12:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008a16:	4313      	orrs	r3, r2
 8008a18:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	015a      	lsls	r2, r3, #5
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	4413      	add	r3, r2
 8008a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	69ba      	ldr	r2, [r7, #24]
 8008a2a:	0151      	lsls	r1, r2, #5
 8008a2c:	69fa      	ldr	r2, [r7, #28]
 8008a2e:	440a      	add	r2, r1
 8008a30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a38:	6113      	str	r3, [r2, #16]
 8008a3a:	e037      	b.n	8008aac <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	699a      	ldr	r2, [r3, #24]
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	4413      	add	r3, r2
 8008a46:	1e5a      	subs	r2, r3, #1
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a50:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	8afa      	ldrh	r2, [r7, #22]
 8008a58:	fb03 f202 	mul.w	r2, r3, r2
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008a60:	69bb      	ldr	r3, [r7, #24]
 8008a62:	015a      	lsls	r2, r3, #5
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	4413      	add	r3, r2
 8008a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a6c:	691a      	ldr	r2, [r3, #16]
 8008a6e:	8afb      	ldrh	r3, [r7, #22]
 8008a70:	04d9      	lsls	r1, r3, #19
 8008a72:	4b3a      	ldr	r3, [pc, #232]	; (8008b5c <USB_EPStartXfer+0x49c>)
 8008a74:	400b      	ands	r3, r1
 8008a76:	69b9      	ldr	r1, [r7, #24]
 8008a78:	0148      	lsls	r0, r1, #5
 8008a7a:	69f9      	ldr	r1, [r7, #28]
 8008a7c:	4401      	add	r1, r0
 8008a7e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008a82:	4313      	orrs	r3, r2
 8008a84:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008a86:	69bb      	ldr	r3, [r7, #24]
 8008a88:	015a      	lsls	r2, r3, #5
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	4413      	add	r3, r2
 8008a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a92:	691a      	ldr	r2, [r3, #16]
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	69db      	ldr	r3, [r3, #28]
 8008a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a9c:	69b9      	ldr	r1, [r7, #24]
 8008a9e:	0148      	lsls	r0, r1, #5
 8008aa0:	69f9      	ldr	r1, [r7, #28]
 8008aa2:	4401      	add	r1, r0
 8008aa4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008aac:	79fb      	ldrb	r3, [r7, #7]
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d10d      	bne.n	8008ace <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	691b      	ldr	r3, [r3, #16]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d009      	beq.n	8008ace <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	6919      	ldr	r1, [r3, #16]
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	015a      	lsls	r2, r3, #5
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aca:	460a      	mov	r2, r1
 8008acc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	791b      	ldrb	r3, [r3, #4]
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d128      	bne.n	8008b28 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d110      	bne.n	8008b08 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	015a      	lsls	r2, r3, #5
 8008aea:	69fb      	ldr	r3, [r7, #28]
 8008aec:	4413      	add	r3, r2
 8008aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	69ba      	ldr	r2, [r7, #24]
 8008af6:	0151      	lsls	r1, r2, #5
 8008af8:	69fa      	ldr	r2, [r7, #28]
 8008afa:	440a      	add	r2, r1
 8008afc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b04:	6013      	str	r3, [r2, #0]
 8008b06:	e00f      	b.n	8008b28 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008b08:	69bb      	ldr	r3, [r7, #24]
 8008b0a:	015a      	lsls	r2, r3, #5
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	4413      	add	r3, r2
 8008b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	69ba      	ldr	r2, [r7, #24]
 8008b18:	0151      	lsls	r1, r2, #5
 8008b1a:	69fa      	ldr	r2, [r7, #28]
 8008b1c:	440a      	add	r2, r1
 8008b1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b26:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	015a      	lsls	r2, r3, #5
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	4413      	add	r3, r2
 8008b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	69ba      	ldr	r2, [r7, #24]
 8008b38:	0151      	lsls	r1, r2, #5
 8008b3a:	69fa      	ldr	r2, [r7, #28]
 8008b3c:	440a      	add	r2, r1
 8008b3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3720      	adds	r7, #32
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	fff80000 	.word	0xfff80000
 8008b58:	e007ffff 	.word	0xe007ffff
 8008b5c:	1ff80000 	.word	0x1ff80000

08008b60 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b087      	sub	sp, #28
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	785b      	ldrb	r3, [r3, #1]
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	f040 80ce 	bne.w	8008d1e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	699b      	ldr	r3, [r3, #24]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d132      	bne.n	8008bf0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	015a      	lsls	r2, r3, #5
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	4413      	add	r3, r2
 8008b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b96:	691a      	ldr	r2, [r3, #16]
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	0159      	lsls	r1, r3, #5
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	440b      	add	r3, r1
 8008ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	4b9a      	ldr	r3, [pc, #616]	; (8008e10 <USB_EP0StartXfer+0x2b0>)
 8008ba8:	4013      	ands	r3, r2
 8008baa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	015a      	lsls	r2, r3, #5
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bb8:	691b      	ldr	r3, [r3, #16]
 8008bba:	693a      	ldr	r2, [r7, #16]
 8008bbc:	0151      	lsls	r1, r2, #5
 8008bbe:	697a      	ldr	r2, [r7, #20]
 8008bc0:	440a      	add	r2, r1
 8008bc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bc6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008bca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	015a      	lsls	r2, r3, #5
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bd8:	691a      	ldr	r2, [r3, #16]
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	0159      	lsls	r1, r3, #5
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	440b      	add	r3, r1
 8008be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008be6:	4619      	mov	r1, r3
 8008be8:	4b8a      	ldr	r3, [pc, #552]	; (8008e14 <USB_EP0StartXfer+0x2b4>)
 8008bea:	4013      	ands	r3, r2
 8008bec:	610b      	str	r3, [r1, #16]
 8008bee:	e04e      	b.n	8008c8e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	015a      	lsls	r2, r3, #5
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bfc:	691a      	ldr	r2, [r3, #16]
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	0159      	lsls	r1, r3, #5
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	440b      	add	r3, r1
 8008c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	4b81      	ldr	r3, [pc, #516]	; (8008e14 <USB_EP0StartXfer+0x2b4>)
 8008c0e:	4013      	ands	r3, r2
 8008c10:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	015a      	lsls	r2, r3, #5
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	4413      	add	r3, r2
 8008c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c1e:	691a      	ldr	r2, [r3, #16]
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	0159      	lsls	r1, r3, #5
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	440b      	add	r3, r1
 8008c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	4b78      	ldr	r3, [pc, #480]	; (8008e10 <USB_EP0StartXfer+0x2b0>)
 8008c30:	4013      	ands	r3, r2
 8008c32:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	699a      	ldr	r2, [r3, #24]
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d903      	bls.n	8008c48 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	68da      	ldr	r2, [r3, #12]
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	015a      	lsls	r2, r3, #5
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	4413      	add	r3, r2
 8008c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c54:	691b      	ldr	r3, [r3, #16]
 8008c56:	693a      	ldr	r2, [r7, #16]
 8008c58:	0151      	lsls	r1, r2, #5
 8008c5a:	697a      	ldr	r2, [r7, #20]
 8008c5c:	440a      	add	r2, r1
 8008c5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	015a      	lsls	r2, r3, #5
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	4413      	add	r3, r2
 8008c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c74:	691a      	ldr	r2, [r3, #16]
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	699b      	ldr	r3, [r3, #24]
 8008c7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c7e:	6939      	ldr	r1, [r7, #16]
 8008c80:	0148      	lsls	r0, r1, #5
 8008c82:	6979      	ldr	r1, [r7, #20]
 8008c84:	4401      	add	r1, r0
 8008c86:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008c8e:	79fb      	ldrb	r3, [r7, #7]
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d11e      	bne.n	8008cd2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	695b      	ldr	r3, [r3, #20]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d009      	beq.n	8008cb0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	015a      	lsls	r2, r3, #5
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ca8:	461a      	mov	r2, r3
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	695b      	ldr	r3, [r3, #20]
 8008cae:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	015a      	lsls	r2, r3, #5
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	693a      	ldr	r2, [r7, #16]
 8008cc0:	0151      	lsls	r1, r2, #5
 8008cc2:	697a      	ldr	r2, [r7, #20]
 8008cc4:	440a      	add	r2, r1
 8008cc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008cce:	6013      	str	r3, [r2, #0]
 8008cd0:	e097      	b.n	8008e02 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	015a      	lsls	r2, r3, #5
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	4413      	add	r3, r2
 8008cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	693a      	ldr	r2, [r7, #16]
 8008ce2:	0151      	lsls	r1, r2, #5
 8008ce4:	697a      	ldr	r2, [r7, #20]
 8008ce6:	440a      	add	r2, r1
 8008ce8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008cf0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	699b      	ldr	r3, [r3, #24]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	f000 8083 	beq.w	8008e02 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	f003 030f 	and.w	r3, r3, #15
 8008d0c:	2101      	movs	r1, #1
 8008d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8008d12:	6979      	ldr	r1, [r7, #20]
 8008d14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	634b      	str	r3, [r1, #52]	; 0x34
 8008d1c:	e071      	b.n	8008e02 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	015a      	lsls	r2, r3, #5
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	4413      	add	r3, r2
 8008d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d2a:	691a      	ldr	r2, [r3, #16]
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	0159      	lsls	r1, r3, #5
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	440b      	add	r3, r1
 8008d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d38:	4619      	mov	r1, r3
 8008d3a:	4b36      	ldr	r3, [pc, #216]	; (8008e14 <USB_EP0StartXfer+0x2b4>)
 8008d3c:	4013      	ands	r3, r2
 8008d3e:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	015a      	lsls	r2, r3, #5
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	4413      	add	r3, r2
 8008d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d4c:	691a      	ldr	r2, [r3, #16]
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	0159      	lsls	r1, r3, #5
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	440b      	add	r3, r1
 8008d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	4b2c      	ldr	r3, [pc, #176]	; (8008e10 <USB_EP0StartXfer+0x2b0>)
 8008d5e:	4013      	ands	r3, r2
 8008d60:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	699b      	ldr	r3, [r3, #24]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d003      	beq.n	8008d72 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	68da      	ldr	r2, [r3, #12]
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	68da      	ldr	r2, [r3, #12]
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	015a      	lsls	r2, r3, #5
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	4413      	add	r3, r2
 8008d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d86:	691b      	ldr	r3, [r3, #16]
 8008d88:	693a      	ldr	r2, [r7, #16]
 8008d8a:	0151      	lsls	r1, r2, #5
 8008d8c:	697a      	ldr	r2, [r7, #20]
 8008d8e:	440a      	add	r2, r1
 8008d90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008d98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	015a      	lsls	r2, r3, #5
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	4413      	add	r3, r2
 8008da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008da6:	691a      	ldr	r2, [r3, #16]
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	69db      	ldr	r3, [r3, #28]
 8008dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008db0:	6939      	ldr	r1, [r7, #16]
 8008db2:	0148      	lsls	r0, r1, #5
 8008db4:	6979      	ldr	r1, [r7, #20]
 8008db6:	4401      	add	r1, r0
 8008db8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008dc0:	79fb      	ldrb	r3, [r7, #7]
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d10d      	bne.n	8008de2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	691b      	ldr	r3, [r3, #16]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d009      	beq.n	8008de2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	6919      	ldr	r1, [r3, #16]
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	015a      	lsls	r2, r3, #5
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	4413      	add	r3, r2
 8008dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dde:	460a      	mov	r2, r1
 8008de0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	015a      	lsls	r2, r3, #5
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	4413      	add	r3, r2
 8008dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	693a      	ldr	r2, [r7, #16]
 8008df2:	0151      	lsls	r1, r2, #5
 8008df4:	697a      	ldr	r2, [r7, #20]
 8008df6:	440a      	add	r2, r1
 8008df8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dfc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008e00:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	371c      	adds	r7, #28
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr
 8008e10:	e007ffff 	.word	0xe007ffff
 8008e14:	fff80000 	.word	0xfff80000

08008e18 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b087      	sub	sp, #28
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008e22:	2300      	movs	r3, #0
 8008e24:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008e26:	2300      	movs	r3, #0
 8008e28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	785b      	ldrb	r3, [r3, #1]
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d14a      	bne.n	8008ecc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	015a      	lsls	r2, r3, #5
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	4413      	add	r3, r2
 8008e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e4e:	f040 8086 	bne.w	8008f5e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	015a      	lsls	r2, r3, #5
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	4413      	add	r3, r2
 8008e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	683a      	ldr	r2, [r7, #0]
 8008e64:	7812      	ldrb	r2, [r2, #0]
 8008e66:	0151      	lsls	r1, r2, #5
 8008e68:	693a      	ldr	r2, [r7, #16]
 8008e6a:	440a      	add	r2, r1
 8008e6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008e74:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	015a      	lsls	r2, r3, #5
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	4413      	add	r3, r2
 8008e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	683a      	ldr	r2, [r7, #0]
 8008e88:	7812      	ldrb	r2, [r2, #0]
 8008e8a:	0151      	lsls	r1, r2, #5
 8008e8c:	693a      	ldr	r2, [r7, #16]
 8008e8e:	440a      	add	r2, r1
 8008e90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e98:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f242 7210 	movw	r2, #10000	; 0x2710
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d902      	bls.n	8008eb0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	75fb      	strb	r3, [r7, #23]
          break;
 8008eae:	e056      	b.n	8008f5e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	015a      	lsls	r2, r3, #5
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	4413      	add	r3, r2
 8008eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ec4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ec8:	d0e7      	beq.n	8008e9a <USB_EPStopXfer+0x82>
 8008eca:	e048      	b.n	8008f5e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	015a      	lsls	r2, r3, #5
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	4413      	add	r3, r2
 8008ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ee0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ee4:	d13b      	bne.n	8008f5e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	015a      	lsls	r2, r3, #5
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	4413      	add	r3, r2
 8008ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	683a      	ldr	r2, [r7, #0]
 8008ef8:	7812      	ldrb	r2, [r2, #0]
 8008efa:	0151      	lsls	r1, r2, #5
 8008efc:	693a      	ldr	r2, [r7, #16]
 8008efe:	440a      	add	r2, r1
 8008f00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008f08:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	015a      	lsls	r2, r3, #5
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	4413      	add	r3, r2
 8008f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	683a      	ldr	r2, [r7, #0]
 8008f1c:	7812      	ldrb	r2, [r2, #0]
 8008f1e:	0151      	lsls	r1, r2, #5
 8008f20:	693a      	ldr	r2, [r7, #16]
 8008f22:	440a      	add	r2, r1
 8008f24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f2c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	3301      	adds	r3, #1
 8008f32:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f242 7210 	movw	r2, #10000	; 0x2710
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d902      	bls.n	8008f44 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	75fb      	strb	r3, [r7, #23]
          break;
 8008f42:	e00c      	b.n	8008f5e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	015a      	lsls	r2, r3, #5
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f5c:	d0e7      	beq.n	8008f2e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	371c      	adds	r7, #28
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b089      	sub	sp, #36	; 0x24
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	4611      	mov	r1, r2
 8008f78:	461a      	mov	r2, r3
 8008f7a:	460b      	mov	r3, r1
 8008f7c:	71fb      	strb	r3, [r7, #7]
 8008f7e:	4613      	mov	r3, r2
 8008f80:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008f8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d123      	bne.n	8008fda <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008f92:	88bb      	ldrh	r3, [r7, #4]
 8008f94:	3303      	adds	r3, #3
 8008f96:	089b      	lsrs	r3, r3, #2
 8008f98:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	61bb      	str	r3, [r7, #24]
 8008f9e:	e018      	b.n	8008fd2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008fa0:	79fb      	ldrb	r3, [r7, #7]
 8008fa2:	031a      	lsls	r2, r3, #12
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	4413      	add	r3, r2
 8008fa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fac:	461a      	mov	r2, r3
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008fb4:	69fb      	ldr	r3, [r7, #28]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008fc0:	69fb      	ldr	r3, [r7, #28]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	61bb      	str	r3, [r7, #24]
 8008fd2:	69ba      	ldr	r2, [r7, #24]
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d3e2      	bcc.n	8008fa0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3724      	adds	r7, #36	; 0x24
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr

08008fe8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b08b      	sub	sp, #44	; 0x2c
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008ffe:	88fb      	ldrh	r3, [r7, #6]
 8009000:	089b      	lsrs	r3, r3, #2
 8009002:	b29b      	uxth	r3, r3
 8009004:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009006:	88fb      	ldrh	r3, [r7, #6]
 8009008:	f003 0303 	and.w	r3, r3, #3
 800900c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800900e:	2300      	movs	r3, #0
 8009010:	623b      	str	r3, [r7, #32]
 8009012:	e014      	b.n	800903e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009014:	69bb      	ldr	r3, [r7, #24]
 8009016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009022:	3301      	adds	r3, #1
 8009024:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009028:	3301      	adds	r3, #1
 800902a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800902c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902e:	3301      	adds	r3, #1
 8009030:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009034:	3301      	adds	r3, #1
 8009036:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009038:	6a3b      	ldr	r3, [r7, #32]
 800903a:	3301      	adds	r3, #1
 800903c:	623b      	str	r3, [r7, #32]
 800903e:	6a3a      	ldr	r2, [r7, #32]
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	429a      	cmp	r2, r3
 8009044:	d3e6      	bcc.n	8009014 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009046:	8bfb      	ldrh	r3, [r7, #30]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d01e      	beq.n	800908a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800904c:	2300      	movs	r3, #0
 800904e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009056:	461a      	mov	r2, r3
 8009058:	f107 0310 	add.w	r3, r7, #16
 800905c:	6812      	ldr	r2, [r2, #0]
 800905e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009060:	693a      	ldr	r2, [r7, #16]
 8009062:	6a3b      	ldr	r3, [r7, #32]
 8009064:	b2db      	uxtb	r3, r3
 8009066:	00db      	lsls	r3, r3, #3
 8009068:	fa22 f303 	lsr.w	r3, r2, r3
 800906c:	b2da      	uxtb	r2, r3
 800906e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009070:	701a      	strb	r2, [r3, #0]
      i++;
 8009072:	6a3b      	ldr	r3, [r7, #32]
 8009074:	3301      	adds	r3, #1
 8009076:	623b      	str	r3, [r7, #32]
      pDest++;
 8009078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907a:	3301      	adds	r3, #1
 800907c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800907e:	8bfb      	ldrh	r3, [r7, #30]
 8009080:	3b01      	subs	r3, #1
 8009082:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009084:	8bfb      	ldrh	r3, [r7, #30]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d1ea      	bne.n	8009060 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800908a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800908c:	4618      	mov	r0, r3
 800908e:	372c      	adds	r7, #44	; 0x2c
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009098:	b480      	push	{r7}
 800909a:	b085      	sub	sp, #20
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	785b      	ldrb	r3, [r3, #1]
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d12c      	bne.n	800910e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	015a      	lsls	r2, r3, #5
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	4413      	add	r3, r2
 80090bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	db12      	blt.n	80090ec <USB_EPSetStall+0x54>
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d00f      	beq.n	80090ec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	015a      	lsls	r2, r3, #5
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	4413      	add	r3, r2
 80090d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	68ba      	ldr	r2, [r7, #8]
 80090dc:	0151      	lsls	r1, r2, #5
 80090de:	68fa      	ldr	r2, [r7, #12]
 80090e0:	440a      	add	r2, r1
 80090e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80090ea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	015a      	lsls	r2, r3, #5
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	4413      	add	r3, r2
 80090f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	68ba      	ldr	r2, [r7, #8]
 80090fc:	0151      	lsls	r1, r2, #5
 80090fe:	68fa      	ldr	r2, [r7, #12]
 8009100:	440a      	add	r2, r1
 8009102:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009106:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800910a:	6013      	str	r3, [r2, #0]
 800910c:	e02b      	b.n	8009166 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	015a      	lsls	r2, r3, #5
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	4413      	add	r3, r2
 8009116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	2b00      	cmp	r3, #0
 800911e:	db12      	blt.n	8009146 <USB_EPSetStall+0xae>
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d00f      	beq.n	8009146 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	015a      	lsls	r2, r3, #5
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	4413      	add	r3, r2
 800912e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	68ba      	ldr	r2, [r7, #8]
 8009136:	0151      	lsls	r1, r2, #5
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	440a      	add	r2, r1
 800913c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009140:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009144:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	015a      	lsls	r2, r3, #5
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	4413      	add	r3, r2
 800914e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	68ba      	ldr	r2, [r7, #8]
 8009156:	0151      	lsls	r1, r2, #5
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	440a      	add	r2, r1
 800915c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009160:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009164:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009166:	2300      	movs	r3, #0
}
 8009168:	4618      	mov	r0, r3
 800916a:	3714      	adds	r7, #20
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009174:	b480      	push	{r7}
 8009176:	b085      	sub	sp, #20
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	785b      	ldrb	r3, [r3, #1]
 800918c:	2b01      	cmp	r3, #1
 800918e:	d128      	bne.n	80091e2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	015a      	lsls	r2, r3, #5
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	4413      	add	r3, r2
 8009198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	68ba      	ldr	r2, [r7, #8]
 80091a0:	0151      	lsls	r1, r2, #5
 80091a2:	68fa      	ldr	r2, [r7, #12]
 80091a4:	440a      	add	r2, r1
 80091a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80091ae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	791b      	ldrb	r3, [r3, #4]
 80091b4:	2b03      	cmp	r3, #3
 80091b6:	d003      	beq.n	80091c0 <USB_EPClearStall+0x4c>
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	791b      	ldrb	r3, [r3, #4]
 80091bc:	2b02      	cmp	r3, #2
 80091be:	d138      	bne.n	8009232 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	015a      	lsls	r2, r3, #5
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	4413      	add	r3, r2
 80091c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	68ba      	ldr	r2, [r7, #8]
 80091d0:	0151      	lsls	r1, r2, #5
 80091d2:	68fa      	ldr	r2, [r7, #12]
 80091d4:	440a      	add	r2, r1
 80091d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091de:	6013      	str	r3, [r2, #0]
 80091e0:	e027      	b.n	8009232 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	015a      	lsls	r2, r3, #5
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	4413      	add	r3, r2
 80091ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	68ba      	ldr	r2, [r7, #8]
 80091f2:	0151      	lsls	r1, r2, #5
 80091f4:	68fa      	ldr	r2, [r7, #12]
 80091f6:	440a      	add	r2, r1
 80091f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009200:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	791b      	ldrb	r3, [r3, #4]
 8009206:	2b03      	cmp	r3, #3
 8009208:	d003      	beq.n	8009212 <USB_EPClearStall+0x9e>
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	791b      	ldrb	r3, [r3, #4]
 800920e:	2b02      	cmp	r3, #2
 8009210:	d10f      	bne.n	8009232 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	015a      	lsls	r2, r3, #5
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	4413      	add	r3, r2
 800921a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	68ba      	ldr	r2, [r7, #8]
 8009222:	0151      	lsls	r1, r2, #5
 8009224:	68fa      	ldr	r2, [r7, #12]
 8009226:	440a      	add	r2, r1
 8009228:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800922c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009230:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009232:	2300      	movs	r3, #0
}
 8009234:	4618      	mov	r0, r3
 8009236:	3714      	adds	r7, #20
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009240:	b480      	push	{r7}
 8009242:	b085      	sub	sp, #20
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	460b      	mov	r3, r1
 800924a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	68fa      	ldr	r2, [r7, #12]
 800925a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800925e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009262:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	78fb      	ldrb	r3, [r7, #3]
 800926e:	011b      	lsls	r3, r3, #4
 8009270:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009274:	68f9      	ldr	r1, [r7, #12]
 8009276:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800927a:	4313      	orrs	r3, r2
 800927c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800927e:	2300      	movs	r3, #0
}
 8009280:	4618      	mov	r0, r3
 8009282:	3714      	adds	r7, #20
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	68fa      	ldr	r2, [r7, #12]
 80092a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80092a6:	f023 0303 	bic.w	r3, r3, #3
 80092aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	68fa      	ldr	r2, [r7, #12]
 80092b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092ba:	f023 0302 	bic.w	r3, r3, #2
 80092be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80092c0:	2300      	movs	r3, #0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3714      	adds	r7, #20
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr

080092ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80092ce:	b480      	push	{r7}
 80092d0:	b085      	sub	sp, #20
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	68fa      	ldr	r2, [r7, #12]
 80092e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80092e8:	f023 0303 	bic.w	r3, r3, #3
 80092ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	68fa      	ldr	r2, [r7, #12]
 80092f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092fc:	f043 0302 	orr.w	r3, r3, #2
 8009300:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009302:	2300      	movs	r3, #0
}
 8009304:	4618      	mov	r0, r3
 8009306:	3714      	adds	r7, #20
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009310:	b480      	push	{r7}
 8009312:	b085      	sub	sp, #20
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	695b      	ldr	r3, [r3, #20]
 800931c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	699b      	ldr	r3, [r3, #24]
 8009322:	68fa      	ldr	r2, [r7, #12]
 8009324:	4013      	ands	r3, r2
 8009326:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009328:	68fb      	ldr	r3, [r7, #12]
}
 800932a:	4618      	mov	r0, r3
 800932c:	3714      	adds	r7, #20
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr

08009336 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009336:	b480      	push	{r7}
 8009338:	b085      	sub	sp, #20
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009348:	699b      	ldr	r3, [r3, #24]
 800934a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009352:	69db      	ldr	r3, [r3, #28]
 8009354:	68ba      	ldr	r2, [r7, #8]
 8009356:	4013      	ands	r3, r2
 8009358:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	0c1b      	lsrs	r3, r3, #16
}
 800935e:	4618      	mov	r0, r3
 8009360:	3714      	adds	r7, #20
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr

0800936a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800936a:	b480      	push	{r7}
 800936c:	b085      	sub	sp, #20
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800937c:	699b      	ldr	r3, [r3, #24]
 800937e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009386:	69db      	ldr	r3, [r3, #28]
 8009388:	68ba      	ldr	r2, [r7, #8]
 800938a:	4013      	ands	r3, r2
 800938c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	b29b      	uxth	r3, r3
}
 8009392:	4618      	mov	r0, r3
 8009394:	3714      	adds	r7, #20
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr

0800939e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800939e:	b480      	push	{r7}
 80093a0:	b085      	sub	sp, #20
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
 80093a6:	460b      	mov	r3, r1
 80093a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80093ae:	78fb      	ldrb	r3, [r7, #3]
 80093b0:	015a      	lsls	r2, r3, #5
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	4413      	add	r3, r2
 80093b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093c4:	695b      	ldr	r3, [r3, #20]
 80093c6:	68ba      	ldr	r2, [r7, #8]
 80093c8:	4013      	ands	r3, r2
 80093ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80093cc:	68bb      	ldr	r3, [r7, #8]
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3714      	adds	r7, #20
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr

080093da <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80093da:	b480      	push	{r7}
 80093dc:	b087      	sub	sp, #28
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
 80093e2:	460b      	mov	r3, r1
 80093e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093f0:	691b      	ldr	r3, [r3, #16]
 80093f2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093fc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80093fe:	78fb      	ldrb	r3, [r7, #3]
 8009400:	f003 030f 	and.w	r3, r3, #15
 8009404:	68fa      	ldr	r2, [r7, #12]
 8009406:	fa22 f303 	lsr.w	r3, r2, r3
 800940a:	01db      	lsls	r3, r3, #7
 800940c:	b2db      	uxtb	r3, r3
 800940e:	693a      	ldr	r2, [r7, #16]
 8009410:	4313      	orrs	r3, r2
 8009412:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009414:	78fb      	ldrb	r3, [r7, #3]
 8009416:	015a      	lsls	r2, r3, #5
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	4413      	add	r3, r2
 800941c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	693a      	ldr	r2, [r7, #16]
 8009424:	4013      	ands	r3, r2
 8009426:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009428:	68bb      	ldr	r3, [r7, #8]
}
 800942a:	4618      	mov	r0, r3
 800942c:	371c      	adds	r7, #28
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr

08009436 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009436:	b480      	push	{r7}
 8009438:	b083      	sub	sp, #12
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	695b      	ldr	r3, [r3, #20]
 8009442:	f003 0301 	and.w	r3, r3, #1
}
 8009446:	4618      	mov	r0, r3
 8009448:	370c      	adds	r7, #12
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr
	...

08009454 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009454:	b480      	push	{r7}
 8009456:	b085      	sub	sp, #20
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009466:	681a      	ldr	r2, [r3, #0]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800946e:	4619      	mov	r1, r3
 8009470:	4b09      	ldr	r3, [pc, #36]	; (8009498 <USB_ActivateSetup+0x44>)
 8009472:	4013      	ands	r3, r2
 8009474:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	68fa      	ldr	r2, [r7, #12]
 8009480:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009488:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3714      	adds	r7, #20
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr
 8009498:	fffff800 	.word	0xfffff800

0800949c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800949c:	b480      	push	{r7}
 800949e:	b087      	sub	sp, #28
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	460b      	mov	r3, r1
 80094a6:	607a      	str	r2, [r7, #4]
 80094a8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	333c      	adds	r3, #60	; 0x3c
 80094b2:	3304      	adds	r3, #4
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	4a26      	ldr	r2, [pc, #152]	; (8009554 <USB_EP0_OutStart+0xb8>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d90a      	bls.n	80094d6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094d0:	d101      	bne.n	80094d6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80094d2:	2300      	movs	r3, #0
 80094d4:	e037      	b.n	8009546 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094dc:	461a      	mov	r2, r3
 80094de:	2300      	movs	r3, #0
 80094e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094e8:	691b      	ldr	r3, [r3, #16]
 80094ea:	697a      	ldr	r2, [r7, #20]
 80094ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80094f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094fc:	691b      	ldr	r3, [r3, #16]
 80094fe:	697a      	ldr	r2, [r7, #20]
 8009500:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009504:	f043 0318 	orr.w	r3, r3, #24
 8009508:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009510:	691b      	ldr	r3, [r3, #16]
 8009512:	697a      	ldr	r2, [r7, #20]
 8009514:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009518:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800951c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800951e:	7afb      	ldrb	r3, [r7, #11]
 8009520:	2b01      	cmp	r3, #1
 8009522:	d10f      	bne.n	8009544 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800952a:	461a      	mov	r2, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	697a      	ldr	r2, [r7, #20]
 800953a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800953e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009542:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009544:	2300      	movs	r3, #0
}
 8009546:	4618      	mov	r0, r3
 8009548:	371c      	adds	r7, #28
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr
 8009552:	bf00      	nop
 8009554:	4f54300a 	.word	0x4f54300a

08009558 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009558:	b480      	push	{r7}
 800955a:	b085      	sub	sp, #20
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009560:	2300      	movs	r3, #0
 8009562:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	3301      	adds	r3, #1
 8009568:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	4a13      	ldr	r2, [pc, #76]	; (80095bc <USB_CoreReset+0x64>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d901      	bls.n	8009576 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009572:	2303      	movs	r3, #3
 8009574:	e01b      	b.n	80095ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	691b      	ldr	r3, [r3, #16]
 800957a:	2b00      	cmp	r3, #0
 800957c:	daf2      	bge.n	8009564 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800957e:	2300      	movs	r3, #0
 8009580:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	691b      	ldr	r3, [r3, #16]
 8009586:	f043 0201 	orr.w	r2, r3, #1
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	3301      	adds	r3, #1
 8009592:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	4a09      	ldr	r2, [pc, #36]	; (80095bc <USB_CoreReset+0x64>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d901      	bls.n	80095a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800959c:	2303      	movs	r3, #3
 800959e:	e006      	b.n	80095ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	691b      	ldr	r3, [r3, #16]
 80095a4:	f003 0301 	and.w	r3, r3, #1
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d0f0      	beq.n	800958e <USB_CoreReset+0x36>

  return HAL_OK;
 80095ac:	2300      	movs	r3, #0
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3714      	adds	r7, #20
 80095b2:	46bd      	mov	sp, r7
 80095b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b8:	4770      	bx	lr
 80095ba:	bf00      	nop
 80095bc:	00030d40 	.word	0x00030d40

080095c0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80095c4:	4904      	ldr	r1, [pc, #16]	; (80095d8 <MX_FATFS_Init+0x18>)
 80095c6:	4805      	ldr	r0, [pc, #20]	; (80095dc <MX_FATFS_Init+0x1c>)
 80095c8:	f005 fa82 	bl	800ead0 <FATFS_LinkDriver>
 80095cc:	4603      	mov	r3, r0
 80095ce:	461a      	mov	r2, r3
 80095d0:	4b03      	ldr	r3, [pc, #12]	; (80095e0 <MX_FATFS_Init+0x20>)
 80095d2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80095d4:	bf00      	nop
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	20002e40 	.word	0x20002e40
 80095dc:	08010db0 	.word	0x08010db0
 80095e0:	20002e3c 	.word	0x20002e3c

080095e4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80095e4:	b480      	push	{r7}
 80095e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80095e8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80095fa:	2300      	movs	r3, #0
 80095fc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80095fe:	f000 f888 	bl	8009712 <BSP_SD_IsDetected>
 8009602:	4603      	mov	r3, r0
 8009604:	2b01      	cmp	r3, #1
 8009606:	d001      	beq.n	800960c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8009608:	2302      	movs	r3, #2
 800960a:	e005      	b.n	8009618 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800960c:	4804      	ldr	r0, [pc, #16]	; (8009620 <BSP_SD_Init+0x2c>)
 800960e:	f7fc f845 	bl	800569c <HAL_SD_Init>
 8009612:	4603      	mov	r3, r0
 8009614:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8009616:	79fb      	ldrb	r3, [r7, #7]
}
 8009618:	4618      	mov	r0, r3
 800961a:	3708      	adds	r7, #8
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}
 8009620:	200001ac 	.word	0x200001ac

08009624 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b086      	sub	sp, #24
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009630:	2300      	movs	r3, #0
 8009632:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	68ba      	ldr	r2, [r7, #8]
 8009638:	68f9      	ldr	r1, [r7, #12]
 800963a:	4806      	ldr	r0, [pc, #24]	; (8009654 <BSP_SD_ReadBlocks_DMA+0x30>)
 800963c:	f7fc f8e6 	bl	800580c <HAL_SD_ReadBlocks_DMA>
 8009640:	4603      	mov	r3, r0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d001      	beq.n	800964a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009646:	2301      	movs	r3, #1
 8009648:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800964a:	7dfb      	ldrb	r3, [r7, #23]
}
 800964c:	4618      	mov	r0, r3
 800964e:	3718      	adds	r7, #24
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}
 8009654:	200001ac 	.word	0x200001ac

08009658 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b086      	sub	sp, #24
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009664:	2300      	movs	r3, #0
 8009666:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	68ba      	ldr	r2, [r7, #8]
 800966c:	68f9      	ldr	r1, [r7, #12]
 800966e:	4806      	ldr	r0, [pc, #24]	; (8009688 <BSP_SD_WriteBlocks_DMA+0x30>)
 8009670:	f7fc f9ae 	bl	80059d0 <HAL_SD_WriteBlocks_DMA>
 8009674:	4603      	mov	r3, r0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d001      	beq.n	800967e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800967e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009680:	4618      	mov	r0, r3
 8009682:	3718      	adds	r7, #24
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}
 8009688:	200001ac 	.word	0x200001ac

0800968c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009690:	4805      	ldr	r0, [pc, #20]	; (80096a8 <BSP_SD_GetCardState+0x1c>)
 8009692:	f7fc fdd3 	bl	800623c <HAL_SD_GetCardState>
 8009696:	4603      	mov	r3, r0
 8009698:	2b04      	cmp	r3, #4
 800969a:	bf14      	ite	ne
 800969c:	2301      	movne	r3, #1
 800969e:	2300      	moveq	r3, #0
 80096a0:	b2db      	uxtb	r3, r3
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	200001ac 	.word	0x200001ac

080096ac <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80096b4:	6879      	ldr	r1, [r7, #4]
 80096b6:	4803      	ldr	r0, [pc, #12]	; (80096c4 <BSP_SD_GetCardInfo+0x18>)
 80096b8:	f7fc fd94 	bl	80061e4 <HAL_SD_GetCardInfo>
}
 80096bc:	bf00      	nop
 80096be:	3708      	adds	r7, #8
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	200001ac 	.word	0x200001ac

080096c8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80096d0:	f000 f818 	bl	8009704 <BSP_SD_AbortCallback>
}
 80096d4:	bf00      	nop
 80096d6:	3708      	adds	r7, #8
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80096e4:	f000 f9a8 	bl	8009a38 <BSP_SD_WriteCpltCallback>
}
 80096e8:	bf00      	nop
 80096ea:	3708      	adds	r7, #8
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80096f8:	f000 f9aa 	bl	8009a50 <BSP_SD_ReadCpltCallback>
}
 80096fc:	bf00      	nop
 80096fe:	3708      	adds	r7, #8
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8009704:	b480      	push	{r7}
 8009706:	af00      	add	r7, sp, #0

}
 8009708:	bf00      	nop
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr

08009712 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009712:	b580      	push	{r7, lr}
 8009714:	b082      	sub	sp, #8
 8009716:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009718:	2301      	movs	r3, #1
 800971a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800971c:	f000 f80c 	bl	8009738 <BSP_PlatformIsDetected>
 8009720:	4603      	mov	r3, r0
 8009722:	2b00      	cmp	r3, #0
 8009724:	d101      	bne.n	800972a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009726:	2300      	movs	r3, #0
 8009728:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800972a:	79fb      	ldrb	r3, [r7, #7]
 800972c:	b2db      	uxtb	r3, r3
}
 800972e:	4618      	mov	r0, r3
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
	...

08009738 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800973e:	2301      	movs	r3, #1
 8009740:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 8009742:	2104      	movs	r1, #4
 8009744:	4806      	ldr	r0, [pc, #24]	; (8009760 <BSP_PlatformIsDetected+0x28>)
 8009746:	f7f9 fbc3 	bl	8002ed0 <HAL_GPIO_ReadPin>
 800974a:	4603      	mov	r3, r0
 800974c:	2b01      	cmp	r3, #1
 800974e:	d001      	beq.n	8009754 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8009750:	2300      	movs	r3, #0
 8009752:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8009754:	79fb      	ldrb	r3, [r7, #7]
}
 8009756:	4618      	mov	r0, r3
 8009758:	3708      	adds	r7, #8
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
 800975e:	bf00      	nop
 8009760:	40021800 	.word	0x40021800

08009764 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800976c:	f7f7 ff40 	bl	80015f0 <HAL_GetTick>
 8009770:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8009772:	e006      	b.n	8009782 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009774:	f7ff ff8a 	bl	800968c <BSP_SD_GetCardState>
 8009778:	4603      	mov	r3, r0
 800977a:	2b00      	cmp	r3, #0
 800977c:	d101      	bne.n	8009782 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800977e:	2300      	movs	r3, #0
 8009780:	e009      	b.n	8009796 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8009782:	f7f7 ff35 	bl	80015f0 <HAL_GetTick>
 8009786:	4602      	mov	r2, r0
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	1ad3      	subs	r3, r2, r3
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	429a      	cmp	r2, r3
 8009790:	d8f0      	bhi.n	8009774 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8009792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009796:	4618      	mov	r0, r3
 8009798:	3710      	adds	r7, #16
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
	...

080097a0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	4603      	mov	r3, r0
 80097a8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80097aa:	4b0b      	ldr	r3, [pc, #44]	; (80097d8 <SD_CheckStatus+0x38>)
 80097ac:	2201      	movs	r2, #1
 80097ae:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80097b0:	f7ff ff6c 	bl	800968c <BSP_SD_GetCardState>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d107      	bne.n	80097ca <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80097ba:	4b07      	ldr	r3, [pc, #28]	; (80097d8 <SD_CheckStatus+0x38>)
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	f023 0301 	bic.w	r3, r3, #1
 80097c4:	b2da      	uxtb	r2, r3
 80097c6:	4b04      	ldr	r3, [pc, #16]	; (80097d8 <SD_CheckStatus+0x38>)
 80097c8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80097ca:	4b03      	ldr	r3, [pc, #12]	; (80097d8 <SD_CheckStatus+0x38>)
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	b2db      	uxtb	r3, r3
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3708      	adds	r7, #8
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	20000009 	.word	0x20000009

080097dc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	4603      	mov	r3, r0
 80097e4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80097e6:	f7ff ff05 	bl	80095f4 <BSP_SD_Init>
 80097ea:	4603      	mov	r3, r0
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d107      	bne.n	8009800 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80097f0:	79fb      	ldrb	r3, [r7, #7]
 80097f2:	4618      	mov	r0, r3
 80097f4:	f7ff ffd4 	bl	80097a0 <SD_CheckStatus>
 80097f8:	4603      	mov	r3, r0
 80097fa:	461a      	mov	r2, r3
 80097fc:	4b04      	ldr	r3, [pc, #16]	; (8009810 <SD_initialize+0x34>)
 80097fe:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009800:	4b03      	ldr	r3, [pc, #12]	; (8009810 <SD_initialize+0x34>)
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	b2db      	uxtb	r3, r3
}
 8009806:	4618      	mov	r0, r3
 8009808:	3708      	adds	r7, #8
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	20000009 	.word	0x20000009

08009814 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	4603      	mov	r3, r0
 800981c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800981e:	79fb      	ldrb	r3, [r7, #7]
 8009820:	4618      	mov	r0, r3
 8009822:	f7ff ffbd 	bl	80097a0 <SD_CheckStatus>
 8009826:	4603      	mov	r3, r0
}
 8009828:	4618      	mov	r0, r3
 800982a:	3708      	adds	r7, #8
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b086      	sub	sp, #24
 8009834:	af00      	add	r7, sp, #0
 8009836:	60b9      	str	r1, [r7, #8]
 8009838:	607a      	str	r2, [r7, #4]
 800983a:	603b      	str	r3, [r7, #0]
 800983c:	4603      	mov	r3, r0
 800983e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009840:	2301      	movs	r3, #1
 8009842:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009844:	f247 5030 	movw	r0, #30000	; 0x7530
 8009848:	f7ff ff8c 	bl	8009764 <SD_CheckStatusWithTimeout>
 800984c:	4603      	mov	r3, r0
 800984e:	2b00      	cmp	r3, #0
 8009850:	da01      	bge.n	8009856 <SD_read+0x26>
  {
    return res;
 8009852:	7dfb      	ldrb	r3, [r7, #23]
 8009854:	e03b      	b.n	80098ce <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8009856:	683a      	ldr	r2, [r7, #0]
 8009858:	6879      	ldr	r1, [r7, #4]
 800985a:	68b8      	ldr	r0, [r7, #8]
 800985c:	f7ff fee2 	bl	8009624 <BSP_SD_ReadBlocks_DMA>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d132      	bne.n	80098cc <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8009866:	4b1c      	ldr	r3, [pc, #112]	; (80098d8 <SD_read+0xa8>)
 8009868:	2200      	movs	r2, #0
 800986a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800986c:	f7f7 fec0 	bl	80015f0 <HAL_GetTick>
 8009870:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009872:	bf00      	nop
 8009874:	4b18      	ldr	r3, [pc, #96]	; (80098d8 <SD_read+0xa8>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d108      	bne.n	800988e <SD_read+0x5e>
 800987c:	f7f7 feb8 	bl	80015f0 <HAL_GetTick>
 8009880:	4602      	mov	r2, r0
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	1ad3      	subs	r3, r2, r3
 8009886:	f247 522f 	movw	r2, #29999	; 0x752f
 800988a:	4293      	cmp	r3, r2
 800988c:	d9f2      	bls.n	8009874 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800988e:	4b12      	ldr	r3, [pc, #72]	; (80098d8 <SD_read+0xa8>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d102      	bne.n	800989c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8009896:	2301      	movs	r3, #1
 8009898:	75fb      	strb	r3, [r7, #23]
 800989a:	e017      	b.n	80098cc <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800989c:	4b0e      	ldr	r3, [pc, #56]	; (80098d8 <SD_read+0xa8>)
 800989e:	2200      	movs	r2, #0
 80098a0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80098a2:	f7f7 fea5 	bl	80015f0 <HAL_GetTick>
 80098a6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80098a8:	e007      	b.n	80098ba <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80098aa:	f7ff feef 	bl	800968c <BSP_SD_GetCardState>
 80098ae:	4603      	mov	r3, r0
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d102      	bne.n	80098ba <SD_read+0x8a>
          {
            res = RES_OK;
 80098b4:	2300      	movs	r3, #0
 80098b6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80098b8:	e008      	b.n	80098cc <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80098ba:	f7f7 fe99 	bl	80015f0 <HAL_GetTick>
 80098be:	4602      	mov	r2, r0
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	1ad3      	subs	r3, r2, r3
 80098c4:	f247 522f 	movw	r2, #29999	; 0x752f
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d9ee      	bls.n	80098aa <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80098cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3718      	adds	r7, #24
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	200032ac 	.word	0x200032ac

080098dc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b086      	sub	sp, #24
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	60b9      	str	r1, [r7, #8]
 80098e4:	607a      	str	r2, [r7, #4]
 80098e6:	603b      	str	r3, [r7, #0]
 80098e8:	4603      	mov	r3, r0
 80098ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80098ec:	2301      	movs	r3, #1
 80098ee:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80098f0:	4b24      	ldr	r3, [pc, #144]	; (8009984 <SD_write+0xa8>)
 80098f2:	2200      	movs	r2, #0
 80098f4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80098f6:	f247 5030 	movw	r0, #30000	; 0x7530
 80098fa:	f7ff ff33 	bl	8009764 <SD_CheckStatusWithTimeout>
 80098fe:	4603      	mov	r3, r0
 8009900:	2b00      	cmp	r3, #0
 8009902:	da01      	bge.n	8009908 <SD_write+0x2c>
  {
    return res;
 8009904:	7dfb      	ldrb	r3, [r7, #23]
 8009906:	e038      	b.n	800997a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009908:	683a      	ldr	r2, [r7, #0]
 800990a:	6879      	ldr	r1, [r7, #4]
 800990c:	68b8      	ldr	r0, [r7, #8]
 800990e:	f7ff fea3 	bl	8009658 <BSP_SD_WriteBlocks_DMA>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	d12f      	bne.n	8009978 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8009918:	f7f7 fe6a 	bl	80015f0 <HAL_GetTick>
 800991c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800991e:	bf00      	nop
 8009920:	4b18      	ldr	r3, [pc, #96]	; (8009984 <SD_write+0xa8>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d108      	bne.n	800993a <SD_write+0x5e>
 8009928:	f7f7 fe62 	bl	80015f0 <HAL_GetTick>
 800992c:	4602      	mov	r2, r0
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	1ad3      	subs	r3, r2, r3
 8009932:	f247 522f 	movw	r2, #29999	; 0x752f
 8009936:	4293      	cmp	r3, r2
 8009938:	d9f2      	bls.n	8009920 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800993a:	4b12      	ldr	r3, [pc, #72]	; (8009984 <SD_write+0xa8>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d102      	bne.n	8009948 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	75fb      	strb	r3, [r7, #23]
 8009946:	e017      	b.n	8009978 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8009948:	4b0e      	ldr	r3, [pc, #56]	; (8009984 <SD_write+0xa8>)
 800994a:	2200      	movs	r2, #0
 800994c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800994e:	f7f7 fe4f 	bl	80015f0 <HAL_GetTick>
 8009952:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009954:	e007      	b.n	8009966 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009956:	f7ff fe99 	bl	800968c <BSP_SD_GetCardState>
 800995a:	4603      	mov	r3, r0
 800995c:	2b00      	cmp	r3, #0
 800995e:	d102      	bne.n	8009966 <SD_write+0x8a>
          {
            res = RES_OK;
 8009960:	2300      	movs	r3, #0
 8009962:	75fb      	strb	r3, [r7, #23]
            break;
 8009964:	e008      	b.n	8009978 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009966:	f7f7 fe43 	bl	80015f0 <HAL_GetTick>
 800996a:	4602      	mov	r2, r0
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	1ad3      	subs	r3, r2, r3
 8009970:	f247 522f 	movw	r2, #29999	; 0x752f
 8009974:	4293      	cmp	r3, r2
 8009976:	d9ee      	bls.n	8009956 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8009978:	7dfb      	ldrb	r3, [r7, #23]
}
 800997a:	4618      	mov	r0, r3
 800997c:	3718      	adds	r7, #24
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	200032a8 	.word	0x200032a8

08009988 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b08c      	sub	sp, #48	; 0x30
 800998c:	af00      	add	r7, sp, #0
 800998e:	4603      	mov	r3, r0
 8009990:	603a      	str	r2, [r7, #0]
 8009992:	71fb      	strb	r3, [r7, #7]
 8009994:	460b      	mov	r3, r1
 8009996:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009998:	2301      	movs	r3, #1
 800999a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800999e:	4b25      	ldr	r3, [pc, #148]	; (8009a34 <SD_ioctl+0xac>)
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	b2db      	uxtb	r3, r3
 80099a4:	f003 0301 	and.w	r3, r3, #1
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d001      	beq.n	80099b0 <SD_ioctl+0x28>
 80099ac:	2303      	movs	r3, #3
 80099ae:	e03c      	b.n	8009a2a <SD_ioctl+0xa2>

  switch (cmd)
 80099b0:	79bb      	ldrb	r3, [r7, #6]
 80099b2:	2b03      	cmp	r3, #3
 80099b4:	d834      	bhi.n	8009a20 <SD_ioctl+0x98>
 80099b6:	a201      	add	r2, pc, #4	; (adr r2, 80099bc <SD_ioctl+0x34>)
 80099b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099bc:	080099cd 	.word	0x080099cd
 80099c0:	080099d5 	.word	0x080099d5
 80099c4:	080099ed 	.word	0x080099ed
 80099c8:	08009a07 	.word	0x08009a07
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80099cc:	2300      	movs	r3, #0
 80099ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80099d2:	e028      	b.n	8009a26 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80099d4:	f107 030c 	add.w	r3, r7, #12
 80099d8:	4618      	mov	r0, r3
 80099da:	f7ff fe67 	bl	80096ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80099de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80099e4:	2300      	movs	r3, #0
 80099e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80099ea:	e01c      	b.n	8009a26 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80099ec:	f107 030c 	add.w	r3, r7, #12
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7ff fe5b 	bl	80096ac <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80099f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f8:	b29a      	uxth	r2, r3
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80099fe:	2300      	movs	r3, #0
 8009a00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009a04:	e00f      	b.n	8009a26 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009a06:	f107 030c 	add.w	r3, r7, #12
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f7ff fe4e 	bl	80096ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a12:	0a5a      	lsrs	r2, r3, #9
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009a1e:	e002      	b.n	8009a26 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009a20:	2304      	movs	r3, #4
 8009a22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009a26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3730      	adds	r7, #48	; 0x30
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	20000009 	.word	0x20000009

08009a38 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8009a3c:	4b03      	ldr	r3, [pc, #12]	; (8009a4c <BSP_SD_WriteCpltCallback+0x14>)
 8009a3e:	2201      	movs	r2, #1
 8009a40:	601a      	str	r2, [r3, #0]
}
 8009a42:	bf00      	nop
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr
 8009a4c:	200032a8 	.word	0x200032a8

08009a50 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009a50:	b480      	push	{r7}
 8009a52:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8009a54:	4b03      	ldr	r3, [pc, #12]	; (8009a64 <BSP_SD_ReadCpltCallback+0x14>)
 8009a56:	2201      	movs	r2, #1
 8009a58:	601a      	str	r2, [r3, #0]
}
 8009a5a:	bf00      	nop
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr
 8009a64:	200032ac 	.word	0x200032ac

08009a68 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	460b      	mov	r3, r1
 8009a72:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009a74:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009a78:	f005 fe86 	bl	800f788 <malloc>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d109      	bne.n	8009a9a <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	32b0      	adds	r2, #176	; 0xb0
 8009a90:	2100      	movs	r1, #0
 8009a92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009a96:	2302      	movs	r3, #2
 8009a98:	e0d4      	b.n	8009c44 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009a9a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009a9e:	2100      	movs	r1, #0
 8009aa0:	68f8      	ldr	r0, [r7, #12]
 8009aa2:	f006 f8a0 	bl	800fbe6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	32b0      	adds	r2, #176	; 0xb0
 8009ab0:	68f9      	ldr	r1, [r7, #12]
 8009ab2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	32b0      	adds	r2, #176	; 0xb0
 8009ac0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	7c1b      	ldrb	r3, [r3, #16]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d138      	bne.n	8009b44 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009ad2:	4b5e      	ldr	r3, [pc, #376]	; (8009c4c <USBD_CDC_Init+0x1e4>)
 8009ad4:	7819      	ldrb	r1, [r3, #0]
 8009ad6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ada:	2202      	movs	r2, #2
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f005 fcb0 	bl	800f442 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009ae2:	4b5a      	ldr	r3, [pc, #360]	; (8009c4c <USBD_CDC_Init+0x1e4>)
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	f003 020f 	and.w	r2, r3, #15
 8009aea:	6879      	ldr	r1, [r7, #4]
 8009aec:	4613      	mov	r3, r2
 8009aee:	009b      	lsls	r3, r3, #2
 8009af0:	4413      	add	r3, r2
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	440b      	add	r3, r1
 8009af6:	3324      	adds	r3, #36	; 0x24
 8009af8:	2201      	movs	r2, #1
 8009afa:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009afc:	4b54      	ldr	r3, [pc, #336]	; (8009c50 <USBD_CDC_Init+0x1e8>)
 8009afe:	7819      	ldrb	r1, [r3, #0]
 8009b00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b04:	2202      	movs	r2, #2
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f005 fc9b 	bl	800f442 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009b0c:	4b50      	ldr	r3, [pc, #320]	; (8009c50 <USBD_CDC_Init+0x1e8>)
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	f003 020f 	and.w	r2, r3, #15
 8009b14:	6879      	ldr	r1, [r7, #4]
 8009b16:	4613      	mov	r3, r2
 8009b18:	009b      	lsls	r3, r3, #2
 8009b1a:	4413      	add	r3, r2
 8009b1c:	009b      	lsls	r3, r3, #2
 8009b1e:	440b      	add	r3, r1
 8009b20:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009b24:	2201      	movs	r2, #1
 8009b26:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009b28:	4b4a      	ldr	r3, [pc, #296]	; (8009c54 <USBD_CDC_Init+0x1ec>)
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	f003 020f 	and.w	r2, r3, #15
 8009b30:	6879      	ldr	r1, [r7, #4]
 8009b32:	4613      	mov	r3, r2
 8009b34:	009b      	lsls	r3, r3, #2
 8009b36:	4413      	add	r3, r2
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	440b      	add	r3, r1
 8009b3c:	3326      	adds	r3, #38	; 0x26
 8009b3e:	2210      	movs	r2, #16
 8009b40:	801a      	strh	r2, [r3, #0]
 8009b42:	e035      	b.n	8009bb0 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009b44:	4b41      	ldr	r3, [pc, #260]	; (8009c4c <USBD_CDC_Init+0x1e4>)
 8009b46:	7819      	ldrb	r1, [r3, #0]
 8009b48:	2340      	movs	r3, #64	; 0x40
 8009b4a:	2202      	movs	r2, #2
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f005 fc78 	bl	800f442 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009b52:	4b3e      	ldr	r3, [pc, #248]	; (8009c4c <USBD_CDC_Init+0x1e4>)
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	f003 020f 	and.w	r2, r3, #15
 8009b5a:	6879      	ldr	r1, [r7, #4]
 8009b5c:	4613      	mov	r3, r2
 8009b5e:	009b      	lsls	r3, r3, #2
 8009b60:	4413      	add	r3, r2
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	440b      	add	r3, r1
 8009b66:	3324      	adds	r3, #36	; 0x24
 8009b68:	2201      	movs	r2, #1
 8009b6a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009b6c:	4b38      	ldr	r3, [pc, #224]	; (8009c50 <USBD_CDC_Init+0x1e8>)
 8009b6e:	7819      	ldrb	r1, [r3, #0]
 8009b70:	2340      	movs	r3, #64	; 0x40
 8009b72:	2202      	movs	r2, #2
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f005 fc64 	bl	800f442 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009b7a:	4b35      	ldr	r3, [pc, #212]	; (8009c50 <USBD_CDC_Init+0x1e8>)
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	f003 020f 	and.w	r2, r3, #15
 8009b82:	6879      	ldr	r1, [r7, #4]
 8009b84:	4613      	mov	r3, r2
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	4413      	add	r3, r2
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	440b      	add	r3, r1
 8009b8e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009b92:	2201      	movs	r2, #1
 8009b94:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009b96:	4b2f      	ldr	r3, [pc, #188]	; (8009c54 <USBD_CDC_Init+0x1ec>)
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	f003 020f 	and.w	r2, r3, #15
 8009b9e:	6879      	ldr	r1, [r7, #4]
 8009ba0:	4613      	mov	r3, r2
 8009ba2:	009b      	lsls	r3, r3, #2
 8009ba4:	4413      	add	r3, r2
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	440b      	add	r3, r1
 8009baa:	3326      	adds	r3, #38	; 0x26
 8009bac:	2210      	movs	r2, #16
 8009bae:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009bb0:	4b28      	ldr	r3, [pc, #160]	; (8009c54 <USBD_CDC_Init+0x1ec>)
 8009bb2:	7819      	ldrb	r1, [r3, #0]
 8009bb4:	2308      	movs	r3, #8
 8009bb6:	2203      	movs	r2, #3
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f005 fc42 	bl	800f442 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009bbe:	4b25      	ldr	r3, [pc, #148]	; (8009c54 <USBD_CDC_Init+0x1ec>)
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	f003 020f 	and.w	r2, r3, #15
 8009bc6:	6879      	ldr	r1, [r7, #4]
 8009bc8:	4613      	mov	r3, r2
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	4413      	add	r3, r2
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	440b      	add	r3, r1
 8009bd2:	3324      	adds	r3, #36	; 0x24
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	33b0      	adds	r3, #176	; 0xb0
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	4413      	add	r3, r2
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d101      	bne.n	8009c12 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8009c0e:	2302      	movs	r3, #2
 8009c10:	e018      	b.n	8009c44 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	7c1b      	ldrb	r3, [r3, #16]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d10a      	bne.n	8009c30 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009c1a:	4b0d      	ldr	r3, [pc, #52]	; (8009c50 <USBD_CDC_Init+0x1e8>)
 8009c1c:	7819      	ldrb	r1, [r3, #0]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f005 fcf9 	bl	800f620 <USBD_LL_PrepareReceive>
 8009c2e:	e008      	b.n	8009c42 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009c30:	4b07      	ldr	r3, [pc, #28]	; (8009c50 <USBD_CDC_Init+0x1e8>)
 8009c32:	7819      	ldrb	r1, [r3, #0]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c3a:	2340      	movs	r3, #64	; 0x40
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f005 fcef 	bl	800f620 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009c42:	2300      	movs	r3, #0
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3710      	adds	r7, #16
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}
 8009c4c:	20000093 	.word	0x20000093
 8009c50:	20000094 	.word	0x20000094
 8009c54:	20000095 	.word	0x20000095

08009c58 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	460b      	mov	r3, r1
 8009c62:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009c64:	4b3a      	ldr	r3, [pc, #232]	; (8009d50 <USBD_CDC_DeInit+0xf8>)
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	4619      	mov	r1, r3
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f005 fc0f 	bl	800f48e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009c70:	4b37      	ldr	r3, [pc, #220]	; (8009d50 <USBD_CDC_DeInit+0xf8>)
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	f003 020f 	and.w	r2, r3, #15
 8009c78:	6879      	ldr	r1, [r7, #4]
 8009c7a:	4613      	mov	r3, r2
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	4413      	add	r3, r2
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	440b      	add	r3, r1
 8009c84:	3324      	adds	r3, #36	; 0x24
 8009c86:	2200      	movs	r2, #0
 8009c88:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009c8a:	4b32      	ldr	r3, [pc, #200]	; (8009d54 <USBD_CDC_DeInit+0xfc>)
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	4619      	mov	r1, r3
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f005 fbfc 	bl	800f48e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009c96:	4b2f      	ldr	r3, [pc, #188]	; (8009d54 <USBD_CDC_DeInit+0xfc>)
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	f003 020f 	and.w	r2, r3, #15
 8009c9e:	6879      	ldr	r1, [r7, #4]
 8009ca0:	4613      	mov	r3, r2
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	4413      	add	r3, r2
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	440b      	add	r3, r1
 8009caa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009cae:	2200      	movs	r2, #0
 8009cb0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009cb2:	4b29      	ldr	r3, [pc, #164]	; (8009d58 <USBD_CDC_DeInit+0x100>)
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f005 fbe8 	bl	800f48e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009cbe:	4b26      	ldr	r3, [pc, #152]	; (8009d58 <USBD_CDC_DeInit+0x100>)
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	f003 020f 	and.w	r2, r3, #15
 8009cc6:	6879      	ldr	r1, [r7, #4]
 8009cc8:	4613      	mov	r3, r2
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	4413      	add	r3, r2
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	440b      	add	r3, r1
 8009cd2:	3324      	adds	r3, #36	; 0x24
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009cd8:	4b1f      	ldr	r3, [pc, #124]	; (8009d58 <USBD_CDC_DeInit+0x100>)
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	f003 020f 	and.w	r2, r3, #15
 8009ce0:	6879      	ldr	r1, [r7, #4]
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	4413      	add	r3, r2
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	440b      	add	r3, r1
 8009cec:	3326      	adds	r3, #38	; 0x26
 8009cee:	2200      	movs	r2, #0
 8009cf0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	32b0      	adds	r2, #176	; 0xb0
 8009cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d01f      	beq.n	8009d44 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	33b0      	adds	r3, #176	; 0xb0
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	4413      	add	r3, r2
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	32b0      	adds	r2, #176	; 0xb0
 8009d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d26:	4618      	mov	r0, r3
 8009d28:	f005 fd36 	bl	800f798 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	32b0      	adds	r2, #176	; 0xb0
 8009d36:	2100      	movs	r1, #0
 8009d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009d44:	2300      	movs	r3, #0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3708      	adds	r7, #8
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	20000093 	.word	0x20000093
 8009d54:	20000094 	.word	0x20000094
 8009d58:	20000095 	.word	0x20000095

08009d5c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b086      	sub	sp, #24
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	32b0      	adds	r2, #176	; 0xb0
 8009d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d74:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009d76:	2300      	movs	r3, #0
 8009d78:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d101      	bne.n	8009d8c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009d88:	2303      	movs	r3, #3
 8009d8a:	e0bf      	b.n	8009f0c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d050      	beq.n	8009e3a <USBD_CDC_Setup+0xde>
 8009d98:	2b20      	cmp	r3, #32
 8009d9a:	f040 80af 	bne.w	8009efc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	88db      	ldrh	r3, [r3, #6]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d03a      	beq.n	8009e1c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	b25b      	sxtb	r3, r3
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	da1b      	bge.n	8009de8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	33b0      	adds	r3, #176	; 0xb0
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	4413      	add	r3, r2
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	689b      	ldr	r3, [r3, #8]
 8009dc2:	683a      	ldr	r2, [r7, #0]
 8009dc4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009dc6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009dc8:	683a      	ldr	r2, [r7, #0]
 8009dca:	88d2      	ldrh	r2, [r2, #6]
 8009dcc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	88db      	ldrh	r3, [r3, #6]
 8009dd2:	2b07      	cmp	r3, #7
 8009dd4:	bf28      	it	cs
 8009dd6:	2307      	movcs	r3, #7
 8009dd8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	89fa      	ldrh	r2, [r7, #14]
 8009dde:	4619      	mov	r1, r3
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f001 fdad 	bl	800b940 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009de6:	e090      	b.n	8009f0a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	785a      	ldrb	r2, [r3, #1]
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	88db      	ldrh	r3, [r3, #6]
 8009df6:	2b3f      	cmp	r3, #63	; 0x3f
 8009df8:	d803      	bhi.n	8009e02 <USBD_CDC_Setup+0xa6>
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	88db      	ldrh	r3, [r3, #6]
 8009dfe:	b2da      	uxtb	r2, r3
 8009e00:	e000      	b.n	8009e04 <USBD_CDC_Setup+0xa8>
 8009e02:	2240      	movs	r2, #64	; 0x40
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009e0a:	6939      	ldr	r1, [r7, #16]
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009e12:	461a      	mov	r2, r3
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f001 fdbf 	bl	800b998 <USBD_CtlPrepareRx>
      break;
 8009e1a:	e076      	b.n	8009f0a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	33b0      	adds	r3, #176	; 0xb0
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	4413      	add	r3, r2
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	683a      	ldr	r2, [r7, #0]
 8009e30:	7850      	ldrb	r0, [r2, #1]
 8009e32:	2200      	movs	r2, #0
 8009e34:	6839      	ldr	r1, [r7, #0]
 8009e36:	4798      	blx	r3
      break;
 8009e38:	e067      	b.n	8009f0a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	785b      	ldrb	r3, [r3, #1]
 8009e3e:	2b0b      	cmp	r3, #11
 8009e40:	d851      	bhi.n	8009ee6 <USBD_CDC_Setup+0x18a>
 8009e42:	a201      	add	r2, pc, #4	; (adr r2, 8009e48 <USBD_CDC_Setup+0xec>)
 8009e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e48:	08009e79 	.word	0x08009e79
 8009e4c:	08009ef5 	.word	0x08009ef5
 8009e50:	08009ee7 	.word	0x08009ee7
 8009e54:	08009ee7 	.word	0x08009ee7
 8009e58:	08009ee7 	.word	0x08009ee7
 8009e5c:	08009ee7 	.word	0x08009ee7
 8009e60:	08009ee7 	.word	0x08009ee7
 8009e64:	08009ee7 	.word	0x08009ee7
 8009e68:	08009ee7 	.word	0x08009ee7
 8009e6c:	08009ee7 	.word	0x08009ee7
 8009e70:	08009ea3 	.word	0x08009ea3
 8009e74:	08009ecd 	.word	0x08009ecd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e7e:	b2db      	uxtb	r3, r3
 8009e80:	2b03      	cmp	r3, #3
 8009e82:	d107      	bne.n	8009e94 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009e84:	f107 030a 	add.w	r3, r7, #10
 8009e88:	2202      	movs	r2, #2
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f001 fd57 	bl	800b940 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e92:	e032      	b.n	8009efa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009e94:	6839      	ldr	r1, [r7, #0]
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f001 fce1 	bl	800b85e <USBD_CtlError>
            ret = USBD_FAIL;
 8009e9c:	2303      	movs	r3, #3
 8009e9e:	75fb      	strb	r3, [r7, #23]
          break;
 8009ea0:	e02b      	b.n	8009efa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ea8:	b2db      	uxtb	r3, r3
 8009eaa:	2b03      	cmp	r3, #3
 8009eac:	d107      	bne.n	8009ebe <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009eae:	f107 030d 	add.w	r3, r7, #13
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f001 fd42 	bl	800b940 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009ebc:	e01d      	b.n	8009efa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009ebe:	6839      	ldr	r1, [r7, #0]
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f001 fccc 	bl	800b85e <USBD_CtlError>
            ret = USBD_FAIL;
 8009ec6:	2303      	movs	r3, #3
 8009ec8:	75fb      	strb	r3, [r7, #23]
          break;
 8009eca:	e016      	b.n	8009efa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	2b03      	cmp	r3, #3
 8009ed6:	d00f      	beq.n	8009ef8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009ed8:	6839      	ldr	r1, [r7, #0]
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f001 fcbf 	bl	800b85e <USBD_CtlError>
            ret = USBD_FAIL;
 8009ee0:	2303      	movs	r3, #3
 8009ee2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009ee4:	e008      	b.n	8009ef8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009ee6:	6839      	ldr	r1, [r7, #0]
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f001 fcb8 	bl	800b85e <USBD_CtlError>
          ret = USBD_FAIL;
 8009eee:	2303      	movs	r3, #3
 8009ef0:	75fb      	strb	r3, [r7, #23]
          break;
 8009ef2:	e002      	b.n	8009efa <USBD_CDC_Setup+0x19e>
          break;
 8009ef4:	bf00      	nop
 8009ef6:	e008      	b.n	8009f0a <USBD_CDC_Setup+0x1ae>
          break;
 8009ef8:	bf00      	nop
      }
      break;
 8009efa:	e006      	b.n	8009f0a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009efc:	6839      	ldr	r1, [r7, #0]
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f001 fcad 	bl	800b85e <USBD_CtlError>
      ret = USBD_FAIL;
 8009f04:	2303      	movs	r3, #3
 8009f06:	75fb      	strb	r3, [r7, #23]
      break;
 8009f08:	bf00      	nop
  }

  return (uint8_t)ret;
 8009f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3718      	adds	r7, #24
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f26:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	32b0      	adds	r2, #176	; 0xb0
 8009f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d101      	bne.n	8009f3e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009f3a:	2303      	movs	r3, #3
 8009f3c:	e065      	b.n	800a00a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	32b0      	adds	r2, #176	; 0xb0
 8009f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f4c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009f4e:	78fb      	ldrb	r3, [r7, #3]
 8009f50:	f003 020f 	and.w	r2, r3, #15
 8009f54:	6879      	ldr	r1, [r7, #4]
 8009f56:	4613      	mov	r3, r2
 8009f58:	009b      	lsls	r3, r3, #2
 8009f5a:	4413      	add	r3, r2
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	440b      	add	r3, r1
 8009f60:	3318      	adds	r3, #24
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d02f      	beq.n	8009fc8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009f68:	78fb      	ldrb	r3, [r7, #3]
 8009f6a:	f003 020f 	and.w	r2, r3, #15
 8009f6e:	6879      	ldr	r1, [r7, #4]
 8009f70:	4613      	mov	r3, r2
 8009f72:	009b      	lsls	r3, r3, #2
 8009f74:	4413      	add	r3, r2
 8009f76:	009b      	lsls	r3, r3, #2
 8009f78:	440b      	add	r3, r1
 8009f7a:	3318      	adds	r3, #24
 8009f7c:	681a      	ldr	r2, [r3, #0]
 8009f7e:	78fb      	ldrb	r3, [r7, #3]
 8009f80:	f003 010f 	and.w	r1, r3, #15
 8009f84:	68f8      	ldr	r0, [r7, #12]
 8009f86:	460b      	mov	r3, r1
 8009f88:	00db      	lsls	r3, r3, #3
 8009f8a:	440b      	add	r3, r1
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	4403      	add	r3, r0
 8009f90:	3348      	adds	r3, #72	; 0x48
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	fbb2 f1f3 	udiv	r1, r2, r3
 8009f98:	fb01 f303 	mul.w	r3, r1, r3
 8009f9c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d112      	bne.n	8009fc8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009fa2:	78fb      	ldrb	r3, [r7, #3]
 8009fa4:	f003 020f 	and.w	r2, r3, #15
 8009fa8:	6879      	ldr	r1, [r7, #4]
 8009faa:	4613      	mov	r3, r2
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	4413      	add	r3, r2
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	440b      	add	r3, r1
 8009fb4:	3318      	adds	r3, #24
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009fba:	78f9      	ldrb	r1, [r7, #3]
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f005 fb0c 	bl	800f5de <USBD_LL_Transmit>
 8009fc6:	e01f      	b.n	800a008 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	33b0      	adds	r3, #176	; 0xb0
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	4413      	add	r3, r2
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	691b      	ldr	r3, [r3, #16]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d010      	beq.n	800a008 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	33b0      	adds	r3, #176	; 0xb0
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	4413      	add	r3, r2
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	691b      	ldr	r3, [r3, #16]
 8009ff8:	68ba      	ldr	r2, [r7, #8]
 8009ffa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009ffe:	68ba      	ldr	r2, [r7, #8]
 800a000:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a004:	78fa      	ldrb	r2, [r7, #3]
 800a006:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a008:	2300      	movs	r3, #0
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3710      	adds	r7, #16
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}

0800a012 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a012:	b580      	push	{r7, lr}
 800a014:	b084      	sub	sp, #16
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
 800a01a:	460b      	mov	r3, r1
 800a01c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	32b0      	adds	r2, #176	; 0xb0
 800a028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a02c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	32b0      	adds	r2, #176	; 0xb0
 800a038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d101      	bne.n	800a044 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a040:	2303      	movs	r3, #3
 800a042:	e01a      	b.n	800a07a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a044:	78fb      	ldrb	r3, [r7, #3]
 800a046:	4619      	mov	r1, r3
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f005 fb0a 	bl	800f662 <USBD_LL_GetRxDataSize>
 800a04e:	4602      	mov	r2, r0
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	33b0      	adds	r3, #176	; 0xb0
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	4413      	add	r3, r2
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	68fa      	ldr	r2, [r7, #12]
 800a06a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a06e:	68fa      	ldr	r2, [r7, #12]
 800a070:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a074:	4611      	mov	r1, r2
 800a076:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a078:	2300      	movs	r3, #0
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3710      	adds	r7, #16
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}

0800a082 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a082:	b580      	push	{r7, lr}
 800a084:	b084      	sub	sp, #16
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	32b0      	adds	r2, #176	; 0xb0
 800a094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a098:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d101      	bne.n	800a0a4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a0a0:	2303      	movs	r3, #3
 800a0a2:	e025      	b.n	800a0f0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a0aa:	687a      	ldr	r2, [r7, #4]
 800a0ac:	33b0      	adds	r3, #176	; 0xb0
 800a0ae:	009b      	lsls	r3, r3, #2
 800a0b0:	4413      	add	r3, r2
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d01a      	beq.n	800a0ee <USBD_CDC_EP0_RxReady+0x6c>
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a0be:	2bff      	cmp	r3, #255	; 0xff
 800a0c0:	d015      	beq.n	800a0ee <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	33b0      	adds	r3, #176	; 0xb0
 800a0cc:	009b      	lsls	r3, r3, #2
 800a0ce:	4413      	add	r3, r2
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	689b      	ldr	r3, [r3, #8]
 800a0d4:	68fa      	ldr	r2, [r7, #12]
 800a0d6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a0da:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a0dc:	68fa      	ldr	r2, [r7, #12]
 800a0de:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a0e2:	b292      	uxth	r2, r2
 800a0e4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	22ff      	movs	r2, #255	; 0xff
 800a0ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a0ee:	2300      	movs	r3, #0
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3710      	adds	r7, #16
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b086      	sub	sp, #24
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a100:	2182      	movs	r1, #130	; 0x82
 800a102:	4818      	ldr	r0, [pc, #96]	; (800a164 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a104:	f000 fd49 	bl	800ab9a <USBD_GetEpDesc>
 800a108:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a10a:	2101      	movs	r1, #1
 800a10c:	4815      	ldr	r0, [pc, #84]	; (800a164 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a10e:	f000 fd44 	bl	800ab9a <USBD_GetEpDesc>
 800a112:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a114:	2181      	movs	r1, #129	; 0x81
 800a116:	4813      	ldr	r0, [pc, #76]	; (800a164 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a118:	f000 fd3f 	bl	800ab9a <USBD_GetEpDesc>
 800a11c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d002      	beq.n	800a12a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	2210      	movs	r2, #16
 800a128:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d006      	beq.n	800a13e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	2200      	movs	r2, #0
 800a134:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a138:	711a      	strb	r2, [r3, #4]
 800a13a:	2200      	movs	r2, #0
 800a13c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d006      	beq.n	800a152 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2200      	movs	r2, #0
 800a148:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a14c:	711a      	strb	r2, [r3, #4]
 800a14e:	2200      	movs	r2, #0
 800a150:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2243      	movs	r2, #67	; 0x43
 800a156:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a158:	4b02      	ldr	r3, [pc, #8]	; (800a164 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3718      	adds	r7, #24
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	20000050 	.word	0x20000050

0800a168 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b086      	sub	sp, #24
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a170:	2182      	movs	r1, #130	; 0x82
 800a172:	4818      	ldr	r0, [pc, #96]	; (800a1d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a174:	f000 fd11 	bl	800ab9a <USBD_GetEpDesc>
 800a178:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a17a:	2101      	movs	r1, #1
 800a17c:	4815      	ldr	r0, [pc, #84]	; (800a1d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a17e:	f000 fd0c 	bl	800ab9a <USBD_GetEpDesc>
 800a182:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a184:	2181      	movs	r1, #129	; 0x81
 800a186:	4813      	ldr	r0, [pc, #76]	; (800a1d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a188:	f000 fd07 	bl	800ab9a <USBD_GetEpDesc>
 800a18c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d002      	beq.n	800a19a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	2210      	movs	r2, #16
 800a198:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d006      	beq.n	800a1ae <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	711a      	strb	r2, [r3, #4]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	f042 0202 	orr.w	r2, r2, #2
 800a1ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d006      	beq.n	800a1c2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	711a      	strb	r2, [r3, #4]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f042 0202 	orr.w	r2, r2, #2
 800a1c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2243      	movs	r2, #67	; 0x43
 800a1c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a1c8:	4b02      	ldr	r3, [pc, #8]	; (800a1d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3718      	adds	r7, #24
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	20000050 	.word	0x20000050

0800a1d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b086      	sub	sp, #24
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a1e0:	2182      	movs	r1, #130	; 0x82
 800a1e2:	4818      	ldr	r0, [pc, #96]	; (800a244 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a1e4:	f000 fcd9 	bl	800ab9a <USBD_GetEpDesc>
 800a1e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a1ea:	2101      	movs	r1, #1
 800a1ec:	4815      	ldr	r0, [pc, #84]	; (800a244 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a1ee:	f000 fcd4 	bl	800ab9a <USBD_GetEpDesc>
 800a1f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a1f4:	2181      	movs	r1, #129	; 0x81
 800a1f6:	4813      	ldr	r0, [pc, #76]	; (800a244 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a1f8:	f000 fccf 	bl	800ab9a <USBD_GetEpDesc>
 800a1fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d002      	beq.n	800a20a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	2210      	movs	r2, #16
 800a208:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d006      	beq.n	800a21e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	2200      	movs	r2, #0
 800a214:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a218:	711a      	strb	r2, [r3, #4]
 800a21a:	2200      	movs	r2, #0
 800a21c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d006      	beq.n	800a232 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2200      	movs	r2, #0
 800a228:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a22c:	711a      	strb	r2, [r3, #4]
 800a22e:	2200      	movs	r2, #0
 800a230:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2243      	movs	r2, #67	; 0x43
 800a236:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a238:	4b02      	ldr	r3, [pc, #8]	; (800a244 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3718      	adds	r7, #24
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	20000050 	.word	0x20000050

0800a248 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	220a      	movs	r2, #10
 800a254:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a256:	4b03      	ldr	r3, [pc, #12]	; (800a264 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a258:	4618      	mov	r0, r3
 800a25a:	370c      	adds	r7, #12
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr
 800a264:	2000000c 	.word	0x2000000c

0800a268 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d101      	bne.n	800a27c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a278:	2303      	movs	r3, #3
 800a27a:	e009      	b.n	800a290 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	33b0      	adds	r3, #176	; 0xb0
 800a286:	009b      	lsls	r3, r3, #2
 800a288:	4413      	add	r3, r2
 800a28a:	683a      	ldr	r2, [r7, #0]
 800a28c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a28e:	2300      	movs	r3, #0
}
 800a290:	4618      	mov	r0, r3
 800a292:	370c      	adds	r7, #12
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr

0800a29c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b087      	sub	sp, #28
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	32b0      	adds	r2, #176	; 0xb0
 800a2b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2b6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d101      	bne.n	800a2c2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a2be:	2303      	movs	r3, #3
 800a2c0:	e008      	b.n	800a2d4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	68ba      	ldr	r2, [r7, #8]
 800a2c6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a2d2:	2300      	movs	r3, #0
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	371c      	adds	r7, #28
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b085      	sub	sp, #20
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	32b0      	adds	r2, #176	; 0xb0
 800a2f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d101      	bne.n	800a304 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a300:	2303      	movs	r3, #3
 800a302:	e004      	b.n	800a30e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	683a      	ldr	r2, [r7, #0]
 800a308:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a30c:	2300      	movs	r3, #0
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3714      	adds	r7, #20
 800a312:	46bd      	mov	sp, r7
 800a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a318:	4770      	bx	lr
	...

0800a31c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b084      	sub	sp, #16
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	32b0      	adds	r2, #176	; 0xb0
 800a32e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a332:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a334:	2301      	movs	r3, #1
 800a336:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d101      	bne.n	800a342 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a33e:	2303      	movs	r3, #3
 800a340:	e025      	b.n	800a38e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d11f      	bne.n	800a38c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	2201      	movs	r2, #1
 800a350:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a354:	4b10      	ldr	r3, [pc, #64]	; (800a398 <USBD_CDC_TransmitPacket+0x7c>)
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	f003 020f 	and.w	r2, r3, #15
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	4613      	mov	r3, r2
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	4413      	add	r3, r2
 800a36a:	009b      	lsls	r3, r3, #2
 800a36c:	4403      	add	r3, r0
 800a36e:	3318      	adds	r3, #24
 800a370:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a372:	4b09      	ldr	r3, [pc, #36]	; (800a398 <USBD_CDC_TransmitPacket+0x7c>)
 800a374:	7819      	ldrb	r1, [r3, #0]
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f005 f92b 	bl	800f5de <USBD_LL_Transmit>

    ret = USBD_OK;
 800a388:	2300      	movs	r3, #0
 800a38a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a38c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3710      	adds	r7, #16
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop
 800a398:	20000093 	.word	0x20000093

0800a39c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b084      	sub	sp, #16
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	32b0      	adds	r2, #176	; 0xb0
 800a3ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3b2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	32b0      	adds	r2, #176	; 0xb0
 800a3be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d101      	bne.n	800a3ca <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a3c6:	2303      	movs	r3, #3
 800a3c8:	e018      	b.n	800a3fc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	7c1b      	ldrb	r3, [r3, #16]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d10a      	bne.n	800a3e8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a3d2:	4b0c      	ldr	r3, [pc, #48]	; (800a404 <USBD_CDC_ReceivePacket+0x68>)
 800a3d4:	7819      	ldrb	r1, [r3, #0]
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a3dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f005 f91d 	bl	800f620 <USBD_LL_PrepareReceive>
 800a3e6:	e008      	b.n	800a3fa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a3e8:	4b06      	ldr	r3, [pc, #24]	; (800a404 <USBD_CDC_ReceivePacket+0x68>)
 800a3ea:	7819      	ldrb	r1, [r3, #0]
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a3f2:	2340      	movs	r3, #64	; 0x40
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f005 f913 	bl	800f620 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a3fa:	2300      	movs	r3, #0
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3710      	adds	r7, #16
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}
 800a404:	20000094 	.word	0x20000094

0800a408 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b086      	sub	sp, #24
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	4613      	mov	r3, r2
 800a414:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d101      	bne.n	800a420 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a41c:	2303      	movs	r3, #3
 800a41e:	e01f      	b.n	800a460 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2200      	movs	r2, #0
 800a424:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2200      	movs	r2, #0
 800a42c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2200      	movs	r2, #0
 800a434:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d003      	beq.n	800a446 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	68ba      	ldr	r2, [r7, #8]
 800a442:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2201      	movs	r2, #1
 800a44a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	79fa      	ldrb	r2, [r7, #7]
 800a452:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a454:	68f8      	ldr	r0, [r7, #12]
 800a456:	f004 ff8d 	bl	800f374 <USBD_LL_Init>
 800a45a:	4603      	mov	r3, r0
 800a45c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a45e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a460:	4618      	mov	r0, r3
 800a462:	3718      	adds	r7, #24
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a472:	2300      	movs	r3, #0
 800a474:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d101      	bne.n	800a480 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a47c:	2303      	movs	r3, #3
 800a47e:	e025      	b.n	800a4cc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	683a      	ldr	r2, [r7, #0]
 800a484:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	32ae      	adds	r2, #174	; 0xae
 800a492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d00f      	beq.n	800a4bc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	32ae      	adds	r2, #174	; 0xae
 800a4a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ac:	f107 020e 	add.w	r2, r7, #14
 800a4b0:	4610      	mov	r0, r2
 800a4b2:	4798      	blx	r3
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a4c2:	1c5a      	adds	r2, r3, #1
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a4ca:	2300      	movs	r3, #0
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3710      	adds	r7, #16
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b082      	sub	sp, #8
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f004 ff95 	bl	800f40c <USBD_LL_Start>
 800a4e2:	4603      	mov	r3, r0
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3708      	adds	r7, #8
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a4f4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	370c      	adds	r7, #12
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr

0800a502 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a502:	b580      	push	{r7, lr}
 800a504:	b084      	sub	sp, #16
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
 800a50a:	460b      	mov	r3, r1
 800a50c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a50e:	2300      	movs	r3, #0
 800a510:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d009      	beq.n	800a530 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	78fa      	ldrb	r2, [r7, #3]
 800a526:	4611      	mov	r1, r2
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	4798      	blx	r3
 800a52c:	4603      	mov	r3, r0
 800a52e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a530:	7bfb      	ldrb	r3, [r7, #15]
}
 800a532:	4618      	mov	r0, r3
 800a534:	3710      	adds	r7, #16
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}

0800a53a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a53a:	b580      	push	{r7, lr}
 800a53c:	b084      	sub	sp, #16
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
 800a542:	460b      	mov	r3, r1
 800a544:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a546:	2300      	movs	r3, #0
 800a548:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	78fa      	ldrb	r2, [r7, #3]
 800a554:	4611      	mov	r1, r2
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	4798      	blx	r3
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d001      	beq.n	800a564 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a560:	2303      	movs	r3, #3
 800a562:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a564:	7bfb      	ldrb	r3, [r7, #15]
}
 800a566:	4618      	mov	r0, r3
 800a568:	3710      	adds	r7, #16
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}

0800a56e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a56e:	b580      	push	{r7, lr}
 800a570:	b084      	sub	sp, #16
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
 800a576:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a57e:	6839      	ldr	r1, [r7, #0]
 800a580:	4618      	mov	r0, r3
 800a582:	f001 f932 	bl	800b7ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2201      	movs	r2, #1
 800a58a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a594:	461a      	mov	r2, r3
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a5a2:	f003 031f 	and.w	r3, r3, #31
 800a5a6:	2b02      	cmp	r3, #2
 800a5a8:	d01a      	beq.n	800a5e0 <USBD_LL_SetupStage+0x72>
 800a5aa:	2b02      	cmp	r3, #2
 800a5ac:	d822      	bhi.n	800a5f4 <USBD_LL_SetupStage+0x86>
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d002      	beq.n	800a5b8 <USBD_LL_SetupStage+0x4a>
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d00a      	beq.n	800a5cc <USBD_LL_SetupStage+0x5e>
 800a5b6:	e01d      	b.n	800a5f4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a5be:	4619      	mov	r1, r3
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f000 fb5f 	bl	800ac84 <USBD_StdDevReq>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	73fb      	strb	r3, [r7, #15]
      break;
 800a5ca:	e020      	b.n	800a60e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 fbc7 	bl	800ad68 <USBD_StdItfReq>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	73fb      	strb	r3, [r7, #15]
      break;
 800a5de:	e016      	b.n	800a60e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f000 fc29 	bl	800ae40 <USBD_StdEPReq>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	73fb      	strb	r3, [r7, #15]
      break;
 800a5f2:	e00c      	b.n	800a60e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a5fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a5fe:	b2db      	uxtb	r3, r3
 800a600:	4619      	mov	r1, r3
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f004 ff62 	bl	800f4cc <USBD_LL_StallEP>
 800a608:	4603      	mov	r3, r0
 800a60a:	73fb      	strb	r3, [r7, #15]
      break;
 800a60c:	bf00      	nop
  }

  return ret;
 800a60e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a610:	4618      	mov	r0, r3
 800a612:	3710      	adds	r7, #16
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b086      	sub	sp, #24
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	460b      	mov	r3, r1
 800a622:	607a      	str	r2, [r7, #4]
 800a624:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a626:	2300      	movs	r3, #0
 800a628:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a62a:	7afb      	ldrb	r3, [r7, #11]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d16e      	bne.n	800a70e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a636:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a63e:	2b03      	cmp	r3, #3
 800a640:	f040 8098 	bne.w	800a774 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	689a      	ldr	r2, [r3, #8]
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	68db      	ldr	r3, [r3, #12]
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d913      	bls.n	800a678 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	689a      	ldr	r2, [r3, #8]
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	68db      	ldr	r3, [r3, #12]
 800a658:	1ad2      	subs	r2, r2, r3
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	68da      	ldr	r2, [r3, #12]
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	689b      	ldr	r3, [r3, #8]
 800a666:	4293      	cmp	r3, r2
 800a668:	bf28      	it	cs
 800a66a:	4613      	movcs	r3, r2
 800a66c:	461a      	mov	r2, r3
 800a66e:	6879      	ldr	r1, [r7, #4]
 800a670:	68f8      	ldr	r0, [r7, #12]
 800a672:	f001 f9ae 	bl	800b9d2 <USBD_CtlContinueRx>
 800a676:	e07d      	b.n	800a774 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a67e:	f003 031f 	and.w	r3, r3, #31
 800a682:	2b02      	cmp	r3, #2
 800a684:	d014      	beq.n	800a6b0 <USBD_LL_DataOutStage+0x98>
 800a686:	2b02      	cmp	r3, #2
 800a688:	d81d      	bhi.n	800a6c6 <USBD_LL_DataOutStage+0xae>
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d002      	beq.n	800a694 <USBD_LL_DataOutStage+0x7c>
 800a68e:	2b01      	cmp	r3, #1
 800a690:	d003      	beq.n	800a69a <USBD_LL_DataOutStage+0x82>
 800a692:	e018      	b.n	800a6c6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a694:	2300      	movs	r3, #0
 800a696:	75bb      	strb	r3, [r7, #22]
            break;
 800a698:	e018      	b.n	800a6cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	f000 fa5e 	bl	800ab66 <USBD_CoreFindIF>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	75bb      	strb	r3, [r7, #22]
            break;
 800a6ae:	e00d      	b.n	800a6cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	68f8      	ldr	r0, [r7, #12]
 800a6bc:	f000 fa60 	bl	800ab80 <USBD_CoreFindEP>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	75bb      	strb	r3, [r7, #22]
            break;
 800a6c4:	e002      	b.n	800a6cc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	75bb      	strb	r3, [r7, #22]
            break;
 800a6ca:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a6cc:	7dbb      	ldrb	r3, [r7, #22]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d119      	bne.n	800a706 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6d8:	b2db      	uxtb	r3, r3
 800a6da:	2b03      	cmp	r3, #3
 800a6dc:	d113      	bne.n	800a706 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a6de:	7dba      	ldrb	r2, [r7, #22]
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	32ae      	adds	r2, #174	; 0xae
 800a6e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6e8:	691b      	ldr	r3, [r3, #16]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d00b      	beq.n	800a706 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a6ee:	7dba      	ldrb	r2, [r7, #22]
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a6f6:	7dba      	ldrb	r2, [r7, #22]
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	32ae      	adds	r2, #174	; 0xae
 800a6fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a700:	691b      	ldr	r3, [r3, #16]
 800a702:	68f8      	ldr	r0, [r7, #12]
 800a704:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a706:	68f8      	ldr	r0, [r7, #12]
 800a708:	f001 f974 	bl	800b9f4 <USBD_CtlSendStatus>
 800a70c:	e032      	b.n	800a774 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a70e:	7afb      	ldrb	r3, [r7, #11]
 800a710:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a714:	b2db      	uxtb	r3, r3
 800a716:	4619      	mov	r1, r3
 800a718:	68f8      	ldr	r0, [r7, #12]
 800a71a:	f000 fa31 	bl	800ab80 <USBD_CoreFindEP>
 800a71e:	4603      	mov	r3, r0
 800a720:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a722:	7dbb      	ldrb	r3, [r7, #22]
 800a724:	2bff      	cmp	r3, #255	; 0xff
 800a726:	d025      	beq.n	800a774 <USBD_LL_DataOutStage+0x15c>
 800a728:	7dbb      	ldrb	r3, [r7, #22]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d122      	bne.n	800a774 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a734:	b2db      	uxtb	r3, r3
 800a736:	2b03      	cmp	r3, #3
 800a738:	d117      	bne.n	800a76a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a73a:	7dba      	ldrb	r2, [r7, #22]
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	32ae      	adds	r2, #174	; 0xae
 800a740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a744:	699b      	ldr	r3, [r3, #24]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d00f      	beq.n	800a76a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a74a:	7dba      	ldrb	r2, [r7, #22]
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a752:	7dba      	ldrb	r2, [r7, #22]
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	32ae      	adds	r2, #174	; 0xae
 800a758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a75c:	699b      	ldr	r3, [r3, #24]
 800a75e:	7afa      	ldrb	r2, [r7, #11]
 800a760:	4611      	mov	r1, r2
 800a762:	68f8      	ldr	r0, [r7, #12]
 800a764:	4798      	blx	r3
 800a766:	4603      	mov	r3, r0
 800a768:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a76a:	7dfb      	ldrb	r3, [r7, #23]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d001      	beq.n	800a774 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a770:	7dfb      	ldrb	r3, [r7, #23]
 800a772:	e000      	b.n	800a776 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a774:	2300      	movs	r3, #0
}
 800a776:	4618      	mov	r0, r3
 800a778:	3718      	adds	r7, #24
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}

0800a77e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a77e:	b580      	push	{r7, lr}
 800a780:	b086      	sub	sp, #24
 800a782:	af00      	add	r7, sp, #0
 800a784:	60f8      	str	r0, [r7, #12]
 800a786:	460b      	mov	r3, r1
 800a788:	607a      	str	r2, [r7, #4]
 800a78a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a78c:	7afb      	ldrb	r3, [r7, #11]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d16f      	bne.n	800a872 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	3314      	adds	r3, #20
 800a796:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a79e:	2b02      	cmp	r3, #2
 800a7a0:	d15a      	bne.n	800a858 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	689a      	ldr	r2, [r3, #8]
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	68db      	ldr	r3, [r3, #12]
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	d914      	bls.n	800a7d8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	689a      	ldr	r2, [r3, #8]
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	68db      	ldr	r3, [r3, #12]
 800a7b6:	1ad2      	subs	r2, r2, r3
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	689b      	ldr	r3, [r3, #8]
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	6879      	ldr	r1, [r7, #4]
 800a7c4:	68f8      	ldr	r0, [r7, #12]
 800a7c6:	f001 f8d6 	bl	800b976 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	2100      	movs	r1, #0
 800a7d0:	68f8      	ldr	r0, [r7, #12]
 800a7d2:	f004 ff25 	bl	800f620 <USBD_LL_PrepareReceive>
 800a7d6:	e03f      	b.n	800a858 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	68da      	ldr	r2, [r3, #12]
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	689b      	ldr	r3, [r3, #8]
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d11c      	bne.n	800a81e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	685a      	ldr	r2, [r3, #4]
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	d316      	bcc.n	800a81e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	685a      	ldr	r2, [r3, #4]
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d20f      	bcs.n	800a81e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a7fe:	2200      	movs	r2, #0
 800a800:	2100      	movs	r1, #0
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	f001 f8b7 	bl	800b976 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2200      	movs	r2, #0
 800a80c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a810:	2300      	movs	r3, #0
 800a812:	2200      	movs	r2, #0
 800a814:	2100      	movs	r1, #0
 800a816:	68f8      	ldr	r0, [r7, #12]
 800a818:	f004 ff02 	bl	800f620 <USBD_LL_PrepareReceive>
 800a81c:	e01c      	b.n	800a858 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a824:	b2db      	uxtb	r3, r3
 800a826:	2b03      	cmp	r3, #3
 800a828:	d10f      	bne.n	800a84a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a830:	68db      	ldr	r3, [r3, #12]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d009      	beq.n	800a84a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2200      	movs	r2, #0
 800a83a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	68f8      	ldr	r0, [r7, #12]
 800a848:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a84a:	2180      	movs	r1, #128	; 0x80
 800a84c:	68f8      	ldr	r0, [r7, #12]
 800a84e:	f004 fe3d 	bl	800f4cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a852:	68f8      	ldr	r0, [r7, #12]
 800a854:	f001 f8e1 	bl	800ba1a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d03a      	beq.n	800a8d8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a862:	68f8      	ldr	r0, [r7, #12]
 800a864:	f7ff fe42 	bl	800a4ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2200      	movs	r2, #0
 800a86c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a870:	e032      	b.n	800a8d8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a872:	7afb      	ldrb	r3, [r7, #11]
 800a874:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a878:	b2db      	uxtb	r3, r3
 800a87a:	4619      	mov	r1, r3
 800a87c:	68f8      	ldr	r0, [r7, #12]
 800a87e:	f000 f97f 	bl	800ab80 <USBD_CoreFindEP>
 800a882:	4603      	mov	r3, r0
 800a884:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a886:	7dfb      	ldrb	r3, [r7, #23]
 800a888:	2bff      	cmp	r3, #255	; 0xff
 800a88a:	d025      	beq.n	800a8d8 <USBD_LL_DataInStage+0x15a>
 800a88c:	7dfb      	ldrb	r3, [r7, #23]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d122      	bne.n	800a8d8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	2b03      	cmp	r3, #3
 800a89c:	d11c      	bne.n	800a8d8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a89e:	7dfa      	ldrb	r2, [r7, #23]
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	32ae      	adds	r2, #174	; 0xae
 800a8a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8a8:	695b      	ldr	r3, [r3, #20]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d014      	beq.n	800a8d8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a8ae:	7dfa      	ldrb	r2, [r7, #23]
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a8b6:	7dfa      	ldrb	r2, [r7, #23]
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	32ae      	adds	r2, #174	; 0xae
 800a8bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8c0:	695b      	ldr	r3, [r3, #20]
 800a8c2:	7afa      	ldrb	r2, [r7, #11]
 800a8c4:	4611      	mov	r1, r2
 800a8c6:	68f8      	ldr	r0, [r7, #12]
 800a8c8:	4798      	blx	r3
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a8ce:	7dbb      	ldrb	r3, [r7, #22]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d001      	beq.n	800a8d8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a8d4:	7dbb      	ldrb	r3, [r7, #22]
 800a8d6:	e000      	b.n	800a8da <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a8d8:	2300      	movs	r3, #0
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3718      	adds	r7, #24
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}

0800a8e2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a8e2:	b580      	push	{r7, lr}
 800a8e4:	b084      	sub	sp, #16
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2200      	movs	r2, #0
 800a902:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2200      	movs	r2, #0
 800a908:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2200      	movs	r2, #0
 800a910:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d014      	beq.n	800a948 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d00e      	beq.n	800a948 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	687a      	ldr	r2, [r7, #4]
 800a934:	6852      	ldr	r2, [r2, #4]
 800a936:	b2d2      	uxtb	r2, r2
 800a938:	4611      	mov	r1, r2
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	4798      	blx	r3
 800a93e:	4603      	mov	r3, r0
 800a940:	2b00      	cmp	r3, #0
 800a942:	d001      	beq.n	800a948 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a944:	2303      	movs	r3, #3
 800a946:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a948:	2340      	movs	r3, #64	; 0x40
 800a94a:	2200      	movs	r2, #0
 800a94c:	2100      	movs	r1, #0
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f004 fd77 	bl	800f442 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2201      	movs	r2, #1
 800a958:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2240      	movs	r2, #64	; 0x40
 800a960:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a964:	2340      	movs	r3, #64	; 0x40
 800a966:	2200      	movs	r2, #0
 800a968:	2180      	movs	r1, #128	; 0x80
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f004 fd69 	bl	800f442 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2201      	movs	r2, #1
 800a974:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2240      	movs	r2, #64	; 0x40
 800a97a:	621a      	str	r2, [r3, #32]

  return ret;
 800a97c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3710      	adds	r7, #16
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}

0800a986 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a986:	b480      	push	{r7}
 800a988:	b083      	sub	sp, #12
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]
 800a98e:	460b      	mov	r3, r1
 800a990:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	78fa      	ldrb	r2, [r7, #3]
 800a996:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a998:	2300      	movs	r3, #0
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	370c      	adds	r7, #12
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr

0800a9a6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a9a6:	b480      	push	{r7}
 800a9a8:	b083      	sub	sp, #12
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9b4:	b2da      	uxtb	r2, r3
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2204      	movs	r2, #4
 800a9c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a9c4:	2300      	movs	r3, #0
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	370c      	adds	r7, #12
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr

0800a9d2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a9d2:	b480      	push	{r7}
 800a9d4:	b083      	sub	sp, #12
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	2b04      	cmp	r3, #4
 800a9e4:	d106      	bne.n	800a9f4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a9ec:	b2da      	uxtb	r2, r3
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a9f4:	2300      	movs	r3, #0
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	370c      	adds	r7, #12
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr

0800aa02 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aa02:	b580      	push	{r7, lr}
 800aa04:	b082      	sub	sp, #8
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	2b03      	cmp	r3, #3
 800aa14:	d110      	bne.n	800aa38 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d00b      	beq.n	800aa38 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa26:	69db      	ldr	r3, [r3, #28]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d005      	beq.n	800aa38 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa32:	69db      	ldr	r3, [r3, #28]
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800aa38:	2300      	movs	r3, #0
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3708      	adds	r7, #8
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}

0800aa42 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800aa42:	b580      	push	{r7, lr}
 800aa44:	b082      	sub	sp, #8
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
 800aa4a:	460b      	mov	r3, r1
 800aa4c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	32ae      	adds	r2, #174	; 0xae
 800aa58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d101      	bne.n	800aa64 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800aa60:	2303      	movs	r3, #3
 800aa62:	e01c      	b.n	800aa9e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	2b03      	cmp	r3, #3
 800aa6e:	d115      	bne.n	800aa9c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	32ae      	adds	r2, #174	; 0xae
 800aa7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa7e:	6a1b      	ldr	r3, [r3, #32]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d00b      	beq.n	800aa9c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	32ae      	adds	r2, #174	; 0xae
 800aa8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa92:	6a1b      	ldr	r3, [r3, #32]
 800aa94:	78fa      	ldrb	r2, [r7, #3]
 800aa96:	4611      	mov	r1, r2
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aa9c:	2300      	movs	r3, #0
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3708      	adds	r7, #8
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}

0800aaa6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800aaa6:	b580      	push	{r7, lr}
 800aaa8:	b082      	sub	sp, #8
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	6078      	str	r0, [r7, #4]
 800aaae:	460b      	mov	r3, r1
 800aab0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	32ae      	adds	r2, #174	; 0xae
 800aabc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d101      	bne.n	800aac8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800aac4:	2303      	movs	r3, #3
 800aac6:	e01c      	b.n	800ab02 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aace:	b2db      	uxtb	r3, r3
 800aad0:	2b03      	cmp	r3, #3
 800aad2:	d115      	bne.n	800ab00 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	32ae      	adds	r2, #174	; 0xae
 800aade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d00b      	beq.n	800ab00 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	32ae      	adds	r2, #174	; 0xae
 800aaf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf8:	78fa      	ldrb	r2, [r7, #3]
 800aafa:	4611      	mov	r1, r2
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab00:	2300      	movs	r3, #0
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3708      	adds	r7, #8
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}

0800ab0a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ab0a:	b480      	push	{r7}
 800ab0c:	b083      	sub	sp, #12
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ab12:	2300      	movs	r3, #0
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	370c      	adds	r7, #12
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b084      	sub	sp, #16
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2201      	movs	r2, #1
 800ab30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d00e      	beq.n	800ab5c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	687a      	ldr	r2, [r7, #4]
 800ab48:	6852      	ldr	r2, [r2, #4]
 800ab4a:	b2d2      	uxtb	r2, r2
 800ab4c:	4611      	mov	r1, r2
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	4798      	blx	r3
 800ab52:	4603      	mov	r3, r0
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d001      	beq.n	800ab5c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ab58:	2303      	movs	r3, #3
 800ab5a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ab5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3710      	adds	r7, #16
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}

0800ab66 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ab66:	b480      	push	{r7}
 800ab68:	b083      	sub	sp, #12
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
 800ab6e:	460b      	mov	r3, r1
 800ab70:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ab72:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	370c      	adds	r7, #12
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr

0800ab80 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b083      	sub	sp, #12
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	460b      	mov	r3, r1
 800ab8a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ab8c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	370c      	adds	r7, #12
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr

0800ab9a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ab9a:	b580      	push	{r7, lr}
 800ab9c:	b086      	sub	sp, #24
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	6078      	str	r0, [r7, #4]
 800aba2:	460b      	mov	r3, r1
 800aba4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800abae:	2300      	movs	r3, #0
 800abb0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	885b      	ldrh	r3, [r3, #2]
 800abb6:	b29a      	uxth	r2, r3
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	b29b      	uxth	r3, r3
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d920      	bls.n	800ac04 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	781b      	ldrb	r3, [r3, #0]
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800abca:	e013      	b.n	800abf4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800abcc:	f107 030a 	add.w	r3, r7, #10
 800abd0:	4619      	mov	r1, r3
 800abd2:	6978      	ldr	r0, [r7, #20]
 800abd4:	f000 f81b 	bl	800ac0e <USBD_GetNextDesc>
 800abd8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	785b      	ldrb	r3, [r3, #1]
 800abde:	2b05      	cmp	r3, #5
 800abe0:	d108      	bne.n	800abf4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	789b      	ldrb	r3, [r3, #2]
 800abea:	78fa      	ldrb	r2, [r7, #3]
 800abec:	429a      	cmp	r2, r3
 800abee:	d008      	beq.n	800ac02 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800abf0:	2300      	movs	r3, #0
 800abf2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	885b      	ldrh	r3, [r3, #2]
 800abf8:	b29a      	uxth	r2, r3
 800abfa:	897b      	ldrh	r3, [r7, #10]
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d8e5      	bhi.n	800abcc <USBD_GetEpDesc+0x32>
 800ac00:	e000      	b.n	800ac04 <USBD_GetEpDesc+0x6a>
          break;
 800ac02:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ac04:	693b      	ldr	r3, [r7, #16]
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3718      	adds	r7, #24
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}

0800ac0e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ac0e:	b480      	push	{r7}
 800ac10:	b085      	sub	sp, #20
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
 800ac16:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	881a      	ldrh	r2, [r3, #0]
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	b29b      	uxth	r3, r3
 800ac26:	4413      	add	r3, r2
 800ac28:	b29a      	uxth	r2, r3
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	461a      	mov	r2, r3
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	4413      	add	r3, r2
 800ac38:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ac3a:	68fb      	ldr	r3, [r7, #12]
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3714      	adds	r7, #20
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr

0800ac48 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b087      	sub	sp, #28
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ac66:	8a3b      	ldrh	r3, [r7, #16]
 800ac68:	021b      	lsls	r3, r3, #8
 800ac6a:	b21a      	sxth	r2, r3
 800ac6c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ac70:	4313      	orrs	r3, r2
 800ac72:	b21b      	sxth	r3, r3
 800ac74:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ac76:	89fb      	ldrh	r3, [r7, #14]
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	371c      	adds	r7, #28
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr

0800ac84 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b084      	sub	sp, #16
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac9a:	2b40      	cmp	r3, #64	; 0x40
 800ac9c:	d005      	beq.n	800acaa <USBD_StdDevReq+0x26>
 800ac9e:	2b40      	cmp	r3, #64	; 0x40
 800aca0:	d857      	bhi.n	800ad52 <USBD_StdDevReq+0xce>
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d00f      	beq.n	800acc6 <USBD_StdDevReq+0x42>
 800aca6:	2b20      	cmp	r3, #32
 800aca8:	d153      	bne.n	800ad52 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	32ae      	adds	r2, #174	; 0xae
 800acb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acb8:	689b      	ldr	r3, [r3, #8]
 800acba:	6839      	ldr	r1, [r7, #0]
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	4798      	blx	r3
 800acc0:	4603      	mov	r3, r0
 800acc2:	73fb      	strb	r3, [r7, #15]
      break;
 800acc4:	e04a      	b.n	800ad5c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	785b      	ldrb	r3, [r3, #1]
 800acca:	2b09      	cmp	r3, #9
 800accc:	d83b      	bhi.n	800ad46 <USBD_StdDevReq+0xc2>
 800acce:	a201      	add	r2, pc, #4	; (adr r2, 800acd4 <USBD_StdDevReq+0x50>)
 800acd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acd4:	0800ad29 	.word	0x0800ad29
 800acd8:	0800ad3d 	.word	0x0800ad3d
 800acdc:	0800ad47 	.word	0x0800ad47
 800ace0:	0800ad33 	.word	0x0800ad33
 800ace4:	0800ad47 	.word	0x0800ad47
 800ace8:	0800ad07 	.word	0x0800ad07
 800acec:	0800acfd 	.word	0x0800acfd
 800acf0:	0800ad47 	.word	0x0800ad47
 800acf4:	0800ad1f 	.word	0x0800ad1f
 800acf8:	0800ad11 	.word	0x0800ad11
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800acfc:	6839      	ldr	r1, [r7, #0]
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f000 fa3c 	bl	800b17c <USBD_GetDescriptor>
          break;
 800ad04:	e024      	b.n	800ad50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ad06:	6839      	ldr	r1, [r7, #0]
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f000 fbcb 	bl	800b4a4 <USBD_SetAddress>
          break;
 800ad0e:	e01f      	b.n	800ad50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ad10:	6839      	ldr	r1, [r7, #0]
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f000 fc0a 	bl	800b52c <USBD_SetConfig>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	73fb      	strb	r3, [r7, #15]
          break;
 800ad1c:	e018      	b.n	800ad50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ad1e:	6839      	ldr	r1, [r7, #0]
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 fcad 	bl	800b680 <USBD_GetConfig>
          break;
 800ad26:	e013      	b.n	800ad50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ad28:	6839      	ldr	r1, [r7, #0]
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 fcde 	bl	800b6ec <USBD_GetStatus>
          break;
 800ad30:	e00e      	b.n	800ad50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ad32:	6839      	ldr	r1, [r7, #0]
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 fd0d 	bl	800b754 <USBD_SetFeature>
          break;
 800ad3a:	e009      	b.n	800ad50 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ad3c:	6839      	ldr	r1, [r7, #0]
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 fd31 	bl	800b7a6 <USBD_ClrFeature>
          break;
 800ad44:	e004      	b.n	800ad50 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ad46:	6839      	ldr	r1, [r7, #0]
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f000 fd88 	bl	800b85e <USBD_CtlError>
          break;
 800ad4e:	bf00      	nop
      }
      break;
 800ad50:	e004      	b.n	800ad5c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ad52:	6839      	ldr	r1, [r7, #0]
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 fd82 	bl	800b85e <USBD_CtlError>
      break;
 800ad5a:	bf00      	nop
  }

  return ret;
 800ad5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3710      	adds	r7, #16
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop

0800ad68 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b084      	sub	sp, #16
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad72:	2300      	movs	r3, #0
 800ad74:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	781b      	ldrb	r3, [r3, #0]
 800ad7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad7e:	2b40      	cmp	r3, #64	; 0x40
 800ad80:	d005      	beq.n	800ad8e <USBD_StdItfReq+0x26>
 800ad82:	2b40      	cmp	r3, #64	; 0x40
 800ad84:	d852      	bhi.n	800ae2c <USBD_StdItfReq+0xc4>
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d001      	beq.n	800ad8e <USBD_StdItfReq+0x26>
 800ad8a:	2b20      	cmp	r3, #32
 800ad8c:	d14e      	bne.n	800ae2c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad94:	b2db      	uxtb	r3, r3
 800ad96:	3b01      	subs	r3, #1
 800ad98:	2b02      	cmp	r3, #2
 800ad9a:	d840      	bhi.n	800ae1e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	889b      	ldrh	r3, [r3, #4]
 800ada0:	b2db      	uxtb	r3, r3
 800ada2:	2b01      	cmp	r3, #1
 800ada4:	d836      	bhi.n	800ae14 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	889b      	ldrh	r3, [r3, #4]
 800adaa:	b2db      	uxtb	r3, r3
 800adac:	4619      	mov	r1, r3
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f7ff fed9 	bl	800ab66 <USBD_CoreFindIF>
 800adb4:	4603      	mov	r3, r0
 800adb6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800adb8:	7bbb      	ldrb	r3, [r7, #14]
 800adba:	2bff      	cmp	r3, #255	; 0xff
 800adbc:	d01d      	beq.n	800adfa <USBD_StdItfReq+0x92>
 800adbe:	7bbb      	ldrb	r3, [r7, #14]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d11a      	bne.n	800adfa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800adc4:	7bba      	ldrb	r2, [r7, #14]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	32ae      	adds	r2, #174	; 0xae
 800adca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adce:	689b      	ldr	r3, [r3, #8]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d00f      	beq.n	800adf4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800add4:	7bba      	ldrb	r2, [r7, #14]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800addc:	7bba      	ldrb	r2, [r7, #14]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	32ae      	adds	r2, #174	; 0xae
 800ade2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ade6:	689b      	ldr	r3, [r3, #8]
 800ade8:	6839      	ldr	r1, [r7, #0]
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	4798      	blx	r3
 800adee:	4603      	mov	r3, r0
 800adf0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800adf2:	e004      	b.n	800adfe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800adf4:	2303      	movs	r3, #3
 800adf6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800adf8:	e001      	b.n	800adfe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800adfa:	2303      	movs	r3, #3
 800adfc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	88db      	ldrh	r3, [r3, #6]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d110      	bne.n	800ae28 <USBD_StdItfReq+0xc0>
 800ae06:	7bfb      	ldrb	r3, [r7, #15]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d10d      	bne.n	800ae28 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 fdf1 	bl	800b9f4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ae12:	e009      	b.n	800ae28 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ae14:	6839      	ldr	r1, [r7, #0]
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f000 fd21 	bl	800b85e <USBD_CtlError>
          break;
 800ae1c:	e004      	b.n	800ae28 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ae1e:	6839      	ldr	r1, [r7, #0]
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f000 fd1c 	bl	800b85e <USBD_CtlError>
          break;
 800ae26:	e000      	b.n	800ae2a <USBD_StdItfReq+0xc2>
          break;
 800ae28:	bf00      	nop
      }
      break;
 800ae2a:	e004      	b.n	800ae36 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ae2c:	6839      	ldr	r1, [r7, #0]
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f000 fd15 	bl	800b85e <USBD_CtlError>
      break;
 800ae34:	bf00      	nop
  }

  return ret;
 800ae36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3710      	adds	r7, #16
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b084      	sub	sp, #16
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	889b      	ldrh	r3, [r3, #4]
 800ae52:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae5c:	2b40      	cmp	r3, #64	; 0x40
 800ae5e:	d007      	beq.n	800ae70 <USBD_StdEPReq+0x30>
 800ae60:	2b40      	cmp	r3, #64	; 0x40
 800ae62:	f200 817f 	bhi.w	800b164 <USBD_StdEPReq+0x324>
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d02a      	beq.n	800aec0 <USBD_StdEPReq+0x80>
 800ae6a:	2b20      	cmp	r3, #32
 800ae6c:	f040 817a 	bne.w	800b164 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ae70:	7bbb      	ldrb	r3, [r7, #14]
 800ae72:	4619      	mov	r1, r3
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f7ff fe83 	bl	800ab80 <USBD_CoreFindEP>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae7e:	7b7b      	ldrb	r3, [r7, #13]
 800ae80:	2bff      	cmp	r3, #255	; 0xff
 800ae82:	f000 8174 	beq.w	800b16e <USBD_StdEPReq+0x32e>
 800ae86:	7b7b      	ldrb	r3, [r7, #13]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	f040 8170 	bne.w	800b16e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ae8e:	7b7a      	ldrb	r2, [r7, #13]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ae96:	7b7a      	ldrb	r2, [r7, #13]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	32ae      	adds	r2, #174	; 0xae
 800ae9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aea0:	689b      	ldr	r3, [r3, #8]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	f000 8163 	beq.w	800b16e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800aea8:	7b7a      	ldrb	r2, [r7, #13]
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	32ae      	adds	r2, #174	; 0xae
 800aeae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeb2:	689b      	ldr	r3, [r3, #8]
 800aeb4:	6839      	ldr	r1, [r7, #0]
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	4798      	blx	r3
 800aeba:	4603      	mov	r3, r0
 800aebc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800aebe:	e156      	b.n	800b16e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	785b      	ldrb	r3, [r3, #1]
 800aec4:	2b03      	cmp	r3, #3
 800aec6:	d008      	beq.n	800aeda <USBD_StdEPReq+0x9a>
 800aec8:	2b03      	cmp	r3, #3
 800aeca:	f300 8145 	bgt.w	800b158 <USBD_StdEPReq+0x318>
 800aece:	2b00      	cmp	r3, #0
 800aed0:	f000 809b 	beq.w	800b00a <USBD_StdEPReq+0x1ca>
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	d03c      	beq.n	800af52 <USBD_StdEPReq+0x112>
 800aed8:	e13e      	b.n	800b158 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aee0:	b2db      	uxtb	r3, r3
 800aee2:	2b02      	cmp	r3, #2
 800aee4:	d002      	beq.n	800aeec <USBD_StdEPReq+0xac>
 800aee6:	2b03      	cmp	r3, #3
 800aee8:	d016      	beq.n	800af18 <USBD_StdEPReq+0xd8>
 800aeea:	e02c      	b.n	800af46 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aeec:	7bbb      	ldrb	r3, [r7, #14]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d00d      	beq.n	800af0e <USBD_StdEPReq+0xce>
 800aef2:	7bbb      	ldrb	r3, [r7, #14]
 800aef4:	2b80      	cmp	r3, #128	; 0x80
 800aef6:	d00a      	beq.n	800af0e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aef8:	7bbb      	ldrb	r3, [r7, #14]
 800aefa:	4619      	mov	r1, r3
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f004 fae5 	bl	800f4cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800af02:	2180      	movs	r1, #128	; 0x80
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f004 fae1 	bl	800f4cc <USBD_LL_StallEP>
 800af0a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af0c:	e020      	b.n	800af50 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800af0e:	6839      	ldr	r1, [r7, #0]
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f000 fca4 	bl	800b85e <USBD_CtlError>
              break;
 800af16:	e01b      	b.n	800af50 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	885b      	ldrh	r3, [r3, #2]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d10e      	bne.n	800af3e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800af20:	7bbb      	ldrb	r3, [r7, #14]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d00b      	beq.n	800af3e <USBD_StdEPReq+0xfe>
 800af26:	7bbb      	ldrb	r3, [r7, #14]
 800af28:	2b80      	cmp	r3, #128	; 0x80
 800af2a:	d008      	beq.n	800af3e <USBD_StdEPReq+0xfe>
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	88db      	ldrh	r3, [r3, #6]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d104      	bne.n	800af3e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800af34:	7bbb      	ldrb	r3, [r7, #14]
 800af36:	4619      	mov	r1, r3
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f004 fac7 	bl	800f4cc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 fd58 	bl	800b9f4 <USBD_CtlSendStatus>

              break;
 800af44:	e004      	b.n	800af50 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800af46:	6839      	ldr	r1, [r7, #0]
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f000 fc88 	bl	800b85e <USBD_CtlError>
              break;
 800af4e:	bf00      	nop
          }
          break;
 800af50:	e107      	b.n	800b162 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	2b02      	cmp	r3, #2
 800af5c:	d002      	beq.n	800af64 <USBD_StdEPReq+0x124>
 800af5e:	2b03      	cmp	r3, #3
 800af60:	d016      	beq.n	800af90 <USBD_StdEPReq+0x150>
 800af62:	e04b      	b.n	800affc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af64:	7bbb      	ldrb	r3, [r7, #14]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d00d      	beq.n	800af86 <USBD_StdEPReq+0x146>
 800af6a:	7bbb      	ldrb	r3, [r7, #14]
 800af6c:	2b80      	cmp	r3, #128	; 0x80
 800af6e:	d00a      	beq.n	800af86 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800af70:	7bbb      	ldrb	r3, [r7, #14]
 800af72:	4619      	mov	r1, r3
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f004 faa9 	bl	800f4cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800af7a:	2180      	movs	r1, #128	; 0x80
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f004 faa5 	bl	800f4cc <USBD_LL_StallEP>
 800af82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af84:	e040      	b.n	800b008 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800af86:	6839      	ldr	r1, [r7, #0]
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f000 fc68 	bl	800b85e <USBD_CtlError>
              break;
 800af8e:	e03b      	b.n	800b008 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	885b      	ldrh	r3, [r3, #2]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d136      	bne.n	800b006 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800af98:	7bbb      	ldrb	r3, [r7, #14]
 800af9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d004      	beq.n	800afac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800afa2:	7bbb      	ldrb	r3, [r7, #14]
 800afa4:	4619      	mov	r1, r3
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f004 faaf 	bl	800f50a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f000 fd21 	bl	800b9f4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800afb2:	7bbb      	ldrb	r3, [r7, #14]
 800afb4:	4619      	mov	r1, r3
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f7ff fde2 	bl	800ab80 <USBD_CoreFindEP>
 800afbc:	4603      	mov	r3, r0
 800afbe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800afc0:	7b7b      	ldrb	r3, [r7, #13]
 800afc2:	2bff      	cmp	r3, #255	; 0xff
 800afc4:	d01f      	beq.n	800b006 <USBD_StdEPReq+0x1c6>
 800afc6:	7b7b      	ldrb	r3, [r7, #13]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d11c      	bne.n	800b006 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800afcc:	7b7a      	ldrb	r2, [r7, #13]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800afd4:	7b7a      	ldrb	r2, [r7, #13]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	32ae      	adds	r2, #174	; 0xae
 800afda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afde:	689b      	ldr	r3, [r3, #8]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d010      	beq.n	800b006 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800afe4:	7b7a      	ldrb	r2, [r7, #13]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	32ae      	adds	r2, #174	; 0xae
 800afea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afee:	689b      	ldr	r3, [r3, #8]
 800aff0:	6839      	ldr	r1, [r7, #0]
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	4798      	blx	r3
 800aff6:	4603      	mov	r3, r0
 800aff8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800affa:	e004      	b.n	800b006 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800affc:	6839      	ldr	r1, [r7, #0]
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 fc2d 	bl	800b85e <USBD_CtlError>
              break;
 800b004:	e000      	b.n	800b008 <USBD_StdEPReq+0x1c8>
              break;
 800b006:	bf00      	nop
          }
          break;
 800b008:	e0ab      	b.n	800b162 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b010:	b2db      	uxtb	r3, r3
 800b012:	2b02      	cmp	r3, #2
 800b014:	d002      	beq.n	800b01c <USBD_StdEPReq+0x1dc>
 800b016:	2b03      	cmp	r3, #3
 800b018:	d032      	beq.n	800b080 <USBD_StdEPReq+0x240>
 800b01a:	e097      	b.n	800b14c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b01c:	7bbb      	ldrb	r3, [r7, #14]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d007      	beq.n	800b032 <USBD_StdEPReq+0x1f2>
 800b022:	7bbb      	ldrb	r3, [r7, #14]
 800b024:	2b80      	cmp	r3, #128	; 0x80
 800b026:	d004      	beq.n	800b032 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b028:	6839      	ldr	r1, [r7, #0]
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 fc17 	bl	800b85e <USBD_CtlError>
                break;
 800b030:	e091      	b.n	800b156 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b032:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b036:	2b00      	cmp	r3, #0
 800b038:	da0b      	bge.n	800b052 <USBD_StdEPReq+0x212>
 800b03a:	7bbb      	ldrb	r3, [r7, #14]
 800b03c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b040:	4613      	mov	r3, r2
 800b042:	009b      	lsls	r3, r3, #2
 800b044:	4413      	add	r3, r2
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	3310      	adds	r3, #16
 800b04a:	687a      	ldr	r2, [r7, #4]
 800b04c:	4413      	add	r3, r2
 800b04e:	3304      	adds	r3, #4
 800b050:	e00b      	b.n	800b06a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b052:	7bbb      	ldrb	r3, [r7, #14]
 800b054:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b058:	4613      	mov	r3, r2
 800b05a:	009b      	lsls	r3, r3, #2
 800b05c:	4413      	add	r3, r2
 800b05e:	009b      	lsls	r3, r3, #2
 800b060:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b064:	687a      	ldr	r2, [r7, #4]
 800b066:	4413      	add	r3, r2
 800b068:	3304      	adds	r3, #4
 800b06a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	2200      	movs	r2, #0
 800b070:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	2202      	movs	r2, #2
 800b076:	4619      	mov	r1, r3
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f000 fc61 	bl	800b940 <USBD_CtlSendData>
              break;
 800b07e:	e06a      	b.n	800b156 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b080:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b084:	2b00      	cmp	r3, #0
 800b086:	da11      	bge.n	800b0ac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b088:	7bbb      	ldrb	r3, [r7, #14]
 800b08a:	f003 020f 	and.w	r2, r3, #15
 800b08e:	6879      	ldr	r1, [r7, #4]
 800b090:	4613      	mov	r3, r2
 800b092:	009b      	lsls	r3, r3, #2
 800b094:	4413      	add	r3, r2
 800b096:	009b      	lsls	r3, r3, #2
 800b098:	440b      	add	r3, r1
 800b09a:	3324      	adds	r3, #36	; 0x24
 800b09c:	881b      	ldrh	r3, [r3, #0]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d117      	bne.n	800b0d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b0a2:	6839      	ldr	r1, [r7, #0]
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f000 fbda 	bl	800b85e <USBD_CtlError>
                  break;
 800b0aa:	e054      	b.n	800b156 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b0ac:	7bbb      	ldrb	r3, [r7, #14]
 800b0ae:	f003 020f 	and.w	r2, r3, #15
 800b0b2:	6879      	ldr	r1, [r7, #4]
 800b0b4:	4613      	mov	r3, r2
 800b0b6:	009b      	lsls	r3, r3, #2
 800b0b8:	4413      	add	r3, r2
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	440b      	add	r3, r1
 800b0be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b0c2:	881b      	ldrh	r3, [r3, #0]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d104      	bne.n	800b0d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b0c8:	6839      	ldr	r1, [r7, #0]
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 fbc7 	bl	800b85e <USBD_CtlError>
                  break;
 800b0d0:	e041      	b.n	800b156 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	da0b      	bge.n	800b0f2 <USBD_StdEPReq+0x2b2>
 800b0da:	7bbb      	ldrb	r3, [r7, #14]
 800b0dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b0e0:	4613      	mov	r3, r2
 800b0e2:	009b      	lsls	r3, r3, #2
 800b0e4:	4413      	add	r3, r2
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	3310      	adds	r3, #16
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	4413      	add	r3, r2
 800b0ee:	3304      	adds	r3, #4
 800b0f0:	e00b      	b.n	800b10a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b0f2:	7bbb      	ldrb	r3, [r7, #14]
 800b0f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0f8:	4613      	mov	r3, r2
 800b0fa:	009b      	lsls	r3, r3, #2
 800b0fc:	4413      	add	r3, r2
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	4413      	add	r3, r2
 800b108:	3304      	adds	r3, #4
 800b10a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b10c:	7bbb      	ldrb	r3, [r7, #14]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d002      	beq.n	800b118 <USBD_StdEPReq+0x2d8>
 800b112:	7bbb      	ldrb	r3, [r7, #14]
 800b114:	2b80      	cmp	r3, #128	; 0x80
 800b116:	d103      	bne.n	800b120 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	2200      	movs	r2, #0
 800b11c:	601a      	str	r2, [r3, #0]
 800b11e:	e00e      	b.n	800b13e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b120:	7bbb      	ldrb	r3, [r7, #14]
 800b122:	4619      	mov	r1, r3
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f004 fa0f 	bl	800f548 <USBD_LL_IsStallEP>
 800b12a:	4603      	mov	r3, r0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d003      	beq.n	800b138 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	2201      	movs	r2, #1
 800b134:	601a      	str	r2, [r3, #0]
 800b136:	e002      	b.n	800b13e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	2200      	movs	r2, #0
 800b13c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	2202      	movs	r2, #2
 800b142:	4619      	mov	r1, r3
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f000 fbfb 	bl	800b940 <USBD_CtlSendData>
              break;
 800b14a:	e004      	b.n	800b156 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b14c:	6839      	ldr	r1, [r7, #0]
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f000 fb85 	bl	800b85e <USBD_CtlError>
              break;
 800b154:	bf00      	nop
          }
          break;
 800b156:	e004      	b.n	800b162 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b158:	6839      	ldr	r1, [r7, #0]
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f000 fb7f 	bl	800b85e <USBD_CtlError>
          break;
 800b160:	bf00      	nop
      }
      break;
 800b162:	e005      	b.n	800b170 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b164:	6839      	ldr	r1, [r7, #0]
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 fb79 	bl	800b85e <USBD_CtlError>
      break;
 800b16c:	e000      	b.n	800b170 <USBD_StdEPReq+0x330>
      break;
 800b16e:	bf00      	nop
  }

  return ret;
 800b170:	7bfb      	ldrb	r3, [r7, #15]
}
 800b172:	4618      	mov	r0, r3
 800b174:	3710      	adds	r7, #16
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
	...

0800b17c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b084      	sub	sp, #16
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b186:	2300      	movs	r3, #0
 800b188:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b18a:	2300      	movs	r3, #0
 800b18c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b18e:	2300      	movs	r3, #0
 800b190:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	885b      	ldrh	r3, [r3, #2]
 800b196:	0a1b      	lsrs	r3, r3, #8
 800b198:	b29b      	uxth	r3, r3
 800b19a:	3b01      	subs	r3, #1
 800b19c:	2b0e      	cmp	r3, #14
 800b19e:	f200 8152 	bhi.w	800b446 <USBD_GetDescriptor+0x2ca>
 800b1a2:	a201      	add	r2, pc, #4	; (adr r2, 800b1a8 <USBD_GetDescriptor+0x2c>)
 800b1a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1a8:	0800b219 	.word	0x0800b219
 800b1ac:	0800b231 	.word	0x0800b231
 800b1b0:	0800b271 	.word	0x0800b271
 800b1b4:	0800b447 	.word	0x0800b447
 800b1b8:	0800b447 	.word	0x0800b447
 800b1bc:	0800b3e7 	.word	0x0800b3e7
 800b1c0:	0800b413 	.word	0x0800b413
 800b1c4:	0800b447 	.word	0x0800b447
 800b1c8:	0800b447 	.word	0x0800b447
 800b1cc:	0800b447 	.word	0x0800b447
 800b1d0:	0800b447 	.word	0x0800b447
 800b1d4:	0800b447 	.word	0x0800b447
 800b1d8:	0800b447 	.word	0x0800b447
 800b1dc:	0800b447 	.word	0x0800b447
 800b1e0:	0800b1e5 	.word	0x0800b1e5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1ea:	69db      	ldr	r3, [r3, #28]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d00b      	beq.n	800b208 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1f6:	69db      	ldr	r3, [r3, #28]
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	7c12      	ldrb	r2, [r2, #16]
 800b1fc:	f107 0108 	add.w	r1, r7, #8
 800b200:	4610      	mov	r0, r2
 800b202:	4798      	blx	r3
 800b204:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b206:	e126      	b.n	800b456 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b208:	6839      	ldr	r1, [r7, #0]
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f000 fb27 	bl	800b85e <USBD_CtlError>
        err++;
 800b210:	7afb      	ldrb	r3, [r7, #11]
 800b212:	3301      	adds	r3, #1
 800b214:	72fb      	strb	r3, [r7, #11]
      break;
 800b216:	e11e      	b.n	800b456 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	7c12      	ldrb	r2, [r2, #16]
 800b224:	f107 0108 	add.w	r1, r7, #8
 800b228:	4610      	mov	r0, r2
 800b22a:	4798      	blx	r3
 800b22c:	60f8      	str	r0, [r7, #12]
      break;
 800b22e:	e112      	b.n	800b456 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	7c1b      	ldrb	r3, [r3, #16]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d10d      	bne.n	800b254 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b23e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b240:	f107 0208 	add.w	r2, r7, #8
 800b244:	4610      	mov	r0, r2
 800b246:	4798      	blx	r3
 800b248:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	3301      	adds	r3, #1
 800b24e:	2202      	movs	r2, #2
 800b250:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b252:	e100      	b.n	800b456 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b25a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b25c:	f107 0208 	add.w	r2, r7, #8
 800b260:	4610      	mov	r0, r2
 800b262:	4798      	blx	r3
 800b264:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	3301      	adds	r3, #1
 800b26a:	2202      	movs	r2, #2
 800b26c:	701a      	strb	r2, [r3, #0]
      break;
 800b26e:	e0f2      	b.n	800b456 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	885b      	ldrh	r3, [r3, #2]
 800b274:	b2db      	uxtb	r3, r3
 800b276:	2b05      	cmp	r3, #5
 800b278:	f200 80ac 	bhi.w	800b3d4 <USBD_GetDescriptor+0x258>
 800b27c:	a201      	add	r2, pc, #4	; (adr r2, 800b284 <USBD_GetDescriptor+0x108>)
 800b27e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b282:	bf00      	nop
 800b284:	0800b29d 	.word	0x0800b29d
 800b288:	0800b2d1 	.word	0x0800b2d1
 800b28c:	0800b305 	.word	0x0800b305
 800b290:	0800b339 	.word	0x0800b339
 800b294:	0800b36d 	.word	0x0800b36d
 800b298:	0800b3a1 	.word	0x0800b3a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d00b      	beq.n	800b2c0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2ae:	685b      	ldr	r3, [r3, #4]
 800b2b0:	687a      	ldr	r2, [r7, #4]
 800b2b2:	7c12      	ldrb	r2, [r2, #16]
 800b2b4:	f107 0108 	add.w	r1, r7, #8
 800b2b8:	4610      	mov	r0, r2
 800b2ba:	4798      	blx	r3
 800b2bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2be:	e091      	b.n	800b3e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b2c0:	6839      	ldr	r1, [r7, #0]
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f000 facb 	bl	800b85e <USBD_CtlError>
            err++;
 800b2c8:	7afb      	ldrb	r3, [r7, #11]
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	72fb      	strb	r3, [r7, #11]
          break;
 800b2ce:	e089      	b.n	800b3e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2d6:	689b      	ldr	r3, [r3, #8]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d00b      	beq.n	800b2f4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2e2:	689b      	ldr	r3, [r3, #8]
 800b2e4:	687a      	ldr	r2, [r7, #4]
 800b2e6:	7c12      	ldrb	r2, [r2, #16]
 800b2e8:	f107 0108 	add.w	r1, r7, #8
 800b2ec:	4610      	mov	r0, r2
 800b2ee:	4798      	blx	r3
 800b2f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2f2:	e077      	b.n	800b3e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b2f4:	6839      	ldr	r1, [r7, #0]
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f000 fab1 	bl	800b85e <USBD_CtlError>
            err++;
 800b2fc:	7afb      	ldrb	r3, [r7, #11]
 800b2fe:	3301      	adds	r3, #1
 800b300:	72fb      	strb	r3, [r7, #11]
          break;
 800b302:	e06f      	b.n	800b3e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b30a:	68db      	ldr	r3, [r3, #12]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d00b      	beq.n	800b328 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b316:	68db      	ldr	r3, [r3, #12]
 800b318:	687a      	ldr	r2, [r7, #4]
 800b31a:	7c12      	ldrb	r2, [r2, #16]
 800b31c:	f107 0108 	add.w	r1, r7, #8
 800b320:	4610      	mov	r0, r2
 800b322:	4798      	blx	r3
 800b324:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b326:	e05d      	b.n	800b3e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b328:	6839      	ldr	r1, [r7, #0]
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 fa97 	bl	800b85e <USBD_CtlError>
            err++;
 800b330:	7afb      	ldrb	r3, [r7, #11]
 800b332:	3301      	adds	r3, #1
 800b334:	72fb      	strb	r3, [r7, #11]
          break;
 800b336:	e055      	b.n	800b3e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b33e:	691b      	ldr	r3, [r3, #16]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d00b      	beq.n	800b35c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b34a:	691b      	ldr	r3, [r3, #16]
 800b34c:	687a      	ldr	r2, [r7, #4]
 800b34e:	7c12      	ldrb	r2, [r2, #16]
 800b350:	f107 0108 	add.w	r1, r7, #8
 800b354:	4610      	mov	r0, r2
 800b356:	4798      	blx	r3
 800b358:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b35a:	e043      	b.n	800b3e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b35c:	6839      	ldr	r1, [r7, #0]
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 fa7d 	bl	800b85e <USBD_CtlError>
            err++;
 800b364:	7afb      	ldrb	r3, [r7, #11]
 800b366:	3301      	adds	r3, #1
 800b368:	72fb      	strb	r3, [r7, #11]
          break;
 800b36a:	e03b      	b.n	800b3e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b372:	695b      	ldr	r3, [r3, #20]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d00b      	beq.n	800b390 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b37e:	695b      	ldr	r3, [r3, #20]
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	7c12      	ldrb	r2, [r2, #16]
 800b384:	f107 0108 	add.w	r1, r7, #8
 800b388:	4610      	mov	r0, r2
 800b38a:	4798      	blx	r3
 800b38c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b38e:	e029      	b.n	800b3e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b390:	6839      	ldr	r1, [r7, #0]
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f000 fa63 	bl	800b85e <USBD_CtlError>
            err++;
 800b398:	7afb      	ldrb	r3, [r7, #11]
 800b39a:	3301      	adds	r3, #1
 800b39c:	72fb      	strb	r3, [r7, #11]
          break;
 800b39e:	e021      	b.n	800b3e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3a6:	699b      	ldr	r3, [r3, #24]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d00b      	beq.n	800b3c4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3b2:	699b      	ldr	r3, [r3, #24]
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	7c12      	ldrb	r2, [r2, #16]
 800b3b8:	f107 0108 	add.w	r1, r7, #8
 800b3bc:	4610      	mov	r0, r2
 800b3be:	4798      	blx	r3
 800b3c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3c2:	e00f      	b.n	800b3e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b3c4:	6839      	ldr	r1, [r7, #0]
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 fa49 	bl	800b85e <USBD_CtlError>
            err++;
 800b3cc:	7afb      	ldrb	r3, [r7, #11]
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	72fb      	strb	r3, [r7, #11]
          break;
 800b3d2:	e007      	b.n	800b3e4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b3d4:	6839      	ldr	r1, [r7, #0]
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f000 fa41 	bl	800b85e <USBD_CtlError>
          err++;
 800b3dc:	7afb      	ldrb	r3, [r7, #11]
 800b3de:	3301      	adds	r3, #1
 800b3e0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b3e2:	bf00      	nop
      }
      break;
 800b3e4:	e037      	b.n	800b456 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	7c1b      	ldrb	r3, [r3, #16]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d109      	bne.n	800b402 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3f6:	f107 0208 	add.w	r2, r7, #8
 800b3fa:	4610      	mov	r0, r2
 800b3fc:	4798      	blx	r3
 800b3fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b400:	e029      	b.n	800b456 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b402:	6839      	ldr	r1, [r7, #0]
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f000 fa2a 	bl	800b85e <USBD_CtlError>
        err++;
 800b40a:	7afb      	ldrb	r3, [r7, #11]
 800b40c:	3301      	adds	r3, #1
 800b40e:	72fb      	strb	r3, [r7, #11]
      break;
 800b410:	e021      	b.n	800b456 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	7c1b      	ldrb	r3, [r3, #16]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d10d      	bne.n	800b436 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b422:	f107 0208 	add.w	r2, r7, #8
 800b426:	4610      	mov	r0, r2
 800b428:	4798      	blx	r3
 800b42a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	3301      	adds	r3, #1
 800b430:	2207      	movs	r2, #7
 800b432:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b434:	e00f      	b.n	800b456 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b436:	6839      	ldr	r1, [r7, #0]
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f000 fa10 	bl	800b85e <USBD_CtlError>
        err++;
 800b43e:	7afb      	ldrb	r3, [r7, #11]
 800b440:	3301      	adds	r3, #1
 800b442:	72fb      	strb	r3, [r7, #11]
      break;
 800b444:	e007      	b.n	800b456 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b446:	6839      	ldr	r1, [r7, #0]
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f000 fa08 	bl	800b85e <USBD_CtlError>
      err++;
 800b44e:	7afb      	ldrb	r3, [r7, #11]
 800b450:	3301      	adds	r3, #1
 800b452:	72fb      	strb	r3, [r7, #11]
      break;
 800b454:	bf00      	nop
  }

  if (err != 0U)
 800b456:	7afb      	ldrb	r3, [r7, #11]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d11e      	bne.n	800b49a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	88db      	ldrh	r3, [r3, #6]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d016      	beq.n	800b492 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b464:	893b      	ldrh	r3, [r7, #8]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d00e      	beq.n	800b488 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	88da      	ldrh	r2, [r3, #6]
 800b46e:	893b      	ldrh	r3, [r7, #8]
 800b470:	4293      	cmp	r3, r2
 800b472:	bf28      	it	cs
 800b474:	4613      	movcs	r3, r2
 800b476:	b29b      	uxth	r3, r3
 800b478:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b47a:	893b      	ldrh	r3, [r7, #8]
 800b47c:	461a      	mov	r2, r3
 800b47e:	68f9      	ldr	r1, [r7, #12]
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f000 fa5d 	bl	800b940 <USBD_CtlSendData>
 800b486:	e009      	b.n	800b49c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b488:	6839      	ldr	r1, [r7, #0]
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 f9e7 	bl	800b85e <USBD_CtlError>
 800b490:	e004      	b.n	800b49c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f000 faae 	bl	800b9f4 <USBD_CtlSendStatus>
 800b498:	e000      	b.n	800b49c <USBD_GetDescriptor+0x320>
    return;
 800b49a:	bf00      	nop
  }
}
 800b49c:	3710      	adds	r7, #16
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}
 800b4a2:	bf00      	nop

0800b4a4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	889b      	ldrh	r3, [r3, #4]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d131      	bne.n	800b51a <USBD_SetAddress+0x76>
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	88db      	ldrh	r3, [r3, #6]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d12d      	bne.n	800b51a <USBD_SetAddress+0x76>
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	885b      	ldrh	r3, [r3, #2]
 800b4c2:	2b7f      	cmp	r3, #127	; 0x7f
 800b4c4:	d829      	bhi.n	800b51a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	885b      	ldrh	r3, [r3, #2]
 800b4ca:	b2db      	uxtb	r3, r3
 800b4cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4d8:	b2db      	uxtb	r3, r3
 800b4da:	2b03      	cmp	r3, #3
 800b4dc:	d104      	bne.n	800b4e8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b4de:	6839      	ldr	r1, [r7, #0]
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f000 f9bc 	bl	800b85e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4e6:	e01d      	b.n	800b524 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	7bfa      	ldrb	r2, [r7, #15]
 800b4ec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b4f0:	7bfb      	ldrb	r3, [r7, #15]
 800b4f2:	4619      	mov	r1, r3
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f004 f853 	bl	800f5a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f000 fa7a 	bl	800b9f4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b500:	7bfb      	ldrb	r3, [r7, #15]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d004      	beq.n	800b510 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2202      	movs	r2, #2
 800b50a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b50e:	e009      	b.n	800b524 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2201      	movs	r2, #1
 800b514:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b518:	e004      	b.n	800b524 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b51a:	6839      	ldr	r1, [r7, #0]
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f000 f99e 	bl	800b85e <USBD_CtlError>
  }
}
 800b522:	bf00      	nop
 800b524:	bf00      	nop
 800b526:	3710      	adds	r7, #16
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b536:	2300      	movs	r3, #0
 800b538:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	885b      	ldrh	r3, [r3, #2]
 800b53e:	b2da      	uxtb	r2, r3
 800b540:	4b4e      	ldr	r3, [pc, #312]	; (800b67c <USBD_SetConfig+0x150>)
 800b542:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b544:	4b4d      	ldr	r3, [pc, #308]	; (800b67c <USBD_SetConfig+0x150>)
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	2b01      	cmp	r3, #1
 800b54a:	d905      	bls.n	800b558 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b54c:	6839      	ldr	r1, [r7, #0]
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 f985 	bl	800b85e <USBD_CtlError>
    return USBD_FAIL;
 800b554:	2303      	movs	r3, #3
 800b556:	e08c      	b.n	800b672 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b55e:	b2db      	uxtb	r3, r3
 800b560:	2b02      	cmp	r3, #2
 800b562:	d002      	beq.n	800b56a <USBD_SetConfig+0x3e>
 800b564:	2b03      	cmp	r3, #3
 800b566:	d029      	beq.n	800b5bc <USBD_SetConfig+0x90>
 800b568:	e075      	b.n	800b656 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b56a:	4b44      	ldr	r3, [pc, #272]	; (800b67c <USBD_SetConfig+0x150>)
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d020      	beq.n	800b5b4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b572:	4b42      	ldr	r3, [pc, #264]	; (800b67c <USBD_SetConfig+0x150>)
 800b574:	781b      	ldrb	r3, [r3, #0]
 800b576:	461a      	mov	r2, r3
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b57c:	4b3f      	ldr	r3, [pc, #252]	; (800b67c <USBD_SetConfig+0x150>)
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	4619      	mov	r1, r3
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f7fe ffbd 	bl	800a502 <USBD_SetClassConfig>
 800b588:	4603      	mov	r3, r0
 800b58a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b58c:	7bfb      	ldrb	r3, [r7, #15]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d008      	beq.n	800b5a4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b592:	6839      	ldr	r1, [r7, #0]
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f000 f962 	bl	800b85e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2202      	movs	r2, #2
 800b59e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b5a2:	e065      	b.n	800b670 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f000 fa25 	bl	800b9f4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2203      	movs	r2, #3
 800b5ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b5b2:	e05d      	b.n	800b670 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 fa1d 	bl	800b9f4 <USBD_CtlSendStatus>
      break;
 800b5ba:	e059      	b.n	800b670 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b5bc:	4b2f      	ldr	r3, [pc, #188]	; (800b67c <USBD_SetConfig+0x150>)
 800b5be:	781b      	ldrb	r3, [r3, #0]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d112      	bne.n	800b5ea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2202      	movs	r2, #2
 800b5c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b5cc:	4b2b      	ldr	r3, [pc, #172]	; (800b67c <USBD_SetConfig+0x150>)
 800b5ce:	781b      	ldrb	r3, [r3, #0]
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b5d6:	4b29      	ldr	r3, [pc, #164]	; (800b67c <USBD_SetConfig+0x150>)
 800b5d8:	781b      	ldrb	r3, [r3, #0]
 800b5da:	4619      	mov	r1, r3
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f7fe ffac 	bl	800a53a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 fa06 	bl	800b9f4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b5e8:	e042      	b.n	800b670 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b5ea:	4b24      	ldr	r3, [pc, #144]	; (800b67c <USBD_SetConfig+0x150>)
 800b5ec:	781b      	ldrb	r3, [r3, #0]
 800b5ee:	461a      	mov	r2, r3
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d02a      	beq.n	800b64e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	4619      	mov	r1, r3
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f7fe ff9a 	bl	800a53a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b606:	4b1d      	ldr	r3, [pc, #116]	; (800b67c <USBD_SetConfig+0x150>)
 800b608:	781b      	ldrb	r3, [r3, #0]
 800b60a:	461a      	mov	r2, r3
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b610:	4b1a      	ldr	r3, [pc, #104]	; (800b67c <USBD_SetConfig+0x150>)
 800b612:	781b      	ldrb	r3, [r3, #0]
 800b614:	4619      	mov	r1, r3
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f7fe ff73 	bl	800a502 <USBD_SetClassConfig>
 800b61c:	4603      	mov	r3, r0
 800b61e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b620:	7bfb      	ldrb	r3, [r7, #15]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00f      	beq.n	800b646 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b626:	6839      	ldr	r1, [r7, #0]
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 f918 	bl	800b85e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	b2db      	uxtb	r3, r3
 800b634:	4619      	mov	r1, r3
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f7fe ff7f 	bl	800a53a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2202      	movs	r2, #2
 800b640:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b644:	e014      	b.n	800b670 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 f9d4 	bl	800b9f4 <USBD_CtlSendStatus>
      break;
 800b64c:	e010      	b.n	800b670 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 f9d0 	bl	800b9f4 <USBD_CtlSendStatus>
      break;
 800b654:	e00c      	b.n	800b670 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b656:	6839      	ldr	r1, [r7, #0]
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f000 f900 	bl	800b85e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b65e:	4b07      	ldr	r3, [pc, #28]	; (800b67c <USBD_SetConfig+0x150>)
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	4619      	mov	r1, r3
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f7fe ff68 	bl	800a53a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b66a:	2303      	movs	r3, #3
 800b66c:	73fb      	strb	r3, [r7, #15]
      break;
 800b66e:	bf00      	nop
  }

  return ret;
 800b670:	7bfb      	ldrb	r3, [r7, #15]
}
 800b672:	4618      	mov	r0, r3
 800b674:	3710      	adds	r7, #16
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	200032b0 	.word	0x200032b0

0800b680 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b082      	sub	sp, #8
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	88db      	ldrh	r3, [r3, #6]
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d004      	beq.n	800b69c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b692:	6839      	ldr	r1, [r7, #0]
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f000 f8e2 	bl	800b85e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b69a:	e023      	b.n	800b6e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6a2:	b2db      	uxtb	r3, r3
 800b6a4:	2b02      	cmp	r3, #2
 800b6a6:	dc02      	bgt.n	800b6ae <USBD_GetConfig+0x2e>
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	dc03      	bgt.n	800b6b4 <USBD_GetConfig+0x34>
 800b6ac:	e015      	b.n	800b6da <USBD_GetConfig+0x5a>
 800b6ae:	2b03      	cmp	r3, #3
 800b6b0:	d00b      	beq.n	800b6ca <USBD_GetConfig+0x4a>
 800b6b2:	e012      	b.n	800b6da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	3308      	adds	r3, #8
 800b6be:	2201      	movs	r2, #1
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f000 f93c 	bl	800b940 <USBD_CtlSendData>
        break;
 800b6c8:	e00c      	b.n	800b6e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	3304      	adds	r3, #4
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 f934 	bl	800b940 <USBD_CtlSendData>
        break;
 800b6d8:	e004      	b.n	800b6e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b6da:	6839      	ldr	r1, [r7, #0]
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f000 f8be 	bl	800b85e <USBD_CtlError>
        break;
 800b6e2:	bf00      	nop
}
 800b6e4:	bf00      	nop
 800b6e6:	3708      	adds	r7, #8
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b082      	sub	sp, #8
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6fc:	b2db      	uxtb	r3, r3
 800b6fe:	3b01      	subs	r3, #1
 800b700:	2b02      	cmp	r3, #2
 800b702:	d81e      	bhi.n	800b742 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	88db      	ldrh	r3, [r3, #6]
 800b708:	2b02      	cmp	r3, #2
 800b70a:	d004      	beq.n	800b716 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b70c:	6839      	ldr	r1, [r7, #0]
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f000 f8a5 	bl	800b85e <USBD_CtlError>
        break;
 800b714:	e01a      	b.n	800b74c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2201      	movs	r2, #1
 800b71a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b722:	2b00      	cmp	r3, #0
 800b724:	d005      	beq.n	800b732 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	68db      	ldr	r3, [r3, #12]
 800b72a:	f043 0202 	orr.w	r2, r3, #2
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	330c      	adds	r3, #12
 800b736:	2202      	movs	r2, #2
 800b738:	4619      	mov	r1, r3
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 f900 	bl	800b940 <USBD_CtlSendData>
      break;
 800b740:	e004      	b.n	800b74c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b742:	6839      	ldr	r1, [r7, #0]
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f000 f88a 	bl	800b85e <USBD_CtlError>
      break;
 800b74a:	bf00      	nop
  }
}
 800b74c:	bf00      	nop
 800b74e:	3708      	adds	r7, #8
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b082      	sub	sp, #8
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	885b      	ldrh	r3, [r3, #2]
 800b762:	2b01      	cmp	r3, #1
 800b764:	d107      	bne.n	800b776 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2201      	movs	r2, #1
 800b76a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 f940 	bl	800b9f4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b774:	e013      	b.n	800b79e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	885b      	ldrh	r3, [r3, #2]
 800b77a:	2b02      	cmp	r3, #2
 800b77c:	d10b      	bne.n	800b796 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	889b      	ldrh	r3, [r3, #4]
 800b782:	0a1b      	lsrs	r3, r3, #8
 800b784:	b29b      	uxth	r3, r3
 800b786:	b2da      	uxtb	r2, r3
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 f930 	bl	800b9f4 <USBD_CtlSendStatus>
}
 800b794:	e003      	b.n	800b79e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b796:	6839      	ldr	r1, [r7, #0]
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 f860 	bl	800b85e <USBD_CtlError>
}
 800b79e:	bf00      	nop
 800b7a0:	3708      	adds	r7, #8
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}

0800b7a6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7a6:	b580      	push	{r7, lr}
 800b7a8:	b082      	sub	sp, #8
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
 800b7ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7b6:	b2db      	uxtb	r3, r3
 800b7b8:	3b01      	subs	r3, #1
 800b7ba:	2b02      	cmp	r3, #2
 800b7bc:	d80b      	bhi.n	800b7d6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	885b      	ldrh	r3, [r3, #2]
 800b7c2:	2b01      	cmp	r3, #1
 800b7c4:	d10c      	bne.n	800b7e0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f000 f910 	bl	800b9f4 <USBD_CtlSendStatus>
      }
      break;
 800b7d4:	e004      	b.n	800b7e0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b7d6:	6839      	ldr	r1, [r7, #0]
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f000 f840 	bl	800b85e <USBD_CtlError>
      break;
 800b7de:	e000      	b.n	800b7e2 <USBD_ClrFeature+0x3c>
      break;
 800b7e0:	bf00      	nop
  }
}
 800b7e2:	bf00      	nop
 800b7e4:	3708      	adds	r7, #8
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}

0800b7ea <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b7ea:	b580      	push	{r7, lr}
 800b7ec:	b084      	sub	sp, #16
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
 800b7f2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	781a      	ldrb	r2, [r3, #0]
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	3301      	adds	r3, #1
 800b804:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	781a      	ldrb	r2, [r3, #0]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	3301      	adds	r3, #1
 800b812:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b814:	68f8      	ldr	r0, [r7, #12]
 800b816:	f7ff fa17 	bl	800ac48 <SWAPBYTE>
 800b81a:	4603      	mov	r3, r0
 800b81c:	461a      	mov	r2, r3
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	3301      	adds	r3, #1
 800b826:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	3301      	adds	r3, #1
 800b82c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b82e:	68f8      	ldr	r0, [r7, #12]
 800b830:	f7ff fa0a 	bl	800ac48 <SWAPBYTE>
 800b834:	4603      	mov	r3, r0
 800b836:	461a      	mov	r2, r3
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	3301      	adds	r3, #1
 800b840:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	3301      	adds	r3, #1
 800b846:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b848:	68f8      	ldr	r0, [r7, #12]
 800b84a:	f7ff f9fd 	bl	800ac48 <SWAPBYTE>
 800b84e:	4603      	mov	r3, r0
 800b850:	461a      	mov	r2, r3
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	80da      	strh	r2, [r3, #6]
}
 800b856:	bf00      	nop
 800b858:	3710      	adds	r7, #16
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}

0800b85e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b85e:	b580      	push	{r7, lr}
 800b860:	b082      	sub	sp, #8
 800b862:	af00      	add	r7, sp, #0
 800b864:	6078      	str	r0, [r7, #4]
 800b866:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b868:	2180      	movs	r1, #128	; 0x80
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f003 fe2e 	bl	800f4cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b870:	2100      	movs	r1, #0
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f003 fe2a 	bl	800f4cc <USBD_LL_StallEP>
}
 800b878:	bf00      	nop
 800b87a:	3708      	adds	r7, #8
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}

0800b880 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b086      	sub	sp, #24
 800b884:	af00      	add	r7, sp, #0
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	60b9      	str	r1, [r7, #8]
 800b88a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b88c:	2300      	movs	r3, #0
 800b88e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d036      	beq.n	800b904 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b89a:	6938      	ldr	r0, [r7, #16]
 800b89c:	f000 f836 	bl	800b90c <USBD_GetLen>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	b29b      	uxth	r3, r3
 800b8a6:	005b      	lsls	r3, r3, #1
 800b8a8:	b29a      	uxth	r2, r3
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b8ae:	7dfb      	ldrb	r3, [r7, #23]
 800b8b0:	68ba      	ldr	r2, [r7, #8]
 800b8b2:	4413      	add	r3, r2
 800b8b4:	687a      	ldr	r2, [r7, #4]
 800b8b6:	7812      	ldrb	r2, [r2, #0]
 800b8b8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b8ba:	7dfb      	ldrb	r3, [r7, #23]
 800b8bc:	3301      	adds	r3, #1
 800b8be:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b8c0:	7dfb      	ldrb	r3, [r7, #23]
 800b8c2:	68ba      	ldr	r2, [r7, #8]
 800b8c4:	4413      	add	r3, r2
 800b8c6:	2203      	movs	r2, #3
 800b8c8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b8ca:	7dfb      	ldrb	r3, [r7, #23]
 800b8cc:	3301      	adds	r3, #1
 800b8ce:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b8d0:	e013      	b.n	800b8fa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b8d2:	7dfb      	ldrb	r3, [r7, #23]
 800b8d4:	68ba      	ldr	r2, [r7, #8]
 800b8d6:	4413      	add	r3, r2
 800b8d8:	693a      	ldr	r2, [r7, #16]
 800b8da:	7812      	ldrb	r2, [r2, #0]
 800b8dc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	3301      	adds	r3, #1
 800b8e2:	613b      	str	r3, [r7, #16]
    idx++;
 800b8e4:	7dfb      	ldrb	r3, [r7, #23]
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b8ea:	7dfb      	ldrb	r3, [r7, #23]
 800b8ec:	68ba      	ldr	r2, [r7, #8]
 800b8ee:	4413      	add	r3, r2
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	701a      	strb	r2, [r3, #0]
    idx++;
 800b8f4:	7dfb      	ldrb	r3, [r7, #23]
 800b8f6:	3301      	adds	r3, #1
 800b8f8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	781b      	ldrb	r3, [r3, #0]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d1e7      	bne.n	800b8d2 <USBD_GetString+0x52>
 800b902:	e000      	b.n	800b906 <USBD_GetString+0x86>
    return;
 800b904:	bf00      	nop
  }
}
 800b906:	3718      	adds	r7, #24
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}

0800b90c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b90c:	b480      	push	{r7}
 800b90e:	b085      	sub	sp, #20
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b914:	2300      	movs	r3, #0
 800b916:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b91c:	e005      	b.n	800b92a <USBD_GetLen+0x1e>
  {
    len++;
 800b91e:	7bfb      	ldrb	r3, [r7, #15]
 800b920:	3301      	adds	r3, #1
 800b922:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	3301      	adds	r3, #1
 800b928:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	781b      	ldrb	r3, [r3, #0]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d1f5      	bne.n	800b91e <USBD_GetLen+0x12>
  }

  return len;
 800b932:	7bfb      	ldrb	r3, [r7, #15]
}
 800b934:	4618      	mov	r0, r3
 800b936:	3714      	adds	r7, #20
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr

0800b940 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b084      	sub	sp, #16
 800b944:	af00      	add	r7, sp, #0
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	60b9      	str	r1, [r7, #8]
 800b94a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2202      	movs	r2, #2
 800b950:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	687a      	ldr	r2, [r7, #4]
 800b958:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	687a      	ldr	r2, [r7, #4]
 800b95e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	68ba      	ldr	r2, [r7, #8]
 800b964:	2100      	movs	r1, #0
 800b966:	68f8      	ldr	r0, [r7, #12]
 800b968:	f003 fe39 	bl	800f5de <USBD_LL_Transmit>

  return USBD_OK;
 800b96c:	2300      	movs	r3, #0
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3710      	adds	r7, #16
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}

0800b976 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b976:	b580      	push	{r7, lr}
 800b978:	b084      	sub	sp, #16
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	60f8      	str	r0, [r7, #12]
 800b97e:	60b9      	str	r1, [r7, #8]
 800b980:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	68ba      	ldr	r2, [r7, #8]
 800b986:	2100      	movs	r1, #0
 800b988:	68f8      	ldr	r0, [r7, #12]
 800b98a:	f003 fe28 	bl	800f5de <USBD_LL_Transmit>

  return USBD_OK;
 800b98e:	2300      	movs	r3, #0
}
 800b990:	4618      	mov	r0, r3
 800b992:	3710      	adds	r7, #16
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}

0800b998 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b084      	sub	sp, #16
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	60f8      	str	r0, [r7, #12]
 800b9a0:	60b9      	str	r1, [r7, #8]
 800b9a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	2203      	movs	r2, #3
 800b9a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	687a      	ldr	r2, [r7, #4]
 800b9b0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	687a      	ldr	r2, [r7, #4]
 800b9b8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	68ba      	ldr	r2, [r7, #8]
 800b9c0:	2100      	movs	r1, #0
 800b9c2:	68f8      	ldr	r0, [r7, #12]
 800b9c4:	f003 fe2c 	bl	800f620 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9c8:	2300      	movs	r3, #0
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3710      	adds	r7, #16
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}

0800b9d2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b9d2:	b580      	push	{r7, lr}
 800b9d4:	b084      	sub	sp, #16
 800b9d6:	af00      	add	r7, sp, #0
 800b9d8:	60f8      	str	r0, [r7, #12]
 800b9da:	60b9      	str	r1, [r7, #8]
 800b9dc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	68ba      	ldr	r2, [r7, #8]
 800b9e2:	2100      	movs	r1, #0
 800b9e4:	68f8      	ldr	r0, [r7, #12]
 800b9e6:	f003 fe1b 	bl	800f620 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9ea:	2300      	movs	r3, #0
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3710      	adds	r7, #16
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b082      	sub	sp, #8
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2204      	movs	r2, #4
 800ba00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ba04:	2300      	movs	r3, #0
 800ba06:	2200      	movs	r2, #0
 800ba08:	2100      	movs	r1, #0
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f003 fde7 	bl	800f5de <USBD_LL_Transmit>

  return USBD_OK;
 800ba10:	2300      	movs	r3, #0
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3708      	adds	r7, #8
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}

0800ba1a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ba1a:	b580      	push	{r7, lr}
 800ba1c:	b082      	sub	sp, #8
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2205      	movs	r2, #5
 800ba26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	2100      	movs	r1, #0
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f003 fdf5 	bl	800f620 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba36:	2300      	movs	r3, #0
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3708      	adds	r7, #8
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b084      	sub	sp, #16
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	4603      	mov	r3, r0
 800ba48:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ba4a:	79fb      	ldrb	r3, [r7, #7]
 800ba4c:	4a08      	ldr	r2, [pc, #32]	; (800ba70 <disk_status+0x30>)
 800ba4e:	009b      	lsls	r3, r3, #2
 800ba50:	4413      	add	r3, r2
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	79fa      	ldrb	r2, [r7, #7]
 800ba58:	4905      	ldr	r1, [pc, #20]	; (800ba70 <disk_status+0x30>)
 800ba5a:	440a      	add	r2, r1
 800ba5c:	7a12      	ldrb	r2, [r2, #8]
 800ba5e:	4610      	mov	r0, r2
 800ba60:	4798      	blx	r3
 800ba62:	4603      	mov	r3, r0
 800ba64:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ba66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3710      	adds	r7, #16
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}
 800ba70:	200034dc 	.word	0x200034dc

0800ba74 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b084      	sub	sp, #16
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ba82:	79fb      	ldrb	r3, [r7, #7]
 800ba84:	4a0d      	ldr	r2, [pc, #52]	; (800babc <disk_initialize+0x48>)
 800ba86:	5cd3      	ldrb	r3, [r2, r3]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d111      	bne.n	800bab0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ba8c:	79fb      	ldrb	r3, [r7, #7]
 800ba8e:	4a0b      	ldr	r2, [pc, #44]	; (800babc <disk_initialize+0x48>)
 800ba90:	2101      	movs	r1, #1
 800ba92:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ba94:	79fb      	ldrb	r3, [r7, #7]
 800ba96:	4a09      	ldr	r2, [pc, #36]	; (800babc <disk_initialize+0x48>)
 800ba98:	009b      	lsls	r3, r3, #2
 800ba9a:	4413      	add	r3, r2
 800ba9c:	685b      	ldr	r3, [r3, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	79fa      	ldrb	r2, [r7, #7]
 800baa2:	4906      	ldr	r1, [pc, #24]	; (800babc <disk_initialize+0x48>)
 800baa4:	440a      	add	r2, r1
 800baa6:	7a12      	ldrb	r2, [r2, #8]
 800baa8:	4610      	mov	r0, r2
 800baaa:	4798      	blx	r3
 800baac:	4603      	mov	r3, r0
 800baae:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bab0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3710      	adds	r7, #16
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}
 800baba:	bf00      	nop
 800babc:	200034dc 	.word	0x200034dc

0800bac0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bac0:	b590      	push	{r4, r7, lr}
 800bac2:	b087      	sub	sp, #28
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	60b9      	str	r1, [r7, #8]
 800bac8:	607a      	str	r2, [r7, #4]
 800baca:	603b      	str	r3, [r7, #0]
 800bacc:	4603      	mov	r3, r0
 800bace:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bad0:	7bfb      	ldrb	r3, [r7, #15]
 800bad2:	4a0a      	ldr	r2, [pc, #40]	; (800bafc <disk_read+0x3c>)
 800bad4:	009b      	lsls	r3, r3, #2
 800bad6:	4413      	add	r3, r2
 800bad8:	685b      	ldr	r3, [r3, #4]
 800bada:	689c      	ldr	r4, [r3, #8]
 800badc:	7bfb      	ldrb	r3, [r7, #15]
 800bade:	4a07      	ldr	r2, [pc, #28]	; (800bafc <disk_read+0x3c>)
 800bae0:	4413      	add	r3, r2
 800bae2:	7a18      	ldrb	r0, [r3, #8]
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	687a      	ldr	r2, [r7, #4]
 800bae8:	68b9      	ldr	r1, [r7, #8]
 800baea:	47a0      	blx	r4
 800baec:	4603      	mov	r3, r0
 800baee:	75fb      	strb	r3, [r7, #23]
  return res;
 800baf0:	7dfb      	ldrb	r3, [r7, #23]
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	371c      	adds	r7, #28
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd90      	pop	{r4, r7, pc}
 800bafa:	bf00      	nop
 800bafc:	200034dc 	.word	0x200034dc

0800bb00 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bb00:	b590      	push	{r4, r7, lr}
 800bb02:	b087      	sub	sp, #28
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	60b9      	str	r1, [r7, #8]
 800bb08:	607a      	str	r2, [r7, #4]
 800bb0a:	603b      	str	r3, [r7, #0]
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bb10:	7bfb      	ldrb	r3, [r7, #15]
 800bb12:	4a0a      	ldr	r2, [pc, #40]	; (800bb3c <disk_write+0x3c>)
 800bb14:	009b      	lsls	r3, r3, #2
 800bb16:	4413      	add	r3, r2
 800bb18:	685b      	ldr	r3, [r3, #4]
 800bb1a:	68dc      	ldr	r4, [r3, #12]
 800bb1c:	7bfb      	ldrb	r3, [r7, #15]
 800bb1e:	4a07      	ldr	r2, [pc, #28]	; (800bb3c <disk_write+0x3c>)
 800bb20:	4413      	add	r3, r2
 800bb22:	7a18      	ldrb	r0, [r3, #8]
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	687a      	ldr	r2, [r7, #4]
 800bb28:	68b9      	ldr	r1, [r7, #8]
 800bb2a:	47a0      	blx	r4
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	75fb      	strb	r3, [r7, #23]
  return res;
 800bb30:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	371c      	adds	r7, #28
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd90      	pop	{r4, r7, pc}
 800bb3a:	bf00      	nop
 800bb3c:	200034dc 	.word	0x200034dc

0800bb40 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b084      	sub	sp, #16
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	4603      	mov	r3, r0
 800bb48:	603a      	str	r2, [r7, #0]
 800bb4a:	71fb      	strb	r3, [r7, #7]
 800bb4c:	460b      	mov	r3, r1
 800bb4e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bb50:	79fb      	ldrb	r3, [r7, #7]
 800bb52:	4a09      	ldr	r2, [pc, #36]	; (800bb78 <disk_ioctl+0x38>)
 800bb54:	009b      	lsls	r3, r3, #2
 800bb56:	4413      	add	r3, r2
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	691b      	ldr	r3, [r3, #16]
 800bb5c:	79fa      	ldrb	r2, [r7, #7]
 800bb5e:	4906      	ldr	r1, [pc, #24]	; (800bb78 <disk_ioctl+0x38>)
 800bb60:	440a      	add	r2, r1
 800bb62:	7a10      	ldrb	r0, [r2, #8]
 800bb64:	79b9      	ldrb	r1, [r7, #6]
 800bb66:	683a      	ldr	r2, [r7, #0]
 800bb68:	4798      	blx	r3
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	73fb      	strb	r3, [r7, #15]
  return res;
 800bb6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3710      	adds	r7, #16
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}
 800bb78:	200034dc 	.word	0x200034dc

0800bb7c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b085      	sub	sp, #20
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	3301      	adds	r3, #1
 800bb88:	781b      	ldrb	r3, [r3, #0]
 800bb8a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bb8c:	89fb      	ldrh	r3, [r7, #14]
 800bb8e:	021b      	lsls	r3, r3, #8
 800bb90:	b21a      	sxth	r2, r3
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	781b      	ldrb	r3, [r3, #0]
 800bb96:	b21b      	sxth	r3, r3
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	b21b      	sxth	r3, r3
 800bb9c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bb9e:	89fb      	ldrh	r3, [r7, #14]
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3714      	adds	r7, #20
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr

0800bbac <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bbac:	b480      	push	{r7}
 800bbae:	b085      	sub	sp, #20
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	3303      	adds	r3, #3
 800bbb8:	781b      	ldrb	r3, [r3, #0]
 800bbba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	021b      	lsls	r3, r3, #8
 800bbc0:	687a      	ldr	r2, [r7, #4]
 800bbc2:	3202      	adds	r2, #2
 800bbc4:	7812      	ldrb	r2, [r2, #0]
 800bbc6:	4313      	orrs	r3, r2
 800bbc8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	021b      	lsls	r3, r3, #8
 800bbce:	687a      	ldr	r2, [r7, #4]
 800bbd0:	3201      	adds	r2, #1
 800bbd2:	7812      	ldrb	r2, [r2, #0]
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	021b      	lsls	r3, r3, #8
 800bbdc:	687a      	ldr	r2, [r7, #4]
 800bbde:	7812      	ldrb	r2, [r2, #0]
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	60fb      	str	r3, [r7, #12]
	return rv;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3714      	adds	r7, #20
 800bbea:	46bd      	mov	sp, r7
 800bbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf0:	4770      	bx	lr

0800bbf2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bbf2:	b480      	push	{r7}
 800bbf4:	b083      	sub	sp, #12
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	6078      	str	r0, [r7, #4]
 800bbfa:	460b      	mov	r3, r1
 800bbfc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	1c5a      	adds	r2, r3, #1
 800bc02:	607a      	str	r2, [r7, #4]
 800bc04:	887a      	ldrh	r2, [r7, #2]
 800bc06:	b2d2      	uxtb	r2, r2
 800bc08:	701a      	strb	r2, [r3, #0]
 800bc0a:	887b      	ldrh	r3, [r7, #2]
 800bc0c:	0a1b      	lsrs	r3, r3, #8
 800bc0e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	1c5a      	adds	r2, r3, #1
 800bc14:	607a      	str	r2, [r7, #4]
 800bc16:	887a      	ldrh	r2, [r7, #2]
 800bc18:	b2d2      	uxtb	r2, r2
 800bc1a:	701a      	strb	r2, [r3, #0]
}
 800bc1c:	bf00      	nop
 800bc1e:	370c      	adds	r7, #12
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr

0800bc28 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b083      	sub	sp, #12
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	1c5a      	adds	r2, r3, #1
 800bc36:	607a      	str	r2, [r7, #4]
 800bc38:	683a      	ldr	r2, [r7, #0]
 800bc3a:	b2d2      	uxtb	r2, r2
 800bc3c:	701a      	strb	r2, [r3, #0]
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	0a1b      	lsrs	r3, r3, #8
 800bc42:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	1c5a      	adds	r2, r3, #1
 800bc48:	607a      	str	r2, [r7, #4]
 800bc4a:	683a      	ldr	r2, [r7, #0]
 800bc4c:	b2d2      	uxtb	r2, r2
 800bc4e:	701a      	strb	r2, [r3, #0]
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	0a1b      	lsrs	r3, r3, #8
 800bc54:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	1c5a      	adds	r2, r3, #1
 800bc5a:	607a      	str	r2, [r7, #4]
 800bc5c:	683a      	ldr	r2, [r7, #0]
 800bc5e:	b2d2      	uxtb	r2, r2
 800bc60:	701a      	strb	r2, [r3, #0]
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	0a1b      	lsrs	r3, r3, #8
 800bc66:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	1c5a      	adds	r2, r3, #1
 800bc6c:	607a      	str	r2, [r7, #4]
 800bc6e:	683a      	ldr	r2, [r7, #0]
 800bc70:	b2d2      	uxtb	r2, r2
 800bc72:	701a      	strb	r2, [r3, #0]
}
 800bc74:	bf00      	nop
 800bc76:	370c      	adds	r7, #12
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr

0800bc80 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bc80:	b480      	push	{r7}
 800bc82:	b087      	sub	sp, #28
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	60f8      	str	r0, [r7, #12]
 800bc88:	60b9      	str	r1, [r7, #8]
 800bc8a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d00d      	beq.n	800bcb6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800bc9a:	693a      	ldr	r2, [r7, #16]
 800bc9c:	1c53      	adds	r3, r2, #1
 800bc9e:	613b      	str	r3, [r7, #16]
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	1c59      	adds	r1, r3, #1
 800bca4:	6179      	str	r1, [r7, #20]
 800bca6:	7812      	ldrb	r2, [r2, #0]
 800bca8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	3b01      	subs	r3, #1
 800bcae:	607b      	str	r3, [r7, #4]
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d1f1      	bne.n	800bc9a <mem_cpy+0x1a>
	}
}
 800bcb6:	bf00      	nop
 800bcb8:	371c      	adds	r7, #28
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc0:	4770      	bx	lr

0800bcc2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bcc2:	b480      	push	{r7}
 800bcc4:	b087      	sub	sp, #28
 800bcc6:	af00      	add	r7, sp, #0
 800bcc8:	60f8      	str	r0, [r7, #12]
 800bcca:	60b9      	str	r1, [r7, #8]
 800bccc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	1c5a      	adds	r2, r3, #1
 800bcd6:	617a      	str	r2, [r7, #20]
 800bcd8:	68ba      	ldr	r2, [r7, #8]
 800bcda:	b2d2      	uxtb	r2, r2
 800bcdc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	3b01      	subs	r3, #1
 800bce2:	607b      	str	r3, [r7, #4]
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d1f3      	bne.n	800bcd2 <mem_set+0x10>
}
 800bcea:	bf00      	nop
 800bcec:	bf00      	nop
 800bcee:	371c      	adds	r7, #28
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr

0800bcf8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bcf8:	b480      	push	{r7}
 800bcfa:	b089      	sub	sp, #36	; 0x24
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	60b9      	str	r1, [r7, #8]
 800bd02:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	61fb      	str	r3, [r7, #28]
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bd10:	69fb      	ldr	r3, [r7, #28]
 800bd12:	1c5a      	adds	r2, r3, #1
 800bd14:	61fa      	str	r2, [r7, #28]
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	4619      	mov	r1, r3
 800bd1a:	69bb      	ldr	r3, [r7, #24]
 800bd1c:	1c5a      	adds	r2, r3, #1
 800bd1e:	61ba      	str	r2, [r7, #24]
 800bd20:	781b      	ldrb	r3, [r3, #0]
 800bd22:	1acb      	subs	r3, r1, r3
 800bd24:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	3b01      	subs	r3, #1
 800bd2a:	607b      	str	r3, [r7, #4]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d002      	beq.n	800bd38 <mem_cmp+0x40>
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d0eb      	beq.n	800bd10 <mem_cmp+0x18>

	return r;
 800bd38:	697b      	ldr	r3, [r7, #20]
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3724      	adds	r7, #36	; 0x24
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd44:	4770      	bx	lr

0800bd46 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bd46:	b480      	push	{r7}
 800bd48:	b083      	sub	sp, #12
 800bd4a:	af00      	add	r7, sp, #0
 800bd4c:	6078      	str	r0, [r7, #4]
 800bd4e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bd50:	e002      	b.n	800bd58 <chk_chr+0x12>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	3301      	adds	r3, #1
 800bd56:	607b      	str	r3, [r7, #4]
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d005      	beq.n	800bd6c <chk_chr+0x26>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	781b      	ldrb	r3, [r3, #0]
 800bd64:	461a      	mov	r2, r3
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	d1f2      	bne.n	800bd52 <chk_chr+0xc>
	return *str;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	781b      	ldrb	r3, [r3, #0]
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	370c      	adds	r7, #12
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr

0800bd7c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b085      	sub	sp, #20
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bd86:	2300      	movs	r3, #0
 800bd88:	60bb      	str	r3, [r7, #8]
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	60fb      	str	r3, [r7, #12]
 800bd8e:	e029      	b.n	800bde4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800bd90:	4a27      	ldr	r2, [pc, #156]	; (800be30 <chk_lock+0xb4>)
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	011b      	lsls	r3, r3, #4
 800bd96:	4413      	add	r3, r2
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d01d      	beq.n	800bdda <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bd9e:	4a24      	ldr	r2, [pc, #144]	; (800be30 <chk_lock+0xb4>)
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	011b      	lsls	r3, r3, #4
 800bda4:	4413      	add	r3, r2
 800bda6:	681a      	ldr	r2, [r3, #0]
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d116      	bne.n	800bdde <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800bdb0:	4a1f      	ldr	r2, [pc, #124]	; (800be30 <chk_lock+0xb4>)
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	011b      	lsls	r3, r3, #4
 800bdb6:	4413      	add	r3, r2
 800bdb8:	3304      	adds	r3, #4
 800bdba:	681a      	ldr	r2, [r3, #0]
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d10c      	bne.n	800bdde <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bdc4:	4a1a      	ldr	r2, [pc, #104]	; (800be30 <chk_lock+0xb4>)
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	011b      	lsls	r3, r3, #4
 800bdca:	4413      	add	r3, r2
 800bdcc:	3308      	adds	r3, #8
 800bdce:	681a      	ldr	r2, [r3, #0]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800bdd4:	429a      	cmp	r2, r3
 800bdd6:	d102      	bne.n	800bdde <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bdd8:	e007      	b.n	800bdea <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800bdda:	2301      	movs	r3, #1
 800bddc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	3301      	adds	r3, #1
 800bde2:	60fb      	str	r3, [r7, #12]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	2b01      	cmp	r3, #1
 800bde8:	d9d2      	bls.n	800bd90 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	2b02      	cmp	r3, #2
 800bdee:	d109      	bne.n	800be04 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d102      	bne.n	800bdfc <chk_lock+0x80>
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	2b02      	cmp	r3, #2
 800bdfa:	d101      	bne.n	800be00 <chk_lock+0x84>
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	e010      	b.n	800be22 <chk_lock+0xa6>
 800be00:	2312      	movs	r3, #18
 800be02:	e00e      	b.n	800be22 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d108      	bne.n	800be1c <chk_lock+0xa0>
 800be0a:	4a09      	ldr	r2, [pc, #36]	; (800be30 <chk_lock+0xb4>)
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	011b      	lsls	r3, r3, #4
 800be10:	4413      	add	r3, r2
 800be12:	330c      	adds	r3, #12
 800be14:	881b      	ldrh	r3, [r3, #0]
 800be16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be1a:	d101      	bne.n	800be20 <chk_lock+0xa4>
 800be1c:	2310      	movs	r3, #16
 800be1e:	e000      	b.n	800be22 <chk_lock+0xa6>
 800be20:	2300      	movs	r3, #0
}
 800be22:	4618      	mov	r0, r3
 800be24:	3714      	adds	r7, #20
 800be26:	46bd      	mov	sp, r7
 800be28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2c:	4770      	bx	lr
 800be2e:	bf00      	nop
 800be30:	200032bc 	.word	0x200032bc

0800be34 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800be34:	b480      	push	{r7}
 800be36:	b083      	sub	sp, #12
 800be38:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800be3a:	2300      	movs	r3, #0
 800be3c:	607b      	str	r3, [r7, #4]
 800be3e:	e002      	b.n	800be46 <enq_lock+0x12>
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	3301      	adds	r3, #1
 800be44:	607b      	str	r3, [r7, #4]
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d806      	bhi.n	800be5a <enq_lock+0x26>
 800be4c:	4a09      	ldr	r2, [pc, #36]	; (800be74 <enq_lock+0x40>)
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	011b      	lsls	r3, r3, #4
 800be52:	4413      	add	r3, r2
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d1f2      	bne.n	800be40 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2b02      	cmp	r3, #2
 800be5e:	bf14      	ite	ne
 800be60:	2301      	movne	r3, #1
 800be62:	2300      	moveq	r3, #0
 800be64:	b2db      	uxtb	r3, r3
}
 800be66:	4618      	mov	r0, r3
 800be68:	370c      	adds	r7, #12
 800be6a:	46bd      	mov	sp, r7
 800be6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be70:	4770      	bx	lr
 800be72:	bf00      	nop
 800be74:	200032bc 	.word	0x200032bc

0800be78 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800be78:	b480      	push	{r7}
 800be7a:	b085      	sub	sp, #20
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800be82:	2300      	movs	r3, #0
 800be84:	60fb      	str	r3, [r7, #12]
 800be86:	e01f      	b.n	800bec8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800be88:	4a41      	ldr	r2, [pc, #260]	; (800bf90 <inc_lock+0x118>)
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	011b      	lsls	r3, r3, #4
 800be8e:	4413      	add	r3, r2
 800be90:	681a      	ldr	r2, [r3, #0]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	429a      	cmp	r2, r3
 800be98:	d113      	bne.n	800bec2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800be9a:	4a3d      	ldr	r2, [pc, #244]	; (800bf90 <inc_lock+0x118>)
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	011b      	lsls	r3, r3, #4
 800bea0:	4413      	add	r3, r2
 800bea2:	3304      	adds	r3, #4
 800bea4:	681a      	ldr	r2, [r3, #0]
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800beaa:	429a      	cmp	r2, r3
 800beac:	d109      	bne.n	800bec2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800beae:	4a38      	ldr	r2, [pc, #224]	; (800bf90 <inc_lock+0x118>)
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	011b      	lsls	r3, r3, #4
 800beb4:	4413      	add	r3, r2
 800beb6:	3308      	adds	r3, #8
 800beb8:	681a      	ldr	r2, [r3, #0]
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bebe:	429a      	cmp	r2, r3
 800bec0:	d006      	beq.n	800bed0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	3301      	adds	r3, #1
 800bec6:	60fb      	str	r3, [r7, #12]
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2b01      	cmp	r3, #1
 800becc:	d9dc      	bls.n	800be88 <inc_lock+0x10>
 800bece:	e000      	b.n	800bed2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bed0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	2b02      	cmp	r3, #2
 800bed6:	d132      	bne.n	800bf3e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bed8:	2300      	movs	r3, #0
 800beda:	60fb      	str	r3, [r7, #12]
 800bedc:	e002      	b.n	800bee4 <inc_lock+0x6c>
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	3301      	adds	r3, #1
 800bee2:	60fb      	str	r3, [r7, #12]
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2b01      	cmp	r3, #1
 800bee8:	d806      	bhi.n	800bef8 <inc_lock+0x80>
 800beea:	4a29      	ldr	r2, [pc, #164]	; (800bf90 <inc_lock+0x118>)
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	011b      	lsls	r3, r3, #4
 800bef0:	4413      	add	r3, r2
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d1f2      	bne.n	800bede <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	2b02      	cmp	r3, #2
 800befc:	d101      	bne.n	800bf02 <inc_lock+0x8a>
 800befe:	2300      	movs	r3, #0
 800bf00:	e040      	b.n	800bf84 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681a      	ldr	r2, [r3, #0]
 800bf06:	4922      	ldr	r1, [pc, #136]	; (800bf90 <inc_lock+0x118>)
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	011b      	lsls	r3, r3, #4
 800bf0c:	440b      	add	r3, r1
 800bf0e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	689a      	ldr	r2, [r3, #8]
 800bf14:	491e      	ldr	r1, [pc, #120]	; (800bf90 <inc_lock+0x118>)
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	011b      	lsls	r3, r3, #4
 800bf1a:	440b      	add	r3, r1
 800bf1c:	3304      	adds	r3, #4
 800bf1e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	695a      	ldr	r2, [r3, #20]
 800bf24:	491a      	ldr	r1, [pc, #104]	; (800bf90 <inc_lock+0x118>)
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	011b      	lsls	r3, r3, #4
 800bf2a:	440b      	add	r3, r1
 800bf2c:	3308      	adds	r3, #8
 800bf2e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bf30:	4a17      	ldr	r2, [pc, #92]	; (800bf90 <inc_lock+0x118>)
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	011b      	lsls	r3, r3, #4
 800bf36:	4413      	add	r3, r2
 800bf38:	330c      	adds	r3, #12
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d009      	beq.n	800bf58 <inc_lock+0xe0>
 800bf44:	4a12      	ldr	r2, [pc, #72]	; (800bf90 <inc_lock+0x118>)
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	011b      	lsls	r3, r3, #4
 800bf4a:	4413      	add	r3, r2
 800bf4c:	330c      	adds	r3, #12
 800bf4e:	881b      	ldrh	r3, [r3, #0]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d001      	beq.n	800bf58 <inc_lock+0xe0>
 800bf54:	2300      	movs	r3, #0
 800bf56:	e015      	b.n	800bf84 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d108      	bne.n	800bf70 <inc_lock+0xf8>
 800bf5e:	4a0c      	ldr	r2, [pc, #48]	; (800bf90 <inc_lock+0x118>)
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	011b      	lsls	r3, r3, #4
 800bf64:	4413      	add	r3, r2
 800bf66:	330c      	adds	r3, #12
 800bf68:	881b      	ldrh	r3, [r3, #0]
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	b29a      	uxth	r2, r3
 800bf6e:	e001      	b.n	800bf74 <inc_lock+0xfc>
 800bf70:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bf74:	4906      	ldr	r1, [pc, #24]	; (800bf90 <inc_lock+0x118>)
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	011b      	lsls	r3, r3, #4
 800bf7a:	440b      	add	r3, r1
 800bf7c:	330c      	adds	r3, #12
 800bf7e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	3301      	adds	r3, #1
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	3714      	adds	r7, #20
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8e:	4770      	bx	lr
 800bf90:	200032bc 	.word	0x200032bc

0800bf94 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800bf94:	b480      	push	{r7}
 800bf96:	b085      	sub	sp, #20
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	3b01      	subs	r3, #1
 800bfa0:	607b      	str	r3, [r7, #4]
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2b01      	cmp	r3, #1
 800bfa6:	d825      	bhi.n	800bff4 <dec_lock+0x60>
		n = Files[i].ctr;
 800bfa8:	4a17      	ldr	r2, [pc, #92]	; (800c008 <dec_lock+0x74>)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	011b      	lsls	r3, r3, #4
 800bfae:	4413      	add	r3, r2
 800bfb0:	330c      	adds	r3, #12
 800bfb2:	881b      	ldrh	r3, [r3, #0]
 800bfb4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bfb6:	89fb      	ldrh	r3, [r7, #14]
 800bfb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfbc:	d101      	bne.n	800bfc2 <dec_lock+0x2e>
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800bfc2:	89fb      	ldrh	r3, [r7, #14]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d002      	beq.n	800bfce <dec_lock+0x3a>
 800bfc8:	89fb      	ldrh	r3, [r7, #14]
 800bfca:	3b01      	subs	r3, #1
 800bfcc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800bfce:	4a0e      	ldr	r2, [pc, #56]	; (800c008 <dec_lock+0x74>)
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	011b      	lsls	r3, r3, #4
 800bfd4:	4413      	add	r3, r2
 800bfd6:	330c      	adds	r3, #12
 800bfd8:	89fa      	ldrh	r2, [r7, #14]
 800bfda:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800bfdc:	89fb      	ldrh	r3, [r7, #14]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d105      	bne.n	800bfee <dec_lock+0x5a>
 800bfe2:	4a09      	ldr	r2, [pc, #36]	; (800c008 <dec_lock+0x74>)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	011b      	lsls	r3, r3, #4
 800bfe8:	4413      	add	r3, r2
 800bfea:	2200      	movs	r2, #0
 800bfec:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bfee:	2300      	movs	r3, #0
 800bff0:	737b      	strb	r3, [r7, #13]
 800bff2:	e001      	b.n	800bff8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bff4:	2302      	movs	r3, #2
 800bff6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bff8:	7b7b      	ldrb	r3, [r7, #13]
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3714      	adds	r7, #20
 800bffe:	46bd      	mov	sp, r7
 800c000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c004:	4770      	bx	lr
 800c006:	bf00      	nop
 800c008:	200032bc 	.word	0x200032bc

0800c00c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b085      	sub	sp, #20
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c014:	2300      	movs	r3, #0
 800c016:	60fb      	str	r3, [r7, #12]
 800c018:	e010      	b.n	800c03c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c01a:	4a0d      	ldr	r2, [pc, #52]	; (800c050 <clear_lock+0x44>)
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	011b      	lsls	r3, r3, #4
 800c020:	4413      	add	r3, r2
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	687a      	ldr	r2, [r7, #4]
 800c026:	429a      	cmp	r2, r3
 800c028:	d105      	bne.n	800c036 <clear_lock+0x2a>
 800c02a:	4a09      	ldr	r2, [pc, #36]	; (800c050 <clear_lock+0x44>)
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	011b      	lsls	r3, r3, #4
 800c030:	4413      	add	r3, r2
 800c032:	2200      	movs	r2, #0
 800c034:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	3301      	adds	r3, #1
 800c03a:	60fb      	str	r3, [r7, #12]
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	2b01      	cmp	r3, #1
 800c040:	d9eb      	bls.n	800c01a <clear_lock+0xe>
	}
}
 800c042:	bf00      	nop
 800c044:	bf00      	nop
 800c046:	3714      	adds	r7, #20
 800c048:	46bd      	mov	sp, r7
 800c04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04e:	4770      	bx	lr
 800c050:	200032bc 	.word	0x200032bc

0800c054 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b086      	sub	sp, #24
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c05c:	2300      	movs	r3, #0
 800c05e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	78db      	ldrb	r3, [r3, #3]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d034      	beq.n	800c0d2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c06c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	7858      	ldrb	r0, [r3, #1]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c078:	2301      	movs	r3, #1
 800c07a:	697a      	ldr	r2, [r7, #20]
 800c07c:	f7ff fd40 	bl	800bb00 <disk_write>
 800c080:	4603      	mov	r3, r0
 800c082:	2b00      	cmp	r3, #0
 800c084:	d002      	beq.n	800c08c <sync_window+0x38>
			res = FR_DISK_ERR;
 800c086:	2301      	movs	r3, #1
 800c088:	73fb      	strb	r3, [r7, #15]
 800c08a:	e022      	b.n	800c0d2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2200      	movs	r2, #0
 800c090:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c096:	697a      	ldr	r2, [r7, #20]
 800c098:	1ad2      	subs	r2, r2, r3
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	69db      	ldr	r3, [r3, #28]
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d217      	bcs.n	800c0d2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	789b      	ldrb	r3, [r3, #2]
 800c0a6:	613b      	str	r3, [r7, #16]
 800c0a8:	e010      	b.n	800c0cc <sync_window+0x78>
					wsect += fs->fsize;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	69db      	ldr	r3, [r3, #28]
 800c0ae:	697a      	ldr	r2, [r7, #20]
 800c0b0:	4413      	add	r3, r2
 800c0b2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	7858      	ldrb	r0, [r3, #1]
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c0be:	2301      	movs	r3, #1
 800c0c0:	697a      	ldr	r2, [r7, #20]
 800c0c2:	f7ff fd1d 	bl	800bb00 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	3b01      	subs	r3, #1
 800c0ca:	613b      	str	r3, [r7, #16]
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	2b01      	cmp	r3, #1
 800c0d0:	d8eb      	bhi.n	800c0aa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c0d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3718      	adds	r7, #24
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b084      	sub	sp, #16
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0ee:	683a      	ldr	r2, [r7, #0]
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d01b      	beq.n	800c12c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f7ff ffad 	bl	800c054 <sync_window>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c0fe:	7bfb      	ldrb	r3, [r7, #15]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d113      	bne.n	800c12c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	7858      	ldrb	r0, [r3, #1]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c10e:	2301      	movs	r3, #1
 800c110:	683a      	ldr	r2, [r7, #0]
 800c112:	f7ff fcd5 	bl	800bac0 <disk_read>
 800c116:	4603      	mov	r3, r0
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d004      	beq.n	800c126 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c11c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c120:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c122:	2301      	movs	r3, #1
 800c124:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	683a      	ldr	r2, [r7, #0]
 800c12a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800c12c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3710      	adds	r7, #16
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
	...

0800c138 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b084      	sub	sp, #16
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f7ff ff87 	bl	800c054 <sync_window>
 800c146:	4603      	mov	r3, r0
 800c148:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c14a:	7bfb      	ldrb	r3, [r7, #15]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d158      	bne.n	800c202 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	781b      	ldrb	r3, [r3, #0]
 800c154:	2b03      	cmp	r3, #3
 800c156:	d148      	bne.n	800c1ea <sync_fs+0xb2>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	791b      	ldrb	r3, [r3, #4]
 800c15c:	2b01      	cmp	r3, #1
 800c15e:	d144      	bne.n	800c1ea <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	3334      	adds	r3, #52	; 0x34
 800c164:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c168:	2100      	movs	r1, #0
 800c16a:	4618      	mov	r0, r3
 800c16c:	f7ff fda9 	bl	800bcc2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	3334      	adds	r3, #52	; 0x34
 800c174:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c178:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c17c:	4618      	mov	r0, r3
 800c17e:	f7ff fd38 	bl	800bbf2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	3334      	adds	r3, #52	; 0x34
 800c186:	4921      	ldr	r1, [pc, #132]	; (800c20c <sync_fs+0xd4>)
 800c188:	4618      	mov	r0, r3
 800c18a:	f7ff fd4d 	bl	800bc28 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	3334      	adds	r3, #52	; 0x34
 800c192:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c196:	491e      	ldr	r1, [pc, #120]	; (800c210 <sync_fs+0xd8>)
 800c198:	4618      	mov	r0, r3
 800c19a:	f7ff fd45 	bl	800bc28 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	3334      	adds	r3, #52	; 0x34
 800c1a2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	695b      	ldr	r3, [r3, #20]
 800c1aa:	4619      	mov	r1, r3
 800c1ac:	4610      	mov	r0, r2
 800c1ae:	f7ff fd3b 	bl	800bc28 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	3334      	adds	r3, #52	; 0x34
 800c1b6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	691b      	ldr	r3, [r3, #16]
 800c1be:	4619      	mov	r1, r3
 800c1c0:	4610      	mov	r0, r2
 800c1c2:	f7ff fd31 	bl	800bc28 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6a1b      	ldr	r3, [r3, #32]
 800c1ca:	1c5a      	adds	r2, r3, #1
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	7858      	ldrb	r0, [r3, #1]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c1de:	2301      	movs	r3, #1
 800c1e0:	f7ff fc8e 	bl	800bb00 <disk_write>
			fs->fsi_flag = 0;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	785b      	ldrb	r3, [r3, #1]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	2100      	movs	r1, #0
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7ff fca4 	bl	800bb40 <disk_ioctl>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d001      	beq.n	800c202 <sync_fs+0xca>
 800c1fe:	2301      	movs	r3, #1
 800c200:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c202:	7bfb      	ldrb	r3, [r7, #15]
}
 800c204:	4618      	mov	r0, r3
 800c206:	3710      	adds	r7, #16
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}
 800c20c:	41615252 	.word	0x41615252
 800c210:	61417272 	.word	0x61417272

0800c214 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c214:	b480      	push	{r7}
 800c216:	b083      	sub	sp, #12
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	3b02      	subs	r3, #2
 800c222:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	699b      	ldr	r3, [r3, #24]
 800c228:	3b02      	subs	r3, #2
 800c22a:	683a      	ldr	r2, [r7, #0]
 800c22c:	429a      	cmp	r2, r3
 800c22e:	d301      	bcc.n	800c234 <clust2sect+0x20>
 800c230:	2300      	movs	r3, #0
 800c232:	e008      	b.n	800c246 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	895b      	ldrh	r3, [r3, #10]
 800c238:	461a      	mov	r2, r3
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	fb03 f202 	mul.w	r2, r3, r2
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c244:	4413      	add	r3, r2
}
 800c246:	4618      	mov	r0, r3
 800c248:	370c      	adds	r7, #12
 800c24a:	46bd      	mov	sp, r7
 800c24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c250:	4770      	bx	lr

0800c252 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c252:	b580      	push	{r7, lr}
 800c254:	b086      	sub	sp, #24
 800c256:	af00      	add	r7, sp, #0
 800c258:	6078      	str	r0, [r7, #4]
 800c25a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	2b01      	cmp	r3, #1
 800c266:	d904      	bls.n	800c272 <get_fat+0x20>
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	699b      	ldr	r3, [r3, #24]
 800c26c:	683a      	ldr	r2, [r7, #0]
 800c26e:	429a      	cmp	r2, r3
 800c270:	d302      	bcc.n	800c278 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c272:	2301      	movs	r3, #1
 800c274:	617b      	str	r3, [r7, #20]
 800c276:	e08f      	b.n	800c398 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c27c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	781b      	ldrb	r3, [r3, #0]
 800c282:	2b03      	cmp	r3, #3
 800c284:	d062      	beq.n	800c34c <get_fat+0xfa>
 800c286:	2b03      	cmp	r3, #3
 800c288:	dc7c      	bgt.n	800c384 <get_fat+0x132>
 800c28a:	2b01      	cmp	r3, #1
 800c28c:	d002      	beq.n	800c294 <get_fat+0x42>
 800c28e:	2b02      	cmp	r3, #2
 800c290:	d042      	beq.n	800c318 <get_fat+0xc6>
 800c292:	e077      	b.n	800c384 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	60fb      	str	r3, [r7, #12]
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	085b      	lsrs	r3, r3, #1
 800c29c:	68fa      	ldr	r2, [r7, #12]
 800c29e:	4413      	add	r3, r2
 800c2a0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	0a5b      	lsrs	r3, r3, #9
 800c2aa:	4413      	add	r3, r2
 800c2ac:	4619      	mov	r1, r3
 800c2ae:	6938      	ldr	r0, [r7, #16]
 800c2b0:	f7ff ff14 	bl	800c0dc <move_window>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d167      	bne.n	800c38a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	1c5a      	adds	r2, r3, #1
 800c2be:	60fa      	str	r2, [r7, #12]
 800c2c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2c4:	693a      	ldr	r2, [r7, #16]
 800c2c6:	4413      	add	r3, r2
 800c2c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c2cc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	0a5b      	lsrs	r3, r3, #9
 800c2d6:	4413      	add	r3, r2
 800c2d8:	4619      	mov	r1, r3
 800c2da:	6938      	ldr	r0, [r7, #16]
 800c2dc:	f7ff fefe 	bl	800c0dc <move_window>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d153      	bne.n	800c38e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2ec:	693a      	ldr	r2, [r7, #16]
 800c2ee:	4413      	add	r3, r2
 800c2f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c2f4:	021b      	lsls	r3, r3, #8
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	f003 0301 	and.w	r3, r3, #1
 800c304:	2b00      	cmp	r3, #0
 800c306:	d002      	beq.n	800c30e <get_fat+0xbc>
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	091b      	lsrs	r3, r3, #4
 800c30c:	e002      	b.n	800c314 <get_fat+0xc2>
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c314:	617b      	str	r3, [r7, #20]
			break;
 800c316:	e03f      	b.n	800c398 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	0a1b      	lsrs	r3, r3, #8
 800c320:	4413      	add	r3, r2
 800c322:	4619      	mov	r1, r3
 800c324:	6938      	ldr	r0, [r7, #16]
 800c326:	f7ff fed9 	bl	800c0dc <move_window>
 800c32a:	4603      	mov	r3, r0
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d130      	bne.n	800c392 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	005b      	lsls	r3, r3, #1
 800c33a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c33e:	4413      	add	r3, r2
 800c340:	4618      	mov	r0, r3
 800c342:	f7ff fc1b 	bl	800bb7c <ld_word>
 800c346:	4603      	mov	r3, r0
 800c348:	617b      	str	r3, [r7, #20]
			break;
 800c34a:	e025      	b.n	800c398 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	09db      	lsrs	r3, r3, #7
 800c354:	4413      	add	r3, r2
 800c356:	4619      	mov	r1, r3
 800c358:	6938      	ldr	r0, [r7, #16]
 800c35a:	f7ff febf 	bl	800c0dc <move_window>
 800c35e:	4603      	mov	r3, r0
 800c360:	2b00      	cmp	r3, #0
 800c362:	d118      	bne.n	800c396 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	009b      	lsls	r3, r3, #2
 800c36e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c372:	4413      	add	r3, r2
 800c374:	4618      	mov	r0, r3
 800c376:	f7ff fc19 	bl	800bbac <ld_dword>
 800c37a:	4603      	mov	r3, r0
 800c37c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c380:	617b      	str	r3, [r7, #20]
			break;
 800c382:	e009      	b.n	800c398 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c384:	2301      	movs	r3, #1
 800c386:	617b      	str	r3, [r7, #20]
 800c388:	e006      	b.n	800c398 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c38a:	bf00      	nop
 800c38c:	e004      	b.n	800c398 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c38e:	bf00      	nop
 800c390:	e002      	b.n	800c398 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c392:	bf00      	nop
 800c394:	e000      	b.n	800c398 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c396:	bf00      	nop
		}
	}

	return val;
 800c398:	697b      	ldr	r3, [r7, #20]
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	3718      	adds	r7, #24
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}

0800c3a2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c3a2:	b590      	push	{r4, r7, lr}
 800c3a4:	b089      	sub	sp, #36	; 0x24
 800c3a6:	af00      	add	r7, sp, #0
 800c3a8:	60f8      	str	r0, [r7, #12]
 800c3aa:	60b9      	str	r1, [r7, #8]
 800c3ac:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c3ae:	2302      	movs	r3, #2
 800c3b0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	2b01      	cmp	r3, #1
 800c3b6:	f240 80d9 	bls.w	800c56c <put_fat+0x1ca>
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	699b      	ldr	r3, [r3, #24]
 800c3be:	68ba      	ldr	r2, [r7, #8]
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	f080 80d3 	bcs.w	800c56c <put_fat+0x1ca>
		switch (fs->fs_type) {
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	781b      	ldrb	r3, [r3, #0]
 800c3ca:	2b03      	cmp	r3, #3
 800c3cc:	f000 8096 	beq.w	800c4fc <put_fat+0x15a>
 800c3d0:	2b03      	cmp	r3, #3
 800c3d2:	f300 80cb 	bgt.w	800c56c <put_fat+0x1ca>
 800c3d6:	2b01      	cmp	r3, #1
 800c3d8:	d002      	beq.n	800c3e0 <put_fat+0x3e>
 800c3da:	2b02      	cmp	r3, #2
 800c3dc:	d06e      	beq.n	800c4bc <put_fat+0x11a>
 800c3de:	e0c5      	b.n	800c56c <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	61bb      	str	r3, [r7, #24]
 800c3e4:	69bb      	ldr	r3, [r7, #24]
 800c3e6:	085b      	lsrs	r3, r3, #1
 800c3e8:	69ba      	ldr	r2, [r7, #24]
 800c3ea:	4413      	add	r3, r2
 800c3ec:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c3f2:	69bb      	ldr	r3, [r7, #24]
 800c3f4:	0a5b      	lsrs	r3, r3, #9
 800c3f6:	4413      	add	r3, r2
 800c3f8:	4619      	mov	r1, r3
 800c3fa:	68f8      	ldr	r0, [r7, #12]
 800c3fc:	f7ff fe6e 	bl	800c0dc <move_window>
 800c400:	4603      	mov	r3, r0
 800c402:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c404:	7ffb      	ldrb	r3, [r7, #31]
 800c406:	2b00      	cmp	r3, #0
 800c408:	f040 80a9 	bne.w	800c55e <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c412:	69bb      	ldr	r3, [r7, #24]
 800c414:	1c59      	adds	r1, r3, #1
 800c416:	61b9      	str	r1, [r7, #24]
 800c418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c41c:	4413      	add	r3, r2
 800c41e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	f003 0301 	and.w	r3, r3, #1
 800c426:	2b00      	cmp	r3, #0
 800c428:	d00d      	beq.n	800c446 <put_fat+0xa4>
 800c42a:	697b      	ldr	r3, [r7, #20]
 800c42c:	781b      	ldrb	r3, [r3, #0]
 800c42e:	b25b      	sxtb	r3, r3
 800c430:	f003 030f 	and.w	r3, r3, #15
 800c434:	b25a      	sxtb	r2, r3
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	b2db      	uxtb	r3, r3
 800c43a:	011b      	lsls	r3, r3, #4
 800c43c:	b25b      	sxtb	r3, r3
 800c43e:	4313      	orrs	r3, r2
 800c440:	b25b      	sxtb	r3, r3
 800c442:	b2db      	uxtb	r3, r3
 800c444:	e001      	b.n	800c44a <put_fat+0xa8>
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	b2db      	uxtb	r3, r3
 800c44a:	697a      	ldr	r2, [r7, #20]
 800c44c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	2201      	movs	r2, #1
 800c452:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c458:	69bb      	ldr	r3, [r7, #24]
 800c45a:	0a5b      	lsrs	r3, r3, #9
 800c45c:	4413      	add	r3, r2
 800c45e:	4619      	mov	r1, r3
 800c460:	68f8      	ldr	r0, [r7, #12]
 800c462:	f7ff fe3b 	bl	800c0dc <move_window>
 800c466:	4603      	mov	r3, r0
 800c468:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c46a:	7ffb      	ldrb	r3, [r7, #31]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d178      	bne.n	800c562 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c476:	69bb      	ldr	r3, [r7, #24]
 800c478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c47c:	4413      	add	r3, r2
 800c47e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	f003 0301 	and.w	r3, r3, #1
 800c486:	2b00      	cmp	r3, #0
 800c488:	d003      	beq.n	800c492 <put_fat+0xf0>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	091b      	lsrs	r3, r3, #4
 800c48e:	b2db      	uxtb	r3, r3
 800c490:	e00e      	b.n	800c4b0 <put_fat+0x10e>
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	b25b      	sxtb	r3, r3
 800c498:	f023 030f 	bic.w	r3, r3, #15
 800c49c:	b25a      	sxtb	r2, r3
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	0a1b      	lsrs	r3, r3, #8
 800c4a2:	b25b      	sxtb	r3, r3
 800c4a4:	f003 030f 	and.w	r3, r3, #15
 800c4a8:	b25b      	sxtb	r3, r3
 800c4aa:	4313      	orrs	r3, r2
 800c4ac:	b25b      	sxtb	r3, r3
 800c4ae:	b2db      	uxtb	r3, r3
 800c4b0:	697a      	ldr	r2, [r7, #20]
 800c4b2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	70da      	strb	r2, [r3, #3]
			break;
 800c4ba:	e057      	b.n	800c56c <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	0a1b      	lsrs	r3, r3, #8
 800c4c4:	4413      	add	r3, r2
 800c4c6:	4619      	mov	r1, r3
 800c4c8:	68f8      	ldr	r0, [r7, #12]
 800c4ca:	f7ff fe07 	bl	800c0dc <move_window>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c4d2:	7ffb      	ldrb	r3, [r7, #31]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d146      	bne.n	800c566 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	005b      	lsls	r3, r3, #1
 800c4e2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c4e6:	4413      	add	r3, r2
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	b292      	uxth	r2, r2
 800c4ec:	4611      	mov	r1, r2
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f7ff fb7f 	bl	800bbf2 <st_word>
			fs->wflag = 1;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	2201      	movs	r2, #1
 800c4f8:	70da      	strb	r2, [r3, #3]
			break;
 800c4fa:	e037      	b.n	800c56c <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	09db      	lsrs	r3, r3, #7
 800c504:	4413      	add	r3, r2
 800c506:	4619      	mov	r1, r3
 800c508:	68f8      	ldr	r0, [r7, #12]
 800c50a:	f7ff fde7 	bl	800c0dc <move_window>
 800c50e:	4603      	mov	r3, r0
 800c510:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c512:	7ffb      	ldrb	r3, [r7, #31]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d128      	bne.n	800c56a <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	009b      	lsls	r3, r3, #2
 800c528:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c52c:	4413      	add	r3, r2
 800c52e:	4618      	mov	r0, r3
 800c530:	f7ff fb3c 	bl	800bbac <ld_dword>
 800c534:	4603      	mov	r3, r0
 800c536:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c53a:	4323      	orrs	r3, r4
 800c53c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	009b      	lsls	r3, r3, #2
 800c548:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c54c:	4413      	add	r3, r2
 800c54e:	6879      	ldr	r1, [r7, #4]
 800c550:	4618      	mov	r0, r3
 800c552:	f7ff fb69 	bl	800bc28 <st_dword>
			fs->wflag = 1;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	2201      	movs	r2, #1
 800c55a:	70da      	strb	r2, [r3, #3]
			break;
 800c55c:	e006      	b.n	800c56c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c55e:	bf00      	nop
 800c560:	e004      	b.n	800c56c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c562:	bf00      	nop
 800c564:	e002      	b.n	800c56c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c566:	bf00      	nop
 800c568:	e000      	b.n	800c56c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c56a:	bf00      	nop
		}
	}
	return res;
 800c56c:	7ffb      	ldrb	r3, [r7, #31]
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3724      	adds	r7, #36	; 0x24
 800c572:	46bd      	mov	sp, r7
 800c574:	bd90      	pop	{r4, r7, pc}

0800c576 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c576:	b580      	push	{r7, lr}
 800c578:	b088      	sub	sp, #32
 800c57a:	af00      	add	r7, sp, #0
 800c57c:	60f8      	str	r0, [r7, #12]
 800c57e:	60b9      	str	r1, [r7, #8]
 800c580:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c582:	2300      	movs	r3, #0
 800c584:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	2b01      	cmp	r3, #1
 800c590:	d904      	bls.n	800c59c <remove_chain+0x26>
 800c592:	69bb      	ldr	r3, [r7, #24]
 800c594:	699b      	ldr	r3, [r3, #24]
 800c596:	68ba      	ldr	r2, [r7, #8]
 800c598:	429a      	cmp	r2, r3
 800c59a:	d301      	bcc.n	800c5a0 <remove_chain+0x2a>
 800c59c:	2302      	movs	r3, #2
 800c59e:	e04b      	b.n	800c638 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d00c      	beq.n	800c5c0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c5a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c5aa:	6879      	ldr	r1, [r7, #4]
 800c5ac:	69b8      	ldr	r0, [r7, #24]
 800c5ae:	f7ff fef8 	bl	800c3a2 <put_fat>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c5b6:	7ffb      	ldrb	r3, [r7, #31]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d001      	beq.n	800c5c0 <remove_chain+0x4a>
 800c5bc:	7ffb      	ldrb	r3, [r7, #31]
 800c5be:	e03b      	b.n	800c638 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c5c0:	68b9      	ldr	r1, [r7, #8]
 800c5c2:	68f8      	ldr	r0, [r7, #12]
 800c5c4:	f7ff fe45 	bl	800c252 <get_fat>
 800c5c8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d031      	beq.n	800c634 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	2b01      	cmp	r3, #1
 800c5d4:	d101      	bne.n	800c5da <remove_chain+0x64>
 800c5d6:	2302      	movs	r3, #2
 800c5d8:	e02e      	b.n	800c638 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5e0:	d101      	bne.n	800c5e6 <remove_chain+0x70>
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	e028      	b.n	800c638 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	68b9      	ldr	r1, [r7, #8]
 800c5ea:	69b8      	ldr	r0, [r7, #24]
 800c5ec:	f7ff fed9 	bl	800c3a2 <put_fat>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c5f4:	7ffb      	ldrb	r3, [r7, #31]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d001      	beq.n	800c5fe <remove_chain+0x88>
 800c5fa:	7ffb      	ldrb	r3, [r7, #31]
 800c5fc:	e01c      	b.n	800c638 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c5fe:	69bb      	ldr	r3, [r7, #24]
 800c600:	695a      	ldr	r2, [r3, #20]
 800c602:	69bb      	ldr	r3, [r7, #24]
 800c604:	699b      	ldr	r3, [r3, #24]
 800c606:	3b02      	subs	r3, #2
 800c608:	429a      	cmp	r2, r3
 800c60a:	d20b      	bcs.n	800c624 <remove_chain+0xae>
			fs->free_clst++;
 800c60c:	69bb      	ldr	r3, [r7, #24]
 800c60e:	695b      	ldr	r3, [r3, #20]
 800c610:	1c5a      	adds	r2, r3, #1
 800c612:	69bb      	ldr	r3, [r7, #24]
 800c614:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800c616:	69bb      	ldr	r3, [r7, #24]
 800c618:	791b      	ldrb	r3, [r3, #4]
 800c61a:	f043 0301 	orr.w	r3, r3, #1
 800c61e:	b2da      	uxtb	r2, r3
 800c620:	69bb      	ldr	r3, [r7, #24]
 800c622:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c628:	69bb      	ldr	r3, [r7, #24]
 800c62a:	699b      	ldr	r3, [r3, #24]
 800c62c:	68ba      	ldr	r2, [r7, #8]
 800c62e:	429a      	cmp	r2, r3
 800c630:	d3c6      	bcc.n	800c5c0 <remove_chain+0x4a>
 800c632:	e000      	b.n	800c636 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c634:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c636:	2300      	movs	r3, #0
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3720      	adds	r7, #32
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b088      	sub	sp, #32
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d10d      	bne.n	800c672 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c656:	693b      	ldr	r3, [r7, #16]
 800c658:	691b      	ldr	r3, [r3, #16]
 800c65a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c65c:	69bb      	ldr	r3, [r7, #24]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d004      	beq.n	800c66c <create_chain+0x2c>
 800c662:	693b      	ldr	r3, [r7, #16]
 800c664:	699b      	ldr	r3, [r3, #24]
 800c666:	69ba      	ldr	r2, [r7, #24]
 800c668:	429a      	cmp	r2, r3
 800c66a:	d31b      	bcc.n	800c6a4 <create_chain+0x64>
 800c66c:	2301      	movs	r3, #1
 800c66e:	61bb      	str	r3, [r7, #24]
 800c670:	e018      	b.n	800c6a4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c672:	6839      	ldr	r1, [r7, #0]
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f7ff fdec 	bl	800c252 <get_fat>
 800c67a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	2b01      	cmp	r3, #1
 800c680:	d801      	bhi.n	800c686 <create_chain+0x46>
 800c682:	2301      	movs	r3, #1
 800c684:	e070      	b.n	800c768 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c68c:	d101      	bne.n	800c692 <create_chain+0x52>
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	e06a      	b.n	800c768 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	699b      	ldr	r3, [r3, #24]
 800c696:	68fa      	ldr	r2, [r7, #12]
 800c698:	429a      	cmp	r2, r3
 800c69a:	d201      	bcs.n	800c6a0 <create_chain+0x60>
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	e063      	b.n	800c768 <create_chain+0x128>
		scl = clst;
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c6a4:	69bb      	ldr	r3, [r7, #24]
 800c6a6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c6a8:	69fb      	ldr	r3, [r7, #28]
 800c6aa:	3301      	adds	r3, #1
 800c6ac:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	699b      	ldr	r3, [r3, #24]
 800c6b2:	69fa      	ldr	r2, [r7, #28]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d307      	bcc.n	800c6c8 <create_chain+0x88>
				ncl = 2;
 800c6b8:	2302      	movs	r3, #2
 800c6ba:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c6bc:	69fa      	ldr	r2, [r7, #28]
 800c6be:	69bb      	ldr	r3, [r7, #24]
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d901      	bls.n	800c6c8 <create_chain+0x88>
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	e04f      	b.n	800c768 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c6c8:	69f9      	ldr	r1, [r7, #28]
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f7ff fdc1 	bl	800c252 <get_fat>
 800c6d0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d00e      	beq.n	800c6f6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	2b01      	cmp	r3, #1
 800c6dc:	d003      	beq.n	800c6e6 <create_chain+0xa6>
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6e4:	d101      	bne.n	800c6ea <create_chain+0xaa>
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	e03e      	b.n	800c768 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c6ea:	69fa      	ldr	r2, [r7, #28]
 800c6ec:	69bb      	ldr	r3, [r7, #24]
 800c6ee:	429a      	cmp	r2, r3
 800c6f0:	d1da      	bne.n	800c6a8 <create_chain+0x68>
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	e038      	b.n	800c768 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c6f6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c6f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c6fc:	69f9      	ldr	r1, [r7, #28]
 800c6fe:	6938      	ldr	r0, [r7, #16]
 800c700:	f7ff fe4f 	bl	800c3a2 <put_fat>
 800c704:	4603      	mov	r3, r0
 800c706:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c708:	7dfb      	ldrb	r3, [r7, #23]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d109      	bne.n	800c722 <create_chain+0xe2>
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d006      	beq.n	800c722 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c714:	69fa      	ldr	r2, [r7, #28]
 800c716:	6839      	ldr	r1, [r7, #0]
 800c718:	6938      	ldr	r0, [r7, #16]
 800c71a:	f7ff fe42 	bl	800c3a2 <put_fat>
 800c71e:	4603      	mov	r3, r0
 800c720:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c722:	7dfb      	ldrb	r3, [r7, #23]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d116      	bne.n	800c756 <create_chain+0x116>
		fs->last_clst = ncl;
 800c728:	693b      	ldr	r3, [r7, #16]
 800c72a:	69fa      	ldr	r2, [r7, #28]
 800c72c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	695a      	ldr	r2, [r3, #20]
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	699b      	ldr	r3, [r3, #24]
 800c736:	3b02      	subs	r3, #2
 800c738:	429a      	cmp	r2, r3
 800c73a:	d804      	bhi.n	800c746 <create_chain+0x106>
 800c73c:	693b      	ldr	r3, [r7, #16]
 800c73e:	695b      	ldr	r3, [r3, #20]
 800c740:	1e5a      	subs	r2, r3, #1
 800c742:	693b      	ldr	r3, [r7, #16]
 800c744:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800c746:	693b      	ldr	r3, [r7, #16]
 800c748:	791b      	ldrb	r3, [r3, #4]
 800c74a:	f043 0301 	orr.w	r3, r3, #1
 800c74e:	b2da      	uxtb	r2, r3
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	711a      	strb	r2, [r3, #4]
 800c754:	e007      	b.n	800c766 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c756:	7dfb      	ldrb	r3, [r7, #23]
 800c758:	2b01      	cmp	r3, #1
 800c75a:	d102      	bne.n	800c762 <create_chain+0x122>
 800c75c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c760:	e000      	b.n	800c764 <create_chain+0x124>
 800c762:	2301      	movs	r3, #1
 800c764:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c766:	69fb      	ldr	r3, [r7, #28]
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3720      	adds	r7, #32
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}

0800c770 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c770:	b480      	push	{r7}
 800c772:	b087      	sub	sp, #28
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
 800c778:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c784:	3304      	adds	r3, #4
 800c786:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	0a5b      	lsrs	r3, r3, #9
 800c78c:	68fa      	ldr	r2, [r7, #12]
 800c78e:	8952      	ldrh	r2, [r2, #10]
 800c790:	fbb3 f3f2 	udiv	r3, r3, r2
 800c794:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c796:	693b      	ldr	r3, [r7, #16]
 800c798:	1d1a      	adds	r2, r3, #4
 800c79a:	613a      	str	r2, [r7, #16]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d101      	bne.n	800c7aa <clmt_clust+0x3a>
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	e010      	b.n	800c7cc <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c7aa:	697a      	ldr	r2, [r7, #20]
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	d307      	bcc.n	800c7c2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c7b2:	697a      	ldr	r2, [r7, #20]
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	1ad3      	subs	r3, r2, r3
 800c7b8:	617b      	str	r3, [r7, #20]
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	3304      	adds	r3, #4
 800c7be:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c7c0:	e7e9      	b.n	800c796 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c7c2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	681a      	ldr	r2, [r3, #0]
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	4413      	add	r3, r2
}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	371c      	adds	r7, #28
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d6:	4770      	bx	lr

0800c7d8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b086      	sub	sp, #24
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c7ee:	d204      	bcs.n	800c7fa <dir_sdi+0x22>
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	f003 031f 	and.w	r3, r3, #31
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d001      	beq.n	800c7fe <dir_sdi+0x26>
		return FR_INT_ERR;
 800c7fa:	2302      	movs	r3, #2
 800c7fc:	e063      	b.n	800c8c6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	683a      	ldr	r2, [r7, #0]
 800c802:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	689b      	ldr	r3, [r3, #8]
 800c808:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d106      	bne.n	800c81e <dir_sdi+0x46>
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	781b      	ldrb	r3, [r3, #0]
 800c814:	2b02      	cmp	r3, #2
 800c816:	d902      	bls.n	800c81e <dir_sdi+0x46>
		clst = fs->dirbase;
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c81c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d10c      	bne.n	800c83e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	095b      	lsrs	r3, r3, #5
 800c828:	693a      	ldr	r2, [r7, #16]
 800c82a:	8912      	ldrh	r2, [r2, #8]
 800c82c:	4293      	cmp	r3, r2
 800c82e:	d301      	bcc.n	800c834 <dir_sdi+0x5c>
 800c830:	2302      	movs	r3, #2
 800c832:	e048      	b.n	800c8c6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	61da      	str	r2, [r3, #28]
 800c83c:	e029      	b.n	800c892 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	895b      	ldrh	r3, [r3, #10]
 800c842:	025b      	lsls	r3, r3, #9
 800c844:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c846:	e019      	b.n	800c87c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6979      	ldr	r1, [r7, #20]
 800c84c:	4618      	mov	r0, r3
 800c84e:	f7ff fd00 	bl	800c252 <get_fat>
 800c852:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c85a:	d101      	bne.n	800c860 <dir_sdi+0x88>
 800c85c:	2301      	movs	r3, #1
 800c85e:	e032      	b.n	800c8c6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	2b01      	cmp	r3, #1
 800c864:	d904      	bls.n	800c870 <dir_sdi+0x98>
 800c866:	693b      	ldr	r3, [r7, #16]
 800c868:	699b      	ldr	r3, [r3, #24]
 800c86a:	697a      	ldr	r2, [r7, #20]
 800c86c:	429a      	cmp	r2, r3
 800c86e:	d301      	bcc.n	800c874 <dir_sdi+0x9c>
 800c870:	2302      	movs	r3, #2
 800c872:	e028      	b.n	800c8c6 <dir_sdi+0xee>
			ofs -= csz;
 800c874:	683a      	ldr	r2, [r7, #0]
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	1ad3      	subs	r3, r2, r3
 800c87a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c87c:	683a      	ldr	r2, [r7, #0]
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	429a      	cmp	r2, r3
 800c882:	d2e1      	bcs.n	800c848 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c884:	6979      	ldr	r1, [r7, #20]
 800c886:	6938      	ldr	r0, [r7, #16]
 800c888:	f7ff fcc4 	bl	800c214 <clust2sect>
 800c88c:	4602      	mov	r2, r0
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	697a      	ldr	r2, [r7, #20]
 800c896:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	69db      	ldr	r3, [r3, #28]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d101      	bne.n	800c8a4 <dir_sdi+0xcc>
 800c8a0:	2302      	movs	r3, #2
 800c8a2:	e010      	b.n	800c8c6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	69da      	ldr	r2, [r3, #28]
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	0a5b      	lsrs	r3, r3, #9
 800c8ac:	441a      	add	r2, r3
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8be:	441a      	add	r2, r3
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c8c4:	2300      	movs	r3, #0
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3718      	adds	r7, #24
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}

0800c8ce <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c8ce:	b580      	push	{r7, lr}
 800c8d0:	b086      	sub	sp, #24
 800c8d2:	af00      	add	r7, sp, #0
 800c8d4:	6078      	str	r0, [r7, #4]
 800c8d6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	695b      	ldr	r3, [r3, #20]
 800c8e2:	3320      	adds	r3, #32
 800c8e4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	69db      	ldr	r3, [r3, #28]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d003      	beq.n	800c8f6 <dir_next+0x28>
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c8f4:	d301      	bcc.n	800c8fa <dir_next+0x2c>
 800c8f6:	2304      	movs	r3, #4
 800c8f8:	e0aa      	b.n	800ca50 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c900:	2b00      	cmp	r3, #0
 800c902:	f040 8098 	bne.w	800ca36 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	69db      	ldr	r3, [r3, #28]
 800c90a:	1c5a      	adds	r2, r3, #1
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	699b      	ldr	r3, [r3, #24]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d10b      	bne.n	800c930 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	095b      	lsrs	r3, r3, #5
 800c91c:	68fa      	ldr	r2, [r7, #12]
 800c91e:	8912      	ldrh	r2, [r2, #8]
 800c920:	4293      	cmp	r3, r2
 800c922:	f0c0 8088 	bcc.w	800ca36 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2200      	movs	r2, #0
 800c92a:	61da      	str	r2, [r3, #28]
 800c92c:	2304      	movs	r3, #4
 800c92e:	e08f      	b.n	800ca50 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	0a5b      	lsrs	r3, r3, #9
 800c934:	68fa      	ldr	r2, [r7, #12]
 800c936:	8952      	ldrh	r2, [r2, #10]
 800c938:	3a01      	subs	r2, #1
 800c93a:	4013      	ands	r3, r2
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d17a      	bne.n	800ca36 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c940:	687a      	ldr	r2, [r7, #4]
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	699b      	ldr	r3, [r3, #24]
 800c946:	4619      	mov	r1, r3
 800c948:	4610      	mov	r0, r2
 800c94a:	f7ff fc82 	bl	800c252 <get_fat>
 800c94e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	2b01      	cmp	r3, #1
 800c954:	d801      	bhi.n	800c95a <dir_next+0x8c>
 800c956:	2302      	movs	r3, #2
 800c958:	e07a      	b.n	800ca50 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c960:	d101      	bne.n	800c966 <dir_next+0x98>
 800c962:	2301      	movs	r3, #1
 800c964:	e074      	b.n	800ca50 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	699b      	ldr	r3, [r3, #24]
 800c96a:	697a      	ldr	r2, [r7, #20]
 800c96c:	429a      	cmp	r2, r3
 800c96e:	d358      	bcc.n	800ca22 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d104      	bne.n	800c980 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2200      	movs	r2, #0
 800c97a:	61da      	str	r2, [r3, #28]
 800c97c:	2304      	movs	r3, #4
 800c97e:	e067      	b.n	800ca50 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c980:	687a      	ldr	r2, [r7, #4]
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	699b      	ldr	r3, [r3, #24]
 800c986:	4619      	mov	r1, r3
 800c988:	4610      	mov	r0, r2
 800c98a:	f7ff fe59 	bl	800c640 <create_chain>
 800c98e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d101      	bne.n	800c99a <dir_next+0xcc>
 800c996:	2307      	movs	r3, #7
 800c998:	e05a      	b.n	800ca50 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d101      	bne.n	800c9a4 <dir_next+0xd6>
 800c9a0:	2302      	movs	r3, #2
 800c9a2:	e055      	b.n	800ca50 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9aa:	d101      	bne.n	800c9b0 <dir_next+0xe2>
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	e04f      	b.n	800ca50 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c9b0:	68f8      	ldr	r0, [r7, #12]
 800c9b2:	f7ff fb4f 	bl	800c054 <sync_window>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d001      	beq.n	800c9c0 <dir_next+0xf2>
 800c9bc:	2301      	movs	r3, #1
 800c9be:	e047      	b.n	800ca50 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	3334      	adds	r3, #52	; 0x34
 800c9c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c9c8:	2100      	movs	r1, #0
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f7ff f979 	bl	800bcc2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	613b      	str	r3, [r7, #16]
 800c9d4:	6979      	ldr	r1, [r7, #20]
 800c9d6:	68f8      	ldr	r0, [r7, #12]
 800c9d8:	f7ff fc1c 	bl	800c214 <clust2sect>
 800c9dc:	4602      	mov	r2, r0
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	631a      	str	r2, [r3, #48]	; 0x30
 800c9e2:	e012      	b.n	800ca0a <dir_next+0x13c>
						fs->wflag = 1;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c9ea:	68f8      	ldr	r0, [r7, #12]
 800c9ec:	f7ff fb32 	bl	800c054 <sync_window>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d001      	beq.n	800c9fa <dir_next+0x12c>
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	e02a      	b.n	800ca50 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c9fa:	693b      	ldr	r3, [r7, #16]
 800c9fc:	3301      	adds	r3, #1
 800c9fe:	613b      	str	r3, [r7, #16]
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca04:	1c5a      	adds	r2, r3, #1
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	631a      	str	r2, [r3, #48]	; 0x30
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	895b      	ldrh	r3, [r3, #10]
 800ca0e:	461a      	mov	r2, r3
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d3e6      	bcc.n	800c9e4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ca1a:	693b      	ldr	r3, [r7, #16]
 800ca1c:	1ad2      	subs	r2, r2, r3
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	697a      	ldr	r2, [r7, #20]
 800ca26:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ca28:	6979      	ldr	r1, [r7, #20]
 800ca2a:	68f8      	ldr	r0, [r7, #12]
 800ca2c:	f7ff fbf2 	bl	800c214 <clust2sect>
 800ca30:	4602      	mov	r2, r0
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	68ba      	ldr	r2, [r7, #8]
 800ca3a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca48:	441a      	add	r2, r3
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ca4e:	2300      	movs	r3, #0
}
 800ca50:	4618      	mov	r0, r3
 800ca52:	3718      	adds	r7, #24
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b086      	sub	sp, #24
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ca68:	2100      	movs	r1, #0
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f7ff feb4 	bl	800c7d8 <dir_sdi>
 800ca70:	4603      	mov	r3, r0
 800ca72:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ca74:	7dfb      	ldrb	r3, [r7, #23]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d12b      	bne.n	800cad2 <dir_alloc+0x7a>
		n = 0;
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	69db      	ldr	r3, [r3, #28]
 800ca82:	4619      	mov	r1, r3
 800ca84:	68f8      	ldr	r0, [r7, #12]
 800ca86:	f7ff fb29 	bl	800c0dc <move_window>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ca8e:	7dfb      	ldrb	r3, [r7, #23]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d11d      	bne.n	800cad0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6a1b      	ldr	r3, [r3, #32]
 800ca98:	781b      	ldrb	r3, [r3, #0]
 800ca9a:	2be5      	cmp	r3, #229	; 0xe5
 800ca9c:	d004      	beq.n	800caa8 <dir_alloc+0x50>
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6a1b      	ldr	r3, [r3, #32]
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d107      	bne.n	800cab8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800caa8:	693b      	ldr	r3, [r7, #16]
 800caaa:	3301      	adds	r3, #1
 800caac:	613b      	str	r3, [r7, #16]
 800caae:	693a      	ldr	r2, [r7, #16]
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d102      	bne.n	800cabc <dir_alloc+0x64>
 800cab6:	e00c      	b.n	800cad2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cab8:	2300      	movs	r3, #0
 800caba:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800cabc:	2101      	movs	r1, #1
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f7ff ff05 	bl	800c8ce <dir_next>
 800cac4:	4603      	mov	r3, r0
 800cac6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cac8:	7dfb      	ldrb	r3, [r7, #23]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d0d7      	beq.n	800ca7e <dir_alloc+0x26>
 800cace:	e000      	b.n	800cad2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800cad0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cad2:	7dfb      	ldrb	r3, [r7, #23]
 800cad4:	2b04      	cmp	r3, #4
 800cad6:	d101      	bne.n	800cadc <dir_alloc+0x84>
 800cad8:	2307      	movs	r3, #7
 800cada:	75fb      	strb	r3, [r7, #23]
	return res;
 800cadc:	7dfb      	ldrb	r3, [r7, #23]
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3718      	adds	r7, #24
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}

0800cae6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800cae6:	b580      	push	{r7, lr}
 800cae8:	b084      	sub	sp, #16
 800caea:	af00      	add	r7, sp, #0
 800caec:	6078      	str	r0, [r7, #4]
 800caee:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	331a      	adds	r3, #26
 800caf4:	4618      	mov	r0, r3
 800caf6:	f7ff f841 	bl	800bb7c <ld_word>
 800cafa:	4603      	mov	r3, r0
 800cafc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	781b      	ldrb	r3, [r3, #0]
 800cb02:	2b03      	cmp	r3, #3
 800cb04:	d109      	bne.n	800cb1a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	3314      	adds	r3, #20
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f7ff f836 	bl	800bb7c <ld_word>
 800cb10:	4603      	mov	r3, r0
 800cb12:	041b      	lsls	r3, r3, #16
 800cb14:	68fa      	ldr	r2, [r7, #12]
 800cb16:	4313      	orrs	r3, r2
 800cb18:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	3710      	adds	r7, #16
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}

0800cb24 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b084      	sub	sp, #16
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	60f8      	str	r0, [r7, #12]
 800cb2c:	60b9      	str	r1, [r7, #8]
 800cb2e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	331a      	adds	r3, #26
 800cb34:	687a      	ldr	r2, [r7, #4]
 800cb36:	b292      	uxth	r2, r2
 800cb38:	4611      	mov	r1, r2
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f7ff f859 	bl	800bbf2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	781b      	ldrb	r3, [r3, #0]
 800cb44:	2b03      	cmp	r3, #3
 800cb46:	d109      	bne.n	800cb5c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	f103 0214 	add.w	r2, r3, #20
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	0c1b      	lsrs	r3, r3, #16
 800cb52:	b29b      	uxth	r3, r3
 800cb54:	4619      	mov	r1, r3
 800cb56:	4610      	mov	r0, r2
 800cb58:	f7ff f84b 	bl	800bbf2 <st_word>
	}
}
 800cb5c:	bf00      	nop
 800cb5e:	3710      	adds	r7, #16
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}

0800cb64 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800cb64:	b590      	push	{r4, r7, lr}
 800cb66:	b087      	sub	sp, #28
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
 800cb6c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	331a      	adds	r3, #26
 800cb72:	4618      	mov	r0, r3
 800cb74:	f7ff f802 	bl	800bb7c <ld_word>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d001      	beq.n	800cb82 <cmp_lfn+0x1e>
 800cb7e:	2300      	movs	r3, #0
 800cb80:	e059      	b.n	800cc36 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	781b      	ldrb	r3, [r3, #0]
 800cb86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb8a:	1e5a      	subs	r2, r3, #1
 800cb8c:	4613      	mov	r3, r2
 800cb8e:	005b      	lsls	r3, r3, #1
 800cb90:	4413      	add	r3, r2
 800cb92:	009b      	lsls	r3, r3, #2
 800cb94:	4413      	add	r3, r2
 800cb96:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cb98:	2301      	movs	r3, #1
 800cb9a:	81fb      	strh	r3, [r7, #14]
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	613b      	str	r3, [r7, #16]
 800cba0:	e033      	b.n	800cc0a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800cba2:	4a27      	ldr	r2, [pc, #156]	; (800cc40 <cmp_lfn+0xdc>)
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	4413      	add	r3, r2
 800cba8:	781b      	ldrb	r3, [r3, #0]
 800cbaa:	461a      	mov	r2, r3
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	4413      	add	r3, r2
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f7fe ffe3 	bl	800bb7c <ld_word>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800cbba:	89fb      	ldrh	r3, [r7, #14]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d01a      	beq.n	800cbf6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800cbc0:	697b      	ldr	r3, [r7, #20]
 800cbc2:	2bfe      	cmp	r3, #254	; 0xfe
 800cbc4:	d812      	bhi.n	800cbec <cmp_lfn+0x88>
 800cbc6:	89bb      	ldrh	r3, [r7, #12]
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f001 ffcd 	bl	800eb68 <ff_wtoupper>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	461c      	mov	r4, r3
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	1c5a      	adds	r2, r3, #1
 800cbd6:	617a      	str	r2, [r7, #20]
 800cbd8:	005b      	lsls	r3, r3, #1
 800cbda:	687a      	ldr	r2, [r7, #4]
 800cbdc:	4413      	add	r3, r2
 800cbde:	881b      	ldrh	r3, [r3, #0]
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f001 ffc1 	bl	800eb68 <ff_wtoupper>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	429c      	cmp	r4, r3
 800cbea:	d001      	beq.n	800cbf0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800cbec:	2300      	movs	r3, #0
 800cbee:	e022      	b.n	800cc36 <cmp_lfn+0xd2>
			}
			wc = uc;
 800cbf0:	89bb      	ldrh	r3, [r7, #12]
 800cbf2:	81fb      	strh	r3, [r7, #14]
 800cbf4:	e006      	b.n	800cc04 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800cbf6:	89bb      	ldrh	r3, [r7, #12]
 800cbf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d001      	beq.n	800cc04 <cmp_lfn+0xa0>
 800cc00:	2300      	movs	r3, #0
 800cc02:	e018      	b.n	800cc36 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	3301      	adds	r3, #1
 800cc08:	613b      	str	r3, [r7, #16]
 800cc0a:	693b      	ldr	r3, [r7, #16]
 800cc0c:	2b0c      	cmp	r3, #12
 800cc0e:	d9c8      	bls.n	800cba2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	781b      	ldrb	r3, [r3, #0]
 800cc14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d00b      	beq.n	800cc34 <cmp_lfn+0xd0>
 800cc1c:	89fb      	ldrh	r3, [r7, #14]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d008      	beq.n	800cc34 <cmp_lfn+0xd0>
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	005b      	lsls	r3, r3, #1
 800cc26:	687a      	ldr	r2, [r7, #4]
 800cc28:	4413      	add	r3, r2
 800cc2a:	881b      	ldrh	r3, [r3, #0]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d001      	beq.n	800cc34 <cmp_lfn+0xd0>
 800cc30:	2300      	movs	r3, #0
 800cc32:	e000      	b.n	800cc36 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800cc34:	2301      	movs	r3, #1
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	371c      	adds	r7, #28
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd90      	pop	{r4, r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	08010e44 	.word	0x08010e44

0800cc44 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b086      	sub	sp, #24
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
 800cc4c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	331a      	adds	r3, #26
 800cc52:	4618      	mov	r0, r3
 800cc54:	f7fe ff92 	bl	800bb7c <ld_word>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d001      	beq.n	800cc62 <pick_lfn+0x1e>
 800cc5e:	2300      	movs	r3, #0
 800cc60:	e04d      	b.n	800ccfe <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	781b      	ldrb	r3, [r3, #0]
 800cc66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc6a:	1e5a      	subs	r2, r3, #1
 800cc6c:	4613      	mov	r3, r2
 800cc6e:	005b      	lsls	r3, r3, #1
 800cc70:	4413      	add	r3, r2
 800cc72:	009b      	lsls	r3, r3, #2
 800cc74:	4413      	add	r3, r2
 800cc76:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cc78:	2301      	movs	r3, #1
 800cc7a:	81fb      	strh	r3, [r7, #14]
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	613b      	str	r3, [r7, #16]
 800cc80:	e028      	b.n	800ccd4 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800cc82:	4a21      	ldr	r2, [pc, #132]	; (800cd08 <pick_lfn+0xc4>)
 800cc84:	693b      	ldr	r3, [r7, #16]
 800cc86:	4413      	add	r3, r2
 800cc88:	781b      	ldrb	r3, [r3, #0]
 800cc8a:	461a      	mov	r2, r3
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	4413      	add	r3, r2
 800cc90:	4618      	mov	r0, r3
 800cc92:	f7fe ff73 	bl	800bb7c <ld_word>
 800cc96:	4603      	mov	r3, r0
 800cc98:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800cc9a:	89fb      	ldrh	r3, [r7, #14]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d00f      	beq.n	800ccc0 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800cca0:	697b      	ldr	r3, [r7, #20]
 800cca2:	2bfe      	cmp	r3, #254	; 0xfe
 800cca4:	d901      	bls.n	800ccaa <pick_lfn+0x66>
 800cca6:	2300      	movs	r3, #0
 800cca8:	e029      	b.n	800ccfe <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800ccaa:	89bb      	ldrh	r3, [r7, #12]
 800ccac:	81fb      	strh	r3, [r7, #14]
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	1c5a      	adds	r2, r3, #1
 800ccb2:	617a      	str	r2, [r7, #20]
 800ccb4:	005b      	lsls	r3, r3, #1
 800ccb6:	687a      	ldr	r2, [r7, #4]
 800ccb8:	4413      	add	r3, r2
 800ccba:	89fa      	ldrh	r2, [r7, #14]
 800ccbc:	801a      	strh	r2, [r3, #0]
 800ccbe:	e006      	b.n	800ccce <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ccc0:	89bb      	ldrh	r3, [r7, #12]
 800ccc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d001      	beq.n	800ccce <pick_lfn+0x8a>
 800ccca:	2300      	movs	r3, #0
 800cccc:	e017      	b.n	800ccfe <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	3301      	adds	r3, #1
 800ccd2:	613b      	str	r3, [r7, #16]
 800ccd4:	693b      	ldr	r3, [r7, #16]
 800ccd6:	2b0c      	cmp	r3, #12
 800ccd8:	d9d3      	bls.n	800cc82 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d00a      	beq.n	800ccfc <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800cce6:	697b      	ldr	r3, [r7, #20]
 800cce8:	2bfe      	cmp	r3, #254	; 0xfe
 800ccea:	d901      	bls.n	800ccf0 <pick_lfn+0xac>
 800ccec:	2300      	movs	r3, #0
 800ccee:	e006      	b.n	800ccfe <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	005b      	lsls	r3, r3, #1
 800ccf4:	687a      	ldr	r2, [r7, #4]
 800ccf6:	4413      	add	r3, r2
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800ccfc:	2301      	movs	r3, #1
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3718      	adds	r7, #24
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}
 800cd06:	bf00      	nop
 800cd08:	08010e44 	.word	0x08010e44

0800cd0c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b088      	sub	sp, #32
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	60f8      	str	r0, [r7, #12]
 800cd14:	60b9      	str	r1, [r7, #8]
 800cd16:	4611      	mov	r1, r2
 800cd18:	461a      	mov	r2, r3
 800cd1a:	460b      	mov	r3, r1
 800cd1c:	71fb      	strb	r3, [r7, #7]
 800cd1e:	4613      	mov	r3, r2
 800cd20:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	330d      	adds	r3, #13
 800cd26:	79ba      	ldrb	r2, [r7, #6]
 800cd28:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	330b      	adds	r3, #11
 800cd2e:	220f      	movs	r2, #15
 800cd30:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800cd32:	68bb      	ldr	r3, [r7, #8]
 800cd34:	330c      	adds	r3, #12
 800cd36:	2200      	movs	r2, #0
 800cd38:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	331a      	adds	r3, #26
 800cd3e:	2100      	movs	r1, #0
 800cd40:	4618      	mov	r0, r3
 800cd42:	f7fe ff56 	bl	800bbf2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800cd46:	79fb      	ldrb	r3, [r7, #7]
 800cd48:	1e5a      	subs	r2, r3, #1
 800cd4a:	4613      	mov	r3, r2
 800cd4c:	005b      	lsls	r3, r3, #1
 800cd4e:	4413      	add	r3, r2
 800cd50:	009b      	lsls	r3, r3, #2
 800cd52:	4413      	add	r3, r2
 800cd54:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800cd56:	2300      	movs	r3, #0
 800cd58:	82fb      	strh	r3, [r7, #22]
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800cd5e:	8afb      	ldrh	r3, [r7, #22]
 800cd60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cd64:	4293      	cmp	r3, r2
 800cd66:	d007      	beq.n	800cd78 <put_lfn+0x6c>
 800cd68:	69fb      	ldr	r3, [r7, #28]
 800cd6a:	1c5a      	adds	r2, r3, #1
 800cd6c:	61fa      	str	r2, [r7, #28]
 800cd6e:	005b      	lsls	r3, r3, #1
 800cd70:	68fa      	ldr	r2, [r7, #12]
 800cd72:	4413      	add	r3, r2
 800cd74:	881b      	ldrh	r3, [r3, #0]
 800cd76:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800cd78:	4a17      	ldr	r2, [pc, #92]	; (800cdd8 <put_lfn+0xcc>)
 800cd7a:	69bb      	ldr	r3, [r7, #24]
 800cd7c:	4413      	add	r3, r2
 800cd7e:	781b      	ldrb	r3, [r3, #0]
 800cd80:	461a      	mov	r2, r3
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	4413      	add	r3, r2
 800cd86:	8afa      	ldrh	r2, [r7, #22]
 800cd88:	4611      	mov	r1, r2
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f7fe ff31 	bl	800bbf2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800cd90:	8afb      	ldrh	r3, [r7, #22]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d102      	bne.n	800cd9c <put_lfn+0x90>
 800cd96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cd9a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800cd9c:	69bb      	ldr	r3, [r7, #24]
 800cd9e:	3301      	adds	r3, #1
 800cda0:	61bb      	str	r3, [r7, #24]
 800cda2:	69bb      	ldr	r3, [r7, #24]
 800cda4:	2b0c      	cmp	r3, #12
 800cda6:	d9da      	bls.n	800cd5e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800cda8:	8afb      	ldrh	r3, [r7, #22]
 800cdaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	d006      	beq.n	800cdc0 <put_lfn+0xb4>
 800cdb2:	69fb      	ldr	r3, [r7, #28]
 800cdb4:	005b      	lsls	r3, r3, #1
 800cdb6:	68fa      	ldr	r2, [r7, #12]
 800cdb8:	4413      	add	r3, r2
 800cdba:	881b      	ldrh	r3, [r3, #0]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d103      	bne.n	800cdc8 <put_lfn+0xbc>
 800cdc0:	79fb      	ldrb	r3, [r7, #7]
 800cdc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdc6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	79fa      	ldrb	r2, [r7, #7]
 800cdcc:	701a      	strb	r2, [r3, #0]
}
 800cdce:	bf00      	nop
 800cdd0:	3720      	adds	r7, #32
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}
 800cdd6:	bf00      	nop
 800cdd8:	08010e44 	.word	0x08010e44

0800cddc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b08c      	sub	sp, #48	; 0x30
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	60f8      	str	r0, [r7, #12]
 800cde4:	60b9      	str	r1, [r7, #8]
 800cde6:	607a      	str	r2, [r7, #4]
 800cde8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800cdea:	220b      	movs	r2, #11
 800cdec:	68b9      	ldr	r1, [r7, #8]
 800cdee:	68f8      	ldr	r0, [r7, #12]
 800cdf0:	f7fe ff46 	bl	800bc80 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	2b05      	cmp	r3, #5
 800cdf8:	d929      	bls.n	800ce4e <gen_numname+0x72>
		sr = seq;
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800cdfe:	e020      	b.n	800ce42 <gen_numname+0x66>
			wc = *lfn++;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	1c9a      	adds	r2, r3, #2
 800ce04:	607a      	str	r2, [r7, #4]
 800ce06:	881b      	ldrh	r3, [r3, #0]
 800ce08:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce0e:	e015      	b.n	800ce3c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800ce10:	69fb      	ldr	r3, [r7, #28]
 800ce12:	005a      	lsls	r2, r3, #1
 800ce14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ce16:	f003 0301 	and.w	r3, r3, #1
 800ce1a:	4413      	add	r3, r2
 800ce1c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ce1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ce20:	085b      	lsrs	r3, r3, #1
 800ce22:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ce24:	69fb      	ldr	r3, [r7, #28]
 800ce26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d003      	beq.n	800ce36 <gen_numname+0x5a>
 800ce2e:	69fa      	ldr	r2, [r7, #28]
 800ce30:	4b30      	ldr	r3, [pc, #192]	; (800cef4 <gen_numname+0x118>)
 800ce32:	4053      	eors	r3, r2
 800ce34:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ce36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce38:	3301      	adds	r3, #1
 800ce3a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce3e:	2b0f      	cmp	r3, #15
 800ce40:	d9e6      	bls.n	800ce10 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	881b      	ldrh	r3, [r3, #0]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d1da      	bne.n	800ce00 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ce4a:	69fb      	ldr	r3, [r7, #28]
 800ce4c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ce4e:	2307      	movs	r3, #7
 800ce50:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	b2db      	uxtb	r3, r3
 800ce56:	f003 030f 	and.w	r3, r3, #15
 800ce5a:	b2db      	uxtb	r3, r3
 800ce5c:	3330      	adds	r3, #48	; 0x30
 800ce5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800ce62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ce66:	2b39      	cmp	r3, #57	; 0x39
 800ce68:	d904      	bls.n	800ce74 <gen_numname+0x98>
 800ce6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ce6e:	3307      	adds	r3, #7
 800ce70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800ce74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce76:	1e5a      	subs	r2, r3, #1
 800ce78:	62ba      	str	r2, [r7, #40]	; 0x28
 800ce7a:	3330      	adds	r3, #48	; 0x30
 800ce7c:	443b      	add	r3, r7
 800ce7e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ce82:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	091b      	lsrs	r3, r3, #4
 800ce8a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d1df      	bne.n	800ce52 <gen_numname+0x76>
	ns[i] = '~';
 800ce92:	f107 0214 	add.w	r2, r7, #20
 800ce96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce98:	4413      	add	r3, r2
 800ce9a:	227e      	movs	r2, #126	; 0x7e
 800ce9c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ce9e:	2300      	movs	r3, #0
 800cea0:	627b      	str	r3, [r7, #36]	; 0x24
 800cea2:	e002      	b.n	800ceaa <gen_numname+0xce>
 800cea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea6:	3301      	adds	r3, #1
 800cea8:	627b      	str	r3, [r7, #36]	; 0x24
 800ceaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ceac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceae:	429a      	cmp	r2, r3
 800ceb0:	d205      	bcs.n	800cebe <gen_numname+0xe2>
 800ceb2:	68fa      	ldr	r2, [r7, #12]
 800ceb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb6:	4413      	add	r3, r2
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	2b20      	cmp	r3, #32
 800cebc:	d1f2      	bne.n	800cea4 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800cebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec0:	2b07      	cmp	r3, #7
 800cec2:	d807      	bhi.n	800ced4 <gen_numname+0xf8>
 800cec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec6:	1c5a      	adds	r2, r3, #1
 800cec8:	62ba      	str	r2, [r7, #40]	; 0x28
 800ceca:	3330      	adds	r3, #48	; 0x30
 800cecc:	443b      	add	r3, r7
 800cece:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ced2:	e000      	b.n	800ced6 <gen_numname+0xfa>
 800ced4:	2120      	movs	r1, #32
 800ced6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced8:	1c5a      	adds	r2, r3, #1
 800ceda:	627a      	str	r2, [r7, #36]	; 0x24
 800cedc:	68fa      	ldr	r2, [r7, #12]
 800cede:	4413      	add	r3, r2
 800cee0:	460a      	mov	r2, r1
 800cee2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800cee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee6:	2b07      	cmp	r3, #7
 800cee8:	d9e9      	bls.n	800cebe <gen_numname+0xe2>
}
 800ceea:	bf00      	nop
 800ceec:	bf00      	nop
 800ceee:	3730      	adds	r7, #48	; 0x30
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}
 800cef4:	00011021 	.word	0x00011021

0800cef8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800cef8:	b480      	push	{r7}
 800cefa:	b085      	sub	sp, #20
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800cf00:	2300      	movs	r3, #0
 800cf02:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800cf04:	230b      	movs	r3, #11
 800cf06:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800cf08:	7bfb      	ldrb	r3, [r7, #15]
 800cf0a:	b2da      	uxtb	r2, r3
 800cf0c:	0852      	lsrs	r2, r2, #1
 800cf0e:	01db      	lsls	r3, r3, #7
 800cf10:	4313      	orrs	r3, r2
 800cf12:	b2da      	uxtb	r2, r3
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	1c59      	adds	r1, r3, #1
 800cf18:	6079      	str	r1, [r7, #4]
 800cf1a:	781b      	ldrb	r3, [r3, #0]
 800cf1c:	4413      	add	r3, r2
 800cf1e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	3b01      	subs	r3, #1
 800cf24:	60bb      	str	r3, [r7, #8]
 800cf26:	68bb      	ldr	r3, [r7, #8]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d1ed      	bne.n	800cf08 <sum_sfn+0x10>
	return sum;
 800cf2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3714      	adds	r7, #20
 800cf32:	46bd      	mov	sp, r7
 800cf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf38:	4770      	bx	lr

0800cf3a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800cf3a:	b580      	push	{r7, lr}
 800cf3c:	b086      	sub	sp, #24
 800cf3e:	af00      	add	r7, sp, #0
 800cf40:	6078      	str	r0, [r7, #4]
 800cf42:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800cf44:	2304      	movs	r3, #4
 800cf46:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800cf4e:	23ff      	movs	r3, #255	; 0xff
 800cf50:	757b      	strb	r3, [r7, #21]
 800cf52:	23ff      	movs	r3, #255	; 0xff
 800cf54:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800cf56:	e081      	b.n	800d05c <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	69db      	ldr	r3, [r3, #28]
 800cf5c:	4619      	mov	r1, r3
 800cf5e:	6938      	ldr	r0, [r7, #16]
 800cf60:	f7ff f8bc 	bl	800c0dc <move_window>
 800cf64:	4603      	mov	r3, r0
 800cf66:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cf68:	7dfb      	ldrb	r3, [r7, #23]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d17c      	bne.n	800d068 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6a1b      	ldr	r3, [r3, #32]
 800cf72:	781b      	ldrb	r3, [r3, #0]
 800cf74:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800cf76:	7dbb      	ldrb	r3, [r7, #22]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d102      	bne.n	800cf82 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800cf7c:	2304      	movs	r3, #4
 800cf7e:	75fb      	strb	r3, [r7, #23]
 800cf80:	e077      	b.n	800d072 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6a1b      	ldr	r3, [r3, #32]
 800cf86:	330b      	adds	r3, #11
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf8e:	73fb      	strb	r3, [r7, #15]
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	7bfa      	ldrb	r2, [r7, #15]
 800cf94:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800cf96:	7dbb      	ldrb	r3, [r7, #22]
 800cf98:	2be5      	cmp	r3, #229	; 0xe5
 800cf9a:	d00e      	beq.n	800cfba <dir_read+0x80>
 800cf9c:	7dbb      	ldrb	r3, [r7, #22]
 800cf9e:	2b2e      	cmp	r3, #46	; 0x2e
 800cfa0:	d00b      	beq.n	800cfba <dir_read+0x80>
 800cfa2:	7bfb      	ldrb	r3, [r7, #15]
 800cfa4:	f023 0320 	bic.w	r3, r3, #32
 800cfa8:	2b08      	cmp	r3, #8
 800cfaa:	bf0c      	ite	eq
 800cfac:	2301      	moveq	r3, #1
 800cfae:	2300      	movne	r3, #0
 800cfb0:	b2db      	uxtb	r3, r3
 800cfb2:	461a      	mov	r2, r3
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	4293      	cmp	r3, r2
 800cfb8:	d002      	beq.n	800cfc0 <dir_read+0x86>
				ord = 0xFF;
 800cfba:	23ff      	movs	r3, #255	; 0xff
 800cfbc:	757b      	strb	r3, [r7, #21]
 800cfbe:	e044      	b.n	800d04a <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800cfc0:	7bfb      	ldrb	r3, [r7, #15]
 800cfc2:	2b0f      	cmp	r3, #15
 800cfc4:	d12f      	bne.n	800d026 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800cfc6:	7dbb      	ldrb	r3, [r7, #22]
 800cfc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d00d      	beq.n	800cfec <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6a1b      	ldr	r3, [r3, #32]
 800cfd4:	7b5b      	ldrb	r3, [r3, #13]
 800cfd6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800cfd8:	7dbb      	ldrb	r3, [r7, #22]
 800cfda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cfde:	75bb      	strb	r3, [r7, #22]
 800cfe0:	7dbb      	ldrb	r3, [r7, #22]
 800cfe2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	695a      	ldr	r2, [r3, #20]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cfec:	7dba      	ldrb	r2, [r7, #22]
 800cfee:	7d7b      	ldrb	r3, [r7, #21]
 800cff0:	429a      	cmp	r2, r3
 800cff2:	d115      	bne.n	800d020 <dir_read+0xe6>
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	6a1b      	ldr	r3, [r3, #32]
 800cff8:	330d      	adds	r3, #13
 800cffa:	781b      	ldrb	r3, [r3, #0]
 800cffc:	7d3a      	ldrb	r2, [r7, #20]
 800cffe:	429a      	cmp	r2, r3
 800d000:	d10e      	bne.n	800d020 <dir_read+0xe6>
 800d002:	693b      	ldr	r3, [r7, #16]
 800d004:	68da      	ldr	r2, [r3, #12]
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	6a1b      	ldr	r3, [r3, #32]
 800d00a:	4619      	mov	r1, r3
 800d00c:	4610      	mov	r0, r2
 800d00e:	f7ff fe19 	bl	800cc44 <pick_lfn>
 800d012:	4603      	mov	r3, r0
 800d014:	2b00      	cmp	r3, #0
 800d016:	d003      	beq.n	800d020 <dir_read+0xe6>
 800d018:	7d7b      	ldrb	r3, [r7, #21]
 800d01a:	3b01      	subs	r3, #1
 800d01c:	b2db      	uxtb	r3, r3
 800d01e:	e000      	b.n	800d022 <dir_read+0xe8>
 800d020:	23ff      	movs	r3, #255	; 0xff
 800d022:	757b      	strb	r3, [r7, #21]
 800d024:	e011      	b.n	800d04a <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800d026:	7d7b      	ldrb	r3, [r7, #21]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d109      	bne.n	800d040 <dir_read+0x106>
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	6a1b      	ldr	r3, [r3, #32]
 800d030:	4618      	mov	r0, r3
 800d032:	f7ff ff61 	bl	800cef8 <sum_sfn>
 800d036:	4603      	mov	r3, r0
 800d038:	461a      	mov	r2, r3
 800d03a:	7d3b      	ldrb	r3, [r7, #20]
 800d03c:	4293      	cmp	r3, r2
 800d03e:	d015      	beq.n	800d06c <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d046:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800d048:	e010      	b.n	800d06c <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800d04a:	2100      	movs	r1, #0
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f7ff fc3e 	bl	800c8ce <dir_next>
 800d052:	4603      	mov	r3, r0
 800d054:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d056:	7dfb      	ldrb	r3, [r7, #23]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d109      	bne.n	800d070 <dir_read+0x136>
	while (dp->sect) {
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	69db      	ldr	r3, [r3, #28]
 800d060:	2b00      	cmp	r3, #0
 800d062:	f47f af79 	bne.w	800cf58 <dir_read+0x1e>
 800d066:	e004      	b.n	800d072 <dir_read+0x138>
		if (res != FR_OK) break;
 800d068:	bf00      	nop
 800d06a:	e002      	b.n	800d072 <dir_read+0x138>
					break;
 800d06c:	bf00      	nop
 800d06e:	e000      	b.n	800d072 <dir_read+0x138>
		if (res != FR_OK) break;
 800d070:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d072:	7dfb      	ldrb	r3, [r7, #23]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d002      	beq.n	800d07e <dir_read+0x144>
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2200      	movs	r2, #0
 800d07c:	61da      	str	r2, [r3, #28]
	return res;
 800d07e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d080:	4618      	mov	r0, r3
 800d082:	3718      	adds	r7, #24
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b086      	sub	sp, #24
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d096:	2100      	movs	r1, #0
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f7ff fb9d 	bl	800c7d8 <dir_sdi>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d0a2:	7dfb      	ldrb	r3, [r7, #23]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d001      	beq.n	800d0ac <dir_find+0x24>
 800d0a8:	7dfb      	ldrb	r3, [r7, #23]
 800d0aa:	e0a9      	b.n	800d200 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d0ac:	23ff      	movs	r3, #255	; 0xff
 800d0ae:	753b      	strb	r3, [r7, #20]
 800d0b0:	7d3b      	ldrb	r3, [r7, #20]
 800d0b2:	757b      	strb	r3, [r7, #21]
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d0ba:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	69db      	ldr	r3, [r3, #28]
 800d0c0:	4619      	mov	r1, r3
 800d0c2:	6938      	ldr	r0, [r7, #16]
 800d0c4:	f7ff f80a 	bl	800c0dc <move_window>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d0cc:	7dfb      	ldrb	r3, [r7, #23]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	f040 8090 	bne.w	800d1f4 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	6a1b      	ldr	r3, [r3, #32]
 800d0d8:	781b      	ldrb	r3, [r3, #0]
 800d0da:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d0dc:	7dbb      	ldrb	r3, [r7, #22]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d102      	bne.n	800d0e8 <dir_find+0x60>
 800d0e2:	2304      	movs	r3, #4
 800d0e4:	75fb      	strb	r3, [r7, #23]
 800d0e6:	e08a      	b.n	800d1fe <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	6a1b      	ldr	r3, [r3, #32]
 800d0ec:	330b      	adds	r3, #11
 800d0ee:	781b      	ldrb	r3, [r3, #0]
 800d0f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d0f4:	73fb      	strb	r3, [r7, #15]
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	7bfa      	ldrb	r2, [r7, #15]
 800d0fa:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d0fc:	7dbb      	ldrb	r3, [r7, #22]
 800d0fe:	2be5      	cmp	r3, #229	; 0xe5
 800d100:	d007      	beq.n	800d112 <dir_find+0x8a>
 800d102:	7bfb      	ldrb	r3, [r7, #15]
 800d104:	f003 0308 	and.w	r3, r3, #8
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d009      	beq.n	800d120 <dir_find+0x98>
 800d10c:	7bfb      	ldrb	r3, [r7, #15]
 800d10e:	2b0f      	cmp	r3, #15
 800d110:	d006      	beq.n	800d120 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d112:	23ff      	movs	r3, #255	; 0xff
 800d114:	757b      	strb	r3, [r7, #21]
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d11c:	631a      	str	r2, [r3, #48]	; 0x30
 800d11e:	e05e      	b.n	800d1de <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d120:	7bfb      	ldrb	r3, [r7, #15]
 800d122:	2b0f      	cmp	r3, #15
 800d124:	d136      	bne.n	800d194 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d12c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d130:	2b00      	cmp	r3, #0
 800d132:	d154      	bne.n	800d1de <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d134:	7dbb      	ldrb	r3, [r7, #22]
 800d136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d00d      	beq.n	800d15a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6a1b      	ldr	r3, [r3, #32]
 800d142:	7b5b      	ldrb	r3, [r3, #13]
 800d144:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d146:	7dbb      	ldrb	r3, [r7, #22]
 800d148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d14c:	75bb      	strb	r3, [r7, #22]
 800d14e:	7dbb      	ldrb	r3, [r7, #22]
 800d150:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	695a      	ldr	r2, [r3, #20]
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d15a:	7dba      	ldrb	r2, [r7, #22]
 800d15c:	7d7b      	ldrb	r3, [r7, #21]
 800d15e:	429a      	cmp	r2, r3
 800d160:	d115      	bne.n	800d18e <dir_find+0x106>
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6a1b      	ldr	r3, [r3, #32]
 800d166:	330d      	adds	r3, #13
 800d168:	781b      	ldrb	r3, [r3, #0]
 800d16a:	7d3a      	ldrb	r2, [r7, #20]
 800d16c:	429a      	cmp	r2, r3
 800d16e:	d10e      	bne.n	800d18e <dir_find+0x106>
 800d170:	693b      	ldr	r3, [r7, #16]
 800d172:	68da      	ldr	r2, [r3, #12]
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	6a1b      	ldr	r3, [r3, #32]
 800d178:	4619      	mov	r1, r3
 800d17a:	4610      	mov	r0, r2
 800d17c:	f7ff fcf2 	bl	800cb64 <cmp_lfn>
 800d180:	4603      	mov	r3, r0
 800d182:	2b00      	cmp	r3, #0
 800d184:	d003      	beq.n	800d18e <dir_find+0x106>
 800d186:	7d7b      	ldrb	r3, [r7, #21]
 800d188:	3b01      	subs	r3, #1
 800d18a:	b2db      	uxtb	r3, r3
 800d18c:	e000      	b.n	800d190 <dir_find+0x108>
 800d18e:	23ff      	movs	r3, #255	; 0xff
 800d190:	757b      	strb	r3, [r7, #21]
 800d192:	e024      	b.n	800d1de <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d194:	7d7b      	ldrb	r3, [r7, #21]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d109      	bne.n	800d1ae <dir_find+0x126>
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6a1b      	ldr	r3, [r3, #32]
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f7ff feaa 	bl	800cef8 <sum_sfn>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	461a      	mov	r2, r3
 800d1a8:	7d3b      	ldrb	r3, [r7, #20]
 800d1aa:	4293      	cmp	r3, r2
 800d1ac:	d024      	beq.n	800d1f8 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d1b4:	f003 0301 	and.w	r3, r3, #1
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d10a      	bne.n	800d1d2 <dir_find+0x14a>
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	6a18      	ldr	r0, [r3, #32]
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	3324      	adds	r3, #36	; 0x24
 800d1c4:	220b      	movs	r2, #11
 800d1c6:	4619      	mov	r1, r3
 800d1c8:	f7fe fd96 	bl	800bcf8 <mem_cmp>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d014      	beq.n	800d1fc <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d1d2:	23ff      	movs	r3, #255	; 0xff
 800d1d4:	757b      	strb	r3, [r7, #21]
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d1dc:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d1de:	2100      	movs	r1, #0
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f7ff fb74 	bl	800c8ce <dir_next>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d1ea:	7dfb      	ldrb	r3, [r7, #23]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	f43f af65 	beq.w	800d0bc <dir_find+0x34>
 800d1f2:	e004      	b.n	800d1fe <dir_find+0x176>
		if (res != FR_OK) break;
 800d1f4:	bf00      	nop
 800d1f6:	e002      	b.n	800d1fe <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d1f8:	bf00      	nop
 800d1fa:	e000      	b.n	800d1fe <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d1fc:	bf00      	nop

	return res;
 800d1fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800d200:	4618      	mov	r0, r3
 800d202:	3718      	adds	r7, #24
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}

0800d208 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b08c      	sub	sp, #48	; 0x30
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d21c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d220:	2b00      	cmp	r3, #0
 800d222:	d001      	beq.n	800d228 <dir_register+0x20>
 800d224:	2306      	movs	r3, #6
 800d226:	e0e0      	b.n	800d3ea <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d228:	2300      	movs	r3, #0
 800d22a:	627b      	str	r3, [r7, #36]	; 0x24
 800d22c:	e002      	b.n	800d234 <dir_register+0x2c>
 800d22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d230:	3301      	adds	r3, #1
 800d232:	627b      	str	r3, [r7, #36]	; 0x24
 800d234:	69fb      	ldr	r3, [r7, #28]
 800d236:	68da      	ldr	r2, [r3, #12]
 800d238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d23a:	005b      	lsls	r3, r3, #1
 800d23c:	4413      	add	r3, r2
 800d23e:	881b      	ldrh	r3, [r3, #0]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d1f4      	bne.n	800d22e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800d24a:	f107 030c 	add.w	r3, r7, #12
 800d24e:	220c      	movs	r2, #12
 800d250:	4618      	mov	r0, r3
 800d252:	f7fe fd15 	bl	800bc80 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d256:	7dfb      	ldrb	r3, [r7, #23]
 800d258:	f003 0301 	and.w	r3, r3, #1
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d032      	beq.n	800d2c6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2240      	movs	r2, #64	; 0x40
 800d264:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800d268:	2301      	movs	r3, #1
 800d26a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d26c:	e016      	b.n	800d29c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800d274:	69fb      	ldr	r3, [r7, #28]
 800d276:	68da      	ldr	r2, [r3, #12]
 800d278:	f107 010c 	add.w	r1, r7, #12
 800d27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d27e:	f7ff fdad 	bl	800cddc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f7ff ff00 	bl	800d088 <dir_find>
 800d288:	4603      	mov	r3, r0
 800d28a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800d28e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d292:	2b00      	cmp	r3, #0
 800d294:	d106      	bne.n	800d2a4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800d296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d298:	3301      	adds	r3, #1
 800d29a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d29e:	2b63      	cmp	r3, #99	; 0x63
 800d2a0:	d9e5      	bls.n	800d26e <dir_register+0x66>
 800d2a2:	e000      	b.n	800d2a6 <dir_register+0x9e>
			if (res != FR_OK) break;
 800d2a4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2a8:	2b64      	cmp	r3, #100	; 0x64
 800d2aa:	d101      	bne.n	800d2b0 <dir_register+0xa8>
 800d2ac:	2307      	movs	r3, #7
 800d2ae:	e09c      	b.n	800d3ea <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d2b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d2b4:	2b04      	cmp	r3, #4
 800d2b6:	d002      	beq.n	800d2be <dir_register+0xb6>
 800d2b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d2bc:	e095      	b.n	800d3ea <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d2be:	7dfa      	ldrb	r2, [r7, #23]
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d2c6:	7dfb      	ldrb	r3, [r7, #23]
 800d2c8:	f003 0302 	and.w	r3, r3, #2
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d007      	beq.n	800d2e0 <dir_register+0xd8>
 800d2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d2:	330c      	adds	r3, #12
 800d2d4:	4a47      	ldr	r2, [pc, #284]	; (800d3f4 <dir_register+0x1ec>)
 800d2d6:	fba2 2303 	umull	r2, r3, r2, r3
 800d2da:	089b      	lsrs	r3, r3, #2
 800d2dc:	3301      	adds	r3, #1
 800d2de:	e000      	b.n	800d2e2 <dir_register+0xda>
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d2e4:	6a39      	ldr	r1, [r7, #32]
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f7ff fbb6 	bl	800ca58 <dir_alloc>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d2f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d148      	bne.n	800d38c <dir_register+0x184>
 800d2fa:	6a3b      	ldr	r3, [r7, #32]
 800d2fc:	3b01      	subs	r3, #1
 800d2fe:	623b      	str	r3, [r7, #32]
 800d300:	6a3b      	ldr	r3, [r7, #32]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d042      	beq.n	800d38c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	695a      	ldr	r2, [r3, #20]
 800d30a:	6a3b      	ldr	r3, [r7, #32]
 800d30c:	015b      	lsls	r3, r3, #5
 800d30e:	1ad3      	subs	r3, r2, r3
 800d310:	4619      	mov	r1, r3
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f7ff fa60 	bl	800c7d8 <dir_sdi>
 800d318:	4603      	mov	r3, r0
 800d31a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d31e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d322:	2b00      	cmp	r3, #0
 800d324:	d132      	bne.n	800d38c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	3324      	adds	r3, #36	; 0x24
 800d32a:	4618      	mov	r0, r3
 800d32c:	f7ff fde4 	bl	800cef8 <sum_sfn>
 800d330:	4603      	mov	r3, r0
 800d332:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	69db      	ldr	r3, [r3, #28]
 800d338:	4619      	mov	r1, r3
 800d33a:	69f8      	ldr	r0, [r7, #28]
 800d33c:	f7fe fece 	bl	800c0dc <move_window>
 800d340:	4603      	mov	r3, r0
 800d342:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800d346:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d11d      	bne.n	800d38a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d34e:	69fb      	ldr	r3, [r7, #28]
 800d350:	68d8      	ldr	r0, [r3, #12]
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6a19      	ldr	r1, [r3, #32]
 800d356:	6a3b      	ldr	r3, [r7, #32]
 800d358:	b2da      	uxtb	r2, r3
 800d35a:	7efb      	ldrb	r3, [r7, #27]
 800d35c:	f7ff fcd6 	bl	800cd0c <put_lfn>
				fs->wflag = 1;
 800d360:	69fb      	ldr	r3, [r7, #28]
 800d362:	2201      	movs	r2, #1
 800d364:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d366:	2100      	movs	r1, #0
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	f7ff fab0 	bl	800c8ce <dir_next>
 800d36e:	4603      	mov	r3, r0
 800d370:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800d374:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d107      	bne.n	800d38c <dir_register+0x184>
 800d37c:	6a3b      	ldr	r3, [r7, #32]
 800d37e:	3b01      	subs	r3, #1
 800d380:	623b      	str	r3, [r7, #32]
 800d382:	6a3b      	ldr	r3, [r7, #32]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d1d5      	bne.n	800d334 <dir_register+0x12c>
 800d388:	e000      	b.n	800d38c <dir_register+0x184>
				if (res != FR_OK) break;
 800d38a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d38c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d390:	2b00      	cmp	r3, #0
 800d392:	d128      	bne.n	800d3e6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	69db      	ldr	r3, [r3, #28]
 800d398:	4619      	mov	r1, r3
 800d39a:	69f8      	ldr	r0, [r7, #28]
 800d39c:	f7fe fe9e 	bl	800c0dc <move_window>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d3a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d11b      	bne.n	800d3e6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6a1b      	ldr	r3, [r3, #32]
 800d3b2:	2220      	movs	r2, #32
 800d3b4:	2100      	movs	r1, #0
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f7fe fc83 	bl	800bcc2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	6a18      	ldr	r0, [r3, #32]
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	3324      	adds	r3, #36	; 0x24
 800d3c4:	220b      	movs	r2, #11
 800d3c6:	4619      	mov	r1, r3
 800d3c8:	f7fe fc5a 	bl	800bc80 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	6a1b      	ldr	r3, [r3, #32]
 800d3d6:	330c      	adds	r3, #12
 800d3d8:	f002 0218 	and.w	r2, r2, #24
 800d3dc:	b2d2      	uxtb	r2, r2
 800d3de:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d3e0:	69fb      	ldr	r3, [r7, #28]
 800d3e2:	2201      	movs	r2, #1
 800d3e4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d3e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3730      	adds	r7, #48	; 0x30
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}
 800d3f2:	bf00      	nop
 800d3f4:	4ec4ec4f 	.word	0x4ec4ec4f

0800d3f8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b088      	sub	sp, #32
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	2200      	movs	r2, #0
 800d40c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	69db      	ldr	r3, [r3, #28]
 800d412:	2b00      	cmp	r3, #0
 800d414:	f000 80c9 	beq.w	800d5aa <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d41c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d420:	d032      	beq.n	800d488 <get_fileinfo+0x90>
			i = j = 0;
 800d422:	2300      	movs	r3, #0
 800d424:	61bb      	str	r3, [r7, #24]
 800d426:	69bb      	ldr	r3, [r7, #24]
 800d428:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d42a:	e01b      	b.n	800d464 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800d42c:	89fb      	ldrh	r3, [r7, #14]
 800d42e:	2100      	movs	r1, #0
 800d430:	4618      	mov	r0, r3
 800d432:	f001 fb5d 	bl	800eaf0 <ff_convert>
 800d436:	4603      	mov	r3, r0
 800d438:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800d43a:	89fb      	ldrh	r3, [r7, #14]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d102      	bne.n	800d446 <get_fileinfo+0x4e>
 800d440:	2300      	movs	r3, #0
 800d442:	61fb      	str	r3, [r7, #28]
 800d444:	e01a      	b.n	800d47c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800d446:	69fb      	ldr	r3, [r7, #28]
 800d448:	2bfe      	cmp	r3, #254	; 0xfe
 800d44a:	d902      	bls.n	800d452 <get_fileinfo+0x5a>
 800d44c:	2300      	movs	r3, #0
 800d44e:	61fb      	str	r3, [r7, #28]
 800d450:	e014      	b.n	800d47c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800d452:	69fb      	ldr	r3, [r7, #28]
 800d454:	1c5a      	adds	r2, r3, #1
 800d456:	61fa      	str	r2, [r7, #28]
 800d458:	89fa      	ldrh	r2, [r7, #14]
 800d45a:	b2d1      	uxtb	r1, r2
 800d45c:	683a      	ldr	r2, [r7, #0]
 800d45e:	4413      	add	r3, r2
 800d460:	460a      	mov	r2, r1
 800d462:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	68da      	ldr	r2, [r3, #12]
 800d468:	69bb      	ldr	r3, [r7, #24]
 800d46a:	1c59      	adds	r1, r3, #1
 800d46c:	61b9      	str	r1, [r7, #24]
 800d46e:	005b      	lsls	r3, r3, #1
 800d470:	4413      	add	r3, r2
 800d472:	881b      	ldrh	r3, [r3, #0]
 800d474:	81fb      	strh	r3, [r7, #14]
 800d476:	89fb      	ldrh	r3, [r7, #14]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d1d7      	bne.n	800d42c <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800d47c:	683a      	ldr	r2, [r7, #0]
 800d47e:	69fb      	ldr	r3, [r7, #28]
 800d480:	4413      	add	r3, r2
 800d482:	3316      	adds	r3, #22
 800d484:	2200      	movs	r2, #0
 800d486:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800d488:	2300      	movs	r3, #0
 800d48a:	61bb      	str	r3, [r7, #24]
 800d48c:	69bb      	ldr	r3, [r7, #24]
 800d48e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800d490:	683a      	ldr	r2, [r7, #0]
 800d492:	69fb      	ldr	r3, [r7, #28]
 800d494:	4413      	add	r3, r2
 800d496:	3316      	adds	r3, #22
 800d498:	781b      	ldrb	r3, [r3, #0]
 800d49a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800d49c:	e04c      	b.n	800d538 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6a1a      	ldr	r2, [r3, #32]
 800d4a2:	69fb      	ldr	r3, [r7, #28]
 800d4a4:	1c59      	adds	r1, r3, #1
 800d4a6:	61f9      	str	r1, [r7, #28]
 800d4a8:	4413      	add	r3, r2
 800d4aa:	781b      	ldrb	r3, [r3, #0]
 800d4ac:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800d4ae:	7dfb      	ldrb	r3, [r7, #23]
 800d4b0:	2b20      	cmp	r3, #32
 800d4b2:	d100      	bne.n	800d4b6 <get_fileinfo+0xbe>
 800d4b4:	e040      	b.n	800d538 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800d4b6:	7dfb      	ldrb	r3, [r7, #23]
 800d4b8:	2b05      	cmp	r3, #5
 800d4ba:	d101      	bne.n	800d4c0 <get_fileinfo+0xc8>
 800d4bc:	23e5      	movs	r3, #229	; 0xe5
 800d4be:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800d4c0:	69fb      	ldr	r3, [r7, #28]
 800d4c2:	2b09      	cmp	r3, #9
 800d4c4:	d10f      	bne.n	800d4e6 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800d4c6:	89bb      	ldrh	r3, [r7, #12]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d105      	bne.n	800d4d8 <get_fileinfo+0xe0>
 800d4cc:	683a      	ldr	r2, [r7, #0]
 800d4ce:	69bb      	ldr	r3, [r7, #24]
 800d4d0:	4413      	add	r3, r2
 800d4d2:	3316      	adds	r3, #22
 800d4d4:	222e      	movs	r2, #46	; 0x2e
 800d4d6:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800d4d8:	69bb      	ldr	r3, [r7, #24]
 800d4da:	1c5a      	adds	r2, r3, #1
 800d4dc:	61ba      	str	r2, [r7, #24]
 800d4de:	683a      	ldr	r2, [r7, #0]
 800d4e0:	4413      	add	r3, r2
 800d4e2:	222e      	movs	r2, #46	; 0x2e
 800d4e4:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800d4e6:	683a      	ldr	r2, [r7, #0]
 800d4e8:	69bb      	ldr	r3, [r7, #24]
 800d4ea:	4413      	add	r3, r2
 800d4ec:	3309      	adds	r3, #9
 800d4ee:	7dfa      	ldrb	r2, [r7, #23]
 800d4f0:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800d4f2:	89bb      	ldrh	r3, [r7, #12]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d11c      	bne.n	800d532 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800d4f8:	7dfb      	ldrb	r3, [r7, #23]
 800d4fa:	2b40      	cmp	r3, #64	; 0x40
 800d4fc:	d913      	bls.n	800d526 <get_fileinfo+0x12e>
 800d4fe:	7dfb      	ldrb	r3, [r7, #23]
 800d500:	2b5a      	cmp	r3, #90	; 0x5a
 800d502:	d810      	bhi.n	800d526 <get_fileinfo+0x12e>
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	6a1b      	ldr	r3, [r3, #32]
 800d508:	330c      	adds	r3, #12
 800d50a:	781b      	ldrb	r3, [r3, #0]
 800d50c:	461a      	mov	r2, r3
 800d50e:	69fb      	ldr	r3, [r7, #28]
 800d510:	2b08      	cmp	r3, #8
 800d512:	d901      	bls.n	800d518 <get_fileinfo+0x120>
 800d514:	2310      	movs	r3, #16
 800d516:	e000      	b.n	800d51a <get_fileinfo+0x122>
 800d518:	2308      	movs	r3, #8
 800d51a:	4013      	ands	r3, r2
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d002      	beq.n	800d526 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800d520:	7dfb      	ldrb	r3, [r7, #23]
 800d522:	3320      	adds	r3, #32
 800d524:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800d526:	683a      	ldr	r2, [r7, #0]
 800d528:	69bb      	ldr	r3, [r7, #24]
 800d52a:	4413      	add	r3, r2
 800d52c:	3316      	adds	r3, #22
 800d52e:	7dfa      	ldrb	r2, [r7, #23]
 800d530:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800d532:	69bb      	ldr	r3, [r7, #24]
 800d534:	3301      	adds	r3, #1
 800d536:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800d538:	69fb      	ldr	r3, [r7, #28]
 800d53a:	2b0a      	cmp	r3, #10
 800d53c:	d9af      	bls.n	800d49e <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800d53e:	89bb      	ldrh	r3, [r7, #12]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d10d      	bne.n	800d560 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800d544:	683a      	ldr	r2, [r7, #0]
 800d546:	69bb      	ldr	r3, [r7, #24]
 800d548:	4413      	add	r3, r2
 800d54a:	3316      	adds	r3, #22
 800d54c:	2200      	movs	r2, #0
 800d54e:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	6a1b      	ldr	r3, [r3, #32]
 800d554:	330c      	adds	r3, #12
 800d556:	781b      	ldrb	r3, [r3, #0]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d101      	bne.n	800d560 <get_fileinfo+0x168>
 800d55c:	2300      	movs	r3, #0
 800d55e:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800d560:	683a      	ldr	r2, [r7, #0]
 800d562:	69bb      	ldr	r3, [r7, #24]
 800d564:	4413      	add	r3, r2
 800d566:	3309      	adds	r3, #9
 800d568:	2200      	movs	r2, #0
 800d56a:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6a1b      	ldr	r3, [r3, #32]
 800d570:	7ada      	ldrb	r2, [r3, #11]
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6a1b      	ldr	r3, [r3, #32]
 800d57a:	331c      	adds	r3, #28
 800d57c:	4618      	mov	r0, r3
 800d57e:	f7fe fb15 	bl	800bbac <ld_dword>
 800d582:	4602      	mov	r2, r0
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	6a1b      	ldr	r3, [r3, #32]
 800d58c:	3316      	adds	r3, #22
 800d58e:	4618      	mov	r0, r3
 800d590:	f7fe fb0c 	bl	800bbac <ld_dword>
 800d594:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	b29a      	uxth	r2, r3
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	80da      	strh	r2, [r3, #6]
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	0c1b      	lsrs	r3, r3, #16
 800d5a2:	b29a      	uxth	r2, r3
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	809a      	strh	r2, [r3, #4]
 800d5a8:	e000      	b.n	800d5ac <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d5aa:	bf00      	nop
}
 800d5ac:	3720      	adds	r7, #32
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}
	...

0800d5b4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b08a      	sub	sp, #40	; 0x28
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
 800d5bc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	613b      	str	r3, [r7, #16]
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	68db      	ldr	r3, [r3, #12]
 800d5ca:	60fb      	str	r3, [r7, #12]
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	617b      	str	r3, [r7, #20]
 800d5d0:	697b      	ldr	r3, [r7, #20]
 800d5d2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d5d4:	69bb      	ldr	r3, [r7, #24]
 800d5d6:	1c5a      	adds	r2, r3, #1
 800d5d8:	61ba      	str	r2, [r7, #24]
 800d5da:	693a      	ldr	r2, [r7, #16]
 800d5dc:	4413      	add	r3, r2
 800d5de:	781b      	ldrb	r3, [r3, #0]
 800d5e0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d5e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5e4:	2b1f      	cmp	r3, #31
 800d5e6:	d940      	bls.n	800d66a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d5e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5ea:	2b2f      	cmp	r3, #47	; 0x2f
 800d5ec:	d006      	beq.n	800d5fc <create_name+0x48>
 800d5ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5f0:	2b5c      	cmp	r3, #92	; 0x5c
 800d5f2:	d110      	bne.n	800d616 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d5f4:	e002      	b.n	800d5fc <create_name+0x48>
 800d5f6:	69bb      	ldr	r3, [r7, #24]
 800d5f8:	3301      	adds	r3, #1
 800d5fa:	61bb      	str	r3, [r7, #24]
 800d5fc:	693a      	ldr	r2, [r7, #16]
 800d5fe:	69bb      	ldr	r3, [r7, #24]
 800d600:	4413      	add	r3, r2
 800d602:	781b      	ldrb	r3, [r3, #0]
 800d604:	2b2f      	cmp	r3, #47	; 0x2f
 800d606:	d0f6      	beq.n	800d5f6 <create_name+0x42>
 800d608:	693a      	ldr	r2, [r7, #16]
 800d60a:	69bb      	ldr	r3, [r7, #24]
 800d60c:	4413      	add	r3, r2
 800d60e:	781b      	ldrb	r3, [r3, #0]
 800d610:	2b5c      	cmp	r3, #92	; 0x5c
 800d612:	d0f0      	beq.n	800d5f6 <create_name+0x42>
			break;
 800d614:	e02a      	b.n	800d66c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	2bfe      	cmp	r3, #254	; 0xfe
 800d61a:	d901      	bls.n	800d620 <create_name+0x6c>
 800d61c:	2306      	movs	r3, #6
 800d61e:	e17d      	b.n	800d91c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d620:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d622:	b2db      	uxtb	r3, r3
 800d624:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d626:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d628:	2101      	movs	r1, #1
 800d62a:	4618      	mov	r0, r3
 800d62c:	f001 fa60 	bl	800eaf0 <ff_convert>
 800d630:	4603      	mov	r3, r0
 800d632:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d634:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d636:	2b00      	cmp	r3, #0
 800d638:	d101      	bne.n	800d63e <create_name+0x8a>
 800d63a:	2306      	movs	r3, #6
 800d63c:	e16e      	b.n	800d91c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d63e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d640:	2b7f      	cmp	r3, #127	; 0x7f
 800d642:	d809      	bhi.n	800d658 <create_name+0xa4>
 800d644:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d646:	4619      	mov	r1, r3
 800d648:	488d      	ldr	r0, [pc, #564]	; (800d880 <create_name+0x2cc>)
 800d64a:	f7fe fb7c 	bl	800bd46 <chk_chr>
 800d64e:	4603      	mov	r3, r0
 800d650:	2b00      	cmp	r3, #0
 800d652:	d001      	beq.n	800d658 <create_name+0xa4>
 800d654:	2306      	movs	r3, #6
 800d656:	e161      	b.n	800d91c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	1c5a      	adds	r2, r3, #1
 800d65c:	617a      	str	r2, [r7, #20]
 800d65e:	005b      	lsls	r3, r3, #1
 800d660:	68fa      	ldr	r2, [r7, #12]
 800d662:	4413      	add	r3, r2
 800d664:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d666:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d668:	e7b4      	b.n	800d5d4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d66a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d66c:	693a      	ldr	r2, [r7, #16]
 800d66e:	69bb      	ldr	r3, [r7, #24]
 800d670:	441a      	add	r2, r3
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d676:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d678:	2b1f      	cmp	r3, #31
 800d67a:	d801      	bhi.n	800d680 <create_name+0xcc>
 800d67c:	2304      	movs	r3, #4
 800d67e:	e000      	b.n	800d682 <create_name+0xce>
 800d680:	2300      	movs	r3, #0
 800d682:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d686:	e011      	b.n	800d6ac <create_name+0xf8>
		w = lfn[di - 1];
 800d688:	697a      	ldr	r2, [r7, #20]
 800d68a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d68e:	4413      	add	r3, r2
 800d690:	005b      	lsls	r3, r3, #1
 800d692:	68fa      	ldr	r2, [r7, #12]
 800d694:	4413      	add	r3, r2
 800d696:	881b      	ldrh	r3, [r3, #0]
 800d698:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800d69a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d69c:	2b20      	cmp	r3, #32
 800d69e:	d002      	beq.n	800d6a6 <create_name+0xf2>
 800d6a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d6a2:	2b2e      	cmp	r3, #46	; 0x2e
 800d6a4:	d106      	bne.n	800d6b4 <create_name+0x100>
		di--;
 800d6a6:	697b      	ldr	r3, [r7, #20]
 800d6a8:	3b01      	subs	r3, #1
 800d6aa:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d1ea      	bne.n	800d688 <create_name+0xd4>
 800d6b2:	e000      	b.n	800d6b6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800d6b4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	005b      	lsls	r3, r3, #1
 800d6ba:	68fa      	ldr	r2, [r7, #12]
 800d6bc:	4413      	add	r3, r2
 800d6be:	2200      	movs	r2, #0
 800d6c0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d6c2:	697b      	ldr	r3, [r7, #20]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d101      	bne.n	800d6cc <create_name+0x118>
 800d6c8:	2306      	movs	r3, #6
 800d6ca:	e127      	b.n	800d91c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	3324      	adds	r3, #36	; 0x24
 800d6d0:	220b      	movs	r2, #11
 800d6d2:	2120      	movs	r1, #32
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f7fe faf4 	bl	800bcc2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d6da:	2300      	movs	r3, #0
 800d6dc:	61bb      	str	r3, [r7, #24]
 800d6de:	e002      	b.n	800d6e6 <create_name+0x132>
 800d6e0:	69bb      	ldr	r3, [r7, #24]
 800d6e2:	3301      	adds	r3, #1
 800d6e4:	61bb      	str	r3, [r7, #24]
 800d6e6:	69bb      	ldr	r3, [r7, #24]
 800d6e8:	005b      	lsls	r3, r3, #1
 800d6ea:	68fa      	ldr	r2, [r7, #12]
 800d6ec:	4413      	add	r3, r2
 800d6ee:	881b      	ldrh	r3, [r3, #0]
 800d6f0:	2b20      	cmp	r3, #32
 800d6f2:	d0f5      	beq.n	800d6e0 <create_name+0x12c>
 800d6f4:	69bb      	ldr	r3, [r7, #24]
 800d6f6:	005b      	lsls	r3, r3, #1
 800d6f8:	68fa      	ldr	r2, [r7, #12]
 800d6fa:	4413      	add	r3, r2
 800d6fc:	881b      	ldrh	r3, [r3, #0]
 800d6fe:	2b2e      	cmp	r3, #46	; 0x2e
 800d700:	d0ee      	beq.n	800d6e0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d702:	69bb      	ldr	r3, [r7, #24]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d009      	beq.n	800d71c <create_name+0x168>
 800d708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d70c:	f043 0303 	orr.w	r3, r3, #3
 800d710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d714:	e002      	b.n	800d71c <create_name+0x168>
 800d716:	697b      	ldr	r3, [r7, #20]
 800d718:	3b01      	subs	r3, #1
 800d71a:	617b      	str	r3, [r7, #20]
 800d71c:	697b      	ldr	r3, [r7, #20]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d009      	beq.n	800d736 <create_name+0x182>
 800d722:	697a      	ldr	r2, [r7, #20]
 800d724:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d728:	4413      	add	r3, r2
 800d72a:	005b      	lsls	r3, r3, #1
 800d72c:	68fa      	ldr	r2, [r7, #12]
 800d72e:	4413      	add	r3, r2
 800d730:	881b      	ldrh	r3, [r3, #0]
 800d732:	2b2e      	cmp	r3, #46	; 0x2e
 800d734:	d1ef      	bne.n	800d716 <create_name+0x162>

	i = b = 0; ni = 8;
 800d736:	2300      	movs	r3, #0
 800d738:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d73c:	2300      	movs	r3, #0
 800d73e:	623b      	str	r3, [r7, #32]
 800d740:	2308      	movs	r3, #8
 800d742:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d744:	69bb      	ldr	r3, [r7, #24]
 800d746:	1c5a      	adds	r2, r3, #1
 800d748:	61ba      	str	r2, [r7, #24]
 800d74a:	005b      	lsls	r3, r3, #1
 800d74c:	68fa      	ldr	r2, [r7, #12]
 800d74e:	4413      	add	r3, r2
 800d750:	881b      	ldrh	r3, [r3, #0]
 800d752:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d754:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d756:	2b00      	cmp	r3, #0
 800d758:	f000 8090 	beq.w	800d87c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d75c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d75e:	2b20      	cmp	r3, #32
 800d760:	d006      	beq.n	800d770 <create_name+0x1bc>
 800d762:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d764:	2b2e      	cmp	r3, #46	; 0x2e
 800d766:	d10a      	bne.n	800d77e <create_name+0x1ca>
 800d768:	69ba      	ldr	r2, [r7, #24]
 800d76a:	697b      	ldr	r3, [r7, #20]
 800d76c:	429a      	cmp	r2, r3
 800d76e:	d006      	beq.n	800d77e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800d770:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d774:	f043 0303 	orr.w	r3, r3, #3
 800d778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d77c:	e07d      	b.n	800d87a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d77e:	6a3a      	ldr	r2, [r7, #32]
 800d780:	69fb      	ldr	r3, [r7, #28]
 800d782:	429a      	cmp	r2, r3
 800d784:	d203      	bcs.n	800d78e <create_name+0x1da>
 800d786:	69ba      	ldr	r2, [r7, #24]
 800d788:	697b      	ldr	r3, [r7, #20]
 800d78a:	429a      	cmp	r2, r3
 800d78c:	d123      	bne.n	800d7d6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800d78e:	69fb      	ldr	r3, [r7, #28]
 800d790:	2b0b      	cmp	r3, #11
 800d792:	d106      	bne.n	800d7a2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800d794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d798:	f043 0303 	orr.w	r3, r3, #3
 800d79c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d7a0:	e075      	b.n	800d88e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d7a2:	69ba      	ldr	r2, [r7, #24]
 800d7a4:	697b      	ldr	r3, [r7, #20]
 800d7a6:	429a      	cmp	r2, r3
 800d7a8:	d005      	beq.n	800d7b6 <create_name+0x202>
 800d7aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7ae:	f043 0303 	orr.w	r3, r3, #3
 800d7b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800d7b6:	69ba      	ldr	r2, [r7, #24]
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	429a      	cmp	r2, r3
 800d7bc:	d866      	bhi.n	800d88c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	61bb      	str	r3, [r7, #24]
 800d7c2:	2308      	movs	r3, #8
 800d7c4:	623b      	str	r3, [r7, #32]
 800d7c6:	230b      	movs	r3, #11
 800d7c8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d7ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d7ce:	009b      	lsls	r3, r3, #2
 800d7d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d7d4:	e051      	b.n	800d87a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d7d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7d8:	2b7f      	cmp	r3, #127	; 0x7f
 800d7da:	d914      	bls.n	800d806 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d7dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7de:	2100      	movs	r1, #0
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	f001 f985 	bl	800eaf0 <ff_convert>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d7ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d004      	beq.n	800d7fa <create_name+0x246>
 800d7f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7f2:	3b80      	subs	r3, #128	; 0x80
 800d7f4:	4a23      	ldr	r2, [pc, #140]	; (800d884 <create_name+0x2d0>)
 800d7f6:	5cd3      	ldrb	r3, [r2, r3]
 800d7f8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d7fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7fe:	f043 0302 	orr.w	r3, r3, #2
 800d802:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d806:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d007      	beq.n	800d81c <create_name+0x268>
 800d80c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d80e:	4619      	mov	r1, r3
 800d810:	481d      	ldr	r0, [pc, #116]	; (800d888 <create_name+0x2d4>)
 800d812:	f7fe fa98 	bl	800bd46 <chk_chr>
 800d816:	4603      	mov	r3, r0
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d008      	beq.n	800d82e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d81c:	235f      	movs	r3, #95	; 0x5f
 800d81e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d820:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d824:	f043 0303 	orr.w	r3, r3, #3
 800d828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d82c:	e01b      	b.n	800d866 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d82e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d830:	2b40      	cmp	r3, #64	; 0x40
 800d832:	d909      	bls.n	800d848 <create_name+0x294>
 800d834:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d836:	2b5a      	cmp	r3, #90	; 0x5a
 800d838:	d806      	bhi.n	800d848 <create_name+0x294>
					b |= 2;
 800d83a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d83e:	f043 0302 	orr.w	r3, r3, #2
 800d842:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d846:	e00e      	b.n	800d866 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d848:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d84a:	2b60      	cmp	r3, #96	; 0x60
 800d84c:	d90b      	bls.n	800d866 <create_name+0x2b2>
 800d84e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d850:	2b7a      	cmp	r3, #122	; 0x7a
 800d852:	d808      	bhi.n	800d866 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800d854:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d858:	f043 0301 	orr.w	r3, r3, #1
 800d85c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d860:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d862:	3b20      	subs	r3, #32
 800d864:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d866:	6a3b      	ldr	r3, [r7, #32]
 800d868:	1c5a      	adds	r2, r3, #1
 800d86a:	623a      	str	r2, [r7, #32]
 800d86c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d86e:	b2d1      	uxtb	r1, r2
 800d870:	687a      	ldr	r2, [r7, #4]
 800d872:	4413      	add	r3, r2
 800d874:	460a      	mov	r2, r1
 800d876:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800d87a:	e763      	b.n	800d744 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800d87c:	bf00      	nop
 800d87e:	e006      	b.n	800d88e <create_name+0x2da>
 800d880:	08010d00 	.word	0x08010d00
 800d884:	08010dc4 	.word	0x08010dc4
 800d888:	08010d0c 	.word	0x08010d0c
			if (si > di) break;			/* No extension */
 800d88c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d894:	2be5      	cmp	r3, #229	; 0xe5
 800d896:	d103      	bne.n	800d8a0 <create_name+0x2ec>
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2205      	movs	r2, #5
 800d89c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800d8a0:	69fb      	ldr	r3, [r7, #28]
 800d8a2:	2b08      	cmp	r3, #8
 800d8a4:	d104      	bne.n	800d8b0 <create_name+0x2fc>
 800d8a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d8aa:	009b      	lsls	r3, r3, #2
 800d8ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d8b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d8b4:	f003 030c 	and.w	r3, r3, #12
 800d8b8:	2b0c      	cmp	r3, #12
 800d8ba:	d005      	beq.n	800d8c8 <create_name+0x314>
 800d8bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d8c0:	f003 0303 	and.w	r3, r3, #3
 800d8c4:	2b03      	cmp	r3, #3
 800d8c6:	d105      	bne.n	800d8d4 <create_name+0x320>
 800d8c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8cc:	f043 0302 	orr.w	r3, r3, #2
 800d8d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d8d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8d8:	f003 0302 	and.w	r3, r3, #2
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d117      	bne.n	800d910 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d8e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d8e4:	f003 0303 	and.w	r3, r3, #3
 800d8e8:	2b01      	cmp	r3, #1
 800d8ea:	d105      	bne.n	800d8f8 <create_name+0x344>
 800d8ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8f0:	f043 0310 	orr.w	r3, r3, #16
 800d8f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d8f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d8fc:	f003 030c 	and.w	r3, r3, #12
 800d900:	2b04      	cmp	r3, #4
 800d902:	d105      	bne.n	800d910 <create_name+0x35c>
 800d904:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d908:	f043 0308 	orr.w	r3, r3, #8
 800d90c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d916:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800d91a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	3728      	adds	r7, #40	; 0x28
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}

0800d924 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b086      	sub	sp, #24
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d932:	693b      	ldr	r3, [r7, #16]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d938:	e002      	b.n	800d940 <follow_path+0x1c>
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	3301      	adds	r3, #1
 800d93e:	603b      	str	r3, [r7, #0]
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	781b      	ldrb	r3, [r3, #0]
 800d944:	2b2f      	cmp	r3, #47	; 0x2f
 800d946:	d0f8      	beq.n	800d93a <follow_path+0x16>
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	781b      	ldrb	r3, [r3, #0]
 800d94c:	2b5c      	cmp	r3, #92	; 0x5c
 800d94e:	d0f4      	beq.n	800d93a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d950:	693b      	ldr	r3, [r7, #16]
 800d952:	2200      	movs	r2, #0
 800d954:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	781b      	ldrb	r3, [r3, #0]
 800d95a:	2b1f      	cmp	r3, #31
 800d95c:	d80a      	bhi.n	800d974 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2280      	movs	r2, #128	; 0x80
 800d962:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d966:	2100      	movs	r1, #0
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f7fe ff35 	bl	800c7d8 <dir_sdi>
 800d96e:	4603      	mov	r3, r0
 800d970:	75fb      	strb	r3, [r7, #23]
 800d972:	e043      	b.n	800d9fc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d974:	463b      	mov	r3, r7
 800d976:	4619      	mov	r1, r3
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f7ff fe1b 	bl	800d5b4 <create_name>
 800d97e:	4603      	mov	r3, r0
 800d980:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d982:	7dfb      	ldrb	r3, [r7, #23]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d134      	bne.n	800d9f2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f7ff fb7d 	bl	800d088 <dir_find>
 800d98e:	4603      	mov	r3, r0
 800d990:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d998:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d99a:	7dfb      	ldrb	r3, [r7, #23]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d00a      	beq.n	800d9b6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d9a0:	7dfb      	ldrb	r3, [r7, #23]
 800d9a2:	2b04      	cmp	r3, #4
 800d9a4:	d127      	bne.n	800d9f6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d9a6:	7afb      	ldrb	r3, [r7, #11]
 800d9a8:	f003 0304 	and.w	r3, r3, #4
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d122      	bne.n	800d9f6 <follow_path+0xd2>
 800d9b0:	2305      	movs	r3, #5
 800d9b2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d9b4:	e01f      	b.n	800d9f6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d9b6:	7afb      	ldrb	r3, [r7, #11]
 800d9b8:	f003 0304 	and.w	r3, r3, #4
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d11c      	bne.n	800d9fa <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d9c0:	693b      	ldr	r3, [r7, #16]
 800d9c2:	799b      	ldrb	r3, [r3, #6]
 800d9c4:	f003 0310 	and.w	r3, r3, #16
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d102      	bne.n	800d9d2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d9cc:	2305      	movs	r3, #5
 800d9ce:	75fb      	strb	r3, [r7, #23]
 800d9d0:	e014      	b.n	800d9fc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	695b      	ldr	r3, [r3, #20]
 800d9dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9e0:	4413      	add	r3, r2
 800d9e2:	4619      	mov	r1, r3
 800d9e4:	68f8      	ldr	r0, [r7, #12]
 800d9e6:	f7ff f87e 	bl	800cae6 <ld_clust>
 800d9ea:	4602      	mov	r2, r0
 800d9ec:	693b      	ldr	r3, [r7, #16]
 800d9ee:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d9f0:	e7c0      	b.n	800d974 <follow_path+0x50>
			if (res != FR_OK) break;
 800d9f2:	bf00      	nop
 800d9f4:	e002      	b.n	800d9fc <follow_path+0xd8>
				break;
 800d9f6:	bf00      	nop
 800d9f8:	e000      	b.n	800d9fc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d9fa:	bf00      	nop
			}
		}
	}

	return res;
 800d9fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9fe:	4618      	mov	r0, r3
 800da00:	3718      	adds	r7, #24
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}

0800da06 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800da06:	b480      	push	{r7}
 800da08:	b087      	sub	sp, #28
 800da0a:	af00      	add	r7, sp, #0
 800da0c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800da0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da12:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d031      	beq.n	800da80 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	617b      	str	r3, [r7, #20]
 800da22:	e002      	b.n	800da2a <get_ldnumber+0x24>
 800da24:	697b      	ldr	r3, [r7, #20]
 800da26:	3301      	adds	r3, #1
 800da28:	617b      	str	r3, [r7, #20]
 800da2a:	697b      	ldr	r3, [r7, #20]
 800da2c:	781b      	ldrb	r3, [r3, #0]
 800da2e:	2b1f      	cmp	r3, #31
 800da30:	d903      	bls.n	800da3a <get_ldnumber+0x34>
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	781b      	ldrb	r3, [r3, #0]
 800da36:	2b3a      	cmp	r3, #58	; 0x3a
 800da38:	d1f4      	bne.n	800da24 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	781b      	ldrb	r3, [r3, #0]
 800da3e:	2b3a      	cmp	r3, #58	; 0x3a
 800da40:	d11c      	bne.n	800da7c <get_ldnumber+0x76>
			tp = *path;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	1c5a      	adds	r2, r3, #1
 800da4c:	60fa      	str	r2, [r7, #12]
 800da4e:	781b      	ldrb	r3, [r3, #0]
 800da50:	3b30      	subs	r3, #48	; 0x30
 800da52:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800da54:	68bb      	ldr	r3, [r7, #8]
 800da56:	2b09      	cmp	r3, #9
 800da58:	d80e      	bhi.n	800da78 <get_ldnumber+0x72>
 800da5a:	68fa      	ldr	r2, [r7, #12]
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	429a      	cmp	r2, r3
 800da60:	d10a      	bne.n	800da78 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d107      	bne.n	800da78 <get_ldnumber+0x72>
					vol = (int)i;
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800da6c:	697b      	ldr	r3, [r7, #20]
 800da6e:	3301      	adds	r3, #1
 800da70:	617b      	str	r3, [r7, #20]
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	697a      	ldr	r2, [r7, #20]
 800da76:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800da78:	693b      	ldr	r3, [r7, #16]
 800da7a:	e002      	b.n	800da82 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800da7c:	2300      	movs	r3, #0
 800da7e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800da80:	693b      	ldr	r3, [r7, #16]
}
 800da82:	4618      	mov	r0, r3
 800da84:	371c      	adds	r7, #28
 800da86:	46bd      	mov	sp, r7
 800da88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8c:	4770      	bx	lr
	...

0800da90 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b082      	sub	sp, #8
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
 800da98:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2200      	movs	r2, #0
 800da9e:	70da      	strb	r2, [r3, #3]
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800daa6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800daa8:	6839      	ldr	r1, [r7, #0]
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	f7fe fb16 	bl	800c0dc <move_window>
 800dab0:	4603      	mov	r3, r0
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d001      	beq.n	800daba <check_fs+0x2a>
 800dab6:	2304      	movs	r3, #4
 800dab8:	e038      	b.n	800db2c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	3334      	adds	r3, #52	; 0x34
 800dabe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dac2:	4618      	mov	r0, r3
 800dac4:	f7fe f85a 	bl	800bb7c <ld_word>
 800dac8:	4603      	mov	r3, r0
 800daca:	461a      	mov	r2, r3
 800dacc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800dad0:	429a      	cmp	r2, r3
 800dad2:	d001      	beq.n	800dad8 <check_fs+0x48>
 800dad4:	2303      	movs	r3, #3
 800dad6:	e029      	b.n	800db2c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dade:	2be9      	cmp	r3, #233	; 0xe9
 800dae0:	d009      	beq.n	800daf6 <check_fs+0x66>
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dae8:	2beb      	cmp	r3, #235	; 0xeb
 800daea:	d11e      	bne.n	800db2a <check_fs+0x9a>
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800daf2:	2b90      	cmp	r3, #144	; 0x90
 800daf4:	d119      	bne.n	800db2a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	3334      	adds	r3, #52	; 0x34
 800dafa:	3336      	adds	r3, #54	; 0x36
 800dafc:	4618      	mov	r0, r3
 800dafe:	f7fe f855 	bl	800bbac <ld_dword>
 800db02:	4603      	mov	r3, r0
 800db04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800db08:	4a0a      	ldr	r2, [pc, #40]	; (800db34 <check_fs+0xa4>)
 800db0a:	4293      	cmp	r3, r2
 800db0c:	d101      	bne.n	800db12 <check_fs+0x82>
 800db0e:	2300      	movs	r3, #0
 800db10:	e00c      	b.n	800db2c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	3334      	adds	r3, #52	; 0x34
 800db16:	3352      	adds	r3, #82	; 0x52
 800db18:	4618      	mov	r0, r3
 800db1a:	f7fe f847 	bl	800bbac <ld_dword>
 800db1e:	4603      	mov	r3, r0
 800db20:	4a05      	ldr	r2, [pc, #20]	; (800db38 <check_fs+0xa8>)
 800db22:	4293      	cmp	r3, r2
 800db24:	d101      	bne.n	800db2a <check_fs+0x9a>
 800db26:	2300      	movs	r3, #0
 800db28:	e000      	b.n	800db2c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800db2a:	2302      	movs	r3, #2
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	3708      	adds	r7, #8
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}
 800db34:	00544146 	.word	0x00544146
 800db38:	33544146 	.word	0x33544146

0800db3c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b096      	sub	sp, #88	; 0x58
 800db40:	af00      	add	r7, sp, #0
 800db42:	60f8      	str	r0, [r7, #12]
 800db44:	60b9      	str	r1, [r7, #8]
 800db46:	4613      	mov	r3, r2
 800db48:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	2200      	movs	r2, #0
 800db4e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800db50:	68f8      	ldr	r0, [r7, #12]
 800db52:	f7ff ff58 	bl	800da06 <get_ldnumber>
 800db56:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800db58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	da01      	bge.n	800db62 <find_volume+0x26>
 800db5e:	230b      	movs	r3, #11
 800db60:	e230      	b.n	800dfc4 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800db62:	4aa1      	ldr	r2, [pc, #644]	; (800dde8 <find_volume+0x2ac>)
 800db64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db6a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800db6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d101      	bne.n	800db76 <find_volume+0x3a>
 800db72:	230c      	movs	r3, #12
 800db74:	e226      	b.n	800dfc4 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db7a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800db7c:	79fb      	ldrb	r3, [r7, #7]
 800db7e:	f023 0301 	bic.w	r3, r3, #1
 800db82:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800db84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db86:	781b      	ldrb	r3, [r3, #0]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d01a      	beq.n	800dbc2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800db8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db8e:	785b      	ldrb	r3, [r3, #1]
 800db90:	4618      	mov	r0, r3
 800db92:	f7fd ff55 	bl	800ba40 <disk_status>
 800db96:	4603      	mov	r3, r0
 800db98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800db9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dba0:	f003 0301 	and.w	r3, r3, #1
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d10c      	bne.n	800dbc2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800dba8:	79fb      	ldrb	r3, [r7, #7]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d007      	beq.n	800dbbe <find_volume+0x82>
 800dbae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dbb2:	f003 0304 	and.w	r3, r3, #4
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d001      	beq.n	800dbbe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800dbba:	230a      	movs	r3, #10
 800dbbc:	e202      	b.n	800dfc4 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	e200      	b.n	800dfc4 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800dbc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800dbc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbca:	b2da      	uxtb	r2, r3
 800dbcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbce:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800dbd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbd2:	785b      	ldrb	r3, [r3, #1]
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f7fd ff4d 	bl	800ba74 <disk_initialize>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800dbe0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dbe4:	f003 0301 	and.w	r3, r3, #1
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d001      	beq.n	800dbf0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800dbec:	2303      	movs	r3, #3
 800dbee:	e1e9      	b.n	800dfc4 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800dbf0:	79fb      	ldrb	r3, [r7, #7]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d007      	beq.n	800dc06 <find_volume+0xca>
 800dbf6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dbfa:	f003 0304 	and.w	r3, r3, #4
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d001      	beq.n	800dc06 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800dc02:	230a      	movs	r3, #10
 800dc04:	e1de      	b.n	800dfc4 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800dc06:	2300      	movs	r3, #0
 800dc08:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800dc0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dc0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dc0e:	f7ff ff3f 	bl	800da90 <check_fs>
 800dc12:	4603      	mov	r3, r0
 800dc14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800dc18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dc1c:	2b02      	cmp	r3, #2
 800dc1e:	d149      	bne.n	800dcb4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dc20:	2300      	movs	r3, #0
 800dc22:	643b      	str	r3, [r7, #64]	; 0x40
 800dc24:	e01e      	b.n	800dc64 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800dc26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc28:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dc2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc2e:	011b      	lsls	r3, r3, #4
 800dc30:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800dc34:	4413      	add	r3, r2
 800dc36:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800dc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc3a:	3304      	adds	r3, #4
 800dc3c:	781b      	ldrb	r3, [r3, #0]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d006      	beq.n	800dc50 <find_volume+0x114>
 800dc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc44:	3308      	adds	r3, #8
 800dc46:	4618      	mov	r0, r3
 800dc48:	f7fd ffb0 	bl	800bbac <ld_dword>
 800dc4c:	4602      	mov	r2, r0
 800dc4e:	e000      	b.n	800dc52 <find_volume+0x116>
 800dc50:	2200      	movs	r2, #0
 800dc52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc54:	009b      	lsls	r3, r3, #2
 800dc56:	3358      	adds	r3, #88	; 0x58
 800dc58:	443b      	add	r3, r7
 800dc5a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dc5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc60:	3301      	adds	r3, #1
 800dc62:	643b      	str	r3, [r7, #64]	; 0x40
 800dc64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc66:	2b03      	cmp	r3, #3
 800dc68:	d9dd      	bls.n	800dc26 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800dc6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d002      	beq.n	800dc7a <find_volume+0x13e>
 800dc74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc76:	3b01      	subs	r3, #1
 800dc78:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800dc7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc7c:	009b      	lsls	r3, r3, #2
 800dc7e:	3358      	adds	r3, #88	; 0x58
 800dc80:	443b      	add	r3, r7
 800dc82:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800dc86:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800dc88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d005      	beq.n	800dc9a <find_volume+0x15e>
 800dc8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dc90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dc92:	f7ff fefd 	bl	800da90 <check_fs>
 800dc96:	4603      	mov	r3, r0
 800dc98:	e000      	b.n	800dc9c <find_volume+0x160>
 800dc9a:	2303      	movs	r3, #3
 800dc9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800dca0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dca4:	2b01      	cmp	r3, #1
 800dca6:	d905      	bls.n	800dcb4 <find_volume+0x178>
 800dca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcaa:	3301      	adds	r3, #1
 800dcac:	643b      	str	r3, [r7, #64]	; 0x40
 800dcae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcb0:	2b03      	cmp	r3, #3
 800dcb2:	d9e2      	bls.n	800dc7a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800dcb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dcb8:	2b04      	cmp	r3, #4
 800dcba:	d101      	bne.n	800dcc0 <find_volume+0x184>
 800dcbc:	2301      	movs	r3, #1
 800dcbe:	e181      	b.n	800dfc4 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800dcc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dcc4:	2b01      	cmp	r3, #1
 800dcc6:	d901      	bls.n	800dccc <find_volume+0x190>
 800dcc8:	230d      	movs	r3, #13
 800dcca:	e17b      	b.n	800dfc4 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800dccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcce:	3334      	adds	r3, #52	; 0x34
 800dcd0:	330b      	adds	r3, #11
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f7fd ff52 	bl	800bb7c <ld_word>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dcde:	d001      	beq.n	800dce4 <find_volume+0x1a8>
 800dce0:	230d      	movs	r3, #13
 800dce2:	e16f      	b.n	800dfc4 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800dce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dce6:	3334      	adds	r3, #52	; 0x34
 800dce8:	3316      	adds	r3, #22
 800dcea:	4618      	mov	r0, r3
 800dcec:	f7fd ff46 	bl	800bb7c <ld_word>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800dcf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d106      	bne.n	800dd08 <find_volume+0x1cc>
 800dcfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcfc:	3334      	adds	r3, #52	; 0x34
 800dcfe:	3324      	adds	r3, #36	; 0x24
 800dd00:	4618      	mov	r0, r3
 800dd02:	f7fd ff53 	bl	800bbac <ld_dword>
 800dd06:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800dd08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dd0c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800dd0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd10:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800dd14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd16:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800dd18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd1a:	789b      	ldrb	r3, [r3, #2]
 800dd1c:	2b01      	cmp	r3, #1
 800dd1e:	d005      	beq.n	800dd2c <find_volume+0x1f0>
 800dd20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd22:	789b      	ldrb	r3, [r3, #2]
 800dd24:	2b02      	cmp	r3, #2
 800dd26:	d001      	beq.n	800dd2c <find_volume+0x1f0>
 800dd28:	230d      	movs	r3, #13
 800dd2a:	e14b      	b.n	800dfc4 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800dd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd2e:	789b      	ldrb	r3, [r3, #2]
 800dd30:	461a      	mov	r2, r3
 800dd32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd34:	fb02 f303 	mul.w	r3, r2, r3
 800dd38:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800dd3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dd40:	b29a      	uxth	r2, r3
 800dd42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd44:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800dd46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd48:	895b      	ldrh	r3, [r3, #10]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d008      	beq.n	800dd60 <find_volume+0x224>
 800dd4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd50:	895b      	ldrh	r3, [r3, #10]
 800dd52:	461a      	mov	r2, r3
 800dd54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd56:	895b      	ldrh	r3, [r3, #10]
 800dd58:	3b01      	subs	r3, #1
 800dd5a:	4013      	ands	r3, r2
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d001      	beq.n	800dd64 <find_volume+0x228>
 800dd60:	230d      	movs	r3, #13
 800dd62:	e12f      	b.n	800dfc4 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800dd64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd66:	3334      	adds	r3, #52	; 0x34
 800dd68:	3311      	adds	r3, #17
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f7fd ff06 	bl	800bb7c <ld_word>
 800dd70:	4603      	mov	r3, r0
 800dd72:	461a      	mov	r2, r3
 800dd74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd76:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800dd78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd7a:	891b      	ldrh	r3, [r3, #8]
 800dd7c:	f003 030f 	and.w	r3, r3, #15
 800dd80:	b29b      	uxth	r3, r3
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d001      	beq.n	800dd8a <find_volume+0x24e>
 800dd86:	230d      	movs	r3, #13
 800dd88:	e11c      	b.n	800dfc4 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800dd8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd8c:	3334      	adds	r3, #52	; 0x34
 800dd8e:	3313      	adds	r3, #19
 800dd90:	4618      	mov	r0, r3
 800dd92:	f7fd fef3 	bl	800bb7c <ld_word>
 800dd96:	4603      	mov	r3, r0
 800dd98:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800dd9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d106      	bne.n	800ddae <find_volume+0x272>
 800dda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dda2:	3334      	adds	r3, #52	; 0x34
 800dda4:	3320      	adds	r3, #32
 800dda6:	4618      	mov	r0, r3
 800dda8:	f7fd ff00 	bl	800bbac <ld_dword>
 800ddac:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ddae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddb0:	3334      	adds	r3, #52	; 0x34
 800ddb2:	330e      	adds	r3, #14
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	f7fd fee1 	bl	800bb7c <ld_word>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ddbe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d101      	bne.n	800ddc8 <find_volume+0x28c>
 800ddc4:	230d      	movs	r3, #13
 800ddc6:	e0fd      	b.n	800dfc4 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ddc8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ddca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddcc:	4413      	add	r3, r2
 800ddce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ddd0:	8912      	ldrh	r2, [r2, #8]
 800ddd2:	0912      	lsrs	r2, r2, #4
 800ddd4:	b292      	uxth	r2, r2
 800ddd6:	4413      	add	r3, r2
 800ddd8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ddda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddde:	429a      	cmp	r2, r3
 800dde0:	d204      	bcs.n	800ddec <find_volume+0x2b0>
 800dde2:	230d      	movs	r3, #13
 800dde4:	e0ee      	b.n	800dfc4 <find_volume+0x488>
 800dde6:	bf00      	nop
 800dde8:	200032b4 	.word	0x200032b4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ddec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ddee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddf0:	1ad3      	subs	r3, r2, r3
 800ddf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ddf4:	8952      	ldrh	r2, [r2, #10]
 800ddf6:	fbb3 f3f2 	udiv	r3, r3, r2
 800ddfa:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ddfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d101      	bne.n	800de06 <find_volume+0x2ca>
 800de02:	230d      	movs	r3, #13
 800de04:	e0de      	b.n	800dfc4 <find_volume+0x488>
		fmt = FS_FAT32;
 800de06:	2303      	movs	r3, #3
 800de08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800de0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de0e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800de12:	4293      	cmp	r3, r2
 800de14:	d802      	bhi.n	800de1c <find_volume+0x2e0>
 800de16:	2302      	movs	r3, #2
 800de18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800de1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de1e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800de22:	4293      	cmp	r3, r2
 800de24:	d802      	bhi.n	800de2c <find_volume+0x2f0>
 800de26:	2301      	movs	r3, #1
 800de28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800de2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de2e:	1c9a      	adds	r2, r3, #2
 800de30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de32:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800de34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800de38:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800de3a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800de3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de3e:	441a      	add	r2, r3
 800de40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de42:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800de44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800de46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de48:	441a      	add	r2, r3
 800de4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de4c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800de4e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800de52:	2b03      	cmp	r3, #3
 800de54:	d11e      	bne.n	800de94 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800de56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de58:	3334      	adds	r3, #52	; 0x34
 800de5a:	332a      	adds	r3, #42	; 0x2a
 800de5c:	4618      	mov	r0, r3
 800de5e:	f7fd fe8d 	bl	800bb7c <ld_word>
 800de62:	4603      	mov	r3, r0
 800de64:	2b00      	cmp	r3, #0
 800de66:	d001      	beq.n	800de6c <find_volume+0x330>
 800de68:	230d      	movs	r3, #13
 800de6a:	e0ab      	b.n	800dfc4 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800de6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de6e:	891b      	ldrh	r3, [r3, #8]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d001      	beq.n	800de78 <find_volume+0x33c>
 800de74:	230d      	movs	r3, #13
 800de76:	e0a5      	b.n	800dfc4 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800de78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de7a:	3334      	adds	r3, #52	; 0x34
 800de7c:	332c      	adds	r3, #44	; 0x2c
 800de7e:	4618      	mov	r0, r3
 800de80:	f7fd fe94 	bl	800bbac <ld_dword>
 800de84:	4602      	mov	r2, r0
 800de86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de88:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800de8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de8c:	699b      	ldr	r3, [r3, #24]
 800de8e:	009b      	lsls	r3, r3, #2
 800de90:	647b      	str	r3, [r7, #68]	; 0x44
 800de92:	e01f      	b.n	800ded4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800de94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de96:	891b      	ldrh	r3, [r3, #8]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d101      	bne.n	800dea0 <find_volume+0x364>
 800de9c:	230d      	movs	r3, #13
 800de9e:	e091      	b.n	800dfc4 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800dea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dea2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dea6:	441a      	add	r2, r3
 800dea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deaa:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800deac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800deb0:	2b02      	cmp	r3, #2
 800deb2:	d103      	bne.n	800debc <find_volume+0x380>
 800deb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deb6:	699b      	ldr	r3, [r3, #24]
 800deb8:	005b      	lsls	r3, r3, #1
 800deba:	e00a      	b.n	800ded2 <find_volume+0x396>
 800debc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800debe:	699a      	ldr	r2, [r3, #24]
 800dec0:	4613      	mov	r3, r2
 800dec2:	005b      	lsls	r3, r3, #1
 800dec4:	4413      	add	r3, r2
 800dec6:	085a      	lsrs	r2, r3, #1
 800dec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deca:	699b      	ldr	r3, [r3, #24]
 800decc:	f003 0301 	and.w	r3, r3, #1
 800ded0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ded2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ded4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ded6:	69da      	ldr	r2, [r3, #28]
 800ded8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800deda:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800dede:	0a5b      	lsrs	r3, r3, #9
 800dee0:	429a      	cmp	r2, r3
 800dee2:	d201      	bcs.n	800dee8 <find_volume+0x3ac>
 800dee4:	230d      	movs	r3, #13
 800dee6:	e06d      	b.n	800dfc4 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800dee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800deee:	615a      	str	r2, [r3, #20]
 800def0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800def2:	695a      	ldr	r2, [r3, #20]
 800def4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800def6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800def8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800defa:	2280      	movs	r2, #128	; 0x80
 800defc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800defe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800df02:	2b03      	cmp	r3, #3
 800df04:	d149      	bne.n	800df9a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800df06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df08:	3334      	adds	r3, #52	; 0x34
 800df0a:	3330      	adds	r3, #48	; 0x30
 800df0c:	4618      	mov	r0, r3
 800df0e:	f7fd fe35 	bl	800bb7c <ld_word>
 800df12:	4603      	mov	r3, r0
 800df14:	2b01      	cmp	r3, #1
 800df16:	d140      	bne.n	800df9a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800df18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df1a:	3301      	adds	r3, #1
 800df1c:	4619      	mov	r1, r3
 800df1e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800df20:	f7fe f8dc 	bl	800c0dc <move_window>
 800df24:	4603      	mov	r3, r0
 800df26:	2b00      	cmp	r3, #0
 800df28:	d137      	bne.n	800df9a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800df2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df2c:	2200      	movs	r2, #0
 800df2e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800df30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df32:	3334      	adds	r3, #52	; 0x34
 800df34:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800df38:	4618      	mov	r0, r3
 800df3a:	f7fd fe1f 	bl	800bb7c <ld_word>
 800df3e:	4603      	mov	r3, r0
 800df40:	461a      	mov	r2, r3
 800df42:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800df46:	429a      	cmp	r2, r3
 800df48:	d127      	bne.n	800df9a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800df4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df4c:	3334      	adds	r3, #52	; 0x34
 800df4e:	4618      	mov	r0, r3
 800df50:	f7fd fe2c 	bl	800bbac <ld_dword>
 800df54:	4603      	mov	r3, r0
 800df56:	4a1d      	ldr	r2, [pc, #116]	; (800dfcc <find_volume+0x490>)
 800df58:	4293      	cmp	r3, r2
 800df5a:	d11e      	bne.n	800df9a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800df5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df5e:	3334      	adds	r3, #52	; 0x34
 800df60:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800df64:	4618      	mov	r0, r3
 800df66:	f7fd fe21 	bl	800bbac <ld_dword>
 800df6a:	4603      	mov	r3, r0
 800df6c:	4a18      	ldr	r2, [pc, #96]	; (800dfd0 <find_volume+0x494>)
 800df6e:	4293      	cmp	r3, r2
 800df70:	d113      	bne.n	800df9a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800df72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df74:	3334      	adds	r3, #52	; 0x34
 800df76:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800df7a:	4618      	mov	r0, r3
 800df7c:	f7fd fe16 	bl	800bbac <ld_dword>
 800df80:	4602      	mov	r2, r0
 800df82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df84:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800df86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df88:	3334      	adds	r3, #52	; 0x34
 800df8a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800df8e:	4618      	mov	r0, r3
 800df90:	f7fd fe0c 	bl	800bbac <ld_dword>
 800df94:	4602      	mov	r2, r0
 800df96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df98:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800df9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df9c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800dfa0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800dfa2:	4b0c      	ldr	r3, [pc, #48]	; (800dfd4 <find_volume+0x498>)
 800dfa4:	881b      	ldrh	r3, [r3, #0]
 800dfa6:	3301      	adds	r3, #1
 800dfa8:	b29a      	uxth	r2, r3
 800dfaa:	4b0a      	ldr	r3, [pc, #40]	; (800dfd4 <find_volume+0x498>)
 800dfac:	801a      	strh	r2, [r3, #0]
 800dfae:	4b09      	ldr	r3, [pc, #36]	; (800dfd4 <find_volume+0x498>)
 800dfb0:	881a      	ldrh	r2, [r3, #0]
 800dfb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfb4:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800dfb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfb8:	4a07      	ldr	r2, [pc, #28]	; (800dfd8 <find_volume+0x49c>)
 800dfba:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800dfbc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dfbe:	f7fe f825 	bl	800c00c <clear_lock>
#endif
	return FR_OK;
 800dfc2:	2300      	movs	r3, #0
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	3758      	adds	r7, #88	; 0x58
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}
 800dfcc:	41615252 	.word	0x41615252
 800dfd0:	61417272 	.word	0x61417272
 800dfd4:	200032b8 	.word	0x200032b8
 800dfd8:	200032dc 	.word	0x200032dc

0800dfdc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b084      	sub	sp, #16
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
 800dfe4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800dfe6:	2309      	movs	r3, #9
 800dfe8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d01c      	beq.n	800e02a <validate+0x4e>
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d018      	beq.n	800e02a <validate+0x4e>
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	781b      	ldrb	r3, [r3, #0]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d013      	beq.n	800e02a <validate+0x4e>
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	889a      	ldrh	r2, [r3, #4]
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	88db      	ldrh	r3, [r3, #6]
 800e00c:	429a      	cmp	r2, r3
 800e00e:	d10c      	bne.n	800e02a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	785b      	ldrb	r3, [r3, #1]
 800e016:	4618      	mov	r0, r3
 800e018:	f7fd fd12 	bl	800ba40 <disk_status>
 800e01c:	4603      	mov	r3, r0
 800e01e:	f003 0301 	and.w	r3, r3, #1
 800e022:	2b00      	cmp	r3, #0
 800e024:	d101      	bne.n	800e02a <validate+0x4e>
			res = FR_OK;
 800e026:	2300      	movs	r3, #0
 800e028:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e02a:	7bfb      	ldrb	r3, [r7, #15]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d102      	bne.n	800e036 <validate+0x5a>
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	e000      	b.n	800e038 <validate+0x5c>
 800e036:	2300      	movs	r3, #0
 800e038:	683a      	ldr	r2, [r7, #0]
 800e03a:	6013      	str	r3, [r2, #0]
	return res;
 800e03c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e03e:	4618      	mov	r0, r3
 800e040:	3710      	adds	r7, #16
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}
	...

0800e048 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b088      	sub	sp, #32
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	60f8      	str	r0, [r7, #12]
 800e050:	60b9      	str	r1, [r7, #8]
 800e052:	4613      	mov	r3, r2
 800e054:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e056:	68bb      	ldr	r3, [r7, #8]
 800e058:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e05a:	f107 0310 	add.w	r3, r7, #16
 800e05e:	4618      	mov	r0, r3
 800e060:	f7ff fcd1 	bl	800da06 <get_ldnumber>
 800e064:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e066:	69fb      	ldr	r3, [r7, #28]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	da01      	bge.n	800e070 <f_mount+0x28>
 800e06c:	230b      	movs	r3, #11
 800e06e:	e02b      	b.n	800e0c8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e070:	4a17      	ldr	r2, [pc, #92]	; (800e0d0 <f_mount+0x88>)
 800e072:	69fb      	ldr	r3, [r7, #28]
 800e074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e078:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e07a:	69bb      	ldr	r3, [r7, #24]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d005      	beq.n	800e08c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e080:	69b8      	ldr	r0, [r7, #24]
 800e082:	f7fd ffc3 	bl	800c00c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e086:	69bb      	ldr	r3, [r7, #24]
 800e088:	2200      	movs	r2, #0
 800e08a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d002      	beq.n	800e098 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	2200      	movs	r2, #0
 800e096:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e098:	68fa      	ldr	r2, [r7, #12]
 800e09a:	490d      	ldr	r1, [pc, #52]	; (800e0d0 <f_mount+0x88>)
 800e09c:	69fb      	ldr	r3, [r7, #28]
 800e09e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d002      	beq.n	800e0ae <f_mount+0x66>
 800e0a8:	79fb      	ldrb	r3, [r7, #7]
 800e0aa:	2b01      	cmp	r3, #1
 800e0ac:	d001      	beq.n	800e0b2 <f_mount+0x6a>
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	e00a      	b.n	800e0c8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e0b2:	f107 010c 	add.w	r1, r7, #12
 800e0b6:	f107 0308 	add.w	r3, r7, #8
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f7ff fd3d 	bl	800db3c <find_volume>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e0c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	3720      	adds	r7, #32
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}
 800e0d0:	200032b4 	.word	0x200032b4

0800e0d4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b09a      	sub	sp, #104	; 0x68
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	60f8      	str	r0, [r7, #12]
 800e0dc:	60b9      	str	r1, [r7, #8]
 800e0de:	4613      	mov	r3, r2
 800e0e0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d101      	bne.n	800e0ec <f_open+0x18>
 800e0e8:	2309      	movs	r3, #9
 800e0ea:	e1ad      	b.n	800e448 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e0ec:	79fb      	ldrb	r3, [r7, #7]
 800e0ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e0f2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e0f4:	79fa      	ldrb	r2, [r7, #7]
 800e0f6:	f107 0114 	add.w	r1, r7, #20
 800e0fa:	f107 0308 	add.w	r3, r7, #8
 800e0fe:	4618      	mov	r0, r3
 800e100:	f7ff fd1c 	bl	800db3c <find_volume>
 800e104:	4603      	mov	r3, r0
 800e106:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800e10a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e10e:	2b00      	cmp	r3, #0
 800e110:	f040 8191 	bne.w	800e436 <f_open+0x362>
		dj.obj.fs = fs;
 800e114:	697b      	ldr	r3, [r7, #20]
 800e116:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e118:	68ba      	ldr	r2, [r7, #8]
 800e11a:	f107 0318 	add.w	r3, r7, #24
 800e11e:	4611      	mov	r1, r2
 800e120:	4618      	mov	r0, r3
 800e122:	f7ff fbff 	bl	800d924 <follow_path>
 800e126:	4603      	mov	r3, r0
 800e128:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e12c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e130:	2b00      	cmp	r3, #0
 800e132:	d11a      	bne.n	800e16a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e134:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e138:	b25b      	sxtb	r3, r3
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	da03      	bge.n	800e146 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e13e:	2306      	movs	r3, #6
 800e140:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e144:	e011      	b.n	800e16a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e146:	79fb      	ldrb	r3, [r7, #7]
 800e148:	f023 0301 	bic.w	r3, r3, #1
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	bf14      	ite	ne
 800e150:	2301      	movne	r3, #1
 800e152:	2300      	moveq	r3, #0
 800e154:	b2db      	uxtb	r3, r3
 800e156:	461a      	mov	r2, r3
 800e158:	f107 0318 	add.w	r3, r7, #24
 800e15c:	4611      	mov	r1, r2
 800e15e:	4618      	mov	r0, r3
 800e160:	f7fd fe0c 	bl	800bd7c <chk_lock>
 800e164:	4603      	mov	r3, r0
 800e166:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e16a:	79fb      	ldrb	r3, [r7, #7]
 800e16c:	f003 031c 	and.w	r3, r3, #28
 800e170:	2b00      	cmp	r3, #0
 800e172:	d07f      	beq.n	800e274 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e174:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d017      	beq.n	800e1ac <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e17c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e180:	2b04      	cmp	r3, #4
 800e182:	d10e      	bne.n	800e1a2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e184:	f7fd fe56 	bl	800be34 <enq_lock>
 800e188:	4603      	mov	r3, r0
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d006      	beq.n	800e19c <f_open+0xc8>
 800e18e:	f107 0318 	add.w	r3, r7, #24
 800e192:	4618      	mov	r0, r3
 800e194:	f7ff f838 	bl	800d208 <dir_register>
 800e198:	4603      	mov	r3, r0
 800e19a:	e000      	b.n	800e19e <f_open+0xca>
 800e19c:	2312      	movs	r3, #18
 800e19e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e1a2:	79fb      	ldrb	r3, [r7, #7]
 800e1a4:	f043 0308 	orr.w	r3, r3, #8
 800e1a8:	71fb      	strb	r3, [r7, #7]
 800e1aa:	e010      	b.n	800e1ce <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e1ac:	7fbb      	ldrb	r3, [r7, #30]
 800e1ae:	f003 0311 	and.w	r3, r3, #17
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d003      	beq.n	800e1be <f_open+0xea>
					res = FR_DENIED;
 800e1b6:	2307      	movs	r3, #7
 800e1b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e1bc:	e007      	b.n	800e1ce <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e1be:	79fb      	ldrb	r3, [r7, #7]
 800e1c0:	f003 0304 	and.w	r3, r3, #4
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d002      	beq.n	800e1ce <f_open+0xfa>
 800e1c8:	2308      	movs	r3, #8
 800e1ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e1ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d168      	bne.n	800e2a8 <f_open+0x1d4>
 800e1d6:	79fb      	ldrb	r3, [r7, #7]
 800e1d8:	f003 0308 	and.w	r3, r3, #8
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d063      	beq.n	800e2a8 <f_open+0x1d4>
				dw = GET_FATTIME();
 800e1e0:	f7fb fa00 	bl	80095e4 <get_fattime>
 800e1e4:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1e8:	330e      	adds	r3, #14
 800e1ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f7fd fd1b 	bl	800bc28 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1f4:	3316      	adds	r3, #22
 800e1f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f7fd fd15 	bl	800bc28 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e200:	330b      	adds	r3, #11
 800e202:	2220      	movs	r2, #32
 800e204:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e20a:	4611      	mov	r1, r2
 800e20c:	4618      	mov	r0, r3
 800e20e:	f7fe fc6a 	bl	800cae6 <ld_clust>
 800e212:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e214:	697b      	ldr	r3, [r7, #20]
 800e216:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e218:	2200      	movs	r2, #0
 800e21a:	4618      	mov	r0, r3
 800e21c:	f7fe fc82 	bl	800cb24 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e222:	331c      	adds	r3, #28
 800e224:	2100      	movs	r1, #0
 800e226:	4618      	mov	r0, r3
 800e228:	f7fd fcfe 	bl	800bc28 <st_dword>
					fs->wflag = 1;
 800e22c:	697b      	ldr	r3, [r7, #20]
 800e22e:	2201      	movs	r2, #1
 800e230:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e232:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e234:	2b00      	cmp	r3, #0
 800e236:	d037      	beq.n	800e2a8 <f_open+0x1d4>
						dw = fs->winsect;
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e23c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800e23e:	f107 0318 	add.w	r3, r7, #24
 800e242:	2200      	movs	r2, #0
 800e244:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e246:	4618      	mov	r0, r3
 800e248:	f7fe f995 	bl	800c576 <remove_chain>
 800e24c:	4603      	mov	r3, r0
 800e24e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800e252:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e256:	2b00      	cmp	r3, #0
 800e258:	d126      	bne.n	800e2a8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e25e:	4618      	mov	r0, r3
 800e260:	f7fd ff3c 	bl	800c0dc <move_window>
 800e264:	4603      	mov	r3, r0
 800e266:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e26e:	3a01      	subs	r2, #1
 800e270:	611a      	str	r2, [r3, #16]
 800e272:	e019      	b.n	800e2a8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e274:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d115      	bne.n	800e2a8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e27c:	7fbb      	ldrb	r3, [r7, #30]
 800e27e:	f003 0310 	and.w	r3, r3, #16
 800e282:	2b00      	cmp	r3, #0
 800e284:	d003      	beq.n	800e28e <f_open+0x1ba>
					res = FR_NO_FILE;
 800e286:	2304      	movs	r3, #4
 800e288:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e28c:	e00c      	b.n	800e2a8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e28e:	79fb      	ldrb	r3, [r7, #7]
 800e290:	f003 0302 	and.w	r3, r3, #2
 800e294:	2b00      	cmp	r3, #0
 800e296:	d007      	beq.n	800e2a8 <f_open+0x1d4>
 800e298:	7fbb      	ldrb	r3, [r7, #30]
 800e29a:	f003 0301 	and.w	r3, r3, #1
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d002      	beq.n	800e2a8 <f_open+0x1d4>
						res = FR_DENIED;
 800e2a2:	2307      	movs	r3, #7
 800e2a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800e2a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d128      	bne.n	800e302 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e2b0:	79fb      	ldrb	r3, [r7, #7]
 800e2b2:	f003 0308 	and.w	r3, r3, #8
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d003      	beq.n	800e2c2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e2ba:	79fb      	ldrb	r3, [r7, #7]
 800e2bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2c0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e2ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e2d0:	79fb      	ldrb	r3, [r7, #7]
 800e2d2:	f023 0301 	bic.w	r3, r3, #1
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	bf14      	ite	ne
 800e2da:	2301      	movne	r3, #1
 800e2dc:	2300      	moveq	r3, #0
 800e2de:	b2db      	uxtb	r3, r3
 800e2e0:	461a      	mov	r2, r3
 800e2e2:	f107 0318 	add.w	r3, r7, #24
 800e2e6:	4611      	mov	r1, r2
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f7fd fdc5 	bl	800be78 <inc_lock>
 800e2ee:	4602      	mov	r2, r0
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	691b      	ldr	r3, [r3, #16]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d102      	bne.n	800e302 <f_open+0x22e>
 800e2fc:	2302      	movs	r3, #2
 800e2fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e302:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e306:	2b00      	cmp	r3, #0
 800e308:	f040 8095 	bne.w	800e436 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e30c:	697b      	ldr	r3, [r7, #20]
 800e30e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e310:	4611      	mov	r1, r2
 800e312:	4618      	mov	r0, r3
 800e314:	f7fe fbe7 	bl	800cae6 <ld_clust>
 800e318:	4602      	mov	r2, r0
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e320:	331c      	adds	r3, #28
 800e322:	4618      	mov	r0, r3
 800e324:	f7fd fc42 	bl	800bbac <ld_dword>
 800e328:	4602      	mov	r2, r0
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	2200      	movs	r2, #0
 800e332:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e334:	697a      	ldr	r2, [r7, #20]
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e33a:	697b      	ldr	r3, [r7, #20]
 800e33c:	88da      	ldrh	r2, [r3, #6]
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	79fa      	ldrb	r2, [r7, #7]
 800e346:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	2200      	movs	r2, #0
 800e34c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	2200      	movs	r2, #0
 800e352:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	2200      	movs	r2, #0
 800e358:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	3330      	adds	r3, #48	; 0x30
 800e35e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e362:	2100      	movs	r1, #0
 800e364:	4618      	mov	r0, r3
 800e366:	f7fd fcac 	bl	800bcc2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e36a:	79fb      	ldrb	r3, [r7, #7]
 800e36c:	f003 0320 	and.w	r3, r3, #32
 800e370:	2b00      	cmp	r3, #0
 800e372:	d060      	beq.n	800e436 <f_open+0x362>
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	68db      	ldr	r3, [r3, #12]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d05c      	beq.n	800e436 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	68da      	ldr	r2, [r3, #12]
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e384:	697b      	ldr	r3, [r7, #20]
 800e386:	895b      	ldrh	r3, [r3, #10]
 800e388:	025b      	lsls	r3, r3, #9
 800e38a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	689b      	ldr	r3, [r3, #8]
 800e390:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	68db      	ldr	r3, [r3, #12]
 800e396:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e398:	e016      	b.n	800e3c8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f7fd ff57 	bl	800c252 <get_fat>
 800e3a4:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800e3a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e3a8:	2b01      	cmp	r3, #1
 800e3aa:	d802      	bhi.n	800e3b2 <f_open+0x2de>
 800e3ac:	2302      	movs	r3, #2
 800e3ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e3b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e3b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e3b8:	d102      	bne.n	800e3c0 <f_open+0x2ec>
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e3c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e3c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3c4:	1ad3      	subs	r3, r2, r3
 800e3c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e3c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d103      	bne.n	800e3d8 <f_open+0x304>
 800e3d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e3d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3d4:	429a      	cmp	r2, r3
 800e3d6:	d8e0      	bhi.n	800e39a <f_open+0x2c6>
				}
				fp->clust = clst;
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e3dc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e3de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d127      	bne.n	800e436 <f_open+0x362>
 800e3e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e3e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d022      	beq.n	800e436 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e3f0:	697b      	ldr	r3, [r7, #20]
 800e3f2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f7fd ff0d 	bl	800c214 <clust2sect>
 800e3fa:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e3fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d103      	bne.n	800e40a <f_open+0x336>
						res = FR_INT_ERR;
 800e402:	2302      	movs	r3, #2
 800e404:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e408:	e015      	b.n	800e436 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e40a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e40c:	0a5a      	lsrs	r2, r3, #9
 800e40e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e410:	441a      	add	r2, r3
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e416:	697b      	ldr	r3, [r7, #20]
 800e418:	7858      	ldrb	r0, [r3, #1]
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	6a1a      	ldr	r2, [r3, #32]
 800e424:	2301      	movs	r3, #1
 800e426:	f7fd fb4b 	bl	800bac0 <disk_read>
 800e42a:	4603      	mov	r3, r0
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d002      	beq.n	800e436 <f_open+0x362>
 800e430:	2301      	movs	r3, #1
 800e432:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e436:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d002      	beq.n	800e444 <f_open+0x370>
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	2200      	movs	r2, #0
 800e442:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e444:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800e448:	4618      	mov	r0, r3
 800e44a:	3768      	adds	r7, #104	; 0x68
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}

0800e450 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b08c      	sub	sp, #48	; 0x30
 800e454:	af00      	add	r7, sp, #0
 800e456:	60f8      	str	r0, [r7, #12]
 800e458:	60b9      	str	r1, [r7, #8]
 800e45a:	607a      	str	r2, [r7, #4]
 800e45c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	2200      	movs	r2, #0
 800e466:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	f107 0210 	add.w	r2, r7, #16
 800e46e:	4611      	mov	r1, r2
 800e470:	4618      	mov	r0, r3
 800e472:	f7ff fdb3 	bl	800dfdc <validate>
 800e476:	4603      	mov	r3, r0
 800e478:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e47c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e480:	2b00      	cmp	r3, #0
 800e482:	d107      	bne.n	800e494 <f_write+0x44>
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	7d5b      	ldrb	r3, [r3, #21]
 800e488:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e48c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e490:	2b00      	cmp	r3, #0
 800e492:	d002      	beq.n	800e49a <f_write+0x4a>
 800e494:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e498:	e14b      	b.n	800e732 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	7d1b      	ldrb	r3, [r3, #20]
 800e49e:	f003 0302 	and.w	r3, r3, #2
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d101      	bne.n	800e4aa <f_write+0x5a>
 800e4a6:	2307      	movs	r3, #7
 800e4a8:	e143      	b.n	800e732 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	699a      	ldr	r2, [r3, #24]
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	441a      	add	r2, r3
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	699b      	ldr	r3, [r3, #24]
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	f080 812d 	bcs.w	800e716 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	699b      	ldr	r3, [r3, #24]
 800e4c0:	43db      	mvns	r3, r3
 800e4c2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e4c4:	e127      	b.n	800e716 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	699b      	ldr	r3, [r3, #24]
 800e4ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	f040 80e3 	bne.w	800e69a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	699b      	ldr	r3, [r3, #24]
 800e4d8:	0a5b      	lsrs	r3, r3, #9
 800e4da:	693a      	ldr	r2, [r7, #16]
 800e4dc:	8952      	ldrh	r2, [r2, #10]
 800e4de:	3a01      	subs	r2, #1
 800e4e0:	4013      	ands	r3, r2
 800e4e2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e4e4:	69bb      	ldr	r3, [r7, #24]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d143      	bne.n	800e572 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	699b      	ldr	r3, [r3, #24]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d10c      	bne.n	800e50c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	689b      	ldr	r3, [r3, #8]
 800e4f6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d11a      	bne.n	800e534 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	2100      	movs	r1, #0
 800e502:	4618      	mov	r0, r3
 800e504:	f7fe f89c 	bl	800c640 <create_chain>
 800e508:	62b8      	str	r0, [r7, #40]	; 0x28
 800e50a:	e013      	b.n	800e534 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e510:	2b00      	cmp	r3, #0
 800e512:	d007      	beq.n	800e524 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	699b      	ldr	r3, [r3, #24]
 800e518:	4619      	mov	r1, r3
 800e51a:	68f8      	ldr	r0, [r7, #12]
 800e51c:	f7fe f928 	bl	800c770 <clmt_clust>
 800e520:	62b8      	str	r0, [r7, #40]	; 0x28
 800e522:	e007      	b.n	800e534 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e524:	68fa      	ldr	r2, [r7, #12]
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	69db      	ldr	r3, [r3, #28]
 800e52a:	4619      	mov	r1, r3
 800e52c:	4610      	mov	r0, r2
 800e52e:	f7fe f887 	bl	800c640 <create_chain>
 800e532:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e536:	2b00      	cmp	r3, #0
 800e538:	f000 80f2 	beq.w	800e720 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e53e:	2b01      	cmp	r3, #1
 800e540:	d104      	bne.n	800e54c <f_write+0xfc>
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	2202      	movs	r2, #2
 800e546:	755a      	strb	r2, [r3, #21]
 800e548:	2302      	movs	r3, #2
 800e54a:	e0f2      	b.n	800e732 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e54e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e552:	d104      	bne.n	800e55e <f_write+0x10e>
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	2201      	movs	r2, #1
 800e558:	755a      	strb	r2, [r3, #21]
 800e55a:	2301      	movs	r3, #1
 800e55c:	e0e9      	b.n	800e732 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e562:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	689b      	ldr	r3, [r3, #8]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d102      	bne.n	800e572 <f_write+0x122>
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e570:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	7d1b      	ldrb	r3, [r3, #20]
 800e576:	b25b      	sxtb	r3, r3
 800e578:	2b00      	cmp	r3, #0
 800e57a:	da18      	bge.n	800e5ae <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e57c:	693b      	ldr	r3, [r7, #16]
 800e57e:	7858      	ldrb	r0, [r3, #1]
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	6a1a      	ldr	r2, [r3, #32]
 800e58a:	2301      	movs	r3, #1
 800e58c:	f7fd fab8 	bl	800bb00 <disk_write>
 800e590:	4603      	mov	r3, r0
 800e592:	2b00      	cmp	r3, #0
 800e594:	d004      	beq.n	800e5a0 <f_write+0x150>
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	2201      	movs	r2, #1
 800e59a:	755a      	strb	r2, [r3, #21]
 800e59c:	2301      	movs	r3, #1
 800e59e:	e0c8      	b.n	800e732 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	7d1b      	ldrb	r3, [r3, #20]
 800e5a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5a8:	b2da      	uxtb	r2, r3
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e5ae:	693a      	ldr	r2, [r7, #16]
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	69db      	ldr	r3, [r3, #28]
 800e5b4:	4619      	mov	r1, r3
 800e5b6:	4610      	mov	r0, r2
 800e5b8:	f7fd fe2c 	bl	800c214 <clust2sect>
 800e5bc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d104      	bne.n	800e5ce <f_write+0x17e>
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	2202      	movs	r2, #2
 800e5c8:	755a      	strb	r2, [r3, #21]
 800e5ca:	2302      	movs	r3, #2
 800e5cc:	e0b1      	b.n	800e732 <f_write+0x2e2>
			sect += csect;
 800e5ce:	697a      	ldr	r2, [r7, #20]
 800e5d0:	69bb      	ldr	r3, [r7, #24]
 800e5d2:	4413      	add	r3, r2
 800e5d4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	0a5b      	lsrs	r3, r3, #9
 800e5da:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e5dc:	6a3b      	ldr	r3, [r7, #32]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d03c      	beq.n	800e65c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e5e2:	69ba      	ldr	r2, [r7, #24]
 800e5e4:	6a3b      	ldr	r3, [r7, #32]
 800e5e6:	4413      	add	r3, r2
 800e5e8:	693a      	ldr	r2, [r7, #16]
 800e5ea:	8952      	ldrh	r2, [r2, #10]
 800e5ec:	4293      	cmp	r3, r2
 800e5ee:	d905      	bls.n	800e5fc <f_write+0x1ac>
					cc = fs->csize - csect;
 800e5f0:	693b      	ldr	r3, [r7, #16]
 800e5f2:	895b      	ldrh	r3, [r3, #10]
 800e5f4:	461a      	mov	r2, r3
 800e5f6:	69bb      	ldr	r3, [r7, #24]
 800e5f8:	1ad3      	subs	r3, r2, r3
 800e5fa:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e5fc:	693b      	ldr	r3, [r7, #16]
 800e5fe:	7858      	ldrb	r0, [r3, #1]
 800e600:	6a3b      	ldr	r3, [r7, #32]
 800e602:	697a      	ldr	r2, [r7, #20]
 800e604:	69f9      	ldr	r1, [r7, #28]
 800e606:	f7fd fa7b 	bl	800bb00 <disk_write>
 800e60a:	4603      	mov	r3, r0
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d004      	beq.n	800e61a <f_write+0x1ca>
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	2201      	movs	r2, #1
 800e614:	755a      	strb	r2, [r3, #21]
 800e616:	2301      	movs	r3, #1
 800e618:	e08b      	b.n	800e732 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	6a1a      	ldr	r2, [r3, #32]
 800e61e:	697b      	ldr	r3, [r7, #20]
 800e620:	1ad3      	subs	r3, r2, r3
 800e622:	6a3a      	ldr	r2, [r7, #32]
 800e624:	429a      	cmp	r2, r3
 800e626:	d915      	bls.n	800e654 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	6a1a      	ldr	r2, [r3, #32]
 800e632:	697b      	ldr	r3, [r7, #20]
 800e634:	1ad3      	subs	r3, r2, r3
 800e636:	025b      	lsls	r3, r3, #9
 800e638:	69fa      	ldr	r2, [r7, #28]
 800e63a:	4413      	add	r3, r2
 800e63c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e640:	4619      	mov	r1, r3
 800e642:	f7fd fb1d 	bl	800bc80 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	7d1b      	ldrb	r3, [r3, #20]
 800e64a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e64e:	b2da      	uxtb	r2, r3
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e654:	6a3b      	ldr	r3, [r7, #32]
 800e656:	025b      	lsls	r3, r3, #9
 800e658:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800e65a:	e03f      	b.n	800e6dc <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	6a1b      	ldr	r3, [r3, #32]
 800e660:	697a      	ldr	r2, [r7, #20]
 800e662:	429a      	cmp	r2, r3
 800e664:	d016      	beq.n	800e694 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	699a      	ldr	r2, [r3, #24]
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e66e:	429a      	cmp	r2, r3
 800e670:	d210      	bcs.n	800e694 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e672:	693b      	ldr	r3, [r7, #16]
 800e674:	7858      	ldrb	r0, [r3, #1]
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e67c:	2301      	movs	r3, #1
 800e67e:	697a      	ldr	r2, [r7, #20]
 800e680:	f7fd fa1e 	bl	800bac0 <disk_read>
 800e684:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e686:	2b00      	cmp	r3, #0
 800e688:	d004      	beq.n	800e694 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	2201      	movs	r2, #1
 800e68e:	755a      	strb	r2, [r3, #21]
 800e690:	2301      	movs	r3, #1
 800e692:	e04e      	b.n	800e732 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	697a      	ldr	r2, [r7, #20]
 800e698:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	699b      	ldr	r3, [r3, #24]
 800e69e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6a2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e6a6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e6a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	429a      	cmp	r2, r3
 800e6ae:	d901      	bls.n	800e6b4 <f_write+0x264>
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	699b      	ldr	r3, [r3, #24]
 800e6be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6c2:	4413      	add	r3, r2
 800e6c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6c6:	69f9      	ldr	r1, [r7, #28]
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	f7fd fad9 	bl	800bc80 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	7d1b      	ldrb	r3, [r3, #20]
 800e6d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e6d6:	b2da      	uxtb	r2, r3
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e6dc:	69fa      	ldr	r2, [r7, #28]
 800e6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e0:	4413      	add	r3, r2
 800e6e2:	61fb      	str	r3, [r7, #28]
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	699a      	ldr	r2, [r3, #24]
 800e6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ea:	441a      	add	r2, r3
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	619a      	str	r2, [r3, #24]
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	68da      	ldr	r2, [r3, #12]
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	699b      	ldr	r3, [r3, #24]
 800e6f8:	429a      	cmp	r2, r3
 800e6fa:	bf38      	it	cc
 800e6fc:	461a      	movcc	r2, r3
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	60da      	str	r2, [r3, #12]
 800e702:	683b      	ldr	r3, [r7, #0]
 800e704:	681a      	ldr	r2, [r3, #0]
 800e706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e708:	441a      	add	r2, r3
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	601a      	str	r2, [r3, #0]
 800e70e:	687a      	ldr	r2, [r7, #4]
 800e710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e712:	1ad3      	subs	r3, r2, r3
 800e714:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	f47f aed4 	bne.w	800e4c6 <f_write+0x76>
 800e71e:	e000      	b.n	800e722 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e720:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	7d1b      	ldrb	r3, [r3, #20]
 800e726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e72a:	b2da      	uxtb	r2, r3
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e730:	2300      	movs	r3, #0
}
 800e732:	4618      	mov	r0, r3
 800e734:	3730      	adds	r7, #48	; 0x30
 800e736:	46bd      	mov	sp, r7
 800e738:	bd80      	pop	{r7, pc}

0800e73a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e73a:	b580      	push	{r7, lr}
 800e73c:	b086      	sub	sp, #24
 800e73e:	af00      	add	r7, sp, #0
 800e740:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	f107 0208 	add.w	r2, r7, #8
 800e748:	4611      	mov	r1, r2
 800e74a:	4618      	mov	r0, r3
 800e74c:	f7ff fc46 	bl	800dfdc <validate>
 800e750:	4603      	mov	r3, r0
 800e752:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e754:	7dfb      	ldrb	r3, [r7, #23]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d168      	bne.n	800e82c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	7d1b      	ldrb	r3, [r3, #20]
 800e75e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e762:	2b00      	cmp	r3, #0
 800e764:	d062      	beq.n	800e82c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	7d1b      	ldrb	r3, [r3, #20]
 800e76a:	b25b      	sxtb	r3, r3
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	da15      	bge.n	800e79c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	7858      	ldrb	r0, [r3, #1]
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	6a1a      	ldr	r2, [r3, #32]
 800e77e:	2301      	movs	r3, #1
 800e780:	f7fd f9be 	bl	800bb00 <disk_write>
 800e784:	4603      	mov	r3, r0
 800e786:	2b00      	cmp	r3, #0
 800e788:	d001      	beq.n	800e78e <f_sync+0x54>
 800e78a:	2301      	movs	r3, #1
 800e78c:	e04f      	b.n	800e82e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	7d1b      	ldrb	r3, [r3, #20]
 800e792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e796:	b2da      	uxtb	r2, r3
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e79c:	f7fa ff22 	bl	80095e4 <get_fattime>
 800e7a0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e7a2:	68ba      	ldr	r2, [r7, #8]
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7a8:	4619      	mov	r1, r3
 800e7aa:	4610      	mov	r0, r2
 800e7ac:	f7fd fc96 	bl	800c0dc <move_window>
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e7b4:	7dfb      	ldrb	r3, [r7, #23]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d138      	bne.n	800e82c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7be:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	330b      	adds	r3, #11
 800e7c4:	781a      	ldrb	r2, [r3, #0]
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	330b      	adds	r3, #11
 800e7ca:	f042 0220 	orr.w	r2, r2, #32
 800e7ce:	b2d2      	uxtb	r2, r2
 800e7d0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	6818      	ldr	r0, [r3, #0]
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	689b      	ldr	r3, [r3, #8]
 800e7da:	461a      	mov	r2, r3
 800e7dc:	68f9      	ldr	r1, [r7, #12]
 800e7de:	f7fe f9a1 	bl	800cb24 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	f103 021c 	add.w	r2, r3, #28
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	68db      	ldr	r3, [r3, #12]
 800e7ec:	4619      	mov	r1, r3
 800e7ee:	4610      	mov	r0, r2
 800e7f0:	f7fd fa1a 	bl	800bc28 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	3316      	adds	r3, #22
 800e7f8:	6939      	ldr	r1, [r7, #16]
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	f7fd fa14 	bl	800bc28 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	3312      	adds	r3, #18
 800e804:	2100      	movs	r1, #0
 800e806:	4618      	mov	r0, r3
 800e808:	f7fd f9f3 	bl	800bbf2 <st_word>
					fs->wflag = 1;
 800e80c:	68bb      	ldr	r3, [r7, #8]
 800e80e:	2201      	movs	r2, #1
 800e810:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	4618      	mov	r0, r3
 800e816:	f7fd fc8f 	bl	800c138 <sync_fs>
 800e81a:	4603      	mov	r3, r0
 800e81c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	7d1b      	ldrb	r3, [r3, #20]
 800e822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e826:	b2da      	uxtb	r2, r3
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e82c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e82e:	4618      	mov	r0, r3
 800e830:	3718      	adds	r7, #24
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}

0800e836 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e836:	b580      	push	{r7, lr}
 800e838:	b084      	sub	sp, #16
 800e83a:	af00      	add	r7, sp, #0
 800e83c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e83e:	6878      	ldr	r0, [r7, #4]
 800e840:	f7ff ff7b 	bl	800e73a <f_sync>
 800e844:	4603      	mov	r3, r0
 800e846:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e848:	7bfb      	ldrb	r3, [r7, #15]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d118      	bne.n	800e880 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	f107 0208 	add.w	r2, r7, #8
 800e854:	4611      	mov	r1, r2
 800e856:	4618      	mov	r0, r3
 800e858:	f7ff fbc0 	bl	800dfdc <validate>
 800e85c:	4603      	mov	r3, r0
 800e85e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e860:	7bfb      	ldrb	r3, [r7, #15]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d10c      	bne.n	800e880 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	691b      	ldr	r3, [r3, #16]
 800e86a:	4618      	mov	r0, r3
 800e86c:	f7fd fb92 	bl	800bf94 <dec_lock>
 800e870:	4603      	mov	r3, r0
 800e872:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e874:	7bfb      	ldrb	r3, [r7, #15]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d102      	bne.n	800e880 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	2200      	movs	r2, #0
 800e87e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e880:	7bfb      	ldrb	r3, [r7, #15]
}
 800e882:	4618      	mov	r0, r3
 800e884:	3710      	adds	r7, #16
 800e886:	46bd      	mov	sp, r7
 800e888:	bd80      	pop	{r7, pc}

0800e88a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800e88a:	b580      	push	{r7, lr}
 800e88c:	b086      	sub	sp, #24
 800e88e:	af00      	add	r7, sp, #0
 800e890:	6078      	str	r0, [r7, #4]
 800e892:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d101      	bne.n	800e89e <f_opendir+0x14>
 800e89a:	2309      	movs	r3, #9
 800e89c:	e064      	b.n	800e968 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800e8a2:	f107 010c 	add.w	r1, r7, #12
 800e8a6:	463b      	mov	r3, r7
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f7ff f946 	bl	800db3c <find_volume>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e8b4:	7dfb      	ldrb	r3, [r7, #23]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d14f      	bne.n	800e95a <f_opendir+0xd0>
		obj->fs = fs;
 800e8ba:	68fa      	ldr	r2, [r7, #12]
 800e8bc:	693b      	ldr	r3, [r7, #16]
 800e8be:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	4619      	mov	r1, r3
 800e8c4:	6878      	ldr	r0, [r7, #4]
 800e8c6:	f7ff f82d 	bl	800d924 <follow_path>
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800e8ce:	7dfb      	ldrb	r3, [r7, #23]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d13d      	bne.n	800e950 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e8da:	b25b      	sxtb	r3, r3
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	db12      	blt.n	800e906 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800e8e0:	693b      	ldr	r3, [r7, #16]
 800e8e2:	799b      	ldrb	r3, [r3, #6]
 800e8e4:	f003 0310 	and.w	r3, r3, #16
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d00a      	beq.n	800e902 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800e8ec:	68fa      	ldr	r2, [r7, #12]
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	6a1b      	ldr	r3, [r3, #32]
 800e8f2:	4619      	mov	r1, r3
 800e8f4:	4610      	mov	r0, r2
 800e8f6:	f7fe f8f6 	bl	800cae6 <ld_clust>
 800e8fa:	4602      	mov	r2, r0
 800e8fc:	693b      	ldr	r3, [r7, #16]
 800e8fe:	609a      	str	r2, [r3, #8]
 800e900:	e001      	b.n	800e906 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800e902:	2305      	movs	r3, #5
 800e904:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800e906:	7dfb      	ldrb	r3, [r7, #23]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d121      	bne.n	800e950 <f_opendir+0xc6>
				obj->id = fs->id;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	88da      	ldrh	r2, [r3, #6]
 800e910:	693b      	ldr	r3, [r7, #16]
 800e912:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800e914:	2100      	movs	r1, #0
 800e916:	6878      	ldr	r0, [r7, #4]
 800e918:	f7fd ff5e 	bl	800c7d8 <dir_sdi>
 800e91c:	4603      	mov	r3, r0
 800e91e:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800e920:	7dfb      	ldrb	r3, [r7, #23]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d114      	bne.n	800e950 <f_opendir+0xc6>
					if (obj->sclust) {
 800e926:	693b      	ldr	r3, [r7, #16]
 800e928:	689b      	ldr	r3, [r3, #8]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d00d      	beq.n	800e94a <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800e92e:	2100      	movs	r1, #0
 800e930:	6878      	ldr	r0, [r7, #4]
 800e932:	f7fd faa1 	bl	800be78 <inc_lock>
 800e936:	4602      	mov	r2, r0
 800e938:	693b      	ldr	r3, [r7, #16]
 800e93a:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800e93c:	693b      	ldr	r3, [r7, #16]
 800e93e:	691b      	ldr	r3, [r3, #16]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d105      	bne.n	800e950 <f_opendir+0xc6>
 800e944:	2312      	movs	r3, #18
 800e946:	75fb      	strb	r3, [r7, #23]
 800e948:	e002      	b.n	800e950 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800e94a:	693b      	ldr	r3, [r7, #16]
 800e94c:	2200      	movs	r2, #0
 800e94e:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800e950:	7dfb      	ldrb	r3, [r7, #23]
 800e952:	2b04      	cmp	r3, #4
 800e954:	d101      	bne.n	800e95a <f_opendir+0xd0>
 800e956:	2305      	movs	r3, #5
 800e958:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800e95a:	7dfb      	ldrb	r3, [r7, #23]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d002      	beq.n	800e966 <f_opendir+0xdc>
 800e960:	693b      	ldr	r3, [r7, #16]
 800e962:	2200      	movs	r2, #0
 800e964:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e966:	7dfb      	ldrb	r3, [r7, #23]
}
 800e968:	4618      	mov	r0, r3
 800e96a:	3718      	adds	r7, #24
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}

0800e970 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b084      	sub	sp, #16
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	f107 0208 	add.w	r2, r7, #8
 800e97e:	4611      	mov	r1, r2
 800e980:	4618      	mov	r0, r3
 800e982:	f7ff fb2b 	bl	800dfdc <validate>
 800e986:	4603      	mov	r3, r0
 800e988:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e98a:	7bfb      	ldrb	r3, [r7, #15]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d110      	bne.n	800e9b2 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	691b      	ldr	r3, [r3, #16]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d006      	beq.n	800e9a6 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	691b      	ldr	r3, [r3, #16]
 800e99c:	4618      	mov	r0, r3
 800e99e:	f7fd faf9 	bl	800bf94 <dec_lock>
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800e9a6:	7bfb      	ldrb	r3, [r7, #15]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d102      	bne.n	800e9b2 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800e9b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	3710      	adds	r7, #16
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}

0800e9bc <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b084      	sub	sp, #16
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
 800e9c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	f107 0208 	add.w	r2, r7, #8
 800e9cc:	4611      	mov	r1, r2
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	f7ff fb04 	bl	800dfdc <validate>
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e9d8:	7bfb      	ldrb	r3, [r7, #15]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d126      	bne.n	800ea2c <f_readdir+0x70>
		if (!fno) {
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d106      	bne.n	800e9f2 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800e9e4:	2100      	movs	r1, #0
 800e9e6:	6878      	ldr	r0, [r7, #4]
 800e9e8:	f7fd fef6 	bl	800c7d8 <dir_sdi>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	73fb      	strb	r3, [r7, #15]
 800e9f0:	e01c      	b.n	800ea2c <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800e9f2:	2100      	movs	r1, #0
 800e9f4:	6878      	ldr	r0, [r7, #4]
 800e9f6:	f7fe faa0 	bl	800cf3a <dir_read>
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800e9fe:	7bfb      	ldrb	r3, [r7, #15]
 800ea00:	2b04      	cmp	r3, #4
 800ea02:	d101      	bne.n	800ea08 <f_readdir+0x4c>
 800ea04:	2300      	movs	r3, #0
 800ea06:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800ea08:	7bfb      	ldrb	r3, [r7, #15]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d10e      	bne.n	800ea2c <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800ea0e:	6839      	ldr	r1, [r7, #0]
 800ea10:	6878      	ldr	r0, [r7, #4]
 800ea12:	f7fe fcf1 	bl	800d3f8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800ea16:	2100      	movs	r1, #0
 800ea18:	6878      	ldr	r0, [r7, #4]
 800ea1a:	f7fd ff58 	bl	800c8ce <dir_next>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800ea22:	7bfb      	ldrb	r3, [r7, #15]
 800ea24:	2b04      	cmp	r3, #4
 800ea26:	d101      	bne.n	800ea2c <f_readdir+0x70>
 800ea28:	2300      	movs	r3, #0
 800ea2a:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800ea2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	3710      	adds	r7, #16
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}
	...

0800ea38 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ea38:	b480      	push	{r7}
 800ea3a:	b087      	sub	sp, #28
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	60f8      	str	r0, [r7, #12]
 800ea40:	60b9      	str	r1, [r7, #8]
 800ea42:	4613      	mov	r3, r2
 800ea44:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ea46:	2301      	movs	r3, #1
 800ea48:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ea4e:	4b1f      	ldr	r3, [pc, #124]	; (800eacc <FATFS_LinkDriverEx+0x94>)
 800ea50:	7a5b      	ldrb	r3, [r3, #9]
 800ea52:	b2db      	uxtb	r3, r3
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d131      	bne.n	800eabc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ea58:	4b1c      	ldr	r3, [pc, #112]	; (800eacc <FATFS_LinkDriverEx+0x94>)
 800ea5a:	7a5b      	ldrb	r3, [r3, #9]
 800ea5c:	b2db      	uxtb	r3, r3
 800ea5e:	461a      	mov	r2, r3
 800ea60:	4b1a      	ldr	r3, [pc, #104]	; (800eacc <FATFS_LinkDriverEx+0x94>)
 800ea62:	2100      	movs	r1, #0
 800ea64:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ea66:	4b19      	ldr	r3, [pc, #100]	; (800eacc <FATFS_LinkDriverEx+0x94>)
 800ea68:	7a5b      	ldrb	r3, [r3, #9]
 800ea6a:	b2db      	uxtb	r3, r3
 800ea6c:	4a17      	ldr	r2, [pc, #92]	; (800eacc <FATFS_LinkDriverEx+0x94>)
 800ea6e:	009b      	lsls	r3, r3, #2
 800ea70:	4413      	add	r3, r2
 800ea72:	68fa      	ldr	r2, [r7, #12]
 800ea74:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ea76:	4b15      	ldr	r3, [pc, #84]	; (800eacc <FATFS_LinkDriverEx+0x94>)
 800ea78:	7a5b      	ldrb	r3, [r3, #9]
 800ea7a:	b2db      	uxtb	r3, r3
 800ea7c:	461a      	mov	r2, r3
 800ea7e:	4b13      	ldr	r3, [pc, #76]	; (800eacc <FATFS_LinkDriverEx+0x94>)
 800ea80:	4413      	add	r3, r2
 800ea82:	79fa      	ldrb	r2, [r7, #7]
 800ea84:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ea86:	4b11      	ldr	r3, [pc, #68]	; (800eacc <FATFS_LinkDriverEx+0x94>)
 800ea88:	7a5b      	ldrb	r3, [r3, #9]
 800ea8a:	b2db      	uxtb	r3, r3
 800ea8c:	1c5a      	adds	r2, r3, #1
 800ea8e:	b2d1      	uxtb	r1, r2
 800ea90:	4a0e      	ldr	r2, [pc, #56]	; (800eacc <FATFS_LinkDriverEx+0x94>)
 800ea92:	7251      	strb	r1, [r2, #9]
 800ea94:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ea96:	7dbb      	ldrb	r3, [r7, #22]
 800ea98:	3330      	adds	r3, #48	; 0x30
 800ea9a:	b2da      	uxtb	r2, r3
 800ea9c:	68bb      	ldr	r3, [r7, #8]
 800ea9e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	3301      	adds	r3, #1
 800eaa4:	223a      	movs	r2, #58	; 0x3a
 800eaa6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800eaa8:	68bb      	ldr	r3, [r7, #8]
 800eaaa:	3302      	adds	r3, #2
 800eaac:	222f      	movs	r2, #47	; 0x2f
 800eaae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	3303      	adds	r3, #3
 800eab4:	2200      	movs	r2, #0
 800eab6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800eab8:	2300      	movs	r3, #0
 800eaba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800eabc:	7dfb      	ldrb	r3, [r7, #23]
}
 800eabe:	4618      	mov	r0, r3
 800eac0:	371c      	adds	r7, #28
 800eac2:	46bd      	mov	sp, r7
 800eac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac8:	4770      	bx	lr
 800eaca:	bf00      	nop
 800eacc:	200034dc 	.word	0x200034dc

0800ead0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b082      	sub	sp, #8
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800eada:	2200      	movs	r2, #0
 800eadc:	6839      	ldr	r1, [r7, #0]
 800eade:	6878      	ldr	r0, [r7, #4]
 800eae0:	f7ff ffaa 	bl	800ea38 <FATFS_LinkDriverEx>
 800eae4:	4603      	mov	r3, r0
}
 800eae6:	4618      	mov	r0, r3
 800eae8:	3708      	adds	r7, #8
 800eaea:	46bd      	mov	sp, r7
 800eaec:	bd80      	pop	{r7, pc}
	...

0800eaf0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800eaf0:	b480      	push	{r7}
 800eaf2:	b085      	sub	sp, #20
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	6039      	str	r1, [r7, #0]
 800eafa:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800eafc:	88fb      	ldrh	r3, [r7, #6]
 800eafe:	2b7f      	cmp	r3, #127	; 0x7f
 800eb00:	d802      	bhi.n	800eb08 <ff_convert+0x18>
		c = chr;
 800eb02:	88fb      	ldrh	r3, [r7, #6]
 800eb04:	81fb      	strh	r3, [r7, #14]
 800eb06:	e025      	b.n	800eb54 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d00b      	beq.n	800eb26 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800eb0e:	88fb      	ldrh	r3, [r7, #6]
 800eb10:	2bff      	cmp	r3, #255	; 0xff
 800eb12:	d805      	bhi.n	800eb20 <ff_convert+0x30>
 800eb14:	88fb      	ldrh	r3, [r7, #6]
 800eb16:	3b80      	subs	r3, #128	; 0x80
 800eb18:	4a12      	ldr	r2, [pc, #72]	; (800eb64 <ff_convert+0x74>)
 800eb1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eb1e:	e000      	b.n	800eb22 <ff_convert+0x32>
 800eb20:	2300      	movs	r3, #0
 800eb22:	81fb      	strh	r3, [r7, #14]
 800eb24:	e016      	b.n	800eb54 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800eb26:	2300      	movs	r3, #0
 800eb28:	81fb      	strh	r3, [r7, #14]
 800eb2a:	e009      	b.n	800eb40 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800eb2c:	89fb      	ldrh	r3, [r7, #14]
 800eb2e:	4a0d      	ldr	r2, [pc, #52]	; (800eb64 <ff_convert+0x74>)
 800eb30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eb34:	88fa      	ldrh	r2, [r7, #6]
 800eb36:	429a      	cmp	r2, r3
 800eb38:	d006      	beq.n	800eb48 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800eb3a:	89fb      	ldrh	r3, [r7, #14]
 800eb3c:	3301      	adds	r3, #1
 800eb3e:	81fb      	strh	r3, [r7, #14]
 800eb40:	89fb      	ldrh	r3, [r7, #14]
 800eb42:	2b7f      	cmp	r3, #127	; 0x7f
 800eb44:	d9f2      	bls.n	800eb2c <ff_convert+0x3c>
 800eb46:	e000      	b.n	800eb4a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800eb48:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800eb4a:	89fb      	ldrh	r3, [r7, #14]
 800eb4c:	3380      	adds	r3, #128	; 0x80
 800eb4e:	b29b      	uxth	r3, r3
 800eb50:	b2db      	uxtb	r3, r3
 800eb52:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800eb54:	89fb      	ldrh	r3, [r7, #14]
}
 800eb56:	4618      	mov	r0, r3
 800eb58:	3714      	adds	r7, #20
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb60:	4770      	bx	lr
 800eb62:	bf00      	nop
 800eb64:	08010e54 	.word	0x08010e54

0800eb68 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800eb68:	b480      	push	{r7}
 800eb6a:	b087      	sub	sp, #28
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	4603      	mov	r3, r0
 800eb70:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800eb72:	88fb      	ldrh	r3, [r7, #6]
 800eb74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eb78:	d201      	bcs.n	800eb7e <ff_wtoupper+0x16>
 800eb7a:	4b3e      	ldr	r3, [pc, #248]	; (800ec74 <ff_wtoupper+0x10c>)
 800eb7c:	e000      	b.n	800eb80 <ff_wtoupper+0x18>
 800eb7e:	4b3e      	ldr	r3, [pc, #248]	; (800ec78 <ff_wtoupper+0x110>)
 800eb80:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800eb82:	697b      	ldr	r3, [r7, #20]
 800eb84:	1c9a      	adds	r2, r3, #2
 800eb86:	617a      	str	r2, [r7, #20]
 800eb88:	881b      	ldrh	r3, [r3, #0]
 800eb8a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800eb8c:	8a7b      	ldrh	r3, [r7, #18]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d068      	beq.n	800ec64 <ff_wtoupper+0xfc>
 800eb92:	88fa      	ldrh	r2, [r7, #6]
 800eb94:	8a7b      	ldrh	r3, [r7, #18]
 800eb96:	429a      	cmp	r2, r3
 800eb98:	d364      	bcc.n	800ec64 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800eb9a:	697b      	ldr	r3, [r7, #20]
 800eb9c:	1c9a      	adds	r2, r3, #2
 800eb9e:	617a      	str	r2, [r7, #20]
 800eba0:	881b      	ldrh	r3, [r3, #0]
 800eba2:	823b      	strh	r3, [r7, #16]
 800eba4:	8a3b      	ldrh	r3, [r7, #16]
 800eba6:	0a1b      	lsrs	r3, r3, #8
 800eba8:	81fb      	strh	r3, [r7, #14]
 800ebaa:	8a3b      	ldrh	r3, [r7, #16]
 800ebac:	b2db      	uxtb	r3, r3
 800ebae:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ebb0:	88fa      	ldrh	r2, [r7, #6]
 800ebb2:	8a79      	ldrh	r1, [r7, #18]
 800ebb4:	8a3b      	ldrh	r3, [r7, #16]
 800ebb6:	440b      	add	r3, r1
 800ebb8:	429a      	cmp	r2, r3
 800ebba:	da49      	bge.n	800ec50 <ff_wtoupper+0xe8>
			switch (cmd) {
 800ebbc:	89fb      	ldrh	r3, [r7, #14]
 800ebbe:	2b08      	cmp	r3, #8
 800ebc0:	d84f      	bhi.n	800ec62 <ff_wtoupper+0xfa>
 800ebc2:	a201      	add	r2, pc, #4	; (adr r2, 800ebc8 <ff_wtoupper+0x60>)
 800ebc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebc8:	0800ebed 	.word	0x0800ebed
 800ebcc:	0800ebff 	.word	0x0800ebff
 800ebd0:	0800ec15 	.word	0x0800ec15
 800ebd4:	0800ec1d 	.word	0x0800ec1d
 800ebd8:	0800ec25 	.word	0x0800ec25
 800ebdc:	0800ec2d 	.word	0x0800ec2d
 800ebe0:	0800ec35 	.word	0x0800ec35
 800ebe4:	0800ec3d 	.word	0x0800ec3d
 800ebe8:	0800ec45 	.word	0x0800ec45
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ebec:	88fa      	ldrh	r2, [r7, #6]
 800ebee:	8a7b      	ldrh	r3, [r7, #18]
 800ebf0:	1ad3      	subs	r3, r2, r3
 800ebf2:	005b      	lsls	r3, r3, #1
 800ebf4:	697a      	ldr	r2, [r7, #20]
 800ebf6:	4413      	add	r3, r2
 800ebf8:	881b      	ldrh	r3, [r3, #0]
 800ebfa:	80fb      	strh	r3, [r7, #6]
 800ebfc:	e027      	b.n	800ec4e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ebfe:	88fa      	ldrh	r2, [r7, #6]
 800ec00:	8a7b      	ldrh	r3, [r7, #18]
 800ec02:	1ad3      	subs	r3, r2, r3
 800ec04:	b29b      	uxth	r3, r3
 800ec06:	f003 0301 	and.w	r3, r3, #1
 800ec0a:	b29b      	uxth	r3, r3
 800ec0c:	88fa      	ldrh	r2, [r7, #6]
 800ec0e:	1ad3      	subs	r3, r2, r3
 800ec10:	80fb      	strh	r3, [r7, #6]
 800ec12:	e01c      	b.n	800ec4e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800ec14:	88fb      	ldrh	r3, [r7, #6]
 800ec16:	3b10      	subs	r3, #16
 800ec18:	80fb      	strh	r3, [r7, #6]
 800ec1a:	e018      	b.n	800ec4e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800ec1c:	88fb      	ldrh	r3, [r7, #6]
 800ec1e:	3b20      	subs	r3, #32
 800ec20:	80fb      	strh	r3, [r7, #6]
 800ec22:	e014      	b.n	800ec4e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ec24:	88fb      	ldrh	r3, [r7, #6]
 800ec26:	3b30      	subs	r3, #48	; 0x30
 800ec28:	80fb      	strh	r3, [r7, #6]
 800ec2a:	e010      	b.n	800ec4e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ec2c:	88fb      	ldrh	r3, [r7, #6]
 800ec2e:	3b1a      	subs	r3, #26
 800ec30:	80fb      	strh	r3, [r7, #6]
 800ec32:	e00c      	b.n	800ec4e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800ec34:	88fb      	ldrh	r3, [r7, #6]
 800ec36:	3308      	adds	r3, #8
 800ec38:	80fb      	strh	r3, [r7, #6]
 800ec3a:	e008      	b.n	800ec4e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800ec3c:	88fb      	ldrh	r3, [r7, #6]
 800ec3e:	3b50      	subs	r3, #80	; 0x50
 800ec40:	80fb      	strh	r3, [r7, #6]
 800ec42:	e004      	b.n	800ec4e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ec44:	88fb      	ldrh	r3, [r7, #6]
 800ec46:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800ec4a:	80fb      	strh	r3, [r7, #6]
 800ec4c:	bf00      	nop
			}
			break;
 800ec4e:	e008      	b.n	800ec62 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800ec50:	89fb      	ldrh	r3, [r7, #14]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d195      	bne.n	800eb82 <ff_wtoupper+0x1a>
 800ec56:	8a3b      	ldrh	r3, [r7, #16]
 800ec58:	005b      	lsls	r3, r3, #1
 800ec5a:	697a      	ldr	r2, [r7, #20]
 800ec5c:	4413      	add	r3, r2
 800ec5e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ec60:	e78f      	b.n	800eb82 <ff_wtoupper+0x1a>
			break;
 800ec62:	bf00      	nop
	}

	return chr;
 800ec64:	88fb      	ldrh	r3, [r7, #6]
}
 800ec66:	4618      	mov	r0, r3
 800ec68:	371c      	adds	r7, #28
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec70:	4770      	bx	lr
 800ec72:	bf00      	nop
 800ec74:	08010f54 	.word	0x08010f54
 800ec78:	08011148 	.word	0x08011148

0800ec7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ec80:	2200      	movs	r2, #0
 800ec82:	4912      	ldr	r1, [pc, #72]	; (800eccc <MX_USB_DEVICE_Init+0x50>)
 800ec84:	4812      	ldr	r0, [pc, #72]	; (800ecd0 <MX_USB_DEVICE_Init+0x54>)
 800ec86:	f7fb fbbf 	bl	800a408 <USBD_Init>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d001      	beq.n	800ec94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ec90:	f7f2 f934 	bl	8000efc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ec94:	490f      	ldr	r1, [pc, #60]	; (800ecd4 <MX_USB_DEVICE_Init+0x58>)
 800ec96:	480e      	ldr	r0, [pc, #56]	; (800ecd0 <MX_USB_DEVICE_Init+0x54>)
 800ec98:	f7fb fbe6 	bl	800a468 <USBD_RegisterClass>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d001      	beq.n	800eca6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800eca2:	f7f2 f92b 	bl	8000efc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800eca6:	490c      	ldr	r1, [pc, #48]	; (800ecd8 <MX_USB_DEVICE_Init+0x5c>)
 800eca8:	4809      	ldr	r0, [pc, #36]	; (800ecd0 <MX_USB_DEVICE_Init+0x54>)
 800ecaa:	f7fb fadd 	bl	800a268 <USBD_CDC_RegisterInterface>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d001      	beq.n	800ecb8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ecb4:	f7f2 f922 	bl	8000efc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ecb8:	4805      	ldr	r0, [pc, #20]	; (800ecd0 <MX_USB_DEVICE_Init+0x54>)
 800ecba:	f7fb fc0b 	bl	800a4d4 <USBD_Start>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d001      	beq.n	800ecc8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ecc4:	f7f2 f91a 	bl	8000efc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ecc8:	bf00      	nop
 800ecca:	bd80      	pop	{r7, pc}
 800eccc:	200000ac 	.word	0x200000ac
 800ecd0:	200034e8 	.word	0x200034e8
 800ecd4:	20000018 	.word	0x20000018
 800ecd8:	20000098 	.word	0x20000098

0800ecdc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ece0:	2200      	movs	r2, #0
 800ece2:	4905      	ldr	r1, [pc, #20]	; (800ecf8 <CDC_Init_FS+0x1c>)
 800ece4:	4805      	ldr	r0, [pc, #20]	; (800ecfc <CDC_Init_FS+0x20>)
 800ece6:	f7fb fad9 	bl	800a29c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ecea:	4905      	ldr	r1, [pc, #20]	; (800ed00 <CDC_Init_FS+0x24>)
 800ecec:	4803      	ldr	r0, [pc, #12]	; (800ecfc <CDC_Init_FS+0x20>)
 800ecee:	f7fb faf7 	bl	800a2e0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ecf2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	bd80      	pop	{r7, pc}
 800ecf8:	20003fc4 	.word	0x20003fc4
 800ecfc:	200034e8 	.word	0x200034e8
 800ed00:	200037c4 	.word	0x200037c4

0800ed04 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ed04:	b480      	push	{r7}
 800ed06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ed08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed12:	4770      	bx	lr

0800ed14 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ed14:	b480      	push	{r7}
 800ed16:	b083      	sub	sp, #12
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	6039      	str	r1, [r7, #0]
 800ed1e:	71fb      	strb	r3, [r7, #7]
 800ed20:	4613      	mov	r3, r2
 800ed22:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ed24:	79fb      	ldrb	r3, [r7, #7]
 800ed26:	2b23      	cmp	r3, #35	; 0x23
 800ed28:	d84a      	bhi.n	800edc0 <CDC_Control_FS+0xac>
 800ed2a:	a201      	add	r2, pc, #4	; (adr r2, 800ed30 <CDC_Control_FS+0x1c>)
 800ed2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed30:	0800edc1 	.word	0x0800edc1
 800ed34:	0800edc1 	.word	0x0800edc1
 800ed38:	0800edc1 	.word	0x0800edc1
 800ed3c:	0800edc1 	.word	0x0800edc1
 800ed40:	0800edc1 	.word	0x0800edc1
 800ed44:	0800edc1 	.word	0x0800edc1
 800ed48:	0800edc1 	.word	0x0800edc1
 800ed4c:	0800edc1 	.word	0x0800edc1
 800ed50:	0800edc1 	.word	0x0800edc1
 800ed54:	0800edc1 	.word	0x0800edc1
 800ed58:	0800edc1 	.word	0x0800edc1
 800ed5c:	0800edc1 	.word	0x0800edc1
 800ed60:	0800edc1 	.word	0x0800edc1
 800ed64:	0800edc1 	.word	0x0800edc1
 800ed68:	0800edc1 	.word	0x0800edc1
 800ed6c:	0800edc1 	.word	0x0800edc1
 800ed70:	0800edc1 	.word	0x0800edc1
 800ed74:	0800edc1 	.word	0x0800edc1
 800ed78:	0800edc1 	.word	0x0800edc1
 800ed7c:	0800edc1 	.word	0x0800edc1
 800ed80:	0800edc1 	.word	0x0800edc1
 800ed84:	0800edc1 	.word	0x0800edc1
 800ed88:	0800edc1 	.word	0x0800edc1
 800ed8c:	0800edc1 	.word	0x0800edc1
 800ed90:	0800edc1 	.word	0x0800edc1
 800ed94:	0800edc1 	.word	0x0800edc1
 800ed98:	0800edc1 	.word	0x0800edc1
 800ed9c:	0800edc1 	.word	0x0800edc1
 800eda0:	0800edc1 	.word	0x0800edc1
 800eda4:	0800edc1 	.word	0x0800edc1
 800eda8:	0800edc1 	.word	0x0800edc1
 800edac:	0800edc1 	.word	0x0800edc1
 800edb0:	0800edc1 	.word	0x0800edc1
 800edb4:	0800edc1 	.word	0x0800edc1
 800edb8:	0800edc1 	.word	0x0800edc1
 800edbc:	0800edc1 	.word	0x0800edc1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800edc0:	bf00      	nop
  }

  return (USBD_OK);
 800edc2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800edc4:	4618      	mov	r0, r3
 800edc6:	370c      	adds	r7, #12
 800edc8:	46bd      	mov	sp, r7
 800edca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edce:	4770      	bx	lr

0800edd0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b082      	sub	sp, #8
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
 800edd8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800edda:	6879      	ldr	r1, [r7, #4]
 800eddc:	4805      	ldr	r0, [pc, #20]	; (800edf4 <CDC_Receive_FS+0x24>)
 800edde:	f7fb fa7f 	bl	800a2e0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ede2:	4804      	ldr	r0, [pc, #16]	; (800edf4 <CDC_Receive_FS+0x24>)
 800ede4:	f7fb fada 	bl	800a39c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ede8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800edea:	4618      	mov	r0, r3
 800edec:	3708      	adds	r7, #8
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}
 800edf2:	bf00      	nop
 800edf4:	200034e8 	.word	0x200034e8

0800edf8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b084      	sub	sp, #16
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
 800ee00:	460b      	mov	r3, r1
 800ee02:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ee04:	2300      	movs	r3, #0
 800ee06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ee08:	4b0d      	ldr	r3, [pc, #52]	; (800ee40 <CDC_Transmit_FS+0x48>)
 800ee0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ee0e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ee10:	68bb      	ldr	r3, [r7, #8]
 800ee12:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d001      	beq.n	800ee1e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ee1a:	2301      	movs	r3, #1
 800ee1c:	e00b      	b.n	800ee36 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ee1e:	887b      	ldrh	r3, [r7, #2]
 800ee20:	461a      	mov	r2, r3
 800ee22:	6879      	ldr	r1, [r7, #4]
 800ee24:	4806      	ldr	r0, [pc, #24]	; (800ee40 <CDC_Transmit_FS+0x48>)
 800ee26:	f7fb fa39 	bl	800a29c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ee2a:	4805      	ldr	r0, [pc, #20]	; (800ee40 <CDC_Transmit_FS+0x48>)
 800ee2c:	f7fb fa76 	bl	800a31c <USBD_CDC_TransmitPacket>
 800ee30:	4603      	mov	r3, r0
 800ee32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ee34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee36:	4618      	mov	r0, r3
 800ee38:	3710      	adds	r7, #16
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd80      	pop	{r7, pc}
 800ee3e:	bf00      	nop
 800ee40:	200034e8 	.word	0x200034e8

0800ee44 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ee44:	b480      	push	{r7}
 800ee46:	b087      	sub	sp, #28
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	60f8      	str	r0, [r7, #12]
 800ee4c:	60b9      	str	r1, [r7, #8]
 800ee4e:	4613      	mov	r3, r2
 800ee50:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ee52:	2300      	movs	r3, #0
 800ee54:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ee56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	371c      	adds	r7, #28
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee64:	4770      	bx	lr
	...

0800ee68 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee68:	b480      	push	{r7}
 800ee6a:	b083      	sub	sp, #12
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	4603      	mov	r3, r0
 800ee70:	6039      	str	r1, [r7, #0]
 800ee72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ee74:	683b      	ldr	r3, [r7, #0]
 800ee76:	2212      	movs	r2, #18
 800ee78:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ee7a:	4b03      	ldr	r3, [pc, #12]	; (800ee88 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	370c      	adds	r7, #12
 800ee80:	46bd      	mov	sp, r7
 800ee82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee86:	4770      	bx	lr
 800ee88:	200000cc 	.word	0x200000cc

0800ee8c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee8c:	b480      	push	{r7}
 800ee8e:	b083      	sub	sp, #12
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	4603      	mov	r3, r0
 800ee94:	6039      	str	r1, [r7, #0]
 800ee96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	2204      	movs	r2, #4
 800ee9c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ee9e:	4b03      	ldr	r3, [pc, #12]	; (800eeac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800eea0:	4618      	mov	r0, r3
 800eea2:	370c      	adds	r7, #12
 800eea4:	46bd      	mov	sp, r7
 800eea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeaa:	4770      	bx	lr
 800eeac:	200000ec 	.word	0x200000ec

0800eeb0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b082      	sub	sp, #8
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	6039      	str	r1, [r7, #0]
 800eeba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eebc:	79fb      	ldrb	r3, [r7, #7]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d105      	bne.n	800eece <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eec2:	683a      	ldr	r2, [r7, #0]
 800eec4:	4907      	ldr	r1, [pc, #28]	; (800eee4 <USBD_FS_ProductStrDescriptor+0x34>)
 800eec6:	4808      	ldr	r0, [pc, #32]	; (800eee8 <USBD_FS_ProductStrDescriptor+0x38>)
 800eec8:	f7fc fcda 	bl	800b880 <USBD_GetString>
 800eecc:	e004      	b.n	800eed8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eece:	683a      	ldr	r2, [r7, #0]
 800eed0:	4904      	ldr	r1, [pc, #16]	; (800eee4 <USBD_FS_ProductStrDescriptor+0x34>)
 800eed2:	4805      	ldr	r0, [pc, #20]	; (800eee8 <USBD_FS_ProductStrDescriptor+0x38>)
 800eed4:	f7fc fcd4 	bl	800b880 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eed8:	4b02      	ldr	r3, [pc, #8]	; (800eee4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800eeda:	4618      	mov	r0, r3
 800eedc:	3708      	adds	r7, #8
 800eede:	46bd      	mov	sp, r7
 800eee0:	bd80      	pop	{r7, pc}
 800eee2:	bf00      	nop
 800eee4:	200047c4 	.word	0x200047c4
 800eee8:	08010d48 	.word	0x08010d48

0800eeec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b082      	sub	sp, #8
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	4603      	mov	r3, r0
 800eef4:	6039      	str	r1, [r7, #0]
 800eef6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800eef8:	683a      	ldr	r2, [r7, #0]
 800eefa:	4904      	ldr	r1, [pc, #16]	; (800ef0c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800eefc:	4804      	ldr	r0, [pc, #16]	; (800ef10 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800eefe:	f7fc fcbf 	bl	800b880 <USBD_GetString>
  return USBD_StrDesc;
 800ef02:	4b02      	ldr	r3, [pc, #8]	; (800ef0c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ef04:	4618      	mov	r0, r3
 800ef06:	3708      	adds	r7, #8
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	bd80      	pop	{r7, pc}
 800ef0c:	200047c4 	.word	0x200047c4
 800ef10:	08010d60 	.word	0x08010d60

0800ef14 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b082      	sub	sp, #8
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	6039      	str	r1, [r7, #0]
 800ef1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ef20:	683b      	ldr	r3, [r7, #0]
 800ef22:	221a      	movs	r2, #26
 800ef24:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ef26:	f000 f855 	bl	800efd4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ef2a:	4b02      	ldr	r3, [pc, #8]	; (800ef34 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	3708      	adds	r7, #8
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd80      	pop	{r7, pc}
 800ef34:	200000f0 	.word	0x200000f0

0800ef38 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b082      	sub	sp, #8
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	4603      	mov	r3, r0
 800ef40:	6039      	str	r1, [r7, #0]
 800ef42:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ef44:	79fb      	ldrb	r3, [r7, #7]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d105      	bne.n	800ef56 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ef4a:	683a      	ldr	r2, [r7, #0]
 800ef4c:	4907      	ldr	r1, [pc, #28]	; (800ef6c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ef4e:	4808      	ldr	r0, [pc, #32]	; (800ef70 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ef50:	f7fc fc96 	bl	800b880 <USBD_GetString>
 800ef54:	e004      	b.n	800ef60 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ef56:	683a      	ldr	r2, [r7, #0]
 800ef58:	4904      	ldr	r1, [pc, #16]	; (800ef6c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ef5a:	4805      	ldr	r0, [pc, #20]	; (800ef70 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ef5c:	f7fc fc90 	bl	800b880 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ef60:	4b02      	ldr	r3, [pc, #8]	; (800ef6c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ef62:	4618      	mov	r0, r3
 800ef64:	3708      	adds	r7, #8
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bd80      	pop	{r7, pc}
 800ef6a:	bf00      	nop
 800ef6c:	200047c4 	.word	0x200047c4
 800ef70:	08010d74 	.word	0x08010d74

0800ef74 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b082      	sub	sp, #8
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	6039      	str	r1, [r7, #0]
 800ef7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ef80:	79fb      	ldrb	r3, [r7, #7]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d105      	bne.n	800ef92 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ef86:	683a      	ldr	r2, [r7, #0]
 800ef88:	4907      	ldr	r1, [pc, #28]	; (800efa8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ef8a:	4808      	ldr	r0, [pc, #32]	; (800efac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ef8c:	f7fc fc78 	bl	800b880 <USBD_GetString>
 800ef90:	e004      	b.n	800ef9c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ef92:	683a      	ldr	r2, [r7, #0]
 800ef94:	4904      	ldr	r1, [pc, #16]	; (800efa8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ef96:	4805      	ldr	r0, [pc, #20]	; (800efac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ef98:	f7fc fc72 	bl	800b880 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ef9c:	4b02      	ldr	r3, [pc, #8]	; (800efa8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ef9e:	4618      	mov	r0, r3
 800efa0:	3708      	adds	r7, #8
 800efa2:	46bd      	mov	sp, r7
 800efa4:	bd80      	pop	{r7, pc}
 800efa6:	bf00      	nop
 800efa8:	200047c4 	.word	0x200047c4
 800efac:	08010d80 	.word	0x08010d80

0800efb0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800efb0:	b480      	push	{r7}
 800efb2:	b083      	sub	sp, #12
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	4603      	mov	r3, r0
 800efb8:	6039      	str	r1, [r7, #0]
 800efba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800efbc:	683b      	ldr	r3, [r7, #0]
 800efbe:	220c      	movs	r2, #12
 800efc0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800efc2:	4b03      	ldr	r3, [pc, #12]	; (800efd0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800efc4:	4618      	mov	r0, r3
 800efc6:	370c      	adds	r7, #12
 800efc8:	46bd      	mov	sp, r7
 800efca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efce:	4770      	bx	lr
 800efd0:	200000e0 	.word	0x200000e0

0800efd4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b084      	sub	sp, #16
 800efd8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800efda:	4b0f      	ldr	r3, [pc, #60]	; (800f018 <Get_SerialNum+0x44>)
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800efe0:	4b0e      	ldr	r3, [pc, #56]	; (800f01c <Get_SerialNum+0x48>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800efe6:	4b0e      	ldr	r3, [pc, #56]	; (800f020 <Get_SerialNum+0x4c>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800efec:	68fa      	ldr	r2, [r7, #12]
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	4413      	add	r3, r2
 800eff2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d009      	beq.n	800f00e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800effa:	2208      	movs	r2, #8
 800effc:	4909      	ldr	r1, [pc, #36]	; (800f024 <Get_SerialNum+0x50>)
 800effe:	68f8      	ldr	r0, [r7, #12]
 800f000:	f000 f814 	bl	800f02c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f004:	2204      	movs	r2, #4
 800f006:	4908      	ldr	r1, [pc, #32]	; (800f028 <Get_SerialNum+0x54>)
 800f008:	68b8      	ldr	r0, [r7, #8]
 800f00a:	f000 f80f 	bl	800f02c <IntToUnicode>
  }
}
 800f00e:	bf00      	nop
 800f010:	3710      	adds	r7, #16
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}
 800f016:	bf00      	nop
 800f018:	1ff0f420 	.word	0x1ff0f420
 800f01c:	1ff0f424 	.word	0x1ff0f424
 800f020:	1ff0f428 	.word	0x1ff0f428
 800f024:	200000f2 	.word	0x200000f2
 800f028:	20000102 	.word	0x20000102

0800f02c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f02c:	b480      	push	{r7}
 800f02e:	b087      	sub	sp, #28
 800f030:	af00      	add	r7, sp, #0
 800f032:	60f8      	str	r0, [r7, #12]
 800f034:	60b9      	str	r1, [r7, #8]
 800f036:	4613      	mov	r3, r2
 800f038:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f03a:	2300      	movs	r3, #0
 800f03c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f03e:	2300      	movs	r3, #0
 800f040:	75fb      	strb	r3, [r7, #23]
 800f042:	e027      	b.n	800f094 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	0f1b      	lsrs	r3, r3, #28
 800f048:	2b09      	cmp	r3, #9
 800f04a:	d80b      	bhi.n	800f064 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	0f1b      	lsrs	r3, r3, #28
 800f050:	b2da      	uxtb	r2, r3
 800f052:	7dfb      	ldrb	r3, [r7, #23]
 800f054:	005b      	lsls	r3, r3, #1
 800f056:	4619      	mov	r1, r3
 800f058:	68bb      	ldr	r3, [r7, #8]
 800f05a:	440b      	add	r3, r1
 800f05c:	3230      	adds	r2, #48	; 0x30
 800f05e:	b2d2      	uxtb	r2, r2
 800f060:	701a      	strb	r2, [r3, #0]
 800f062:	e00a      	b.n	800f07a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	0f1b      	lsrs	r3, r3, #28
 800f068:	b2da      	uxtb	r2, r3
 800f06a:	7dfb      	ldrb	r3, [r7, #23]
 800f06c:	005b      	lsls	r3, r3, #1
 800f06e:	4619      	mov	r1, r3
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	440b      	add	r3, r1
 800f074:	3237      	adds	r2, #55	; 0x37
 800f076:	b2d2      	uxtb	r2, r2
 800f078:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	011b      	lsls	r3, r3, #4
 800f07e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f080:	7dfb      	ldrb	r3, [r7, #23]
 800f082:	005b      	lsls	r3, r3, #1
 800f084:	3301      	adds	r3, #1
 800f086:	68ba      	ldr	r2, [r7, #8]
 800f088:	4413      	add	r3, r2
 800f08a:	2200      	movs	r2, #0
 800f08c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f08e:	7dfb      	ldrb	r3, [r7, #23]
 800f090:	3301      	adds	r3, #1
 800f092:	75fb      	strb	r3, [r7, #23]
 800f094:	7dfa      	ldrb	r2, [r7, #23]
 800f096:	79fb      	ldrb	r3, [r7, #7]
 800f098:	429a      	cmp	r2, r3
 800f09a:	d3d3      	bcc.n	800f044 <IntToUnicode+0x18>
  }
}
 800f09c:	bf00      	nop
 800f09e:	bf00      	nop
 800f0a0:	371c      	adds	r7, #28
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a8:	4770      	bx	lr
	...

0800f0ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b0ae      	sub	sp, #184	; 0xb8
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f0b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	601a      	str	r2, [r3, #0]
 800f0bc:	605a      	str	r2, [r3, #4]
 800f0be:	609a      	str	r2, [r3, #8]
 800f0c0:	60da      	str	r2, [r3, #12]
 800f0c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f0c4:	f107 0314 	add.w	r3, r7, #20
 800f0c8:	2290      	movs	r2, #144	; 0x90
 800f0ca:	2100      	movs	r1, #0
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f000 fd8a 	bl	800fbe6 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f0da:	d151      	bne.n	800f180 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800f0dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f0e0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f0e8:	f107 0314 	add.w	r3, r7, #20
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	f7f5 fead 	bl	8004e4c <HAL_RCCEx_PeriphCLKConfig>
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d001      	beq.n	800f0fc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800f0f8:	f7f1 ff00 	bl	8000efc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f0fc:	4b22      	ldr	r3, [pc, #136]	; (800f188 <HAL_PCD_MspInit+0xdc>)
 800f0fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f100:	4a21      	ldr	r2, [pc, #132]	; (800f188 <HAL_PCD_MspInit+0xdc>)
 800f102:	f043 0301 	orr.w	r3, r3, #1
 800f106:	6313      	str	r3, [r2, #48]	; 0x30
 800f108:	4b1f      	ldr	r3, [pc, #124]	; (800f188 <HAL_PCD_MspInit+0xdc>)
 800f10a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f10c:	f003 0301 	and.w	r3, r3, #1
 800f110:	613b      	str	r3, [r7, #16]
 800f112:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f114:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f118:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f11c:	2302      	movs	r3, #2
 800f11e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f122:	2300      	movs	r3, #0
 800f124:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f128:	2303      	movs	r3, #3
 800f12a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f12e:	230a      	movs	r3, #10
 800f130:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f134:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f138:	4619      	mov	r1, r3
 800f13a:	4814      	ldr	r0, [pc, #80]	; (800f18c <HAL_PCD_MspInit+0xe0>)
 800f13c:	f7f3 fd1c 	bl	8002b78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f140:	4b11      	ldr	r3, [pc, #68]	; (800f188 <HAL_PCD_MspInit+0xdc>)
 800f142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f144:	4a10      	ldr	r2, [pc, #64]	; (800f188 <HAL_PCD_MspInit+0xdc>)
 800f146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f14a:	6353      	str	r3, [r2, #52]	; 0x34
 800f14c:	4b0e      	ldr	r3, [pc, #56]	; (800f188 <HAL_PCD_MspInit+0xdc>)
 800f14e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f154:	60fb      	str	r3, [r7, #12]
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	4b0b      	ldr	r3, [pc, #44]	; (800f188 <HAL_PCD_MspInit+0xdc>)
 800f15a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f15c:	4a0a      	ldr	r2, [pc, #40]	; (800f188 <HAL_PCD_MspInit+0xdc>)
 800f15e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f162:	6453      	str	r3, [r2, #68]	; 0x44
 800f164:	4b08      	ldr	r3, [pc, #32]	; (800f188 <HAL_PCD_MspInit+0xdc>)
 800f166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f16c:	60bb      	str	r3, [r7, #8]
 800f16e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f170:	2200      	movs	r2, #0
 800f172:	2100      	movs	r1, #0
 800f174:	2043      	movs	r0, #67	; 0x43
 800f176:	f7f3 f922 	bl	80023be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f17a:	2043      	movs	r0, #67	; 0x43
 800f17c:	f7f3 f93b 	bl	80023f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f180:	bf00      	nop
 800f182:	37b8      	adds	r7, #184	; 0xb8
 800f184:	46bd      	mov	sp, r7
 800f186:	bd80      	pop	{r7, pc}
 800f188:	40023800 	.word	0x40023800
 800f18c:	40020000 	.word	0x40020000

0800f190 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b082      	sub	sp, #8
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f1a4:	4619      	mov	r1, r3
 800f1a6:	4610      	mov	r0, r2
 800f1a8:	f7fb f9e1 	bl	800a56e <USBD_LL_SetupStage>
}
 800f1ac:	bf00      	nop
 800f1ae:	3708      	adds	r7, #8
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd80      	pop	{r7, pc}

0800f1b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b082      	sub	sp, #8
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
 800f1bc:	460b      	mov	r3, r1
 800f1be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800f1c6:	78fa      	ldrb	r2, [r7, #3]
 800f1c8:	6879      	ldr	r1, [r7, #4]
 800f1ca:	4613      	mov	r3, r2
 800f1cc:	00db      	lsls	r3, r3, #3
 800f1ce:	4413      	add	r3, r2
 800f1d0:	009b      	lsls	r3, r3, #2
 800f1d2:	440b      	add	r3, r1
 800f1d4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f1d8:	681a      	ldr	r2, [r3, #0]
 800f1da:	78fb      	ldrb	r3, [r7, #3]
 800f1dc:	4619      	mov	r1, r3
 800f1de:	f7fb fa1b 	bl	800a618 <USBD_LL_DataOutStage>
}
 800f1e2:	bf00      	nop
 800f1e4:	3708      	adds	r7, #8
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	bd80      	pop	{r7, pc}

0800f1ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1ea:	b580      	push	{r7, lr}
 800f1ec:	b082      	sub	sp, #8
 800f1ee:	af00      	add	r7, sp, #0
 800f1f0:	6078      	str	r0, [r7, #4]
 800f1f2:	460b      	mov	r3, r1
 800f1f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800f1fc:	78fa      	ldrb	r2, [r7, #3]
 800f1fe:	6879      	ldr	r1, [r7, #4]
 800f200:	4613      	mov	r3, r2
 800f202:	00db      	lsls	r3, r3, #3
 800f204:	4413      	add	r3, r2
 800f206:	009b      	lsls	r3, r3, #2
 800f208:	440b      	add	r3, r1
 800f20a:	334c      	adds	r3, #76	; 0x4c
 800f20c:	681a      	ldr	r2, [r3, #0]
 800f20e:	78fb      	ldrb	r3, [r7, #3]
 800f210:	4619      	mov	r1, r3
 800f212:	f7fb fab4 	bl	800a77e <USBD_LL_DataInStage>
}
 800f216:	bf00      	nop
 800f218:	3708      	adds	r7, #8
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}

0800f21e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f21e:	b580      	push	{r7, lr}
 800f220:	b082      	sub	sp, #8
 800f222:	af00      	add	r7, sp, #0
 800f224:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f22c:	4618      	mov	r0, r3
 800f22e:	f7fb fbe8 	bl	800aa02 <USBD_LL_SOF>
}
 800f232:	bf00      	nop
 800f234:	3708      	adds	r7, #8
 800f236:	46bd      	mov	sp, r7
 800f238:	bd80      	pop	{r7, pc}

0800f23a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f23a:	b580      	push	{r7, lr}
 800f23c:	b084      	sub	sp, #16
 800f23e:	af00      	add	r7, sp, #0
 800f240:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f242:	2301      	movs	r3, #1
 800f244:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	68db      	ldr	r3, [r3, #12]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d102      	bne.n	800f254 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f24e:	2300      	movs	r3, #0
 800f250:	73fb      	strb	r3, [r7, #15]
 800f252:	e008      	b.n	800f266 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	68db      	ldr	r3, [r3, #12]
 800f258:	2b02      	cmp	r3, #2
 800f25a:	d102      	bne.n	800f262 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f25c:	2301      	movs	r3, #1
 800f25e:	73fb      	strb	r3, [r7, #15]
 800f260:	e001      	b.n	800f266 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f262:	f7f1 fe4b 	bl	8000efc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f26c:	7bfa      	ldrb	r2, [r7, #15]
 800f26e:	4611      	mov	r1, r2
 800f270:	4618      	mov	r0, r3
 800f272:	f7fb fb88 	bl	800a986 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f27c:	4618      	mov	r0, r3
 800f27e:	f7fb fb30 	bl	800a8e2 <USBD_LL_Reset>
}
 800f282:	bf00      	nop
 800f284:	3710      	adds	r7, #16
 800f286:	46bd      	mov	sp, r7
 800f288:	bd80      	pop	{r7, pc}
	...

0800f28c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b082      	sub	sp, #8
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f29a:	4618      	mov	r0, r3
 800f29c:	f7fb fb83 	bl	800a9a6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	687a      	ldr	r2, [r7, #4]
 800f2ac:	6812      	ldr	r2, [r2, #0]
 800f2ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f2b2:	f043 0301 	orr.w	r3, r3, #1
 800f2b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	6a1b      	ldr	r3, [r3, #32]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d005      	beq.n	800f2cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f2c0:	4b04      	ldr	r3, [pc, #16]	; (800f2d4 <HAL_PCD_SuspendCallback+0x48>)
 800f2c2:	691b      	ldr	r3, [r3, #16]
 800f2c4:	4a03      	ldr	r2, [pc, #12]	; (800f2d4 <HAL_PCD_SuspendCallback+0x48>)
 800f2c6:	f043 0306 	orr.w	r3, r3, #6
 800f2ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f2cc:	bf00      	nop
 800f2ce:	3708      	adds	r7, #8
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	bd80      	pop	{r7, pc}
 800f2d4:	e000ed00 	.word	0xe000ed00

0800f2d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b082      	sub	sp, #8
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	f7fb fb73 	bl	800a9d2 <USBD_LL_Resume>
}
 800f2ec:	bf00      	nop
 800f2ee:	3708      	adds	r7, #8
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd80      	pop	{r7, pc}

0800f2f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b082      	sub	sp, #8
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
 800f2fc:	460b      	mov	r3, r1
 800f2fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f306:	78fa      	ldrb	r2, [r7, #3]
 800f308:	4611      	mov	r1, r2
 800f30a:	4618      	mov	r0, r3
 800f30c:	f7fb fbcb 	bl	800aaa6 <USBD_LL_IsoOUTIncomplete>
}
 800f310:	bf00      	nop
 800f312:	3708      	adds	r7, #8
 800f314:	46bd      	mov	sp, r7
 800f316:	bd80      	pop	{r7, pc}

0800f318 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b082      	sub	sp, #8
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
 800f320:	460b      	mov	r3, r1
 800f322:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f32a:	78fa      	ldrb	r2, [r7, #3]
 800f32c:	4611      	mov	r1, r2
 800f32e:	4618      	mov	r0, r3
 800f330:	f7fb fb87 	bl	800aa42 <USBD_LL_IsoINIncomplete>
}
 800f334:	bf00      	nop
 800f336:	3708      	adds	r7, #8
 800f338:	46bd      	mov	sp, r7
 800f33a:	bd80      	pop	{r7, pc}

0800f33c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b082      	sub	sp, #8
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f34a:	4618      	mov	r0, r3
 800f34c:	f7fb fbdd 	bl	800ab0a <USBD_LL_DevConnected>
}
 800f350:	bf00      	nop
 800f352:	3708      	adds	r7, #8
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}

0800f358 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b082      	sub	sp, #8
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f366:	4618      	mov	r0, r3
 800f368:	f7fb fbda 	bl	800ab20 <USBD_LL_DevDisconnected>
}
 800f36c:	bf00      	nop
 800f36e:	3708      	adds	r7, #8
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}

0800f374 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b082      	sub	sp, #8
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	781b      	ldrb	r3, [r3, #0]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d13c      	bne.n	800f3fe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f384:	4a20      	ldr	r2, [pc, #128]	; (800f408 <USBD_LL_Init+0x94>)
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	4a1e      	ldr	r2, [pc, #120]	; (800f408 <USBD_LL_Init+0x94>)
 800f390:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f394:	4b1c      	ldr	r3, [pc, #112]	; (800f408 <USBD_LL_Init+0x94>)
 800f396:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f39a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800f39c:	4b1a      	ldr	r3, [pc, #104]	; (800f408 <USBD_LL_Init+0x94>)
 800f39e:	2206      	movs	r2, #6
 800f3a0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f3a2:	4b19      	ldr	r3, [pc, #100]	; (800f408 <USBD_LL_Init+0x94>)
 800f3a4:	2202      	movs	r2, #2
 800f3a6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f3a8:	4b17      	ldr	r3, [pc, #92]	; (800f408 <USBD_LL_Init+0x94>)
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f3ae:	4b16      	ldr	r3, [pc, #88]	; (800f408 <USBD_LL_Init+0x94>)
 800f3b0:	2202      	movs	r2, #2
 800f3b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f3b4:	4b14      	ldr	r3, [pc, #80]	; (800f408 <USBD_LL_Init+0x94>)
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f3ba:	4b13      	ldr	r3, [pc, #76]	; (800f408 <USBD_LL_Init+0x94>)
 800f3bc:	2200      	movs	r2, #0
 800f3be:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f3c0:	4b11      	ldr	r3, [pc, #68]	; (800f408 <USBD_LL_Init+0x94>)
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f3c6:	4b10      	ldr	r3, [pc, #64]	; (800f408 <USBD_LL_Init+0x94>)
 800f3c8:	2200      	movs	r2, #0
 800f3ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f3cc:	4b0e      	ldr	r3, [pc, #56]	; (800f408 <USBD_LL_Init+0x94>)
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f3d2:	480d      	ldr	r0, [pc, #52]	; (800f408 <USBD_LL_Init+0x94>)
 800f3d4:	f7f3 fdad 	bl	8002f32 <HAL_PCD_Init>
 800f3d8:	4603      	mov	r3, r0
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d001      	beq.n	800f3e2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f3de:	f7f1 fd8d 	bl	8000efc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f3e2:	2180      	movs	r1, #128	; 0x80
 800f3e4:	4808      	ldr	r0, [pc, #32]	; (800f408 <USBD_LL_Init+0x94>)
 800f3e6:	f7f5 f828 	bl	800443a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f3ea:	2240      	movs	r2, #64	; 0x40
 800f3ec:	2100      	movs	r1, #0
 800f3ee:	4806      	ldr	r0, [pc, #24]	; (800f408 <USBD_LL_Init+0x94>)
 800f3f0:	f7f4 ffdc 	bl	80043ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f3f4:	2280      	movs	r2, #128	; 0x80
 800f3f6:	2101      	movs	r1, #1
 800f3f8:	4803      	ldr	r0, [pc, #12]	; (800f408 <USBD_LL_Init+0x94>)
 800f3fa:	f7f4 ffd7 	bl	80043ac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f3fe:	2300      	movs	r3, #0
}
 800f400:	4618      	mov	r0, r3
 800f402:	3708      	adds	r7, #8
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}
 800f408:	200049c4 	.word	0x200049c4

0800f40c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b084      	sub	sp, #16
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f414:	2300      	movs	r3, #0
 800f416:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f418:	2300      	movs	r3, #0
 800f41a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f422:	4618      	mov	r0, r3
 800f424:	f7f3 fea9 	bl	800317a <HAL_PCD_Start>
 800f428:	4603      	mov	r3, r0
 800f42a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f42c:	7bfb      	ldrb	r3, [r7, #15]
 800f42e:	4618      	mov	r0, r3
 800f430:	f000 f97e 	bl	800f730 <USBD_Get_USB_Status>
 800f434:	4603      	mov	r3, r0
 800f436:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f438:	7bbb      	ldrb	r3, [r7, #14]
}
 800f43a:	4618      	mov	r0, r3
 800f43c:	3710      	adds	r7, #16
 800f43e:	46bd      	mov	sp, r7
 800f440:	bd80      	pop	{r7, pc}

0800f442 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f442:	b580      	push	{r7, lr}
 800f444:	b084      	sub	sp, #16
 800f446:	af00      	add	r7, sp, #0
 800f448:	6078      	str	r0, [r7, #4]
 800f44a:	4608      	mov	r0, r1
 800f44c:	4611      	mov	r1, r2
 800f44e:	461a      	mov	r2, r3
 800f450:	4603      	mov	r3, r0
 800f452:	70fb      	strb	r3, [r7, #3]
 800f454:	460b      	mov	r3, r1
 800f456:	70bb      	strb	r3, [r7, #2]
 800f458:	4613      	mov	r3, r2
 800f45a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f45c:	2300      	movs	r3, #0
 800f45e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f460:	2300      	movs	r3, #0
 800f462:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f46a:	78bb      	ldrb	r3, [r7, #2]
 800f46c:	883a      	ldrh	r2, [r7, #0]
 800f46e:	78f9      	ldrb	r1, [r7, #3]
 800f470:	f7f4 fb96 	bl	8003ba0 <HAL_PCD_EP_Open>
 800f474:	4603      	mov	r3, r0
 800f476:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f478:	7bfb      	ldrb	r3, [r7, #15]
 800f47a:	4618      	mov	r0, r3
 800f47c:	f000 f958 	bl	800f730 <USBD_Get_USB_Status>
 800f480:	4603      	mov	r3, r0
 800f482:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f484:	7bbb      	ldrb	r3, [r7, #14]
}
 800f486:	4618      	mov	r0, r3
 800f488:	3710      	adds	r7, #16
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}

0800f48e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f48e:	b580      	push	{r7, lr}
 800f490:	b084      	sub	sp, #16
 800f492:	af00      	add	r7, sp, #0
 800f494:	6078      	str	r0, [r7, #4]
 800f496:	460b      	mov	r3, r1
 800f498:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f49a:	2300      	movs	r3, #0
 800f49c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f49e:	2300      	movs	r3, #0
 800f4a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f4a8:	78fa      	ldrb	r2, [r7, #3]
 800f4aa:	4611      	mov	r1, r2
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f7f4 fbdf 	bl	8003c70 <HAL_PCD_EP_Close>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f4b6:	7bfb      	ldrb	r3, [r7, #15]
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	f000 f939 	bl	800f730 <USBD_Get_USB_Status>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f4c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	3710      	adds	r7, #16
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bd80      	pop	{r7, pc}

0800f4cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b084      	sub	sp, #16
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
 800f4d4:	460b      	mov	r3, r1
 800f4d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4d8:	2300      	movs	r3, #0
 800f4da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4dc:	2300      	movs	r3, #0
 800f4de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f4e6:	78fa      	ldrb	r2, [r7, #3]
 800f4e8:	4611      	mov	r1, r2
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f7f4 fcb7 	bl	8003e5e <HAL_PCD_EP_SetStall>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f4f4:	7bfb      	ldrb	r3, [r7, #15]
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f000 f91a 	bl	800f730 <USBD_Get_USB_Status>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f500:	7bbb      	ldrb	r3, [r7, #14]
}
 800f502:	4618      	mov	r0, r3
 800f504:	3710      	adds	r7, #16
 800f506:	46bd      	mov	sp, r7
 800f508:	bd80      	pop	{r7, pc}

0800f50a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f50a:	b580      	push	{r7, lr}
 800f50c:	b084      	sub	sp, #16
 800f50e:	af00      	add	r7, sp, #0
 800f510:	6078      	str	r0, [r7, #4]
 800f512:	460b      	mov	r3, r1
 800f514:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f516:	2300      	movs	r3, #0
 800f518:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f51a:	2300      	movs	r3, #0
 800f51c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f524:	78fa      	ldrb	r2, [r7, #3]
 800f526:	4611      	mov	r1, r2
 800f528:	4618      	mov	r0, r3
 800f52a:	f7f4 fcfc 	bl	8003f26 <HAL_PCD_EP_ClrStall>
 800f52e:	4603      	mov	r3, r0
 800f530:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f532:	7bfb      	ldrb	r3, [r7, #15]
 800f534:	4618      	mov	r0, r3
 800f536:	f000 f8fb 	bl	800f730 <USBD_Get_USB_Status>
 800f53a:	4603      	mov	r3, r0
 800f53c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f53e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f540:	4618      	mov	r0, r3
 800f542:	3710      	adds	r7, #16
 800f544:	46bd      	mov	sp, r7
 800f546:	bd80      	pop	{r7, pc}

0800f548 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f548:	b480      	push	{r7}
 800f54a:	b085      	sub	sp, #20
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
 800f550:	460b      	mov	r3, r1
 800f552:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f55a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f55c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f560:	2b00      	cmp	r3, #0
 800f562:	da0b      	bge.n	800f57c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f564:	78fb      	ldrb	r3, [r7, #3]
 800f566:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f56a:	68f9      	ldr	r1, [r7, #12]
 800f56c:	4613      	mov	r3, r2
 800f56e:	00db      	lsls	r3, r3, #3
 800f570:	4413      	add	r3, r2
 800f572:	009b      	lsls	r3, r3, #2
 800f574:	440b      	add	r3, r1
 800f576:	333e      	adds	r3, #62	; 0x3e
 800f578:	781b      	ldrb	r3, [r3, #0]
 800f57a:	e00b      	b.n	800f594 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f57c:	78fb      	ldrb	r3, [r7, #3]
 800f57e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f582:	68f9      	ldr	r1, [r7, #12]
 800f584:	4613      	mov	r3, r2
 800f586:	00db      	lsls	r3, r3, #3
 800f588:	4413      	add	r3, r2
 800f58a:	009b      	lsls	r3, r3, #2
 800f58c:	440b      	add	r3, r1
 800f58e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f592:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f594:	4618      	mov	r0, r3
 800f596:	3714      	adds	r7, #20
 800f598:	46bd      	mov	sp, r7
 800f59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59e:	4770      	bx	lr

0800f5a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b084      	sub	sp, #16
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]
 800f5a8:	460b      	mov	r3, r1
 800f5aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f5ba:	78fa      	ldrb	r2, [r7, #3]
 800f5bc:	4611      	mov	r1, r2
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f7f4 fac9 	bl	8003b56 <HAL_PCD_SetAddress>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f5c8:	7bfb      	ldrb	r3, [r7, #15]
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	f000 f8b0 	bl	800f730 <USBD_Get_USB_Status>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f5d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	3710      	adds	r7, #16
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bd80      	pop	{r7, pc}

0800f5de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f5de:	b580      	push	{r7, lr}
 800f5e0:	b086      	sub	sp, #24
 800f5e2:	af00      	add	r7, sp, #0
 800f5e4:	60f8      	str	r0, [r7, #12]
 800f5e6:	607a      	str	r2, [r7, #4]
 800f5e8:	603b      	str	r3, [r7, #0]
 800f5ea:	460b      	mov	r3, r1
 800f5ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f5fc:	7af9      	ldrb	r1, [r7, #11]
 800f5fe:	683b      	ldr	r3, [r7, #0]
 800f600:	687a      	ldr	r2, [r7, #4]
 800f602:	f7f4 fbe2 	bl	8003dca <HAL_PCD_EP_Transmit>
 800f606:	4603      	mov	r3, r0
 800f608:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f60a:	7dfb      	ldrb	r3, [r7, #23]
 800f60c:	4618      	mov	r0, r3
 800f60e:	f000 f88f 	bl	800f730 <USBD_Get_USB_Status>
 800f612:	4603      	mov	r3, r0
 800f614:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f616:	7dbb      	ldrb	r3, [r7, #22]
}
 800f618:	4618      	mov	r0, r3
 800f61a:	3718      	adds	r7, #24
 800f61c:	46bd      	mov	sp, r7
 800f61e:	bd80      	pop	{r7, pc}

0800f620 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b086      	sub	sp, #24
 800f624:	af00      	add	r7, sp, #0
 800f626:	60f8      	str	r0, [r7, #12]
 800f628:	607a      	str	r2, [r7, #4]
 800f62a:	603b      	str	r3, [r7, #0]
 800f62c:	460b      	mov	r3, r1
 800f62e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f630:	2300      	movs	r3, #0
 800f632:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f634:	2300      	movs	r3, #0
 800f636:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f63e:	7af9      	ldrb	r1, [r7, #11]
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	687a      	ldr	r2, [r7, #4]
 800f644:	f7f4 fb5e 	bl	8003d04 <HAL_PCD_EP_Receive>
 800f648:	4603      	mov	r3, r0
 800f64a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f64c:	7dfb      	ldrb	r3, [r7, #23]
 800f64e:	4618      	mov	r0, r3
 800f650:	f000 f86e 	bl	800f730 <USBD_Get_USB_Status>
 800f654:	4603      	mov	r3, r0
 800f656:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f658:	7dbb      	ldrb	r3, [r7, #22]
}
 800f65a:	4618      	mov	r0, r3
 800f65c:	3718      	adds	r7, #24
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd80      	pop	{r7, pc}

0800f662 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f662:	b580      	push	{r7, lr}
 800f664:	b082      	sub	sp, #8
 800f666:	af00      	add	r7, sp, #0
 800f668:	6078      	str	r0, [r7, #4]
 800f66a:	460b      	mov	r3, r1
 800f66c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f674:	78fa      	ldrb	r2, [r7, #3]
 800f676:	4611      	mov	r1, r2
 800f678:	4618      	mov	r0, r3
 800f67a:	f7f4 fb8e 	bl	8003d9a <HAL_PCD_EP_GetRxCount>
 800f67e:	4603      	mov	r3, r0
}
 800f680:	4618      	mov	r0, r3
 800f682:	3708      	adds	r7, #8
 800f684:	46bd      	mov	sp, r7
 800f686:	bd80      	pop	{r7, pc}

0800f688 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b082      	sub	sp, #8
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
 800f690:	460b      	mov	r3, r1
 800f692:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800f694:	78fb      	ldrb	r3, [r7, #3]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d002      	beq.n	800f6a0 <HAL_PCDEx_LPM_Callback+0x18>
 800f69a:	2b01      	cmp	r3, #1
 800f69c:	d01f      	beq.n	800f6de <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800f69e:	e03b      	b.n	800f718 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	6a1b      	ldr	r3, [r3, #32]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d007      	beq.n	800f6b8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800f6a8:	f000 f83c 	bl	800f724 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f6ac:	4b1c      	ldr	r3, [pc, #112]	; (800f720 <HAL_PCDEx_LPM_Callback+0x98>)
 800f6ae:	691b      	ldr	r3, [r3, #16]
 800f6b0:	4a1b      	ldr	r2, [pc, #108]	; (800f720 <HAL_PCDEx_LPM_Callback+0x98>)
 800f6b2:	f023 0306 	bic.w	r3, r3, #6
 800f6b6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	687a      	ldr	r2, [r7, #4]
 800f6c4:	6812      	ldr	r2, [r2, #0]
 800f6c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f6ca:	f023 0301 	bic.w	r3, r3, #1
 800f6ce:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	f7fb f97b 	bl	800a9d2 <USBD_LL_Resume>
    break;
 800f6dc:	e01c      	b.n	800f718 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	687a      	ldr	r2, [r7, #4]
 800f6ea:	6812      	ldr	r2, [r2, #0]
 800f6ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f6f0:	f043 0301 	orr.w	r3, r3, #1
 800f6f4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f7fb f952 	bl	800a9a6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	6a1b      	ldr	r3, [r3, #32]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d005      	beq.n	800f716 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f70a:	4b05      	ldr	r3, [pc, #20]	; (800f720 <HAL_PCDEx_LPM_Callback+0x98>)
 800f70c:	691b      	ldr	r3, [r3, #16]
 800f70e:	4a04      	ldr	r2, [pc, #16]	; (800f720 <HAL_PCDEx_LPM_Callback+0x98>)
 800f710:	f043 0306 	orr.w	r3, r3, #6
 800f714:	6113      	str	r3, [r2, #16]
    break;
 800f716:	bf00      	nop
}
 800f718:	bf00      	nop
 800f71a:	3708      	adds	r7, #8
 800f71c:	46bd      	mov	sp, r7
 800f71e:	bd80      	pop	{r7, pc}
 800f720:	e000ed00 	.word	0xe000ed00

0800f724 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800f728:	f7f1 f924 	bl	8000974 <SystemClock_Config>
}
 800f72c:	bf00      	nop
 800f72e:	bd80      	pop	{r7, pc}

0800f730 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f730:	b480      	push	{r7}
 800f732:	b085      	sub	sp, #20
 800f734:	af00      	add	r7, sp, #0
 800f736:	4603      	mov	r3, r0
 800f738:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f73a:	2300      	movs	r3, #0
 800f73c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f73e:	79fb      	ldrb	r3, [r7, #7]
 800f740:	2b03      	cmp	r3, #3
 800f742:	d817      	bhi.n	800f774 <USBD_Get_USB_Status+0x44>
 800f744:	a201      	add	r2, pc, #4	; (adr r2, 800f74c <USBD_Get_USB_Status+0x1c>)
 800f746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f74a:	bf00      	nop
 800f74c:	0800f75d 	.word	0x0800f75d
 800f750:	0800f763 	.word	0x0800f763
 800f754:	0800f769 	.word	0x0800f769
 800f758:	0800f76f 	.word	0x0800f76f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f75c:	2300      	movs	r3, #0
 800f75e:	73fb      	strb	r3, [r7, #15]
    break;
 800f760:	e00b      	b.n	800f77a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f762:	2303      	movs	r3, #3
 800f764:	73fb      	strb	r3, [r7, #15]
    break;
 800f766:	e008      	b.n	800f77a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f768:	2301      	movs	r3, #1
 800f76a:	73fb      	strb	r3, [r7, #15]
    break;
 800f76c:	e005      	b.n	800f77a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f76e:	2303      	movs	r3, #3
 800f770:	73fb      	strb	r3, [r7, #15]
    break;
 800f772:	e002      	b.n	800f77a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f774:	2303      	movs	r3, #3
 800f776:	73fb      	strb	r3, [r7, #15]
    break;
 800f778:	bf00      	nop
  }
  return usb_status;
 800f77a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f77c:	4618      	mov	r0, r3
 800f77e:	3714      	adds	r7, #20
 800f780:	46bd      	mov	sp, r7
 800f782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f786:	4770      	bx	lr

0800f788 <malloc>:
 800f788:	4b02      	ldr	r3, [pc, #8]	; (800f794 <malloc+0xc>)
 800f78a:	4601      	mov	r1, r0
 800f78c:	6818      	ldr	r0, [r3, #0]
 800f78e:	f000 b82b 	b.w	800f7e8 <_malloc_r>
 800f792:	bf00      	nop
 800f794:	20000164 	.word	0x20000164

0800f798 <free>:
 800f798:	4b02      	ldr	r3, [pc, #8]	; (800f7a4 <free+0xc>)
 800f79a:	4601      	mov	r1, r0
 800f79c:	6818      	ldr	r0, [r3, #0]
 800f79e:	f000 ba69 	b.w	800fc74 <_free_r>
 800f7a2:	bf00      	nop
 800f7a4:	20000164 	.word	0x20000164

0800f7a8 <sbrk_aligned>:
 800f7a8:	b570      	push	{r4, r5, r6, lr}
 800f7aa:	4e0e      	ldr	r6, [pc, #56]	; (800f7e4 <sbrk_aligned+0x3c>)
 800f7ac:	460c      	mov	r4, r1
 800f7ae:	6831      	ldr	r1, [r6, #0]
 800f7b0:	4605      	mov	r5, r0
 800f7b2:	b911      	cbnz	r1, 800f7ba <sbrk_aligned+0x12>
 800f7b4:	f000 fa20 	bl	800fbf8 <_sbrk_r>
 800f7b8:	6030      	str	r0, [r6, #0]
 800f7ba:	4621      	mov	r1, r4
 800f7bc:	4628      	mov	r0, r5
 800f7be:	f000 fa1b 	bl	800fbf8 <_sbrk_r>
 800f7c2:	1c43      	adds	r3, r0, #1
 800f7c4:	d00a      	beq.n	800f7dc <sbrk_aligned+0x34>
 800f7c6:	1cc4      	adds	r4, r0, #3
 800f7c8:	f024 0403 	bic.w	r4, r4, #3
 800f7cc:	42a0      	cmp	r0, r4
 800f7ce:	d007      	beq.n	800f7e0 <sbrk_aligned+0x38>
 800f7d0:	1a21      	subs	r1, r4, r0
 800f7d2:	4628      	mov	r0, r5
 800f7d4:	f000 fa10 	bl	800fbf8 <_sbrk_r>
 800f7d8:	3001      	adds	r0, #1
 800f7da:	d101      	bne.n	800f7e0 <sbrk_aligned+0x38>
 800f7dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f7e0:	4620      	mov	r0, r4
 800f7e2:	bd70      	pop	{r4, r5, r6, pc}
 800f7e4:	20004ed0 	.word	0x20004ed0

0800f7e8 <_malloc_r>:
 800f7e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7ec:	1ccd      	adds	r5, r1, #3
 800f7ee:	f025 0503 	bic.w	r5, r5, #3
 800f7f2:	3508      	adds	r5, #8
 800f7f4:	2d0c      	cmp	r5, #12
 800f7f6:	bf38      	it	cc
 800f7f8:	250c      	movcc	r5, #12
 800f7fa:	2d00      	cmp	r5, #0
 800f7fc:	4607      	mov	r7, r0
 800f7fe:	db01      	blt.n	800f804 <_malloc_r+0x1c>
 800f800:	42a9      	cmp	r1, r5
 800f802:	d905      	bls.n	800f810 <_malloc_r+0x28>
 800f804:	230c      	movs	r3, #12
 800f806:	603b      	str	r3, [r7, #0]
 800f808:	2600      	movs	r6, #0
 800f80a:	4630      	mov	r0, r6
 800f80c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f810:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f8e4 <_malloc_r+0xfc>
 800f814:	f000 f89c 	bl	800f950 <__malloc_lock>
 800f818:	f8d8 3000 	ldr.w	r3, [r8]
 800f81c:	461c      	mov	r4, r3
 800f81e:	bb5c      	cbnz	r4, 800f878 <_malloc_r+0x90>
 800f820:	4629      	mov	r1, r5
 800f822:	4638      	mov	r0, r7
 800f824:	f7ff ffc0 	bl	800f7a8 <sbrk_aligned>
 800f828:	1c43      	adds	r3, r0, #1
 800f82a:	4604      	mov	r4, r0
 800f82c:	d155      	bne.n	800f8da <_malloc_r+0xf2>
 800f82e:	f8d8 4000 	ldr.w	r4, [r8]
 800f832:	4626      	mov	r6, r4
 800f834:	2e00      	cmp	r6, #0
 800f836:	d145      	bne.n	800f8c4 <_malloc_r+0xdc>
 800f838:	2c00      	cmp	r4, #0
 800f83a:	d048      	beq.n	800f8ce <_malloc_r+0xe6>
 800f83c:	6823      	ldr	r3, [r4, #0]
 800f83e:	4631      	mov	r1, r6
 800f840:	4638      	mov	r0, r7
 800f842:	eb04 0903 	add.w	r9, r4, r3
 800f846:	f000 f9d7 	bl	800fbf8 <_sbrk_r>
 800f84a:	4581      	cmp	r9, r0
 800f84c:	d13f      	bne.n	800f8ce <_malloc_r+0xe6>
 800f84e:	6821      	ldr	r1, [r4, #0]
 800f850:	1a6d      	subs	r5, r5, r1
 800f852:	4629      	mov	r1, r5
 800f854:	4638      	mov	r0, r7
 800f856:	f7ff ffa7 	bl	800f7a8 <sbrk_aligned>
 800f85a:	3001      	adds	r0, #1
 800f85c:	d037      	beq.n	800f8ce <_malloc_r+0xe6>
 800f85e:	6823      	ldr	r3, [r4, #0]
 800f860:	442b      	add	r3, r5
 800f862:	6023      	str	r3, [r4, #0]
 800f864:	f8d8 3000 	ldr.w	r3, [r8]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d038      	beq.n	800f8de <_malloc_r+0xf6>
 800f86c:	685a      	ldr	r2, [r3, #4]
 800f86e:	42a2      	cmp	r2, r4
 800f870:	d12b      	bne.n	800f8ca <_malloc_r+0xe2>
 800f872:	2200      	movs	r2, #0
 800f874:	605a      	str	r2, [r3, #4]
 800f876:	e00f      	b.n	800f898 <_malloc_r+0xb0>
 800f878:	6822      	ldr	r2, [r4, #0]
 800f87a:	1b52      	subs	r2, r2, r5
 800f87c:	d41f      	bmi.n	800f8be <_malloc_r+0xd6>
 800f87e:	2a0b      	cmp	r2, #11
 800f880:	d917      	bls.n	800f8b2 <_malloc_r+0xca>
 800f882:	1961      	adds	r1, r4, r5
 800f884:	42a3      	cmp	r3, r4
 800f886:	6025      	str	r5, [r4, #0]
 800f888:	bf18      	it	ne
 800f88a:	6059      	strne	r1, [r3, #4]
 800f88c:	6863      	ldr	r3, [r4, #4]
 800f88e:	bf08      	it	eq
 800f890:	f8c8 1000 	streq.w	r1, [r8]
 800f894:	5162      	str	r2, [r4, r5]
 800f896:	604b      	str	r3, [r1, #4]
 800f898:	4638      	mov	r0, r7
 800f89a:	f104 060b 	add.w	r6, r4, #11
 800f89e:	f000 f85d 	bl	800f95c <__malloc_unlock>
 800f8a2:	f026 0607 	bic.w	r6, r6, #7
 800f8a6:	1d23      	adds	r3, r4, #4
 800f8a8:	1af2      	subs	r2, r6, r3
 800f8aa:	d0ae      	beq.n	800f80a <_malloc_r+0x22>
 800f8ac:	1b9b      	subs	r3, r3, r6
 800f8ae:	50a3      	str	r3, [r4, r2]
 800f8b0:	e7ab      	b.n	800f80a <_malloc_r+0x22>
 800f8b2:	42a3      	cmp	r3, r4
 800f8b4:	6862      	ldr	r2, [r4, #4]
 800f8b6:	d1dd      	bne.n	800f874 <_malloc_r+0x8c>
 800f8b8:	f8c8 2000 	str.w	r2, [r8]
 800f8bc:	e7ec      	b.n	800f898 <_malloc_r+0xb0>
 800f8be:	4623      	mov	r3, r4
 800f8c0:	6864      	ldr	r4, [r4, #4]
 800f8c2:	e7ac      	b.n	800f81e <_malloc_r+0x36>
 800f8c4:	4634      	mov	r4, r6
 800f8c6:	6876      	ldr	r6, [r6, #4]
 800f8c8:	e7b4      	b.n	800f834 <_malloc_r+0x4c>
 800f8ca:	4613      	mov	r3, r2
 800f8cc:	e7cc      	b.n	800f868 <_malloc_r+0x80>
 800f8ce:	230c      	movs	r3, #12
 800f8d0:	603b      	str	r3, [r7, #0]
 800f8d2:	4638      	mov	r0, r7
 800f8d4:	f000 f842 	bl	800f95c <__malloc_unlock>
 800f8d8:	e797      	b.n	800f80a <_malloc_r+0x22>
 800f8da:	6025      	str	r5, [r4, #0]
 800f8dc:	e7dc      	b.n	800f898 <_malloc_r+0xb0>
 800f8de:	605b      	str	r3, [r3, #4]
 800f8e0:	deff      	udf	#255	; 0xff
 800f8e2:	bf00      	nop
 800f8e4:	20004ecc 	.word	0x20004ecc

0800f8e8 <sniprintf>:
 800f8e8:	b40c      	push	{r2, r3}
 800f8ea:	b530      	push	{r4, r5, lr}
 800f8ec:	4b17      	ldr	r3, [pc, #92]	; (800f94c <sniprintf+0x64>)
 800f8ee:	1e0c      	subs	r4, r1, #0
 800f8f0:	681d      	ldr	r5, [r3, #0]
 800f8f2:	b09d      	sub	sp, #116	; 0x74
 800f8f4:	da08      	bge.n	800f908 <sniprintf+0x20>
 800f8f6:	238b      	movs	r3, #139	; 0x8b
 800f8f8:	602b      	str	r3, [r5, #0]
 800f8fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f8fe:	b01d      	add	sp, #116	; 0x74
 800f900:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f904:	b002      	add	sp, #8
 800f906:	4770      	bx	lr
 800f908:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f90c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f910:	bf14      	ite	ne
 800f912:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800f916:	4623      	moveq	r3, r4
 800f918:	9304      	str	r3, [sp, #16]
 800f91a:	9307      	str	r3, [sp, #28]
 800f91c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f920:	9002      	str	r0, [sp, #8]
 800f922:	9006      	str	r0, [sp, #24]
 800f924:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f928:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f92a:	ab21      	add	r3, sp, #132	; 0x84
 800f92c:	a902      	add	r1, sp, #8
 800f92e:	4628      	mov	r0, r5
 800f930:	9301      	str	r3, [sp, #4]
 800f932:	f000 fa45 	bl	800fdc0 <_svfiprintf_r>
 800f936:	1c43      	adds	r3, r0, #1
 800f938:	bfbc      	itt	lt
 800f93a:	238b      	movlt	r3, #139	; 0x8b
 800f93c:	602b      	strlt	r3, [r5, #0]
 800f93e:	2c00      	cmp	r4, #0
 800f940:	d0dd      	beq.n	800f8fe <sniprintf+0x16>
 800f942:	9b02      	ldr	r3, [sp, #8]
 800f944:	2200      	movs	r2, #0
 800f946:	701a      	strb	r2, [r3, #0]
 800f948:	e7d9      	b.n	800f8fe <sniprintf+0x16>
 800f94a:	bf00      	nop
 800f94c:	20000164 	.word	0x20000164

0800f950 <__malloc_lock>:
 800f950:	4801      	ldr	r0, [pc, #4]	; (800f958 <__malloc_lock+0x8>)
 800f952:	f000 b98c 	b.w	800fc6e <__retarget_lock_acquire_recursive>
 800f956:	bf00      	nop
 800f958:	20005010 	.word	0x20005010

0800f95c <__malloc_unlock>:
 800f95c:	4801      	ldr	r0, [pc, #4]	; (800f964 <__malloc_unlock+0x8>)
 800f95e:	f000 b987 	b.w	800fc70 <__retarget_lock_release_recursive>
 800f962:	bf00      	nop
 800f964:	20005010 	.word	0x20005010

0800f968 <std>:
 800f968:	2300      	movs	r3, #0
 800f96a:	b510      	push	{r4, lr}
 800f96c:	4604      	mov	r4, r0
 800f96e:	e9c0 3300 	strd	r3, r3, [r0]
 800f972:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f976:	6083      	str	r3, [r0, #8]
 800f978:	8181      	strh	r1, [r0, #12]
 800f97a:	6643      	str	r3, [r0, #100]	; 0x64
 800f97c:	81c2      	strh	r2, [r0, #14]
 800f97e:	6183      	str	r3, [r0, #24]
 800f980:	4619      	mov	r1, r3
 800f982:	2208      	movs	r2, #8
 800f984:	305c      	adds	r0, #92	; 0x5c
 800f986:	f000 f92e 	bl	800fbe6 <memset>
 800f98a:	4b0d      	ldr	r3, [pc, #52]	; (800f9c0 <std+0x58>)
 800f98c:	6263      	str	r3, [r4, #36]	; 0x24
 800f98e:	4b0d      	ldr	r3, [pc, #52]	; (800f9c4 <std+0x5c>)
 800f990:	62a3      	str	r3, [r4, #40]	; 0x28
 800f992:	4b0d      	ldr	r3, [pc, #52]	; (800f9c8 <std+0x60>)
 800f994:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f996:	4b0d      	ldr	r3, [pc, #52]	; (800f9cc <std+0x64>)
 800f998:	6323      	str	r3, [r4, #48]	; 0x30
 800f99a:	4b0d      	ldr	r3, [pc, #52]	; (800f9d0 <std+0x68>)
 800f99c:	6224      	str	r4, [r4, #32]
 800f99e:	429c      	cmp	r4, r3
 800f9a0:	d006      	beq.n	800f9b0 <std+0x48>
 800f9a2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f9a6:	4294      	cmp	r4, r2
 800f9a8:	d002      	beq.n	800f9b0 <std+0x48>
 800f9aa:	33d0      	adds	r3, #208	; 0xd0
 800f9ac:	429c      	cmp	r4, r3
 800f9ae:	d105      	bne.n	800f9bc <std+0x54>
 800f9b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f9b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9b8:	f000 b958 	b.w	800fc6c <__retarget_lock_init_recursive>
 800f9bc:	bd10      	pop	{r4, pc}
 800f9be:	bf00      	nop
 800f9c0:	080106c1 	.word	0x080106c1
 800f9c4:	080106e3 	.word	0x080106e3
 800f9c8:	0801071b 	.word	0x0801071b
 800f9cc:	0801073f 	.word	0x0801073f
 800f9d0:	20004ed4 	.word	0x20004ed4

0800f9d4 <stdio_exit_handler>:
 800f9d4:	4a02      	ldr	r2, [pc, #8]	; (800f9e0 <stdio_exit_handler+0xc>)
 800f9d6:	4903      	ldr	r1, [pc, #12]	; (800f9e4 <stdio_exit_handler+0x10>)
 800f9d8:	4803      	ldr	r0, [pc, #12]	; (800f9e8 <stdio_exit_handler+0x14>)
 800f9da:	f000 b869 	b.w	800fab0 <_fwalk_sglue>
 800f9de:	bf00      	nop
 800f9e0:	2000010c 	.word	0x2000010c
 800f9e4:	08010671 	.word	0x08010671
 800f9e8:	20000118 	.word	0x20000118

0800f9ec <cleanup_stdio>:
 800f9ec:	6841      	ldr	r1, [r0, #4]
 800f9ee:	4b0c      	ldr	r3, [pc, #48]	; (800fa20 <cleanup_stdio+0x34>)
 800f9f0:	4299      	cmp	r1, r3
 800f9f2:	b510      	push	{r4, lr}
 800f9f4:	4604      	mov	r4, r0
 800f9f6:	d001      	beq.n	800f9fc <cleanup_stdio+0x10>
 800f9f8:	f000 fe3a 	bl	8010670 <_fflush_r>
 800f9fc:	68a1      	ldr	r1, [r4, #8]
 800f9fe:	4b09      	ldr	r3, [pc, #36]	; (800fa24 <cleanup_stdio+0x38>)
 800fa00:	4299      	cmp	r1, r3
 800fa02:	d002      	beq.n	800fa0a <cleanup_stdio+0x1e>
 800fa04:	4620      	mov	r0, r4
 800fa06:	f000 fe33 	bl	8010670 <_fflush_r>
 800fa0a:	68e1      	ldr	r1, [r4, #12]
 800fa0c:	4b06      	ldr	r3, [pc, #24]	; (800fa28 <cleanup_stdio+0x3c>)
 800fa0e:	4299      	cmp	r1, r3
 800fa10:	d004      	beq.n	800fa1c <cleanup_stdio+0x30>
 800fa12:	4620      	mov	r0, r4
 800fa14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa18:	f000 be2a 	b.w	8010670 <_fflush_r>
 800fa1c:	bd10      	pop	{r4, pc}
 800fa1e:	bf00      	nop
 800fa20:	20004ed4 	.word	0x20004ed4
 800fa24:	20004f3c 	.word	0x20004f3c
 800fa28:	20004fa4 	.word	0x20004fa4

0800fa2c <global_stdio_init.part.0>:
 800fa2c:	b510      	push	{r4, lr}
 800fa2e:	4b0b      	ldr	r3, [pc, #44]	; (800fa5c <global_stdio_init.part.0+0x30>)
 800fa30:	4c0b      	ldr	r4, [pc, #44]	; (800fa60 <global_stdio_init.part.0+0x34>)
 800fa32:	4a0c      	ldr	r2, [pc, #48]	; (800fa64 <global_stdio_init.part.0+0x38>)
 800fa34:	601a      	str	r2, [r3, #0]
 800fa36:	4620      	mov	r0, r4
 800fa38:	2200      	movs	r2, #0
 800fa3a:	2104      	movs	r1, #4
 800fa3c:	f7ff ff94 	bl	800f968 <std>
 800fa40:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800fa44:	2201      	movs	r2, #1
 800fa46:	2109      	movs	r1, #9
 800fa48:	f7ff ff8e 	bl	800f968 <std>
 800fa4c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800fa50:	2202      	movs	r2, #2
 800fa52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa56:	2112      	movs	r1, #18
 800fa58:	f7ff bf86 	b.w	800f968 <std>
 800fa5c:	2000500c 	.word	0x2000500c
 800fa60:	20004ed4 	.word	0x20004ed4
 800fa64:	0800f9d5 	.word	0x0800f9d5

0800fa68 <__sfp_lock_acquire>:
 800fa68:	4801      	ldr	r0, [pc, #4]	; (800fa70 <__sfp_lock_acquire+0x8>)
 800fa6a:	f000 b900 	b.w	800fc6e <__retarget_lock_acquire_recursive>
 800fa6e:	bf00      	nop
 800fa70:	20005011 	.word	0x20005011

0800fa74 <__sfp_lock_release>:
 800fa74:	4801      	ldr	r0, [pc, #4]	; (800fa7c <__sfp_lock_release+0x8>)
 800fa76:	f000 b8fb 	b.w	800fc70 <__retarget_lock_release_recursive>
 800fa7a:	bf00      	nop
 800fa7c:	20005011 	.word	0x20005011

0800fa80 <__sinit>:
 800fa80:	b510      	push	{r4, lr}
 800fa82:	4604      	mov	r4, r0
 800fa84:	f7ff fff0 	bl	800fa68 <__sfp_lock_acquire>
 800fa88:	6a23      	ldr	r3, [r4, #32]
 800fa8a:	b11b      	cbz	r3, 800fa94 <__sinit+0x14>
 800fa8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa90:	f7ff bff0 	b.w	800fa74 <__sfp_lock_release>
 800fa94:	4b04      	ldr	r3, [pc, #16]	; (800faa8 <__sinit+0x28>)
 800fa96:	6223      	str	r3, [r4, #32]
 800fa98:	4b04      	ldr	r3, [pc, #16]	; (800faac <__sinit+0x2c>)
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d1f5      	bne.n	800fa8c <__sinit+0xc>
 800faa0:	f7ff ffc4 	bl	800fa2c <global_stdio_init.part.0>
 800faa4:	e7f2      	b.n	800fa8c <__sinit+0xc>
 800faa6:	bf00      	nop
 800faa8:	0800f9ed 	.word	0x0800f9ed
 800faac:	2000500c 	.word	0x2000500c

0800fab0 <_fwalk_sglue>:
 800fab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fab4:	4607      	mov	r7, r0
 800fab6:	4688      	mov	r8, r1
 800fab8:	4614      	mov	r4, r2
 800faba:	2600      	movs	r6, #0
 800fabc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fac0:	f1b9 0901 	subs.w	r9, r9, #1
 800fac4:	d505      	bpl.n	800fad2 <_fwalk_sglue+0x22>
 800fac6:	6824      	ldr	r4, [r4, #0]
 800fac8:	2c00      	cmp	r4, #0
 800faca:	d1f7      	bne.n	800fabc <_fwalk_sglue+0xc>
 800facc:	4630      	mov	r0, r6
 800face:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fad2:	89ab      	ldrh	r3, [r5, #12]
 800fad4:	2b01      	cmp	r3, #1
 800fad6:	d907      	bls.n	800fae8 <_fwalk_sglue+0x38>
 800fad8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fadc:	3301      	adds	r3, #1
 800fade:	d003      	beq.n	800fae8 <_fwalk_sglue+0x38>
 800fae0:	4629      	mov	r1, r5
 800fae2:	4638      	mov	r0, r7
 800fae4:	47c0      	blx	r8
 800fae6:	4306      	orrs	r6, r0
 800fae8:	3568      	adds	r5, #104	; 0x68
 800faea:	e7e9      	b.n	800fac0 <_fwalk_sglue+0x10>

0800faec <iprintf>:
 800faec:	b40f      	push	{r0, r1, r2, r3}
 800faee:	b507      	push	{r0, r1, r2, lr}
 800faf0:	4906      	ldr	r1, [pc, #24]	; (800fb0c <iprintf+0x20>)
 800faf2:	ab04      	add	r3, sp, #16
 800faf4:	6808      	ldr	r0, [r1, #0]
 800faf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800fafa:	6881      	ldr	r1, [r0, #8]
 800fafc:	9301      	str	r3, [sp, #4]
 800fafe:	f000 fa87 	bl	8010010 <_vfiprintf_r>
 800fb02:	b003      	add	sp, #12
 800fb04:	f85d eb04 	ldr.w	lr, [sp], #4
 800fb08:	b004      	add	sp, #16
 800fb0a:	4770      	bx	lr
 800fb0c:	20000164 	.word	0x20000164

0800fb10 <_puts_r>:
 800fb10:	6a03      	ldr	r3, [r0, #32]
 800fb12:	b570      	push	{r4, r5, r6, lr}
 800fb14:	6884      	ldr	r4, [r0, #8]
 800fb16:	4605      	mov	r5, r0
 800fb18:	460e      	mov	r6, r1
 800fb1a:	b90b      	cbnz	r3, 800fb20 <_puts_r+0x10>
 800fb1c:	f7ff ffb0 	bl	800fa80 <__sinit>
 800fb20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fb22:	07db      	lsls	r3, r3, #31
 800fb24:	d405      	bmi.n	800fb32 <_puts_r+0x22>
 800fb26:	89a3      	ldrh	r3, [r4, #12]
 800fb28:	0598      	lsls	r0, r3, #22
 800fb2a:	d402      	bmi.n	800fb32 <_puts_r+0x22>
 800fb2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fb2e:	f000 f89e 	bl	800fc6e <__retarget_lock_acquire_recursive>
 800fb32:	89a3      	ldrh	r3, [r4, #12]
 800fb34:	0719      	lsls	r1, r3, #28
 800fb36:	d513      	bpl.n	800fb60 <_puts_r+0x50>
 800fb38:	6923      	ldr	r3, [r4, #16]
 800fb3a:	b18b      	cbz	r3, 800fb60 <_puts_r+0x50>
 800fb3c:	3e01      	subs	r6, #1
 800fb3e:	68a3      	ldr	r3, [r4, #8]
 800fb40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fb44:	3b01      	subs	r3, #1
 800fb46:	60a3      	str	r3, [r4, #8]
 800fb48:	b9e9      	cbnz	r1, 800fb86 <_puts_r+0x76>
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	da2e      	bge.n	800fbac <_puts_r+0x9c>
 800fb4e:	4622      	mov	r2, r4
 800fb50:	210a      	movs	r1, #10
 800fb52:	4628      	mov	r0, r5
 800fb54:	f000 fe26 	bl	80107a4 <__swbuf_r>
 800fb58:	3001      	adds	r0, #1
 800fb5a:	d007      	beq.n	800fb6c <_puts_r+0x5c>
 800fb5c:	250a      	movs	r5, #10
 800fb5e:	e007      	b.n	800fb70 <_puts_r+0x60>
 800fb60:	4621      	mov	r1, r4
 800fb62:	4628      	mov	r0, r5
 800fb64:	f000 fe5c 	bl	8010820 <__swsetup_r>
 800fb68:	2800      	cmp	r0, #0
 800fb6a:	d0e7      	beq.n	800fb3c <_puts_r+0x2c>
 800fb6c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800fb70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fb72:	07da      	lsls	r2, r3, #31
 800fb74:	d405      	bmi.n	800fb82 <_puts_r+0x72>
 800fb76:	89a3      	ldrh	r3, [r4, #12]
 800fb78:	059b      	lsls	r3, r3, #22
 800fb7a:	d402      	bmi.n	800fb82 <_puts_r+0x72>
 800fb7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fb7e:	f000 f877 	bl	800fc70 <__retarget_lock_release_recursive>
 800fb82:	4628      	mov	r0, r5
 800fb84:	bd70      	pop	{r4, r5, r6, pc}
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	da04      	bge.n	800fb94 <_puts_r+0x84>
 800fb8a:	69a2      	ldr	r2, [r4, #24]
 800fb8c:	429a      	cmp	r2, r3
 800fb8e:	dc06      	bgt.n	800fb9e <_puts_r+0x8e>
 800fb90:	290a      	cmp	r1, #10
 800fb92:	d004      	beq.n	800fb9e <_puts_r+0x8e>
 800fb94:	6823      	ldr	r3, [r4, #0]
 800fb96:	1c5a      	adds	r2, r3, #1
 800fb98:	6022      	str	r2, [r4, #0]
 800fb9a:	7019      	strb	r1, [r3, #0]
 800fb9c:	e7cf      	b.n	800fb3e <_puts_r+0x2e>
 800fb9e:	4622      	mov	r2, r4
 800fba0:	4628      	mov	r0, r5
 800fba2:	f000 fdff 	bl	80107a4 <__swbuf_r>
 800fba6:	3001      	adds	r0, #1
 800fba8:	d1c9      	bne.n	800fb3e <_puts_r+0x2e>
 800fbaa:	e7df      	b.n	800fb6c <_puts_r+0x5c>
 800fbac:	6823      	ldr	r3, [r4, #0]
 800fbae:	250a      	movs	r5, #10
 800fbb0:	1c5a      	adds	r2, r3, #1
 800fbb2:	6022      	str	r2, [r4, #0]
 800fbb4:	701d      	strb	r5, [r3, #0]
 800fbb6:	e7db      	b.n	800fb70 <_puts_r+0x60>

0800fbb8 <puts>:
 800fbb8:	4b02      	ldr	r3, [pc, #8]	; (800fbc4 <puts+0xc>)
 800fbba:	4601      	mov	r1, r0
 800fbbc:	6818      	ldr	r0, [r3, #0]
 800fbbe:	f7ff bfa7 	b.w	800fb10 <_puts_r>
 800fbc2:	bf00      	nop
 800fbc4:	20000164 	.word	0x20000164

0800fbc8 <strcat>:
 800fbc8:	b510      	push	{r4, lr}
 800fbca:	4602      	mov	r2, r0
 800fbcc:	7814      	ldrb	r4, [r2, #0]
 800fbce:	4613      	mov	r3, r2
 800fbd0:	3201      	adds	r2, #1
 800fbd2:	2c00      	cmp	r4, #0
 800fbd4:	d1fa      	bne.n	800fbcc <strcat+0x4>
 800fbd6:	3b01      	subs	r3, #1
 800fbd8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fbdc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fbe0:	2a00      	cmp	r2, #0
 800fbe2:	d1f9      	bne.n	800fbd8 <strcat+0x10>
 800fbe4:	bd10      	pop	{r4, pc}

0800fbe6 <memset>:
 800fbe6:	4402      	add	r2, r0
 800fbe8:	4603      	mov	r3, r0
 800fbea:	4293      	cmp	r3, r2
 800fbec:	d100      	bne.n	800fbf0 <memset+0xa>
 800fbee:	4770      	bx	lr
 800fbf0:	f803 1b01 	strb.w	r1, [r3], #1
 800fbf4:	e7f9      	b.n	800fbea <memset+0x4>
	...

0800fbf8 <_sbrk_r>:
 800fbf8:	b538      	push	{r3, r4, r5, lr}
 800fbfa:	4d06      	ldr	r5, [pc, #24]	; (800fc14 <_sbrk_r+0x1c>)
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	4604      	mov	r4, r0
 800fc00:	4608      	mov	r0, r1
 800fc02:	602b      	str	r3, [r5, #0]
 800fc04:	f7f1 fc32 	bl	800146c <_sbrk>
 800fc08:	1c43      	adds	r3, r0, #1
 800fc0a:	d102      	bne.n	800fc12 <_sbrk_r+0x1a>
 800fc0c:	682b      	ldr	r3, [r5, #0]
 800fc0e:	b103      	cbz	r3, 800fc12 <_sbrk_r+0x1a>
 800fc10:	6023      	str	r3, [r4, #0]
 800fc12:	bd38      	pop	{r3, r4, r5, pc}
 800fc14:	20005014 	.word	0x20005014

0800fc18 <__errno>:
 800fc18:	4b01      	ldr	r3, [pc, #4]	; (800fc20 <__errno+0x8>)
 800fc1a:	6818      	ldr	r0, [r3, #0]
 800fc1c:	4770      	bx	lr
 800fc1e:	bf00      	nop
 800fc20:	20000164 	.word	0x20000164

0800fc24 <__libc_init_array>:
 800fc24:	b570      	push	{r4, r5, r6, lr}
 800fc26:	4d0d      	ldr	r5, [pc, #52]	; (800fc5c <__libc_init_array+0x38>)
 800fc28:	4c0d      	ldr	r4, [pc, #52]	; (800fc60 <__libc_init_array+0x3c>)
 800fc2a:	1b64      	subs	r4, r4, r5
 800fc2c:	10a4      	asrs	r4, r4, #2
 800fc2e:	2600      	movs	r6, #0
 800fc30:	42a6      	cmp	r6, r4
 800fc32:	d109      	bne.n	800fc48 <__libc_init_array+0x24>
 800fc34:	4d0b      	ldr	r5, [pc, #44]	; (800fc64 <__libc_init_array+0x40>)
 800fc36:	4c0c      	ldr	r4, [pc, #48]	; (800fc68 <__libc_init_array+0x44>)
 800fc38:	f000 ff44 	bl	8010ac4 <_init>
 800fc3c:	1b64      	subs	r4, r4, r5
 800fc3e:	10a4      	asrs	r4, r4, #2
 800fc40:	2600      	movs	r6, #0
 800fc42:	42a6      	cmp	r6, r4
 800fc44:	d105      	bne.n	800fc52 <__libc_init_array+0x2e>
 800fc46:	bd70      	pop	{r4, r5, r6, pc}
 800fc48:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc4c:	4798      	blx	r3
 800fc4e:	3601      	adds	r6, #1
 800fc50:	e7ee      	b.n	800fc30 <__libc_init_array+0xc>
 800fc52:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc56:	4798      	blx	r3
 800fc58:	3601      	adds	r6, #1
 800fc5a:	e7f2      	b.n	800fc42 <__libc_init_array+0x1e>
 800fc5c:	08011240 	.word	0x08011240
 800fc60:	08011240 	.word	0x08011240
 800fc64:	08011240 	.word	0x08011240
 800fc68:	08011244 	.word	0x08011244

0800fc6c <__retarget_lock_init_recursive>:
 800fc6c:	4770      	bx	lr

0800fc6e <__retarget_lock_acquire_recursive>:
 800fc6e:	4770      	bx	lr

0800fc70 <__retarget_lock_release_recursive>:
 800fc70:	4770      	bx	lr
	...

0800fc74 <_free_r>:
 800fc74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fc76:	2900      	cmp	r1, #0
 800fc78:	d044      	beq.n	800fd04 <_free_r+0x90>
 800fc7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc7e:	9001      	str	r0, [sp, #4]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	f1a1 0404 	sub.w	r4, r1, #4
 800fc86:	bfb8      	it	lt
 800fc88:	18e4      	addlt	r4, r4, r3
 800fc8a:	f7ff fe61 	bl	800f950 <__malloc_lock>
 800fc8e:	4a1e      	ldr	r2, [pc, #120]	; (800fd08 <_free_r+0x94>)
 800fc90:	9801      	ldr	r0, [sp, #4]
 800fc92:	6813      	ldr	r3, [r2, #0]
 800fc94:	b933      	cbnz	r3, 800fca4 <_free_r+0x30>
 800fc96:	6063      	str	r3, [r4, #4]
 800fc98:	6014      	str	r4, [r2, #0]
 800fc9a:	b003      	add	sp, #12
 800fc9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fca0:	f7ff be5c 	b.w	800f95c <__malloc_unlock>
 800fca4:	42a3      	cmp	r3, r4
 800fca6:	d908      	bls.n	800fcba <_free_r+0x46>
 800fca8:	6825      	ldr	r5, [r4, #0]
 800fcaa:	1961      	adds	r1, r4, r5
 800fcac:	428b      	cmp	r3, r1
 800fcae:	bf01      	itttt	eq
 800fcb0:	6819      	ldreq	r1, [r3, #0]
 800fcb2:	685b      	ldreq	r3, [r3, #4]
 800fcb4:	1949      	addeq	r1, r1, r5
 800fcb6:	6021      	streq	r1, [r4, #0]
 800fcb8:	e7ed      	b.n	800fc96 <_free_r+0x22>
 800fcba:	461a      	mov	r2, r3
 800fcbc:	685b      	ldr	r3, [r3, #4]
 800fcbe:	b10b      	cbz	r3, 800fcc4 <_free_r+0x50>
 800fcc0:	42a3      	cmp	r3, r4
 800fcc2:	d9fa      	bls.n	800fcba <_free_r+0x46>
 800fcc4:	6811      	ldr	r1, [r2, #0]
 800fcc6:	1855      	adds	r5, r2, r1
 800fcc8:	42a5      	cmp	r5, r4
 800fcca:	d10b      	bne.n	800fce4 <_free_r+0x70>
 800fccc:	6824      	ldr	r4, [r4, #0]
 800fcce:	4421      	add	r1, r4
 800fcd0:	1854      	adds	r4, r2, r1
 800fcd2:	42a3      	cmp	r3, r4
 800fcd4:	6011      	str	r1, [r2, #0]
 800fcd6:	d1e0      	bne.n	800fc9a <_free_r+0x26>
 800fcd8:	681c      	ldr	r4, [r3, #0]
 800fcda:	685b      	ldr	r3, [r3, #4]
 800fcdc:	6053      	str	r3, [r2, #4]
 800fcde:	440c      	add	r4, r1
 800fce0:	6014      	str	r4, [r2, #0]
 800fce2:	e7da      	b.n	800fc9a <_free_r+0x26>
 800fce4:	d902      	bls.n	800fcec <_free_r+0x78>
 800fce6:	230c      	movs	r3, #12
 800fce8:	6003      	str	r3, [r0, #0]
 800fcea:	e7d6      	b.n	800fc9a <_free_r+0x26>
 800fcec:	6825      	ldr	r5, [r4, #0]
 800fcee:	1961      	adds	r1, r4, r5
 800fcf0:	428b      	cmp	r3, r1
 800fcf2:	bf04      	itt	eq
 800fcf4:	6819      	ldreq	r1, [r3, #0]
 800fcf6:	685b      	ldreq	r3, [r3, #4]
 800fcf8:	6063      	str	r3, [r4, #4]
 800fcfa:	bf04      	itt	eq
 800fcfc:	1949      	addeq	r1, r1, r5
 800fcfe:	6021      	streq	r1, [r4, #0]
 800fd00:	6054      	str	r4, [r2, #4]
 800fd02:	e7ca      	b.n	800fc9a <_free_r+0x26>
 800fd04:	b003      	add	sp, #12
 800fd06:	bd30      	pop	{r4, r5, pc}
 800fd08:	20004ecc 	.word	0x20004ecc

0800fd0c <__ssputs_r>:
 800fd0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd10:	688e      	ldr	r6, [r1, #8]
 800fd12:	461f      	mov	r7, r3
 800fd14:	42be      	cmp	r6, r7
 800fd16:	680b      	ldr	r3, [r1, #0]
 800fd18:	4682      	mov	sl, r0
 800fd1a:	460c      	mov	r4, r1
 800fd1c:	4690      	mov	r8, r2
 800fd1e:	d82c      	bhi.n	800fd7a <__ssputs_r+0x6e>
 800fd20:	898a      	ldrh	r2, [r1, #12]
 800fd22:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fd26:	d026      	beq.n	800fd76 <__ssputs_r+0x6a>
 800fd28:	6965      	ldr	r5, [r4, #20]
 800fd2a:	6909      	ldr	r1, [r1, #16]
 800fd2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fd30:	eba3 0901 	sub.w	r9, r3, r1
 800fd34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fd38:	1c7b      	adds	r3, r7, #1
 800fd3a:	444b      	add	r3, r9
 800fd3c:	106d      	asrs	r5, r5, #1
 800fd3e:	429d      	cmp	r5, r3
 800fd40:	bf38      	it	cc
 800fd42:	461d      	movcc	r5, r3
 800fd44:	0553      	lsls	r3, r2, #21
 800fd46:	d527      	bpl.n	800fd98 <__ssputs_r+0x8c>
 800fd48:	4629      	mov	r1, r5
 800fd4a:	f7ff fd4d 	bl	800f7e8 <_malloc_r>
 800fd4e:	4606      	mov	r6, r0
 800fd50:	b360      	cbz	r0, 800fdac <__ssputs_r+0xa0>
 800fd52:	6921      	ldr	r1, [r4, #16]
 800fd54:	464a      	mov	r2, r9
 800fd56:	f000 fe9f 	bl	8010a98 <memcpy>
 800fd5a:	89a3      	ldrh	r3, [r4, #12]
 800fd5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fd60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd64:	81a3      	strh	r3, [r4, #12]
 800fd66:	6126      	str	r6, [r4, #16]
 800fd68:	6165      	str	r5, [r4, #20]
 800fd6a:	444e      	add	r6, r9
 800fd6c:	eba5 0509 	sub.w	r5, r5, r9
 800fd70:	6026      	str	r6, [r4, #0]
 800fd72:	60a5      	str	r5, [r4, #8]
 800fd74:	463e      	mov	r6, r7
 800fd76:	42be      	cmp	r6, r7
 800fd78:	d900      	bls.n	800fd7c <__ssputs_r+0x70>
 800fd7a:	463e      	mov	r6, r7
 800fd7c:	6820      	ldr	r0, [r4, #0]
 800fd7e:	4632      	mov	r2, r6
 800fd80:	4641      	mov	r1, r8
 800fd82:	f000 fe07 	bl	8010994 <memmove>
 800fd86:	68a3      	ldr	r3, [r4, #8]
 800fd88:	1b9b      	subs	r3, r3, r6
 800fd8a:	60a3      	str	r3, [r4, #8]
 800fd8c:	6823      	ldr	r3, [r4, #0]
 800fd8e:	4433      	add	r3, r6
 800fd90:	6023      	str	r3, [r4, #0]
 800fd92:	2000      	movs	r0, #0
 800fd94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd98:	462a      	mov	r2, r5
 800fd9a:	f000 fcd4 	bl	8010746 <_realloc_r>
 800fd9e:	4606      	mov	r6, r0
 800fda0:	2800      	cmp	r0, #0
 800fda2:	d1e0      	bne.n	800fd66 <__ssputs_r+0x5a>
 800fda4:	6921      	ldr	r1, [r4, #16]
 800fda6:	4650      	mov	r0, sl
 800fda8:	f7ff ff64 	bl	800fc74 <_free_r>
 800fdac:	230c      	movs	r3, #12
 800fdae:	f8ca 3000 	str.w	r3, [sl]
 800fdb2:	89a3      	ldrh	r3, [r4, #12]
 800fdb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fdb8:	81a3      	strh	r3, [r4, #12]
 800fdba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fdbe:	e7e9      	b.n	800fd94 <__ssputs_r+0x88>

0800fdc0 <_svfiprintf_r>:
 800fdc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdc4:	4698      	mov	r8, r3
 800fdc6:	898b      	ldrh	r3, [r1, #12]
 800fdc8:	061b      	lsls	r3, r3, #24
 800fdca:	b09d      	sub	sp, #116	; 0x74
 800fdcc:	4607      	mov	r7, r0
 800fdce:	460d      	mov	r5, r1
 800fdd0:	4614      	mov	r4, r2
 800fdd2:	d50e      	bpl.n	800fdf2 <_svfiprintf_r+0x32>
 800fdd4:	690b      	ldr	r3, [r1, #16]
 800fdd6:	b963      	cbnz	r3, 800fdf2 <_svfiprintf_r+0x32>
 800fdd8:	2140      	movs	r1, #64	; 0x40
 800fdda:	f7ff fd05 	bl	800f7e8 <_malloc_r>
 800fdde:	6028      	str	r0, [r5, #0]
 800fde0:	6128      	str	r0, [r5, #16]
 800fde2:	b920      	cbnz	r0, 800fdee <_svfiprintf_r+0x2e>
 800fde4:	230c      	movs	r3, #12
 800fde6:	603b      	str	r3, [r7, #0]
 800fde8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fdec:	e0d0      	b.n	800ff90 <_svfiprintf_r+0x1d0>
 800fdee:	2340      	movs	r3, #64	; 0x40
 800fdf0:	616b      	str	r3, [r5, #20]
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	9309      	str	r3, [sp, #36]	; 0x24
 800fdf6:	2320      	movs	r3, #32
 800fdf8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fdfc:	f8cd 800c 	str.w	r8, [sp, #12]
 800fe00:	2330      	movs	r3, #48	; 0x30
 800fe02:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ffa8 <_svfiprintf_r+0x1e8>
 800fe06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fe0a:	f04f 0901 	mov.w	r9, #1
 800fe0e:	4623      	mov	r3, r4
 800fe10:	469a      	mov	sl, r3
 800fe12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe16:	b10a      	cbz	r2, 800fe1c <_svfiprintf_r+0x5c>
 800fe18:	2a25      	cmp	r2, #37	; 0x25
 800fe1a:	d1f9      	bne.n	800fe10 <_svfiprintf_r+0x50>
 800fe1c:	ebba 0b04 	subs.w	fp, sl, r4
 800fe20:	d00b      	beq.n	800fe3a <_svfiprintf_r+0x7a>
 800fe22:	465b      	mov	r3, fp
 800fe24:	4622      	mov	r2, r4
 800fe26:	4629      	mov	r1, r5
 800fe28:	4638      	mov	r0, r7
 800fe2a:	f7ff ff6f 	bl	800fd0c <__ssputs_r>
 800fe2e:	3001      	adds	r0, #1
 800fe30:	f000 80a9 	beq.w	800ff86 <_svfiprintf_r+0x1c6>
 800fe34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe36:	445a      	add	r2, fp
 800fe38:	9209      	str	r2, [sp, #36]	; 0x24
 800fe3a:	f89a 3000 	ldrb.w	r3, [sl]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	f000 80a1 	beq.w	800ff86 <_svfiprintf_r+0x1c6>
 800fe44:	2300      	movs	r3, #0
 800fe46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fe4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe4e:	f10a 0a01 	add.w	sl, sl, #1
 800fe52:	9304      	str	r3, [sp, #16]
 800fe54:	9307      	str	r3, [sp, #28]
 800fe56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fe5a:	931a      	str	r3, [sp, #104]	; 0x68
 800fe5c:	4654      	mov	r4, sl
 800fe5e:	2205      	movs	r2, #5
 800fe60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe64:	4850      	ldr	r0, [pc, #320]	; (800ffa8 <_svfiprintf_r+0x1e8>)
 800fe66:	f7f0 f9eb 	bl	8000240 <memchr>
 800fe6a:	9a04      	ldr	r2, [sp, #16]
 800fe6c:	b9d8      	cbnz	r0, 800fea6 <_svfiprintf_r+0xe6>
 800fe6e:	06d0      	lsls	r0, r2, #27
 800fe70:	bf44      	itt	mi
 800fe72:	2320      	movmi	r3, #32
 800fe74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe78:	0711      	lsls	r1, r2, #28
 800fe7a:	bf44      	itt	mi
 800fe7c:	232b      	movmi	r3, #43	; 0x2b
 800fe7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe82:	f89a 3000 	ldrb.w	r3, [sl]
 800fe86:	2b2a      	cmp	r3, #42	; 0x2a
 800fe88:	d015      	beq.n	800feb6 <_svfiprintf_r+0xf6>
 800fe8a:	9a07      	ldr	r2, [sp, #28]
 800fe8c:	4654      	mov	r4, sl
 800fe8e:	2000      	movs	r0, #0
 800fe90:	f04f 0c0a 	mov.w	ip, #10
 800fe94:	4621      	mov	r1, r4
 800fe96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fe9a:	3b30      	subs	r3, #48	; 0x30
 800fe9c:	2b09      	cmp	r3, #9
 800fe9e:	d94d      	bls.n	800ff3c <_svfiprintf_r+0x17c>
 800fea0:	b1b0      	cbz	r0, 800fed0 <_svfiprintf_r+0x110>
 800fea2:	9207      	str	r2, [sp, #28]
 800fea4:	e014      	b.n	800fed0 <_svfiprintf_r+0x110>
 800fea6:	eba0 0308 	sub.w	r3, r0, r8
 800feaa:	fa09 f303 	lsl.w	r3, r9, r3
 800feae:	4313      	orrs	r3, r2
 800feb0:	9304      	str	r3, [sp, #16]
 800feb2:	46a2      	mov	sl, r4
 800feb4:	e7d2      	b.n	800fe5c <_svfiprintf_r+0x9c>
 800feb6:	9b03      	ldr	r3, [sp, #12]
 800feb8:	1d19      	adds	r1, r3, #4
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	9103      	str	r1, [sp, #12]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	bfbb      	ittet	lt
 800fec2:	425b      	neglt	r3, r3
 800fec4:	f042 0202 	orrlt.w	r2, r2, #2
 800fec8:	9307      	strge	r3, [sp, #28]
 800feca:	9307      	strlt	r3, [sp, #28]
 800fecc:	bfb8      	it	lt
 800fece:	9204      	strlt	r2, [sp, #16]
 800fed0:	7823      	ldrb	r3, [r4, #0]
 800fed2:	2b2e      	cmp	r3, #46	; 0x2e
 800fed4:	d10c      	bne.n	800fef0 <_svfiprintf_r+0x130>
 800fed6:	7863      	ldrb	r3, [r4, #1]
 800fed8:	2b2a      	cmp	r3, #42	; 0x2a
 800feda:	d134      	bne.n	800ff46 <_svfiprintf_r+0x186>
 800fedc:	9b03      	ldr	r3, [sp, #12]
 800fede:	1d1a      	adds	r2, r3, #4
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	9203      	str	r2, [sp, #12]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	bfb8      	it	lt
 800fee8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800feec:	3402      	adds	r4, #2
 800feee:	9305      	str	r3, [sp, #20]
 800fef0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ffb8 <_svfiprintf_r+0x1f8>
 800fef4:	7821      	ldrb	r1, [r4, #0]
 800fef6:	2203      	movs	r2, #3
 800fef8:	4650      	mov	r0, sl
 800fefa:	f7f0 f9a1 	bl	8000240 <memchr>
 800fefe:	b138      	cbz	r0, 800ff10 <_svfiprintf_r+0x150>
 800ff00:	9b04      	ldr	r3, [sp, #16]
 800ff02:	eba0 000a 	sub.w	r0, r0, sl
 800ff06:	2240      	movs	r2, #64	; 0x40
 800ff08:	4082      	lsls	r2, r0
 800ff0a:	4313      	orrs	r3, r2
 800ff0c:	3401      	adds	r4, #1
 800ff0e:	9304      	str	r3, [sp, #16]
 800ff10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff14:	4825      	ldr	r0, [pc, #148]	; (800ffac <_svfiprintf_r+0x1ec>)
 800ff16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ff1a:	2206      	movs	r2, #6
 800ff1c:	f7f0 f990 	bl	8000240 <memchr>
 800ff20:	2800      	cmp	r0, #0
 800ff22:	d038      	beq.n	800ff96 <_svfiprintf_r+0x1d6>
 800ff24:	4b22      	ldr	r3, [pc, #136]	; (800ffb0 <_svfiprintf_r+0x1f0>)
 800ff26:	bb1b      	cbnz	r3, 800ff70 <_svfiprintf_r+0x1b0>
 800ff28:	9b03      	ldr	r3, [sp, #12]
 800ff2a:	3307      	adds	r3, #7
 800ff2c:	f023 0307 	bic.w	r3, r3, #7
 800ff30:	3308      	adds	r3, #8
 800ff32:	9303      	str	r3, [sp, #12]
 800ff34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff36:	4433      	add	r3, r6
 800ff38:	9309      	str	r3, [sp, #36]	; 0x24
 800ff3a:	e768      	b.n	800fe0e <_svfiprintf_r+0x4e>
 800ff3c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ff40:	460c      	mov	r4, r1
 800ff42:	2001      	movs	r0, #1
 800ff44:	e7a6      	b.n	800fe94 <_svfiprintf_r+0xd4>
 800ff46:	2300      	movs	r3, #0
 800ff48:	3401      	adds	r4, #1
 800ff4a:	9305      	str	r3, [sp, #20]
 800ff4c:	4619      	mov	r1, r3
 800ff4e:	f04f 0c0a 	mov.w	ip, #10
 800ff52:	4620      	mov	r0, r4
 800ff54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff58:	3a30      	subs	r2, #48	; 0x30
 800ff5a:	2a09      	cmp	r2, #9
 800ff5c:	d903      	bls.n	800ff66 <_svfiprintf_r+0x1a6>
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d0c6      	beq.n	800fef0 <_svfiprintf_r+0x130>
 800ff62:	9105      	str	r1, [sp, #20]
 800ff64:	e7c4      	b.n	800fef0 <_svfiprintf_r+0x130>
 800ff66:	fb0c 2101 	mla	r1, ip, r1, r2
 800ff6a:	4604      	mov	r4, r0
 800ff6c:	2301      	movs	r3, #1
 800ff6e:	e7f0      	b.n	800ff52 <_svfiprintf_r+0x192>
 800ff70:	ab03      	add	r3, sp, #12
 800ff72:	9300      	str	r3, [sp, #0]
 800ff74:	462a      	mov	r2, r5
 800ff76:	4b0f      	ldr	r3, [pc, #60]	; (800ffb4 <_svfiprintf_r+0x1f4>)
 800ff78:	a904      	add	r1, sp, #16
 800ff7a:	4638      	mov	r0, r7
 800ff7c:	f3af 8000 	nop.w
 800ff80:	1c42      	adds	r2, r0, #1
 800ff82:	4606      	mov	r6, r0
 800ff84:	d1d6      	bne.n	800ff34 <_svfiprintf_r+0x174>
 800ff86:	89ab      	ldrh	r3, [r5, #12]
 800ff88:	065b      	lsls	r3, r3, #25
 800ff8a:	f53f af2d 	bmi.w	800fde8 <_svfiprintf_r+0x28>
 800ff8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ff90:	b01d      	add	sp, #116	; 0x74
 800ff92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff96:	ab03      	add	r3, sp, #12
 800ff98:	9300      	str	r3, [sp, #0]
 800ff9a:	462a      	mov	r2, r5
 800ff9c:	4b05      	ldr	r3, [pc, #20]	; (800ffb4 <_svfiprintf_r+0x1f4>)
 800ff9e:	a904      	add	r1, sp, #16
 800ffa0:	4638      	mov	r0, r7
 800ffa2:	f000 f9bd 	bl	8010320 <_printf_i>
 800ffa6:	e7eb      	b.n	800ff80 <_svfiprintf_r+0x1c0>
 800ffa8:	08011204 	.word	0x08011204
 800ffac:	0801120e 	.word	0x0801120e
 800ffb0:	00000000 	.word	0x00000000
 800ffb4:	0800fd0d 	.word	0x0800fd0d
 800ffb8:	0801120a 	.word	0x0801120a

0800ffbc <__sfputc_r>:
 800ffbc:	6893      	ldr	r3, [r2, #8]
 800ffbe:	3b01      	subs	r3, #1
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	b410      	push	{r4}
 800ffc4:	6093      	str	r3, [r2, #8]
 800ffc6:	da08      	bge.n	800ffda <__sfputc_r+0x1e>
 800ffc8:	6994      	ldr	r4, [r2, #24]
 800ffca:	42a3      	cmp	r3, r4
 800ffcc:	db01      	blt.n	800ffd2 <__sfputc_r+0x16>
 800ffce:	290a      	cmp	r1, #10
 800ffd0:	d103      	bne.n	800ffda <__sfputc_r+0x1e>
 800ffd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ffd6:	f000 bbe5 	b.w	80107a4 <__swbuf_r>
 800ffda:	6813      	ldr	r3, [r2, #0]
 800ffdc:	1c58      	adds	r0, r3, #1
 800ffde:	6010      	str	r0, [r2, #0]
 800ffe0:	7019      	strb	r1, [r3, #0]
 800ffe2:	4608      	mov	r0, r1
 800ffe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ffe8:	4770      	bx	lr

0800ffea <__sfputs_r>:
 800ffea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffec:	4606      	mov	r6, r0
 800ffee:	460f      	mov	r7, r1
 800fff0:	4614      	mov	r4, r2
 800fff2:	18d5      	adds	r5, r2, r3
 800fff4:	42ac      	cmp	r4, r5
 800fff6:	d101      	bne.n	800fffc <__sfputs_r+0x12>
 800fff8:	2000      	movs	r0, #0
 800fffa:	e007      	b.n	801000c <__sfputs_r+0x22>
 800fffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010000:	463a      	mov	r2, r7
 8010002:	4630      	mov	r0, r6
 8010004:	f7ff ffda 	bl	800ffbc <__sfputc_r>
 8010008:	1c43      	adds	r3, r0, #1
 801000a:	d1f3      	bne.n	800fff4 <__sfputs_r+0xa>
 801000c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010010 <_vfiprintf_r>:
 8010010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010014:	460d      	mov	r5, r1
 8010016:	b09d      	sub	sp, #116	; 0x74
 8010018:	4614      	mov	r4, r2
 801001a:	4698      	mov	r8, r3
 801001c:	4606      	mov	r6, r0
 801001e:	b118      	cbz	r0, 8010028 <_vfiprintf_r+0x18>
 8010020:	6a03      	ldr	r3, [r0, #32]
 8010022:	b90b      	cbnz	r3, 8010028 <_vfiprintf_r+0x18>
 8010024:	f7ff fd2c 	bl	800fa80 <__sinit>
 8010028:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801002a:	07d9      	lsls	r1, r3, #31
 801002c:	d405      	bmi.n	801003a <_vfiprintf_r+0x2a>
 801002e:	89ab      	ldrh	r3, [r5, #12]
 8010030:	059a      	lsls	r2, r3, #22
 8010032:	d402      	bmi.n	801003a <_vfiprintf_r+0x2a>
 8010034:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010036:	f7ff fe1a 	bl	800fc6e <__retarget_lock_acquire_recursive>
 801003a:	89ab      	ldrh	r3, [r5, #12]
 801003c:	071b      	lsls	r3, r3, #28
 801003e:	d501      	bpl.n	8010044 <_vfiprintf_r+0x34>
 8010040:	692b      	ldr	r3, [r5, #16]
 8010042:	b99b      	cbnz	r3, 801006c <_vfiprintf_r+0x5c>
 8010044:	4629      	mov	r1, r5
 8010046:	4630      	mov	r0, r6
 8010048:	f000 fbea 	bl	8010820 <__swsetup_r>
 801004c:	b170      	cbz	r0, 801006c <_vfiprintf_r+0x5c>
 801004e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010050:	07dc      	lsls	r4, r3, #31
 8010052:	d504      	bpl.n	801005e <_vfiprintf_r+0x4e>
 8010054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010058:	b01d      	add	sp, #116	; 0x74
 801005a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801005e:	89ab      	ldrh	r3, [r5, #12]
 8010060:	0598      	lsls	r0, r3, #22
 8010062:	d4f7      	bmi.n	8010054 <_vfiprintf_r+0x44>
 8010064:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010066:	f7ff fe03 	bl	800fc70 <__retarget_lock_release_recursive>
 801006a:	e7f3      	b.n	8010054 <_vfiprintf_r+0x44>
 801006c:	2300      	movs	r3, #0
 801006e:	9309      	str	r3, [sp, #36]	; 0x24
 8010070:	2320      	movs	r3, #32
 8010072:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010076:	f8cd 800c 	str.w	r8, [sp, #12]
 801007a:	2330      	movs	r3, #48	; 0x30
 801007c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010230 <_vfiprintf_r+0x220>
 8010080:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010084:	f04f 0901 	mov.w	r9, #1
 8010088:	4623      	mov	r3, r4
 801008a:	469a      	mov	sl, r3
 801008c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010090:	b10a      	cbz	r2, 8010096 <_vfiprintf_r+0x86>
 8010092:	2a25      	cmp	r2, #37	; 0x25
 8010094:	d1f9      	bne.n	801008a <_vfiprintf_r+0x7a>
 8010096:	ebba 0b04 	subs.w	fp, sl, r4
 801009a:	d00b      	beq.n	80100b4 <_vfiprintf_r+0xa4>
 801009c:	465b      	mov	r3, fp
 801009e:	4622      	mov	r2, r4
 80100a0:	4629      	mov	r1, r5
 80100a2:	4630      	mov	r0, r6
 80100a4:	f7ff ffa1 	bl	800ffea <__sfputs_r>
 80100a8:	3001      	adds	r0, #1
 80100aa:	f000 80a9 	beq.w	8010200 <_vfiprintf_r+0x1f0>
 80100ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80100b0:	445a      	add	r2, fp
 80100b2:	9209      	str	r2, [sp, #36]	; 0x24
 80100b4:	f89a 3000 	ldrb.w	r3, [sl]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	f000 80a1 	beq.w	8010200 <_vfiprintf_r+0x1f0>
 80100be:	2300      	movs	r3, #0
 80100c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80100c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80100c8:	f10a 0a01 	add.w	sl, sl, #1
 80100cc:	9304      	str	r3, [sp, #16]
 80100ce:	9307      	str	r3, [sp, #28]
 80100d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80100d4:	931a      	str	r3, [sp, #104]	; 0x68
 80100d6:	4654      	mov	r4, sl
 80100d8:	2205      	movs	r2, #5
 80100da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100de:	4854      	ldr	r0, [pc, #336]	; (8010230 <_vfiprintf_r+0x220>)
 80100e0:	f7f0 f8ae 	bl	8000240 <memchr>
 80100e4:	9a04      	ldr	r2, [sp, #16]
 80100e6:	b9d8      	cbnz	r0, 8010120 <_vfiprintf_r+0x110>
 80100e8:	06d1      	lsls	r1, r2, #27
 80100ea:	bf44      	itt	mi
 80100ec:	2320      	movmi	r3, #32
 80100ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80100f2:	0713      	lsls	r3, r2, #28
 80100f4:	bf44      	itt	mi
 80100f6:	232b      	movmi	r3, #43	; 0x2b
 80100f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80100fc:	f89a 3000 	ldrb.w	r3, [sl]
 8010100:	2b2a      	cmp	r3, #42	; 0x2a
 8010102:	d015      	beq.n	8010130 <_vfiprintf_r+0x120>
 8010104:	9a07      	ldr	r2, [sp, #28]
 8010106:	4654      	mov	r4, sl
 8010108:	2000      	movs	r0, #0
 801010a:	f04f 0c0a 	mov.w	ip, #10
 801010e:	4621      	mov	r1, r4
 8010110:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010114:	3b30      	subs	r3, #48	; 0x30
 8010116:	2b09      	cmp	r3, #9
 8010118:	d94d      	bls.n	80101b6 <_vfiprintf_r+0x1a6>
 801011a:	b1b0      	cbz	r0, 801014a <_vfiprintf_r+0x13a>
 801011c:	9207      	str	r2, [sp, #28]
 801011e:	e014      	b.n	801014a <_vfiprintf_r+0x13a>
 8010120:	eba0 0308 	sub.w	r3, r0, r8
 8010124:	fa09 f303 	lsl.w	r3, r9, r3
 8010128:	4313      	orrs	r3, r2
 801012a:	9304      	str	r3, [sp, #16]
 801012c:	46a2      	mov	sl, r4
 801012e:	e7d2      	b.n	80100d6 <_vfiprintf_r+0xc6>
 8010130:	9b03      	ldr	r3, [sp, #12]
 8010132:	1d19      	adds	r1, r3, #4
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	9103      	str	r1, [sp, #12]
 8010138:	2b00      	cmp	r3, #0
 801013a:	bfbb      	ittet	lt
 801013c:	425b      	neglt	r3, r3
 801013e:	f042 0202 	orrlt.w	r2, r2, #2
 8010142:	9307      	strge	r3, [sp, #28]
 8010144:	9307      	strlt	r3, [sp, #28]
 8010146:	bfb8      	it	lt
 8010148:	9204      	strlt	r2, [sp, #16]
 801014a:	7823      	ldrb	r3, [r4, #0]
 801014c:	2b2e      	cmp	r3, #46	; 0x2e
 801014e:	d10c      	bne.n	801016a <_vfiprintf_r+0x15a>
 8010150:	7863      	ldrb	r3, [r4, #1]
 8010152:	2b2a      	cmp	r3, #42	; 0x2a
 8010154:	d134      	bne.n	80101c0 <_vfiprintf_r+0x1b0>
 8010156:	9b03      	ldr	r3, [sp, #12]
 8010158:	1d1a      	adds	r2, r3, #4
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	9203      	str	r2, [sp, #12]
 801015e:	2b00      	cmp	r3, #0
 8010160:	bfb8      	it	lt
 8010162:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010166:	3402      	adds	r4, #2
 8010168:	9305      	str	r3, [sp, #20]
 801016a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010240 <_vfiprintf_r+0x230>
 801016e:	7821      	ldrb	r1, [r4, #0]
 8010170:	2203      	movs	r2, #3
 8010172:	4650      	mov	r0, sl
 8010174:	f7f0 f864 	bl	8000240 <memchr>
 8010178:	b138      	cbz	r0, 801018a <_vfiprintf_r+0x17a>
 801017a:	9b04      	ldr	r3, [sp, #16]
 801017c:	eba0 000a 	sub.w	r0, r0, sl
 8010180:	2240      	movs	r2, #64	; 0x40
 8010182:	4082      	lsls	r2, r0
 8010184:	4313      	orrs	r3, r2
 8010186:	3401      	adds	r4, #1
 8010188:	9304      	str	r3, [sp, #16]
 801018a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801018e:	4829      	ldr	r0, [pc, #164]	; (8010234 <_vfiprintf_r+0x224>)
 8010190:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010194:	2206      	movs	r2, #6
 8010196:	f7f0 f853 	bl	8000240 <memchr>
 801019a:	2800      	cmp	r0, #0
 801019c:	d03f      	beq.n	801021e <_vfiprintf_r+0x20e>
 801019e:	4b26      	ldr	r3, [pc, #152]	; (8010238 <_vfiprintf_r+0x228>)
 80101a0:	bb1b      	cbnz	r3, 80101ea <_vfiprintf_r+0x1da>
 80101a2:	9b03      	ldr	r3, [sp, #12]
 80101a4:	3307      	adds	r3, #7
 80101a6:	f023 0307 	bic.w	r3, r3, #7
 80101aa:	3308      	adds	r3, #8
 80101ac:	9303      	str	r3, [sp, #12]
 80101ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101b0:	443b      	add	r3, r7
 80101b2:	9309      	str	r3, [sp, #36]	; 0x24
 80101b4:	e768      	b.n	8010088 <_vfiprintf_r+0x78>
 80101b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80101ba:	460c      	mov	r4, r1
 80101bc:	2001      	movs	r0, #1
 80101be:	e7a6      	b.n	801010e <_vfiprintf_r+0xfe>
 80101c0:	2300      	movs	r3, #0
 80101c2:	3401      	adds	r4, #1
 80101c4:	9305      	str	r3, [sp, #20]
 80101c6:	4619      	mov	r1, r3
 80101c8:	f04f 0c0a 	mov.w	ip, #10
 80101cc:	4620      	mov	r0, r4
 80101ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101d2:	3a30      	subs	r2, #48	; 0x30
 80101d4:	2a09      	cmp	r2, #9
 80101d6:	d903      	bls.n	80101e0 <_vfiprintf_r+0x1d0>
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d0c6      	beq.n	801016a <_vfiprintf_r+0x15a>
 80101dc:	9105      	str	r1, [sp, #20]
 80101de:	e7c4      	b.n	801016a <_vfiprintf_r+0x15a>
 80101e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80101e4:	4604      	mov	r4, r0
 80101e6:	2301      	movs	r3, #1
 80101e8:	e7f0      	b.n	80101cc <_vfiprintf_r+0x1bc>
 80101ea:	ab03      	add	r3, sp, #12
 80101ec:	9300      	str	r3, [sp, #0]
 80101ee:	462a      	mov	r2, r5
 80101f0:	4b12      	ldr	r3, [pc, #72]	; (801023c <_vfiprintf_r+0x22c>)
 80101f2:	a904      	add	r1, sp, #16
 80101f4:	4630      	mov	r0, r6
 80101f6:	f3af 8000 	nop.w
 80101fa:	4607      	mov	r7, r0
 80101fc:	1c78      	adds	r0, r7, #1
 80101fe:	d1d6      	bne.n	80101ae <_vfiprintf_r+0x19e>
 8010200:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010202:	07d9      	lsls	r1, r3, #31
 8010204:	d405      	bmi.n	8010212 <_vfiprintf_r+0x202>
 8010206:	89ab      	ldrh	r3, [r5, #12]
 8010208:	059a      	lsls	r2, r3, #22
 801020a:	d402      	bmi.n	8010212 <_vfiprintf_r+0x202>
 801020c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801020e:	f7ff fd2f 	bl	800fc70 <__retarget_lock_release_recursive>
 8010212:	89ab      	ldrh	r3, [r5, #12]
 8010214:	065b      	lsls	r3, r3, #25
 8010216:	f53f af1d 	bmi.w	8010054 <_vfiprintf_r+0x44>
 801021a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801021c:	e71c      	b.n	8010058 <_vfiprintf_r+0x48>
 801021e:	ab03      	add	r3, sp, #12
 8010220:	9300      	str	r3, [sp, #0]
 8010222:	462a      	mov	r2, r5
 8010224:	4b05      	ldr	r3, [pc, #20]	; (801023c <_vfiprintf_r+0x22c>)
 8010226:	a904      	add	r1, sp, #16
 8010228:	4630      	mov	r0, r6
 801022a:	f000 f879 	bl	8010320 <_printf_i>
 801022e:	e7e4      	b.n	80101fa <_vfiprintf_r+0x1ea>
 8010230:	08011204 	.word	0x08011204
 8010234:	0801120e 	.word	0x0801120e
 8010238:	00000000 	.word	0x00000000
 801023c:	0800ffeb 	.word	0x0800ffeb
 8010240:	0801120a 	.word	0x0801120a

08010244 <_printf_common>:
 8010244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010248:	4616      	mov	r6, r2
 801024a:	4699      	mov	r9, r3
 801024c:	688a      	ldr	r2, [r1, #8]
 801024e:	690b      	ldr	r3, [r1, #16]
 8010250:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010254:	4293      	cmp	r3, r2
 8010256:	bfb8      	it	lt
 8010258:	4613      	movlt	r3, r2
 801025a:	6033      	str	r3, [r6, #0]
 801025c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010260:	4607      	mov	r7, r0
 8010262:	460c      	mov	r4, r1
 8010264:	b10a      	cbz	r2, 801026a <_printf_common+0x26>
 8010266:	3301      	adds	r3, #1
 8010268:	6033      	str	r3, [r6, #0]
 801026a:	6823      	ldr	r3, [r4, #0]
 801026c:	0699      	lsls	r1, r3, #26
 801026e:	bf42      	ittt	mi
 8010270:	6833      	ldrmi	r3, [r6, #0]
 8010272:	3302      	addmi	r3, #2
 8010274:	6033      	strmi	r3, [r6, #0]
 8010276:	6825      	ldr	r5, [r4, #0]
 8010278:	f015 0506 	ands.w	r5, r5, #6
 801027c:	d106      	bne.n	801028c <_printf_common+0x48>
 801027e:	f104 0a19 	add.w	sl, r4, #25
 8010282:	68e3      	ldr	r3, [r4, #12]
 8010284:	6832      	ldr	r2, [r6, #0]
 8010286:	1a9b      	subs	r3, r3, r2
 8010288:	42ab      	cmp	r3, r5
 801028a:	dc26      	bgt.n	80102da <_printf_common+0x96>
 801028c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010290:	1e13      	subs	r3, r2, #0
 8010292:	6822      	ldr	r2, [r4, #0]
 8010294:	bf18      	it	ne
 8010296:	2301      	movne	r3, #1
 8010298:	0692      	lsls	r2, r2, #26
 801029a:	d42b      	bmi.n	80102f4 <_printf_common+0xb0>
 801029c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80102a0:	4649      	mov	r1, r9
 80102a2:	4638      	mov	r0, r7
 80102a4:	47c0      	blx	r8
 80102a6:	3001      	adds	r0, #1
 80102a8:	d01e      	beq.n	80102e8 <_printf_common+0xa4>
 80102aa:	6823      	ldr	r3, [r4, #0]
 80102ac:	6922      	ldr	r2, [r4, #16]
 80102ae:	f003 0306 	and.w	r3, r3, #6
 80102b2:	2b04      	cmp	r3, #4
 80102b4:	bf02      	ittt	eq
 80102b6:	68e5      	ldreq	r5, [r4, #12]
 80102b8:	6833      	ldreq	r3, [r6, #0]
 80102ba:	1aed      	subeq	r5, r5, r3
 80102bc:	68a3      	ldr	r3, [r4, #8]
 80102be:	bf0c      	ite	eq
 80102c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80102c4:	2500      	movne	r5, #0
 80102c6:	4293      	cmp	r3, r2
 80102c8:	bfc4      	itt	gt
 80102ca:	1a9b      	subgt	r3, r3, r2
 80102cc:	18ed      	addgt	r5, r5, r3
 80102ce:	2600      	movs	r6, #0
 80102d0:	341a      	adds	r4, #26
 80102d2:	42b5      	cmp	r5, r6
 80102d4:	d11a      	bne.n	801030c <_printf_common+0xc8>
 80102d6:	2000      	movs	r0, #0
 80102d8:	e008      	b.n	80102ec <_printf_common+0xa8>
 80102da:	2301      	movs	r3, #1
 80102dc:	4652      	mov	r2, sl
 80102de:	4649      	mov	r1, r9
 80102e0:	4638      	mov	r0, r7
 80102e2:	47c0      	blx	r8
 80102e4:	3001      	adds	r0, #1
 80102e6:	d103      	bne.n	80102f0 <_printf_common+0xac>
 80102e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80102ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102f0:	3501      	adds	r5, #1
 80102f2:	e7c6      	b.n	8010282 <_printf_common+0x3e>
 80102f4:	18e1      	adds	r1, r4, r3
 80102f6:	1c5a      	adds	r2, r3, #1
 80102f8:	2030      	movs	r0, #48	; 0x30
 80102fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80102fe:	4422      	add	r2, r4
 8010300:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010304:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010308:	3302      	adds	r3, #2
 801030a:	e7c7      	b.n	801029c <_printf_common+0x58>
 801030c:	2301      	movs	r3, #1
 801030e:	4622      	mov	r2, r4
 8010310:	4649      	mov	r1, r9
 8010312:	4638      	mov	r0, r7
 8010314:	47c0      	blx	r8
 8010316:	3001      	adds	r0, #1
 8010318:	d0e6      	beq.n	80102e8 <_printf_common+0xa4>
 801031a:	3601      	adds	r6, #1
 801031c:	e7d9      	b.n	80102d2 <_printf_common+0x8e>
	...

08010320 <_printf_i>:
 8010320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010324:	7e0f      	ldrb	r7, [r1, #24]
 8010326:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010328:	2f78      	cmp	r7, #120	; 0x78
 801032a:	4691      	mov	r9, r2
 801032c:	4680      	mov	r8, r0
 801032e:	460c      	mov	r4, r1
 8010330:	469a      	mov	sl, r3
 8010332:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010336:	d807      	bhi.n	8010348 <_printf_i+0x28>
 8010338:	2f62      	cmp	r7, #98	; 0x62
 801033a:	d80a      	bhi.n	8010352 <_printf_i+0x32>
 801033c:	2f00      	cmp	r7, #0
 801033e:	f000 80d4 	beq.w	80104ea <_printf_i+0x1ca>
 8010342:	2f58      	cmp	r7, #88	; 0x58
 8010344:	f000 80c0 	beq.w	80104c8 <_printf_i+0x1a8>
 8010348:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801034c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010350:	e03a      	b.n	80103c8 <_printf_i+0xa8>
 8010352:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010356:	2b15      	cmp	r3, #21
 8010358:	d8f6      	bhi.n	8010348 <_printf_i+0x28>
 801035a:	a101      	add	r1, pc, #4	; (adr r1, 8010360 <_printf_i+0x40>)
 801035c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010360:	080103b9 	.word	0x080103b9
 8010364:	080103cd 	.word	0x080103cd
 8010368:	08010349 	.word	0x08010349
 801036c:	08010349 	.word	0x08010349
 8010370:	08010349 	.word	0x08010349
 8010374:	08010349 	.word	0x08010349
 8010378:	080103cd 	.word	0x080103cd
 801037c:	08010349 	.word	0x08010349
 8010380:	08010349 	.word	0x08010349
 8010384:	08010349 	.word	0x08010349
 8010388:	08010349 	.word	0x08010349
 801038c:	080104d1 	.word	0x080104d1
 8010390:	080103f9 	.word	0x080103f9
 8010394:	0801048b 	.word	0x0801048b
 8010398:	08010349 	.word	0x08010349
 801039c:	08010349 	.word	0x08010349
 80103a0:	080104f3 	.word	0x080104f3
 80103a4:	08010349 	.word	0x08010349
 80103a8:	080103f9 	.word	0x080103f9
 80103ac:	08010349 	.word	0x08010349
 80103b0:	08010349 	.word	0x08010349
 80103b4:	08010493 	.word	0x08010493
 80103b8:	682b      	ldr	r3, [r5, #0]
 80103ba:	1d1a      	adds	r2, r3, #4
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	602a      	str	r2, [r5, #0]
 80103c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80103c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80103c8:	2301      	movs	r3, #1
 80103ca:	e09f      	b.n	801050c <_printf_i+0x1ec>
 80103cc:	6820      	ldr	r0, [r4, #0]
 80103ce:	682b      	ldr	r3, [r5, #0]
 80103d0:	0607      	lsls	r7, r0, #24
 80103d2:	f103 0104 	add.w	r1, r3, #4
 80103d6:	6029      	str	r1, [r5, #0]
 80103d8:	d501      	bpl.n	80103de <_printf_i+0xbe>
 80103da:	681e      	ldr	r6, [r3, #0]
 80103dc:	e003      	b.n	80103e6 <_printf_i+0xc6>
 80103de:	0646      	lsls	r6, r0, #25
 80103e0:	d5fb      	bpl.n	80103da <_printf_i+0xba>
 80103e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80103e6:	2e00      	cmp	r6, #0
 80103e8:	da03      	bge.n	80103f2 <_printf_i+0xd2>
 80103ea:	232d      	movs	r3, #45	; 0x2d
 80103ec:	4276      	negs	r6, r6
 80103ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80103f2:	485a      	ldr	r0, [pc, #360]	; (801055c <_printf_i+0x23c>)
 80103f4:	230a      	movs	r3, #10
 80103f6:	e012      	b.n	801041e <_printf_i+0xfe>
 80103f8:	682b      	ldr	r3, [r5, #0]
 80103fa:	6820      	ldr	r0, [r4, #0]
 80103fc:	1d19      	adds	r1, r3, #4
 80103fe:	6029      	str	r1, [r5, #0]
 8010400:	0605      	lsls	r5, r0, #24
 8010402:	d501      	bpl.n	8010408 <_printf_i+0xe8>
 8010404:	681e      	ldr	r6, [r3, #0]
 8010406:	e002      	b.n	801040e <_printf_i+0xee>
 8010408:	0641      	lsls	r1, r0, #25
 801040a:	d5fb      	bpl.n	8010404 <_printf_i+0xe4>
 801040c:	881e      	ldrh	r6, [r3, #0]
 801040e:	4853      	ldr	r0, [pc, #332]	; (801055c <_printf_i+0x23c>)
 8010410:	2f6f      	cmp	r7, #111	; 0x6f
 8010412:	bf0c      	ite	eq
 8010414:	2308      	moveq	r3, #8
 8010416:	230a      	movne	r3, #10
 8010418:	2100      	movs	r1, #0
 801041a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801041e:	6865      	ldr	r5, [r4, #4]
 8010420:	60a5      	str	r5, [r4, #8]
 8010422:	2d00      	cmp	r5, #0
 8010424:	bfa2      	ittt	ge
 8010426:	6821      	ldrge	r1, [r4, #0]
 8010428:	f021 0104 	bicge.w	r1, r1, #4
 801042c:	6021      	strge	r1, [r4, #0]
 801042e:	b90e      	cbnz	r6, 8010434 <_printf_i+0x114>
 8010430:	2d00      	cmp	r5, #0
 8010432:	d04b      	beq.n	80104cc <_printf_i+0x1ac>
 8010434:	4615      	mov	r5, r2
 8010436:	fbb6 f1f3 	udiv	r1, r6, r3
 801043a:	fb03 6711 	mls	r7, r3, r1, r6
 801043e:	5dc7      	ldrb	r7, [r0, r7]
 8010440:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010444:	4637      	mov	r7, r6
 8010446:	42bb      	cmp	r3, r7
 8010448:	460e      	mov	r6, r1
 801044a:	d9f4      	bls.n	8010436 <_printf_i+0x116>
 801044c:	2b08      	cmp	r3, #8
 801044e:	d10b      	bne.n	8010468 <_printf_i+0x148>
 8010450:	6823      	ldr	r3, [r4, #0]
 8010452:	07de      	lsls	r6, r3, #31
 8010454:	d508      	bpl.n	8010468 <_printf_i+0x148>
 8010456:	6923      	ldr	r3, [r4, #16]
 8010458:	6861      	ldr	r1, [r4, #4]
 801045a:	4299      	cmp	r1, r3
 801045c:	bfde      	ittt	le
 801045e:	2330      	movle	r3, #48	; 0x30
 8010460:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010464:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010468:	1b52      	subs	r2, r2, r5
 801046a:	6122      	str	r2, [r4, #16]
 801046c:	f8cd a000 	str.w	sl, [sp]
 8010470:	464b      	mov	r3, r9
 8010472:	aa03      	add	r2, sp, #12
 8010474:	4621      	mov	r1, r4
 8010476:	4640      	mov	r0, r8
 8010478:	f7ff fee4 	bl	8010244 <_printf_common>
 801047c:	3001      	adds	r0, #1
 801047e:	d14a      	bne.n	8010516 <_printf_i+0x1f6>
 8010480:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010484:	b004      	add	sp, #16
 8010486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801048a:	6823      	ldr	r3, [r4, #0]
 801048c:	f043 0320 	orr.w	r3, r3, #32
 8010490:	6023      	str	r3, [r4, #0]
 8010492:	4833      	ldr	r0, [pc, #204]	; (8010560 <_printf_i+0x240>)
 8010494:	2778      	movs	r7, #120	; 0x78
 8010496:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801049a:	6823      	ldr	r3, [r4, #0]
 801049c:	6829      	ldr	r1, [r5, #0]
 801049e:	061f      	lsls	r7, r3, #24
 80104a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80104a4:	d402      	bmi.n	80104ac <_printf_i+0x18c>
 80104a6:	065f      	lsls	r7, r3, #25
 80104a8:	bf48      	it	mi
 80104aa:	b2b6      	uxthmi	r6, r6
 80104ac:	07df      	lsls	r7, r3, #31
 80104ae:	bf48      	it	mi
 80104b0:	f043 0320 	orrmi.w	r3, r3, #32
 80104b4:	6029      	str	r1, [r5, #0]
 80104b6:	bf48      	it	mi
 80104b8:	6023      	strmi	r3, [r4, #0]
 80104ba:	b91e      	cbnz	r6, 80104c4 <_printf_i+0x1a4>
 80104bc:	6823      	ldr	r3, [r4, #0]
 80104be:	f023 0320 	bic.w	r3, r3, #32
 80104c2:	6023      	str	r3, [r4, #0]
 80104c4:	2310      	movs	r3, #16
 80104c6:	e7a7      	b.n	8010418 <_printf_i+0xf8>
 80104c8:	4824      	ldr	r0, [pc, #144]	; (801055c <_printf_i+0x23c>)
 80104ca:	e7e4      	b.n	8010496 <_printf_i+0x176>
 80104cc:	4615      	mov	r5, r2
 80104ce:	e7bd      	b.n	801044c <_printf_i+0x12c>
 80104d0:	682b      	ldr	r3, [r5, #0]
 80104d2:	6826      	ldr	r6, [r4, #0]
 80104d4:	6961      	ldr	r1, [r4, #20]
 80104d6:	1d18      	adds	r0, r3, #4
 80104d8:	6028      	str	r0, [r5, #0]
 80104da:	0635      	lsls	r5, r6, #24
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	d501      	bpl.n	80104e4 <_printf_i+0x1c4>
 80104e0:	6019      	str	r1, [r3, #0]
 80104e2:	e002      	b.n	80104ea <_printf_i+0x1ca>
 80104e4:	0670      	lsls	r0, r6, #25
 80104e6:	d5fb      	bpl.n	80104e0 <_printf_i+0x1c0>
 80104e8:	8019      	strh	r1, [r3, #0]
 80104ea:	2300      	movs	r3, #0
 80104ec:	6123      	str	r3, [r4, #16]
 80104ee:	4615      	mov	r5, r2
 80104f0:	e7bc      	b.n	801046c <_printf_i+0x14c>
 80104f2:	682b      	ldr	r3, [r5, #0]
 80104f4:	1d1a      	adds	r2, r3, #4
 80104f6:	602a      	str	r2, [r5, #0]
 80104f8:	681d      	ldr	r5, [r3, #0]
 80104fa:	6862      	ldr	r2, [r4, #4]
 80104fc:	2100      	movs	r1, #0
 80104fe:	4628      	mov	r0, r5
 8010500:	f7ef fe9e 	bl	8000240 <memchr>
 8010504:	b108      	cbz	r0, 801050a <_printf_i+0x1ea>
 8010506:	1b40      	subs	r0, r0, r5
 8010508:	6060      	str	r0, [r4, #4]
 801050a:	6863      	ldr	r3, [r4, #4]
 801050c:	6123      	str	r3, [r4, #16]
 801050e:	2300      	movs	r3, #0
 8010510:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010514:	e7aa      	b.n	801046c <_printf_i+0x14c>
 8010516:	6923      	ldr	r3, [r4, #16]
 8010518:	462a      	mov	r2, r5
 801051a:	4649      	mov	r1, r9
 801051c:	4640      	mov	r0, r8
 801051e:	47d0      	blx	sl
 8010520:	3001      	adds	r0, #1
 8010522:	d0ad      	beq.n	8010480 <_printf_i+0x160>
 8010524:	6823      	ldr	r3, [r4, #0]
 8010526:	079b      	lsls	r3, r3, #30
 8010528:	d413      	bmi.n	8010552 <_printf_i+0x232>
 801052a:	68e0      	ldr	r0, [r4, #12]
 801052c:	9b03      	ldr	r3, [sp, #12]
 801052e:	4298      	cmp	r0, r3
 8010530:	bfb8      	it	lt
 8010532:	4618      	movlt	r0, r3
 8010534:	e7a6      	b.n	8010484 <_printf_i+0x164>
 8010536:	2301      	movs	r3, #1
 8010538:	4632      	mov	r2, r6
 801053a:	4649      	mov	r1, r9
 801053c:	4640      	mov	r0, r8
 801053e:	47d0      	blx	sl
 8010540:	3001      	adds	r0, #1
 8010542:	d09d      	beq.n	8010480 <_printf_i+0x160>
 8010544:	3501      	adds	r5, #1
 8010546:	68e3      	ldr	r3, [r4, #12]
 8010548:	9903      	ldr	r1, [sp, #12]
 801054a:	1a5b      	subs	r3, r3, r1
 801054c:	42ab      	cmp	r3, r5
 801054e:	dcf2      	bgt.n	8010536 <_printf_i+0x216>
 8010550:	e7eb      	b.n	801052a <_printf_i+0x20a>
 8010552:	2500      	movs	r5, #0
 8010554:	f104 0619 	add.w	r6, r4, #25
 8010558:	e7f5      	b.n	8010546 <_printf_i+0x226>
 801055a:	bf00      	nop
 801055c:	08011215 	.word	0x08011215
 8010560:	08011226 	.word	0x08011226

08010564 <__sflush_r>:
 8010564:	898a      	ldrh	r2, [r1, #12]
 8010566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801056a:	4605      	mov	r5, r0
 801056c:	0710      	lsls	r0, r2, #28
 801056e:	460c      	mov	r4, r1
 8010570:	d458      	bmi.n	8010624 <__sflush_r+0xc0>
 8010572:	684b      	ldr	r3, [r1, #4]
 8010574:	2b00      	cmp	r3, #0
 8010576:	dc05      	bgt.n	8010584 <__sflush_r+0x20>
 8010578:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801057a:	2b00      	cmp	r3, #0
 801057c:	dc02      	bgt.n	8010584 <__sflush_r+0x20>
 801057e:	2000      	movs	r0, #0
 8010580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010584:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010586:	2e00      	cmp	r6, #0
 8010588:	d0f9      	beq.n	801057e <__sflush_r+0x1a>
 801058a:	2300      	movs	r3, #0
 801058c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010590:	682f      	ldr	r7, [r5, #0]
 8010592:	6a21      	ldr	r1, [r4, #32]
 8010594:	602b      	str	r3, [r5, #0]
 8010596:	d032      	beq.n	80105fe <__sflush_r+0x9a>
 8010598:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801059a:	89a3      	ldrh	r3, [r4, #12]
 801059c:	075a      	lsls	r2, r3, #29
 801059e:	d505      	bpl.n	80105ac <__sflush_r+0x48>
 80105a0:	6863      	ldr	r3, [r4, #4]
 80105a2:	1ac0      	subs	r0, r0, r3
 80105a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80105a6:	b10b      	cbz	r3, 80105ac <__sflush_r+0x48>
 80105a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80105aa:	1ac0      	subs	r0, r0, r3
 80105ac:	2300      	movs	r3, #0
 80105ae:	4602      	mov	r2, r0
 80105b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80105b2:	6a21      	ldr	r1, [r4, #32]
 80105b4:	4628      	mov	r0, r5
 80105b6:	47b0      	blx	r6
 80105b8:	1c43      	adds	r3, r0, #1
 80105ba:	89a3      	ldrh	r3, [r4, #12]
 80105bc:	d106      	bne.n	80105cc <__sflush_r+0x68>
 80105be:	6829      	ldr	r1, [r5, #0]
 80105c0:	291d      	cmp	r1, #29
 80105c2:	d82b      	bhi.n	801061c <__sflush_r+0xb8>
 80105c4:	4a29      	ldr	r2, [pc, #164]	; (801066c <__sflush_r+0x108>)
 80105c6:	410a      	asrs	r2, r1
 80105c8:	07d6      	lsls	r6, r2, #31
 80105ca:	d427      	bmi.n	801061c <__sflush_r+0xb8>
 80105cc:	2200      	movs	r2, #0
 80105ce:	6062      	str	r2, [r4, #4]
 80105d0:	04d9      	lsls	r1, r3, #19
 80105d2:	6922      	ldr	r2, [r4, #16]
 80105d4:	6022      	str	r2, [r4, #0]
 80105d6:	d504      	bpl.n	80105e2 <__sflush_r+0x7e>
 80105d8:	1c42      	adds	r2, r0, #1
 80105da:	d101      	bne.n	80105e0 <__sflush_r+0x7c>
 80105dc:	682b      	ldr	r3, [r5, #0]
 80105de:	b903      	cbnz	r3, 80105e2 <__sflush_r+0x7e>
 80105e0:	6560      	str	r0, [r4, #84]	; 0x54
 80105e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80105e4:	602f      	str	r7, [r5, #0]
 80105e6:	2900      	cmp	r1, #0
 80105e8:	d0c9      	beq.n	801057e <__sflush_r+0x1a>
 80105ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80105ee:	4299      	cmp	r1, r3
 80105f0:	d002      	beq.n	80105f8 <__sflush_r+0x94>
 80105f2:	4628      	mov	r0, r5
 80105f4:	f7ff fb3e 	bl	800fc74 <_free_r>
 80105f8:	2000      	movs	r0, #0
 80105fa:	6360      	str	r0, [r4, #52]	; 0x34
 80105fc:	e7c0      	b.n	8010580 <__sflush_r+0x1c>
 80105fe:	2301      	movs	r3, #1
 8010600:	4628      	mov	r0, r5
 8010602:	47b0      	blx	r6
 8010604:	1c41      	adds	r1, r0, #1
 8010606:	d1c8      	bne.n	801059a <__sflush_r+0x36>
 8010608:	682b      	ldr	r3, [r5, #0]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d0c5      	beq.n	801059a <__sflush_r+0x36>
 801060e:	2b1d      	cmp	r3, #29
 8010610:	d001      	beq.n	8010616 <__sflush_r+0xb2>
 8010612:	2b16      	cmp	r3, #22
 8010614:	d101      	bne.n	801061a <__sflush_r+0xb6>
 8010616:	602f      	str	r7, [r5, #0]
 8010618:	e7b1      	b.n	801057e <__sflush_r+0x1a>
 801061a:	89a3      	ldrh	r3, [r4, #12]
 801061c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010620:	81a3      	strh	r3, [r4, #12]
 8010622:	e7ad      	b.n	8010580 <__sflush_r+0x1c>
 8010624:	690f      	ldr	r7, [r1, #16]
 8010626:	2f00      	cmp	r7, #0
 8010628:	d0a9      	beq.n	801057e <__sflush_r+0x1a>
 801062a:	0793      	lsls	r3, r2, #30
 801062c:	680e      	ldr	r6, [r1, #0]
 801062e:	bf08      	it	eq
 8010630:	694b      	ldreq	r3, [r1, #20]
 8010632:	600f      	str	r7, [r1, #0]
 8010634:	bf18      	it	ne
 8010636:	2300      	movne	r3, #0
 8010638:	eba6 0807 	sub.w	r8, r6, r7
 801063c:	608b      	str	r3, [r1, #8]
 801063e:	f1b8 0f00 	cmp.w	r8, #0
 8010642:	dd9c      	ble.n	801057e <__sflush_r+0x1a>
 8010644:	6a21      	ldr	r1, [r4, #32]
 8010646:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010648:	4643      	mov	r3, r8
 801064a:	463a      	mov	r2, r7
 801064c:	4628      	mov	r0, r5
 801064e:	47b0      	blx	r6
 8010650:	2800      	cmp	r0, #0
 8010652:	dc06      	bgt.n	8010662 <__sflush_r+0xfe>
 8010654:	89a3      	ldrh	r3, [r4, #12]
 8010656:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801065a:	81a3      	strh	r3, [r4, #12]
 801065c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010660:	e78e      	b.n	8010580 <__sflush_r+0x1c>
 8010662:	4407      	add	r7, r0
 8010664:	eba8 0800 	sub.w	r8, r8, r0
 8010668:	e7e9      	b.n	801063e <__sflush_r+0xda>
 801066a:	bf00      	nop
 801066c:	dfbffffe 	.word	0xdfbffffe

08010670 <_fflush_r>:
 8010670:	b538      	push	{r3, r4, r5, lr}
 8010672:	690b      	ldr	r3, [r1, #16]
 8010674:	4605      	mov	r5, r0
 8010676:	460c      	mov	r4, r1
 8010678:	b913      	cbnz	r3, 8010680 <_fflush_r+0x10>
 801067a:	2500      	movs	r5, #0
 801067c:	4628      	mov	r0, r5
 801067e:	bd38      	pop	{r3, r4, r5, pc}
 8010680:	b118      	cbz	r0, 801068a <_fflush_r+0x1a>
 8010682:	6a03      	ldr	r3, [r0, #32]
 8010684:	b90b      	cbnz	r3, 801068a <_fflush_r+0x1a>
 8010686:	f7ff f9fb 	bl	800fa80 <__sinit>
 801068a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d0f3      	beq.n	801067a <_fflush_r+0xa>
 8010692:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010694:	07d0      	lsls	r0, r2, #31
 8010696:	d404      	bmi.n	80106a2 <_fflush_r+0x32>
 8010698:	0599      	lsls	r1, r3, #22
 801069a:	d402      	bmi.n	80106a2 <_fflush_r+0x32>
 801069c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801069e:	f7ff fae6 	bl	800fc6e <__retarget_lock_acquire_recursive>
 80106a2:	4628      	mov	r0, r5
 80106a4:	4621      	mov	r1, r4
 80106a6:	f7ff ff5d 	bl	8010564 <__sflush_r>
 80106aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80106ac:	07da      	lsls	r2, r3, #31
 80106ae:	4605      	mov	r5, r0
 80106b0:	d4e4      	bmi.n	801067c <_fflush_r+0xc>
 80106b2:	89a3      	ldrh	r3, [r4, #12]
 80106b4:	059b      	lsls	r3, r3, #22
 80106b6:	d4e1      	bmi.n	801067c <_fflush_r+0xc>
 80106b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80106ba:	f7ff fad9 	bl	800fc70 <__retarget_lock_release_recursive>
 80106be:	e7dd      	b.n	801067c <_fflush_r+0xc>

080106c0 <__sread>:
 80106c0:	b510      	push	{r4, lr}
 80106c2:	460c      	mov	r4, r1
 80106c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106c8:	f000 f9c2 	bl	8010a50 <_read_r>
 80106cc:	2800      	cmp	r0, #0
 80106ce:	bfab      	itete	ge
 80106d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80106d2:	89a3      	ldrhlt	r3, [r4, #12]
 80106d4:	181b      	addge	r3, r3, r0
 80106d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80106da:	bfac      	ite	ge
 80106dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80106de:	81a3      	strhlt	r3, [r4, #12]
 80106e0:	bd10      	pop	{r4, pc}

080106e2 <__swrite>:
 80106e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106e6:	461f      	mov	r7, r3
 80106e8:	898b      	ldrh	r3, [r1, #12]
 80106ea:	05db      	lsls	r3, r3, #23
 80106ec:	4605      	mov	r5, r0
 80106ee:	460c      	mov	r4, r1
 80106f0:	4616      	mov	r6, r2
 80106f2:	d505      	bpl.n	8010700 <__swrite+0x1e>
 80106f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106f8:	2302      	movs	r3, #2
 80106fa:	2200      	movs	r2, #0
 80106fc:	f000 f996 	bl	8010a2c <_lseek_r>
 8010700:	89a3      	ldrh	r3, [r4, #12]
 8010702:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010706:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801070a:	81a3      	strh	r3, [r4, #12]
 801070c:	4632      	mov	r2, r6
 801070e:	463b      	mov	r3, r7
 8010710:	4628      	mov	r0, r5
 8010712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010716:	f000 b9ad 	b.w	8010a74 <_write_r>

0801071a <__sseek>:
 801071a:	b510      	push	{r4, lr}
 801071c:	460c      	mov	r4, r1
 801071e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010722:	f000 f983 	bl	8010a2c <_lseek_r>
 8010726:	1c43      	adds	r3, r0, #1
 8010728:	89a3      	ldrh	r3, [r4, #12]
 801072a:	bf15      	itete	ne
 801072c:	6560      	strne	r0, [r4, #84]	; 0x54
 801072e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010732:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010736:	81a3      	strheq	r3, [r4, #12]
 8010738:	bf18      	it	ne
 801073a:	81a3      	strhne	r3, [r4, #12]
 801073c:	bd10      	pop	{r4, pc}

0801073e <__sclose>:
 801073e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010742:	f000 b941 	b.w	80109c8 <_close_r>

08010746 <_realloc_r>:
 8010746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801074a:	4680      	mov	r8, r0
 801074c:	4614      	mov	r4, r2
 801074e:	460e      	mov	r6, r1
 8010750:	b921      	cbnz	r1, 801075c <_realloc_r+0x16>
 8010752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010756:	4611      	mov	r1, r2
 8010758:	f7ff b846 	b.w	800f7e8 <_malloc_r>
 801075c:	b92a      	cbnz	r2, 801076a <_realloc_r+0x24>
 801075e:	f7ff fa89 	bl	800fc74 <_free_r>
 8010762:	4625      	mov	r5, r4
 8010764:	4628      	mov	r0, r5
 8010766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801076a:	f000 f9a3 	bl	8010ab4 <_malloc_usable_size_r>
 801076e:	4284      	cmp	r4, r0
 8010770:	4607      	mov	r7, r0
 8010772:	d802      	bhi.n	801077a <_realloc_r+0x34>
 8010774:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010778:	d812      	bhi.n	80107a0 <_realloc_r+0x5a>
 801077a:	4621      	mov	r1, r4
 801077c:	4640      	mov	r0, r8
 801077e:	f7ff f833 	bl	800f7e8 <_malloc_r>
 8010782:	4605      	mov	r5, r0
 8010784:	2800      	cmp	r0, #0
 8010786:	d0ed      	beq.n	8010764 <_realloc_r+0x1e>
 8010788:	42bc      	cmp	r4, r7
 801078a:	4622      	mov	r2, r4
 801078c:	4631      	mov	r1, r6
 801078e:	bf28      	it	cs
 8010790:	463a      	movcs	r2, r7
 8010792:	f000 f981 	bl	8010a98 <memcpy>
 8010796:	4631      	mov	r1, r6
 8010798:	4640      	mov	r0, r8
 801079a:	f7ff fa6b 	bl	800fc74 <_free_r>
 801079e:	e7e1      	b.n	8010764 <_realloc_r+0x1e>
 80107a0:	4635      	mov	r5, r6
 80107a2:	e7df      	b.n	8010764 <_realloc_r+0x1e>

080107a4 <__swbuf_r>:
 80107a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107a6:	460e      	mov	r6, r1
 80107a8:	4614      	mov	r4, r2
 80107aa:	4605      	mov	r5, r0
 80107ac:	b118      	cbz	r0, 80107b6 <__swbuf_r+0x12>
 80107ae:	6a03      	ldr	r3, [r0, #32]
 80107b0:	b90b      	cbnz	r3, 80107b6 <__swbuf_r+0x12>
 80107b2:	f7ff f965 	bl	800fa80 <__sinit>
 80107b6:	69a3      	ldr	r3, [r4, #24]
 80107b8:	60a3      	str	r3, [r4, #8]
 80107ba:	89a3      	ldrh	r3, [r4, #12]
 80107bc:	071a      	lsls	r2, r3, #28
 80107be:	d525      	bpl.n	801080c <__swbuf_r+0x68>
 80107c0:	6923      	ldr	r3, [r4, #16]
 80107c2:	b31b      	cbz	r3, 801080c <__swbuf_r+0x68>
 80107c4:	6823      	ldr	r3, [r4, #0]
 80107c6:	6922      	ldr	r2, [r4, #16]
 80107c8:	1a98      	subs	r0, r3, r2
 80107ca:	6963      	ldr	r3, [r4, #20]
 80107cc:	b2f6      	uxtb	r6, r6
 80107ce:	4283      	cmp	r3, r0
 80107d0:	4637      	mov	r7, r6
 80107d2:	dc04      	bgt.n	80107de <__swbuf_r+0x3a>
 80107d4:	4621      	mov	r1, r4
 80107d6:	4628      	mov	r0, r5
 80107d8:	f7ff ff4a 	bl	8010670 <_fflush_r>
 80107dc:	b9e0      	cbnz	r0, 8010818 <__swbuf_r+0x74>
 80107de:	68a3      	ldr	r3, [r4, #8]
 80107e0:	3b01      	subs	r3, #1
 80107e2:	60a3      	str	r3, [r4, #8]
 80107e4:	6823      	ldr	r3, [r4, #0]
 80107e6:	1c5a      	adds	r2, r3, #1
 80107e8:	6022      	str	r2, [r4, #0]
 80107ea:	701e      	strb	r6, [r3, #0]
 80107ec:	6962      	ldr	r2, [r4, #20]
 80107ee:	1c43      	adds	r3, r0, #1
 80107f0:	429a      	cmp	r2, r3
 80107f2:	d004      	beq.n	80107fe <__swbuf_r+0x5a>
 80107f4:	89a3      	ldrh	r3, [r4, #12]
 80107f6:	07db      	lsls	r3, r3, #31
 80107f8:	d506      	bpl.n	8010808 <__swbuf_r+0x64>
 80107fa:	2e0a      	cmp	r6, #10
 80107fc:	d104      	bne.n	8010808 <__swbuf_r+0x64>
 80107fe:	4621      	mov	r1, r4
 8010800:	4628      	mov	r0, r5
 8010802:	f7ff ff35 	bl	8010670 <_fflush_r>
 8010806:	b938      	cbnz	r0, 8010818 <__swbuf_r+0x74>
 8010808:	4638      	mov	r0, r7
 801080a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801080c:	4621      	mov	r1, r4
 801080e:	4628      	mov	r0, r5
 8010810:	f000 f806 	bl	8010820 <__swsetup_r>
 8010814:	2800      	cmp	r0, #0
 8010816:	d0d5      	beq.n	80107c4 <__swbuf_r+0x20>
 8010818:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801081c:	e7f4      	b.n	8010808 <__swbuf_r+0x64>
	...

08010820 <__swsetup_r>:
 8010820:	b538      	push	{r3, r4, r5, lr}
 8010822:	4b2a      	ldr	r3, [pc, #168]	; (80108cc <__swsetup_r+0xac>)
 8010824:	4605      	mov	r5, r0
 8010826:	6818      	ldr	r0, [r3, #0]
 8010828:	460c      	mov	r4, r1
 801082a:	b118      	cbz	r0, 8010834 <__swsetup_r+0x14>
 801082c:	6a03      	ldr	r3, [r0, #32]
 801082e:	b90b      	cbnz	r3, 8010834 <__swsetup_r+0x14>
 8010830:	f7ff f926 	bl	800fa80 <__sinit>
 8010834:	89a3      	ldrh	r3, [r4, #12]
 8010836:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801083a:	0718      	lsls	r0, r3, #28
 801083c:	d422      	bmi.n	8010884 <__swsetup_r+0x64>
 801083e:	06d9      	lsls	r1, r3, #27
 8010840:	d407      	bmi.n	8010852 <__swsetup_r+0x32>
 8010842:	2309      	movs	r3, #9
 8010844:	602b      	str	r3, [r5, #0]
 8010846:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801084a:	81a3      	strh	r3, [r4, #12]
 801084c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010850:	e034      	b.n	80108bc <__swsetup_r+0x9c>
 8010852:	0758      	lsls	r0, r3, #29
 8010854:	d512      	bpl.n	801087c <__swsetup_r+0x5c>
 8010856:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010858:	b141      	cbz	r1, 801086c <__swsetup_r+0x4c>
 801085a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801085e:	4299      	cmp	r1, r3
 8010860:	d002      	beq.n	8010868 <__swsetup_r+0x48>
 8010862:	4628      	mov	r0, r5
 8010864:	f7ff fa06 	bl	800fc74 <_free_r>
 8010868:	2300      	movs	r3, #0
 801086a:	6363      	str	r3, [r4, #52]	; 0x34
 801086c:	89a3      	ldrh	r3, [r4, #12]
 801086e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010872:	81a3      	strh	r3, [r4, #12]
 8010874:	2300      	movs	r3, #0
 8010876:	6063      	str	r3, [r4, #4]
 8010878:	6923      	ldr	r3, [r4, #16]
 801087a:	6023      	str	r3, [r4, #0]
 801087c:	89a3      	ldrh	r3, [r4, #12]
 801087e:	f043 0308 	orr.w	r3, r3, #8
 8010882:	81a3      	strh	r3, [r4, #12]
 8010884:	6923      	ldr	r3, [r4, #16]
 8010886:	b94b      	cbnz	r3, 801089c <__swsetup_r+0x7c>
 8010888:	89a3      	ldrh	r3, [r4, #12]
 801088a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801088e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010892:	d003      	beq.n	801089c <__swsetup_r+0x7c>
 8010894:	4621      	mov	r1, r4
 8010896:	4628      	mov	r0, r5
 8010898:	f000 f840 	bl	801091c <__smakebuf_r>
 801089c:	89a0      	ldrh	r0, [r4, #12]
 801089e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80108a2:	f010 0301 	ands.w	r3, r0, #1
 80108a6:	d00a      	beq.n	80108be <__swsetup_r+0x9e>
 80108a8:	2300      	movs	r3, #0
 80108aa:	60a3      	str	r3, [r4, #8]
 80108ac:	6963      	ldr	r3, [r4, #20]
 80108ae:	425b      	negs	r3, r3
 80108b0:	61a3      	str	r3, [r4, #24]
 80108b2:	6923      	ldr	r3, [r4, #16]
 80108b4:	b943      	cbnz	r3, 80108c8 <__swsetup_r+0xa8>
 80108b6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80108ba:	d1c4      	bne.n	8010846 <__swsetup_r+0x26>
 80108bc:	bd38      	pop	{r3, r4, r5, pc}
 80108be:	0781      	lsls	r1, r0, #30
 80108c0:	bf58      	it	pl
 80108c2:	6963      	ldrpl	r3, [r4, #20]
 80108c4:	60a3      	str	r3, [r4, #8]
 80108c6:	e7f4      	b.n	80108b2 <__swsetup_r+0x92>
 80108c8:	2000      	movs	r0, #0
 80108ca:	e7f7      	b.n	80108bc <__swsetup_r+0x9c>
 80108cc:	20000164 	.word	0x20000164

080108d0 <__swhatbuf_r>:
 80108d0:	b570      	push	{r4, r5, r6, lr}
 80108d2:	460c      	mov	r4, r1
 80108d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108d8:	2900      	cmp	r1, #0
 80108da:	b096      	sub	sp, #88	; 0x58
 80108dc:	4615      	mov	r5, r2
 80108de:	461e      	mov	r6, r3
 80108e0:	da0d      	bge.n	80108fe <__swhatbuf_r+0x2e>
 80108e2:	89a3      	ldrh	r3, [r4, #12]
 80108e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80108e8:	f04f 0100 	mov.w	r1, #0
 80108ec:	bf0c      	ite	eq
 80108ee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80108f2:	2340      	movne	r3, #64	; 0x40
 80108f4:	2000      	movs	r0, #0
 80108f6:	6031      	str	r1, [r6, #0]
 80108f8:	602b      	str	r3, [r5, #0]
 80108fa:	b016      	add	sp, #88	; 0x58
 80108fc:	bd70      	pop	{r4, r5, r6, pc}
 80108fe:	466a      	mov	r2, sp
 8010900:	f000 f872 	bl	80109e8 <_fstat_r>
 8010904:	2800      	cmp	r0, #0
 8010906:	dbec      	blt.n	80108e2 <__swhatbuf_r+0x12>
 8010908:	9901      	ldr	r1, [sp, #4]
 801090a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801090e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010912:	4259      	negs	r1, r3
 8010914:	4159      	adcs	r1, r3
 8010916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801091a:	e7eb      	b.n	80108f4 <__swhatbuf_r+0x24>

0801091c <__smakebuf_r>:
 801091c:	898b      	ldrh	r3, [r1, #12]
 801091e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010920:	079d      	lsls	r5, r3, #30
 8010922:	4606      	mov	r6, r0
 8010924:	460c      	mov	r4, r1
 8010926:	d507      	bpl.n	8010938 <__smakebuf_r+0x1c>
 8010928:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801092c:	6023      	str	r3, [r4, #0]
 801092e:	6123      	str	r3, [r4, #16]
 8010930:	2301      	movs	r3, #1
 8010932:	6163      	str	r3, [r4, #20]
 8010934:	b002      	add	sp, #8
 8010936:	bd70      	pop	{r4, r5, r6, pc}
 8010938:	ab01      	add	r3, sp, #4
 801093a:	466a      	mov	r2, sp
 801093c:	f7ff ffc8 	bl	80108d0 <__swhatbuf_r>
 8010940:	9900      	ldr	r1, [sp, #0]
 8010942:	4605      	mov	r5, r0
 8010944:	4630      	mov	r0, r6
 8010946:	f7fe ff4f 	bl	800f7e8 <_malloc_r>
 801094a:	b948      	cbnz	r0, 8010960 <__smakebuf_r+0x44>
 801094c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010950:	059a      	lsls	r2, r3, #22
 8010952:	d4ef      	bmi.n	8010934 <__smakebuf_r+0x18>
 8010954:	f023 0303 	bic.w	r3, r3, #3
 8010958:	f043 0302 	orr.w	r3, r3, #2
 801095c:	81a3      	strh	r3, [r4, #12]
 801095e:	e7e3      	b.n	8010928 <__smakebuf_r+0xc>
 8010960:	89a3      	ldrh	r3, [r4, #12]
 8010962:	6020      	str	r0, [r4, #0]
 8010964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010968:	81a3      	strh	r3, [r4, #12]
 801096a:	9b00      	ldr	r3, [sp, #0]
 801096c:	6163      	str	r3, [r4, #20]
 801096e:	9b01      	ldr	r3, [sp, #4]
 8010970:	6120      	str	r0, [r4, #16]
 8010972:	b15b      	cbz	r3, 801098c <__smakebuf_r+0x70>
 8010974:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010978:	4630      	mov	r0, r6
 801097a:	f000 f847 	bl	8010a0c <_isatty_r>
 801097e:	b128      	cbz	r0, 801098c <__smakebuf_r+0x70>
 8010980:	89a3      	ldrh	r3, [r4, #12]
 8010982:	f023 0303 	bic.w	r3, r3, #3
 8010986:	f043 0301 	orr.w	r3, r3, #1
 801098a:	81a3      	strh	r3, [r4, #12]
 801098c:	89a3      	ldrh	r3, [r4, #12]
 801098e:	431d      	orrs	r5, r3
 8010990:	81a5      	strh	r5, [r4, #12]
 8010992:	e7cf      	b.n	8010934 <__smakebuf_r+0x18>

08010994 <memmove>:
 8010994:	4288      	cmp	r0, r1
 8010996:	b510      	push	{r4, lr}
 8010998:	eb01 0402 	add.w	r4, r1, r2
 801099c:	d902      	bls.n	80109a4 <memmove+0x10>
 801099e:	4284      	cmp	r4, r0
 80109a0:	4623      	mov	r3, r4
 80109a2:	d807      	bhi.n	80109b4 <memmove+0x20>
 80109a4:	1e43      	subs	r3, r0, #1
 80109a6:	42a1      	cmp	r1, r4
 80109a8:	d008      	beq.n	80109bc <memmove+0x28>
 80109aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80109ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80109b2:	e7f8      	b.n	80109a6 <memmove+0x12>
 80109b4:	4402      	add	r2, r0
 80109b6:	4601      	mov	r1, r0
 80109b8:	428a      	cmp	r2, r1
 80109ba:	d100      	bne.n	80109be <memmove+0x2a>
 80109bc:	bd10      	pop	{r4, pc}
 80109be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80109c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80109c6:	e7f7      	b.n	80109b8 <memmove+0x24>

080109c8 <_close_r>:
 80109c8:	b538      	push	{r3, r4, r5, lr}
 80109ca:	4d06      	ldr	r5, [pc, #24]	; (80109e4 <_close_r+0x1c>)
 80109cc:	2300      	movs	r3, #0
 80109ce:	4604      	mov	r4, r0
 80109d0:	4608      	mov	r0, r1
 80109d2:	602b      	str	r3, [r5, #0]
 80109d4:	f7f0 fd15 	bl	8001402 <_close>
 80109d8:	1c43      	adds	r3, r0, #1
 80109da:	d102      	bne.n	80109e2 <_close_r+0x1a>
 80109dc:	682b      	ldr	r3, [r5, #0]
 80109de:	b103      	cbz	r3, 80109e2 <_close_r+0x1a>
 80109e0:	6023      	str	r3, [r4, #0]
 80109e2:	bd38      	pop	{r3, r4, r5, pc}
 80109e4:	20005014 	.word	0x20005014

080109e8 <_fstat_r>:
 80109e8:	b538      	push	{r3, r4, r5, lr}
 80109ea:	4d07      	ldr	r5, [pc, #28]	; (8010a08 <_fstat_r+0x20>)
 80109ec:	2300      	movs	r3, #0
 80109ee:	4604      	mov	r4, r0
 80109f0:	4608      	mov	r0, r1
 80109f2:	4611      	mov	r1, r2
 80109f4:	602b      	str	r3, [r5, #0]
 80109f6:	f7f0 fd10 	bl	800141a <_fstat>
 80109fa:	1c43      	adds	r3, r0, #1
 80109fc:	d102      	bne.n	8010a04 <_fstat_r+0x1c>
 80109fe:	682b      	ldr	r3, [r5, #0]
 8010a00:	b103      	cbz	r3, 8010a04 <_fstat_r+0x1c>
 8010a02:	6023      	str	r3, [r4, #0]
 8010a04:	bd38      	pop	{r3, r4, r5, pc}
 8010a06:	bf00      	nop
 8010a08:	20005014 	.word	0x20005014

08010a0c <_isatty_r>:
 8010a0c:	b538      	push	{r3, r4, r5, lr}
 8010a0e:	4d06      	ldr	r5, [pc, #24]	; (8010a28 <_isatty_r+0x1c>)
 8010a10:	2300      	movs	r3, #0
 8010a12:	4604      	mov	r4, r0
 8010a14:	4608      	mov	r0, r1
 8010a16:	602b      	str	r3, [r5, #0]
 8010a18:	f7f0 fd0f 	bl	800143a <_isatty>
 8010a1c:	1c43      	adds	r3, r0, #1
 8010a1e:	d102      	bne.n	8010a26 <_isatty_r+0x1a>
 8010a20:	682b      	ldr	r3, [r5, #0]
 8010a22:	b103      	cbz	r3, 8010a26 <_isatty_r+0x1a>
 8010a24:	6023      	str	r3, [r4, #0]
 8010a26:	bd38      	pop	{r3, r4, r5, pc}
 8010a28:	20005014 	.word	0x20005014

08010a2c <_lseek_r>:
 8010a2c:	b538      	push	{r3, r4, r5, lr}
 8010a2e:	4d07      	ldr	r5, [pc, #28]	; (8010a4c <_lseek_r+0x20>)
 8010a30:	4604      	mov	r4, r0
 8010a32:	4608      	mov	r0, r1
 8010a34:	4611      	mov	r1, r2
 8010a36:	2200      	movs	r2, #0
 8010a38:	602a      	str	r2, [r5, #0]
 8010a3a:	461a      	mov	r2, r3
 8010a3c:	f7f0 fd08 	bl	8001450 <_lseek>
 8010a40:	1c43      	adds	r3, r0, #1
 8010a42:	d102      	bne.n	8010a4a <_lseek_r+0x1e>
 8010a44:	682b      	ldr	r3, [r5, #0]
 8010a46:	b103      	cbz	r3, 8010a4a <_lseek_r+0x1e>
 8010a48:	6023      	str	r3, [r4, #0]
 8010a4a:	bd38      	pop	{r3, r4, r5, pc}
 8010a4c:	20005014 	.word	0x20005014

08010a50 <_read_r>:
 8010a50:	b538      	push	{r3, r4, r5, lr}
 8010a52:	4d07      	ldr	r5, [pc, #28]	; (8010a70 <_read_r+0x20>)
 8010a54:	4604      	mov	r4, r0
 8010a56:	4608      	mov	r0, r1
 8010a58:	4611      	mov	r1, r2
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	602a      	str	r2, [r5, #0]
 8010a5e:	461a      	mov	r2, r3
 8010a60:	f7f0 fc96 	bl	8001390 <_read>
 8010a64:	1c43      	adds	r3, r0, #1
 8010a66:	d102      	bne.n	8010a6e <_read_r+0x1e>
 8010a68:	682b      	ldr	r3, [r5, #0]
 8010a6a:	b103      	cbz	r3, 8010a6e <_read_r+0x1e>
 8010a6c:	6023      	str	r3, [r4, #0]
 8010a6e:	bd38      	pop	{r3, r4, r5, pc}
 8010a70:	20005014 	.word	0x20005014

08010a74 <_write_r>:
 8010a74:	b538      	push	{r3, r4, r5, lr}
 8010a76:	4d07      	ldr	r5, [pc, #28]	; (8010a94 <_write_r+0x20>)
 8010a78:	4604      	mov	r4, r0
 8010a7a:	4608      	mov	r0, r1
 8010a7c:	4611      	mov	r1, r2
 8010a7e:	2200      	movs	r2, #0
 8010a80:	602a      	str	r2, [r5, #0]
 8010a82:	461a      	mov	r2, r3
 8010a84:	f7f0 fca1 	bl	80013ca <_write>
 8010a88:	1c43      	adds	r3, r0, #1
 8010a8a:	d102      	bne.n	8010a92 <_write_r+0x1e>
 8010a8c:	682b      	ldr	r3, [r5, #0]
 8010a8e:	b103      	cbz	r3, 8010a92 <_write_r+0x1e>
 8010a90:	6023      	str	r3, [r4, #0]
 8010a92:	bd38      	pop	{r3, r4, r5, pc}
 8010a94:	20005014 	.word	0x20005014

08010a98 <memcpy>:
 8010a98:	440a      	add	r2, r1
 8010a9a:	4291      	cmp	r1, r2
 8010a9c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010aa0:	d100      	bne.n	8010aa4 <memcpy+0xc>
 8010aa2:	4770      	bx	lr
 8010aa4:	b510      	push	{r4, lr}
 8010aa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010aaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010aae:	4291      	cmp	r1, r2
 8010ab0:	d1f9      	bne.n	8010aa6 <memcpy+0xe>
 8010ab2:	bd10      	pop	{r4, pc}

08010ab4 <_malloc_usable_size_r>:
 8010ab4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ab8:	1f18      	subs	r0, r3, #4
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	bfbc      	itt	lt
 8010abe:	580b      	ldrlt	r3, [r1, r0]
 8010ac0:	18c0      	addlt	r0, r0, r3
 8010ac2:	4770      	bx	lr

08010ac4 <_init>:
 8010ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ac6:	bf00      	nop
 8010ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010aca:	bc08      	pop	{r3}
 8010acc:	469e      	mov	lr, r3
 8010ace:	4770      	bx	lr

08010ad0 <_fini>:
 8010ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ad2:	bf00      	nop
 8010ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ad6:	bc08      	pop	{r3}
 8010ad8:	469e      	mov	lr, r3
 8010ada:	4770      	bx	lr
