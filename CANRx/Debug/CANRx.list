
CANRx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000113ac  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009ac  080115ac  080115ac  000215ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011f58  08011f58  00030168  2**0
                  CONTENTS
  4 .ARM          00000008  08011f58  08011f58  00021f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011f60  08011f60  00030168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011f60  08011f60  00021f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011f64  08011f64  00021f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  08011f68  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e6c  20000168  080120d0  00030168  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004fd4  080120d0  00034fd4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030168  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030196  2**0
                  CONTENTS, READONLY
 13 .debug_info   000220f4  00000000  00000000  000301d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005151  00000000  00000000  000522cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b18  00000000  00000000  00057420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001491  00000000  00000000  00058f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f375  00000000  00000000  0005a3c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025310  00000000  00000000  0008973e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010783c  00000000  00000000  000aea4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000079e0  00000000  00000000  001b628c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001bdc6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000168 	.word	0x20000168
 800021c:	00000000 	.word	0x00000000
 8000220:	08011594 	.word	0x08011594

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000016c 	.word	0x2000016c
 800023c:	08011594 	.word	0x08011594

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b590      	push	{r4, r7, lr}
 80005de:	b0c9      	sub	sp, #292	; 0x124
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f001 f988 	bl	80018f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 fa91 	bl	8000b0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 fc17 	bl	8000e1c <MX_GPIO_Init>
  MX_DMA_Init();
 80005ee:	f000 fbef 	bl	8000dd0 <MX_DMA_Init>
  MX_CAN1_Init();
 80005f2:	f000 fafd 	bl	8000bf0 <MX_CAN1_Init>
  MX_SDMMC1_SD_Init();
 80005f6:	f000 fb95 	bl	8000d24 <MX_SDMMC1_SD_Init>
  MX_USART3_UART_Init();
 80005fa:	f000 fbb9 	bl	8000d70 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80005fe:	f009 fcbb 	bl	8009f78 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000602:	f00f f817 	bl	800f634 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8000606:	f000 fb29 	bl	8000c5c <MX_RTC_Init>
		RESET_BUFFER,
		RESET_STATE,
		POWER_OFF
	} state_t;
	//Starting state is PERIPHERAL_INIT
	state_t state = TURN_ON;
 800060a:	2300      	movs	r3, #0
 800060c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	uint32_t byteswritten; /* File write/read counts */
	uint32_t buffer_emptyings = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	uint32_t total_size = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		switch (state) {
 800061c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000620:	2b0c      	cmp	r3, #12
 8000622:	f200 823e 	bhi.w	8000aa2 <main+0x4c6>
 8000626:	a201      	add	r2, pc, #4	; (adr r2, 800062c <main+0x50>)
 8000628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800062c:	08000661 	.word	0x08000661
 8000630:	08000699 	.word	0x08000699
 8000634:	08000727 	.word	0x08000727
 8000638:	08000863 	.word	0x08000863
 800063c:	08000ab7 	.word	0x08000ab7
 8000640:	08000ab7 	.word	0x08000ab7
 8000644:	0800088d 	.word	0x0800088d
 8000648:	08000ab7 	.word	0x08000ab7
 800064c:	080008d7 	.word	0x080008d7
 8000650:	08000ab7 	.word	0x08000ab7
 8000654:	08000985 	.word	0x08000985
 8000658:	08000a13 	.word	0x08000a13
 800065c:	08000a6f 	.word	0x08000a6f
		case TURN_ON:
			MX_DMA_Init();
 8000660:	f000 fbb6 	bl	8000dd0 <MX_DMA_Init>
			MX_SDMMC1_SD_Init();
 8000664:	f000 fb5e 	bl	8000d24 <MX_SDMMC1_SD_Init>
			MX_FATFS_Init();
 8000668:	f009 fc86 	bl	8009f78 <MX_FATFS_Init>
			POWER_STATE = HAL_GPIO_ReadPin(PowerSwitch_GPIO_Port, PowerSwitch_Pin);
 800066c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000670:	48a4      	ldr	r0, [pc, #656]	; (8000904 <main+0x328>)
 8000672:	f002 fe29 	bl	80032c8 <HAL_GPIO_ReadPin>
 8000676:	4603      	mov	r3, r0
 8000678:	461a      	mov	r2, r3
 800067a:	4ba3      	ldr	r3, [pc, #652]	; (8000908 <main+0x32c>)
 800067c:	701a      	strb	r2, [r3, #0]
			state = POWER_STATE ? PERIPHERAL_INIT : POWER_OFF;
 800067e:	4ba2      	ldr	r3, [pc, #648]	; (8000908 <main+0x32c>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <main+0xae>
 8000686:	2301      	movs	r3, #1
 8000688:	e000      	b.n	800068c <main+0xb0>
 800068a:	230c      	movs	r3, #12
 800068c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			NEW_LOG_FLAG = 0;
 8000690:	4b9e      	ldr	r3, [pc, #632]	; (800090c <main+0x330>)
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]
			break;
 8000696:	e213      	b.n	8000ac0 <main+0x4e4>

		case PERIPHERAL_INIT:
			data_buffer[0][0] = '\00';
 8000698:	4b9d      	ldr	r3, [pc, #628]	; (8000910 <main+0x334>)
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]
			data_buffer[1][0] = '\00';
 800069e:	4b9c      	ldr	r3, [pc, #624]	; (8000910 <main+0x334>)
 80006a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006a4:	2200      	movs	r2, #0
 80006a6:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
			buffer_fill_level[0] = 0;
 80006aa:	4b9a      	ldr	r3, [pc, #616]	; (8000914 <main+0x338>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
			buffer_fill_level[1] = 0;
 80006b0:	4b98      	ldr	r3, [pc, #608]	; (8000914 <main+0x338>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	705a      	strb	r2, [r3, #1]
			current_buffer = 0;
 80006b6:	4b98      	ldr	r3, [pc, #608]	; (8000918 <main+0x33c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]

			printf("Initializing Peripherals...\r\n");
 80006bc:	4897      	ldr	r0, [pc, #604]	; (800091c <main+0x340>)
 80006be:	f00f ffe3 	bl	8010688 <puts>
			HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_RESET); //Red LED
 80006c2:	2200      	movs	r2, #0
 80006c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006c8:	4895      	ldr	r0, [pc, #596]	; (8000920 <main+0x344>)
 80006ca:	f002 fe15 	bl	80032f8 <HAL_GPIO_WritePin>

			//Initializing CAN
			if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80006ce:	4895      	ldr	r0, [pc, #596]	; (8000924 <main+0x348>)
 80006d0:	f001 fb7a 	bl	8001dc8 <HAL_CAN_Start>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d004      	beq.n	80006e4 <main+0x108>
				printf("CAN could not start.\r\n");
 80006da:	4893      	ldr	r0, [pc, #588]	; (8000928 <main+0x34c>)
 80006dc:	f00f ffd4 	bl	8010688 <puts>
				Error_Handler();
 80006e0:	f000 fd90 	bl	8001204 <Error_Handler>
			}
			if (CAN_Filter_Config() != HAL_OK) {
 80006e4:	f000 fd14 	bl	8001110 <CAN_Filter_Config>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d004      	beq.n	80006f8 <main+0x11c>
				printf("CAN filter failed to set.\r\n");
 80006ee:	488f      	ldr	r0, [pc, #572]	; (800092c <main+0x350>)
 80006f0:	f00f ffca 	bl	8010688 <puts>
				Error_Handler();
 80006f4:	f000 fd86 	bl	8001204 <Error_Handler>
			}
			printf("CAN initialization succeeded...\r\n");
 80006f8:	488d      	ldr	r0, [pc, #564]	; (8000930 <main+0x354>)
 80006fa:	f00f ffc5 	bl	8010688 <puts>

			//Mount and Format SD Card
			if (f_mount(&SDFatFS, SDPath, 0) != FR_OK) {
 80006fe:	2200      	movs	r2, #0
 8000700:	498c      	ldr	r1, [pc, #560]	; (8000934 <main+0x358>)
 8000702:	488d      	ldr	r0, [pc, #564]	; (8000938 <main+0x35c>)
 8000704:	f00e f97c 	bl	800ea00 <f_mount>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d004      	beq.n	8000718 <main+0x13c>
				printf("Mounting failed!\r\n");
 800070e:	488b      	ldr	r0, [pc, #556]	; (800093c <main+0x360>)
 8000710:	f00f ffba 	bl	8010688 <puts>
				Error_Handler();
 8000714:	f000 fd76 	bl	8001204 <Error_Handler>
			}

			printf("SD initialization succeeded...\r\n");
 8000718:	4889      	ldr	r0, [pc, #548]	; (8000940 <main+0x364>)
 800071a:	f00f ffb5 	bl	8010688 <puts>

			state = CREATE_LOG_FILE;
 800071e:	2302      	movs	r3, #2
 8000720:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			break;
 8000724:	e1cc      	b.n	8000ac0 <main+0x4e4>

		case CREATE_LOG_FILE:
			printf("Creating new log file...\r\n");
 8000726:	4887      	ldr	r0, [pc, #540]	; (8000944 <main+0x368>)
 8000728:	f00f ffae 	bl	8010688 <puts>

			//Opening CAN_DATA directory
			if (f_opendir(&dir, "/CAN_DATA") != FR_OK) {
 800072c:	4986      	ldr	r1, [pc, #536]	; (8000948 <main+0x36c>)
 800072e:	4887      	ldr	r0, [pc, #540]	; (800094c <main+0x370>)
 8000730:	f00e fd87 	bl	800f242 <f_opendir>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d004      	beq.n	8000744 <main+0x168>
				printf("Failed to open /CAN_DATA directory!\r\n");
 800073a:	4885      	ldr	r0, [pc, #532]	; (8000950 <main+0x374>)
 800073c:	f00f ffa4 	bl	8010688 <puts>
				Error_Handler();
 8000740:	f000 fd60 	bl	8001204 <Error_Handler>
			}

			// Finding next filename
			char last_file_number[5];
			uint16_t max_file_number = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
			do {
				if (f_readdir(&dir, &fno) != FR_OK){
 800074a:	4982      	ldr	r1, [pc, #520]	; (8000954 <main+0x378>)
 800074c:	487f      	ldr	r0, [pc, #508]	; (800094c <main+0x370>)
 800074e:	f00e fe11 	bl	800f374 <f_readdir>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d004      	beq.n	8000762 <main+0x186>
					printf("Failed to read /CAN_DATA directory!\r\n");
 8000758:	487f      	ldr	r0, [pc, #508]	; (8000958 <main+0x37c>)
 800075a:	f00f ff95 	bl	8010688 <puts>
					Error_Handler();
 800075e:	f000 fd51 	bl	8001204 <Error_Handler>
				}
				if (fno.fname[0] != 0){
 8000762:	4b7c      	ldr	r3, [pc, #496]	; (8000954 <main+0x378>)
 8000764:	7d9b      	ldrb	r3, [r3, #22]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d030      	beq.n	80007cc <main+0x1f0>
					for(int i=4; i<9; i++)
 800076a:	2304      	movs	r3, #4
 800076c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000770:	e012      	b.n	8000798 <main+0x1bc>
						last_file_number[i-4] = fno.fname[i];
 8000772:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000776:	3b04      	subs	r3, #4
 8000778:	4976      	ldr	r1, [pc, #472]	; (8000954 <main+0x378>)
 800077a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800077e:	440a      	add	r2, r1
 8000780:	3216      	adds	r2, #22
 8000782:	7812      	ldrb	r2, [r2, #0]
 8000784:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8000788:	443b      	add	r3, r7
 800078a:	f803 2c20 	strb.w	r2, [r3, #-32]
					for(int i=4; i<9; i++)
 800078e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000792:	3301      	adds	r3, #1
 8000794:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000798:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800079c:	2b08      	cmp	r3, #8
 800079e:	dde8      	ble.n	8000772 <main+0x196>

					if (max_file_number < strtol(last_file_number, NULL, 10))
 80007a0:	f8b7 4112 	ldrh.w	r4, [r7, #274]	; 0x112
 80007a4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80007a8:	220a      	movs	r2, #10
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f00f fedd 	bl	801056c <strtol>
 80007b2:	4603      	mov	r3, r0
 80007b4:	429c      	cmp	r4, r3
 80007b6:	da09      	bge.n	80007cc <main+0x1f0>
						max_file_number = strtol(last_file_number, NULL, 10);
 80007b8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80007bc:	220a      	movs	r2, #10
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f00f fed3 	bl	801056c <strtol>
 80007c6:	4603      	mov	r3, r0
 80007c8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112

					//printf("File found: %s\n\r", fno.fname); // Print File Name
				}
			} while (fno.fname[0] != 0);
 80007cc:	4b61      	ldr	r3, [pc, #388]	; (8000954 <main+0x378>)
 80007ce:	7d9b      	ldrb	r3, [r3, #22]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d1ba      	bne.n	800074a <main+0x16e>

			//Closing CAN_DATA directory
			if (f_closedir(&dir) != FR_OK) {
 80007d4:	485d      	ldr	r0, [pc, #372]	; (800094c <main+0x370>)
 80007d6:	f00e fda7 	bl	800f328 <f_closedir>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d004      	beq.n	80007ea <main+0x20e>
				printf("Failed to close /CAN_DATA directory!\r\n");
 80007e0:	485e      	ldr	r0, [pc, #376]	; (800095c <main+0x380>)
 80007e2:	f00f ff51 	bl	8010688 <puts>
				Error_Handler();
 80007e6:	f000 fd0d 	bl	8001204 <Error_Handler>
			}

			//Creating new filename
			TCHAR filename[FILENAME_MAX_BYTES];
			snprintf(filename, FILENAME_MAX_BYTES, "/CAN_DATA/CAN_%05d.log", max_file_number + 1);
 80007ea:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 80007ee:	3301      	adds	r3, #1
 80007f0:	4638      	mov	r0, r7
 80007f2:	4a5b      	ldr	r2, [pc, #364]	; (8000960 <main+0x384>)
 80007f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007f8:	f00f fd52 	bl	80102a0 <sniprintf>
			printf("New log name: %s \n\r", filename);
 80007fc:	463b      	mov	r3, r7
 80007fe:	4619      	mov	r1, r3
 8000800:	4858      	ldr	r0, [pc, #352]	; (8000964 <main+0x388>)
 8000802:	f00f fedb 	bl	80105bc <iprintf>

			//Open file for writing (Create)
			if (f_open(&SDFile, filename, FA_CREATE_ALWAYS | FA_WRITE)
 8000806:	463b      	mov	r3, r7
 8000808:	220a      	movs	r2, #10
 800080a:	4619      	mov	r1, r3
 800080c:	4856      	ldr	r0, [pc, #344]	; (8000968 <main+0x38c>)
 800080e:	f00e f93d 	bl	800ea8c <f_open>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d006      	beq.n	8000826 <main+0x24a>
					!= FR_OK) {
				printf("Failed to create new log file: %s ...!\r\n", filename);
 8000818:	463b      	mov	r3, r7
 800081a:	4619      	mov	r1, r3
 800081c:	4853      	ldr	r0, [pc, #332]	; (800096c <main+0x390>)
 800081e:	f00f fecd 	bl	80105bc <iprintf>
				Error_Handler();
 8000822:	f000 fcef 	bl	8001204 <Error_Handler>
			}
			printf("Successfully created new log file: %s ...\r\n", filename);
 8000826:	463b      	mov	r3, r7
 8000828:	4619      	mov	r1, r3
 800082a:	4851      	ldr	r0, [pc, #324]	; (8000970 <main+0x394>)
 800082c:	f00f fec6 	bl	80105bc <iprintf>

			//Starting CANRx interrupts
			if (HAL_CAN_ActivateNotification(&hcan1,
 8000830:	2102      	movs	r1, #2
 8000832:	483c      	ldr	r0, [pc, #240]	; (8000924 <main+0x348>)
 8000834:	f001 fc67 	bl	8002106 <HAL_CAN_ActivateNotification>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d004      	beq.n	8000848 <main+0x26c>
					CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
				/* Notification Error */
				printf("Failed to activate CAN\n\r");
 800083e:	484d      	ldr	r0, [pc, #308]	; (8000974 <main+0x398>)
 8000840:	f00f febc 	bl	80105bc <iprintf>
				Error_Handler();
 8000844:	f000 fcde 	bl	8001204 <Error_Handler>
			}

			printf("Ready to receive messages!\r\n");
 8000848:	484b      	ldr	r0, [pc, #300]	; (8000978 <main+0x39c>)
 800084a:	f00f ff1d 	bl	8010688 <puts>
			HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_SET); // Successful LED
 800084e:	2201      	movs	r2, #1
 8000850:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000854:	4832      	ldr	r0, [pc, #200]	; (8000920 <main+0x344>)
 8000856:	f002 fd4f 	bl	80032f8 <HAL_GPIO_WritePin>

			state = STANDBY;
 800085a:	2303      	movs	r3, #3
 800085c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			break;
 8000860:	e12e      	b.n	8000ac0 <main+0x4e4>

		case STANDBY:
			if (!POWER_STATE || NEW_LOG_FLAG) //Power switch is off or new log file
 8000862:	4b29      	ldr	r3, [pc, #164]	; (8000908 <main+0x32c>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d003      	beq.n	8000872 <main+0x296>
 800086a:	4b28      	ldr	r3, [pc, #160]	; (800090c <main+0x330>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d003      	beq.n	800087a <main+0x29e>
				state = RESET_STATE;
 8000872:	230b      	movs	r3, #11
 8000874:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			else if (is_buffer_filled) //Buffer is filled
				state = SD_CARD_WRITE;
			break;
 8000878:	e11f      	b.n	8000aba <main+0x4de>
			else if (is_buffer_filled) //Buffer is filled
 800087a:	4b40      	ldr	r3, [pc, #256]	; (800097c <main+0x3a0>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b00      	cmp	r3, #0
 8000880:	f000 811b 	beq.w	8000aba <main+0x4de>
				state = SD_CARD_WRITE;
 8000884:	2306      	movs	r3, #6
 8000886:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			break;
 800088a:	e116      	b.n	8000aba <main+0x4de>

		case SWITCH_BUFFER:
			break;

		case SD_CARD_WRITE:
			if (f_write(&SDFile, data_buffer[!current_buffer], BUFFER_TOTAL_SIZE, (void*) &byteswritten) != FR_OK || byteswritten == 0) {
 800088c:	4b22      	ldr	r3, [pc, #136]	; (8000918 <main+0x33c>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	bf0c      	ite	eq
 8000894:	2301      	moveq	r3, #1
 8000896:	2300      	movne	r3, #0
 8000898:	b2db      	uxtb	r3, r3
 800089a:	461a      	mov	r2, r3
 800089c:	f241 4381 	movw	r3, #5249	; 0x1481
 80008a0:	fb02 f303 	mul.w	r3, r2, r3
 80008a4:	4a1a      	ldr	r2, [pc, #104]	; (8000910 <main+0x334>)
 80008a6:	1899      	adds	r1, r3, r2
 80008a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80008ac:	f44f 52a4 	mov.w	r2, #5248	; 0x1480
 80008b0:	482d      	ldr	r0, [pc, #180]	; (8000968 <main+0x38c>)
 80008b2:	f00e faa9 	bl	800ee08 <f_write>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d103      	bne.n	80008c4 <main+0x2e8>
 80008bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d104      	bne.n	80008ce <main+0x2f2>
				printf("Writing Failed!\r\n");
 80008c4:	482e      	ldr	r0, [pc, #184]	; (8000980 <main+0x3a4>)
 80008c6:	f00f fedf 	bl	8010688 <puts>
				Error_Handler();
 80008ca:	f000 fc9b 	bl	8001204 <Error_Handler>
			}

			state = USB_TRANSMIT;
 80008ce:	2308      	movs	r3, #8
 80008d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			break;
 80008d4:	e0f4      	b.n	8000ac0 <main+0x4e4>

		case SD_CARD_WRITE_ERROR:
			break;

		case USB_TRANSMIT:
			CDC_Transmit_FS(data_buffer[!current_buffer], BUFFER_TOTAL_SIZE);
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <main+0x33c>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	bf0c      	ite	eq
 80008de:	2301      	moveq	r3, #1
 80008e0:	2300      	movne	r3, #0
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	461a      	mov	r2, r3
 80008e6:	f241 4381 	movw	r3, #5249	; 0x1481
 80008ea:	fb02 f303 	mul.w	r3, r2, r3
 80008ee:	4a08      	ldr	r2, [pc, #32]	; (8000910 <main+0x334>)
 80008f0:	4413      	add	r3, r2
 80008f2:	f44f 51a4 	mov.w	r1, #5248	; 0x1480
 80008f6:	4618      	mov	r0, r3
 80008f8:	f00e ff5a 	bl	800f7b0 <CDC_Transmit_FS>
			state = RESET_BUFFER;
 80008fc:	230a      	movs	r3, #10
 80008fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			break;
 8000902:	e0dd      	b.n	8000ac0 <main+0x4e4>
 8000904:	40021000 	.word	0x40021000
 8000908:	200004e4 	.word	0x200004e4
 800090c:	200004e5 	.word	0x200004e5
 8000910:	200004e8 	.word	0x200004e8
 8000914:	20002dec 	.word	0x20002dec
 8000918:	20002dee 	.word	0x20002dee
 800091c:	080115ac 	.word	0x080115ac
 8000920:	40021400 	.word	0x40021400
 8000924:	20000184 	.word	0x20000184
 8000928:	080115cc 	.word	0x080115cc
 800092c:	080115e4 	.word	0x080115e4
 8000930:	08011600 	.word	0x08011600
 8000934:	20002dfc 	.word	0x20002dfc
 8000938:	20002e00 	.word	0x20002e00
 800093c:	08011624 	.word	0x08011624
 8000940:	08011638 	.word	0x08011638
 8000944:	08011658 	.word	0x08011658
 8000948:	08011674 	.word	0x08011674
 800094c:	20000398 	.word	0x20000398
 8000950:	08011680 	.word	0x08011680
 8000954:	200003cc 	.word	0x200003cc
 8000958:	080116a8 	.word	0x080116a8
 800095c:	080116d0 	.word	0x080116d0
 8000960:	080116f8 	.word	0x080116f8
 8000964:	08011710 	.word	0x08011710
 8000968:	20003034 	.word	0x20003034
 800096c:	08011724 	.word	0x08011724
 8000970:	08011750 	.word	0x08011750
 8000974:	0801177c 	.word	0x0801177c
 8000978:	08011798 	.word	0x08011798
 800097c:	20002def 	.word	0x20002def
 8000980:	080117b4 	.word	0x080117b4

		case USB_TRANSMIT_ERROR:
			break;

		case RESET_BUFFER:
			buffer_emptyings++;
 8000984:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000988:	3301      	adds	r3, #1
 800098a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
			total_size += byteswritten;
 800098e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000992:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000996:	4413      	add	r3, r2
 8000998:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
			printf("emptied buffer %d\n\r", !current_buffer);
 800099c:	4b49      	ldr	r3, [pc, #292]	; (8000ac4 <main+0x4e8>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	bf0c      	ite	eq
 80009a4:	2301      	moveq	r3, #1
 80009a6:	2300      	movne	r3, #0
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	4619      	mov	r1, r3
 80009ac:	4846      	ldr	r0, [pc, #280]	; (8000ac8 <main+0x4ec>)
 80009ae:	f00f fe05 	bl	80105bc <iprintf>
			printf("buffers emptied: %ld\n\r", buffer_emptyings);
 80009b2:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80009b6:	4845      	ldr	r0, [pc, #276]	; (8000acc <main+0x4f0>)
 80009b8:	f00f fe00 	bl	80105bc <iprintf>
			printf("Wrote buffer sizeof: %ld\n\r", byteswritten);
 80009bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80009c0:	4619      	mov	r1, r3
 80009c2:	4843      	ldr	r0, [pc, #268]	; (8000ad0 <main+0x4f4>)
 80009c4:	f00f fdfa 	bl	80105bc <iprintf>

			data_buffer[!current_buffer][0] = '\00';
 80009c8:	4b3e      	ldr	r3, [pc, #248]	; (8000ac4 <main+0x4e8>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	bf0c      	ite	eq
 80009d0:	2301      	moveq	r3, #1
 80009d2:	2300      	movne	r3, #0
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	4619      	mov	r1, r3
 80009d8:	4a3e      	ldr	r2, [pc, #248]	; (8000ad4 <main+0x4f8>)
 80009da:	f241 4381 	movw	r3, #5249	; 0x1481
 80009de:	fb01 f303 	mul.w	r3, r1, r3
 80009e2:	4413      	add	r3, r2
 80009e4:	2200      	movs	r2, #0
 80009e6:	701a      	strb	r2, [r3, #0]
			buffer_fill_level[!current_buffer] = 0;
 80009e8:	4b36      	ldr	r3, [pc, #216]	; (8000ac4 <main+0x4e8>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	bf0c      	ite	eq
 80009f0:	2301      	moveq	r3, #1
 80009f2:	2300      	movne	r3, #0
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	461a      	mov	r2, r3
 80009f8:	4b37      	ldr	r3, [pc, #220]	; (8000ad8 <main+0x4fc>)
 80009fa:	2100      	movs	r1, #0
 80009fc:	5499      	strb	r1, [r3, r2]
			is_buffer_filled = 0;
 80009fe:	4b37      	ldr	r3, [pc, #220]	; (8000adc <main+0x500>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]

			byteswritten = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

			state = STANDBY;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			break;
 8000a10:	e056      	b.n	8000ac0 <main+0x4e4>

		case RESET_STATE:
			HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000a12:	2102      	movs	r1, #2
 8000a14:	4832      	ldr	r0, [pc, #200]	; (8000ae0 <main+0x504>)
 8000a16:	f001 fb9c 	bl	8002152 <HAL_CAN_DeactivateNotification>
			HAL_CAN_Stop(&hcan1);
 8000a1a:	4831      	ldr	r0, [pc, #196]	; (8000ae0 <main+0x504>)
 8000a1c:	f001 fa18 	bl	8001e50 <HAL_CAN_Stop>
			HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_RESET); //Red LED
 8000a20:	2200      	movs	r2, #0
 8000a22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a26:	482f      	ldr	r0, [pc, #188]	; (8000ae4 <main+0x508>)
 8000a28:	f002 fc66 	bl	80032f8 <HAL_GPIO_WritePin>

			printf("total sizeof: %ld\n\r", total_size);
 8000a2c:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8000a30:	482d      	ldr	r0, [pc, #180]	; (8000ae8 <main+0x50c>)
 8000a32:	f00f fdc3 	bl	80105bc <iprintf>
			total_size = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
			buffer_emptyings = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
			printf("Unmounting SD Card!\r\n");
 8000a42:	482a      	ldr	r0, [pc, #168]	; (8000aec <main+0x510>)
 8000a44:	f00f fe20 	bl	8010688 <puts>
			f_close(&SDFile);
 8000a48:	4829      	ldr	r0, [pc, #164]	; (8000af0 <main+0x514>)
 8000a4a:	f00e fbd0 	bl	800f1ee <f_close>
			f_mount(0, (TCHAR const*) NULL, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2100      	movs	r1, #0
 8000a52:	2000      	movs	r0, #0
 8000a54:	f00d ffd4 	bl	800ea00 <f_mount>

			if (!POWER_STATE)
 8000a58:	4b26      	ldr	r3, [pc, #152]	; (8000af4 <main+0x518>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d102      	bne.n	8000a66 <main+0x48a>
				printf("Turning off!\r\n");
 8000a60:	4825      	ldr	r0, [pc, #148]	; (8000af8 <main+0x51c>)
 8000a62:	f00f fe11 	bl	8010688 <puts>
			state = POWER_OFF;
 8000a66:	230c      	movs	r3, #12
 8000a68:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			break;
 8000a6c:	e028      	b.n	8000ac0 <main+0x4e4>

		case POWER_OFF:
			HAL_Delay(1000);
 8000a6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a72:	f000 ff9d 	bl	80019b0 <HAL_Delay>

			if (POWER_STATE) {
 8000a76:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <main+0x518>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d01f      	beq.n	8000abe <main+0x4e2>
				if (NEW_LOG_FLAG) {
 8000a7e:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <main+0x520>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d006      	beq.n	8000a94 <main+0x4b8>
					NEW_LOG_FLAG = 0;
 8000a86:	4b1d      	ldr	r3, [pc, #116]	; (8000afc <main+0x520>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	701a      	strb	r2, [r3, #0]
					printf("\n\rResetting and starting new log file! \n\r");
 8000a8c:	481c      	ldr	r0, [pc, #112]	; (8000b00 <main+0x524>)
 8000a8e:	f00f fd95 	bl	80105bc <iprintf>
 8000a92:	e002      	b.n	8000a9a <main+0x4be>
				}
				else {
					printf("\n\rTurning back on!\n\r");
 8000a94:	481b      	ldr	r0, [pc, #108]	; (8000b04 <main+0x528>)
 8000a96:	f00f fd91 	bl	80105bc <iprintf>
				}
				state = TURN_ON;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			}
			break;
 8000aa0:	e00d      	b.n	8000abe <main+0x4e2>

		default:
			printf("CAN logger in unknown state!\n\r");
 8000aa2:	4819      	ldr	r0, [pc, #100]	; (8000b08 <main+0x52c>)
 8000aa4:	f00f fd8a 	bl	80105bc <iprintf>
			HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin,
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aae:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <main+0x508>)
 8000ab0:	f002 fc22 	bl	80032f8 <HAL_GPIO_WritePin>
					GPIO_PIN_RESET); // Red LED
			break;
 8000ab4:	e004      	b.n	8000ac0 <main+0x4e4>
			break;
 8000ab6:	bf00      	nop
 8000ab8:	e5b0      	b.n	800061c <main+0x40>
			break;
 8000aba:	bf00      	nop
 8000abc:	e5ae      	b.n	800061c <main+0x40>
			break;
 8000abe:	bf00      	nop
		switch (state) {
 8000ac0:	e5ac      	b.n	800061c <main+0x40>
 8000ac2:	bf00      	nop
 8000ac4:	20002dee 	.word	0x20002dee
 8000ac8:	080117c8 	.word	0x080117c8
 8000acc:	080117dc 	.word	0x080117dc
 8000ad0:	080117f4 	.word	0x080117f4
 8000ad4:	200004e8 	.word	0x200004e8
 8000ad8:	20002dec 	.word	0x20002dec
 8000adc:	20002def 	.word	0x20002def
 8000ae0:	20000184 	.word	0x20000184
 8000ae4:	40021400 	.word	0x40021400
 8000ae8:	08011810 	.word	0x08011810
 8000aec:	08011824 	.word	0x08011824
 8000af0:	20003034 	.word	0x20003034
 8000af4:	200004e4 	.word	0x200004e4
 8000af8:	0801183c 	.word	0x0801183c
 8000afc:	200004e5 	.word	0x200004e5
 8000b00:	0801184c 	.word	0x0801184c
 8000b04:	08011878 	.word	0x08011878
 8000b08:	08011890 	.word	0x08011890

08000b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b094      	sub	sp, #80	; 0x50
 8000b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	2234      	movs	r2, #52	; 0x34
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f00f fdcb 	bl	80106b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b20:	f107 0308 	add.w	r3, r7, #8
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b30:	f003 fed8 	bl	80048e4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 8000b34:	4b2c      	ldr	r3, [pc, #176]	; (8000be8 <SystemClock_Config+0xdc>)
 8000b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b38:	4a2b      	ldr	r2, [pc, #172]	; (8000be8 <SystemClock_Config+0xdc>)
 8000b3a:	f043 0318 	orr.w	r3, r3, #24
 8000b3e:	6713      	str	r3, [r2, #112]	; 0x70

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b40:	4b29      	ldr	r3, [pc, #164]	; (8000be8 <SystemClock_Config+0xdc>)
 8000b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b44:	4a28      	ldr	r2, [pc, #160]	; (8000be8 <SystemClock_Config+0xdc>)
 8000b46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4c:	4b26      	ldr	r3, [pc, #152]	; (8000be8 <SystemClock_Config+0xdc>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b58:	4b24      	ldr	r3, [pc, #144]	; (8000bec <SystemClock_Config+0xe0>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b60:	4a22      	ldr	r2, [pc, #136]	; (8000bec <SystemClock_Config+0xe0>)
 8000b62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b66:	6013      	str	r3, [r2, #0]
 8000b68:	4b20      	ldr	r3, [pc, #128]	; (8000bec <SystemClock_Config+0xe0>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b70:	603b      	str	r3, [r7, #0]
 8000b72:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000b74:	2305      	movs	r3, #5
 8000b76:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b7c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b82:	2302      	movs	r3, #2
 8000b84:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b8c:	2304      	movs	r3, #4
 8000b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000b90:	2360      	movs	r3, #96	; 0x60
 8000b92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b94:	2304      	movs	r3, #4
 8000b96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b98:	2304      	movs	r3, #4
 8000b9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba0:	f107 031c 	add.w	r3, r7, #28
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f003 fead 	bl	8004904 <HAL_RCC_OscConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000bb0:	f000 fb28 	bl	8001204 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bca:	f107 0308 	add.w	r3, r7, #8
 8000bce:	2101      	movs	r1, #1
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f004 f945 	bl	8004e60 <HAL_RCC_ClockConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000bdc:	f000 fb12 	bl	8001204 <Error_Handler>
  }
}
 8000be0:	bf00      	nop
 8000be2:	3750      	adds	r7, #80	; 0x50
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40007000 	.word	0x40007000

08000bf0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000bf4:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <MX_CAN1_Init+0x64>)
 8000bf6:	4a18      	ldr	r2, [pc, #96]	; (8000c58 <MX_CAN1_Init+0x68>)
 8000bf8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000bfa:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <MX_CAN1_Init+0x64>)
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000c00:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <MX_CAN1_Init+0x64>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c06:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <MX_CAN1_Init+0x64>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <MX_CAN1_Init+0x64>)
 8000c0e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000c12:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <MX_CAN1_Init+0x64>)
 8000c16:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000c1a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000c1c:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <MX_CAN1_Init+0x64>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000c22:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <MX_CAN1_Init+0x64>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000c28:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <MX_CAN1_Init+0x64>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <MX_CAN1_Init+0x64>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000c34:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <MX_CAN1_Init+0x64>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <MX_CAN1_Init+0x64>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000c40:	4804      	ldr	r0, [pc, #16]	; (8000c54 <MX_CAN1_Init+0x64>)
 8000c42:	f000 fed9 	bl	80019f8 <HAL_CAN_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000c4c:	f000 fada 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000184 	.word	0x20000184
 8000c58:	40006400 	.word	0x40006400

08000c5c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000c70:	2300      	movs	r3, #0
 8000c72:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c74:	4b29      	ldr	r3, [pc, #164]	; (8000d1c <MX_RTC_Init+0xc0>)
 8000c76:	4a2a      	ldr	r2, [pc, #168]	; (8000d20 <MX_RTC_Init+0xc4>)
 8000c78:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c7a:	4b28      	ldr	r3, [pc, #160]	; (8000d1c <MX_RTC_Init+0xc0>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c80:	4b26      	ldr	r3, [pc, #152]	; (8000d1c <MX_RTC_Init+0xc0>)
 8000c82:	227f      	movs	r2, #127	; 0x7f
 8000c84:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c86:	4b25      	ldr	r3, [pc, #148]	; (8000d1c <MX_RTC_Init+0xc0>)
 8000c88:	22ff      	movs	r2, #255	; 0xff
 8000c8a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c8c:	4b23      	ldr	r3, [pc, #140]	; (8000d1c <MX_RTC_Init+0xc0>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c92:	4b22      	ldr	r3, [pc, #136]	; (8000d1c <MX_RTC_Init+0xc0>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c98:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <MX_RTC_Init+0xc0>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c9e:	481f      	ldr	r0, [pc, #124]	; (8000d1c <MX_RTC_Init+0xc0>)
 8000ca0:	f004 ff2c 	bl	8005afc <HAL_RTC_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000caa:	f000 faab 	bl	8001204 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 15;
 8000cae:	230f      	movs	r3, #15
 8000cb0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 55;
 8000cb2:	2337      	movs	r3, #55	; 0x37
 8000cb4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4814      	ldr	r0, [pc, #80]	; (8000d1c <MX_RTC_Init+0xc0>)
 8000cca:	f004 ff9b 	bl	8005c04 <HAL_RTC_SetTime>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000cd4:	f000 fa96 	bl	8001204 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_FEBRUARY;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	707b      	strb	r3, [r7, #1]
  sDate.Date = 6;
 8000ce0:	2306      	movs	r3, #6
 8000ce2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 24;
 8000ce4:	2318      	movs	r3, #24
 8000ce6:	70fb      	strb	r3, [r7, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000ce8:	463b      	mov	r3, r7
 8000cea:	2200      	movs	r2, #0
 8000cec:	4619      	mov	r1, r3
 8000cee:	480b      	ldr	r0, [pc, #44]	; (8000d1c <MX_RTC_Init+0xc0>)
 8000cf0:	f005 f822 	bl	8005d38 <HAL_RTC_SetDate>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000cfa:	f000 fa83 	bl	8001204 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_DEFAULT) != HAL_OK)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2100      	movs	r1, #0
 8000d02:	4806      	ldr	r0, [pc, #24]	; (8000d1c <MX_RTC_Init+0xc0>)
 8000d04:	f005 f93e 	bl	8005f84 <HAL_RTCEx_SetTimeStamp>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 8000d0e:	f000 fa79 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d12:	bf00      	nop
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200001ac 	.word	0x200001ac
 8000d20:	40002800 	.word	0x40002800

08000d24 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000d28:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <MX_SDMMC1_SD_Init+0x44>)
 8000d2a:	4a10      	ldr	r2, [pc, #64]	; (8000d6c <MX_SDMMC1_SD_Init+0x48>)
 8000d2c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <MX_SDMMC1_SD_Init+0x44>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <MX_SDMMC1_SD_Init+0x44>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <MX_SDMMC1_SD_Init+0x44>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000d40:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <MX_SDMMC1_SD_Init+0x44>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8000d46:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <MX_SDMMC1_SD_Init+0x44>)
 8000d48:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d4c:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <MX_SDMMC1_SD_Init+0x44>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
	if (HAL_SD_Init(&hsd1) != HAL_OK) {
 8000d54:	4804      	ldr	r0, [pc, #16]	; (8000d68 <MX_SDMMC1_SD_Init+0x44>)
 8000d56:	f005 f97d 	bl	8006054 <HAL_SD_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_SDMMC1_SD_Init+0x40>
		Error_Handler();
 8000d60:	f000 fa50 	bl	8001204 <Error_Handler>
	}
  /* USER CODE END SDMMC1_Init 2 */

}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	200001cc 	.word	0x200001cc
 8000d6c:	40012c00 	.word	0x40012c00

08000d70 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d74:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <MX_USART3_UART_Init+0x58>)
 8000d76:	4a15      	ldr	r2, [pc, #84]	; (8000dcc <MX_USART3_UART_Init+0x5c>)
 8000d78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d7a:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <MX_USART3_UART_Init+0x58>)
 8000d7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <MX_USART3_UART_Init+0x58>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <MX_USART3_UART_Init+0x58>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <MX_USART3_UART_Init+0x58>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <MX_USART3_UART_Init+0x58>)
 8000d96:	220c      	movs	r2, #12
 8000d98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <MX_USART3_UART_Init+0x58>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da0:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <MX_USART3_UART_Init+0x58>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <MX_USART3_UART_Init+0x58>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <MX_USART3_UART_Init+0x58>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <MX_USART3_UART_Init+0x58>)
 8000db4:	f006 fa76 	bl	80072a4 <HAL_UART_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000dbe:	f000 fa21 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000310 	.word	0x20000310
 8000dcc:	40004800 	.word	0x40004800

08000dd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <MX_DMA_Init+0x48>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a0f      	ldr	r2, [pc, #60]	; (8000e18 <MX_DMA_Init+0x48>)
 8000ddc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b0d      	ldr	r3, [pc, #52]	; (8000e18 <MX_DMA_Init+0x48>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2100      	movs	r1, #0
 8000df2:	203b      	movs	r0, #59	; 0x3b
 8000df4:	f001 fcdf 	bl	80027b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000df8:	203b      	movs	r0, #59	; 0x3b
 8000dfa:	f001 fcf8 	bl	80027ee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2100      	movs	r1, #0
 8000e02:	2045      	movs	r0, #69	; 0x45
 8000e04:	f001 fcd7 	bl	80027b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000e08:	2045      	movs	r0, #69	; 0x45
 8000e0a:	f001 fcf0 	bl	80027ee <HAL_NVIC_EnableIRQ>

}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40023800 	.word	0x40023800

08000e1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08e      	sub	sp, #56	; 0x38
 8000e20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e32:	4b73      	ldr	r3, [pc, #460]	; (8001000 <MX_GPIO_Init+0x1e4>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a72      	ldr	r2, [pc, #456]	; (8001000 <MX_GPIO_Init+0x1e4>)
 8000e38:	f043 0304 	orr.w	r3, r3, #4
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b70      	ldr	r3, [pc, #448]	; (8001000 <MX_GPIO_Init+0x1e4>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0304 	and.w	r3, r3, #4
 8000e46:	623b      	str	r3, [r7, #32]
 8000e48:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e4a:	4b6d      	ldr	r3, [pc, #436]	; (8001000 <MX_GPIO_Init+0x1e4>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a6c      	ldr	r2, [pc, #432]	; (8001000 <MX_GPIO_Init+0x1e4>)
 8000e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b6a      	ldr	r3, [pc, #424]	; (8001000 <MX_GPIO_Init+0x1e4>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e5e:	61fb      	str	r3, [r7, #28]
 8000e60:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e62:	4b67      	ldr	r3, [pc, #412]	; (8001000 <MX_GPIO_Init+0x1e4>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a66      	ldr	r2, [pc, #408]	; (8001000 <MX_GPIO_Init+0x1e4>)
 8000e68:	f043 0320 	orr.w	r3, r3, #32
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b64      	ldr	r3, [pc, #400]	; (8001000 <MX_GPIO_Init+0x1e4>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0320 	and.w	r3, r3, #32
 8000e76:	61bb      	str	r3, [r7, #24]
 8000e78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e7a:	4b61      	ldr	r3, [pc, #388]	; (8001000 <MX_GPIO_Init+0x1e4>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a60      	ldr	r2, [pc, #384]	; (8001000 <MX_GPIO_Init+0x1e4>)
 8000e80:	f043 0310 	orr.w	r3, r3, #16
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b5e      	ldr	r3, [pc, #376]	; (8001000 <MX_GPIO_Init+0x1e4>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0310 	and.w	r3, r3, #16
 8000e8e:	617b      	str	r3, [r7, #20]
 8000e90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e92:	4b5b      	ldr	r3, [pc, #364]	; (8001000 <MX_GPIO_Init+0x1e4>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a5a      	ldr	r2, [pc, #360]	; (8001000 <MX_GPIO_Init+0x1e4>)
 8000e98:	f043 0308 	orr.w	r3, r3, #8
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b58      	ldr	r3, [pc, #352]	; (8001000 <MX_GPIO_Init+0x1e4>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0308 	and.w	r3, r3, #8
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eaa:	4b55      	ldr	r3, [pc, #340]	; (8001000 <MX_GPIO_Init+0x1e4>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a54      	ldr	r2, [pc, #336]	; (8001000 <MX_GPIO_Init+0x1e4>)
 8000eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b52      	ldr	r3, [pc, #328]	; (8001000 <MX_GPIO_Init+0x1e4>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	4b4f      	ldr	r3, [pc, #316]	; (8001000 <MX_GPIO_Init+0x1e4>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a4e      	ldr	r2, [pc, #312]	; (8001000 <MX_GPIO_Init+0x1e4>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b4c      	ldr	r3, [pc, #304]	; (8001000 <MX_GPIO_Init+0x1e4>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eda:	4b49      	ldr	r3, [pc, #292]	; (8001000 <MX_GPIO_Init+0x1e4>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a48      	ldr	r2, [pc, #288]	; (8001000 <MX_GPIO_Init+0x1e4>)
 8000ee0:	f043 0302 	orr.w	r3, r3, #2
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b46      	ldr	r3, [pc, #280]	; (8001000 <MX_GPIO_Init+0x1e4>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ef8:	4842      	ldr	r0, [pc, #264]	; (8001004 <MX_GPIO_Init+0x1e8>)
 8000efa:	f002 f9fd 	bl	80032f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2140      	movs	r1, #64	; 0x40
 8000f02:	4841      	ldr	r0, [pc, #260]	; (8001008 <MX_GPIO_Init+0x1ec>)
 8000f04:	f002 f9f8 	bl	80032f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2180      	movs	r1, #128	; 0x80
 8000f0c:	483f      	ldr	r0, [pc, #252]	; (800100c <MX_GPIO_Init+0x1f0>)
 8000f0e:	f002 f9f3 	bl	80032f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Error_LED_Pin */
  GPIO_InitStruct.Pin = Error_LED_Pin;
 8000f12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	2300      	movs	r3, #0
 8000f22:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Error_LED_GPIO_Port, &GPIO_InitStruct);
 8000f24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4836      	ldr	r0, [pc, #216]	; (8001004 <MX_GPIO_Init+0x1e8>)
 8000f2c:	f002 f820 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : NewLogBtn_Pin */
  GPIO_InitStruct.Pin = NewLogBtn_Pin;
 8000f30:	2380      	movs	r3, #128	; 0x80
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f34:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NewLogBtn_GPIO_Port, &GPIO_InitStruct);
 8000f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f42:	4619      	mov	r1, r3
 8000f44:	4832      	ldr	r0, [pc, #200]	; (8001010 <MX_GPIO_Init+0x1f4>)
 8000f46:	f002 f813 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f50:	2302      	movs	r3, #2
 8000f52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000f5c:	2306      	movs	r3, #6
 8000f5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f64:	4619      	mov	r1, r3
 8000f66:	482a      	ldr	r0, [pc, #168]	; (8001010 <MX_GPIO_Init+0x1f4>)
 8000f68:	f002 f802 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PowerSwitch_Pin */
  GPIO_InitStruct.Pin = PowerSwitch_Pin;
 8000f6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f72:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PowerSwitch_GPIO_Port, &GPIO_InitStruct);
 8000f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f80:	4619      	mov	r1, r3
 8000f82:	4823      	ldr	r0, [pc, #140]	; (8001010 <MX_GPIO_Init+0x1f4>)
 8000f84:	f001 fff4 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CD_Pin USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = SD_CD_Pin|USB_OverCurrent_Pin;
 8000f88:	2384      	movs	r3, #132	; 0x84
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f98:	4619      	mov	r1, r3
 8000f9a:	481b      	ldr	r0, [pc, #108]	; (8001008 <MX_GPIO_Init+0x1ec>)
 8000f9c:	f001 ffe8 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000fa0:	2340      	movs	r3, #64	; 0x40
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4814      	ldr	r0, [pc, #80]	; (8001008 <MX_GPIO_Init+0x1ec>)
 8000fb8:	f001 ffda 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fbc:	2380      	movs	r3, #128	; 0x80
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	480e      	ldr	r0, [pc, #56]	; (800100c <MX_GPIO_Init+0x1f0>)
 8000fd4:	f001 ffcc 	bl	8002f70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2100      	movs	r1, #0
 8000fdc:	2017      	movs	r0, #23
 8000fde:	f001 fbea 	bl	80027b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000fe2:	2017      	movs	r0, #23
 8000fe4:	f001 fc03 	bl	80027ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2100      	movs	r1, #0
 8000fec:	2028      	movs	r0, #40	; 0x28
 8000fee:	f001 fbe2 	bl	80027b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ff2:	2028      	movs	r0, #40	; 0x28
 8000ff4:	f001 fbfb 	bl	80027ee <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ff8:	bf00      	nop
 8000ffa:	3738      	adds	r7, #56	; 0x38
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40023800 	.word	0x40023800
 8001004:	40021400 	.word	0x40021400
 8001008:	40021800 	.word	0x40021800
 800100c:	40020400 	.word	0x40020400
 8001010:	40021000 	.word	0x40021000

08001014 <Get_and_Append_CAN_Message_to_Buffer>:

/* USER CODE BEGIN 4 */
void Get_and_Append_CAN_Message_to_Buffer() {
 8001014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001016:	b09d      	sub	sp, #116	; 0x74
 8001018:	af06      	add	r7, sp, #24
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rcvd_msg[8];

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_msg)
 800101a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800101e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001022:	2100      	movs	r1, #0
 8001024:	4833      	ldr	r0, [pc, #204]	; (80010f4 <Get_and_Append_CAN_Message_to_Buffer+0xe0>)
 8001026:	f000 ff5c 	bl	8001ee2 <HAL_CAN_GetRxMessage>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d004      	beq.n	800103a <Get_and_Append_CAN_Message_to_Buffer+0x26>
			!= HAL_OK){
		printf("Failed to get CAN message\n\r");
 8001030:	4831      	ldr	r0, [pc, #196]	; (80010f8 <Get_and_Append_CAN_Message_to_Buffer+0xe4>)
 8001032:	f00f fac3 	bl	80105bc <iprintf>
		Error_Handler();
 8001036:	f000 f8e5 	bl	8001204 <Error_Handler>
	}

	uint16_t data1 = (rcvd_msg[0] << 8) + rcvd_msg[1];
 800103a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800103e:	b29b      	uxth	r3, r3
 8001040:	021b      	lsls	r3, r3, #8
 8001042:	b29a      	uxth	r2, r3
 8001044:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001048:	b29b      	uxth	r3, r3
 800104a:	4413      	add	r3, r2
 800104c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	uint16_t data2 = (rcvd_msg[2] << 8) + rcvd_msg[3];
 8001050:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001054:	b29b      	uxth	r3, r3
 8001056:	021b      	lsls	r3, r3, #8
 8001058:	b29a      	uxth	r2, r3
 800105a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800105e:	b29b      	uxth	r3, r3
 8001060:	4413      	add	r3, r2
 8001062:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	uint16_t data3 = (rcvd_msg[4] << 8) + rcvd_msg[5];
 8001066:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800106a:	b29b      	uxth	r3, r3
 800106c:	021b      	lsls	r3, r3, #8
 800106e:	b29a      	uxth	r2, r3
 8001070:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001074:	b29b      	uxth	r3, r3
 8001076:	4413      	add	r3, r2
 8001078:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	uint16_t data4 = (rcvd_msg[6] << 8) + rcvd_msg[7];
 800107c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001080:	b29b      	uxth	r3, r3
 8001082:	021b      	lsls	r3, r3, #8
 8001084:	b29a      	uxth	r2, r3
 8001086:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800108a:	b29b      	uxth	r3, r3
 800108c:	4413      	add	r3, r2
 800108e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	char encodedData[ENCODED_CAN_SIZE_BYTES];

	snprintf(encodedData, ENCODED_CAN_SIZE_BYTES + 1,
 8001092:	f000 fc81 	bl	8001998 <HAL_GetTick>
 8001096:	4606      	mov	r6, r0
 8001098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800109a:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800109e:	f8b7 1054 	ldrh.w	r1, [r7, #84]	; 0x54
 80010a2:	f8b7 0052 	ldrh.w	r0, [r7, #82]	; 0x52
 80010a6:	f8b7 4050 	ldrh.w	r4, [r7, #80]	; 0x50
 80010aa:	463d      	mov	r5, r7
 80010ac:	9404      	str	r4, [sp, #16]
 80010ae:	9003      	str	r0, [sp, #12]
 80010b0:	9102      	str	r1, [sp, #8]
 80010b2:	9201      	str	r2, [sp, #4]
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	4633      	mov	r3, r6
 80010b8:	4a10      	ldr	r2, [pc, #64]	; (80010fc <Get_and_Append_CAN_Message_to_Buffer+0xe8>)
 80010ba:	212a      	movs	r1, #42	; 0x2a
 80010bc:	4628      	mov	r0, r5
 80010be:	f00f f8ef 	bl	80102a0 <sniprintf>
			"(%010ld) X %08lX#%04X%04X%04X%04X\n", HAL_GetTick(),
			RxHeader.ExtId, data1, data2, data3, data4);

	strcat(current_buffer ? data_buffer[1] : data_buffer[0], encodedData);
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <Get_and_Append_CAN_Message_to_Buffer+0xec>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <Get_and_Append_CAN_Message_to_Buffer+0xba>
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <Get_and_Append_CAN_Message_to_Buffer+0xf0>)
 80010cc:	e000      	b.n	80010d0 <Get_and_Append_CAN_Message_to_Buffer+0xbc>
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <Get_and_Append_CAN_Message_to_Buffer+0xf4>)
 80010d0:	463a      	mov	r2, r7
 80010d2:	4611      	mov	r1, r2
 80010d4:	4618      	mov	r0, r3
 80010d6:	f00f fadf 	bl	8010698 <strcat>
	buffer_fill_level[current_buffer]++;
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <Get_and_Append_CAN_Message_to_Buffer+0xec>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	4a0b      	ldr	r2, [pc, #44]	; (800110c <Get_and_Append_CAN_Message_to_Buffer+0xf8>)
 80010e0:	5cd2      	ldrb	r2, [r2, r3]
 80010e2:	3201      	adds	r2, #1
 80010e4:	b2d1      	uxtb	r1, r2
 80010e6:	4a09      	ldr	r2, [pc, #36]	; (800110c <Get_and_Append_CAN_Message_to_Buffer+0xf8>)
 80010e8:	54d1      	strb	r1, [r2, r3]
}
 80010ea:	bf00      	nop
 80010ec:	375c      	adds	r7, #92	; 0x5c
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000184 	.word	0x20000184
 80010f8:	080118b0 	.word	0x080118b0
 80010fc:	080118cc 	.word	0x080118cc
 8001100:	20002dee 	.word	0x20002dee
 8001104:	20001969 	.word	0x20001969
 8001108:	200004e8 	.word	0x200004e8
 800110c:	20002dec 	.word	0x20002dec

08001110 <CAN_Filter_Config>:

HAL_StatusTypeDef CAN_Filter_Config(void) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b08c      	sub	sp, #48	; 0x30
 8001114:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filter;

	uint32_t filter_mask = 0x00000000;
 8001116:	2300      	movs	r3, #0
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t filter_id = 0x000A0000;
 800111a:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 800111e:	62bb      	str	r3, [r7, #40]	; 0x28

	filter.FilterIdHigh = ((filter_id << 5) | (filter_id >> (32 - 5))) & 0xFFFF; // STID[10:0] & EXTID[17:13]
 8001120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001122:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8001126:	b29b      	uxth	r3, r3
 8001128:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = (filter_id >> (11 - 3)) & 0xFFF8; // EXID[12:5] & 3 Reserved bits
 800112a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800112c:	0a1a      	lsrs	r2, r3, #8
 800112e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001132:	4013      	ands	r3, r2
 8001134:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = ((filter_mask << 5) | (filter_mask >> (32 - 5)))
 8001136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001138:	ea4f 63f3 	mov.w	r3, r3, ror #27
			& 0xFFFF;
 800113c:	b29b      	uxth	r3, r3
	filter.FilterMaskIdHigh = ((filter_mask << 5) | (filter_mask >> (32 - 5)))
 800113e:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = (filter_mask >> (11 - 3)) & 0xFFF8;
 8001140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001142:	0a1a      	lsrs	r2, r3, #8
 8001144:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001148:	4013      	ands	r3, r2
 800114a:	60fb      	str	r3, [r7, #12]

	filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 800114c:	2300      	movs	r3, #0
 800114e:	613b      	str	r3, [r7, #16]
	filter.FilterBank = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001154:	2300      	movs	r3, #0
 8001156:	61bb      	str	r3, [r7, #24]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001158:	2301      	movs	r3, #1
 800115a:	61fb      	str	r3, [r7, #28]
	filter.FilterActivation = ENABLE;
 800115c:	2301      	movs	r3, #1
 800115e:	623b      	str	r3, [r7, #32]

	return HAL_CAN_ConfigFilter(&hcan1, &filter);
 8001160:	463b      	mov	r3, r7
 8001162:	4619      	mov	r1, r3
 8001164:	4803      	ldr	r0, [pc, #12]	; (8001174 <CAN_Filter_Config+0x64>)
 8001166:	f000 fd43 	bl	8001bf0 <HAL_CAN_ConfigFilter>
 800116a:	4603      	mov	r3, r0
}
 800116c:	4618      	mov	r0, r3
 800116e:	3730      	adds	r7, #48	; 0x30
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000184 	.word	0x20000184

08001178 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	if (buffer_fill_level[0] == CAN_MESSAGES_TO_BUFFER
 8001180:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b80      	cmp	r3, #128	; 0x80
 8001186:	d108      	bne.n	800119a <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
			&& buffer_fill_level[1] == CAN_MESSAGES_TO_BUFFER)
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 800118a:	785b      	ldrb	r3, [r3, #1]
 800118c:	2b80      	cmp	r3, #128	; 0x80
 800118e:	d104      	bne.n	800119a <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		printf("Buffers are full\n\r");
 8001190:	4810      	ldr	r0, [pc, #64]	; (80011d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8001192:	f00f fa13 	bl	80105bc <iprintf>
		Error_Handler();
 8001196:	f000 f835 	bl	8001204 <Error_Handler>
	}

	Get_and_Append_CAN_Message_to_Buffer();
 800119a:	f7ff ff3b 	bl	8001014 <Get_and_Append_CAN_Message_to_Buffer>

	if (buffer_fill_level[current_buffer] == CAN_MESSAGES_TO_BUFFER) {
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	461a      	mov	r2, r3
 80011a4:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80011a6:	5c9b      	ldrb	r3, [r3, r2]
 80011a8:	2b80      	cmp	r3, #128	; 0x80
 80011aa:	d10c      	bne.n	80011c6 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
		is_buffer_filled = 1;
 80011ac:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]
		current_buffer = !current_buffer;
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	bf0c      	ite	eq
 80011ba:	2301      	moveq	r3, #1
 80011bc:	2300      	movne	r3, #0
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80011c4:	701a      	strb	r2, [r3, #0]
	}
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20002dec 	.word	0x20002dec
 80011d4:	080118f0 	.word	0x080118f0
 80011d8:	20002dee 	.word	0x20002dee
 80011dc:	20002def 	.word	0x20002def

080011e0 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 80011e8:	1d39      	adds	r1, r7, #4
 80011ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011ee:	2201      	movs	r2, #1
 80011f0:	4803      	ldr	r0, [pc, #12]	; (8001200 <__io_putchar+0x20>)
 80011f2:	f006 f8a5 	bl	8007340 <HAL_UART_Transmit>

	return ch;
 80011f6:	687b      	ldr	r3, [r7, #4]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000310 	.word	0x20000310

08001204 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001208:	b672      	cpsid	i
}
 800120a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	printf("\r\nError Handler Reached\r\n");
 800120c:	4804      	ldr	r0, [pc, #16]	; (8001220 <Error_Handler+0x1c>)
 800120e:	f00f fa3b 	bl	8010688 <puts>
	HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001218:	4802      	ldr	r0, [pc, #8]	; (8001224 <Error_Handler+0x20>)
 800121a:	f002 f86d 	bl	80032f8 <HAL_GPIO_WritePin>

	while (1) {
 800121e:	e7fe      	b.n	800121e <Error_Handler+0x1a>
 8001220:	08011904 	.word	0x08011904
 8001224:	40021400 	.word	0x40021400

08001228 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <HAL_MspInit+0x44>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	4a0e      	ldr	r2, [pc, #56]	; (800126c <HAL_MspInit+0x44>)
 8001234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001238:	6413      	str	r3, [r2, #64]	; 0x40
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <HAL_MspInit+0x44>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <HAL_MspInit+0x44>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	4a08      	ldr	r2, [pc, #32]	; (800126c <HAL_MspInit+0x44>)
 800124c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001250:	6453      	str	r3, [r2, #68]	; 0x44
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <HAL_MspInit+0x44>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800125a:	603b      	str	r3, [r7, #0]
 800125c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800

08001270 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08a      	sub	sp, #40	; 0x28
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a1b      	ldr	r2, [pc, #108]	; (80012fc <HAL_CAN_MspInit+0x8c>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d12f      	bne.n	80012f2 <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001292:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <HAL_CAN_MspInit+0x90>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	4a1a      	ldr	r2, [pc, #104]	; (8001300 <HAL_CAN_MspInit+0x90>)
 8001298:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800129c:	6413      	str	r3, [r2, #64]	; 0x40
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <HAL_CAN_MspInit+0x90>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <HAL_CAN_MspInit+0x90>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a14      	ldr	r2, [pc, #80]	; (8001300 <HAL_CAN_MspInit+0x90>)
 80012b0:	f043 0308 	orr.w	r3, r3, #8
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b12      	ldr	r3, [pc, #72]	; (8001300 <HAL_CAN_MspInit+0x90>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0308 	and.w	r3, r3, #8
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012c2:	2303      	movs	r3, #3
 80012c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	2302      	movs	r3, #2
 80012c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ce:	2303      	movs	r3, #3
 80012d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80012d2:	2309      	movs	r3, #9
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4619      	mov	r1, r3
 80012dc:	4809      	ldr	r0, [pc, #36]	; (8001304 <HAL_CAN_MspInit+0x94>)
 80012de:	f001 fe47 	bl	8002f70 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	2014      	movs	r0, #20
 80012e8:	f001 fa65 	bl	80027b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80012ec:	2014      	movs	r0, #20
 80012ee:	f001 fa7e 	bl	80027ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80012f2:	bf00      	nop
 80012f4:	3728      	adds	r7, #40	; 0x28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40006400 	.word	0x40006400
 8001300:	40023800 	.word	0x40023800
 8001304:	40020c00 	.word	0x40020c00

08001308 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b0a6      	sub	sp, #152	; 0x98
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001310:	f107 0308 	add.w	r3, r7, #8
 8001314:	2290      	movs	r2, #144	; 0x90
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f00f f9cc 	bl	80106b6 <memset>
  if(hrtc->Instance==RTC)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a0e      	ldr	r2, [pc, #56]	; (800135c <HAL_RTC_MspInit+0x54>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d114      	bne.n	8001352 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001328:	2320      	movs	r3, #32
 800132a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800132c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001330:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001332:	f107 0308 	add.w	r3, r7, #8
 8001336:	4618      	mov	r0, r3
 8001338:	f003 ffb8 	bl	80052ac <HAL_RCCEx_PeriphCLKConfig>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001342:	f7ff ff5f 	bl	8001204 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_RTC_MspInit+0x58>)
 8001348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800134a:	4a05      	ldr	r2, [pc, #20]	; (8001360 <HAL_RTC_MspInit+0x58>)
 800134c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001350:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001352:	bf00      	nop
 8001354:	3798      	adds	r7, #152	; 0x98
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40002800 	.word	0x40002800
 8001360:	40023800 	.word	0x40023800

08001364 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b0ae      	sub	sp, #184	; 0xb8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	2290      	movs	r2, #144	; 0x90
 8001382:	2100      	movs	r1, #0
 8001384:	4618      	mov	r0, r3
 8001386:	f00f f996 	bl	80106b6 <memset>
  if(hsd->Instance==SDMMC1)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a73      	ldr	r2, [pc, #460]	; (800155c <HAL_SD_MspInit+0x1f8>)
 8001390:	4293      	cmp	r3, r2
 8001392:	f040 80de 	bne.w	8001552 <HAL_SD_MspInit+0x1ee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001396:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800139a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 800139c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80013a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	4618      	mov	r0, r3
 80013aa:	f003 ff7f 	bl	80052ac <HAL_RCCEx_PeriphCLKConfig>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80013b4:	f7ff ff26 	bl	8001204 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80013b8:	4b69      	ldr	r3, [pc, #420]	; (8001560 <HAL_SD_MspInit+0x1fc>)
 80013ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013bc:	4a68      	ldr	r2, [pc, #416]	; (8001560 <HAL_SD_MspInit+0x1fc>)
 80013be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013c2:	6453      	str	r3, [r2, #68]	; 0x44
 80013c4:	4b66      	ldr	r3, [pc, #408]	; (8001560 <HAL_SD_MspInit+0x1fc>)
 80013c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d0:	4b63      	ldr	r3, [pc, #396]	; (8001560 <HAL_SD_MspInit+0x1fc>)
 80013d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d4:	4a62      	ldr	r2, [pc, #392]	; (8001560 <HAL_SD_MspInit+0x1fc>)
 80013d6:	f043 0304 	orr.w	r3, r3, #4
 80013da:	6313      	str	r3, [r2, #48]	; 0x30
 80013dc:	4b60      	ldr	r3, [pc, #384]	; (8001560 <HAL_SD_MspInit+0x1fc>)
 80013de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e8:	4b5d      	ldr	r3, [pc, #372]	; (8001560 <HAL_SD_MspInit+0x1fc>)
 80013ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ec:	4a5c      	ldr	r2, [pc, #368]	; (8001560 <HAL_SD_MspInit+0x1fc>)
 80013ee:	f043 0308 	orr.w	r3, r3, #8
 80013f2:	6313      	str	r3, [r2, #48]	; 0x30
 80013f4:	4b5a      	ldr	r3, [pc, #360]	; (8001560 <HAL_SD_MspInit+0x1fc>)
 80013f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f8:	f003 0308 	and.w	r3, r3, #8
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8001400:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001404:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001414:	2303      	movs	r3, #3
 8001416:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800141a:	230c      	movs	r3, #12
 800141c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001420:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001424:	4619      	mov	r1, r3
 8001426:	484f      	ldr	r0, [pc, #316]	; (8001564 <HAL_SD_MspInit+0x200>)
 8001428:	f001 fda2 	bl	8002f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800142c:	2304      	movs	r3, #4
 800142e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143e:	2303      	movs	r3, #3
 8001440:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001444:	230c      	movs	r3, #12
 8001446:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800144a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800144e:	4619      	mov	r1, r3
 8001450:	4845      	ldr	r0, [pc, #276]	; (8001568 <HAL_SD_MspInit+0x204>)
 8001452:	f001 fd8d 	bl	8002f70 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8001456:	4b45      	ldr	r3, [pc, #276]	; (800156c <HAL_SD_MspInit+0x208>)
 8001458:	4a45      	ldr	r2, [pc, #276]	; (8001570 <HAL_SD_MspInit+0x20c>)
 800145a:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 800145c:	4b43      	ldr	r3, [pc, #268]	; (800156c <HAL_SD_MspInit+0x208>)
 800145e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001462:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001464:	4b41      	ldr	r3, [pc, #260]	; (800156c <HAL_SD_MspInit+0x208>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800146a:	4b40      	ldr	r3, [pc, #256]	; (800156c <HAL_SD_MspInit+0x208>)
 800146c:	2200      	movs	r2, #0
 800146e:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001470:	4b3e      	ldr	r3, [pc, #248]	; (800156c <HAL_SD_MspInit+0x208>)
 8001472:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001476:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001478:	4b3c      	ldr	r3, [pc, #240]	; (800156c <HAL_SD_MspInit+0x208>)
 800147a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800147e:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001480:	4b3a      	ldr	r3, [pc, #232]	; (800156c <HAL_SD_MspInit+0x208>)
 8001482:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001486:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001488:	4b38      	ldr	r3, [pc, #224]	; (800156c <HAL_SD_MspInit+0x208>)
 800148a:	2220      	movs	r2, #32
 800148c:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800148e:	4b37      	ldr	r3, [pc, #220]	; (800156c <HAL_SD_MspInit+0x208>)
 8001490:	2200      	movs	r2, #0
 8001492:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001494:	4b35      	ldr	r3, [pc, #212]	; (800156c <HAL_SD_MspInit+0x208>)
 8001496:	2204      	movs	r2, #4
 8001498:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800149a:	4b34      	ldr	r3, [pc, #208]	; (800156c <HAL_SD_MspInit+0x208>)
 800149c:	2203      	movs	r2, #3
 800149e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80014a0:	4b32      	ldr	r3, [pc, #200]	; (800156c <HAL_SD_MspInit+0x208>)
 80014a2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80014a6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80014a8:	4b30      	ldr	r3, [pc, #192]	; (800156c <HAL_SD_MspInit+0x208>)
 80014aa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80014ae:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80014b0:	482e      	ldr	r0, [pc, #184]	; (800156c <HAL_SD_MspInit+0x208>)
 80014b2:	f001 f9b7 	bl	8002824 <HAL_DMA_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <HAL_SD_MspInit+0x15c>
    {
      Error_Handler();
 80014bc:	f7ff fea2 	bl	8001204 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a2a      	ldr	r2, [pc, #168]	; (800156c <HAL_SD_MspInit+0x208>)
 80014c4:	641a      	str	r2, [r3, #64]	; 0x40
 80014c6:	4a29      	ldr	r2, [pc, #164]	; (800156c <HAL_SD_MspInit+0x208>)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 80014cc:	4b29      	ldr	r3, [pc, #164]	; (8001574 <HAL_SD_MspInit+0x210>)
 80014ce:	4a2a      	ldr	r2, [pc, #168]	; (8001578 <HAL_SD_MspInit+0x214>)
 80014d0:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80014d2:	4b28      	ldr	r3, [pc, #160]	; (8001574 <HAL_SD_MspInit+0x210>)
 80014d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014d8:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014da:	4b26      	ldr	r3, [pc, #152]	; (8001574 <HAL_SD_MspInit+0x210>)
 80014dc:	2240      	movs	r2, #64	; 0x40
 80014de:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014e0:	4b24      	ldr	r3, [pc, #144]	; (8001574 <HAL_SD_MspInit+0x210>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014e6:	4b23      	ldr	r3, [pc, #140]	; (8001574 <HAL_SD_MspInit+0x210>)
 80014e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ec:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014ee:	4b21      	ldr	r3, [pc, #132]	; (8001574 <HAL_SD_MspInit+0x210>)
 80014f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014f4:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014f6:	4b1f      	ldr	r3, [pc, #124]	; (8001574 <HAL_SD_MspInit+0x210>)
 80014f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014fc:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80014fe:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <HAL_SD_MspInit+0x210>)
 8001500:	2220      	movs	r2, #32
 8001502:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001504:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <HAL_SD_MspInit+0x210>)
 8001506:	2200      	movs	r2, #0
 8001508:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800150a:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <HAL_SD_MspInit+0x210>)
 800150c:	2204      	movs	r2, #4
 800150e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001510:	4b18      	ldr	r3, [pc, #96]	; (8001574 <HAL_SD_MspInit+0x210>)
 8001512:	2203      	movs	r2, #3
 8001514:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001516:	4b17      	ldr	r3, [pc, #92]	; (8001574 <HAL_SD_MspInit+0x210>)
 8001518:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800151c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <HAL_SD_MspInit+0x210>)
 8001520:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001524:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8001526:	4813      	ldr	r0, [pc, #76]	; (8001574 <HAL_SD_MspInit+0x210>)
 8001528:	f001 f97c 	bl	8002824 <HAL_DMA_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_SD_MspInit+0x1d2>
    {
      Error_Handler();
 8001532:	f7ff fe67 	bl	8001204 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a0e      	ldr	r2, [pc, #56]	; (8001574 <HAL_SD_MspInit+0x210>)
 800153a:	63da      	str	r2, [r3, #60]	; 0x3c
 800153c:	4a0d      	ldr	r2, [pc, #52]	; (8001574 <HAL_SD_MspInit+0x210>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2100      	movs	r1, #0
 8001546:	2031      	movs	r0, #49	; 0x31
 8001548:	f001 f935 	bl	80027b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800154c:	2031      	movs	r0, #49	; 0x31
 800154e:	f001 f94e 	bl	80027ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001552:	bf00      	nop
 8001554:	37b8      	adds	r7, #184	; 0xb8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40012c00 	.word	0x40012c00
 8001560:	40023800 	.word	0x40023800
 8001564:	40020800 	.word	0x40020800
 8001568:	40020c00 	.word	0x40020c00
 800156c:	20000250 	.word	0x20000250
 8001570:	40026458 	.word	0x40026458
 8001574:	200002b0 	.word	0x200002b0
 8001578:	400264a0 	.word	0x400264a0

0800157c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b0ae      	sub	sp, #184	; 0xb8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	2290      	movs	r2, #144	; 0x90
 800159a:	2100      	movs	r1, #0
 800159c:	4618      	mov	r0, r3
 800159e:	f00f f88a 	bl	80106b6 <memset>
  if(huart->Instance==USART3)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a22      	ldr	r2, [pc, #136]	; (8001630 <HAL_UART_MspInit+0xb4>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d13c      	bne.n	8001626 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015b0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015b2:	2300      	movs	r3, #0
 80015b4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	4618      	mov	r0, r3
 80015bc:	f003 fe76 	bl	80052ac <HAL_RCCEx_PeriphCLKConfig>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80015c6:	f7ff fe1d 	bl	8001204 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015ca:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <HAL_UART_MspInit+0xb8>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	4a19      	ldr	r2, [pc, #100]	; (8001634 <HAL_UART_MspInit+0xb8>)
 80015d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d4:	6413      	str	r3, [r2, #64]	; 0x40
 80015d6:	4b17      	ldr	r3, [pc, #92]	; (8001634 <HAL_UART_MspInit+0xb8>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015e2:	4b14      	ldr	r3, [pc, #80]	; (8001634 <HAL_UART_MspInit+0xb8>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a13      	ldr	r2, [pc, #76]	; (8001634 <HAL_UART_MspInit+0xb8>)
 80015e8:	f043 0308 	orr.w	r3, r3, #8
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b11      	ldr	r3, [pc, #68]	; (8001634 <HAL_UART_MspInit+0xb8>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0308 	and.w	r3, r3, #8
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001602:	2302      	movs	r3, #2
 8001604:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160e:	2303      	movs	r3, #3
 8001610:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001614:	2307      	movs	r3, #7
 8001616:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800161a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800161e:	4619      	mov	r1, r3
 8001620:	4805      	ldr	r0, [pc, #20]	; (8001638 <HAL_UART_MspInit+0xbc>)
 8001622:	f001 fca5 	bl	8002f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001626:	bf00      	nop
 8001628:	37b8      	adds	r7, #184	; 0xb8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40004800 	.word	0x40004800
 8001634:	40023800 	.word	0x40023800
 8001638:	40020c00 	.word	0x40020c00

0800163c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001640:	e7fe      	b.n	8001640 <NMI_Handler+0x4>

08001642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001646:	e7fe      	b.n	8001646 <HardFault_Handler+0x4>

08001648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800164c:	e7fe      	b.n	800164c <MemManage_Handler+0x4>

0800164e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001652:	e7fe      	b.n	8001652 <BusFault_Handler+0x4>

08001654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <UsageFault_Handler+0x4>

0800165a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001688:	f000 f972 	bl	8001970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}

08001690 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001694:	4802      	ldr	r0, [pc, #8]	; (80016a0 <CAN1_RX0_IRQHandler+0x10>)
 8001696:	f000 fd83 	bl	80021a0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000184 	.word	0x20000184

080016a4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	NEW_LOG_FLAG = 1;
 80016a8:	4b03      	ldr	r3, [pc, #12]	; (80016b8 <EXTI9_5_IRQHandler+0x14>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NewLogBtn_Pin);
 80016ae:	2080      	movs	r0, #128	; 0x80
 80016b0:	f001 fe3c 	bl	800332c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	200004e5 	.word	0x200004e5

080016bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	POWER_STATE = HAL_GPIO_ReadPin(PowerSwitch_GPIO_Port, PowerSwitch_Pin);
 80016c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016c4:	4806      	ldr	r0, [pc, #24]	; (80016e0 <EXTI15_10_IRQHandler+0x24>)
 80016c6:	f001 fdff 	bl	80032c8 <HAL_GPIO_ReadPin>
 80016ca:	4603      	mov	r3, r0
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <EXTI15_10_IRQHandler+0x28>)
 80016d0:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PowerSwitch_Pin);
 80016d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80016d6:	f001 fe29 	bl	800332c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40021000 	.word	0x40021000
 80016e4:	200004e4 	.word	0x200004e4

080016e8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80016ec:	4802      	ldr	r0, [pc, #8]	; (80016f8 <SDMMC1_IRQHandler+0x10>)
 80016ee:	f004 ff31 	bl	8006554 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200001cc 	.word	0x200001cc

080016fc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <DMA2_Stream3_IRQHandler+0x10>)
 8001702:	f001 f9bf 	bl	8002a84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000250 	.word	0x20000250

08001710 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <OTG_FS_IRQHandler+0x10>)
 8001716:	f001 ff72 	bl	80035fe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20004980 	.word	0x20004980

08001724 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <DMA2_Stream6_IRQHandler+0x10>)
 800172a:	f001 f9ab 	bl	8002a84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200002b0 	.word	0x200002b0

08001738 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	e00a      	b.n	8001760 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800174a:	f3af 8000 	nop.w
 800174e:	4601      	mov	r1, r0
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	1c5a      	adds	r2, r3, #1
 8001754:	60ba      	str	r2, [r7, #8]
 8001756:	b2ca      	uxtb	r2, r1
 8001758:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	3301      	adds	r3, #1
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	429a      	cmp	r2, r3
 8001766:	dbf0      	blt.n	800174a <_read+0x12>
  }

  return len;
 8001768:	687b      	ldr	r3, [r7, #4]
}
 800176a:	4618      	mov	r0, r3
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b086      	sub	sp, #24
 8001776:	af00      	add	r7, sp, #0
 8001778:	60f8      	str	r0, [r7, #12]
 800177a:	60b9      	str	r1, [r7, #8]
 800177c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	e009      	b.n	8001798 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	60ba      	str	r2, [r7, #8]
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fd27 	bl	80011e0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	3301      	adds	r3, #1
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	697a      	ldr	r2, [r7, #20]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	429a      	cmp	r2, r3
 800179e:	dbf1      	blt.n	8001784 <_write+0x12>
  }
  return len;
 80017a0:	687b      	ldr	r3, [r7, #4]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <_close>:

int _close(int file)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
 80017ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017d2:	605a      	str	r2, [r3, #4]
  return 0;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <_isatty>:

int _isatty(int file)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017ea:	2301      	movs	r3, #1
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
	...

08001814 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800181c:	4a14      	ldr	r2, [pc, #80]	; (8001870 <_sbrk+0x5c>)
 800181e:	4b15      	ldr	r3, [pc, #84]	; (8001874 <_sbrk+0x60>)
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001828:	4b13      	ldr	r3, [pc, #76]	; (8001878 <_sbrk+0x64>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d102      	bne.n	8001836 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001830:	4b11      	ldr	r3, [pc, #68]	; (8001878 <_sbrk+0x64>)
 8001832:	4a12      	ldr	r2, [pc, #72]	; (800187c <_sbrk+0x68>)
 8001834:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001836:	4b10      	ldr	r3, [pc, #64]	; (8001878 <_sbrk+0x64>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4413      	add	r3, r2
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	429a      	cmp	r2, r3
 8001842:	d207      	bcs.n	8001854 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001844:	f00e ff50 	bl	80106e8 <__errno>
 8001848:	4603      	mov	r3, r0
 800184a:	220c      	movs	r2, #12
 800184c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800184e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001852:	e009      	b.n	8001868 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001854:	4b08      	ldr	r3, [pc, #32]	; (8001878 <_sbrk+0x64>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800185a:	4b07      	ldr	r3, [pc, #28]	; (8001878 <_sbrk+0x64>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	4a05      	ldr	r2, [pc, #20]	; (8001878 <_sbrk+0x64>)
 8001864:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001866:	68fb      	ldr	r3, [r7, #12]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3718      	adds	r7, #24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20080000 	.word	0x20080000
 8001874:	00000400 	.word	0x00000400
 8001878:	20002df0 	.word	0x20002df0
 800187c:	20004fd8 	.word	0x20004fd8

08001880 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <SystemInit+0x20>)
 8001886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800188a:	4a05      	ldr	r2, [pc, #20]	; (80018a0 <SystemInit+0x20>)
 800188c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001890:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018a8:	480d      	ldr	r0, [pc, #52]	; (80018e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018aa:	490e      	ldr	r1, [pc, #56]	; (80018e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018ac:	4a0e      	ldr	r2, [pc, #56]	; (80018e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b0:	e002      	b.n	80018b8 <LoopCopyDataInit>

080018b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018b6:	3304      	adds	r3, #4

080018b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018bc:	d3f9      	bcc.n	80018b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018be:	4a0b      	ldr	r2, [pc, #44]	; (80018ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018c0:	4c0b      	ldr	r4, [pc, #44]	; (80018f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c4:	e001      	b.n	80018ca <LoopFillZerobss>

080018c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c8:	3204      	adds	r2, #4

080018ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018cc:	d3fb      	bcc.n	80018c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018ce:	f7ff ffd7 	bl	8001880 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018d2:	f00e ff0f 	bl	80106f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018d6:	f7fe fe81 	bl	80005dc <main>
  bx  lr    
 80018da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018dc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80018e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018e4:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 80018e8:	08011f68 	.word	0x08011f68
  ldr r2, =_sbss
 80018ec:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 80018f0:	20004fd4 	.word	0x20004fd4

080018f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018f4:	e7fe      	b.n	80018f4 <ADC_IRQHandler>

080018f6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018fa:	2003      	movs	r0, #3
 80018fc:	f000 ff50 	bl	80027a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001900:	2000      	movs	r0, #0
 8001902:	f000 f805 	bl	8001910 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001906:	f7ff fc8f 	bl	8001228 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	bd80      	pop	{r7, pc}

08001910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001918:	4b12      	ldr	r3, [pc, #72]	; (8001964 <HAL_InitTick+0x54>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b12      	ldr	r3, [pc, #72]	; (8001968 <HAL_InitTick+0x58>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	4619      	mov	r1, r3
 8001922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001926:	fbb3 f3f1 	udiv	r3, r3, r1
 800192a:	fbb2 f3f3 	udiv	r3, r2, r3
 800192e:	4618      	mov	r0, r3
 8001930:	f000 ff6b 	bl	800280a <HAL_SYSTICK_Config>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e00e      	b.n	800195c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b0f      	cmp	r3, #15
 8001942:	d80a      	bhi.n	800195a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001944:	2200      	movs	r2, #0
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800194c:	f000 ff33 	bl	80027b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001950:	4a06      	ldr	r2, [pc, #24]	; (800196c <HAL_InitTick+0x5c>)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001956:	2300      	movs	r3, #0
 8001958:	e000      	b.n	800195c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
}
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000000 	.word	0x20000000
 8001968:	20000008 	.word	0x20000008
 800196c:	20000004 	.word	0x20000004

08001970 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <HAL_IncTick+0x20>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	461a      	mov	r2, r3
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_IncTick+0x24>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4413      	add	r3, r2
 8001980:	4a04      	ldr	r2, [pc, #16]	; (8001994 <HAL_IncTick+0x24>)
 8001982:	6013      	str	r3, [r2, #0]
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	20000008 	.word	0x20000008
 8001994:	20002df4 	.word	0x20002df4

08001998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return uwTick;
 800199c:	4b03      	ldr	r3, [pc, #12]	; (80019ac <HAL_GetTick+0x14>)
 800199e:	681b      	ldr	r3, [r3, #0]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	20002df4 	.word	0x20002df4

080019b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b8:	f7ff ffee 	bl	8001998 <HAL_GetTick>
 80019bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019c8:	d005      	beq.n	80019d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ca:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <HAL_Delay+0x44>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	461a      	mov	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4413      	add	r3, r2
 80019d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019d6:	bf00      	nop
 80019d8:	f7ff ffde 	bl	8001998 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d8f7      	bhi.n	80019d8 <HAL_Delay+0x28>
  {
  }
}
 80019e8:	bf00      	nop
 80019ea:	bf00      	nop
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000008 	.word	0x20000008

080019f8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e0ed      	b.n	8001be6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d102      	bne.n	8001a1c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff fc2a 	bl	8001270 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f042 0201 	orr.w	r2, r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a2c:	f7ff ffb4 	bl	8001998 <HAL_GetTick>
 8001a30:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a32:	e012      	b.n	8001a5a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a34:	f7ff ffb0 	bl	8001998 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b0a      	cmp	r3, #10
 8001a40:	d90b      	bls.n	8001a5a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a46:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2205      	movs	r2, #5
 8001a52:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e0c5      	b.n	8001be6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0e5      	beq.n	8001a34 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 0202 	bic.w	r2, r2, #2
 8001a76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a78:	f7ff ff8e 	bl	8001998 <HAL_GetTick>
 8001a7c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a7e:	e012      	b.n	8001aa6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a80:	f7ff ff8a 	bl	8001998 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b0a      	cmp	r3, #10
 8001a8c:	d90b      	bls.n	8001aa6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2205      	movs	r2, #5
 8001a9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e09f      	b.n	8001be6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1e5      	bne.n	8001a80 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	7e1b      	ldrb	r3, [r3, #24]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d108      	bne.n	8001ace <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	e007      	b.n	8001ade <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001adc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	7e5b      	ldrb	r3, [r3, #25]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d108      	bne.n	8001af8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	e007      	b.n	8001b08 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b06:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	7e9b      	ldrb	r3, [r3, #26]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d108      	bne.n	8001b22 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 0220 	orr.w	r2, r2, #32
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	e007      	b.n	8001b32 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 0220 	bic.w	r2, r2, #32
 8001b30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	7edb      	ldrb	r3, [r3, #27]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d108      	bne.n	8001b4c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0210 	bic.w	r2, r2, #16
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	e007      	b.n	8001b5c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 0210 	orr.w	r2, r2, #16
 8001b5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	7f1b      	ldrb	r3, [r3, #28]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d108      	bne.n	8001b76 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0208 	orr.w	r2, r2, #8
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	e007      	b.n	8001b86 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 0208 	bic.w	r2, r2, #8
 8001b84:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	7f5b      	ldrb	r3, [r3, #29]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d108      	bne.n	8001ba0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f042 0204 	orr.w	r2, r2, #4
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	e007      	b.n	8001bb0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f022 0204 	bic.w	r2, r2, #4
 8001bae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	ea42 0103 	orr.w	r1, r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	1e5a      	subs	r2, r3, #1
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b087      	sub	sp, #28
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c06:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001c08:	7cfb      	ldrb	r3, [r7, #19]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d003      	beq.n	8001c16 <HAL_CAN_ConfigFilter+0x26>
 8001c0e:	7cfb      	ldrb	r3, [r7, #19]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	f040 80c7 	bne.w	8001da4 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a69      	ldr	r2, [pc, #420]	; (8001dc0 <HAL_CAN_ConfigFilter+0x1d0>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d001      	beq.n	8001c24 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001c20:	4b68      	ldr	r3, [pc, #416]	; (8001dc4 <HAL_CAN_ConfigFilter+0x1d4>)
 8001c22:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c2a:	f043 0201 	orr.w	r2, r3, #1
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	4a63      	ldr	r2, [pc, #396]	; (8001dc4 <HAL_CAN_ConfigFilter+0x1d4>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d111      	bne.n	8001c60 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c42:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	021b      	lsls	r3, r3, #8
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	f003 031f 	and.w	r3, r3, #31
 8001c68:	2201      	movs	r2, #1
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	401a      	ands	r2, r3
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d123      	bne.n	8001cd2 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	43db      	mvns	r3, r3
 8001c94:	401a      	ands	r2, r3
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001cac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	3248      	adds	r2, #72	; 0x48
 8001cb2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cc6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cc8:	6979      	ldr	r1, [r7, #20]
 8001cca:	3348      	adds	r3, #72	; 0x48
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	440b      	add	r3, r1
 8001cd0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d122      	bne.n	8001d20 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001cfa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	3248      	adds	r2, #72	; 0x48
 8001d00:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d14:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d16:	6979      	ldr	r1, [r7, #20]
 8001d18:	3348      	adds	r3, #72	; 0x48
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	440b      	add	r3, r1
 8001d1e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d109      	bne.n	8001d3c <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	401a      	ands	r2, r3
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001d3a:	e007      	b.n	8001d4c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	431a      	orrs	r2, r3
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d109      	bne.n	8001d68 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	401a      	ands	r2, r3
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001d66:	e007      	b.n	8001d78 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	431a      	orrs	r2, r3
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d107      	bne.n	8001d90 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d96:	f023 0201 	bic.w	r2, r3, #1
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001da0:	2300      	movs	r3, #0
 8001da2:	e006      	b.n	8001db2 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
  }
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	371c      	adds	r7, #28
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	40003400 	.word	0x40003400
 8001dc4:	40006400 	.word	0x40006400

08001dc8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d12e      	bne.n	8001e3a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2202      	movs	r2, #2
 8001de0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0201 	bic.w	r2, r2, #1
 8001df2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001df4:	f7ff fdd0 	bl	8001998 <HAL_GetTick>
 8001df8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001dfa:	e012      	b.n	8001e22 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001dfc:	f7ff fdcc 	bl	8001998 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b0a      	cmp	r3, #10
 8001e08:	d90b      	bls.n	8001e22 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2205      	movs	r2, #5
 8001e1a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e012      	b.n	8001e48 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1e5      	bne.n	8001dfc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001e36:	2300      	movs	r3, #0
 8001e38:	e006      	b.n	8001e48 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
  }
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d133      	bne.n	8001ecc <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f042 0201 	orr.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e74:	f7ff fd90 	bl	8001998 <HAL_GetTick>
 8001e78:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e7a:	e012      	b.n	8001ea2 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e7c:	f7ff fd8c 	bl	8001998 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b0a      	cmp	r3, #10
 8001e88:	d90b      	bls.n	8001ea2 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2205      	movs	r2, #5
 8001e9a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e01b      	b.n	8001eda <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0e5      	beq.n	8001e7c <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 0202 	bic.w	r2, r2, #2
 8001ebe:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	e006      	b.n	8001eda <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
  }
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b087      	sub	sp, #28
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
 8001eee:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ef6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ef8:	7dfb      	ldrb	r3, [r7, #23]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d003      	beq.n	8001f06 <HAL_CAN_GetRxMessage+0x24>
 8001efe:	7dfb      	ldrb	r3, [r7, #23]
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	f040 80f3 	bne.w	80020ec <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d10e      	bne.n	8001f2a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d116      	bne.n	8001f48 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e0e7      	b.n	80020fa <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d107      	bne.n	8001f48 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e0d8      	b.n	80020fa <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	331b      	adds	r3, #27
 8001f50:	011b      	lsls	r3, r3, #4
 8001f52:	4413      	add	r3, r2
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0204 	and.w	r2, r3, #4
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10c      	bne.n	8001f80 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	331b      	adds	r3, #27
 8001f6e:	011b      	lsls	r3, r3, #4
 8001f70:	4413      	add	r3, r2
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	0d5b      	lsrs	r3, r3, #21
 8001f76:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	e00b      	b.n	8001f98 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	331b      	adds	r3, #27
 8001f88:	011b      	lsls	r3, r3, #4
 8001f8a:	4413      	add	r3, r2
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	08db      	lsrs	r3, r3, #3
 8001f90:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	331b      	adds	r3, #27
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	4413      	add	r3, r2
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0202 	and.w	r2, r3, #2
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	331b      	adds	r3, #27
 8001fb6:	011b      	lsls	r3, r3, #4
 8001fb8:	4413      	add	r3, r2
 8001fba:	3304      	adds	r3, #4
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 020f 	and.w	r2, r3, #15
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	331b      	adds	r3, #27
 8001fce:	011b      	lsls	r3, r3, #4
 8001fd0:	4413      	add	r3, r2
 8001fd2:	3304      	adds	r3, #4
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	0a1b      	lsrs	r3, r3, #8
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	331b      	adds	r3, #27
 8001fe6:	011b      	lsls	r3, r3, #4
 8001fe8:	4413      	add	r3, r2
 8001fea:	3304      	adds	r3, #4
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	0c1b      	lsrs	r3, r3, #16
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	011b      	lsls	r3, r3, #4
 8001ffe:	4413      	add	r3, r2
 8002000:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	b2da      	uxtb	r2, r3
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	011b      	lsls	r3, r3, #4
 8002014:	4413      	add	r3, r2
 8002016:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	0a1a      	lsrs	r2, r3, #8
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	3301      	adds	r3, #1
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	4413      	add	r3, r2
 8002030:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	0c1a      	lsrs	r2, r3, #16
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	3302      	adds	r3, #2
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	011b      	lsls	r3, r3, #4
 8002048:	4413      	add	r3, r2
 800204a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	0e1a      	lsrs	r2, r3, #24
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	3303      	adds	r3, #3
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	011b      	lsls	r3, r3, #4
 8002062:	4413      	add	r3, r2
 8002064:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	3304      	adds	r3, #4
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	011b      	lsls	r3, r3, #4
 800207a:	4413      	add	r3, r2
 800207c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	0a1a      	lsrs	r2, r3, #8
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	3305      	adds	r3, #5
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	011b      	lsls	r3, r3, #4
 8002094:	4413      	add	r3, r2
 8002096:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	0c1a      	lsrs	r2, r3, #16
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	3306      	adds	r3, #6
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	011b      	lsls	r3, r3, #4
 80020ae:	4413      	add	r3, r2
 80020b0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	0e1a      	lsrs	r2, r3, #24
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	3307      	adds	r3, #7
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d108      	bne.n	80020d8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f042 0220 	orr.w	r2, r2, #32
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	e007      	b.n	80020e8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	691a      	ldr	r2, [r3, #16]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0220 	orr.w	r2, r2, #32
 80020e6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80020e8:	2300      	movs	r3, #0
 80020ea:	e006      	b.n	80020fa <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
  }
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	371c      	adds	r7, #28
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002106:	b480      	push	{r7}
 8002108:	b085      	sub	sp, #20
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002116:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002118:	7bfb      	ldrb	r3, [r7, #15]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d002      	beq.n	8002124 <HAL_CAN_ActivateNotification+0x1e>
 800211e:	7bfb      	ldrb	r3, [r7, #15]
 8002120:	2b02      	cmp	r3, #2
 8002122:	d109      	bne.n	8002138 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6959      	ldr	r1, [r3, #20]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002134:	2300      	movs	r3, #0
 8002136:	e006      	b.n	8002146 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
  }
}
 8002146:	4618      	mov	r0, r3
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8002152:	b480      	push	{r7}
 8002154:	b085      	sub	sp, #20
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002162:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d002      	beq.n	8002170 <HAL_CAN_DeactivateNotification+0x1e>
 800216a:	7bfb      	ldrb	r3, [r7, #15]
 800216c:	2b02      	cmp	r3, #2
 800216e:	d10a      	bne.n	8002186 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6959      	ldr	r1, [r3, #20]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	43da      	mvns	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	400a      	ands	r2, r1
 8002180:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002182:	2300      	movs	r3, #0
 8002184:	e006      	b.n	8002194 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
  }
}
 8002194:	4618      	mov	r0, r3
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08a      	sub	sp, #40	; 0x28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80021a8:	2300      	movs	r3, #0
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80021dc:	6a3b      	ldr	r3, [r7, #32]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d07c      	beq.n	80022e0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d023      	beq.n	8002238 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2201      	movs	r2, #1
 80021f6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f983 	bl	800250e <HAL_CAN_TxMailbox0CompleteCallback>
 8002208:	e016      	b.n	8002238 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d004      	beq.n	800221e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
 800221c:	e00c      	b.n	8002238 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	f003 0308 	and.w	r3, r3, #8
 8002224:	2b00      	cmp	r3, #0
 8002226:	d004      	beq.n	8002232 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800222e:	627b      	str	r3, [r7, #36]	; 0x24
 8002230:	e002      	b.n	8002238 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f989 	bl	800254a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223e:	2b00      	cmp	r3, #0
 8002240:	d024      	beq.n	800228c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f44f 7280 	mov.w	r2, #256	; 0x100
 800224a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f963 	bl	8002522 <HAL_CAN_TxMailbox1CompleteCallback>
 800225c:	e016      	b.n	800228c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002264:	2b00      	cmp	r3, #0
 8002266:	d004      	beq.n	8002272 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
 8002270:	e00c      	b.n	800228c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002278:	2b00      	cmp	r3, #0
 800227a:	d004      	beq.n	8002286 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002282:	627b      	str	r3, [r7, #36]	; 0x24
 8002284:	e002      	b.n	800228c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f969 	bl	800255e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d024      	beq.n	80022e0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800229e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f943 	bl	8002536 <HAL_CAN_TxMailbox2CompleteCallback>
 80022b0:	e016      	b.n	80022e0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d004      	beq.n	80022c6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022c2:	627b      	str	r3, [r7, #36]	; 0x24
 80022c4:	e00c      	b.n	80022e0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d004      	beq.n	80022da <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d6:	627b      	str	r3, [r7, #36]	; 0x24
 80022d8:	e002      	b.n	80022e0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f949 	bl	8002572 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80022e0:	6a3b      	ldr	r3, [r7, #32]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00c      	beq.n	8002304 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f003 0310 	and.w	r3, r3, #16
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d007      	beq.n	8002304 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2210      	movs	r2, #16
 8002302:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002304:	6a3b      	ldr	r3, [r7, #32]
 8002306:	f003 0304 	and.w	r3, r3, #4
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00b      	beq.n	8002326 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f003 0308 	and.w	r3, r3, #8
 8002314:	2b00      	cmp	r3, #0
 8002316:	d006      	beq.n	8002326 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2208      	movs	r2, #8
 800231e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 f930 	bl	8002586 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d009      	beq.n	8002344 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d002      	beq.n	8002344 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7fe ff1a 	bl	8001178 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00c      	beq.n	8002368 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	2b00      	cmp	r3, #0
 8002356:	d007      	beq.n	8002368 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800235e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2210      	movs	r2, #16
 8002366:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002368:	6a3b      	ldr	r3, [r7, #32]
 800236a:	f003 0320 	and.w	r3, r3, #32
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00b      	beq.n	800238a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	f003 0308 	and.w	r3, r3, #8
 8002378:	2b00      	cmp	r3, #0
 800237a:	d006      	beq.n	800238a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2208      	movs	r2, #8
 8002382:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 f912 	bl	80025ae <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	f003 0310 	and.w	r3, r3, #16
 8002390:	2b00      	cmp	r3, #0
 8002392:	d009      	beq.n	80023a8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d002      	beq.n	80023a8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f8f9 	bl	800259a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80023a8:	6a3b      	ldr	r3, [r7, #32]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00b      	beq.n	80023ca <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	f003 0310 	and.w	r3, r3, #16
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d006      	beq.n	80023ca <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2210      	movs	r2, #16
 80023c2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 f8fc 	bl	80025c2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00b      	beq.n	80023ec <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d006      	beq.n	80023ec <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2208      	movs	r2, #8
 80023e4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f8f5 	bl	80025d6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80023ec:	6a3b      	ldr	r3, [r7, #32]
 80023ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d07b      	beq.n	80024ee <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d072      	beq.n	80024e6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002400:	6a3b      	ldr	r3, [r7, #32]
 8002402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002406:	2b00      	cmp	r3, #0
 8002408:	d008      	beq.n	800241c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	f043 0301 	orr.w	r3, r3, #1
 800241a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002422:	2b00      	cmp	r3, #0
 8002424:	d008      	beq.n	8002438 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	f043 0302 	orr.w	r3, r3, #2
 8002436:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800243e:	2b00      	cmp	r3, #0
 8002440:	d008      	beq.n	8002454 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	f043 0304 	orr.w	r3, r3, #4
 8002452:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002454:	6a3b      	ldr	r3, [r7, #32]
 8002456:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800245a:	2b00      	cmp	r3, #0
 800245c:	d043      	beq.n	80024e6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002464:	2b00      	cmp	r3, #0
 8002466:	d03e      	beq.n	80024e6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800246e:	2b60      	cmp	r3, #96	; 0x60
 8002470:	d02b      	beq.n	80024ca <HAL_CAN_IRQHandler+0x32a>
 8002472:	2b60      	cmp	r3, #96	; 0x60
 8002474:	d82e      	bhi.n	80024d4 <HAL_CAN_IRQHandler+0x334>
 8002476:	2b50      	cmp	r3, #80	; 0x50
 8002478:	d022      	beq.n	80024c0 <HAL_CAN_IRQHandler+0x320>
 800247a:	2b50      	cmp	r3, #80	; 0x50
 800247c:	d82a      	bhi.n	80024d4 <HAL_CAN_IRQHandler+0x334>
 800247e:	2b40      	cmp	r3, #64	; 0x40
 8002480:	d019      	beq.n	80024b6 <HAL_CAN_IRQHandler+0x316>
 8002482:	2b40      	cmp	r3, #64	; 0x40
 8002484:	d826      	bhi.n	80024d4 <HAL_CAN_IRQHandler+0x334>
 8002486:	2b30      	cmp	r3, #48	; 0x30
 8002488:	d010      	beq.n	80024ac <HAL_CAN_IRQHandler+0x30c>
 800248a:	2b30      	cmp	r3, #48	; 0x30
 800248c:	d822      	bhi.n	80024d4 <HAL_CAN_IRQHandler+0x334>
 800248e:	2b10      	cmp	r3, #16
 8002490:	d002      	beq.n	8002498 <HAL_CAN_IRQHandler+0x2f8>
 8002492:	2b20      	cmp	r3, #32
 8002494:	d005      	beq.n	80024a2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002496:	e01d      	b.n	80024d4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	f043 0308 	orr.w	r3, r3, #8
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024a0:	e019      	b.n	80024d6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	f043 0310 	orr.w	r3, r3, #16
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024aa:	e014      	b.n	80024d6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	f043 0320 	orr.w	r3, r3, #32
 80024b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024b4:	e00f      	b.n	80024d6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024be:	e00a      	b.n	80024d6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024c8:	e005      	b.n	80024d6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024d2:	e000      	b.n	80024d6 <HAL_CAN_IRQHandler+0x336>
            break;
 80024d4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	699a      	ldr	r2, [r3, #24]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80024e4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2204      	movs	r2, #4
 80024ec:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d008      	beq.n	8002506 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 f872 	bl	80025ea <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002506:	bf00      	nop
 8002508:	3728      	adds	r7, #40	; 0x28
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
	...

08002600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <__NVIC_SetPriorityGrouping+0x40>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800261c:	4013      	ands	r3, r2
 800261e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <__NVIC_SetPriorityGrouping+0x44>)
 800262a:	4313      	orrs	r3, r2
 800262c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800262e:	4a04      	ldr	r2, [pc, #16]	; (8002640 <__NVIC_SetPriorityGrouping+0x40>)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	60d3      	str	r3, [r2, #12]
}
 8002634:	bf00      	nop
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000ed00 	.word	0xe000ed00
 8002644:	05fa0000 	.word	0x05fa0000

08002648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800264c:	4b04      	ldr	r3, [pc, #16]	; (8002660 <__NVIC_GetPriorityGrouping+0x18>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	0a1b      	lsrs	r3, r3, #8
 8002652:	f003 0307 	and.w	r3, r3, #7
}
 8002656:	4618      	mov	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	2b00      	cmp	r3, #0
 8002674:	db0b      	blt.n	800268e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	f003 021f 	and.w	r2, r3, #31
 800267c:	4907      	ldr	r1, [pc, #28]	; (800269c <__NVIC_EnableIRQ+0x38>)
 800267e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002682:	095b      	lsrs	r3, r3, #5
 8002684:	2001      	movs	r0, #1
 8002686:	fa00 f202 	lsl.w	r2, r0, r2
 800268a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	e000e100 	.word	0xe000e100

080026a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	6039      	str	r1, [r7, #0]
 80026aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	db0a      	blt.n	80026ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	490c      	ldr	r1, [pc, #48]	; (80026ec <__NVIC_SetPriority+0x4c>)
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	0112      	lsls	r2, r2, #4
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	440b      	add	r3, r1
 80026c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026c8:	e00a      	b.n	80026e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	4908      	ldr	r1, [pc, #32]	; (80026f0 <__NVIC_SetPriority+0x50>)
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	3b04      	subs	r3, #4
 80026d8:	0112      	lsls	r2, r2, #4
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	440b      	add	r3, r1
 80026de:	761a      	strb	r2, [r3, #24]
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	e000e100 	.word	0xe000e100
 80026f0:	e000ed00 	.word	0xe000ed00

080026f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b089      	sub	sp, #36	; 0x24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f1c3 0307 	rsb	r3, r3, #7
 800270e:	2b04      	cmp	r3, #4
 8002710:	bf28      	it	cs
 8002712:	2304      	movcs	r3, #4
 8002714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	3304      	adds	r3, #4
 800271a:	2b06      	cmp	r3, #6
 800271c:	d902      	bls.n	8002724 <NVIC_EncodePriority+0x30>
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	3b03      	subs	r3, #3
 8002722:	e000      	b.n	8002726 <NVIC_EncodePriority+0x32>
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002728:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43da      	mvns	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	401a      	ands	r2, r3
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800273c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	fa01 f303 	lsl.w	r3, r1, r3
 8002746:	43d9      	mvns	r1, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800274c:	4313      	orrs	r3, r2
         );
}
 800274e:	4618      	mov	r0, r3
 8002750:	3724      	adds	r7, #36	; 0x24
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
	...

0800275c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3b01      	subs	r3, #1
 8002768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800276c:	d301      	bcc.n	8002772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800276e:	2301      	movs	r3, #1
 8002770:	e00f      	b.n	8002792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002772:	4a0a      	ldr	r2, [pc, #40]	; (800279c <SysTick_Config+0x40>)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3b01      	subs	r3, #1
 8002778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800277a:	210f      	movs	r1, #15
 800277c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002780:	f7ff ff8e 	bl	80026a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002784:	4b05      	ldr	r3, [pc, #20]	; (800279c <SysTick_Config+0x40>)
 8002786:	2200      	movs	r2, #0
 8002788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800278a:	4b04      	ldr	r3, [pc, #16]	; (800279c <SysTick_Config+0x40>)
 800278c:	2207      	movs	r2, #7
 800278e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	e000e010 	.word	0xe000e010

080027a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7ff ff29 	bl	8002600 <__NVIC_SetPriorityGrouping>
}
 80027ae:	bf00      	nop
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b086      	sub	sp, #24
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	4603      	mov	r3, r0
 80027be:	60b9      	str	r1, [r7, #8]
 80027c0:	607a      	str	r2, [r7, #4]
 80027c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027c8:	f7ff ff3e 	bl	8002648 <__NVIC_GetPriorityGrouping>
 80027cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	68b9      	ldr	r1, [r7, #8]
 80027d2:	6978      	ldr	r0, [r7, #20]
 80027d4:	f7ff ff8e 	bl	80026f4 <NVIC_EncodePriority>
 80027d8:	4602      	mov	r2, r0
 80027da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027de:	4611      	mov	r1, r2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ff5d 	bl	80026a0 <__NVIC_SetPriority>
}
 80027e6:	bf00      	nop
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	4603      	mov	r3, r0
 80027f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff ff31 	bl	8002664 <__NVIC_EnableIRQ>
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b082      	sub	sp, #8
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7ff ffa2 	bl	800275c <SysTick_Config>
 8002818:	4603      	mov	r3, r0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002830:	f7ff f8b2 	bl	8001998 <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e099      	b.n	8002974 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2202      	movs	r2, #2
 8002844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0201 	bic.w	r2, r2, #1
 800285e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002860:	e00f      	b.n	8002882 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002862:	f7ff f899 	bl	8001998 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b05      	cmp	r3, #5
 800286e:	d908      	bls.n	8002882 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2220      	movs	r2, #32
 8002874:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2203      	movs	r2, #3
 800287a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e078      	b.n	8002974 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1e8      	bne.n	8002862 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	4b38      	ldr	r3, [pc, #224]	; (800297c <HAL_DMA_Init+0x158>)
 800289c:	4013      	ands	r3, r2
 800289e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	2b04      	cmp	r3, #4
 80028da:	d107      	bne.n	80028ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e4:	4313      	orrs	r3, r2
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f023 0307 	bic.w	r3, r3, #7
 8002902:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	4313      	orrs	r3, r2
 800290c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002912:	2b04      	cmp	r3, #4
 8002914:	d117      	bne.n	8002946 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	4313      	orrs	r3, r2
 800291e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00e      	beq.n	8002946 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 faa5 	bl	8002e78 <DMA_CheckFifoParam>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d008      	beq.n	8002946 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2240      	movs	r2, #64	; 0x40
 8002938:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002942:	2301      	movs	r3, #1
 8002944:	e016      	b.n	8002974 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 fa5c 	bl	8002e0c <DMA_CalcBaseAndBitshift>
 8002954:	4603      	mov	r3, r0
 8002956:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295c:	223f      	movs	r2, #63	; 0x3f
 800295e:	409a      	lsls	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	e010803f 	.word	0xe010803f

08002980 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
 800298c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002996:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d101      	bne.n	80029a6 <HAL_DMA_Start_IT+0x26>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e048      	b.n	8002a38 <HAL_DMA_Start_IT+0xb8>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d137      	bne.n	8002a2a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2202      	movs	r2, #2
 80029be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	68b9      	ldr	r1, [r7, #8]
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 f9ee 	bl	8002db0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d8:	223f      	movs	r2, #63	; 0x3f
 80029da:	409a      	lsls	r2, r3
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f042 0216 	orr.w	r2, r2, #22
 80029ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	695a      	ldr	r2, [r3, #20]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029fe:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d007      	beq.n	8002a18 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0208 	orr.w	r2, r2, #8
 8002a16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0201 	orr.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	e005      	b.n	8002a36 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a32:	2302      	movs	r3, #2
 8002a34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d004      	beq.n	8002a5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2280      	movs	r2, #128	; 0x80
 8002a58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e00c      	b.n	8002a78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2205      	movs	r2, #5
 8002a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0201 	bic.w	r2, r2, #1
 8002a74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002a90:	4b8e      	ldr	r3, [pc, #568]	; (8002ccc <HAL_DMA_IRQHandler+0x248>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a8e      	ldr	r2, [pc, #568]	; (8002cd0 <HAL_DMA_IRQHandler+0x24c>)
 8002a96:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9a:	0a9b      	lsrs	r3, r3, #10
 8002a9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aae:	2208      	movs	r2, #8
 8002ab0:	409a      	lsls	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d01a      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d013      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0204 	bic.w	r2, r2, #4
 8002ad6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002adc:	2208      	movs	r2, #8
 8002ade:	409a      	lsls	r2, r3
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae8:	f043 0201 	orr.w	r2, r3, #1
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af4:	2201      	movs	r2, #1
 8002af6:	409a      	lsls	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4013      	ands	r3, r2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d012      	beq.n	8002b26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00b      	beq.n	8002b26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b12:	2201      	movs	r2, #1
 8002b14:	409a      	lsls	r2, r3
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1e:	f043 0202 	orr.w	r2, r3, #2
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2a:	2204      	movs	r2, #4
 8002b2c:	409a      	lsls	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	4013      	ands	r3, r2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d012      	beq.n	8002b5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00b      	beq.n	8002b5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b48:	2204      	movs	r2, #4
 8002b4a:	409a      	lsls	r2, r3
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b54:	f043 0204 	orr.w	r2, r3, #4
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b60:	2210      	movs	r2, #16
 8002b62:	409a      	lsls	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4013      	ands	r3, r2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d043      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d03c      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7e:	2210      	movs	r2, #16
 8002b80:	409a      	lsls	r2, r3
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d018      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d108      	bne.n	8002bb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d024      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	4798      	blx	r3
 8002bb2:	e01f      	b.n	8002bf4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d01b      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	4798      	blx	r3
 8002bc4:	e016      	b.n	8002bf4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d107      	bne.n	8002be4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0208 	bic.w	r2, r2, #8
 8002be2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	409a      	lsls	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 808f 	beq.w	8002d24 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0310 	and.w	r3, r3, #16
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 8087 	beq.w	8002d24 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	409a      	lsls	r2, r3
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b05      	cmp	r3, #5
 8002c2c:	d136      	bne.n	8002c9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0216 	bic.w	r2, r2, #22
 8002c3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	695a      	ldr	r2, [r3, #20]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d103      	bne.n	8002c5e <HAL_DMA_IRQHandler+0x1da>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d007      	beq.n	8002c6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0208 	bic.w	r2, r2, #8
 8002c6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c72:	223f      	movs	r2, #63	; 0x3f
 8002c74:	409a      	lsls	r2, r3
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d07e      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	4798      	blx	r3
        }
        return;
 8002c9a:	e079      	b.n	8002d90 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d01d      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10d      	bne.n	8002cd4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d031      	beq.n	8002d24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	4798      	blx	r3
 8002cc8:	e02c      	b.n	8002d24 <HAL_DMA_IRQHandler+0x2a0>
 8002cca:	bf00      	nop
 8002ccc:	20000000 	.word	0x20000000
 8002cd0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d023      	beq.n	8002d24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	4798      	blx	r3
 8002ce4:	e01e      	b.n	8002d24 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10f      	bne.n	8002d14 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0210 	bic.w	r2, r2, #16
 8002d02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d032      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d022      	beq.n	8002d7e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2205      	movs	r2, #5
 8002d3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0201 	bic.w	r2, r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	3301      	adds	r3, #1
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d307      	bcc.n	8002d6c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f2      	bne.n	8002d50 <HAL_DMA_IRQHandler+0x2cc>
 8002d6a:	e000      	b.n	8002d6e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d6c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d005      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	4798      	blx	r3
 8002d8e:	e000      	b.n	8002d92 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d90:	bf00      	nop
    }
  }
}
 8002d92:	3718      	adds	r7, #24
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
 8002dbc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002dcc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	2b40      	cmp	r3, #64	; 0x40
 8002ddc:	d108      	bne.n	8002df0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002dee:	e007      	b.n	8002e00 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	60da      	str	r2, [r3, #12]
}
 8002e00:	bf00      	nop
 8002e02:	3714      	adds	r7, #20
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	3b10      	subs	r3, #16
 8002e1c:	4a13      	ldr	r2, [pc, #76]	; (8002e6c <DMA_CalcBaseAndBitshift+0x60>)
 8002e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e22:	091b      	lsrs	r3, r3, #4
 8002e24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e26:	4a12      	ldr	r2, [pc, #72]	; (8002e70 <DMA_CalcBaseAndBitshift+0x64>)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	d908      	bls.n	8002e4c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <DMA_CalcBaseAndBitshift+0x68>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	1d1a      	adds	r2, r3, #4
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	659a      	str	r2, [r3, #88]	; 0x58
 8002e4a:	e006      	b.n	8002e5a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	461a      	mov	r2, r3
 8002e52:	4b08      	ldr	r3, [pc, #32]	; (8002e74 <DMA_CalcBaseAndBitshift+0x68>)
 8002e54:	4013      	ands	r3, r2
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3714      	adds	r7, #20
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	aaaaaaab 	.word	0xaaaaaaab
 8002e70:	080119c8 	.word	0x080119c8
 8002e74:	fffffc00 	.word	0xfffffc00

08002e78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e80:	2300      	movs	r3, #0
 8002e82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d11f      	bne.n	8002ed2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d856      	bhi.n	8002f46 <DMA_CheckFifoParam+0xce>
 8002e98:	a201      	add	r2, pc, #4	; (adr r2, 8002ea0 <DMA_CheckFifoParam+0x28>)
 8002e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e9e:	bf00      	nop
 8002ea0:	08002eb1 	.word	0x08002eb1
 8002ea4:	08002ec3 	.word	0x08002ec3
 8002ea8:	08002eb1 	.word	0x08002eb1
 8002eac:	08002f47 	.word	0x08002f47
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d046      	beq.n	8002f4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ec0:	e043      	b.n	8002f4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002eca:	d140      	bne.n	8002f4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ed0:	e03d      	b.n	8002f4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eda:	d121      	bne.n	8002f20 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	2b03      	cmp	r3, #3
 8002ee0:	d837      	bhi.n	8002f52 <DMA_CheckFifoParam+0xda>
 8002ee2:	a201      	add	r2, pc, #4	; (adr r2, 8002ee8 <DMA_CheckFifoParam+0x70>)
 8002ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee8:	08002ef9 	.word	0x08002ef9
 8002eec:	08002eff 	.word	0x08002eff
 8002ef0:	08002ef9 	.word	0x08002ef9
 8002ef4:	08002f11 	.word	0x08002f11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	73fb      	strb	r3, [r7, #15]
      break;
 8002efc:	e030      	b.n	8002f60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d025      	beq.n	8002f56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f0e:	e022      	b.n	8002f56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f18:	d11f      	bne.n	8002f5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f1e:	e01c      	b.n	8002f5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d903      	bls.n	8002f2e <DMA_CheckFifoParam+0xb6>
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2b03      	cmp	r3, #3
 8002f2a:	d003      	beq.n	8002f34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f2c:	e018      	b.n	8002f60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	73fb      	strb	r3, [r7, #15]
      break;
 8002f32:	e015      	b.n	8002f60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00e      	beq.n	8002f5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	73fb      	strb	r3, [r7, #15]
      break;
 8002f44:	e00b      	b.n	8002f5e <DMA_CheckFifoParam+0xe6>
      break;
 8002f46:	bf00      	nop
 8002f48:	e00a      	b.n	8002f60 <DMA_CheckFifoParam+0xe8>
      break;
 8002f4a:	bf00      	nop
 8002f4c:	e008      	b.n	8002f60 <DMA_CheckFifoParam+0xe8>
      break;
 8002f4e:	bf00      	nop
 8002f50:	e006      	b.n	8002f60 <DMA_CheckFifoParam+0xe8>
      break;
 8002f52:	bf00      	nop
 8002f54:	e004      	b.n	8002f60 <DMA_CheckFifoParam+0xe8>
      break;
 8002f56:	bf00      	nop
 8002f58:	e002      	b.n	8002f60 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f5a:	bf00      	nop
 8002f5c:	e000      	b.n	8002f60 <DMA_CheckFifoParam+0xe8>
      break;
 8002f5e:	bf00      	nop
    }
  } 
  
  return status; 
 8002f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop

08002f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b089      	sub	sp, #36	; 0x24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f82:	2300      	movs	r3, #0
 8002f84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61fb      	str	r3, [r7, #28]
 8002f8e:	e175      	b.n	800327c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002f90:	2201      	movs	r2, #1
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	f040 8164 	bne.w	8003276 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d005      	beq.n	8002fc6 <HAL_GPIO_Init+0x56>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f003 0303 	and.w	r3, r3, #3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d130      	bne.n	8003028 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	2203      	movs	r2, #3
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4013      	ands	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	091b      	lsrs	r3, r3, #4
 8003012:	f003 0201 	and.w	r2, r3, #1
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4313      	orrs	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f003 0303 	and.w	r3, r3, #3
 8003030:	2b03      	cmp	r3, #3
 8003032:	d017      	beq.n	8003064 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	2203      	movs	r2, #3
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 0303 	and.w	r3, r3, #3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d123      	bne.n	80030b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	08da      	lsrs	r2, r3, #3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3208      	adds	r2, #8
 8003078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800307c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	220f      	movs	r2, #15
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	43db      	mvns	r3, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4013      	ands	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	691a      	ldr	r2, [r3, #16]
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	08da      	lsrs	r2, r3, #3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3208      	adds	r2, #8
 80030b2:	69b9      	ldr	r1, [r7, #24]
 80030b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	2203      	movs	r2, #3
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4013      	ands	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f003 0203 	and.w	r2, r3, #3
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 80be 	beq.w	8003276 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030fa:	4b66      	ldr	r3, [pc, #408]	; (8003294 <HAL_GPIO_Init+0x324>)
 80030fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fe:	4a65      	ldr	r2, [pc, #404]	; (8003294 <HAL_GPIO_Init+0x324>)
 8003100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003104:	6453      	str	r3, [r2, #68]	; 0x44
 8003106:	4b63      	ldr	r3, [pc, #396]	; (8003294 <HAL_GPIO_Init+0x324>)
 8003108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003112:	4a61      	ldr	r2, [pc, #388]	; (8003298 <HAL_GPIO_Init+0x328>)
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	089b      	lsrs	r3, r3, #2
 8003118:	3302      	adds	r3, #2
 800311a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800311e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	220f      	movs	r2, #15
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43db      	mvns	r3, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4013      	ands	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a58      	ldr	r2, [pc, #352]	; (800329c <HAL_GPIO_Init+0x32c>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d037      	beq.n	80031ae <HAL_GPIO_Init+0x23e>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a57      	ldr	r2, [pc, #348]	; (80032a0 <HAL_GPIO_Init+0x330>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d031      	beq.n	80031aa <HAL_GPIO_Init+0x23a>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a56      	ldr	r2, [pc, #344]	; (80032a4 <HAL_GPIO_Init+0x334>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d02b      	beq.n	80031a6 <HAL_GPIO_Init+0x236>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a55      	ldr	r2, [pc, #340]	; (80032a8 <HAL_GPIO_Init+0x338>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d025      	beq.n	80031a2 <HAL_GPIO_Init+0x232>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a54      	ldr	r2, [pc, #336]	; (80032ac <HAL_GPIO_Init+0x33c>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d01f      	beq.n	800319e <HAL_GPIO_Init+0x22e>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a53      	ldr	r2, [pc, #332]	; (80032b0 <HAL_GPIO_Init+0x340>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d019      	beq.n	800319a <HAL_GPIO_Init+0x22a>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a52      	ldr	r2, [pc, #328]	; (80032b4 <HAL_GPIO_Init+0x344>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d013      	beq.n	8003196 <HAL_GPIO_Init+0x226>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a51      	ldr	r2, [pc, #324]	; (80032b8 <HAL_GPIO_Init+0x348>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00d      	beq.n	8003192 <HAL_GPIO_Init+0x222>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a50      	ldr	r2, [pc, #320]	; (80032bc <HAL_GPIO_Init+0x34c>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d007      	beq.n	800318e <HAL_GPIO_Init+0x21e>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a4f      	ldr	r2, [pc, #316]	; (80032c0 <HAL_GPIO_Init+0x350>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d101      	bne.n	800318a <HAL_GPIO_Init+0x21a>
 8003186:	2309      	movs	r3, #9
 8003188:	e012      	b.n	80031b0 <HAL_GPIO_Init+0x240>
 800318a:	230a      	movs	r3, #10
 800318c:	e010      	b.n	80031b0 <HAL_GPIO_Init+0x240>
 800318e:	2308      	movs	r3, #8
 8003190:	e00e      	b.n	80031b0 <HAL_GPIO_Init+0x240>
 8003192:	2307      	movs	r3, #7
 8003194:	e00c      	b.n	80031b0 <HAL_GPIO_Init+0x240>
 8003196:	2306      	movs	r3, #6
 8003198:	e00a      	b.n	80031b0 <HAL_GPIO_Init+0x240>
 800319a:	2305      	movs	r3, #5
 800319c:	e008      	b.n	80031b0 <HAL_GPIO_Init+0x240>
 800319e:	2304      	movs	r3, #4
 80031a0:	e006      	b.n	80031b0 <HAL_GPIO_Init+0x240>
 80031a2:	2303      	movs	r3, #3
 80031a4:	e004      	b.n	80031b0 <HAL_GPIO_Init+0x240>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e002      	b.n	80031b0 <HAL_GPIO_Init+0x240>
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <HAL_GPIO_Init+0x240>
 80031ae:	2300      	movs	r3, #0
 80031b0:	69fa      	ldr	r2, [r7, #28]
 80031b2:	f002 0203 	and.w	r2, r2, #3
 80031b6:	0092      	lsls	r2, r2, #2
 80031b8:	4093      	lsls	r3, r2
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4313      	orrs	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80031c0:	4935      	ldr	r1, [pc, #212]	; (8003298 <HAL_GPIO_Init+0x328>)
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	089b      	lsrs	r3, r3, #2
 80031c6:	3302      	adds	r3, #2
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ce:	4b3d      	ldr	r3, [pc, #244]	; (80032c4 <HAL_GPIO_Init+0x354>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	43db      	mvns	r3, r3
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	4013      	ands	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031f2:	4a34      	ldr	r2, [pc, #208]	; (80032c4 <HAL_GPIO_Init+0x354>)
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031f8:	4b32      	ldr	r3, [pc, #200]	; (80032c4 <HAL_GPIO_Init+0x354>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	43db      	mvns	r3, r3
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4013      	ands	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4313      	orrs	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800321c:	4a29      	ldr	r2, [pc, #164]	; (80032c4 <HAL_GPIO_Init+0x354>)
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003222:	4b28      	ldr	r3, [pc, #160]	; (80032c4 <HAL_GPIO_Init+0x354>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	43db      	mvns	r3, r3
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4013      	ands	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003246:	4a1f      	ldr	r2, [pc, #124]	; (80032c4 <HAL_GPIO_Init+0x354>)
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800324c:	4b1d      	ldr	r3, [pc, #116]	; (80032c4 <HAL_GPIO_Init+0x354>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	43db      	mvns	r3, r3
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	4013      	ands	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003270:	4a14      	ldr	r2, [pc, #80]	; (80032c4 <HAL_GPIO_Init+0x354>)
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	3301      	adds	r3, #1
 800327a:	61fb      	str	r3, [r7, #28]
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	2b0f      	cmp	r3, #15
 8003280:	f67f ae86 	bls.w	8002f90 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003284:	bf00      	nop
 8003286:	bf00      	nop
 8003288:	3724      	adds	r7, #36	; 0x24
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	40023800 	.word	0x40023800
 8003298:	40013800 	.word	0x40013800
 800329c:	40020000 	.word	0x40020000
 80032a0:	40020400 	.word	0x40020400
 80032a4:	40020800 	.word	0x40020800
 80032a8:	40020c00 	.word	0x40020c00
 80032ac:	40021000 	.word	0x40021000
 80032b0:	40021400 	.word	0x40021400
 80032b4:	40021800 	.word	0x40021800
 80032b8:	40021c00 	.word	0x40021c00
 80032bc:	40022000 	.word	0x40022000
 80032c0:	40022400 	.word	0x40022400
 80032c4:	40013c00 	.word	0x40013c00

080032c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	460b      	mov	r3, r1
 80032d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	887b      	ldrh	r3, [r7, #2]
 80032da:	4013      	ands	r3, r2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d002      	beq.n	80032e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032e0:	2301      	movs	r3, #1
 80032e2:	73fb      	strb	r3, [r7, #15]
 80032e4:	e001      	b.n	80032ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032e6:	2300      	movs	r3, #0
 80032e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	460b      	mov	r3, r1
 8003302:	807b      	strh	r3, [r7, #2]
 8003304:	4613      	mov	r3, r2
 8003306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003308:	787b      	ldrb	r3, [r7, #1]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800330e:	887a      	ldrh	r2, [r7, #2]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003314:	e003      	b.n	800331e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003316:	887b      	ldrh	r3, [r7, #2]
 8003318:	041a      	lsls	r2, r3, #16
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	619a      	str	r2, [r3, #24]
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
	...

0800332c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	4603      	mov	r3, r0
 8003334:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003336:	4b08      	ldr	r3, [pc, #32]	; (8003358 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003338:	695a      	ldr	r2, [r3, #20]
 800333a:	88fb      	ldrh	r3, [r7, #6]
 800333c:	4013      	ands	r3, r2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d006      	beq.n	8003350 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003342:	4a05      	ldr	r2, [pc, #20]	; (8003358 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003344:	88fb      	ldrh	r3, [r7, #6]
 8003346:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003348:	88fb      	ldrh	r3, [r7, #6]
 800334a:	4618      	mov	r0, r3
 800334c:	f000 f806 	bl	800335c <HAL_GPIO_EXTI_Callback>
  }
}
 8003350:	bf00      	nop
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40013c00 	.word	0x40013c00

0800335c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	4603      	mov	r3, r0
 8003364:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003372:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003374:	b08f      	sub	sp, #60	; 0x3c
 8003376:	af0a      	add	r7, sp, #40	; 0x28
 8003378:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e116      	b.n	80035b2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d106      	bne.n	80033a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f00c fb60 	bl	800fa64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2203      	movs	r2, #3
 80033a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d102      	bne.n	80033be <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f005 fa97 	bl	80088f6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	603b      	str	r3, [r7, #0]
 80033ce:	687e      	ldr	r6, [r7, #4]
 80033d0:	466d      	mov	r5, sp
 80033d2:	f106 0410 	add.w	r4, r6, #16
 80033d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80033e6:	1d33      	adds	r3, r6, #4
 80033e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033ea:	6838      	ldr	r0, [r7, #0]
 80033ec:	f005 f978 	bl	80086e0 <USB_CoreInit>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d005      	beq.n	8003402 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2202      	movs	r2, #2
 80033fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e0d7      	b.n	80035b2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2100      	movs	r1, #0
 8003408:	4618      	mov	r0, r3
 800340a:	f005 fa85 	bl	8008918 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800340e:	2300      	movs	r3, #0
 8003410:	73fb      	strb	r3, [r7, #15]
 8003412:	e04a      	b.n	80034aa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003414:	7bfa      	ldrb	r2, [r7, #15]
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	4413      	add	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	333d      	adds	r3, #61	; 0x3d
 8003424:	2201      	movs	r2, #1
 8003426:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003428:	7bfa      	ldrb	r2, [r7, #15]
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	4413      	add	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	333c      	adds	r3, #60	; 0x3c
 8003438:	7bfa      	ldrb	r2, [r7, #15]
 800343a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800343c:	7bfa      	ldrb	r2, [r7, #15]
 800343e:	7bfb      	ldrb	r3, [r7, #15]
 8003440:	b298      	uxth	r0, r3
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	4613      	mov	r3, r2
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	4413      	add	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	3344      	adds	r3, #68	; 0x44
 8003450:	4602      	mov	r2, r0
 8003452:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003454:	7bfa      	ldrb	r2, [r7, #15]
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	4613      	mov	r3, r2
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	4413      	add	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	3340      	adds	r3, #64	; 0x40
 8003464:	2200      	movs	r2, #0
 8003466:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003468:	7bfa      	ldrb	r2, [r7, #15]
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	4613      	mov	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	4413      	add	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	440b      	add	r3, r1
 8003476:	3348      	adds	r3, #72	; 0x48
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800347c:	7bfa      	ldrb	r2, [r7, #15]
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	4613      	mov	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	4413      	add	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	334c      	adds	r3, #76	; 0x4c
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003490:	7bfa      	ldrb	r2, [r7, #15]
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	4413      	add	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	3354      	adds	r3, #84	; 0x54
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
 80034a6:	3301      	adds	r3, #1
 80034a8:	73fb      	strb	r3, [r7, #15]
 80034aa:	7bfa      	ldrb	r2, [r7, #15]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d3af      	bcc.n	8003414 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034b4:	2300      	movs	r3, #0
 80034b6:	73fb      	strb	r3, [r7, #15]
 80034b8:	e044      	b.n	8003544 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034ba:	7bfa      	ldrb	r2, [r7, #15]
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80034cc:	2200      	movs	r2, #0
 80034ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034d0:	7bfa      	ldrb	r2, [r7, #15]
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	4613      	mov	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80034e2:	7bfa      	ldrb	r2, [r7, #15]
 80034e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034e6:	7bfa      	ldrb	r2, [r7, #15]
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	4413      	add	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80034f8:	2200      	movs	r2, #0
 80034fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034fc:	7bfa      	ldrb	r2, [r7, #15]
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	4613      	mov	r3, r2
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	4413      	add	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003512:	7bfa      	ldrb	r2, [r7, #15]
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	4613      	mov	r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	4413      	add	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	440b      	add	r3, r1
 8003520:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003528:	7bfa      	ldrb	r2, [r7, #15]
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	4613      	mov	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	4413      	add	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800353e:	7bfb      	ldrb	r3, [r7, #15]
 8003540:	3301      	adds	r3, #1
 8003542:	73fb      	strb	r3, [r7, #15]
 8003544:	7bfa      	ldrb	r2, [r7, #15]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	429a      	cmp	r2, r3
 800354c:	d3b5      	bcc.n	80034ba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	603b      	str	r3, [r7, #0]
 8003554:	687e      	ldr	r6, [r7, #4]
 8003556:	466d      	mov	r5, sp
 8003558:	f106 0410 	add.w	r4, r6, #16
 800355c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800355e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003560:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003562:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003564:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003568:	e885 0003 	stmia.w	r5, {r0, r1}
 800356c:	1d33      	adds	r3, r6, #4
 800356e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003570:	6838      	ldr	r0, [r7, #0]
 8003572:	f005 fa1d 	bl	80089b0 <USB_DevInit>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2202      	movs	r2, #2
 8003580:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e014      	b.n	80035b2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	2b01      	cmp	r3, #1
 800359e:	d102      	bne.n	80035a6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f001 f97b 	bl	800489c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f006 fb6b 	bl	8009c86 <USB_DevDisconnect>

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3714      	adds	r7, #20
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035ba <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b082      	sub	sp, #8
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d101      	bne.n	80035d0 <HAL_PCD_Start+0x16>
 80035cc:	2302      	movs	r3, #2
 80035ce:	e012      	b.n	80035f6 <HAL_PCD_Start+0x3c>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f005 f979 	bl	80088d4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f006 fb2c 	bl	8009c44 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80035fe:	b590      	push	{r4, r7, lr}
 8003600:	b08d      	sub	sp, #52	; 0x34
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4618      	mov	r0, r3
 8003616:	f006 fbea 	bl	8009dee <USB_GetMode>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	f040 84b7 	bne.w	8003f90 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f006 fb4e 	bl	8009cc8 <USB_ReadInterrupts>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 84ad 	beq.w	8003f8e <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	0a1b      	lsrs	r3, r3, #8
 800363e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f006 fb3b 	bl	8009cc8 <USB_ReadInterrupts>
 8003652:	4603      	mov	r3, r0
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b02      	cmp	r3, #2
 800365a:	d107      	bne.n	800366c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695a      	ldr	r2, [r3, #20]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f002 0202 	and.w	r2, r2, #2
 800366a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f006 fb29 	bl	8009cc8 <USB_ReadInterrupts>
 8003676:	4603      	mov	r3, r0
 8003678:	f003 0310 	and.w	r3, r3, #16
 800367c:	2b10      	cmp	r3, #16
 800367e:	d161      	bne.n	8003744 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699a      	ldr	r2, [r3, #24]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0210 	bic.w	r2, r2, #16
 800368e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	f003 020f 	and.w	r2, r3, #15
 800369c:	4613      	mov	r3, r2
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	4413      	add	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	4413      	add	r3, r2
 80036ac:	3304      	adds	r3, #4
 80036ae:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	0c5b      	lsrs	r3, r3, #17
 80036b4:	f003 030f 	and.w	r3, r3, #15
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d124      	bne.n	8003706 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80036c2:	4013      	ands	r3, r2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d035      	beq.n	8003734 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	091b      	lsrs	r3, r3, #4
 80036d0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80036d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	461a      	mov	r2, r3
 80036da:	6a38      	ldr	r0, [r7, #32]
 80036dc:	f006 f960 	bl	80099a0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	691a      	ldr	r2, [r3, #16]
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	091b      	lsrs	r3, r3, #4
 80036e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036ec:	441a      	add	r2, r3
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	6a1a      	ldr	r2, [r3, #32]
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	091b      	lsrs	r3, r3, #4
 80036fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036fe:	441a      	add	r2, r3
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	621a      	str	r2, [r3, #32]
 8003704:	e016      	b.n	8003734 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	0c5b      	lsrs	r3, r3, #17
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	2b06      	cmp	r3, #6
 8003710:	d110      	bne.n	8003734 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003718:	2208      	movs	r2, #8
 800371a:	4619      	mov	r1, r3
 800371c:	6a38      	ldr	r0, [r7, #32]
 800371e:	f006 f93f 	bl	80099a0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	6a1a      	ldr	r2, [r3, #32]
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	091b      	lsrs	r3, r3, #4
 800372a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800372e:	441a      	add	r2, r3
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699a      	ldr	r2, [r3, #24]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0210 	orr.w	r2, r2, #16
 8003742:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	f006 fabd 	bl	8009cc8 <USB_ReadInterrupts>
 800374e:	4603      	mov	r3, r0
 8003750:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003754:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003758:	f040 80a7 	bne.w	80038aa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800375c:	2300      	movs	r3, #0
 800375e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4618      	mov	r0, r3
 8003766:	f006 fac2 	bl	8009cee <USB_ReadDevAllOutEpInterrupt>
 800376a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800376c:	e099      	b.n	80038a2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800376e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 808e 	beq.w	8003896 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003780:	b2d2      	uxtb	r2, r2
 8003782:	4611      	mov	r1, r2
 8003784:	4618      	mov	r0, r3
 8003786:	f006 fae6 	bl	8009d56 <USB_ReadDevOutEPInterrupt>
 800378a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00c      	beq.n	80037b0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	4413      	add	r3, r2
 800379e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037a2:	461a      	mov	r2, r3
 80037a4:	2301      	movs	r3, #1
 80037a6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80037a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 fef0 	bl	8004590 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00c      	beq.n	80037d4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	015a      	lsls	r2, r3, #5
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	4413      	add	r3, r2
 80037c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c6:	461a      	mov	r2, r3
 80037c8:	2308      	movs	r3, #8
 80037ca:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80037cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 ffc6 	bl	8004760 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	f003 0310 	and.w	r3, r3, #16
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d008      	beq.n	80037f0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	015a      	lsls	r2, r3, #5
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ea:	461a      	mov	r2, r3
 80037ec:	2310      	movs	r3, #16
 80037ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d030      	beq.n	800385c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003802:	2b80      	cmp	r3, #128	; 0x80
 8003804:	d109      	bne.n	800381a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	69fa      	ldr	r2, [r7, #28]
 8003810:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003814:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003818:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800381a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800381c:	4613      	mov	r3, r2
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	4413      	add	r3, r2
 800382c:	3304      	adds	r3, #4
 800382e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	78db      	ldrb	r3, [r3, #3]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d108      	bne.n	800384a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	2200      	movs	r2, #0
 800383c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003840:	b2db      	uxtb	r3, r3
 8003842:	4619      	mov	r1, r3
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f00c fa31 	bl	800fcac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	4413      	add	r3, r2
 8003852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003856:	461a      	mov	r2, r3
 8003858:	2302      	movs	r3, #2
 800385a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	f003 0320 	and.w	r3, r3, #32
 8003862:	2b00      	cmp	r3, #0
 8003864:	d008      	beq.n	8003878 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003868:	015a      	lsls	r2, r3, #5
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	4413      	add	r3, r2
 800386e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003872:	461a      	mov	r2, r3
 8003874:	2320      	movs	r3, #32
 8003876:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d009      	beq.n	8003896 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	4413      	add	r3, r2
 800388a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800388e:	461a      	mov	r2, r3
 8003890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003894:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	3301      	adds	r3, #1
 800389a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800389c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389e:	085b      	lsrs	r3, r3, #1
 80038a0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80038a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f47f af62 	bne.w	800376e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f006 fa0a 	bl	8009cc8 <USB_ReadInterrupts>
 80038b4:	4603      	mov	r3, r0
 80038b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038be:	f040 80db 	bne.w	8003a78 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f006 fa2b 	bl	8009d22 <USB_ReadDevAllInEpInterrupt>
 80038cc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80038ce:	2300      	movs	r3, #0
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80038d2:	e0cd      	b.n	8003a70 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80038d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 80c2 	beq.w	8003a64 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	4611      	mov	r1, r2
 80038ea:	4618      	mov	r0, r3
 80038ec:	f006 fa51 	bl	8009d92 <USB_ReadDevInEPInterrupt>
 80038f0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d057      	beq.n	80039ac <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	2201      	movs	r2, #1
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003910:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	43db      	mvns	r3, r3
 8003916:	69f9      	ldr	r1, [r7, #28]
 8003918:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800391c:	4013      	ands	r3, r2
 800391e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	4413      	add	r3, r2
 8003928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800392c:	461a      	mov	r2, r3
 800392e:	2301      	movs	r3, #1
 8003930:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d132      	bne.n	80039a0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800393e:	4613      	mov	r3, r2
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	4413      	add	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	440b      	add	r3, r1
 8003948:	334c      	adds	r3, #76	; 0x4c
 800394a:	6819      	ldr	r1, [r3, #0]
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003950:	4613      	mov	r3, r2
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	4413      	add	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4403      	add	r3, r0
 800395a:	3348      	adds	r3, #72	; 0x48
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4419      	add	r1, r3
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003964:	4613      	mov	r3, r2
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	4413      	add	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4403      	add	r3, r0
 800396e:	334c      	adds	r3, #76	; 0x4c
 8003970:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	2b00      	cmp	r3, #0
 8003976:	d113      	bne.n	80039a0 <HAL_PCD_IRQHandler+0x3a2>
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800397c:	4613      	mov	r3, r2
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	4413      	add	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	3354      	adds	r3, #84	; 0x54
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d108      	bne.n	80039a0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6818      	ldr	r0, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003998:	461a      	mov	r2, r3
 800399a:	2101      	movs	r1, #1
 800399c:	f006 fa5a 	bl	8009e54 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	4619      	mov	r1, r3
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f00c f8fb 	bl	800fba2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d008      	beq.n	80039c8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	015a      	lsls	r2, r3, #5
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	4413      	add	r3, r2
 80039be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c2:	461a      	mov	r2, r3
 80039c4:	2308      	movs	r3, #8
 80039c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	f003 0310 	and.w	r3, r3, #16
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d008      	beq.n	80039e4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	015a      	lsls	r2, r3, #5
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	4413      	add	r3, r2
 80039da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039de:	461a      	mov	r2, r3
 80039e0:	2310      	movs	r3, #16
 80039e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d008      	beq.n	8003a00 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	015a      	lsls	r2, r3, #5
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039fa:	461a      	mov	r2, r3
 80039fc:	2340      	movs	r3, #64	; 0x40
 80039fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d023      	beq.n	8003a52 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003a0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a0c:	6a38      	ldr	r0, [r7, #32]
 8003a0e:	f005 f92d 	bl	8008c6c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a14:	4613      	mov	r3, r2
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	4413      	add	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	3338      	adds	r3, #56	; 0x38
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	4413      	add	r3, r2
 8003a22:	3304      	adds	r3, #4
 8003a24:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	78db      	ldrb	r3, [r3, #3]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d108      	bne.n	8003a40 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2200      	movs	r2, #0
 8003a32:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	4619      	mov	r1, r3
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f00c f948 	bl	800fcd0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a42:	015a      	lsls	r2, r3, #5
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	4413      	add	r3, r2
 8003a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	2302      	movs	r3, #2
 8003a50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003a5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 fd08 	bl	8004474 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	3301      	adds	r3, #1
 8003a68:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6c:	085b      	lsrs	r3, r3, #1
 8003a6e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f47f af2e 	bne.w	80038d4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f006 f923 	bl	8009cc8 <USB_ReadInterrupts>
 8003a82:	4603      	mov	r3, r0
 8003a84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a8c:	d122      	bne.n	8003ad4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	69fa      	ldr	r2, [r7, #28]
 8003a98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a9c:	f023 0301 	bic.w	r3, r3, #1
 8003aa0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d108      	bne.n	8003abe <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f00c fac2 	bl	8010040 <HAL_PCDEx_LPM_Callback>
 8003abc:	e002      	b.n	8003ac4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f00c f8e6 	bl	800fc90 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695a      	ldr	r2, [r3, #20]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003ad2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f006 f8f5 	bl	8009cc8 <USB_ReadInterrupts>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ae4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ae8:	d112      	bne.n	8003b10 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d102      	bne.n	8003b00 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f00c f8a2 	bl	800fc44 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	695a      	ldr	r2, [r3, #20]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003b0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f006 f8d7 	bl	8009cc8 <USB_ReadInterrupts>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b24:	d121      	bne.n	8003b6a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695a      	ldr	r2, [r3, #20]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003b34:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d111      	bne.n	8003b64 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4e:	089b      	lsrs	r3, r3, #2
 8003b50:	f003 020f 	and.w	r2, r3, #15
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f00c fa6f 	bl	8010040 <HAL_PCDEx_LPM_Callback>
 8003b62:	e002      	b.n	8003b6a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f00c f86d 	bl	800fc44 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f006 f8aa 	bl	8009cc8 <USB_ReadInterrupts>
 8003b74:	4603      	mov	r3, r0
 8003b76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b7e:	f040 80b7 	bne.w	8003cf0 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	69fa      	ldr	r2, [r7, #28]
 8003b8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b90:	f023 0301 	bic.w	r3, r3, #1
 8003b94:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2110      	movs	r1, #16
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f005 f865 	bl	8008c6c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ba6:	e046      	b.n	8003c36 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003bba:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bbe:	015a      	lsls	r2, r3, #5
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bcc:	0151      	lsls	r1, r2, #5
 8003bce:	69fa      	ldr	r2, [r7, #28]
 8003bd0:	440a      	add	r2, r1
 8003bd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003bda:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bde:	015a      	lsls	r2, r3, #5
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be8:	461a      	mov	r2, r3
 8003bea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003bee:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf2:	015a      	lsls	r2, r3, #5
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c00:	0151      	lsls	r1, r2, #5
 8003c02:	69fa      	ldr	r2, [r7, #28]
 8003c04:	440a      	add	r2, r1
 8003c06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c0e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c12:	015a      	lsls	r2, r3, #5
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	4413      	add	r3, r2
 8003c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c20:	0151      	lsls	r1, r2, #5
 8003c22:	69fa      	ldr	r2, [r7, #28]
 8003c24:	440a      	add	r2, r1
 8003c26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c2e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c32:	3301      	adds	r3, #1
 8003c34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d3b3      	bcc.n	8003ba8 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	69fa      	ldr	r2, [r7, #28]
 8003c4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c4e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003c52:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d016      	beq.n	8003c8a <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c66:	69fa      	ldr	r2, [r7, #28]
 8003c68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c6c:	f043 030b 	orr.w	r3, r3, #11
 8003c70:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7c:	69fa      	ldr	r2, [r7, #28]
 8003c7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c82:	f043 030b 	orr.w	r3, r3, #11
 8003c86:	6453      	str	r3, [r2, #68]	; 0x44
 8003c88:	e015      	b.n	8003cb6 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c90:	695a      	ldr	r2, [r3, #20]
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c98:	4619      	mov	r1, r3
 8003c9a:	f242 032b 	movw	r3, #8235	; 0x202b
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	69fa      	ldr	r2, [r7, #28]
 8003cac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cb0:	f043 030b 	orr.w	r3, r3, #11
 8003cb4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	69fa      	ldr	r2, [r7, #28]
 8003cc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cc4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003cc8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6818      	ldr	r0, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003cda:	461a      	mov	r2, r3
 8003cdc:	f006 f8ba 	bl	8009e54 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	695a      	ldr	r2, [r3, #20]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003cee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f005 ffe7 	bl	8009cc8 <USB_ReadInterrupts>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d04:	d124      	bne.n	8003d50 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f006 f87e 	bl	8009e0c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f005 f826 	bl	8008d66 <USB_GetDevSpeed>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681c      	ldr	r4, [r3, #0]
 8003d26:	f001 fa8d 	bl	8005244 <HAL_RCC_GetHCLKFreq>
 8003d2a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	461a      	mov	r2, r3
 8003d34:	4620      	mov	r0, r4
 8003d36:	f004 fd2b 	bl	8008790 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f00b ff59 	bl	800fbf2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	695a      	ldr	r2, [r3, #20]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003d4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f005 ffb7 	bl	8009cc8 <USB_ReadInterrupts>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	f003 0308 	and.w	r3, r3, #8
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	d10a      	bne.n	8003d7a <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f00b ff36 	bl	800fbd6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695a      	ldr	r2, [r3, #20]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f002 0208 	and.w	r2, r2, #8
 8003d78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f005 ffa2 	bl	8009cc8 <USB_ReadInterrupts>
 8003d84:	4603      	mov	r3, r0
 8003d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8a:	2b80      	cmp	r3, #128	; 0x80
 8003d8c:	d122      	bne.n	8003dd4 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003d8e:	6a3b      	ldr	r3, [r7, #32]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d9e:	e014      	b.n	8003dca <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003da0:	6879      	ldr	r1, [r7, #4]
 8003da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da4:	4613      	mov	r3, r2
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	4413      	add	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d105      	bne.n	8003dc4 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 fb27 	bl	8004412 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d3e5      	bcc.n	8003da0 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f005 ff75 	bl	8009cc8 <USB_ReadInterrupts>
 8003dde:	4603      	mov	r3, r0
 8003de0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003de4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003de8:	d13b      	bne.n	8003e62 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dea:	2301      	movs	r3, #1
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
 8003dee:	e02b      	b.n	8003e48 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e00:	6879      	ldr	r1, [r7, #4]
 8003e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e04:	4613      	mov	r3, r2
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	4413      	add	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	440b      	add	r3, r1
 8003e0e:	3340      	adds	r3, #64	; 0x40
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d115      	bne.n	8003e42 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003e16:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	da12      	bge.n	8003e42 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003e1c:	6879      	ldr	r1, [r7, #4]
 8003e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e20:	4613      	mov	r3, r2
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	4413      	add	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	440b      	add	r3, r1
 8003e2a:	333f      	adds	r3, #63	; 0x3f
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 fae8 	bl	8004412 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	3301      	adds	r3, #1
 8003e46:	627b      	str	r3, [r7, #36]	; 0x24
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d3ce      	bcc.n	8003df0 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695a      	ldr	r2, [r3, #20]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003e60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f005 ff2e 	bl	8009cc8 <USB_ReadInterrupts>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e76:	d155      	bne.n	8003f24 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e78:	2301      	movs	r3, #1
 8003e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e7c:	e045      	b.n	8003f0a <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	015a      	lsls	r2, r3, #5
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	4413      	add	r3, r2
 8003e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e8e:	6879      	ldr	r1, [r7, #4]
 8003e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e92:	4613      	mov	r3, r2
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d12e      	bne.n	8003f04 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ea6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	da2b      	bge.n	8003f04 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003eb8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d121      	bne.n	8003f04 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	4413      	add	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	440b      	add	r3, r1
 8003ece:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003ee2:	6a3b      	ldr	r3, [r7, #32]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10a      	bne.n	8003f04 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	69fa      	ldr	r2, [r7, #28]
 8003ef8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003efc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f00:	6053      	str	r3, [r2, #4]
            break;
 8003f02:	e007      	b.n	8003f14 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	3301      	adds	r3, #1
 8003f08:	627b      	str	r3, [r7, #36]	; 0x24
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d3b4      	bcc.n	8003e7e <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	695a      	ldr	r2, [r3, #20]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003f22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f005 fecd 	bl	8009cc8 <USB_ReadInterrupts>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f38:	d10a      	bne.n	8003f50 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f00b feda 	bl	800fcf4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695a      	ldr	r2, [r3, #20]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003f4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f005 feb7 	bl	8009cc8 <USB_ReadInterrupts>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b04      	cmp	r3, #4
 8003f62:	d115      	bne.n	8003f90 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	f003 0304 	and.w	r3, r3, #4
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d002      	beq.n	8003f7c <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f00b feca 	bl	800fd10 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6859      	ldr	r1, [r3, #4]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	605a      	str	r2, [r3, #4]
 8003f8c:	e000      	b.n	8003f90 <HAL_PCD_IRQHandler+0x992>
      return;
 8003f8e:	bf00      	nop
    }
  }
}
 8003f90:	3734      	adds	r7, #52	; 0x34
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd90      	pop	{r4, r7, pc}

08003f96 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b082      	sub	sp, #8
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d101      	bne.n	8003fb0 <HAL_PCD_SetAddress+0x1a>
 8003fac:	2302      	movs	r3, #2
 8003fae:	e013      	b.n	8003fd8 <HAL_PCD_SetAddress+0x42>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	78fa      	ldrb	r2, [r7, #3]
 8003fbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	78fa      	ldrb	r2, [r7, #3]
 8003fc6:	4611      	mov	r1, r2
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f005 fe15 	bl	8009bf8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	4608      	mov	r0, r1
 8003fea:	4611      	mov	r1, r2
 8003fec:	461a      	mov	r2, r3
 8003fee:	4603      	mov	r3, r0
 8003ff0:	70fb      	strb	r3, [r7, #3]
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	803b      	strh	r3, [r7, #0]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ffe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004002:	2b00      	cmp	r3, #0
 8004004:	da0f      	bge.n	8004026 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004006:	78fb      	ldrb	r3, [r7, #3]
 8004008:	f003 020f 	and.w	r2, r3, #15
 800400c:	4613      	mov	r3, r2
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	4413      	add	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	3338      	adds	r3, #56	; 0x38
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	4413      	add	r3, r2
 800401a:	3304      	adds	r3, #4
 800401c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2201      	movs	r2, #1
 8004022:	705a      	strb	r2, [r3, #1]
 8004024:	e00f      	b.n	8004046 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004026:	78fb      	ldrb	r3, [r7, #3]
 8004028:	f003 020f 	and.w	r2, r3, #15
 800402c:	4613      	mov	r3, r2
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	4413      	add	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	4413      	add	r3, r2
 800403c:	3304      	adds	r3, #4
 800403e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004046:	78fb      	ldrb	r3, [r7, #3]
 8004048:	f003 030f 	and.w	r3, r3, #15
 800404c:	b2da      	uxtb	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004052:	883a      	ldrh	r2, [r7, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	78ba      	ldrb	r2, [r7, #2]
 800405c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	785b      	ldrb	r3, [r3, #1]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d004      	beq.n	8004070 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	b29a      	uxth	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004070:	78bb      	ldrb	r3, [r7, #2]
 8004072:	2b02      	cmp	r3, #2
 8004074:	d102      	bne.n	800407c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004082:	2b01      	cmp	r3, #1
 8004084:	d101      	bne.n	800408a <HAL_PCD_EP_Open+0xaa>
 8004086:	2302      	movs	r3, #2
 8004088:	e00e      	b.n	80040a8 <HAL_PCD_EP_Open+0xc8>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68f9      	ldr	r1, [r7, #12]
 8004098:	4618      	mov	r0, r3
 800409a:	f004 fe89 	bl	8008db0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80040a6:	7afb      	ldrb	r3, [r7, #11]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	460b      	mov	r3, r1
 80040ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	da0f      	bge.n	80040e4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040c4:	78fb      	ldrb	r3, [r7, #3]
 80040c6:	f003 020f 	and.w	r2, r3, #15
 80040ca:	4613      	mov	r3, r2
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	4413      	add	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	3338      	adds	r3, #56	; 0x38
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	4413      	add	r3, r2
 80040d8:	3304      	adds	r3, #4
 80040da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2201      	movs	r2, #1
 80040e0:	705a      	strb	r2, [r3, #1]
 80040e2:	e00f      	b.n	8004104 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040e4:	78fb      	ldrb	r3, [r7, #3]
 80040e6:	f003 020f 	and.w	r2, r3, #15
 80040ea:	4613      	mov	r3, r2
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	4413      	add	r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	4413      	add	r3, r2
 80040fa:	3304      	adds	r3, #4
 80040fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004104:	78fb      	ldrb	r3, [r7, #3]
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	b2da      	uxtb	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004116:	2b01      	cmp	r3, #1
 8004118:	d101      	bne.n	800411e <HAL_PCD_EP_Close+0x6e>
 800411a:	2302      	movs	r3, #2
 800411c:	e00e      	b.n	800413c <HAL_PCD_EP_Close+0x8c>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68f9      	ldr	r1, [r7, #12]
 800412c:	4618      	mov	r0, r3
 800412e:	f004 fec7 	bl	8008ec0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	607a      	str	r2, [r7, #4]
 800414e:	603b      	str	r3, [r7, #0]
 8004150:	460b      	mov	r3, r1
 8004152:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004154:	7afb      	ldrb	r3, [r7, #11]
 8004156:	f003 020f 	and.w	r2, r3, #15
 800415a:	4613      	mov	r3, r2
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	4413      	add	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	4413      	add	r3, r2
 800416a:	3304      	adds	r3, #4
 800416c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	2200      	movs	r2, #0
 800417e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	2200      	movs	r2, #0
 8004184:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004186:	7afb      	ldrb	r3, [r7, #11]
 8004188:	f003 030f 	and.w	r3, r3, #15
 800418c:	b2da      	uxtb	r2, r3
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d102      	bne.n	80041a0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041a0:	7afb      	ldrb	r3, [r7, #11]
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d109      	bne.n	80041be <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6818      	ldr	r0, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	461a      	mov	r2, r3
 80041b6:	6979      	ldr	r1, [r7, #20]
 80041b8:	f005 f9ae 	bl	8009518 <USB_EP0StartXfer>
 80041bc:	e008      	b.n	80041d0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6818      	ldr	r0, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	461a      	mov	r2, r3
 80041ca:	6979      	ldr	r1, [r7, #20]
 80041cc:	f004 ff54 	bl	8009078 <USB_EPStartXfer>
  }

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3718      	adds	r7, #24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041da:	b480      	push	{r7}
 80041dc:	b083      	sub	sp, #12
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
 80041e2:	460b      	mov	r3, r1
 80041e4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80041e6:	78fb      	ldrb	r3, [r7, #3]
 80041e8:	f003 020f 	and.w	r2, r3, #15
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	4613      	mov	r3, r2
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	4413      	add	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	440b      	add	r3, r1
 80041f8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80041fc:	681b      	ldr	r3, [r3, #0]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b086      	sub	sp, #24
 800420e:	af00      	add	r7, sp, #0
 8004210:	60f8      	str	r0, [r7, #12]
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	603b      	str	r3, [r7, #0]
 8004216:	460b      	mov	r3, r1
 8004218:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800421a:	7afb      	ldrb	r3, [r7, #11]
 800421c:	f003 020f 	and.w	r2, r3, #15
 8004220:	4613      	mov	r3, r2
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	4413      	add	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	3338      	adds	r3, #56	; 0x38
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	4413      	add	r3, r2
 800422e:	3304      	adds	r3, #4
 8004230:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	2200      	movs	r2, #0
 8004242:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	2201      	movs	r2, #1
 8004248:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800424a:	7afb      	ldrb	r3, [r7, #11]
 800424c:	f003 030f 	and.w	r3, r3, #15
 8004250:	b2da      	uxtb	r2, r3
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d102      	bne.n	8004264 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004264:	7afb      	ldrb	r3, [r7, #11]
 8004266:	f003 030f 	and.w	r3, r3, #15
 800426a:	2b00      	cmp	r3, #0
 800426c:	d109      	bne.n	8004282 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6818      	ldr	r0, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	b2db      	uxtb	r3, r3
 8004278:	461a      	mov	r2, r3
 800427a:	6979      	ldr	r1, [r7, #20]
 800427c:	f005 f94c 	bl	8009518 <USB_EP0StartXfer>
 8004280:	e008      	b.n	8004294 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6818      	ldr	r0, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	b2db      	uxtb	r3, r3
 800428c:	461a      	mov	r2, r3
 800428e:	6979      	ldr	r1, [r7, #20]
 8004290:	f004 fef2 	bl	8009078 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b084      	sub	sp, #16
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	460b      	mov	r3, r1
 80042a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80042aa:	78fb      	ldrb	r3, [r7, #3]
 80042ac:	f003 020f 	and.w	r2, r3, #15
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d901      	bls.n	80042bc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e050      	b.n	800435e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	da0f      	bge.n	80042e4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042c4:	78fb      	ldrb	r3, [r7, #3]
 80042c6:	f003 020f 	and.w	r2, r3, #15
 80042ca:	4613      	mov	r3, r2
 80042cc:	00db      	lsls	r3, r3, #3
 80042ce:	4413      	add	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	3338      	adds	r3, #56	; 0x38
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	4413      	add	r3, r2
 80042d8:	3304      	adds	r3, #4
 80042da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2201      	movs	r2, #1
 80042e0:	705a      	strb	r2, [r3, #1]
 80042e2:	e00d      	b.n	8004300 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80042e4:	78fa      	ldrb	r2, [r7, #3]
 80042e6:	4613      	mov	r3, r2
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	4413      	add	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	4413      	add	r3, r2
 80042f6:	3304      	adds	r3, #4
 80042f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2201      	movs	r2, #1
 8004304:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004306:	78fb      	ldrb	r3, [r7, #3]
 8004308:	f003 030f 	and.w	r3, r3, #15
 800430c:	b2da      	uxtb	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <HAL_PCD_EP_SetStall+0x82>
 800431c:	2302      	movs	r3, #2
 800431e:	e01e      	b.n	800435e <HAL_PCD_EP_SetStall+0xc0>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68f9      	ldr	r1, [r7, #12]
 800432e:	4618      	mov	r0, r3
 8004330:	f005 fb8e 	bl	8009a50 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004334:	78fb      	ldrb	r3, [r7, #3]
 8004336:	f003 030f 	and.w	r3, r3, #15
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10a      	bne.n	8004354 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6818      	ldr	r0, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	b2d9      	uxtb	r1, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800434e:	461a      	mov	r2, r3
 8004350:	f005 fd80 	bl	8009e54 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b084      	sub	sp, #16
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
 800436e:	460b      	mov	r3, r1
 8004370:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004372:	78fb      	ldrb	r3, [r7, #3]
 8004374:	f003 020f 	and.w	r2, r3, #15
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	429a      	cmp	r2, r3
 800437e:	d901      	bls.n	8004384 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e042      	b.n	800440a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004384:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004388:	2b00      	cmp	r3, #0
 800438a:	da0f      	bge.n	80043ac <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800438c:	78fb      	ldrb	r3, [r7, #3]
 800438e:	f003 020f 	and.w	r2, r3, #15
 8004392:	4613      	mov	r3, r2
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	4413      	add	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	3338      	adds	r3, #56	; 0x38
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	4413      	add	r3, r2
 80043a0:	3304      	adds	r3, #4
 80043a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2201      	movs	r2, #1
 80043a8:	705a      	strb	r2, [r3, #1]
 80043aa:	e00f      	b.n	80043cc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043ac:	78fb      	ldrb	r3, [r7, #3]
 80043ae:	f003 020f 	and.w	r2, r3, #15
 80043b2:	4613      	mov	r3, r2
 80043b4:	00db      	lsls	r3, r3, #3
 80043b6:	4413      	add	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	4413      	add	r3, r2
 80043c2:	3304      	adds	r3, #4
 80043c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043d2:	78fb      	ldrb	r3, [r7, #3]
 80043d4:	f003 030f 	and.w	r3, r3, #15
 80043d8:	b2da      	uxtb	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d101      	bne.n	80043ec <HAL_PCD_EP_ClrStall+0x86>
 80043e8:	2302      	movs	r3, #2
 80043ea:	e00e      	b.n	800440a <HAL_PCD_EP_ClrStall+0xa4>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68f9      	ldr	r1, [r7, #12]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f005 fb96 	bl	8009b2c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b084      	sub	sp, #16
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
 800441a:	460b      	mov	r3, r1
 800441c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800441e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004422:	2b00      	cmp	r3, #0
 8004424:	da0c      	bge.n	8004440 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004426:	78fb      	ldrb	r3, [r7, #3]
 8004428:	f003 020f 	and.w	r2, r3, #15
 800442c:	4613      	mov	r3, r2
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	4413      	add	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	3338      	adds	r3, #56	; 0x38
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	4413      	add	r3, r2
 800443a:	3304      	adds	r3, #4
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	e00c      	b.n	800445a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004440:	78fb      	ldrb	r3, [r7, #3]
 8004442:	f003 020f 	and.w	r2, r3, #15
 8004446:	4613      	mov	r3, r2
 8004448:	00db      	lsls	r3, r3, #3
 800444a:	4413      	add	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	4413      	add	r3, r2
 8004456:	3304      	adds	r3, #4
 8004458:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68f9      	ldr	r1, [r7, #12]
 8004460:	4618      	mov	r0, r3
 8004462:	f005 f9b5 	bl	80097d0 <USB_EPStopXfer>
 8004466:	4603      	mov	r3, r0
 8004468:	72fb      	strb	r3, [r7, #11]

  return ret;
 800446a:	7afb      	ldrb	r3, [r7, #11]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b08a      	sub	sp, #40	; 0x28
 8004478:	af02      	add	r7, sp, #8
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	4613      	mov	r3, r2
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	4413      	add	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	3338      	adds	r3, #56	; 0x38
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	4413      	add	r3, r2
 8004498:	3304      	adds	r3, #4
 800449a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a1a      	ldr	r2, [r3, #32]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d901      	bls.n	80044ac <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e06c      	b.n	8004586 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	699a      	ldr	r2, [r3, #24]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	69fa      	ldr	r2, [r7, #28]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d902      	bls.n	80044c8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	3303      	adds	r3, #3
 80044cc:	089b      	lsrs	r3, r3, #2
 80044ce:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044d0:	e02b      	b.n	800452a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	699a      	ldr	r2, [r3, #24]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	69fa      	ldr	r2, [r7, #28]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d902      	bls.n	80044ee <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	3303      	adds	r3, #3
 80044f2:	089b      	lsrs	r3, r3, #2
 80044f4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6919      	ldr	r1, [r3, #16]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004506:	b2db      	uxtb	r3, r3
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	4603      	mov	r3, r0
 800450c:	6978      	ldr	r0, [r7, #20]
 800450e:	f005 fa09 	bl	8009924 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	691a      	ldr	r2, [r3, #16]
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	441a      	add	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6a1a      	ldr	r2, [r3, #32]
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	441a      	add	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	015a      	lsls	r2, r3, #5
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	4413      	add	r3, r2
 8004532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	429a      	cmp	r2, r3
 800453e:	d809      	bhi.n	8004554 <PCD_WriteEmptyTxFifo+0xe0>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6a1a      	ldr	r2, [r3, #32]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004548:	429a      	cmp	r2, r3
 800454a:	d203      	bcs.n	8004554 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1be      	bne.n	80044d2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	699a      	ldr	r2, [r3, #24]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	429a      	cmp	r2, r3
 800455e:	d811      	bhi.n	8004584 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	2201      	movs	r2, #1
 8004568:	fa02 f303 	lsl.w	r3, r2, r3
 800456c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	43db      	mvns	r3, r3
 800457a:	6939      	ldr	r1, [r7, #16]
 800457c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004580:	4013      	ands	r3, r2
 8004582:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3720      	adds	r7, #32
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
	...

08004590 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b088      	sub	sp, #32
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	333c      	adds	r3, #60	; 0x3c
 80045a8:	3304      	adds	r3, #4
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	015a      	lsls	r2, r3, #5
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	4413      	add	r3, r2
 80045b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d17b      	bne.n	80046be <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	f003 0308 	and.w	r3, r3, #8
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d015      	beq.n	80045fc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	4a61      	ldr	r2, [pc, #388]	; (8004758 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	f240 80b9 	bls.w	800474c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 80b3 	beq.w	800474c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	015a      	lsls	r2, r3, #5
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	4413      	add	r3, r2
 80045ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f2:	461a      	mov	r2, r3
 80045f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045f8:	6093      	str	r3, [r2, #8]
 80045fa:	e0a7      	b.n	800474c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f003 0320 	and.w	r3, r3, #32
 8004602:	2b00      	cmp	r3, #0
 8004604:	d009      	beq.n	800461a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	4413      	add	r3, r2
 800460e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004612:	461a      	mov	r2, r3
 8004614:	2320      	movs	r3, #32
 8004616:	6093      	str	r3, [r2, #8]
 8004618:	e098      	b.n	800474c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004620:	2b00      	cmp	r3, #0
 8004622:	f040 8093 	bne.w	800474c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	4a4b      	ldr	r2, [pc, #300]	; (8004758 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d90f      	bls.n	800464e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00a      	beq.n	800464e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	015a      	lsls	r2, r3, #5
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	4413      	add	r3, r2
 8004640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004644:	461a      	mov	r2, r3
 8004646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800464a:	6093      	str	r3, [r2, #8]
 800464c:	e07e      	b.n	800474c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	4613      	mov	r3, r2
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	4413      	add	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	4413      	add	r3, r2
 8004660:	3304      	adds	r3, #4
 8004662:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	69da      	ldr	r2, [r3, #28]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	0159      	lsls	r1, r3, #5
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	440b      	add	r3, r1
 8004670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800467a:	1ad2      	subs	r2, r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d114      	bne.n	80046b0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d109      	bne.n	80046a2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6818      	ldr	r0, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004698:	461a      	mov	r2, r3
 800469a:	2101      	movs	r1, #1
 800469c:	f005 fbda 	bl	8009e54 <USB_EP0_OutStart>
 80046a0:	e006      	b.n	80046b0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	691a      	ldr	r2, [r3, #16]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	441a      	add	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	4619      	mov	r1, r3
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f00b fa58 	bl	800fb6c <HAL_PCD_DataOutStageCallback>
 80046bc:	e046      	b.n	800474c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	4a26      	ldr	r2, [pc, #152]	; (800475c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d124      	bne.n	8004710 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00a      	beq.n	80046e6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046dc:	461a      	mov	r2, r3
 80046de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046e2:	6093      	str	r3, [r2, #8]
 80046e4:	e032      	b.n	800474c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f003 0320 	and.w	r3, r3, #32
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d008      	beq.n	8004702 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046fc:	461a      	mov	r2, r3
 80046fe:	2320      	movs	r3, #32
 8004700:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	b2db      	uxtb	r3, r3
 8004706:	4619      	mov	r1, r3
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f00b fa2f 	bl	800fb6c <HAL_PCD_DataOutStageCallback>
 800470e:	e01d      	b.n	800474c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d114      	bne.n	8004740 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004716:	6879      	ldr	r1, [r7, #4]
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	4613      	mov	r3, r2
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	4413      	add	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	440b      	add	r3, r1
 8004724:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d108      	bne.n	8004740 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6818      	ldr	r0, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004738:	461a      	mov	r2, r3
 800473a:	2100      	movs	r1, #0
 800473c:	f005 fb8a 	bl	8009e54 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	b2db      	uxtb	r3, r3
 8004744:	4619      	mov	r1, r3
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f00b fa10 	bl	800fb6c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3720      	adds	r7, #32
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	4f54300a 	.word	0x4f54300a
 800475c:	4f54310a 	.word	0x4f54310a

08004760 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	333c      	adds	r3, #60	; 0x3c
 8004778:	3304      	adds	r3, #4
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	4413      	add	r3, r2
 8004786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4a15      	ldr	r2, [pc, #84]	; (80047e8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d90e      	bls.n	80047b4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800479c:	2b00      	cmp	r3, #0
 800479e:	d009      	beq.n	80047b4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ac:	461a      	mov	r2, r3
 80047ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047b2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f00b f9c7 	bl	800fb48 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	4a0a      	ldr	r2, [pc, #40]	; (80047e8 <PCD_EP_OutSetupPacket_int+0x88>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d90c      	bls.n	80047dc <PCD_EP_OutSetupPacket_int+0x7c>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d108      	bne.n	80047dc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6818      	ldr	r0, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80047d4:	461a      	mov	r2, r3
 80047d6:	2101      	movs	r1, #1
 80047d8:	f005 fb3c 	bl	8009e54 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3718      	adds	r7, #24
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	4f54300a 	.word	0x4f54300a

080047ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	460b      	mov	r3, r1
 80047f6:	70fb      	strb	r3, [r7, #3]
 80047f8:	4613      	mov	r3, r2
 80047fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004802:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004804:	78fb      	ldrb	r3, [r7, #3]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d107      	bne.n	800481a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800480a:	883b      	ldrh	r3, [r7, #0]
 800480c:	0419      	lsls	r1, r3, #16
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	430a      	orrs	r2, r1
 8004816:	629a      	str	r2, [r3, #40]	; 0x28
 8004818:	e028      	b.n	800486c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004820:	0c1b      	lsrs	r3, r3, #16
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	4413      	add	r3, r2
 8004826:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004828:	2300      	movs	r3, #0
 800482a:	73fb      	strb	r3, [r7, #15]
 800482c:	e00d      	b.n	800484a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	7bfb      	ldrb	r3, [r7, #15]
 8004834:	3340      	adds	r3, #64	; 0x40
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	0c1b      	lsrs	r3, r3, #16
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	4413      	add	r3, r2
 8004842:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004844:	7bfb      	ldrb	r3, [r7, #15]
 8004846:	3301      	adds	r3, #1
 8004848:	73fb      	strb	r3, [r7, #15]
 800484a:	7bfa      	ldrb	r2, [r7, #15]
 800484c:	78fb      	ldrb	r3, [r7, #3]
 800484e:	3b01      	subs	r3, #1
 8004850:	429a      	cmp	r2, r3
 8004852:	d3ec      	bcc.n	800482e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004854:	883b      	ldrh	r3, [r7, #0]
 8004856:	0418      	lsls	r0, r3, #16
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6819      	ldr	r1, [r3, #0]
 800485c:	78fb      	ldrb	r3, [r7, #3]
 800485e:	3b01      	subs	r3, #1
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	4302      	orrs	r2, r0
 8004864:	3340      	adds	r3, #64	; 0x40
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	440b      	add	r3, r1
 800486a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
 8004882:	460b      	mov	r3, r1
 8004884:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	887a      	ldrh	r2, [r7, #2]
 800488c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048ca:	4b05      	ldr	r3, [pc, #20]	; (80048e0 <HAL_PCDEx_ActivateLPM+0x44>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	10000003 	.word	0x10000003

080048e4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048e8:	4b05      	ldr	r3, [pc, #20]	; (8004900 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a04      	ldr	r2, [pc, #16]	; (8004900 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80048ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f2:	6013      	str	r3, [r2, #0]
}
 80048f4:	bf00      	nop
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	40007000 	.word	0x40007000

08004904 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800490c:	2300      	movs	r3, #0
 800490e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e29b      	b.n	8004e52 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 8087 	beq.w	8004a36 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004928:	4b96      	ldr	r3, [pc, #600]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f003 030c 	and.w	r3, r3, #12
 8004930:	2b04      	cmp	r3, #4
 8004932:	d00c      	beq.n	800494e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004934:	4b93      	ldr	r3, [pc, #588]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f003 030c 	and.w	r3, r3, #12
 800493c:	2b08      	cmp	r3, #8
 800493e:	d112      	bne.n	8004966 <HAL_RCC_OscConfig+0x62>
 8004940:	4b90      	ldr	r3, [pc, #576]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004948:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800494c:	d10b      	bne.n	8004966 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800494e:	4b8d      	ldr	r3, [pc, #564]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d06c      	beq.n	8004a34 <HAL_RCC_OscConfig+0x130>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d168      	bne.n	8004a34 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e275      	b.n	8004e52 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800496e:	d106      	bne.n	800497e <HAL_RCC_OscConfig+0x7a>
 8004970:	4b84      	ldr	r3, [pc, #528]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a83      	ldr	r2, [pc, #524]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800497a:	6013      	str	r3, [r2, #0]
 800497c:	e02e      	b.n	80049dc <HAL_RCC_OscConfig+0xd8>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10c      	bne.n	80049a0 <HAL_RCC_OscConfig+0x9c>
 8004986:	4b7f      	ldr	r3, [pc, #508]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a7e      	ldr	r2, [pc, #504]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 800498c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004990:	6013      	str	r3, [r2, #0]
 8004992:	4b7c      	ldr	r3, [pc, #496]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a7b      	ldr	r2, [pc, #492]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004998:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800499c:	6013      	str	r3, [r2, #0]
 800499e:	e01d      	b.n	80049dc <HAL_RCC_OscConfig+0xd8>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049a8:	d10c      	bne.n	80049c4 <HAL_RCC_OscConfig+0xc0>
 80049aa:	4b76      	ldr	r3, [pc, #472]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a75      	ldr	r2, [pc, #468]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 80049b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049b4:	6013      	str	r3, [r2, #0]
 80049b6:	4b73      	ldr	r3, [pc, #460]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a72      	ldr	r2, [pc, #456]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 80049bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c0:	6013      	str	r3, [r2, #0]
 80049c2:	e00b      	b.n	80049dc <HAL_RCC_OscConfig+0xd8>
 80049c4:	4b6f      	ldr	r3, [pc, #444]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a6e      	ldr	r2, [pc, #440]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 80049ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ce:	6013      	str	r3, [r2, #0]
 80049d0:	4b6c      	ldr	r3, [pc, #432]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a6b      	ldr	r2, [pc, #428]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 80049d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d013      	beq.n	8004a0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e4:	f7fc ffd8 	bl	8001998 <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049ec:	f7fc ffd4 	bl	8001998 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b64      	cmp	r3, #100	; 0x64
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e229      	b.n	8004e52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049fe:	4b61      	ldr	r3, [pc, #388]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d0f0      	beq.n	80049ec <HAL_RCC_OscConfig+0xe8>
 8004a0a:	e014      	b.n	8004a36 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0c:	f7fc ffc4 	bl	8001998 <HAL_GetTick>
 8004a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a14:	f7fc ffc0 	bl	8001998 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b64      	cmp	r3, #100	; 0x64
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e215      	b.n	8004e52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a26:	4b57      	ldr	r3, [pc, #348]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1f0      	bne.n	8004a14 <HAL_RCC_OscConfig+0x110>
 8004a32:	e000      	b.n	8004a36 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d069      	beq.n	8004b16 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a42:	4b50      	ldr	r3, [pc, #320]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f003 030c 	and.w	r3, r3, #12
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00b      	beq.n	8004a66 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a4e:	4b4d      	ldr	r3, [pc, #308]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f003 030c 	and.w	r3, r3, #12
 8004a56:	2b08      	cmp	r3, #8
 8004a58:	d11c      	bne.n	8004a94 <HAL_RCC_OscConfig+0x190>
 8004a5a:	4b4a      	ldr	r3, [pc, #296]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d116      	bne.n	8004a94 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a66:	4b47      	ldr	r3, [pc, #284]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d005      	beq.n	8004a7e <HAL_RCC_OscConfig+0x17a>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d001      	beq.n	8004a7e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e1e9      	b.n	8004e52 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a7e:	4b41      	ldr	r3, [pc, #260]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	00db      	lsls	r3, r3, #3
 8004a8c:	493d      	ldr	r1, [pc, #244]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a92:	e040      	b.n	8004b16 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d023      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a9c:	4b39      	ldr	r3, [pc, #228]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a38      	ldr	r2, [pc, #224]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004aa2:	f043 0301 	orr.w	r3, r3, #1
 8004aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa8:	f7fc ff76 	bl	8001998 <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ab0:	f7fc ff72 	bl	8001998 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e1c7      	b.n	8004e52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ac2:	4b30      	ldr	r3, [pc, #192]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0f0      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ace:	4b2d      	ldr	r3, [pc, #180]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	00db      	lsls	r3, r3, #3
 8004adc:	4929      	ldr	r1, [pc, #164]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	600b      	str	r3, [r1, #0]
 8004ae2:	e018      	b.n	8004b16 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ae4:	4b27      	ldr	r3, [pc, #156]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a26      	ldr	r2, [pc, #152]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004aea:	f023 0301 	bic.w	r3, r3, #1
 8004aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af0:	f7fc ff52 	bl	8001998 <HAL_GetTick>
 8004af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004af8:	f7fc ff4e 	bl	8001998 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e1a3      	b.n	8004e52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b0a:	4b1e      	ldr	r3, [pc, #120]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1f0      	bne.n	8004af8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0308 	and.w	r3, r3, #8
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d038      	beq.n	8004b94 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d019      	beq.n	8004b5e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b2a:	4b16      	ldr	r3, [pc, #88]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b2e:	4a15      	ldr	r2, [pc, #84]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004b30:	f043 0301 	orr.w	r3, r3, #1
 8004b34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b36:	f7fc ff2f 	bl	8001998 <HAL_GetTick>
 8004b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b3c:	e008      	b.n	8004b50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b3e:	f7fc ff2b 	bl	8001998 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d901      	bls.n	8004b50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e180      	b.n	8004e52 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b50:	4b0c      	ldr	r3, [pc, #48]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d0f0      	beq.n	8004b3e <HAL_RCC_OscConfig+0x23a>
 8004b5c:	e01a      	b.n	8004b94 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b5e:	4b09      	ldr	r3, [pc, #36]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b62:	4a08      	ldr	r2, [pc, #32]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004b64:	f023 0301 	bic.w	r3, r3, #1
 8004b68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6a:	f7fc ff15 	bl	8001998 <HAL_GetTick>
 8004b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b70:	e00a      	b.n	8004b88 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b72:	f7fc ff11 	bl	8001998 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d903      	bls.n	8004b88 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e166      	b.n	8004e52 <HAL_RCC_OscConfig+0x54e>
 8004b84:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b88:	4b92      	ldr	r3, [pc, #584]	; (8004dd4 <HAL_RCC_OscConfig+0x4d0>)
 8004b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1ee      	bne.n	8004b72 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f000 80a4 	beq.w	8004cea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ba2:	4b8c      	ldr	r3, [pc, #560]	; (8004dd4 <HAL_RCC_OscConfig+0x4d0>)
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10d      	bne.n	8004bca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bae:	4b89      	ldr	r3, [pc, #548]	; (8004dd4 <HAL_RCC_OscConfig+0x4d0>)
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	4a88      	ldr	r2, [pc, #544]	; (8004dd4 <HAL_RCC_OscConfig+0x4d0>)
 8004bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bba:	4b86      	ldr	r3, [pc, #536]	; (8004dd4 <HAL_RCC_OscConfig+0x4d0>)
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc2:	60bb      	str	r3, [r7, #8]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bca:	4b83      	ldr	r3, [pc, #524]	; (8004dd8 <HAL_RCC_OscConfig+0x4d4>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d118      	bne.n	8004c08 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004bd6:	4b80      	ldr	r3, [pc, #512]	; (8004dd8 <HAL_RCC_OscConfig+0x4d4>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a7f      	ldr	r2, [pc, #508]	; (8004dd8 <HAL_RCC_OscConfig+0x4d4>)
 8004bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004be0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004be2:	f7fc fed9 	bl	8001998 <HAL_GetTick>
 8004be6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004be8:	e008      	b.n	8004bfc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bea:	f7fc fed5 	bl	8001998 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b64      	cmp	r3, #100	; 0x64
 8004bf6:	d901      	bls.n	8004bfc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e12a      	b.n	8004e52 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bfc:	4b76      	ldr	r3, [pc, #472]	; (8004dd8 <HAL_RCC_OscConfig+0x4d4>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0f0      	beq.n	8004bea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d106      	bne.n	8004c1e <HAL_RCC_OscConfig+0x31a>
 8004c10:	4b70      	ldr	r3, [pc, #448]	; (8004dd4 <HAL_RCC_OscConfig+0x4d0>)
 8004c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c14:	4a6f      	ldr	r2, [pc, #444]	; (8004dd4 <HAL_RCC_OscConfig+0x4d0>)
 8004c16:	f043 0301 	orr.w	r3, r3, #1
 8004c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c1c:	e02d      	b.n	8004c7a <HAL_RCC_OscConfig+0x376>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10c      	bne.n	8004c40 <HAL_RCC_OscConfig+0x33c>
 8004c26:	4b6b      	ldr	r3, [pc, #428]	; (8004dd4 <HAL_RCC_OscConfig+0x4d0>)
 8004c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2a:	4a6a      	ldr	r2, [pc, #424]	; (8004dd4 <HAL_RCC_OscConfig+0x4d0>)
 8004c2c:	f023 0301 	bic.w	r3, r3, #1
 8004c30:	6713      	str	r3, [r2, #112]	; 0x70
 8004c32:	4b68      	ldr	r3, [pc, #416]	; (8004dd4 <HAL_RCC_OscConfig+0x4d0>)
 8004c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c36:	4a67      	ldr	r2, [pc, #412]	; (8004dd4 <HAL_RCC_OscConfig+0x4d0>)
 8004c38:	f023 0304 	bic.w	r3, r3, #4
 8004c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c3e:	e01c      	b.n	8004c7a <HAL_RCC_OscConfig+0x376>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	2b05      	cmp	r3, #5
 8004c46:	d10c      	bne.n	8004c62 <HAL_RCC_OscConfig+0x35e>
 8004c48:	4b62      	ldr	r3, [pc, #392]	; (8004dd4 <HAL_RCC_OscConfig+0x4d0>)
 8004c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4c:	4a61      	ldr	r2, [pc, #388]	; (8004dd4 <HAL_RCC_OscConfig+0x4d0>)
 8004c4e:	f043 0304 	orr.w	r3, r3, #4
 8004c52:	6713      	str	r3, [r2, #112]	; 0x70
 8004c54:	4b5f      	ldr	r3, [pc, #380]	; (8004dd4 <HAL_RCC_OscConfig+0x4d0>)
 8004c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c58:	4a5e      	ldr	r2, [pc, #376]	; (8004dd4 <HAL_RCC_OscConfig+0x4d0>)
 8004c5a:	f043 0301 	orr.w	r3, r3, #1
 8004c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c60:	e00b      	b.n	8004c7a <HAL_RCC_OscConfig+0x376>
 8004c62:	4b5c      	ldr	r3, [pc, #368]	; (8004dd4 <HAL_RCC_OscConfig+0x4d0>)
 8004c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c66:	4a5b      	ldr	r2, [pc, #364]	; (8004dd4 <HAL_RCC_OscConfig+0x4d0>)
 8004c68:	f023 0301 	bic.w	r3, r3, #1
 8004c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c6e:	4b59      	ldr	r3, [pc, #356]	; (8004dd4 <HAL_RCC_OscConfig+0x4d0>)
 8004c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c72:	4a58      	ldr	r2, [pc, #352]	; (8004dd4 <HAL_RCC_OscConfig+0x4d0>)
 8004c74:	f023 0304 	bic.w	r3, r3, #4
 8004c78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d015      	beq.n	8004cae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c82:	f7fc fe89 	bl	8001998 <HAL_GetTick>
 8004c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c88:	e00a      	b.n	8004ca0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c8a:	f7fc fe85 	bl	8001998 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e0d8      	b.n	8004e52 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca0:	4b4c      	ldr	r3, [pc, #304]	; (8004dd4 <HAL_RCC_OscConfig+0x4d0>)
 8004ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca4:	f003 0302 	and.w	r3, r3, #2
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d0ee      	beq.n	8004c8a <HAL_RCC_OscConfig+0x386>
 8004cac:	e014      	b.n	8004cd8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cae:	f7fc fe73 	bl	8001998 <HAL_GetTick>
 8004cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cb4:	e00a      	b.n	8004ccc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cb6:	f7fc fe6f 	bl	8001998 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d901      	bls.n	8004ccc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e0c2      	b.n	8004e52 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ccc:	4b41      	ldr	r3, [pc, #260]	; (8004dd4 <HAL_RCC_OscConfig+0x4d0>)
 8004cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1ee      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004cd8:	7dfb      	ldrb	r3, [r7, #23]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d105      	bne.n	8004cea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cde:	4b3d      	ldr	r3, [pc, #244]	; (8004dd4 <HAL_RCC_OscConfig+0x4d0>)
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	4a3c      	ldr	r2, [pc, #240]	; (8004dd4 <HAL_RCC_OscConfig+0x4d0>)
 8004ce4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ce8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f000 80ae 	beq.w	8004e50 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cf4:	4b37      	ldr	r3, [pc, #220]	; (8004dd4 <HAL_RCC_OscConfig+0x4d0>)
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f003 030c 	and.w	r3, r3, #12
 8004cfc:	2b08      	cmp	r3, #8
 8004cfe:	d06d      	beq.n	8004ddc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d14b      	bne.n	8004da0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d08:	4b32      	ldr	r3, [pc, #200]	; (8004dd4 <HAL_RCC_OscConfig+0x4d0>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a31      	ldr	r2, [pc, #196]	; (8004dd4 <HAL_RCC_OscConfig+0x4d0>)
 8004d0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d14:	f7fc fe40 	bl	8001998 <HAL_GetTick>
 8004d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d1a:	e008      	b.n	8004d2e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d1c:	f7fc fe3c 	bl	8001998 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d901      	bls.n	8004d2e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e091      	b.n	8004e52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d2e:	4b29      	ldr	r3, [pc, #164]	; (8004dd4 <HAL_RCC_OscConfig+0x4d0>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1f0      	bne.n	8004d1c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	69da      	ldr	r2, [r3, #28]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	431a      	orrs	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	019b      	lsls	r3, r3, #6
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d50:	085b      	lsrs	r3, r3, #1
 8004d52:	3b01      	subs	r3, #1
 8004d54:	041b      	lsls	r3, r3, #16
 8004d56:	431a      	orrs	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5c:	061b      	lsls	r3, r3, #24
 8004d5e:	431a      	orrs	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d64:	071b      	lsls	r3, r3, #28
 8004d66:	491b      	ldr	r1, [pc, #108]	; (8004dd4 <HAL_RCC_OscConfig+0x4d0>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d6c:	4b19      	ldr	r3, [pc, #100]	; (8004dd4 <HAL_RCC_OscConfig+0x4d0>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a18      	ldr	r2, [pc, #96]	; (8004dd4 <HAL_RCC_OscConfig+0x4d0>)
 8004d72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d78:	f7fc fe0e 	bl	8001998 <HAL_GetTick>
 8004d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d80:	f7fc fe0a 	bl	8001998 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e05f      	b.n	8004e52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d92:	4b10      	ldr	r3, [pc, #64]	; (8004dd4 <HAL_RCC_OscConfig+0x4d0>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d0f0      	beq.n	8004d80 <HAL_RCC_OscConfig+0x47c>
 8004d9e:	e057      	b.n	8004e50 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004da0:	4b0c      	ldr	r3, [pc, #48]	; (8004dd4 <HAL_RCC_OscConfig+0x4d0>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a0b      	ldr	r2, [pc, #44]	; (8004dd4 <HAL_RCC_OscConfig+0x4d0>)
 8004da6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004daa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dac:	f7fc fdf4 	bl	8001998 <HAL_GetTick>
 8004db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004db4:	f7fc fdf0 	bl	8001998 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e045      	b.n	8004e52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dc6:	4b03      	ldr	r3, [pc, #12]	; (8004dd4 <HAL_RCC_OscConfig+0x4d0>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1f0      	bne.n	8004db4 <HAL_RCC_OscConfig+0x4b0>
 8004dd2:	e03d      	b.n	8004e50 <HAL_RCC_OscConfig+0x54c>
 8004dd4:	40023800 	.word	0x40023800
 8004dd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004ddc:	4b1f      	ldr	r3, [pc, #124]	; (8004e5c <HAL_RCC_OscConfig+0x558>)
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d030      	beq.n	8004e4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d129      	bne.n	8004e4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d122      	bne.n	8004e4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e12:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d119      	bne.n	8004e4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e22:	085b      	lsrs	r3, r3, #1
 8004e24:	3b01      	subs	r3, #1
 8004e26:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d10f      	bne.n	8004e4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e36:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d107      	bne.n	8004e4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e46:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d001      	beq.n	8004e50 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e000      	b.n	8004e52 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3718      	adds	r7, #24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	40023800 	.word	0x40023800

08004e60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e0d0      	b.n	800501a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e78:	4b6a      	ldr	r3, [pc, #424]	; (8005024 <HAL_RCC_ClockConfig+0x1c4>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 030f 	and.w	r3, r3, #15
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d910      	bls.n	8004ea8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e86:	4b67      	ldr	r3, [pc, #412]	; (8005024 <HAL_RCC_ClockConfig+0x1c4>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f023 020f 	bic.w	r2, r3, #15
 8004e8e:	4965      	ldr	r1, [pc, #404]	; (8005024 <HAL_RCC_ClockConfig+0x1c4>)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e96:	4b63      	ldr	r3, [pc, #396]	; (8005024 <HAL_RCC_ClockConfig+0x1c4>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 030f 	and.w	r3, r3, #15
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d001      	beq.n	8004ea8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e0b8      	b.n	800501a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d020      	beq.n	8004ef6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0304 	and.w	r3, r3, #4
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d005      	beq.n	8004ecc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ec0:	4b59      	ldr	r3, [pc, #356]	; (8005028 <HAL_RCC_ClockConfig+0x1c8>)
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	4a58      	ldr	r2, [pc, #352]	; (8005028 <HAL_RCC_ClockConfig+0x1c8>)
 8004ec6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004eca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0308 	and.w	r3, r3, #8
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d005      	beq.n	8004ee4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ed8:	4b53      	ldr	r3, [pc, #332]	; (8005028 <HAL_RCC_ClockConfig+0x1c8>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	4a52      	ldr	r2, [pc, #328]	; (8005028 <HAL_RCC_ClockConfig+0x1c8>)
 8004ede:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ee2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ee4:	4b50      	ldr	r3, [pc, #320]	; (8005028 <HAL_RCC_ClockConfig+0x1c8>)
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	494d      	ldr	r1, [pc, #308]	; (8005028 <HAL_RCC_ClockConfig+0x1c8>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d040      	beq.n	8004f84 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d107      	bne.n	8004f1a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f0a:	4b47      	ldr	r3, [pc, #284]	; (8005028 <HAL_RCC_ClockConfig+0x1c8>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d115      	bne.n	8004f42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e07f      	b.n	800501a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d107      	bne.n	8004f32 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f22:	4b41      	ldr	r3, [pc, #260]	; (8005028 <HAL_RCC_ClockConfig+0x1c8>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d109      	bne.n	8004f42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e073      	b.n	800501a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f32:	4b3d      	ldr	r3, [pc, #244]	; (8005028 <HAL_RCC_ClockConfig+0x1c8>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e06b      	b.n	800501a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f42:	4b39      	ldr	r3, [pc, #228]	; (8005028 <HAL_RCC_ClockConfig+0x1c8>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f023 0203 	bic.w	r2, r3, #3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	4936      	ldr	r1, [pc, #216]	; (8005028 <HAL_RCC_ClockConfig+0x1c8>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f54:	f7fc fd20 	bl	8001998 <HAL_GetTick>
 8004f58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f5a:	e00a      	b.n	8004f72 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f5c:	f7fc fd1c 	bl	8001998 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e053      	b.n	800501a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f72:	4b2d      	ldr	r3, [pc, #180]	; (8005028 <HAL_RCC_ClockConfig+0x1c8>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f003 020c 	and.w	r2, r3, #12
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d1eb      	bne.n	8004f5c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f84:	4b27      	ldr	r3, [pc, #156]	; (8005024 <HAL_RCC_ClockConfig+0x1c4>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 030f 	and.w	r3, r3, #15
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d210      	bcs.n	8004fb4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f92:	4b24      	ldr	r3, [pc, #144]	; (8005024 <HAL_RCC_ClockConfig+0x1c4>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f023 020f 	bic.w	r2, r3, #15
 8004f9a:	4922      	ldr	r1, [pc, #136]	; (8005024 <HAL_RCC_ClockConfig+0x1c4>)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fa2:	4b20      	ldr	r3, [pc, #128]	; (8005024 <HAL_RCC_ClockConfig+0x1c4>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 030f 	and.w	r3, r3, #15
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d001      	beq.n	8004fb4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e032      	b.n	800501a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d008      	beq.n	8004fd2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fc0:	4b19      	ldr	r3, [pc, #100]	; (8005028 <HAL_RCC_ClockConfig+0x1c8>)
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	4916      	ldr	r1, [pc, #88]	; (8005028 <HAL_RCC_ClockConfig+0x1c8>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0308 	and.w	r3, r3, #8
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d009      	beq.n	8004ff2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004fde:	4b12      	ldr	r3, [pc, #72]	; (8005028 <HAL_RCC_ClockConfig+0x1c8>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	00db      	lsls	r3, r3, #3
 8004fec:	490e      	ldr	r1, [pc, #56]	; (8005028 <HAL_RCC_ClockConfig+0x1c8>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ff2:	f000 f821 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	4b0b      	ldr	r3, [pc, #44]	; (8005028 <HAL_RCC_ClockConfig+0x1c8>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	091b      	lsrs	r3, r3, #4
 8004ffe:	f003 030f 	and.w	r3, r3, #15
 8005002:	490a      	ldr	r1, [pc, #40]	; (800502c <HAL_RCC_ClockConfig+0x1cc>)
 8005004:	5ccb      	ldrb	r3, [r1, r3]
 8005006:	fa22 f303 	lsr.w	r3, r2, r3
 800500a:	4a09      	ldr	r2, [pc, #36]	; (8005030 <HAL_RCC_ClockConfig+0x1d0>)
 800500c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800500e:	4b09      	ldr	r3, [pc, #36]	; (8005034 <HAL_RCC_ClockConfig+0x1d4>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4618      	mov	r0, r3
 8005014:	f7fc fc7c 	bl	8001910 <HAL_InitTick>

  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	40023c00 	.word	0x40023c00
 8005028:	40023800 	.word	0x40023800
 800502c:	080119b0 	.word	0x080119b0
 8005030:	20000000 	.word	0x20000000
 8005034:	20000004 	.word	0x20000004

08005038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800503c:	b094      	sub	sp, #80	; 0x50
 800503e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005040:	2300      	movs	r3, #0
 8005042:	647b      	str	r3, [r7, #68]	; 0x44
 8005044:	2300      	movs	r3, #0
 8005046:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005048:	2300      	movs	r3, #0
 800504a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800504c:	2300      	movs	r3, #0
 800504e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005050:	4b79      	ldr	r3, [pc, #484]	; (8005238 <HAL_RCC_GetSysClockFreq+0x200>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f003 030c 	and.w	r3, r3, #12
 8005058:	2b08      	cmp	r3, #8
 800505a:	d00d      	beq.n	8005078 <HAL_RCC_GetSysClockFreq+0x40>
 800505c:	2b08      	cmp	r3, #8
 800505e:	f200 80e1 	bhi.w	8005224 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005062:	2b00      	cmp	r3, #0
 8005064:	d002      	beq.n	800506c <HAL_RCC_GetSysClockFreq+0x34>
 8005066:	2b04      	cmp	r3, #4
 8005068:	d003      	beq.n	8005072 <HAL_RCC_GetSysClockFreq+0x3a>
 800506a:	e0db      	b.n	8005224 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800506c:	4b73      	ldr	r3, [pc, #460]	; (800523c <HAL_RCC_GetSysClockFreq+0x204>)
 800506e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005070:	e0db      	b.n	800522a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005072:	4b73      	ldr	r3, [pc, #460]	; (8005240 <HAL_RCC_GetSysClockFreq+0x208>)
 8005074:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005076:	e0d8      	b.n	800522a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005078:	4b6f      	ldr	r3, [pc, #444]	; (8005238 <HAL_RCC_GetSysClockFreq+0x200>)
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005080:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005082:	4b6d      	ldr	r3, [pc, #436]	; (8005238 <HAL_RCC_GetSysClockFreq+0x200>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d063      	beq.n	8005156 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800508e:	4b6a      	ldr	r3, [pc, #424]	; (8005238 <HAL_RCC_GetSysClockFreq+0x200>)
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	099b      	lsrs	r3, r3, #6
 8005094:	2200      	movs	r2, #0
 8005096:	63bb      	str	r3, [r7, #56]	; 0x38
 8005098:	63fa      	str	r2, [r7, #60]	; 0x3c
 800509a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050a0:	633b      	str	r3, [r7, #48]	; 0x30
 80050a2:	2300      	movs	r3, #0
 80050a4:	637b      	str	r3, [r7, #52]	; 0x34
 80050a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80050aa:	4622      	mov	r2, r4
 80050ac:	462b      	mov	r3, r5
 80050ae:	f04f 0000 	mov.w	r0, #0
 80050b2:	f04f 0100 	mov.w	r1, #0
 80050b6:	0159      	lsls	r1, r3, #5
 80050b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050bc:	0150      	lsls	r0, r2, #5
 80050be:	4602      	mov	r2, r0
 80050c0:	460b      	mov	r3, r1
 80050c2:	4621      	mov	r1, r4
 80050c4:	1a51      	subs	r1, r2, r1
 80050c6:	6139      	str	r1, [r7, #16]
 80050c8:	4629      	mov	r1, r5
 80050ca:	eb63 0301 	sbc.w	r3, r3, r1
 80050ce:	617b      	str	r3, [r7, #20]
 80050d0:	f04f 0200 	mov.w	r2, #0
 80050d4:	f04f 0300 	mov.w	r3, #0
 80050d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050dc:	4659      	mov	r1, fp
 80050de:	018b      	lsls	r3, r1, #6
 80050e0:	4651      	mov	r1, sl
 80050e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050e6:	4651      	mov	r1, sl
 80050e8:	018a      	lsls	r2, r1, #6
 80050ea:	4651      	mov	r1, sl
 80050ec:	ebb2 0801 	subs.w	r8, r2, r1
 80050f0:	4659      	mov	r1, fp
 80050f2:	eb63 0901 	sbc.w	r9, r3, r1
 80050f6:	f04f 0200 	mov.w	r2, #0
 80050fa:	f04f 0300 	mov.w	r3, #0
 80050fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005102:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005106:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800510a:	4690      	mov	r8, r2
 800510c:	4699      	mov	r9, r3
 800510e:	4623      	mov	r3, r4
 8005110:	eb18 0303 	adds.w	r3, r8, r3
 8005114:	60bb      	str	r3, [r7, #8]
 8005116:	462b      	mov	r3, r5
 8005118:	eb49 0303 	adc.w	r3, r9, r3
 800511c:	60fb      	str	r3, [r7, #12]
 800511e:	f04f 0200 	mov.w	r2, #0
 8005122:	f04f 0300 	mov.w	r3, #0
 8005126:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800512a:	4629      	mov	r1, r5
 800512c:	024b      	lsls	r3, r1, #9
 800512e:	4621      	mov	r1, r4
 8005130:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005134:	4621      	mov	r1, r4
 8005136:	024a      	lsls	r2, r1, #9
 8005138:	4610      	mov	r0, r2
 800513a:	4619      	mov	r1, r3
 800513c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800513e:	2200      	movs	r2, #0
 8005140:	62bb      	str	r3, [r7, #40]	; 0x28
 8005142:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005144:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005148:	f7fb f8ca 	bl	80002e0 <__aeabi_uldivmod>
 800514c:	4602      	mov	r2, r0
 800514e:	460b      	mov	r3, r1
 8005150:	4613      	mov	r3, r2
 8005152:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005154:	e058      	b.n	8005208 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005156:	4b38      	ldr	r3, [pc, #224]	; (8005238 <HAL_RCC_GetSysClockFreq+0x200>)
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	099b      	lsrs	r3, r3, #6
 800515c:	2200      	movs	r2, #0
 800515e:	4618      	mov	r0, r3
 8005160:	4611      	mov	r1, r2
 8005162:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005166:	623b      	str	r3, [r7, #32]
 8005168:	2300      	movs	r3, #0
 800516a:	627b      	str	r3, [r7, #36]	; 0x24
 800516c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005170:	4642      	mov	r2, r8
 8005172:	464b      	mov	r3, r9
 8005174:	f04f 0000 	mov.w	r0, #0
 8005178:	f04f 0100 	mov.w	r1, #0
 800517c:	0159      	lsls	r1, r3, #5
 800517e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005182:	0150      	lsls	r0, r2, #5
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	4641      	mov	r1, r8
 800518a:	ebb2 0a01 	subs.w	sl, r2, r1
 800518e:	4649      	mov	r1, r9
 8005190:	eb63 0b01 	sbc.w	fp, r3, r1
 8005194:	f04f 0200 	mov.w	r2, #0
 8005198:	f04f 0300 	mov.w	r3, #0
 800519c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80051a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80051a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80051a8:	ebb2 040a 	subs.w	r4, r2, sl
 80051ac:	eb63 050b 	sbc.w	r5, r3, fp
 80051b0:	f04f 0200 	mov.w	r2, #0
 80051b4:	f04f 0300 	mov.w	r3, #0
 80051b8:	00eb      	lsls	r3, r5, #3
 80051ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051be:	00e2      	lsls	r2, r4, #3
 80051c0:	4614      	mov	r4, r2
 80051c2:	461d      	mov	r5, r3
 80051c4:	4643      	mov	r3, r8
 80051c6:	18e3      	adds	r3, r4, r3
 80051c8:	603b      	str	r3, [r7, #0]
 80051ca:	464b      	mov	r3, r9
 80051cc:	eb45 0303 	adc.w	r3, r5, r3
 80051d0:	607b      	str	r3, [r7, #4]
 80051d2:	f04f 0200 	mov.w	r2, #0
 80051d6:	f04f 0300 	mov.w	r3, #0
 80051da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051de:	4629      	mov	r1, r5
 80051e0:	028b      	lsls	r3, r1, #10
 80051e2:	4621      	mov	r1, r4
 80051e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051e8:	4621      	mov	r1, r4
 80051ea:	028a      	lsls	r2, r1, #10
 80051ec:	4610      	mov	r0, r2
 80051ee:	4619      	mov	r1, r3
 80051f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051f2:	2200      	movs	r2, #0
 80051f4:	61bb      	str	r3, [r7, #24]
 80051f6:	61fa      	str	r2, [r7, #28]
 80051f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051fc:	f7fb f870 	bl	80002e0 <__aeabi_uldivmod>
 8005200:	4602      	mov	r2, r0
 8005202:	460b      	mov	r3, r1
 8005204:	4613      	mov	r3, r2
 8005206:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005208:	4b0b      	ldr	r3, [pc, #44]	; (8005238 <HAL_RCC_GetSysClockFreq+0x200>)
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	0c1b      	lsrs	r3, r3, #16
 800520e:	f003 0303 	and.w	r3, r3, #3
 8005212:	3301      	adds	r3, #1
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005218:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800521a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800521c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005220:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005222:	e002      	b.n	800522a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005224:	4b05      	ldr	r3, [pc, #20]	; (800523c <HAL_RCC_GetSysClockFreq+0x204>)
 8005226:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005228:	bf00      	nop
    }
  }
  return sysclockfreq;
 800522a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800522c:	4618      	mov	r0, r3
 800522e:	3750      	adds	r7, #80	; 0x50
 8005230:	46bd      	mov	sp, r7
 8005232:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005236:	bf00      	nop
 8005238:	40023800 	.word	0x40023800
 800523c:	00f42400 	.word	0x00f42400
 8005240:	007a1200 	.word	0x007a1200

08005244 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005244:	b480      	push	{r7}
 8005246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005248:	4b03      	ldr	r3, [pc, #12]	; (8005258 <HAL_RCC_GetHCLKFreq+0x14>)
 800524a:	681b      	ldr	r3, [r3, #0]
}
 800524c:	4618      	mov	r0, r3
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	20000000 	.word	0x20000000

0800525c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005260:	f7ff fff0 	bl	8005244 <HAL_RCC_GetHCLKFreq>
 8005264:	4602      	mov	r2, r0
 8005266:	4b05      	ldr	r3, [pc, #20]	; (800527c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	0a9b      	lsrs	r3, r3, #10
 800526c:	f003 0307 	and.w	r3, r3, #7
 8005270:	4903      	ldr	r1, [pc, #12]	; (8005280 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005272:	5ccb      	ldrb	r3, [r1, r3]
 8005274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005278:	4618      	mov	r0, r3
 800527a:	bd80      	pop	{r7, pc}
 800527c:	40023800 	.word	0x40023800
 8005280:	080119c0 	.word	0x080119c0

08005284 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005288:	f7ff ffdc 	bl	8005244 <HAL_RCC_GetHCLKFreq>
 800528c:	4602      	mov	r2, r0
 800528e:	4b05      	ldr	r3, [pc, #20]	; (80052a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	0b5b      	lsrs	r3, r3, #13
 8005294:	f003 0307 	and.w	r3, r3, #7
 8005298:	4903      	ldr	r1, [pc, #12]	; (80052a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800529a:	5ccb      	ldrb	r3, [r1, r3]
 800529c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	40023800 	.word	0x40023800
 80052a8:	080119c0 	.word	0x080119c0

080052ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b088      	sub	sp, #32
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80052b4:	2300      	movs	r3, #0
 80052b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80052b8:	2300      	movs	r3, #0
 80052ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80052bc:	2300      	movs	r3, #0
 80052be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80052c0:	2300      	movs	r3, #0
 80052c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80052c4:	2300      	movs	r3, #0
 80052c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d012      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80052d4:	4b69      	ldr	r3, [pc, #420]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	4a68      	ldr	r2, [pc, #416]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80052de:	6093      	str	r3, [r2, #8]
 80052e0:	4b66      	ldr	r3, [pc, #408]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052e2:	689a      	ldr	r2, [r3, #8]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e8:	4964      	ldr	r1, [pc, #400]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80052f6:	2301      	movs	r3, #1
 80052f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d017      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005306:	4b5d      	ldr	r3, [pc, #372]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800530c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005314:	4959      	ldr	r1, [pc, #356]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005316:	4313      	orrs	r3, r2
 8005318:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005320:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005324:	d101      	bne.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005326:	2301      	movs	r3, #1
 8005328:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005332:	2301      	movs	r3, #1
 8005334:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d017      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005342:	4b4e      	ldr	r3, [pc, #312]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005348:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005350:	494a      	ldr	r1, [pc, #296]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005352:	4313      	orrs	r3, r2
 8005354:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005360:	d101      	bne.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005362:	2301      	movs	r3, #1
 8005364:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536a:	2b00      	cmp	r3, #0
 800536c:	d101      	bne.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800536e:	2301      	movs	r3, #1
 8005370:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800537e:	2301      	movs	r3, #1
 8005380:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0320 	and.w	r3, r3, #32
 800538a:	2b00      	cmp	r3, #0
 800538c:	f000 808b 	beq.w	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005390:	4b3a      	ldr	r3, [pc, #232]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005394:	4a39      	ldr	r2, [pc, #228]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800539a:	6413      	str	r3, [r2, #64]	; 0x40
 800539c:	4b37      	ldr	r3, [pc, #220]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800539e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053a4:	60bb      	str	r3, [r7, #8]
 80053a6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80053a8:	4b35      	ldr	r3, [pc, #212]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a34      	ldr	r2, [pc, #208]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80053ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053b4:	f7fc faf0 	bl	8001998 <HAL_GetTick>
 80053b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80053ba:	e008      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053bc:	f7fc faec 	bl	8001998 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b64      	cmp	r3, #100	; 0x64
 80053c8:	d901      	bls.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e38f      	b.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80053ce:	4b2c      	ldr	r3, [pc, #176]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d0f0      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053da:	4b28      	ldr	r3, [pc, #160]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d035      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d02e      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053f8:	4b20      	ldr	r3, [pc, #128]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005400:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005402:	4b1e      	ldr	r3, [pc, #120]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005406:	4a1d      	ldr	r2, [pc, #116]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800540c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800540e:	4b1b      	ldr	r3, [pc, #108]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005412:	4a1a      	ldr	r2, [pc, #104]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005418:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800541a:	4a18      	ldr	r2, [pc, #96]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005420:	4b16      	ldr	r3, [pc, #88]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	2b01      	cmp	r3, #1
 800542a:	d114      	bne.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800542c:	f7fc fab4 	bl	8001998 <HAL_GetTick>
 8005430:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005432:	e00a      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005434:	f7fc fab0 	bl	8001998 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005442:	4293      	cmp	r3, r2
 8005444:	d901      	bls.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e351      	b.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800544a:	4b0c      	ldr	r3, [pc, #48]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800544c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d0ee      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800545e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005462:	d111      	bne.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005464:	4b05      	ldr	r3, [pc, #20]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005470:	4b04      	ldr	r3, [pc, #16]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005472:	400b      	ands	r3, r1
 8005474:	4901      	ldr	r1, [pc, #4]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005476:	4313      	orrs	r3, r2
 8005478:	608b      	str	r3, [r1, #8]
 800547a:	e00b      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800547c:	40023800 	.word	0x40023800
 8005480:	40007000 	.word	0x40007000
 8005484:	0ffffcff 	.word	0x0ffffcff
 8005488:	4bac      	ldr	r3, [pc, #688]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	4aab      	ldr	r2, [pc, #684]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800548e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005492:	6093      	str	r3, [r2, #8]
 8005494:	4ba9      	ldr	r3, [pc, #676]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005496:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054a0:	49a6      	ldr	r1, [pc, #664]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0310 	and.w	r3, r3, #16
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d010      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80054b2:	4ba2      	ldr	r3, [pc, #648]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054b8:	4aa0      	ldr	r2, [pc, #640]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80054c2:	4b9e      	ldr	r3, [pc, #632]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054cc:	499b      	ldr	r1, [pc, #620]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00a      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054e0:	4b96      	ldr	r3, [pc, #600]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054ee:	4993      	ldr	r1, [pc, #588]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00a      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005502:	4b8e      	ldr	r3, [pc, #568]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005508:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005510:	498a      	ldr	r1, [pc, #552]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005512:	4313      	orrs	r3, r2
 8005514:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00a      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005524:	4b85      	ldr	r3, [pc, #532]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800552a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005532:	4982      	ldr	r1, [pc, #520]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005534:	4313      	orrs	r3, r2
 8005536:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00a      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005546:	4b7d      	ldr	r3, [pc, #500]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800554c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005554:	4979      	ldr	r1, [pc, #484]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005556:	4313      	orrs	r3, r2
 8005558:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00a      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005568:	4b74      	ldr	r3, [pc, #464]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800556a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800556e:	f023 0203 	bic.w	r2, r3, #3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005576:	4971      	ldr	r1, [pc, #452]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005578:	4313      	orrs	r3, r2
 800557a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00a      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800558a:	4b6c      	ldr	r3, [pc, #432]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800558c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005590:	f023 020c 	bic.w	r2, r3, #12
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005598:	4968      	ldr	r1, [pc, #416]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800559a:	4313      	orrs	r3, r2
 800559c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00a      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055ac:	4b63      	ldr	r3, [pc, #396]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ba:	4960      	ldr	r1, [pc, #384]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00a      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055ce:	4b5b      	ldr	r3, [pc, #364]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055dc:	4957      	ldr	r1, [pc, #348]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00a      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80055f0:	4b52      	ldr	r3, [pc, #328]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fe:	494f      	ldr	r1, [pc, #316]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005600:	4313      	orrs	r3, r2
 8005602:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00a      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005612:	4b4a      	ldr	r3, [pc, #296]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005618:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005620:	4946      	ldr	r1, [pc, #280]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005622:	4313      	orrs	r3, r2
 8005624:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00a      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005634:	4b41      	ldr	r3, [pc, #260]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800563a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005642:	493e      	ldr	r1, [pc, #248]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005644:	4313      	orrs	r3, r2
 8005646:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00a      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005656:	4b39      	ldr	r3, [pc, #228]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800565c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005664:	4935      	ldr	r1, [pc, #212]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005666:	4313      	orrs	r3, r2
 8005668:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00a      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005678:	4b30      	ldr	r3, [pc, #192]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800567a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800567e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005686:	492d      	ldr	r1, [pc, #180]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005688:	4313      	orrs	r3, r2
 800568a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d011      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800569a:	4b28      	ldr	r3, [pc, #160]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800569c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056a8:	4924      	ldr	r1, [pc, #144]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056b8:	d101      	bne.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80056ba:	2301      	movs	r3, #1
 80056bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0308 	and.w	r3, r3, #8
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80056ca:	2301      	movs	r3, #1
 80056cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00a      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056da:	4b18      	ldr	r3, [pc, #96]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056e8:	4914      	ldr	r1, [pc, #80]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00b      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80056fc:	4b0f      	ldr	r3, [pc, #60]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005702:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800570c:	490b      	ldr	r1, [pc, #44]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800570e:	4313      	orrs	r3, r2
 8005710:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00f      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005720:	4b06      	ldr	r3, [pc, #24]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005726:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005730:	4902      	ldr	r1, [pc, #8]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005732:	4313      	orrs	r3, r2
 8005734:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005738:	e002      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800573a:	bf00      	nop
 800573c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00b      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800574c:	4b8a      	ldr	r3, [pc, #552]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800574e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005752:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800575c:	4986      	ldr	r1, [pc, #536]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800575e:	4313      	orrs	r3, r2
 8005760:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00b      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005770:	4b81      	ldr	r3, [pc, #516]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005772:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005776:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005780:	497d      	ldr	r1, [pc, #500]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005782:	4313      	orrs	r3, r2
 8005784:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d006      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005796:	2b00      	cmp	r3, #0
 8005798:	f000 80d6 	beq.w	8005948 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800579c:	4b76      	ldr	r3, [pc, #472]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a75      	ldr	r2, [pc, #468]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80057a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057a8:	f7fc f8f6 	bl	8001998 <HAL_GetTick>
 80057ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057ae:	e008      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80057b0:	f7fc f8f2 	bl	8001998 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	2b64      	cmp	r3, #100	; 0x64
 80057bc:	d901      	bls.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e195      	b.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057c2:	4b6d      	ldr	r3, [pc, #436]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1f0      	bne.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d021      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d11d      	bne.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80057e2:	4b65      	ldr	r3, [pc, #404]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057e8:	0c1b      	lsrs	r3, r3, #16
 80057ea:	f003 0303 	and.w	r3, r3, #3
 80057ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80057f0:	4b61      	ldr	r3, [pc, #388]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057f6:	0e1b      	lsrs	r3, r3, #24
 80057f8:	f003 030f 	and.w	r3, r3, #15
 80057fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	019a      	lsls	r2, r3, #6
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	041b      	lsls	r3, r3, #16
 8005808:	431a      	orrs	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	061b      	lsls	r3, r3, #24
 800580e:	431a      	orrs	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	071b      	lsls	r3, r3, #28
 8005816:	4958      	ldr	r1, [pc, #352]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005818:	4313      	orrs	r3, r2
 800581a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d004      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800582e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005832:	d00a      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800583c:	2b00      	cmp	r3, #0
 800583e:	d02e      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005844:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005848:	d129      	bne.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800584a:	4b4b      	ldr	r3, [pc, #300]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800584c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005850:	0c1b      	lsrs	r3, r3, #16
 8005852:	f003 0303 	and.w	r3, r3, #3
 8005856:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005858:	4b47      	ldr	r3, [pc, #284]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800585a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800585e:	0f1b      	lsrs	r3, r3, #28
 8005860:	f003 0307 	and.w	r3, r3, #7
 8005864:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	019a      	lsls	r2, r3, #6
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	041b      	lsls	r3, r3, #16
 8005870:	431a      	orrs	r2, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	061b      	lsls	r3, r3, #24
 8005878:	431a      	orrs	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	071b      	lsls	r3, r3, #28
 800587e:	493e      	ldr	r1, [pc, #248]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005880:	4313      	orrs	r3, r2
 8005882:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005886:	4b3c      	ldr	r3, [pc, #240]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005888:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800588c:	f023 021f 	bic.w	r2, r3, #31
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005894:	3b01      	subs	r3, #1
 8005896:	4938      	ldr	r1, [pc, #224]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005898:	4313      	orrs	r3, r2
 800589a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d01d      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80058aa:	4b33      	ldr	r3, [pc, #204]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058b0:	0e1b      	lsrs	r3, r3, #24
 80058b2:	f003 030f 	and.w	r3, r3, #15
 80058b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80058b8:	4b2f      	ldr	r3, [pc, #188]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058be:	0f1b      	lsrs	r3, r3, #28
 80058c0:	f003 0307 	and.w	r3, r3, #7
 80058c4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	019a      	lsls	r2, r3, #6
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	041b      	lsls	r3, r3, #16
 80058d2:	431a      	orrs	r2, r3
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	061b      	lsls	r3, r3, #24
 80058d8:	431a      	orrs	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	071b      	lsls	r3, r3, #28
 80058de:	4926      	ldr	r1, [pc, #152]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058e0:	4313      	orrs	r3, r2
 80058e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d011      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	019a      	lsls	r2, r3, #6
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	041b      	lsls	r3, r3, #16
 80058fe:	431a      	orrs	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	061b      	lsls	r3, r3, #24
 8005906:	431a      	orrs	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	071b      	lsls	r3, r3, #28
 800590e:	491a      	ldr	r1, [pc, #104]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005910:	4313      	orrs	r3, r2
 8005912:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005916:	4b18      	ldr	r3, [pc, #96]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a17      	ldr	r2, [pc, #92]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800591c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005920:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005922:	f7fc f839 	bl	8001998 <HAL_GetTick>
 8005926:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005928:	e008      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800592a:	f7fc f835 	bl	8001998 <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	2b64      	cmp	r3, #100	; 0x64
 8005936:	d901      	bls.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e0d8      	b.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800593c:	4b0e      	ldr	r3, [pc, #56]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d0f0      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	2b01      	cmp	r3, #1
 800594c:	f040 80ce 	bne.w	8005aec <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005950:	4b09      	ldr	r3, [pc, #36]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a08      	ldr	r2, [pc, #32]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005956:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800595a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800595c:	f7fc f81c 	bl	8001998 <HAL_GetTick>
 8005960:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005962:	e00b      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005964:	f7fc f818 	bl	8001998 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b64      	cmp	r3, #100	; 0x64
 8005970:	d904      	bls.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e0bb      	b.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005976:	bf00      	nop
 8005978:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800597c:	4b5e      	ldr	r3, [pc, #376]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005984:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005988:	d0ec      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800599a:	2b00      	cmp	r3, #0
 800599c:	d009      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d02e      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d12a      	bne.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80059b2:	4b51      	ldr	r3, [pc, #324]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b8:	0c1b      	lsrs	r3, r3, #16
 80059ba:	f003 0303 	and.w	r3, r3, #3
 80059be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80059c0:	4b4d      	ldr	r3, [pc, #308]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c6:	0f1b      	lsrs	r3, r3, #28
 80059c8:	f003 0307 	and.w	r3, r3, #7
 80059cc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	019a      	lsls	r2, r3, #6
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	041b      	lsls	r3, r3, #16
 80059d8:	431a      	orrs	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	061b      	lsls	r3, r3, #24
 80059e0:	431a      	orrs	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	071b      	lsls	r3, r3, #28
 80059e6:	4944      	ldr	r1, [pc, #272]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80059ee:	4b42      	ldr	r3, [pc, #264]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fc:	3b01      	subs	r3, #1
 80059fe:	021b      	lsls	r3, r3, #8
 8005a00:	493d      	ldr	r1, [pc, #244]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d022      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a1c:	d11d      	bne.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005a1e:	4b36      	ldr	r3, [pc, #216]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a24:	0e1b      	lsrs	r3, r3, #24
 8005a26:	f003 030f 	and.w	r3, r3, #15
 8005a2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a2c:	4b32      	ldr	r3, [pc, #200]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a32:	0f1b      	lsrs	r3, r3, #28
 8005a34:	f003 0307 	and.w	r3, r3, #7
 8005a38:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	019a      	lsls	r2, r3, #6
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	041b      	lsls	r3, r3, #16
 8005a46:	431a      	orrs	r2, r3
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	061b      	lsls	r3, r3, #24
 8005a4c:	431a      	orrs	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	071b      	lsls	r3, r3, #28
 8005a52:	4929      	ldr	r1, [pc, #164]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0308 	and.w	r3, r3, #8
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d028      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005a66:	4b24      	ldr	r3, [pc, #144]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a6c:	0e1b      	lsrs	r3, r3, #24
 8005a6e:	f003 030f 	and.w	r3, r3, #15
 8005a72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005a74:	4b20      	ldr	r3, [pc, #128]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a7a:	0c1b      	lsrs	r3, r3, #16
 8005a7c:	f003 0303 	and.w	r3, r3, #3
 8005a80:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	019a      	lsls	r2, r3, #6
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	041b      	lsls	r3, r3, #16
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	061b      	lsls	r3, r3, #24
 8005a92:	431a      	orrs	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	69db      	ldr	r3, [r3, #28]
 8005a98:	071b      	lsls	r3, r3, #28
 8005a9a:	4917      	ldr	r1, [pc, #92]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005aa2:	4b15      	ldr	r3, [pc, #84]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005aa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aa8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab0:	4911      	ldr	r1, [pc, #68]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005ab8:	4b0f      	ldr	r3, [pc, #60]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a0e      	ldr	r2, [pc, #56]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ac2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ac4:	f7fb ff68 	bl	8001998 <HAL_GetTick>
 8005ac8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005aca:	e008      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005acc:	f7fb ff64 	bl	8001998 <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	2b64      	cmp	r3, #100	; 0x64
 8005ad8:	d901      	bls.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e007      	b.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ade:	4b06      	ldr	r3, [pc, #24]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ae6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005aea:	d1ef      	bne.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3720      	adds	r7, #32
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	40023800 	.word	0x40023800

08005afc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e071      	b.n	8005bf6 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	7f5b      	ldrb	r3, [r3, #29]
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d105      	bne.n	8005b28 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f7fb fbf0 	bl	8001308 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	f003 0310 	and.w	r3, r3, #16
 8005b38:	2b10      	cmp	r3, #16
 8005b3a:	d053      	beq.n	8005be4 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	22ca      	movs	r2, #202	; 0xca
 8005b42:	625a      	str	r2, [r3, #36]	; 0x24
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2253      	movs	r2, #83	; 0x53
 8005b4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 f99f 	bl	8005e90 <RTC_EnterInitMode>
 8005b52:	4603      	mov	r3, r0
 8005b54:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005b56:	7bfb      	ldrb	r3, [r7, #15]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d12a      	bne.n	8005bb2 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6899      	ldr	r1, [r3, #8]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	4b26      	ldr	r3, [pc, #152]	; (8005c00 <HAL_RTC_Init+0x104>)
 8005b68:	400b      	ands	r3, r1
 8005b6a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6899      	ldr	r1, [r3, #8]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	431a      	orrs	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	68d2      	ldr	r2, [r2, #12]
 8005b92:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6919      	ldr	r1, [r3, #16]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	041a      	lsls	r2, r3, #16
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 f9a8 	bl	8005efe <RTC_ExitInitMode>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005bb2:	7bfb      	ldrb	r3, [r7, #15]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d110      	bne.n	8005bda <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 0208 	bic.w	r2, r2, #8
 8005bc6:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	699a      	ldr	r2, [r3, #24]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	22ff      	movs	r2, #255	; 0xff
 8005be0:	625a      	str	r2, [r3, #36]	; 0x24
 8005be2:	e001      	b.n	8005be8 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005be4:	2300      	movs	r3, #0
 8005be6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005be8:	7bfb      	ldrb	r3, [r7, #15]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d102      	bne.n	8005bf4 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	ff8fffbf 	.word	0xff8fffbf

08005c04 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005c04:	b590      	push	{r4, r7, lr}
 8005c06:	b087      	sub	sp, #28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	7f1b      	ldrb	r3, [r3, #28]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d101      	bne.n	8005c20 <HAL_RTC_SetTime+0x1c>
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	e085      	b.n	8005d2c <HAL_RTC_SetTime+0x128>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2201      	movs	r2, #1
 8005c24:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2202      	movs	r2, #2
 8005c2a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d126      	bne.n	8005c80 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d102      	bne.n	8005c46 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	2200      	movs	r2, #0
 8005c44:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f000 f97c 	bl	8005f48 <RTC_ByteToBcd2>
 8005c50:	4603      	mov	r3, r0
 8005c52:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	785b      	ldrb	r3, [r3, #1]
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f000 f975 	bl	8005f48 <RTC_ByteToBcd2>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c62:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	789b      	ldrb	r3, [r3, #2]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f000 f96d 	bl	8005f48 <RTC_ByteToBcd2>
 8005c6e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c70:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	78db      	ldrb	r3, [r3, #3]
 8005c78:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	617b      	str	r3, [r7, #20]
 8005c7e:	e018      	b.n	8005cb2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d102      	bne.n	8005c94 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	2200      	movs	r2, #0
 8005c92:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	785b      	ldrb	r3, [r3, #1]
 8005c9e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005ca0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005ca6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	78db      	ldrb	r3, [r3, #3]
 8005cac:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	22ca      	movs	r2, #202	; 0xca
 8005cb8:	625a      	str	r2, [r3, #36]	; 0x24
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2253      	movs	r2, #83	; 0x53
 8005cc0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f000 f8e4 	bl	8005e90 <RTC_EnterInitMode>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005ccc:	7cfb      	ldrb	r3, [r7, #19]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d11e      	bne.n	8005d10 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	6979      	ldr	r1, [r7, #20]
 8005cd8:	4b16      	ldr	r3, [pc, #88]	; (8005d34 <HAL_RTC_SetTime+0x130>)
 8005cda:	400b      	ands	r3, r1
 8005cdc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	689a      	ldr	r2, [r3, #8]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005cec:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6899      	ldr	r1, [r3, #8]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	68da      	ldr	r2, [r3, #12]
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	431a      	orrs	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	430a      	orrs	r2, r1
 8005d04:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f000 f8f9 	bl	8005efe <RTC_ExitInitMode>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005d10:	7cfb      	ldrb	r3, [r7, #19]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d102      	bne.n	8005d1c <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	22ff      	movs	r2, #255	; 0xff
 8005d22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	771a      	strb	r2, [r3, #28]

  return status;
 8005d2a:	7cfb      	ldrb	r3, [r7, #19]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	371c      	adds	r7, #28
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd90      	pop	{r4, r7, pc}
 8005d34:	007f7f7f 	.word	0x007f7f7f

08005d38 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005d38:	b590      	push	{r4, r7, lr}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005d44:	2300      	movs	r3, #0
 8005d46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	7f1b      	ldrb	r3, [r3, #28]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d101      	bne.n	8005d54 <HAL_RTC_SetDate+0x1c>
 8005d50:	2302      	movs	r3, #2
 8005d52:	e06f      	b.n	8005e34 <HAL_RTC_SetDate+0xfc>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2201      	movs	r2, #1
 8005d58:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2202      	movs	r2, #2
 8005d5e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10e      	bne.n	8005d84 <HAL_RTC_SetDate+0x4c>
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	785b      	ldrb	r3, [r3, #1]
 8005d6a:	f003 0310 	and.w	r3, r3, #16
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d008      	beq.n	8005d84 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	785b      	ldrb	r3, [r3, #1]
 8005d76:	f023 0310 	bic.w	r3, r3, #16
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	330a      	adds	r3, #10
 8005d7e:	b2da      	uxtb	r2, r3
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d11c      	bne.n	8005dc4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	78db      	ldrb	r3, [r3, #3]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 f8da 	bl	8005f48 <RTC_ByteToBcd2>
 8005d94:	4603      	mov	r3, r0
 8005d96:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	785b      	ldrb	r3, [r3, #1]
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f000 f8d3 	bl	8005f48 <RTC_ByteToBcd2>
 8005da2:	4603      	mov	r3, r0
 8005da4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005da6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	789b      	ldrb	r3, [r3, #2]
 8005dac:	4618      	mov	r0, r3
 8005dae:	f000 f8cb 	bl	8005f48 <RTC_ByteToBcd2>
 8005db2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005db4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	617b      	str	r3, [r7, #20]
 8005dc2:	e00e      	b.n	8005de2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	78db      	ldrb	r3, [r3, #3]
 8005dc8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	785b      	ldrb	r3, [r3, #1]
 8005dce:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005dd0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005dd2:	68ba      	ldr	r2, [r7, #8]
 8005dd4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005dd6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005dde:	4313      	orrs	r3, r2
 8005de0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	22ca      	movs	r2, #202	; 0xca
 8005de8:	625a      	str	r2, [r3, #36]	; 0x24
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2253      	movs	r2, #83	; 0x53
 8005df0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f000 f84c 	bl	8005e90 <RTC_EnterInitMode>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005dfc:	7cfb      	ldrb	r3, [r7, #19]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10a      	bne.n	8005e18 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	6979      	ldr	r1, [r7, #20]
 8005e08:	4b0c      	ldr	r3, [pc, #48]	; (8005e3c <HAL_RTC_SetDate+0x104>)
 8005e0a:	400b      	ands	r3, r1
 8005e0c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	f000 f875 	bl	8005efe <RTC_ExitInitMode>
 8005e14:	4603      	mov	r3, r0
 8005e16:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005e18:	7cfb      	ldrb	r3, [r7, #19]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d102      	bne.n	8005e24 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2201      	movs	r2, #1
 8005e22:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	22ff      	movs	r2, #255	; 0xff
 8005e2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	771a      	strb	r2, [r3, #28]

  return status;
 8005e32:	7cfb      	ldrb	r3, [r7, #19]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	371c      	adds	r7, #28
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd90      	pop	{r4, r7, pc}
 8005e3c:	00ffff3f 	.word	0x00ffff3f

08005e40 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68da      	ldr	r2, [r3, #12]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e5a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e5c:	f7fb fd9c 	bl	8001998 <HAL_GetTick>
 8005e60:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e62:	e009      	b.n	8005e78 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e64:	f7fb fd98 	bl	8001998 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e72:	d901      	bls.n	8005e78 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e007      	b.n	8005e88 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	f003 0320 	and.w	r3, r3, #32
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d0ee      	beq.n	8005e64 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d122      	bne.n	8005ef4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68da      	ldr	r2, [r3, #12]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ebc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ebe:	f7fb fd6b 	bl	8001998 <HAL_GetTick>
 8005ec2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005ec4:	e00c      	b.n	8005ee0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ec6:	f7fb fd67 	bl	8001998 <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ed4:	d904      	bls.n	8005ee0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2204      	movs	r2, #4
 8005eda:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d102      	bne.n	8005ef4 <RTC_EnterInitMode+0x64>
 8005eee:	7bfb      	ldrb	r3, [r7, #15]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d1e8      	bne.n	8005ec6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b084      	sub	sp, #16
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f06:	2300      	movs	r3, #0
 8005f08:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68da      	ldr	r2, [r3, #12]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f18:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f003 0320 	and.w	r3, r3, #32
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d10a      	bne.n	8005f3e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7ff ff89 	bl	8005e40 <HAL_RTC_WaitForSynchro>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d004      	beq.n	8005f3e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2204      	movs	r2, #4
 8005f38:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	4603      	mov	r3, r0
 8005f50:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005f52:	2300      	movs	r3, #0
 8005f54:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005f56:	e005      	b.n	8005f64 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005f5e:	79fb      	ldrb	r3, [r7, #7]
 8005f60:	3b0a      	subs	r3, #10
 8005f62:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005f64:	79fb      	ldrb	r3, [r7, #7]
 8005f66:	2b09      	cmp	r3, #9
 8005f68:	d8f6      	bhi.n	8005f58 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	011b      	lsls	r3, r3, #4
 8005f70:	b2da      	uxtb	r2, r3
 8005f72:	79fb      	ldrb	r3, [r7, #7]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	b2db      	uxtb	r3, r3
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3714      	adds	r7, #20
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b087      	sub	sp, #28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005f90:	2300      	movs	r3, #0
 8005f92:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	7f1b      	ldrb	r3, [r3, #28]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d101      	bne.n	8005fa0 <HAL_RTCEx_SetTimeStamp+0x1c>
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	e050      	b.n	8006042 <HAL_RTCEx_SetTimeStamp+0xbe>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2202      	movs	r2, #2
 8005faa:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 0206 	bic.w	r2, r2, #6
 8005fba:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	689a      	ldr	r2, [r3, #8]
 8005fd2:	4b1f      	ldr	r3, [pc, #124]	; (8006050 <HAL_RTCEx_SetTimeStamp+0xcc>)
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	22ca      	movs	r2, #202	; 0xca
 8005fe6:	625a      	str	r2, [r3, #36]	; 0x24
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2253      	movs	r2, #83	; 0x53
 8005fee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	b2da      	uxtb	r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f462 6208 	orn	r2, r2, #2176	; 0x880
 8006008:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	b2da      	uxtb	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f462 5284 	orn	r2, r2, #4224	; 0x1080
 800601a:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	689a      	ldr	r2, [r3, #8]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800602a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	22ff      	movs	r2, #255	; 0xff
 8006032:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2201      	movs	r2, #1
 8006038:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	371c      	adds	r7, #28
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop
 8006050:	fffff7f7 	.word	0xfffff7f7

08006054 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e022      	b.n	80060ac <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d105      	bne.n	800607e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f7fb f973 	bl	8001364 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2203      	movs	r2, #3
 8006082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f814 	bl	80060b4 <HAL_SD_InitCard>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d001      	beq.n	8006096 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e00a      	b.n	80060ac <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3708      	adds	r7, #8
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80060b4:	b5b0      	push	{r4, r5, r7, lr}
 80060b6:	b08e      	sub	sp, #56	; 0x38
 80060b8:	af04      	add	r7, sp, #16
 80060ba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80060bc:	2300      	movs	r3, #0
 80060be:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80060c0:	2300      	movs	r3, #0
 80060c2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80060c4:	2300      	movs	r3, #0
 80060c6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80060c8:	2300      	movs	r3, #0
 80060ca:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80060cc:	2300      	movs	r3, #0
 80060ce:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80060d0:	2376      	movs	r3, #118	; 0x76
 80060d2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681d      	ldr	r5, [r3, #0]
 80060d8:	466c      	mov	r4, sp
 80060da:	f107 0314 	add.w	r3, r7, #20
 80060de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80060e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80060e6:	f107 0308 	add.w	r3, r7, #8
 80060ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060ec:	4628      	mov	r0, r5
 80060ee:	f001 fdc5 	bl	8007c7c <SDMMC_Init>
 80060f2:	4603      	mov	r3, r0
 80060f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80060f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d001      	beq.n	8006104 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e059      	b.n	80061b8 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	685a      	ldr	r2, [r3, #4]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006112:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4618      	mov	r0, r3
 800611a:	f001 fdf9 	bl	8007d10 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	685a      	ldr	r2, [r3, #4]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800612c:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800612e:	2002      	movs	r0, #2
 8006130:	f7fb fc3e 	bl	80019b0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 ff59 	bl	8006fec <SD_PowerON>
 800613a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800613c:	6a3b      	ldr	r3, [r7, #32]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00b      	beq.n	800615a <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800614e:	6a3b      	ldr	r3, [r7, #32]
 8006150:	431a      	orrs	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e02e      	b.n	80061b8 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 fe78 	bl	8006e50 <SD_InitCard>
 8006160:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00b      	beq.n	8006180 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006174:	6a3b      	ldr	r3, [r7, #32]
 8006176:	431a      	orrs	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e01b      	b.n	80061b8 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006188:	4618      	mov	r0, r3
 800618a:	f001 fe53 	bl	8007e34 <SDMMC_CmdBlockLength>
 800618e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006190:	6a3b      	ldr	r3, [r7, #32]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00f      	beq.n	80061b6 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a09      	ldr	r2, [pc, #36]	; (80061c0 <HAL_SD_InitCard+0x10c>)
 800619c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061a2:	6a3b      	ldr	r3, [r7, #32]
 80061a4:	431a      	orrs	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e000      	b.n	80061b8 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3728      	adds	r7, #40	; 0x28
 80061bc:	46bd      	mov	sp, r7
 80061be:	bdb0      	pop	{r4, r5, r7, pc}
 80061c0:	004005ff 	.word	0x004005ff

080061c4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b08c      	sub	sp, #48	; 0x30
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
 80061d0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d107      	bne.n	80061ec <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e0c3      	b.n	8006374 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	f040 80bc 	bne.w	8006372 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006200:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	441a      	add	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800620a:	429a      	cmp	r2, r3
 800620c:	d907      	bls.n	800621e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006212:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e0aa      	b.n	8006374 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2203      	movs	r2, #3
 8006222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2200      	movs	r2, #0
 800622c:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800623c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006242:	4a4e      	ldr	r2, [pc, #312]	; (800637c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8006244:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624a:	4a4d      	ldr	r2, [pc, #308]	; (8006380 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800624c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006252:	2200      	movs	r2, #0
 8006254:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625a:	2200      	movs	r2, #0
 800625c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626e:	689a      	ldr	r2, [r3, #8]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	3380      	adds	r3, #128	; 0x80
 8006284:	4619      	mov	r1, r3
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	025b      	lsls	r3, r3, #9
 800628c:	089b      	lsrs	r3, r3, #2
 800628e:	f7fc fb77 	bl	8002980 <HAL_DMA_Start_IT>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d017      	beq.n	80062c8 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80062a6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a35      	ldr	r2, [pc, #212]	; (8006384 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80062ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e055      	b.n	8006374 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f042 0208 	orr.w	r2, r2, #8
 80062d6:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d002      	beq.n	80062e6 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 80062e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e2:	025b      	lsls	r3, r3, #9
 80062e4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80062e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062ea:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	025b      	lsls	r3, r3, #9
 80062f0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80062f2:	2390      	movs	r3, #144	; 0x90
 80062f4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80062f6:	2302      	movs	r3, #2
 80062f8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80062fa:	2300      	movs	r3, #0
 80062fc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80062fe:	2301      	movs	r3, #1
 8006300:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f107 0210 	add.w	r2, r7, #16
 800630a:	4611      	mov	r1, r2
 800630c:	4618      	mov	r0, r3
 800630e:	f001 fd65 	bl	8007ddc <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d90a      	bls.n	800632e <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2282      	movs	r2, #130	; 0x82
 800631c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006324:	4618      	mov	r0, r3
 8006326:	f001 fdc9 	bl	8007ebc <SDMMC_CmdReadMultiBlock>
 800632a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800632c:	e009      	b.n	8006342 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2281      	movs	r2, #129	; 0x81
 8006332:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800633a:	4618      	mov	r0, r3
 800633c:	f001 fd9c 	bl	8007e78 <SDMMC_CmdReadSingleBlock>
 8006340:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006344:	2b00      	cmp	r3, #0
 8006346:	d012      	beq.n	800636e <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a0d      	ldr	r2, [pc, #52]	; (8006384 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800634e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006356:	431a      	orrs	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e002      	b.n	8006374 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800636e:	2300      	movs	r3, #0
 8006370:	e000      	b.n	8006374 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8006372:	2302      	movs	r3, #2
  }
}
 8006374:	4618      	mov	r0, r3
 8006376:	3730      	adds	r7, #48	; 0x30
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	08006c5f 	.word	0x08006c5f
 8006380:	08006cd1 	.word	0x08006cd1
 8006384:	004005ff 	.word	0x004005ff

08006388 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b08c      	sub	sp, #48	; 0x30
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
 8006394:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d107      	bne.n	80063b0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e0c6      	b.n	800653e <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	f040 80bf 	bne.w	800653c <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80063c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	441a      	add	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d907      	bls.n	80063e2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e0ad      	b.n	800653e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2203      	movs	r2, #3
 80063e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2200      	movs	r2, #0
 80063f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f042 021a 	orr.w	r2, r2, #26
 8006400:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006406:	4a50      	ldr	r2, [pc, #320]	; (8006548 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8006408:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800640e:	4a4f      	ldr	r2, [pc, #316]	; (800654c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8006410:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006416:	2200      	movs	r2, #0
 8006418:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800641e:	2b01      	cmp	r3, #1
 8006420:	d002      	beq.n	8006428 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8006422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006424:	025b      	lsls	r3, r3, #9
 8006426:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d90a      	bls.n	8006444 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	22a0      	movs	r2, #160	; 0xa0
 8006432:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800643a:	4618      	mov	r0, r3
 800643c:	f001 fd82 	bl	8007f44 <SDMMC_CmdWriteMultiBlock>
 8006440:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006442:	e009      	b.n	8006458 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2290      	movs	r2, #144	; 0x90
 8006448:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006450:	4618      	mov	r0, r3
 8006452:	f001 fd55 	bl	8007f00 <SDMMC_CmdWriteSingleBlock>
 8006456:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645a:	2b00      	cmp	r3, #0
 800645c:	d012      	beq.n	8006484 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a3b      	ldr	r2, [pc, #236]	; (8006550 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006464:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800646a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646c:	431a      	orrs	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	e05c      	b.n	800653e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f042 0208 	orr.w	r2, r2, #8
 8006492:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006498:	2240      	movs	r2, #64	; 0x40
 800649a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ac:	689a      	ldr	r2, [r3, #8]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	430a      	orrs	r2, r1
 80064b6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80064bc:	68b9      	ldr	r1, [r7, #8]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	3380      	adds	r3, #128	; 0x80
 80064c4:	461a      	mov	r2, r3
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	025b      	lsls	r3, r3, #9
 80064ca:	089b      	lsrs	r3, r3, #2
 80064cc:	f7fc fa58 	bl	8002980 <HAL_DMA_Start_IT>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d01a      	beq.n	800650c <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f022 021a 	bic.w	r2, r2, #26
 80064e4:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a19      	ldr	r2, [pc, #100]	; (8006550 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80064ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2201      	movs	r2, #1
 80064fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e018      	b.n	800653e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800650c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006510:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	025b      	lsls	r3, r3, #9
 8006516:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006518:	2390      	movs	r3, #144	; 0x90
 800651a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800651c:	2300      	movs	r3, #0
 800651e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006520:	2300      	movs	r3, #0
 8006522:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8006524:	2301      	movs	r3, #1
 8006526:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f107 0210 	add.w	r2, r7, #16
 8006530:	4611      	mov	r1, r2
 8006532:	4618      	mov	r0, r3
 8006534:	f001 fc52 	bl	8007ddc <SDMMC_ConfigData>

      return HAL_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	e000      	b.n	800653e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800653c:	2302      	movs	r3, #2
  }
}
 800653e:	4618      	mov	r0, r3
 8006540:	3730      	adds	r7, #48	; 0x30
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	08006c35 	.word	0x08006c35
 800654c:	08006cd1 	.word	0x08006cd1
 8006550:	004005ff 	.word	0x004005ff

08006554 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006560:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006568:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d008      	beq.n	8006582 <HAL_SD_IRQHandler+0x2e>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f003 0308 	and.w	r3, r3, #8
 8006576:	2b00      	cmp	r3, #0
 8006578:	d003      	beq.n	8006582 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fdec 	bl	8007158 <SD_Read_IT>
 8006580:	e15a      	b.n	8006838 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800658c:	2b00      	cmp	r3, #0
 800658e:	f000 808d 	beq.w	80066ac <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f44f 7280 	mov.w	r2, #256	; 0x100
 800659a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	4b9a      	ldr	r3, [pc, #616]	; (8006810 <HAL_SD_IRQHandler+0x2bc>)
 80065a8:	400b      	ands	r3, r1
 80065aa:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f022 0201 	bic.w	r2, r2, #1
 80065ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f003 0308 	and.w	r3, r3, #8
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d039      	beq.n	800663a <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f003 0302 	and.w	r3, r3, #2
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d104      	bne.n	80065da <HAL_SD_IRQHandler+0x86>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f003 0320 	and.w	r3, r3, #32
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d011      	beq.n	80065fe <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4618      	mov	r0, r3
 80065e0:	f001 fcd2 	bl	8007f88 <SDMMC_CmdStopTransfer>
 80065e4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d008      	beq.n	80065fe <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	431a      	orrs	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 f921 	bl	8006840 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f240 523a 	movw	r2, #1338	; 0x53a
 8006606:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f003 0301 	and.w	r3, r3, #1
 800661c:	2b00      	cmp	r3, #0
 800661e:	d104      	bne.n	800662a <HAL_SD_IRQHandler+0xd6>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f003 0302 	and.w	r3, r3, #2
 8006626:	2b00      	cmp	r3, #0
 8006628:	d003      	beq.n	8006632 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f003 fd3c 	bl	800a0a8 <HAL_SD_RxCpltCallback>
 8006630:	e102      	b.n	8006838 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f003 fd2e 	bl	800a094 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006638:	e0fe      	b.n	8006838 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006640:	2b00      	cmp	r3, #0
 8006642:	f000 80f9 	beq.w	8006838 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f003 0320 	and.w	r3, r3, #32
 800664c:	2b00      	cmp	r3, #0
 800664e:	d011      	beq.n	8006674 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4618      	mov	r0, r3
 8006656:	f001 fc97 	bl	8007f88 <SDMMC_CmdStopTransfer>
 800665a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d008      	beq.n	8006674 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	431a      	orrs	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f8e6 	bl	8006840 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	2b00      	cmp	r3, #0
 800667c:	f040 80dc 	bne.w	8006838 <HAL_SD_IRQHandler+0x2e4>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f003 0302 	and.w	r3, r3, #2
 8006686:	2b00      	cmp	r3, #0
 8006688:	f040 80d6 	bne.w	8006838 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f022 0208 	bic.w	r2, r2, #8
 800669a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f003 fcf5 	bl	800a094 <HAL_SD_TxCpltCallback>
}
 80066aa:	e0c5      	b.n	8006838 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d008      	beq.n	80066cc <HAL_SD_IRQHandler+0x178>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f003 0308 	and.w	r3, r3, #8
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d003      	beq.n	80066cc <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 fd98 	bl	80071fa <SD_Write_IT>
 80066ca:	e0b5      	b.n	8006838 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	f000 80ae 	beq.w	8006838 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066e2:	f003 0302 	and.w	r3, r3, #2
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d005      	beq.n	80066f6 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ee:	f043 0202 	orr.w	r2, r3, #2
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066fc:	f003 0308 	and.w	r3, r3, #8
 8006700:	2b00      	cmp	r3, #0
 8006702:	d005      	beq.n	8006710 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006708:	f043 0208 	orr.w	r2, r3, #8
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006716:	f003 0320 	and.w	r3, r3, #32
 800671a:	2b00      	cmp	r3, #0
 800671c:	d005      	beq.n	800672a <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006722:	f043 0220 	orr.w	r2, r3, #32
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006730:	f003 0310 	and.w	r3, r3, #16
 8006734:	2b00      	cmp	r3, #0
 8006736:	d005      	beq.n	8006744 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673c:	f043 0210 	orr.w	r2, r3, #16
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f240 523a 	movw	r2, #1338	; 0x53a
 800674c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800675c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4618      	mov	r0, r3
 8006764:	f001 fc10 	bl	8007f88 <SDMMC_CmdStopTransfer>
 8006768:	4602      	mov	r2, r0
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676e:	431a      	orrs	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f003 0308 	and.w	r3, r3, #8
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00a      	beq.n	8006794 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 f857 	bl	8006840 <HAL_SD_ErrorCallback>
}
 8006792:	e051      	b.n	8006838 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800679a:	2b00      	cmp	r3, #0
 800679c:	d04c      	beq.n	8006838 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f003 0310 	and.w	r3, r3, #16
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d104      	bne.n	80067b2 <HAL_SD_IRQHandler+0x25e>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f003 0320 	and.w	r3, r3, #32
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d011      	beq.n	80067d6 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b6:	4a17      	ldr	r2, [pc, #92]	; (8006814 <HAL_SD_IRQHandler+0x2c0>)
 80067b8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067be:	4618      	mov	r0, r3
 80067c0:	f7fc f93e 	bl	8002a40 <HAL_DMA_Abort_IT>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d036      	beq.n	8006838 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ce:	4618      	mov	r0, r3
 80067d0:	f000 fad0 	bl	8006d74 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80067d4:	e030      	b.n	8006838 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f003 0301 	and.w	r3, r3, #1
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d104      	bne.n	80067ea <HAL_SD_IRQHandler+0x296>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f003 0302 	and.w	r3, r3, #2
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d018      	beq.n	800681c <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ee:	4a0a      	ldr	r2, [pc, #40]	; (8006818 <HAL_SD_IRQHandler+0x2c4>)
 80067f0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7fc f922 	bl	8002a40 <HAL_DMA_Abort_IT>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d01a      	beq.n	8006838 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006806:	4618      	mov	r0, r3
 8006808:	f000 faeb 	bl	8006de2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800680c:	e014      	b.n	8006838 <HAL_SD_IRQHandler+0x2e4>
 800680e:	bf00      	nop
 8006810:	ffff3ec5 	.word	0xffff3ec5
 8006814:	08006d75 	.word	0x08006d75
 8006818:	08006de3 	.word	0x08006de3
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f003 fc25 	bl	800a080 <HAL_SD_AbortCallback>
}
 8006836:	e7ff      	b.n	8006838 <HAL_SD_IRQHandler+0x2e4>
 8006838:	bf00      	nop
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006862:	0f9b      	lsrs	r3, r3, #30
 8006864:	b2da      	uxtb	r2, r3
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800686e:	0e9b      	lsrs	r3, r3, #26
 8006870:	b2db      	uxtb	r3, r3
 8006872:	f003 030f 	and.w	r3, r3, #15
 8006876:	b2da      	uxtb	r2, r3
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006880:	0e1b      	lsrs	r3, r3, #24
 8006882:	b2db      	uxtb	r3, r3
 8006884:	f003 0303 	and.w	r3, r3, #3
 8006888:	b2da      	uxtb	r2, r3
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006892:	0c1b      	lsrs	r3, r3, #16
 8006894:	b2da      	uxtb	r2, r3
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800689e:	0a1b      	lsrs	r3, r3, #8
 80068a0:	b2da      	uxtb	r2, r3
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068aa:	b2da      	uxtb	r2, r3
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068b4:	0d1b      	lsrs	r3, r3, #20
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068c0:	0c1b      	lsrs	r3, r3, #16
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	f003 030f 	and.w	r3, r3, #15
 80068c8:	b2da      	uxtb	r2, r3
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068d2:	0bdb      	lsrs	r3, r3, #15
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	b2da      	uxtb	r2, r3
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068e4:	0b9b      	lsrs	r3, r3, #14
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	f003 0301 	and.w	r3, r3, #1
 80068ec:	b2da      	uxtb	r2, r3
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068f6:	0b5b      	lsrs	r3, r3, #13
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006908:	0b1b      	lsrs	r3, r3, #12
 800690a:	b2db      	uxtb	r3, r3
 800690c:	f003 0301 	and.w	r3, r3, #1
 8006910:	b2da      	uxtb	r2, r3
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	2200      	movs	r2, #0
 800691a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006920:	2b00      	cmp	r3, #0
 8006922:	d163      	bne.n	80069ec <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006928:	009a      	lsls	r2, r3, #2
 800692a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800692e:	4013      	ands	r3, r2
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006934:	0f92      	lsrs	r2, r2, #30
 8006936:	431a      	orrs	r2, r3
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006940:	0edb      	lsrs	r3, r3, #27
 8006942:	b2db      	uxtb	r3, r3
 8006944:	f003 0307 	and.w	r3, r3, #7
 8006948:	b2da      	uxtb	r2, r3
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006952:	0e1b      	lsrs	r3, r3, #24
 8006954:	b2db      	uxtb	r3, r3
 8006956:	f003 0307 	and.w	r3, r3, #7
 800695a:	b2da      	uxtb	r2, r3
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006964:	0d5b      	lsrs	r3, r3, #21
 8006966:	b2db      	uxtb	r3, r3
 8006968:	f003 0307 	and.w	r3, r3, #7
 800696c:	b2da      	uxtb	r2, r3
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006976:	0c9b      	lsrs	r3, r3, #18
 8006978:	b2db      	uxtb	r3, r3
 800697a:	f003 0307 	and.w	r3, r3, #7
 800697e:	b2da      	uxtb	r2, r3
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006988:	0bdb      	lsrs	r3, r3, #15
 800698a:	b2db      	uxtb	r3, r3
 800698c:	f003 0307 	and.w	r3, r3, #7
 8006990:	b2da      	uxtb	r2, r3
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	1c5a      	adds	r2, r3, #1
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	7e1b      	ldrb	r3, [r3, #24]
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	f003 0307 	and.w	r3, r3, #7
 80069aa:	3302      	adds	r3, #2
 80069ac:	2201      	movs	r2, #1
 80069ae:	fa02 f303 	lsl.w	r3, r2, r3
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80069b6:	fb03 f202 	mul.w	r2, r3, r2
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	7a1b      	ldrb	r3, [r3, #8]
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	f003 030f 	and.w	r3, r3, #15
 80069c8:	2201      	movs	r2, #1
 80069ca:	409a      	lsls	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80069d8:	0a52      	lsrs	r2, r2, #9
 80069da:	fb03 f202 	mul.w	r2, r3, r2
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069e8:	661a      	str	r2, [r3, #96]	; 0x60
 80069ea:	e031      	b.n	8006a50 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d11d      	bne.n	8006a30 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069f8:	041b      	lsls	r3, r3, #16
 80069fa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a02:	0c1b      	lsrs	r3, r3, #16
 8006a04:	431a      	orrs	r2, r3
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	029a      	lsls	r2, r3, #10
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a24:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	661a      	str	r2, [r3, #96]	; 0x60
 8006a2e:	e00f      	b.n	8006a50 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a58      	ldr	r2, [pc, #352]	; (8006b98 <HAL_SD_GetCardCSD+0x344>)
 8006a36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e09d      	b.n	8006b8c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a54:	0b9b      	lsrs	r3, r3, #14
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	f003 0301 	and.w	r3, r3, #1
 8006a5c:	b2da      	uxtb	r2, r3
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a66:	09db      	lsrs	r3, r3, #7
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a6e:	b2da      	uxtb	r2, r3
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a7e:	b2da      	uxtb	r2, r3
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a88:	0fdb      	lsrs	r3, r3, #31
 8006a8a:	b2da      	uxtb	r2, r3
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a94:	0f5b      	lsrs	r3, r3, #29
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	f003 0303 	and.w	r3, r3, #3
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa6:	0e9b      	lsrs	r3, r3, #26
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	f003 0307 	and.w	r3, r3, #7
 8006aae:	b2da      	uxtb	r2, r3
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab8:	0d9b      	lsrs	r3, r3, #22
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	f003 030f 	and.w	r3, r3, #15
 8006ac0:	b2da      	uxtb	r2, r3
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aca:	0d5b      	lsrs	r3, r3, #21
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	f003 0301 	and.w	r3, r3, #1
 8006ad2:	b2da      	uxtb	r2, r3
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae6:	0c1b      	lsrs	r3, r3, #16
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	f003 0301 	and.w	r3, r3, #1
 8006aee:	b2da      	uxtb	r2, r3
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006afa:	0bdb      	lsrs	r3, r3, #15
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	f003 0301 	and.w	r3, r3, #1
 8006b02:	b2da      	uxtb	r2, r3
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b0e:	0b9b      	lsrs	r3, r3, #14
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	f003 0301 	and.w	r3, r3, #1
 8006b16:	b2da      	uxtb	r2, r3
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b22:	0b5b      	lsrs	r3, r3, #13
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	f003 0301 	and.w	r3, r3, #1
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b36:	0b1b      	lsrs	r3, r3, #12
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	b2da      	uxtb	r2, r3
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b4a:	0a9b      	lsrs	r3, r3, #10
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	f003 0303 	and.w	r3, r3, #3
 8006b52:	b2da      	uxtb	r2, r3
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b5e:	0a1b      	lsrs	r3, r3, #8
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	f003 0303 	and.w	r3, r3, #3
 8006b66:	b2da      	uxtb	r2, r3
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b72:	085b      	lsrs	r3, r3, #1
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b7a:	b2da      	uxtb	r2, r3
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	2201      	movs	r2, #1
 8006b86:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr
 8006b98:	004005ff 	.word	0x004005ff

08006b9c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006c00:	f107 030c 	add.w	r3, r7, #12
 8006c04:	4619      	mov	r1, r3
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 fa7e 	bl	8007108 <SD_SendStatus>
 8006c0c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d005      	beq.n	8006c20 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	431a      	orrs	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	0a5b      	lsrs	r3, r3, #9
 8006c24:	f003 030f 	and.w	r3, r3, #15
 8006c28:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006c2a:	693b      	ldr	r3, [r7, #16]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3718      	adds	r7, #24
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c40:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c50:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006c52:	bf00      	nop
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b084      	sub	sp, #16
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c70:	2b82      	cmp	r3, #130	; 0x82
 8006c72:	d111      	bne.n	8006c98 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f001 f985 	bl	8007f88 <SDMMC_CmdStopTransfer>
 8006c7e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d008      	beq.n	8006c98 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	431a      	orrs	r2, r3
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f7ff fdd4 	bl	8006840 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f022 0208 	bic.w	r2, r2, #8
 8006ca6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f240 523a 	movw	r2, #1338	; 0x53a
 8006cb0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f003 f9f1 	bl	800a0a8 <HAL_SD_RxCpltCallback>
#endif
}
 8006cc6:	bf00      	nop
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
	...

08006cd0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cdc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f7fc f85a 	bl	8002d98 <HAL_DMA_GetError>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d03e      	beq.n	8006d68 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cf0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cf8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d002      	beq.n	8006d06 <SD_DMAError+0x36>
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d12d      	bne.n	8006d62 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a19      	ldr	r2, [pc, #100]	; (8006d70 <SD_DMAError+0xa0>)
 8006d0c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006d1c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d22:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006d2a:	6978      	ldr	r0, [r7, #20]
 8006d2c:	f7ff ff62 	bl	8006bf4 <HAL_SD_GetCardState>
 8006d30:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	2b06      	cmp	r3, #6
 8006d36:	d002      	beq.n	8006d3e <SD_DMAError+0x6e>
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	2b05      	cmp	r3, #5
 8006d3c:	d10a      	bne.n	8006d54 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4618      	mov	r0, r3
 8006d44:	f001 f920 	bl	8007f88 <SDMMC_CmdStopTransfer>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d4e:	431a      	orrs	r2, r3
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8006d62:	6978      	ldr	r0, [r7, #20]
 8006d64:	f7ff fd6c 	bl	8006840 <HAL_SD_ErrorCallback>
#endif
  }
}
 8006d68:	bf00      	nop
 8006d6a:	3718      	adds	r7, #24
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	004005ff 	.word	0x004005ff

08006d74 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d80:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f240 523a 	movw	r2, #1338	; 0x53a
 8006d8a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f7ff ff31 	bl	8006bf4 <HAL_SD_GetCardState>
 8006d92:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	2b06      	cmp	r3, #6
 8006da6:	d002      	beq.n	8006dae <SD_DMATxAbort+0x3a>
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	2b05      	cmp	r3, #5
 8006dac:	d10a      	bne.n	8006dc4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4618      	mov	r0, r3
 8006db4:	f001 f8e8 	bl	8007f88 <SDMMC_CmdStopTransfer>
 8006db8:	4602      	mov	r2, r0
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dbe:	431a      	orrs	r2, r3
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d103      	bne.n	8006dd4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f003 f957 	bl	800a080 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006dd2:	e002      	b.n	8006dda <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f7ff fd33 	bl	8006840 <HAL_SD_ErrorCallback>
}
 8006dda:	bf00      	nop
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b084      	sub	sp, #16
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dee:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f240 523a 	movw	r2, #1338	; 0x53a
 8006df8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f7ff fefa 	bl	8006bf4 <HAL_SD_GetCardState>
 8006e00:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	2b06      	cmp	r3, #6
 8006e14:	d002      	beq.n	8006e1c <SD_DMARxAbort+0x3a>
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	2b05      	cmp	r3, #5
 8006e1a:	d10a      	bne.n	8006e32 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4618      	mov	r0, r3
 8006e22:	f001 f8b1 	bl	8007f88 <SDMMC_CmdStopTransfer>
 8006e26:	4602      	mov	r2, r0
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d103      	bne.n	8006e42 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f003 f920 	bl	800a080 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006e40:	e002      	b.n	8006e48 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f7ff fcfc 	bl	8006840 <HAL_SD_ErrorCallback>
}
 8006e48:	bf00      	nop
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006e50:	b5b0      	push	{r4, r5, r7, lr}
 8006e52:	b094      	sub	sp, #80	; 0x50
 8006e54:	af04      	add	r7, sp, #16
 8006e56:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4618      	mov	r0, r3
 8006e62:	f000 ff63 	bl	8007d2c <SDMMC_GetPowerState>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d102      	bne.n	8006e72 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006e6c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006e70:	e0b8      	b.n	8006fe4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	d02f      	beq.n	8006eda <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f001 f94a 	bl	8008118 <SDMMC_CmdSendCID>
 8006e84:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d001      	beq.n	8006e90 <SD_InitCard+0x40>
    {
      return errorstate;
 8006e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e8e:	e0a9      	b.n	8006fe4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2100      	movs	r1, #0
 8006e96:	4618      	mov	r0, r3
 8006e98:	f000 ff8d 	bl	8007db6 <SDMMC_GetResponse>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2104      	movs	r1, #4
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f000 ff84 	bl	8007db6 <SDMMC_GetResponse>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2108      	movs	r1, #8
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f000 ff7b 	bl	8007db6 <SDMMC_GetResponse>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	210c      	movs	r1, #12
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f000 ff72 	bl	8007db6 <SDMMC_GetResponse>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ede:	2b03      	cmp	r3, #3
 8006ee0:	d00d      	beq.n	8006efe <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f107 020e 	add.w	r2, r7, #14
 8006eea:	4611      	mov	r1, r2
 8006eec:	4618      	mov	r0, r3
 8006eee:	f001 f950 	bl	8008192 <SDMMC_CmdSetRelAdd>
 8006ef2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d001      	beq.n	8006efe <SD_InitCard+0xae>
    {
      return errorstate;
 8006efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006efc:	e072      	b.n	8006fe4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	d036      	beq.n	8006f74 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006f06:	89fb      	ldrh	r3, [r7, #14]
 8006f08:	461a      	mov	r2, r3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f16:	041b      	lsls	r3, r3, #16
 8006f18:	4619      	mov	r1, r3
 8006f1a:	4610      	mov	r0, r2
 8006f1c:	f001 f91a 	bl	8008154 <SDMMC_CmdSendCSD>
 8006f20:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d001      	beq.n	8006f2c <SD_InitCard+0xdc>
    {
      return errorstate;
 8006f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f2a:	e05b      	b.n	8006fe4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2100      	movs	r1, #0
 8006f32:	4618      	mov	r0, r3
 8006f34:	f000 ff3f 	bl	8007db6 <SDMMC_GetResponse>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2104      	movs	r1, #4
 8006f44:	4618      	mov	r0, r3
 8006f46:	f000 ff36 	bl	8007db6 <SDMMC_GetResponse>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2108      	movs	r1, #8
 8006f56:	4618      	mov	r0, r3
 8006f58:	f000 ff2d 	bl	8007db6 <SDMMC_GetResponse>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	210c      	movs	r1, #12
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f000 ff24 	bl	8007db6 <SDMMC_GetResponse>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2104      	movs	r1, #4
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f000 ff1b 	bl	8007db6 <SDMMC_GetResponse>
 8006f80:	4603      	mov	r3, r0
 8006f82:	0d1a      	lsrs	r2, r3, #20
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006f88:	f107 0310 	add.w	r3, r7, #16
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f7ff fc60 	bl	8006854 <HAL_SD_GetCardCSD>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d002      	beq.n	8006fa0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006f9e:	e021      	b.n	8006fe4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6819      	ldr	r1, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fa8:	041b      	lsls	r3, r3, #16
 8006faa:	2200      	movs	r2, #0
 8006fac:	461c      	mov	r4, r3
 8006fae:	4615      	mov	r5, r2
 8006fb0:	4622      	mov	r2, r4
 8006fb2:	462b      	mov	r3, r5
 8006fb4:	4608      	mov	r0, r1
 8006fb6:	f001 f809 	bl	8007fcc <SDMMC_CmdSelDesel>
 8006fba:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d001      	beq.n	8006fc6 <SD_InitCard+0x176>
  {
    return errorstate;
 8006fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fc4:	e00e      	b.n	8006fe4 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681d      	ldr	r5, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	466c      	mov	r4, sp
 8006fce:	f103 0210 	add.w	r2, r3, #16
 8006fd2:	ca07      	ldmia	r2, {r0, r1, r2}
 8006fd4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006fd8:	3304      	adds	r3, #4
 8006fda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006fdc:	4628      	mov	r0, r5
 8006fde:	f000 fe4d 	bl	8007c7c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3740      	adds	r7, #64	; 0x40
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bdb0      	pop	{r4, r5, r7, pc}

08006fec <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b086      	sub	sp, #24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	617b      	str	r3, [r7, #20]
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4618      	mov	r0, r3
 8007006:	f001 f804 	bl	8008012 <SDMMC_CmdGoIdleState>
 800700a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d001      	beq.n	8007016 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	e072      	b.n	80070fc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4618      	mov	r0, r3
 800701c:	f001 f817 	bl	800804e <SDMMC_CmdOperCond>
 8007020:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00d      	beq.n	8007044 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4618      	mov	r0, r3
 8007034:	f000 ffed 	bl	8008012 <SDMMC_CmdGoIdleState>
 8007038:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d004      	beq.n	800704a <SD_PowerON+0x5e>
    {
      return errorstate;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	e05b      	b.n	80070fc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800704e:	2b01      	cmp	r3, #1
 8007050:	d137      	bne.n	80070c2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2100      	movs	r1, #0
 8007058:	4618      	mov	r0, r3
 800705a:	f001 f817 	bl	800808c <SDMMC_CmdAppCommand>
 800705e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d02d      	beq.n	80070c2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007066:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800706a:	e047      	b.n	80070fc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2100      	movs	r1, #0
 8007072:	4618      	mov	r0, r3
 8007074:	f001 f80a 	bl	800808c <SDMMC_CmdAppCommand>
 8007078:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d001      	beq.n	8007084 <SD_PowerON+0x98>
    {
      return errorstate;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	e03b      	b.n	80070fc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	491e      	ldr	r1, [pc, #120]	; (8007104 <SD_PowerON+0x118>)
 800708a:	4618      	mov	r0, r3
 800708c:	f001 f820 	bl	80080d0 <SDMMC_CmdAppOperCommand>
 8007090:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d002      	beq.n	800709e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007098:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800709c:	e02e      	b.n	80070fc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2100      	movs	r1, #0
 80070a4:	4618      	mov	r0, r3
 80070a6:	f000 fe86 	bl	8007db6 <SDMMC_GetResponse>
 80070aa:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	0fdb      	lsrs	r3, r3, #31
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d101      	bne.n	80070b8 <SD_PowerON+0xcc>
 80070b4:	2301      	movs	r3, #1
 80070b6:	e000      	b.n	80070ba <SD_PowerON+0xce>
 80070b8:	2300      	movs	r3, #0
 80070ba:	613b      	str	r3, [r7, #16]

    count++;
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	3301      	adds	r3, #1
 80070c0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d802      	bhi.n	80070d2 <SD_PowerON+0xe6>
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d0cc      	beq.n	800706c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80070d8:	4293      	cmp	r3, r2
 80070da:	d902      	bls.n	80070e2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80070dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80070e0:	e00c      	b.n	80070fc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d003      	beq.n	80070f4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	645a      	str	r2, [r3, #68]	; 0x44
 80070f2:	e002      	b.n	80070fa <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3718      	adds	r7, #24
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	c1100000 	.word	0xc1100000

08007108 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d102      	bne.n	800711e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007118:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800711c:	e018      	b.n	8007150 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007126:	041b      	lsls	r3, r3, #16
 8007128:	4619      	mov	r1, r3
 800712a:	4610      	mov	r0, r2
 800712c:	f001 f852 	bl	80081d4 <SDMMC_CmdSendStatus>
 8007130:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d001      	beq.n	800713c <SD_SendStatus+0x34>
  {
    return errorstate;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	e009      	b.n	8007150 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2100      	movs	r1, #0
 8007142:	4618      	mov	r0, r3
 8007144:	f000 fe37 	bl	8007db6 <SDMMC_GetResponse>
 8007148:	4602      	mov	r2, r0
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b086      	sub	sp, #24
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007164:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d03f      	beq.n	80071f2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007172:	2300      	movs	r3, #0
 8007174:	617b      	str	r3, [r7, #20]
 8007176:	e033      	b.n	80071e0 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4618      	mov	r0, r3
 800717e:	f000 fda9 	bl	8007cd4 <SDMMC_ReadFIFO>
 8007182:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	b2da      	uxtb	r2, r3
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	3301      	adds	r3, #1
 8007190:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	3b01      	subs	r3, #1
 8007196:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	0a1b      	lsrs	r3, r3, #8
 800719c:	b2da      	uxtb	r2, r3
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	3301      	adds	r3, #1
 80071a6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	3b01      	subs	r3, #1
 80071ac:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	0c1b      	lsrs	r3, r3, #16
 80071b2:	b2da      	uxtb	r2, r3
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	3301      	adds	r3, #1
 80071bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	3b01      	subs	r3, #1
 80071c2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	0e1b      	lsrs	r3, r3, #24
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	3301      	adds	r3, #1
 80071d2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	3b01      	subs	r3, #1
 80071d8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	3301      	adds	r3, #1
 80071de:	617b      	str	r3, [r7, #20]
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	2b07      	cmp	r3, #7
 80071e4:	d9c8      	bls.n	8007178 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	693a      	ldr	r2, [r7, #16]
 80071f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80071f2:	bf00      	nop
 80071f4:	3718      	adds	r7, #24
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b086      	sub	sp, #24
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d043      	beq.n	800729c <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007214:	2300      	movs	r3, #0
 8007216:	617b      	str	r3, [r7, #20]
 8007218:	e037      	b.n	800728a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	3301      	adds	r3, #1
 8007224:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	3b01      	subs	r3, #1
 800722a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	021a      	lsls	r2, r3, #8
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	4313      	orrs	r3, r2
 8007236:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	3301      	adds	r3, #1
 800723c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	3b01      	subs	r3, #1
 8007242:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	041a      	lsls	r2, r3, #16
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	4313      	orrs	r3, r2
 800724e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	3301      	adds	r3, #1
 8007254:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	3b01      	subs	r3, #1
 800725a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	061a      	lsls	r2, r3, #24
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	4313      	orrs	r3, r2
 8007266:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	3301      	adds	r3, #1
 800726c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	3b01      	subs	r3, #1
 8007272:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f107 0208 	add.w	r2, r7, #8
 800727c:	4611      	mov	r1, r2
 800727e:	4618      	mov	r0, r3
 8007280:	f000 fd35 	bl	8007cee <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	3301      	adds	r3, #1
 8007288:	617b      	str	r3, [r7, #20]
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	2b07      	cmp	r3, #7
 800728e:	d9c4      	bls.n	800721a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800729c:	bf00      	nop
 800729e:	3718      	adds	r7, #24
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d101      	bne.n	80072b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e040      	b.n	8007338 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d106      	bne.n	80072cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7fa f958 	bl	800157c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2224      	movs	r2, #36	; 0x24
 80072d0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f022 0201 	bic.w	r2, r2, #1
 80072e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f8b0 	bl	8007448 <UART_SetConfig>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d101      	bne.n	80072f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e022      	b.n	8007338 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d002      	beq.n	8007300 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 fb08 	bl	8007910 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	685a      	ldr	r2, [r3, #4]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800730e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689a      	ldr	r2, [r3, #8]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800731e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f042 0201 	orr.w	r2, r2, #1
 800732e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 fb8f 	bl	8007a54 <UART_CheckIdleState>
 8007336:	4603      	mov	r3, r0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3708      	adds	r7, #8
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b08a      	sub	sp, #40	; 0x28
 8007344:	af02      	add	r7, sp, #8
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	603b      	str	r3, [r7, #0]
 800734c:	4613      	mov	r3, r2
 800734e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007354:	2b20      	cmp	r3, #32
 8007356:	d171      	bne.n	800743c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d002      	beq.n	8007364 <HAL_UART_Transmit+0x24>
 800735e:	88fb      	ldrh	r3, [r7, #6]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d101      	bne.n	8007368 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e06a      	b.n	800743e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2221      	movs	r2, #33	; 0x21
 8007374:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007376:	f7fa fb0f 	bl	8001998 <HAL_GetTick>
 800737a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	88fa      	ldrh	r2, [r7, #6]
 8007380:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	88fa      	ldrh	r2, [r7, #6]
 8007388:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007394:	d108      	bne.n	80073a8 <HAL_UART_Transmit+0x68>
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d104      	bne.n	80073a8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800739e:	2300      	movs	r3, #0
 80073a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	61bb      	str	r3, [r7, #24]
 80073a6:	e003      	b.n	80073b0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073ac:	2300      	movs	r3, #0
 80073ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80073b0:	e02c      	b.n	800740c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	2200      	movs	r2, #0
 80073ba:	2180      	movs	r1, #128	; 0x80
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f000 fb96 	bl	8007aee <UART_WaitOnFlagUntilTimeout>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d001      	beq.n	80073cc <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80073c8:	2303      	movs	r3, #3
 80073ca:	e038      	b.n	800743e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10b      	bne.n	80073ea <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	881b      	ldrh	r3, [r3, #0]
 80073d6:	461a      	mov	r2, r3
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	3302      	adds	r3, #2
 80073e6:	61bb      	str	r3, [r7, #24]
 80073e8:	e007      	b.n	80073fa <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	781a      	ldrb	r2, [r3, #0]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	3301      	adds	r3, #1
 80073f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007400:	b29b      	uxth	r3, r3
 8007402:	3b01      	subs	r3, #1
 8007404:	b29a      	uxth	r2, r3
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007412:	b29b      	uxth	r3, r3
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1cc      	bne.n	80073b2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	2200      	movs	r2, #0
 8007420:	2140      	movs	r1, #64	; 0x40
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f000 fb63 	bl	8007aee <UART_WaitOnFlagUntilTimeout>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d001      	beq.n	8007432 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800742e:	2303      	movs	r3, #3
 8007430:	e005      	b.n	800743e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2220      	movs	r2, #32
 8007436:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007438:	2300      	movs	r3, #0
 800743a:	e000      	b.n	800743e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800743c:	2302      	movs	r3, #2
  }
}
 800743e:	4618      	mov	r0, r3
 8007440:	3720      	adds	r7, #32
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
	...

08007448 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b088      	sub	sp, #32
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007450:	2300      	movs	r3, #0
 8007452:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	689a      	ldr	r2, [r3, #8]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	431a      	orrs	r2, r3
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	695b      	ldr	r3, [r3, #20]
 8007462:	431a      	orrs	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	69db      	ldr	r3, [r3, #28]
 8007468:	4313      	orrs	r3, r2
 800746a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	4ba6      	ldr	r3, [pc, #664]	; (800770c <UART_SetConfig+0x2c4>)
 8007474:	4013      	ands	r3, r2
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	6812      	ldr	r2, [r2, #0]
 800747a:	6979      	ldr	r1, [r7, #20]
 800747c:	430b      	orrs	r3, r1
 800747e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	68da      	ldr	r2, [r3, #12]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	430a      	orrs	r2, r1
 8007494:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a1b      	ldr	r3, [r3, #32]
 80074a0:	697a      	ldr	r2, [r7, #20]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	697a      	ldr	r2, [r7, #20]
 80074b6:	430a      	orrs	r2, r1
 80074b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a94      	ldr	r2, [pc, #592]	; (8007710 <UART_SetConfig+0x2c8>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d120      	bne.n	8007506 <UART_SetConfig+0xbe>
 80074c4:	4b93      	ldr	r3, [pc, #588]	; (8007714 <UART_SetConfig+0x2cc>)
 80074c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ca:	f003 0303 	and.w	r3, r3, #3
 80074ce:	2b03      	cmp	r3, #3
 80074d0:	d816      	bhi.n	8007500 <UART_SetConfig+0xb8>
 80074d2:	a201      	add	r2, pc, #4	; (adr r2, 80074d8 <UART_SetConfig+0x90>)
 80074d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d8:	080074e9 	.word	0x080074e9
 80074dc:	080074f5 	.word	0x080074f5
 80074e0:	080074ef 	.word	0x080074ef
 80074e4:	080074fb 	.word	0x080074fb
 80074e8:	2301      	movs	r3, #1
 80074ea:	77fb      	strb	r3, [r7, #31]
 80074ec:	e150      	b.n	8007790 <UART_SetConfig+0x348>
 80074ee:	2302      	movs	r3, #2
 80074f0:	77fb      	strb	r3, [r7, #31]
 80074f2:	e14d      	b.n	8007790 <UART_SetConfig+0x348>
 80074f4:	2304      	movs	r3, #4
 80074f6:	77fb      	strb	r3, [r7, #31]
 80074f8:	e14a      	b.n	8007790 <UART_SetConfig+0x348>
 80074fa:	2308      	movs	r3, #8
 80074fc:	77fb      	strb	r3, [r7, #31]
 80074fe:	e147      	b.n	8007790 <UART_SetConfig+0x348>
 8007500:	2310      	movs	r3, #16
 8007502:	77fb      	strb	r3, [r7, #31]
 8007504:	e144      	b.n	8007790 <UART_SetConfig+0x348>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a83      	ldr	r2, [pc, #524]	; (8007718 <UART_SetConfig+0x2d0>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d132      	bne.n	8007576 <UART_SetConfig+0x12e>
 8007510:	4b80      	ldr	r3, [pc, #512]	; (8007714 <UART_SetConfig+0x2cc>)
 8007512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007516:	f003 030c 	and.w	r3, r3, #12
 800751a:	2b0c      	cmp	r3, #12
 800751c:	d828      	bhi.n	8007570 <UART_SetConfig+0x128>
 800751e:	a201      	add	r2, pc, #4	; (adr r2, 8007524 <UART_SetConfig+0xdc>)
 8007520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007524:	08007559 	.word	0x08007559
 8007528:	08007571 	.word	0x08007571
 800752c:	08007571 	.word	0x08007571
 8007530:	08007571 	.word	0x08007571
 8007534:	08007565 	.word	0x08007565
 8007538:	08007571 	.word	0x08007571
 800753c:	08007571 	.word	0x08007571
 8007540:	08007571 	.word	0x08007571
 8007544:	0800755f 	.word	0x0800755f
 8007548:	08007571 	.word	0x08007571
 800754c:	08007571 	.word	0x08007571
 8007550:	08007571 	.word	0x08007571
 8007554:	0800756b 	.word	0x0800756b
 8007558:	2300      	movs	r3, #0
 800755a:	77fb      	strb	r3, [r7, #31]
 800755c:	e118      	b.n	8007790 <UART_SetConfig+0x348>
 800755e:	2302      	movs	r3, #2
 8007560:	77fb      	strb	r3, [r7, #31]
 8007562:	e115      	b.n	8007790 <UART_SetConfig+0x348>
 8007564:	2304      	movs	r3, #4
 8007566:	77fb      	strb	r3, [r7, #31]
 8007568:	e112      	b.n	8007790 <UART_SetConfig+0x348>
 800756a:	2308      	movs	r3, #8
 800756c:	77fb      	strb	r3, [r7, #31]
 800756e:	e10f      	b.n	8007790 <UART_SetConfig+0x348>
 8007570:	2310      	movs	r3, #16
 8007572:	77fb      	strb	r3, [r7, #31]
 8007574:	e10c      	b.n	8007790 <UART_SetConfig+0x348>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a68      	ldr	r2, [pc, #416]	; (800771c <UART_SetConfig+0x2d4>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d120      	bne.n	80075c2 <UART_SetConfig+0x17a>
 8007580:	4b64      	ldr	r3, [pc, #400]	; (8007714 <UART_SetConfig+0x2cc>)
 8007582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007586:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800758a:	2b30      	cmp	r3, #48	; 0x30
 800758c:	d013      	beq.n	80075b6 <UART_SetConfig+0x16e>
 800758e:	2b30      	cmp	r3, #48	; 0x30
 8007590:	d814      	bhi.n	80075bc <UART_SetConfig+0x174>
 8007592:	2b20      	cmp	r3, #32
 8007594:	d009      	beq.n	80075aa <UART_SetConfig+0x162>
 8007596:	2b20      	cmp	r3, #32
 8007598:	d810      	bhi.n	80075bc <UART_SetConfig+0x174>
 800759a:	2b00      	cmp	r3, #0
 800759c:	d002      	beq.n	80075a4 <UART_SetConfig+0x15c>
 800759e:	2b10      	cmp	r3, #16
 80075a0:	d006      	beq.n	80075b0 <UART_SetConfig+0x168>
 80075a2:	e00b      	b.n	80075bc <UART_SetConfig+0x174>
 80075a4:	2300      	movs	r3, #0
 80075a6:	77fb      	strb	r3, [r7, #31]
 80075a8:	e0f2      	b.n	8007790 <UART_SetConfig+0x348>
 80075aa:	2302      	movs	r3, #2
 80075ac:	77fb      	strb	r3, [r7, #31]
 80075ae:	e0ef      	b.n	8007790 <UART_SetConfig+0x348>
 80075b0:	2304      	movs	r3, #4
 80075b2:	77fb      	strb	r3, [r7, #31]
 80075b4:	e0ec      	b.n	8007790 <UART_SetConfig+0x348>
 80075b6:	2308      	movs	r3, #8
 80075b8:	77fb      	strb	r3, [r7, #31]
 80075ba:	e0e9      	b.n	8007790 <UART_SetConfig+0x348>
 80075bc:	2310      	movs	r3, #16
 80075be:	77fb      	strb	r3, [r7, #31]
 80075c0:	e0e6      	b.n	8007790 <UART_SetConfig+0x348>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a56      	ldr	r2, [pc, #344]	; (8007720 <UART_SetConfig+0x2d8>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d120      	bne.n	800760e <UART_SetConfig+0x1c6>
 80075cc:	4b51      	ldr	r3, [pc, #324]	; (8007714 <UART_SetConfig+0x2cc>)
 80075ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80075d6:	2bc0      	cmp	r3, #192	; 0xc0
 80075d8:	d013      	beq.n	8007602 <UART_SetConfig+0x1ba>
 80075da:	2bc0      	cmp	r3, #192	; 0xc0
 80075dc:	d814      	bhi.n	8007608 <UART_SetConfig+0x1c0>
 80075de:	2b80      	cmp	r3, #128	; 0x80
 80075e0:	d009      	beq.n	80075f6 <UART_SetConfig+0x1ae>
 80075e2:	2b80      	cmp	r3, #128	; 0x80
 80075e4:	d810      	bhi.n	8007608 <UART_SetConfig+0x1c0>
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d002      	beq.n	80075f0 <UART_SetConfig+0x1a8>
 80075ea:	2b40      	cmp	r3, #64	; 0x40
 80075ec:	d006      	beq.n	80075fc <UART_SetConfig+0x1b4>
 80075ee:	e00b      	b.n	8007608 <UART_SetConfig+0x1c0>
 80075f0:	2300      	movs	r3, #0
 80075f2:	77fb      	strb	r3, [r7, #31]
 80075f4:	e0cc      	b.n	8007790 <UART_SetConfig+0x348>
 80075f6:	2302      	movs	r3, #2
 80075f8:	77fb      	strb	r3, [r7, #31]
 80075fa:	e0c9      	b.n	8007790 <UART_SetConfig+0x348>
 80075fc:	2304      	movs	r3, #4
 80075fe:	77fb      	strb	r3, [r7, #31]
 8007600:	e0c6      	b.n	8007790 <UART_SetConfig+0x348>
 8007602:	2308      	movs	r3, #8
 8007604:	77fb      	strb	r3, [r7, #31]
 8007606:	e0c3      	b.n	8007790 <UART_SetConfig+0x348>
 8007608:	2310      	movs	r3, #16
 800760a:	77fb      	strb	r3, [r7, #31]
 800760c:	e0c0      	b.n	8007790 <UART_SetConfig+0x348>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a44      	ldr	r2, [pc, #272]	; (8007724 <UART_SetConfig+0x2dc>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d125      	bne.n	8007664 <UART_SetConfig+0x21c>
 8007618:	4b3e      	ldr	r3, [pc, #248]	; (8007714 <UART_SetConfig+0x2cc>)
 800761a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800761e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007622:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007626:	d017      	beq.n	8007658 <UART_SetConfig+0x210>
 8007628:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800762c:	d817      	bhi.n	800765e <UART_SetConfig+0x216>
 800762e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007632:	d00b      	beq.n	800764c <UART_SetConfig+0x204>
 8007634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007638:	d811      	bhi.n	800765e <UART_SetConfig+0x216>
 800763a:	2b00      	cmp	r3, #0
 800763c:	d003      	beq.n	8007646 <UART_SetConfig+0x1fe>
 800763e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007642:	d006      	beq.n	8007652 <UART_SetConfig+0x20a>
 8007644:	e00b      	b.n	800765e <UART_SetConfig+0x216>
 8007646:	2300      	movs	r3, #0
 8007648:	77fb      	strb	r3, [r7, #31]
 800764a:	e0a1      	b.n	8007790 <UART_SetConfig+0x348>
 800764c:	2302      	movs	r3, #2
 800764e:	77fb      	strb	r3, [r7, #31]
 8007650:	e09e      	b.n	8007790 <UART_SetConfig+0x348>
 8007652:	2304      	movs	r3, #4
 8007654:	77fb      	strb	r3, [r7, #31]
 8007656:	e09b      	b.n	8007790 <UART_SetConfig+0x348>
 8007658:	2308      	movs	r3, #8
 800765a:	77fb      	strb	r3, [r7, #31]
 800765c:	e098      	b.n	8007790 <UART_SetConfig+0x348>
 800765e:	2310      	movs	r3, #16
 8007660:	77fb      	strb	r3, [r7, #31]
 8007662:	e095      	b.n	8007790 <UART_SetConfig+0x348>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a2f      	ldr	r2, [pc, #188]	; (8007728 <UART_SetConfig+0x2e0>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d125      	bne.n	80076ba <UART_SetConfig+0x272>
 800766e:	4b29      	ldr	r3, [pc, #164]	; (8007714 <UART_SetConfig+0x2cc>)
 8007670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007674:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007678:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800767c:	d017      	beq.n	80076ae <UART_SetConfig+0x266>
 800767e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007682:	d817      	bhi.n	80076b4 <UART_SetConfig+0x26c>
 8007684:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007688:	d00b      	beq.n	80076a2 <UART_SetConfig+0x25a>
 800768a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800768e:	d811      	bhi.n	80076b4 <UART_SetConfig+0x26c>
 8007690:	2b00      	cmp	r3, #0
 8007692:	d003      	beq.n	800769c <UART_SetConfig+0x254>
 8007694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007698:	d006      	beq.n	80076a8 <UART_SetConfig+0x260>
 800769a:	e00b      	b.n	80076b4 <UART_SetConfig+0x26c>
 800769c:	2301      	movs	r3, #1
 800769e:	77fb      	strb	r3, [r7, #31]
 80076a0:	e076      	b.n	8007790 <UART_SetConfig+0x348>
 80076a2:	2302      	movs	r3, #2
 80076a4:	77fb      	strb	r3, [r7, #31]
 80076a6:	e073      	b.n	8007790 <UART_SetConfig+0x348>
 80076a8:	2304      	movs	r3, #4
 80076aa:	77fb      	strb	r3, [r7, #31]
 80076ac:	e070      	b.n	8007790 <UART_SetConfig+0x348>
 80076ae:	2308      	movs	r3, #8
 80076b0:	77fb      	strb	r3, [r7, #31]
 80076b2:	e06d      	b.n	8007790 <UART_SetConfig+0x348>
 80076b4:	2310      	movs	r3, #16
 80076b6:	77fb      	strb	r3, [r7, #31]
 80076b8:	e06a      	b.n	8007790 <UART_SetConfig+0x348>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a1b      	ldr	r2, [pc, #108]	; (800772c <UART_SetConfig+0x2e4>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d138      	bne.n	8007736 <UART_SetConfig+0x2ee>
 80076c4:	4b13      	ldr	r3, [pc, #76]	; (8007714 <UART_SetConfig+0x2cc>)
 80076c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076ca:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80076ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80076d2:	d017      	beq.n	8007704 <UART_SetConfig+0x2bc>
 80076d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80076d8:	d82a      	bhi.n	8007730 <UART_SetConfig+0x2e8>
 80076da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076de:	d00b      	beq.n	80076f8 <UART_SetConfig+0x2b0>
 80076e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076e4:	d824      	bhi.n	8007730 <UART_SetConfig+0x2e8>
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d003      	beq.n	80076f2 <UART_SetConfig+0x2aa>
 80076ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076ee:	d006      	beq.n	80076fe <UART_SetConfig+0x2b6>
 80076f0:	e01e      	b.n	8007730 <UART_SetConfig+0x2e8>
 80076f2:	2300      	movs	r3, #0
 80076f4:	77fb      	strb	r3, [r7, #31]
 80076f6:	e04b      	b.n	8007790 <UART_SetConfig+0x348>
 80076f8:	2302      	movs	r3, #2
 80076fa:	77fb      	strb	r3, [r7, #31]
 80076fc:	e048      	b.n	8007790 <UART_SetConfig+0x348>
 80076fe:	2304      	movs	r3, #4
 8007700:	77fb      	strb	r3, [r7, #31]
 8007702:	e045      	b.n	8007790 <UART_SetConfig+0x348>
 8007704:	2308      	movs	r3, #8
 8007706:	77fb      	strb	r3, [r7, #31]
 8007708:	e042      	b.n	8007790 <UART_SetConfig+0x348>
 800770a:	bf00      	nop
 800770c:	efff69f3 	.word	0xefff69f3
 8007710:	40011000 	.word	0x40011000
 8007714:	40023800 	.word	0x40023800
 8007718:	40004400 	.word	0x40004400
 800771c:	40004800 	.word	0x40004800
 8007720:	40004c00 	.word	0x40004c00
 8007724:	40005000 	.word	0x40005000
 8007728:	40011400 	.word	0x40011400
 800772c:	40007800 	.word	0x40007800
 8007730:	2310      	movs	r3, #16
 8007732:	77fb      	strb	r3, [r7, #31]
 8007734:	e02c      	b.n	8007790 <UART_SetConfig+0x348>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a72      	ldr	r2, [pc, #456]	; (8007904 <UART_SetConfig+0x4bc>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d125      	bne.n	800778c <UART_SetConfig+0x344>
 8007740:	4b71      	ldr	r3, [pc, #452]	; (8007908 <UART_SetConfig+0x4c0>)
 8007742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007746:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800774a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800774e:	d017      	beq.n	8007780 <UART_SetConfig+0x338>
 8007750:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007754:	d817      	bhi.n	8007786 <UART_SetConfig+0x33e>
 8007756:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800775a:	d00b      	beq.n	8007774 <UART_SetConfig+0x32c>
 800775c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007760:	d811      	bhi.n	8007786 <UART_SetConfig+0x33e>
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <UART_SetConfig+0x326>
 8007766:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800776a:	d006      	beq.n	800777a <UART_SetConfig+0x332>
 800776c:	e00b      	b.n	8007786 <UART_SetConfig+0x33e>
 800776e:	2300      	movs	r3, #0
 8007770:	77fb      	strb	r3, [r7, #31]
 8007772:	e00d      	b.n	8007790 <UART_SetConfig+0x348>
 8007774:	2302      	movs	r3, #2
 8007776:	77fb      	strb	r3, [r7, #31]
 8007778:	e00a      	b.n	8007790 <UART_SetConfig+0x348>
 800777a:	2304      	movs	r3, #4
 800777c:	77fb      	strb	r3, [r7, #31]
 800777e:	e007      	b.n	8007790 <UART_SetConfig+0x348>
 8007780:	2308      	movs	r3, #8
 8007782:	77fb      	strb	r3, [r7, #31]
 8007784:	e004      	b.n	8007790 <UART_SetConfig+0x348>
 8007786:	2310      	movs	r3, #16
 8007788:	77fb      	strb	r3, [r7, #31]
 800778a:	e001      	b.n	8007790 <UART_SetConfig+0x348>
 800778c:	2310      	movs	r3, #16
 800778e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	69db      	ldr	r3, [r3, #28]
 8007794:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007798:	d15b      	bne.n	8007852 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800779a:	7ffb      	ldrb	r3, [r7, #31]
 800779c:	2b08      	cmp	r3, #8
 800779e:	d828      	bhi.n	80077f2 <UART_SetConfig+0x3aa>
 80077a0:	a201      	add	r2, pc, #4	; (adr r2, 80077a8 <UART_SetConfig+0x360>)
 80077a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a6:	bf00      	nop
 80077a8:	080077cd 	.word	0x080077cd
 80077ac:	080077d5 	.word	0x080077d5
 80077b0:	080077dd 	.word	0x080077dd
 80077b4:	080077f3 	.word	0x080077f3
 80077b8:	080077e3 	.word	0x080077e3
 80077bc:	080077f3 	.word	0x080077f3
 80077c0:	080077f3 	.word	0x080077f3
 80077c4:	080077f3 	.word	0x080077f3
 80077c8:	080077eb 	.word	0x080077eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077cc:	f7fd fd46 	bl	800525c <HAL_RCC_GetPCLK1Freq>
 80077d0:	61b8      	str	r0, [r7, #24]
        break;
 80077d2:	e013      	b.n	80077fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077d4:	f7fd fd56 	bl	8005284 <HAL_RCC_GetPCLK2Freq>
 80077d8:	61b8      	str	r0, [r7, #24]
        break;
 80077da:	e00f      	b.n	80077fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077dc:	4b4b      	ldr	r3, [pc, #300]	; (800790c <UART_SetConfig+0x4c4>)
 80077de:	61bb      	str	r3, [r7, #24]
        break;
 80077e0:	e00c      	b.n	80077fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077e2:	f7fd fc29 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 80077e6:	61b8      	str	r0, [r7, #24]
        break;
 80077e8:	e008      	b.n	80077fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077ee:	61bb      	str	r3, [r7, #24]
        break;
 80077f0:	e004      	b.n	80077fc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80077f2:	2300      	movs	r3, #0
 80077f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	77bb      	strb	r3, [r7, #30]
        break;
 80077fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d074      	beq.n	80078ec <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	005a      	lsls	r2, r3, #1
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	085b      	lsrs	r3, r3, #1
 800780c:	441a      	add	r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	fbb2 f3f3 	udiv	r3, r2, r3
 8007816:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	2b0f      	cmp	r3, #15
 800781c:	d916      	bls.n	800784c <UART_SetConfig+0x404>
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007824:	d212      	bcs.n	800784c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	b29b      	uxth	r3, r3
 800782a:	f023 030f 	bic.w	r3, r3, #15
 800782e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	085b      	lsrs	r3, r3, #1
 8007834:	b29b      	uxth	r3, r3
 8007836:	f003 0307 	and.w	r3, r3, #7
 800783a:	b29a      	uxth	r2, r3
 800783c:	89fb      	ldrh	r3, [r7, #14]
 800783e:	4313      	orrs	r3, r2
 8007840:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	89fa      	ldrh	r2, [r7, #14]
 8007848:	60da      	str	r2, [r3, #12]
 800784a:	e04f      	b.n	80078ec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800784c:	2301      	movs	r3, #1
 800784e:	77bb      	strb	r3, [r7, #30]
 8007850:	e04c      	b.n	80078ec <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007852:	7ffb      	ldrb	r3, [r7, #31]
 8007854:	2b08      	cmp	r3, #8
 8007856:	d828      	bhi.n	80078aa <UART_SetConfig+0x462>
 8007858:	a201      	add	r2, pc, #4	; (adr r2, 8007860 <UART_SetConfig+0x418>)
 800785a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800785e:	bf00      	nop
 8007860:	08007885 	.word	0x08007885
 8007864:	0800788d 	.word	0x0800788d
 8007868:	08007895 	.word	0x08007895
 800786c:	080078ab 	.word	0x080078ab
 8007870:	0800789b 	.word	0x0800789b
 8007874:	080078ab 	.word	0x080078ab
 8007878:	080078ab 	.word	0x080078ab
 800787c:	080078ab 	.word	0x080078ab
 8007880:	080078a3 	.word	0x080078a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007884:	f7fd fcea 	bl	800525c <HAL_RCC_GetPCLK1Freq>
 8007888:	61b8      	str	r0, [r7, #24]
        break;
 800788a:	e013      	b.n	80078b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800788c:	f7fd fcfa 	bl	8005284 <HAL_RCC_GetPCLK2Freq>
 8007890:	61b8      	str	r0, [r7, #24]
        break;
 8007892:	e00f      	b.n	80078b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007894:	4b1d      	ldr	r3, [pc, #116]	; (800790c <UART_SetConfig+0x4c4>)
 8007896:	61bb      	str	r3, [r7, #24]
        break;
 8007898:	e00c      	b.n	80078b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800789a:	f7fd fbcd 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 800789e:	61b8      	str	r0, [r7, #24]
        break;
 80078a0:	e008      	b.n	80078b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078a6:	61bb      	str	r3, [r7, #24]
        break;
 80078a8:	e004      	b.n	80078b4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80078aa:	2300      	movs	r3, #0
 80078ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	77bb      	strb	r3, [r7, #30]
        break;
 80078b2:	bf00      	nop
    }

    if (pclk != 0U)
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d018      	beq.n	80078ec <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	085a      	lsrs	r2, r3, #1
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	441a      	add	r2, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	2b0f      	cmp	r3, #15
 80078d2:	d909      	bls.n	80078e8 <UART_SetConfig+0x4a0>
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078da:	d205      	bcs.n	80078e8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	b29a      	uxth	r2, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	60da      	str	r2, [r3, #12]
 80078e6:	e001      	b.n	80078ec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80078f8:	7fbb      	ldrb	r3, [r7, #30]
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3720      	adds	r7, #32
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	40007c00 	.word	0x40007c00
 8007908:	40023800 	.word	0x40023800
 800790c:	00f42400 	.word	0x00f42400

08007910 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791c:	f003 0301 	and.w	r3, r3, #1
 8007920:	2b00      	cmp	r3, #0
 8007922:	d00a      	beq.n	800793a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	430a      	orrs	r2, r1
 8007938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793e:	f003 0302 	and.w	r3, r3, #2
 8007942:	2b00      	cmp	r3, #0
 8007944:	d00a      	beq.n	800795c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	430a      	orrs	r2, r1
 800795a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007960:	f003 0304 	and.w	r3, r3, #4
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00a      	beq.n	800797e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	430a      	orrs	r2, r1
 800797c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007982:	f003 0308 	and.w	r3, r3, #8
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00a      	beq.n	80079a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	430a      	orrs	r2, r1
 800799e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a4:	f003 0310 	and.w	r3, r3, #16
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00a      	beq.n	80079c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	430a      	orrs	r2, r1
 80079c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c6:	f003 0320 	and.w	r3, r3, #32
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00a      	beq.n	80079e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	430a      	orrs	r2, r1
 80079e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d01a      	beq.n	8007a26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	430a      	orrs	r2, r1
 8007a04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a0e:	d10a      	bne.n	8007a26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	430a      	orrs	r2, r1
 8007a24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00a      	beq.n	8007a48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	430a      	orrs	r2, r1
 8007a46:	605a      	str	r2, [r3, #4]
  }
}
 8007a48:	bf00      	nop
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b086      	sub	sp, #24
 8007a58:	af02      	add	r7, sp, #8
 8007a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a64:	f7f9 ff98 	bl	8001998 <HAL_GetTick>
 8007a68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 0308 	and.w	r3, r3, #8
 8007a74:	2b08      	cmp	r3, #8
 8007a76:	d10e      	bne.n	8007a96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a7c:	9300      	str	r3, [sp, #0]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f831 	bl	8007aee <UART_WaitOnFlagUntilTimeout>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d001      	beq.n	8007a96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a92:	2303      	movs	r3, #3
 8007a94:	e027      	b.n	8007ae6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 0304 	and.w	r3, r3, #4
 8007aa0:	2b04      	cmp	r3, #4
 8007aa2:	d10e      	bne.n	8007ac2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007aa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007aa8:	9300      	str	r3, [sp, #0]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 f81b 	bl	8007aee <UART_WaitOnFlagUntilTimeout>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d001      	beq.n	8007ac2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	e011      	b.n	8007ae6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2220      	movs	r2, #32
 8007ac6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2220      	movs	r2, #32
 8007acc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}

08007aee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007aee:	b580      	push	{r7, lr}
 8007af0:	b09c      	sub	sp, #112	; 0x70
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	60f8      	str	r0, [r7, #12]
 8007af6:	60b9      	str	r1, [r7, #8]
 8007af8:	603b      	str	r3, [r7, #0]
 8007afa:	4613      	mov	r3, r2
 8007afc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007afe:	e0a7      	b.n	8007c50 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b06:	f000 80a3 	beq.w	8007c50 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b0a:	f7f9 ff45 	bl	8001998 <HAL_GetTick>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	1ad3      	subs	r3, r2, r3
 8007b14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d302      	bcc.n	8007b20 <UART_WaitOnFlagUntilTimeout+0x32>
 8007b1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d13f      	bne.n	8007ba0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b28:	e853 3f00 	ldrex	r3, [r3]
 8007b2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b34:	667b      	str	r3, [r7, #100]	; 0x64
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b40:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007b46:	e841 2300 	strex	r3, r2, [r1]
 8007b4a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007b4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1e6      	bne.n	8007b20 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	3308      	adds	r3, #8
 8007b58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b5c:	e853 3f00 	ldrex	r3, [r3]
 8007b60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b64:	f023 0301 	bic.w	r3, r3, #1
 8007b68:	663b      	str	r3, [r7, #96]	; 0x60
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	3308      	adds	r3, #8
 8007b70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007b72:	64ba      	str	r2, [r7, #72]	; 0x48
 8007b74:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b7a:	e841 2300 	strex	r3, r2, [r1]
 8007b7e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007b80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1e5      	bne.n	8007b52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2220      	movs	r2, #32
 8007b8a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2220      	movs	r2, #32
 8007b90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007b9c:	2303      	movs	r3, #3
 8007b9e:	e068      	b.n	8007c72 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 0304 	and.w	r3, r3, #4
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d050      	beq.n	8007c50 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	69db      	ldr	r3, [r3, #28]
 8007bb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bbc:	d148      	bne.n	8007c50 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007bc6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd0:	e853 3f00 	ldrex	r3, [r3]
 8007bd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007bdc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	461a      	mov	r2, r3
 8007be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007be6:	637b      	str	r3, [r7, #52]	; 0x34
 8007be8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007bec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bee:	e841 2300 	strex	r3, r2, [r1]
 8007bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d1e6      	bne.n	8007bc8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	3308      	adds	r3, #8
 8007c00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	e853 3f00 	ldrex	r3, [r3]
 8007c08:	613b      	str	r3, [r7, #16]
   return(result);
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	f023 0301 	bic.w	r3, r3, #1
 8007c10:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	3308      	adds	r3, #8
 8007c18:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007c1a:	623a      	str	r2, [r7, #32]
 8007c1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c1e:	69f9      	ldr	r1, [r7, #28]
 8007c20:	6a3a      	ldr	r2, [r7, #32]
 8007c22:	e841 2300 	strex	r3, r2, [r1]
 8007c26:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d1e5      	bne.n	8007bfa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2220      	movs	r2, #32
 8007c32:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2220      	movs	r2, #32
 8007c38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2220      	movs	r2, #32
 8007c40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	e010      	b.n	8007c72 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	69da      	ldr	r2, [r3, #28]
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	4013      	ands	r3, r2
 8007c5a:	68ba      	ldr	r2, [r7, #8]
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	bf0c      	ite	eq
 8007c60:	2301      	moveq	r3, #1
 8007c62:	2300      	movne	r3, #0
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	461a      	mov	r2, r3
 8007c68:	79fb      	ldrb	r3, [r7, #7]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	f43f af48 	beq.w	8007b00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3770      	adds	r7, #112	; 0x70
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
	...

08007c7c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007c7c:	b084      	sub	sp, #16
 8007c7e:	b480      	push	{r7}
 8007c80:	b085      	sub	sp, #20
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
 8007c86:	f107 001c 	add.w	r0, r7, #28
 8007c8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007c92:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007c94:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007c96:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007c9a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007c9e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007ca2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007ca6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	685a      	ldr	r2, [r3, #4]
 8007cb2:	4b07      	ldr	r3, [pc, #28]	; (8007cd0 <SDMMC_Init+0x54>)
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	431a      	orrs	r2, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3714      	adds	r7, #20
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	b004      	add	sp, #16
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop
 8007cd0:	ffff8100 	.word	0xffff8100

08007cd4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	370c      	adds	r7, #12
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr

08007cee <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8007cee:	b480      	push	{r7}
 8007cf0:	b083      	sub	sp, #12
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
 8007cf6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	370c      	adds	r7, #12
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2203      	movs	r2, #3
 8007d1c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007d1e:	2300      	movs	r3, #0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 0303 	and.w	r3, r3, #3
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007d52:	2300      	movs	r3, #0
 8007d54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007d66:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007d6c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007d72:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	68da      	ldr	r2, [r3, #12]
 8007d7e:	4b06      	ldr	r3, [pc, #24]	; (8007d98 <SDMMC_SendCommand+0x50>)
 8007d80:	4013      	ands	r3, r2
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	431a      	orrs	r2, r3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3714      	adds	r7, #20
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr
 8007d98:	fffff000 	.word	0xfffff000

08007d9c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	b2db      	uxtb	r3, r3
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	370c      	adds	r7, #12
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b085      	sub	sp, #20
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
 8007dbe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	3314      	adds	r3, #20
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	4413      	add	r3, r2
 8007dca:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
}  
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3714      	adds	r7, #20
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007de6:	2300      	movs	r3, #0
 8007de8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	685a      	ldr	r2, [r3, #4]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007e02:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007e08:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007e0e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	431a      	orrs	r2, r3
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007e26:	2300      	movs	r3, #0

}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3714      	adds	r7, #20
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b088      	sub	sp, #32
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007e42:	2310      	movs	r3, #16
 8007e44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007e46:	2340      	movs	r3, #64	; 0x40
 8007e48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007e4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007e54:	f107 0308 	add.w	r3, r7, #8
 8007e58:	4619      	mov	r1, r3
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f7ff ff74 	bl	8007d48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e64:	2110      	movs	r1, #16
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 f9d6 	bl	8008218 <SDMMC_GetCmdResp1>
 8007e6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e6e:	69fb      	ldr	r3, [r7, #28]
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3720      	adds	r7, #32
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b088      	sub	sp, #32
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007e86:	2311      	movs	r3, #17
 8007e88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007e8a:	2340      	movs	r3, #64	; 0x40
 8007e8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007e92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007e98:	f107 0308 	add.w	r3, r7, #8
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f7ff ff52 	bl	8007d48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ea8:	2111      	movs	r1, #17
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f9b4 	bl	8008218 <SDMMC_GetCmdResp1>
 8007eb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007eb2:	69fb      	ldr	r3, [r7, #28]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3720      	adds	r7, #32
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b088      	sub	sp, #32
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007eca:	2312      	movs	r3, #18
 8007ecc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007ece:	2340      	movs	r3, #64	; 0x40
 8007ed0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007eda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007edc:	f107 0308 	add.w	r3, r7, #8
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f7ff ff30 	bl	8007d48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007eec:	2112      	movs	r1, #18
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 f992 	bl	8008218 <SDMMC_GetCmdResp1>
 8007ef4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ef6:	69fb      	ldr	r3, [r7, #28]
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3720      	adds	r7, #32
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b088      	sub	sp, #32
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007f0e:	2318      	movs	r3, #24
 8007f10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f12:	2340      	movs	r3, #64	; 0x40
 8007f14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007f16:	2300      	movs	r3, #0
 8007f18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f20:	f107 0308 	add.w	r3, r7, #8
 8007f24:	4619      	mov	r1, r3
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f7ff ff0e 	bl	8007d48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f30:	2118      	movs	r1, #24
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f970 	bl	8008218 <SDMMC_GetCmdResp1>
 8007f38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f3a:	69fb      	ldr	r3, [r7, #28]
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3720      	adds	r7, #32
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b088      	sub	sp, #32
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007f52:	2319      	movs	r3, #25
 8007f54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f56:	2340      	movs	r3, #64	; 0x40
 8007f58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f64:	f107 0308 	add.w	r3, r7, #8
 8007f68:	4619      	mov	r1, r3
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f7ff feec 	bl	8007d48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f74:	2119      	movs	r1, #25
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 f94e 	bl	8008218 <SDMMC_GetCmdResp1>
 8007f7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f7e:	69fb      	ldr	r3, [r7, #28]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3720      	adds	r7, #32
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b088      	sub	sp, #32
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007f90:	2300      	movs	r3, #0
 8007f92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007f94:	230c      	movs	r3, #12
 8007f96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f98:	2340      	movs	r3, #64	; 0x40
 8007f9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fa4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007fa6:	f107 0308 	add.w	r3, r7, #8
 8007faa:	4619      	mov	r1, r3
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f7ff fecb 	bl	8007d48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8007fb2:	4a05      	ldr	r2, [pc, #20]	; (8007fc8 <SDMMC_CmdStopTransfer+0x40>)
 8007fb4:	210c      	movs	r1, #12
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f92e 	bl	8008218 <SDMMC_GetCmdResp1>
 8007fbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007fbe:	69fb      	ldr	r3, [r7, #28]
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3720      	adds	r7, #32
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	05f5e100 	.word	0x05f5e100

08007fcc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b08a      	sub	sp, #40	; 0x28
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007fdc:	2307      	movs	r3, #7
 8007fde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007fe0:	2340      	movs	r3, #64	; 0x40
 8007fe2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fec:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007fee:	f107 0310 	add.w	r3, r7, #16
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f7ff fea7 	bl	8007d48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8007ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ffe:	2107      	movs	r1, #7
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f000 f909 	bl	8008218 <SDMMC_GetCmdResp1>
 8008006:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800800a:	4618      	mov	r0, r3
 800800c:	3728      	adds	r7, #40	; 0x28
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b088      	sub	sp, #32
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800801a:	2300      	movs	r3, #0
 800801c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800801e:	2300      	movs	r3, #0
 8008020:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008022:	2300      	movs	r3, #0
 8008024:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008026:	2300      	movs	r3, #0
 8008028:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800802a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800802e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008030:	f107 0308 	add.w	r3, r7, #8
 8008034:	4619      	mov	r1, r3
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f7ff fe86 	bl	8007d48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 fb23 	bl	8008688 <SDMMC_GetCmdError>
 8008042:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008044:	69fb      	ldr	r3, [r7, #28]
}
 8008046:	4618      	mov	r0, r3
 8008048:	3720      	adds	r7, #32
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800804e:	b580      	push	{r7, lr}
 8008050:	b088      	sub	sp, #32
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008056:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800805a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800805c:	2308      	movs	r3, #8
 800805e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008060:	2340      	movs	r3, #64	; 0x40
 8008062:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008064:	2300      	movs	r3, #0
 8008066:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800806c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800806e:	f107 0308 	add.w	r3, r7, #8
 8008072:	4619      	mov	r1, r3
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f7ff fe67 	bl	8007d48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 fab6 	bl	80085ec <SDMMC_GetCmdResp7>
 8008080:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008082:	69fb      	ldr	r3, [r7, #28]
}
 8008084:	4618      	mov	r0, r3
 8008086:	3720      	adds	r7, #32
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b088      	sub	sp, #32
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800809a:	2337      	movs	r3, #55	; 0x37
 800809c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800809e:	2340      	movs	r3, #64	; 0x40
 80080a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80080a2:	2300      	movs	r3, #0
 80080a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80080a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80080ac:	f107 0308 	add.w	r3, r7, #8
 80080b0:	4619      	mov	r1, r3
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f7ff fe48 	bl	8007d48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80080b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80080bc:	2137      	movs	r1, #55	; 0x37
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f8aa 	bl	8008218 <SDMMC_GetCmdResp1>
 80080c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080c6:	69fb      	ldr	r3, [r7, #28]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3720      	adds	r7, #32
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b088      	sub	sp, #32
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80080da:	683a      	ldr	r2, [r7, #0]
 80080dc:	4b0d      	ldr	r3, [pc, #52]	; (8008114 <SDMMC_CmdAppOperCommand+0x44>)
 80080de:	4313      	orrs	r3, r2
 80080e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80080e2:	2329      	movs	r3, #41	; 0x29
 80080e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80080e6:	2340      	movs	r3, #64	; 0x40
 80080e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80080ea:	2300      	movs	r3, #0
 80080ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80080ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80080f4:	f107 0308 	add.w	r3, r7, #8
 80080f8:	4619      	mov	r1, r3
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f7ff fe24 	bl	8007d48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 f9bf 	bl	8008484 <SDMMC_GetCmdResp3>
 8008106:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008108:	69fb      	ldr	r3, [r7, #28]
}
 800810a:	4618      	mov	r0, r3
 800810c:	3720      	adds	r7, #32
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	80100000 	.word	0x80100000

08008118 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b088      	sub	sp, #32
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008120:	2300      	movs	r3, #0
 8008122:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008124:	2302      	movs	r3, #2
 8008126:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008128:	23c0      	movs	r3, #192	; 0xc0
 800812a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800812c:	2300      	movs	r3, #0
 800812e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008130:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008134:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008136:	f107 0308 	add.w	r3, r7, #8
 800813a:	4619      	mov	r1, r3
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f7ff fe03 	bl	8007d48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 f956 	bl	80083f4 <SDMMC_GetCmdResp2>
 8008148:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800814a:	69fb      	ldr	r3, [r7, #28]
}
 800814c:	4618      	mov	r0, r3
 800814e:	3720      	adds	r7, #32
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b088      	sub	sp, #32
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008162:	2309      	movs	r3, #9
 8008164:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008166:	23c0      	movs	r3, #192	; 0xc0
 8008168:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800816a:	2300      	movs	r3, #0
 800816c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800816e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008172:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008174:	f107 0308 	add.w	r3, r7, #8
 8008178:	4619      	mov	r1, r3
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f7ff fde4 	bl	8007d48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f937 	bl	80083f4 <SDMMC_GetCmdResp2>
 8008186:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008188:	69fb      	ldr	r3, [r7, #28]
}
 800818a:	4618      	mov	r0, r3
 800818c:	3720      	adds	r7, #32
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b088      	sub	sp, #32
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
 800819a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800819c:	2300      	movs	r3, #0
 800819e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80081a0:	2303      	movs	r3, #3
 80081a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80081a4:	2340      	movs	r3, #64	; 0x40
 80081a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80081a8:	2300      	movs	r3, #0
 80081aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80081ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80081b2:	f107 0308 	add.w	r3, r7, #8
 80081b6:	4619      	mov	r1, r3
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f7ff fdc5 	bl	8007d48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80081be:	683a      	ldr	r2, [r7, #0]
 80081c0:	2103      	movs	r1, #3
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f99c 	bl	8008500 <SDMMC_GetCmdResp6>
 80081c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081ca:	69fb      	ldr	r3, [r7, #28]
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3720      	adds	r7, #32
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b088      	sub	sp, #32
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80081e2:	230d      	movs	r3, #13
 80081e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80081e6:	2340      	movs	r3, #64	; 0x40
 80081e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80081ea:	2300      	movs	r3, #0
 80081ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80081ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80081f4:	f107 0308 	add.w	r3, r7, #8
 80081f8:	4619      	mov	r1, r3
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f7ff fda4 	bl	8007d48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008200:	f241 3288 	movw	r2, #5000	; 0x1388
 8008204:	210d      	movs	r1, #13
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 f806 	bl	8008218 <SDMMC_GetCmdResp1>
 800820c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800820e:	69fb      	ldr	r3, [r7, #28]
}
 8008210:	4618      	mov	r0, r3
 8008212:	3720      	adds	r7, #32
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b088      	sub	sp, #32
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	460b      	mov	r3, r1
 8008222:	607a      	str	r2, [r7, #4]
 8008224:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008226:	4b70      	ldr	r3, [pc, #448]	; (80083e8 <SDMMC_GetCmdResp1+0x1d0>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a70      	ldr	r2, [pc, #448]	; (80083ec <SDMMC_GetCmdResp1+0x1d4>)
 800822c:	fba2 2303 	umull	r2, r3, r2, r3
 8008230:	0a5a      	lsrs	r2, r3, #9
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	fb02 f303 	mul.w	r3, r2, r3
 8008238:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	1e5a      	subs	r2, r3, #1
 800823e:	61fa      	str	r2, [r7, #28]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d102      	bne.n	800824a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008244:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008248:	e0c9      	b.n	80083de <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800824e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008256:	2b00      	cmp	r3, #0
 8008258:	d0ef      	beq.n	800823a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800825a:	69bb      	ldr	r3, [r7, #24]
 800825c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008260:	2b00      	cmp	r3, #0
 8008262:	d1ea      	bne.n	800823a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008268:	f003 0304 	and.w	r3, r3, #4
 800826c:	2b00      	cmp	r3, #0
 800826e:	d004      	beq.n	800827a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2204      	movs	r2, #4
 8008274:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008276:	2304      	movs	r3, #4
 8008278:	e0b1      	b.n	80083de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800827e:	f003 0301 	and.w	r3, r3, #1
 8008282:	2b00      	cmp	r3, #0
 8008284:	d004      	beq.n	8008290 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2201      	movs	r2, #1
 800828a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800828c:	2301      	movs	r3, #1
 800828e:	e0a6      	b.n	80083de <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	22c5      	movs	r2, #197	; 0xc5
 8008294:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	f7ff fd80 	bl	8007d9c <SDMMC_GetCommandResponse>
 800829c:	4603      	mov	r3, r0
 800829e:	461a      	mov	r2, r3
 80082a0:	7afb      	ldrb	r3, [r7, #11]
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d001      	beq.n	80082aa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e099      	b.n	80083de <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80082aa:	2100      	movs	r1, #0
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f7ff fd82 	bl	8007db6 <SDMMC_GetResponse>
 80082b2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80082b4:	697a      	ldr	r2, [r7, #20]
 80082b6:	4b4e      	ldr	r3, [pc, #312]	; (80083f0 <SDMMC_GetCmdResp1+0x1d8>)
 80082b8:	4013      	ands	r3, r2
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d101      	bne.n	80082c2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80082be:	2300      	movs	r3, #0
 80082c0:	e08d      	b.n	80083de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	da02      	bge.n	80082ce <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80082c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80082cc:	e087      	b.n	80083de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d001      	beq.n	80082dc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80082d8:	2340      	movs	r3, #64	; 0x40
 80082da:	e080      	b.n	80083de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d001      	beq.n	80082ea <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80082e6:	2380      	movs	r3, #128	; 0x80
 80082e8:	e079      	b.n	80083de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d002      	beq.n	80082fa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80082f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082f8:	e071      	b.n	80083de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008300:	2b00      	cmp	r3, #0
 8008302:	d002      	beq.n	800830a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008304:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008308:	e069      	b.n	80083de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008310:	2b00      	cmp	r3, #0
 8008312:	d002      	beq.n	800831a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008314:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008318:	e061      	b.n	80083de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008320:	2b00      	cmp	r3, #0
 8008322:	d002      	beq.n	800832a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008324:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008328:	e059      	b.n	80083de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008330:	2b00      	cmp	r3, #0
 8008332:	d002      	beq.n	800833a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008338:	e051      	b.n	80083de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008340:	2b00      	cmp	r3, #0
 8008342:	d002      	beq.n	800834a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008344:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008348:	e049      	b.n	80083de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d002      	beq.n	800835a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008354:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008358:	e041      	b.n	80083de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008360:	2b00      	cmp	r3, #0
 8008362:	d002      	beq.n	800836a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008364:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008368:	e039      	b.n	80083de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008370:	2b00      	cmp	r3, #0
 8008372:	d002      	beq.n	800837a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008374:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008378:	e031      	b.n	80083de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008380:	2b00      	cmp	r3, #0
 8008382:	d002      	beq.n	800838a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008384:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008388:	e029      	b.n	80083de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008390:	2b00      	cmp	r3, #0
 8008392:	d002      	beq.n	800839a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008394:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008398:	e021      	b.n	80083de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d002      	beq.n	80083aa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80083a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80083a8:	e019      	b.n	80083de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d002      	beq.n	80083ba <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80083b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80083b8:	e011      	b.n	80083de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d002      	beq.n	80083ca <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80083c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80083c8:	e009      	b.n	80083de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	f003 0308 	and.w	r3, r3, #8
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d002      	beq.n	80083da <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80083d4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80083d8:	e001      	b.n	80083de <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80083da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3720      	adds	r7, #32
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	20000000 	.word	0x20000000
 80083ec:	10624dd3 	.word	0x10624dd3
 80083f0:	fdffe008 	.word	0xfdffe008

080083f4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80083fc:	4b1f      	ldr	r3, [pc, #124]	; (800847c <SDMMC_GetCmdResp2+0x88>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a1f      	ldr	r2, [pc, #124]	; (8008480 <SDMMC_GetCmdResp2+0x8c>)
 8008402:	fba2 2303 	umull	r2, r3, r2, r3
 8008406:	0a5b      	lsrs	r3, r3, #9
 8008408:	f241 3288 	movw	r2, #5000	; 0x1388
 800840c:	fb02 f303 	mul.w	r3, r2, r3
 8008410:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	1e5a      	subs	r2, r3, #1
 8008416:	60fa      	str	r2, [r7, #12]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d102      	bne.n	8008422 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800841c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008420:	e026      	b.n	8008470 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008426:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800842e:	2b00      	cmp	r3, #0
 8008430:	d0ef      	beq.n	8008412 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008438:	2b00      	cmp	r3, #0
 800843a:	d1ea      	bne.n	8008412 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008440:	f003 0304 	and.w	r3, r3, #4
 8008444:	2b00      	cmp	r3, #0
 8008446:	d004      	beq.n	8008452 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2204      	movs	r2, #4
 800844c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800844e:	2304      	movs	r3, #4
 8008450:	e00e      	b.n	8008470 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008456:	f003 0301 	and.w	r3, r3, #1
 800845a:	2b00      	cmp	r3, #0
 800845c:	d004      	beq.n	8008468 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2201      	movs	r2, #1
 8008462:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008464:	2301      	movs	r3, #1
 8008466:	e003      	b.n	8008470 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	22c5      	movs	r2, #197	; 0xc5
 800846c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	3714      	adds	r7, #20
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr
 800847c:	20000000 	.word	0x20000000
 8008480:	10624dd3 	.word	0x10624dd3

08008484 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008484:	b480      	push	{r7}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800848c:	4b1a      	ldr	r3, [pc, #104]	; (80084f8 <SDMMC_GetCmdResp3+0x74>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a1a      	ldr	r2, [pc, #104]	; (80084fc <SDMMC_GetCmdResp3+0x78>)
 8008492:	fba2 2303 	umull	r2, r3, r2, r3
 8008496:	0a5b      	lsrs	r3, r3, #9
 8008498:	f241 3288 	movw	r2, #5000	; 0x1388
 800849c:	fb02 f303 	mul.w	r3, r2, r3
 80084a0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	1e5a      	subs	r2, r3, #1
 80084a6:	60fa      	str	r2, [r7, #12]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d102      	bne.n	80084b2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80084ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80084b0:	e01b      	b.n	80084ea <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084b6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d0ef      	beq.n	80084a2 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1ea      	bne.n	80084a2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084d0:	f003 0304 	and.w	r3, r3, #4
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d004      	beq.n	80084e2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2204      	movs	r2, #4
 80084dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80084de:	2304      	movs	r3, #4
 80084e0:	e003      	b.n	80084ea <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	22c5      	movs	r2, #197	; 0xc5
 80084e6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3714      	adds	r7, #20
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop
 80084f8:	20000000 	.word	0x20000000
 80084fc:	10624dd3 	.word	0x10624dd3

08008500 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b088      	sub	sp, #32
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	460b      	mov	r3, r1
 800850a:	607a      	str	r2, [r7, #4]
 800850c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800850e:	4b35      	ldr	r3, [pc, #212]	; (80085e4 <SDMMC_GetCmdResp6+0xe4>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a35      	ldr	r2, [pc, #212]	; (80085e8 <SDMMC_GetCmdResp6+0xe8>)
 8008514:	fba2 2303 	umull	r2, r3, r2, r3
 8008518:	0a5b      	lsrs	r3, r3, #9
 800851a:	f241 3288 	movw	r2, #5000	; 0x1388
 800851e:	fb02 f303 	mul.w	r3, r2, r3
 8008522:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	1e5a      	subs	r2, r3, #1
 8008528:	61fa      	str	r2, [r7, #28]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d102      	bne.n	8008534 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800852e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008532:	e052      	b.n	80085da <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008538:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800853a:	69bb      	ldr	r3, [r7, #24]
 800853c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008540:	2b00      	cmp	r3, #0
 8008542:	d0ef      	beq.n	8008524 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008544:	69bb      	ldr	r3, [r7, #24]
 8008546:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800854a:	2b00      	cmp	r3, #0
 800854c:	d1ea      	bne.n	8008524 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008552:	f003 0304 	and.w	r3, r3, #4
 8008556:	2b00      	cmp	r3, #0
 8008558:	d004      	beq.n	8008564 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2204      	movs	r2, #4
 800855e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008560:	2304      	movs	r3, #4
 8008562:	e03a      	b.n	80085da <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008568:	f003 0301 	and.w	r3, r3, #1
 800856c:	2b00      	cmp	r3, #0
 800856e:	d004      	beq.n	800857a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2201      	movs	r2, #1
 8008574:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008576:	2301      	movs	r3, #1
 8008578:	e02f      	b.n	80085da <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800857a:	68f8      	ldr	r0, [r7, #12]
 800857c:	f7ff fc0e 	bl	8007d9c <SDMMC_GetCommandResponse>
 8008580:	4603      	mov	r3, r0
 8008582:	461a      	mov	r2, r3
 8008584:	7afb      	ldrb	r3, [r7, #11]
 8008586:	4293      	cmp	r3, r2
 8008588:	d001      	beq.n	800858e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800858a:	2301      	movs	r3, #1
 800858c:	e025      	b.n	80085da <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	22c5      	movs	r2, #197	; 0xc5
 8008592:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008594:	2100      	movs	r1, #0
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	f7ff fc0d 	bl	8007db6 <SDMMC_GetResponse>
 800859c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d106      	bne.n	80085b6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	0c1b      	lsrs	r3, r3, #16
 80085ac:	b29a      	uxth	r2, r3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80085b2:	2300      	movs	r3, #0
 80085b4:	e011      	b.n	80085da <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d002      	beq.n	80085c6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80085c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80085c4:	e009      	b.n	80085da <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d002      	beq.n	80085d6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80085d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085d4:	e001      	b.n	80085da <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80085d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3720      	adds	r7, #32
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	20000000 	.word	0x20000000
 80085e8:	10624dd3 	.word	0x10624dd3

080085ec <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b085      	sub	sp, #20
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80085f4:	4b22      	ldr	r3, [pc, #136]	; (8008680 <SDMMC_GetCmdResp7+0x94>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a22      	ldr	r2, [pc, #136]	; (8008684 <SDMMC_GetCmdResp7+0x98>)
 80085fa:	fba2 2303 	umull	r2, r3, r2, r3
 80085fe:	0a5b      	lsrs	r3, r3, #9
 8008600:	f241 3288 	movw	r2, #5000	; 0x1388
 8008604:	fb02 f303 	mul.w	r3, r2, r3
 8008608:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	1e5a      	subs	r2, r3, #1
 800860e:	60fa      	str	r2, [r7, #12]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d102      	bne.n	800861a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008614:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008618:	e02c      	b.n	8008674 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800861e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008626:	2b00      	cmp	r3, #0
 8008628:	d0ef      	beq.n	800860a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008630:	2b00      	cmp	r3, #0
 8008632:	d1ea      	bne.n	800860a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008638:	f003 0304 	and.w	r3, r3, #4
 800863c:	2b00      	cmp	r3, #0
 800863e:	d004      	beq.n	800864a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2204      	movs	r2, #4
 8008644:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008646:	2304      	movs	r3, #4
 8008648:	e014      	b.n	8008674 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800864e:	f003 0301 	and.w	r3, r3, #1
 8008652:	2b00      	cmp	r3, #0
 8008654:	d004      	beq.n	8008660 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2201      	movs	r2, #1
 800865a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800865c:	2301      	movs	r3, #1
 800865e:	e009      	b.n	8008674 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008668:	2b00      	cmp	r3, #0
 800866a:	d002      	beq.n	8008672 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2240      	movs	r2, #64	; 0x40
 8008670:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008672:	2300      	movs	r3, #0
  
}
 8008674:	4618      	mov	r0, r3
 8008676:	3714      	adds	r7, #20
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr
 8008680:	20000000 	.word	0x20000000
 8008684:	10624dd3 	.word	0x10624dd3

08008688 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008688:	b480      	push	{r7}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008690:	4b11      	ldr	r3, [pc, #68]	; (80086d8 <SDMMC_GetCmdError+0x50>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a11      	ldr	r2, [pc, #68]	; (80086dc <SDMMC_GetCmdError+0x54>)
 8008696:	fba2 2303 	umull	r2, r3, r2, r3
 800869a:	0a5b      	lsrs	r3, r3, #9
 800869c:	f241 3288 	movw	r2, #5000	; 0x1388
 80086a0:	fb02 f303 	mul.w	r3, r2, r3
 80086a4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	1e5a      	subs	r2, r3, #1
 80086aa:	60fa      	str	r2, [r7, #12]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d102      	bne.n	80086b6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80086b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80086b4:	e009      	b.n	80086ca <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d0f1      	beq.n	80086a6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	22c5      	movs	r2, #197	; 0xc5
 80086c6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3714      	adds	r7, #20
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop
 80086d8:	20000000 	.word	0x20000000
 80086dc:	10624dd3 	.word	0x10624dd3

080086e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80086e0:	b084      	sub	sp, #16
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b084      	sub	sp, #16
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	f107 001c 	add.w	r0, r7, #28
 80086ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80086f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d120      	bne.n	800873a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	68da      	ldr	r2, [r3, #12]
 8008708:	4b20      	ldr	r3, [pc, #128]	; (800878c <USB_CoreInit+0xac>)
 800870a:	4013      	ands	r3, r2
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800871c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800871e:	2b01      	cmp	r3, #1
 8008720:	d105      	bne.n	800872e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	68db      	ldr	r3, [r3, #12]
 8008726:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f001 fbee 	bl	8009f10 <USB_CoreReset>
 8008734:	4603      	mov	r3, r0
 8008736:	73fb      	strb	r3, [r7, #15]
 8008738:	e010      	b.n	800875c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f001 fbe2 	bl	8009f10 <USB_CoreReset>
 800874c:	4603      	mov	r3, r0
 800874e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008754:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800875c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875e:	2b01      	cmp	r3, #1
 8008760:	d10b      	bne.n	800877a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	f043 0206 	orr.w	r2, r3, #6
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	f043 0220 	orr.w	r2, r3, #32
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800877a:	7bfb      	ldrb	r3, [r7, #15]
}
 800877c:	4618      	mov	r0, r3
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008786:	b004      	add	sp, #16
 8008788:	4770      	bx	lr
 800878a:	bf00      	nop
 800878c:	ffbdffbf 	.word	0xffbdffbf

08008790 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008790:	b480      	push	{r7}
 8008792:	b087      	sub	sp, #28
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	4613      	mov	r3, r2
 800879c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800879e:	79fb      	ldrb	r3, [r7, #7]
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	d165      	bne.n	8008870 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	4a41      	ldr	r2, [pc, #260]	; (80088ac <USB_SetTurnaroundTime+0x11c>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d906      	bls.n	80087ba <USB_SetTurnaroundTime+0x2a>
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	4a40      	ldr	r2, [pc, #256]	; (80088b0 <USB_SetTurnaroundTime+0x120>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d202      	bcs.n	80087ba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80087b4:	230f      	movs	r3, #15
 80087b6:	617b      	str	r3, [r7, #20]
 80087b8:	e062      	b.n	8008880 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	4a3c      	ldr	r2, [pc, #240]	; (80088b0 <USB_SetTurnaroundTime+0x120>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d306      	bcc.n	80087d0 <USB_SetTurnaroundTime+0x40>
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	4a3b      	ldr	r2, [pc, #236]	; (80088b4 <USB_SetTurnaroundTime+0x124>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d202      	bcs.n	80087d0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80087ca:	230e      	movs	r3, #14
 80087cc:	617b      	str	r3, [r7, #20]
 80087ce:	e057      	b.n	8008880 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	4a38      	ldr	r2, [pc, #224]	; (80088b4 <USB_SetTurnaroundTime+0x124>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d306      	bcc.n	80087e6 <USB_SetTurnaroundTime+0x56>
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	4a37      	ldr	r2, [pc, #220]	; (80088b8 <USB_SetTurnaroundTime+0x128>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d202      	bcs.n	80087e6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80087e0:	230d      	movs	r3, #13
 80087e2:	617b      	str	r3, [r7, #20]
 80087e4:	e04c      	b.n	8008880 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	4a33      	ldr	r2, [pc, #204]	; (80088b8 <USB_SetTurnaroundTime+0x128>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d306      	bcc.n	80087fc <USB_SetTurnaroundTime+0x6c>
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	4a32      	ldr	r2, [pc, #200]	; (80088bc <USB_SetTurnaroundTime+0x12c>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d802      	bhi.n	80087fc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80087f6:	230c      	movs	r3, #12
 80087f8:	617b      	str	r3, [r7, #20]
 80087fa:	e041      	b.n	8008880 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	4a2f      	ldr	r2, [pc, #188]	; (80088bc <USB_SetTurnaroundTime+0x12c>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d906      	bls.n	8008812 <USB_SetTurnaroundTime+0x82>
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	4a2e      	ldr	r2, [pc, #184]	; (80088c0 <USB_SetTurnaroundTime+0x130>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d802      	bhi.n	8008812 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800880c:	230b      	movs	r3, #11
 800880e:	617b      	str	r3, [r7, #20]
 8008810:	e036      	b.n	8008880 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	4a2a      	ldr	r2, [pc, #168]	; (80088c0 <USB_SetTurnaroundTime+0x130>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d906      	bls.n	8008828 <USB_SetTurnaroundTime+0x98>
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	4a29      	ldr	r2, [pc, #164]	; (80088c4 <USB_SetTurnaroundTime+0x134>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d802      	bhi.n	8008828 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008822:	230a      	movs	r3, #10
 8008824:	617b      	str	r3, [r7, #20]
 8008826:	e02b      	b.n	8008880 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	4a26      	ldr	r2, [pc, #152]	; (80088c4 <USB_SetTurnaroundTime+0x134>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d906      	bls.n	800883e <USB_SetTurnaroundTime+0xae>
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	4a25      	ldr	r2, [pc, #148]	; (80088c8 <USB_SetTurnaroundTime+0x138>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d202      	bcs.n	800883e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008838:	2309      	movs	r3, #9
 800883a:	617b      	str	r3, [r7, #20]
 800883c:	e020      	b.n	8008880 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	4a21      	ldr	r2, [pc, #132]	; (80088c8 <USB_SetTurnaroundTime+0x138>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d306      	bcc.n	8008854 <USB_SetTurnaroundTime+0xc4>
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	4a20      	ldr	r2, [pc, #128]	; (80088cc <USB_SetTurnaroundTime+0x13c>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d802      	bhi.n	8008854 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800884e:	2308      	movs	r3, #8
 8008850:	617b      	str	r3, [r7, #20]
 8008852:	e015      	b.n	8008880 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	4a1d      	ldr	r2, [pc, #116]	; (80088cc <USB_SetTurnaroundTime+0x13c>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d906      	bls.n	800886a <USB_SetTurnaroundTime+0xda>
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	4a1c      	ldr	r2, [pc, #112]	; (80088d0 <USB_SetTurnaroundTime+0x140>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d202      	bcs.n	800886a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008864:	2307      	movs	r3, #7
 8008866:	617b      	str	r3, [r7, #20]
 8008868:	e00a      	b.n	8008880 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800886a:	2306      	movs	r3, #6
 800886c:	617b      	str	r3, [r7, #20]
 800886e:	e007      	b.n	8008880 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008870:	79fb      	ldrb	r3, [r7, #7]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d102      	bne.n	800887c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008876:	2309      	movs	r3, #9
 8008878:	617b      	str	r3, [r7, #20]
 800887a:	e001      	b.n	8008880 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800887c:	2309      	movs	r3, #9
 800887e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	68da      	ldr	r2, [r3, #12]
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	029b      	lsls	r3, r3, #10
 8008894:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008898:	431a      	orrs	r2, r3
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	371c      	adds	r7, #28
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr
 80088ac:	00d8acbf 	.word	0x00d8acbf
 80088b0:	00e4e1c0 	.word	0x00e4e1c0
 80088b4:	00f42400 	.word	0x00f42400
 80088b8:	01067380 	.word	0x01067380
 80088bc:	011a499f 	.word	0x011a499f
 80088c0:	01312cff 	.word	0x01312cff
 80088c4:	014ca43f 	.word	0x014ca43f
 80088c8:	016e3600 	.word	0x016e3600
 80088cc:	01a6ab1f 	.word	0x01a6ab1f
 80088d0:	01e84800 	.word	0x01e84800

080088d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	f043 0201 	orr.w	r2, r3, #1
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	370c      	adds	r7, #12
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr

080088f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80088f6:	b480      	push	{r7}
 80088f8:	b083      	sub	sp, #12
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	f023 0201 	bic.w	r2, r3, #1
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800890a:	2300      	movs	r3, #0
}
 800890c:	4618      	mov	r0, r3
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	460b      	mov	r3, r1
 8008922:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008924:	2300      	movs	r3, #0
 8008926:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008934:	78fb      	ldrb	r3, [r7, #3]
 8008936:	2b01      	cmp	r3, #1
 8008938:	d115      	bne.n	8008966 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008946:	2001      	movs	r0, #1
 8008948:	f7f9 f832 	bl	80019b0 <HAL_Delay>
      ms++;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	3301      	adds	r3, #1
 8008950:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f001 fa4b 	bl	8009dee <USB_GetMode>
 8008958:	4603      	mov	r3, r0
 800895a:	2b01      	cmp	r3, #1
 800895c:	d01e      	beq.n	800899c <USB_SetCurrentMode+0x84>
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2b31      	cmp	r3, #49	; 0x31
 8008962:	d9f0      	bls.n	8008946 <USB_SetCurrentMode+0x2e>
 8008964:	e01a      	b.n	800899c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008966:	78fb      	ldrb	r3, [r7, #3]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d115      	bne.n	8008998 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008978:	2001      	movs	r0, #1
 800897a:	f7f9 f819 	bl	80019b0 <HAL_Delay>
      ms++;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	3301      	adds	r3, #1
 8008982:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f001 fa32 	bl	8009dee <USB_GetMode>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d005      	beq.n	800899c <USB_SetCurrentMode+0x84>
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2b31      	cmp	r3, #49	; 0x31
 8008994:	d9f0      	bls.n	8008978 <USB_SetCurrentMode+0x60>
 8008996:	e001      	b.n	800899c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	e005      	b.n	80089a8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2b32      	cmp	r3, #50	; 0x32
 80089a0:	d101      	bne.n	80089a6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	e000      	b.n	80089a8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3710      	adds	r7, #16
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80089b0:	b084      	sub	sp, #16
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b086      	sub	sp, #24
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
 80089ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80089be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80089c2:	2300      	movs	r3, #0
 80089c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80089ca:	2300      	movs	r3, #0
 80089cc:	613b      	str	r3, [r7, #16]
 80089ce:	e009      	b.n	80089e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	3340      	adds	r3, #64	; 0x40
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	4413      	add	r3, r2
 80089da:	2200      	movs	r2, #0
 80089dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	3301      	adds	r3, #1
 80089e2:	613b      	str	r3, [r7, #16]
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	2b0e      	cmp	r3, #14
 80089e8:	d9f2      	bls.n	80089d0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80089ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d11c      	bne.n	8008a2a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	68fa      	ldr	r2, [r7, #12]
 80089fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089fe:	f043 0302 	orr.w	r3, r3, #2
 8008a02:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a08:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	601a      	str	r2, [r3, #0]
 8008a28:	e005      	b.n	8008a36 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a2e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	2300      	movs	r3, #0
 8008a40:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a48:	4619      	mov	r1, r3
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a50:	461a      	mov	r2, r3
 8008a52:	680b      	ldr	r3, [r1, #0]
 8008a54:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d10c      	bne.n	8008a76 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d104      	bne.n	8008a6c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008a62:	2100      	movs	r1, #0
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 f965 	bl	8008d34 <USB_SetDevSpeed>
 8008a6a:	e008      	b.n	8008a7e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008a6c:	2101      	movs	r1, #1
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 f960 	bl	8008d34 <USB_SetDevSpeed>
 8008a74:	e003      	b.n	8008a7e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008a76:	2103      	movs	r1, #3
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 f95b 	bl	8008d34 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008a7e:	2110      	movs	r1, #16
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 f8f3 	bl	8008c6c <USB_FlushTxFifo>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d001      	beq.n	8008a90 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 f91f 	bl	8008cd4 <USB_FlushRxFifo>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d001      	beq.n	8008aa0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008abe:	461a      	mov	r2, r3
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	613b      	str	r3, [r7, #16]
 8008ac8:	e043      	b.n	8008b52 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	015a      	lsls	r2, r3, #5
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008adc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ae0:	d118      	bne.n	8008b14 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d10a      	bne.n	8008afe <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	015a      	lsls	r2, r3, #5
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	4413      	add	r3, r2
 8008af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008af4:	461a      	mov	r2, r3
 8008af6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008afa:	6013      	str	r3, [r2, #0]
 8008afc:	e013      	b.n	8008b26 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	015a      	lsls	r2, r3, #5
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	4413      	add	r3, r2
 8008b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008b10:	6013      	str	r3, [r2, #0]
 8008b12:	e008      	b.n	8008b26 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	015a      	lsls	r2, r3, #5
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	4413      	add	r3, r2
 8008b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b20:	461a      	mov	r2, r3
 8008b22:	2300      	movs	r3, #0
 8008b24:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	015a      	lsls	r2, r3, #5
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	4413      	add	r3, r2
 8008b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b32:	461a      	mov	r2, r3
 8008b34:	2300      	movs	r3, #0
 8008b36:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	015a      	lsls	r2, r3, #5
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	4413      	add	r3, r2
 8008b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b44:	461a      	mov	r2, r3
 8008b46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	613b      	str	r3, [r7, #16]
 8008b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d3b7      	bcc.n	8008aca <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	613b      	str	r3, [r7, #16]
 8008b5e:	e043      	b.n	8008be8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	015a      	lsls	r2, r3, #5
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	4413      	add	r3, r2
 8008b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b76:	d118      	bne.n	8008baa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d10a      	bne.n	8008b94 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	015a      	lsls	r2, r3, #5
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	4413      	add	r3, r2
 8008b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008b90:	6013      	str	r3, [r2, #0]
 8008b92:	e013      	b.n	8008bbc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	015a      	lsls	r2, r3, #5
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008ba6:	6013      	str	r3, [r2, #0]
 8008ba8:	e008      	b.n	8008bbc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	015a      	lsls	r2, r3, #5
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	2300      	movs	r3, #0
 8008bba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	015a      	lsls	r2, r3, #5
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	4413      	add	r3, r2
 8008bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bc8:	461a      	mov	r2, r3
 8008bca:	2300      	movs	r3, #0
 8008bcc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	015a      	lsls	r2, r3, #5
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bda:	461a      	mov	r2, r3
 8008bdc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008be0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	3301      	adds	r3, #1
 8008be6:	613b      	str	r3, [r7, #16]
 8008be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bea:	693a      	ldr	r2, [r7, #16]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d3b7      	bcc.n	8008b60 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bf6:	691b      	ldr	r3, [r3, #16]
 8008bf8:	68fa      	ldr	r2, [r7, #12]
 8008bfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c02:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008c10:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d105      	bne.n	8008c24 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	699b      	ldr	r3, [r3, #24]
 8008c1c:	f043 0210 	orr.w	r2, r3, #16
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	699a      	ldr	r2, [r3, #24]
 8008c28:	4b0e      	ldr	r3, [pc, #56]	; (8008c64 <USB_DevInit+0x2b4>)
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d005      	beq.n	8008c42 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	699b      	ldr	r3, [r3, #24]
 8008c3a:	f043 0208 	orr.w	r2, r3, #8
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d105      	bne.n	8008c54 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	699a      	ldr	r2, [r3, #24]
 8008c4c:	4b06      	ldr	r3, [pc, #24]	; (8008c68 <USB_DevInit+0x2b8>)
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3718      	adds	r7, #24
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c60:	b004      	add	sp, #16
 8008c62:	4770      	bx	lr
 8008c64:	803c3800 	.word	0x803c3800
 8008c68:	40000004 	.word	0x40000004

08008c6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008c76:	2300      	movs	r3, #0
 8008c78:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	4a13      	ldr	r2, [pc, #76]	; (8008cd0 <USB_FlushTxFifo+0x64>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d901      	bls.n	8008c8c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008c88:	2303      	movs	r3, #3
 8008c8a:	e01b      	b.n	8008cc4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	691b      	ldr	r3, [r3, #16]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	daf2      	bge.n	8008c7a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008c94:	2300      	movs	r3, #0
 8008c96:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	019b      	lsls	r3, r3, #6
 8008c9c:	f043 0220 	orr.w	r2, r3, #32
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	4a08      	ldr	r2, [pc, #32]	; (8008cd0 <USB_FlushTxFifo+0x64>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d901      	bls.n	8008cb6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	e006      	b.n	8008cc4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	691b      	ldr	r3, [r3, #16]
 8008cba:	f003 0320 	and.w	r3, r3, #32
 8008cbe:	2b20      	cmp	r3, #32
 8008cc0:	d0f0      	beq.n	8008ca4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3714      	adds	r7, #20
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr
 8008cd0:	00030d40 	.word	0x00030d40

08008cd4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	4a11      	ldr	r2, [pc, #68]	; (8008d30 <USB_FlushRxFifo+0x5c>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d901      	bls.n	8008cf2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008cee:	2303      	movs	r3, #3
 8008cf0:	e018      	b.n	8008d24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	691b      	ldr	r3, [r3, #16]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	daf2      	bge.n	8008ce0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2210      	movs	r2, #16
 8008d02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	3301      	adds	r3, #1
 8008d08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	4a08      	ldr	r2, [pc, #32]	; (8008d30 <USB_FlushRxFifo+0x5c>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d901      	bls.n	8008d16 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008d12:	2303      	movs	r3, #3
 8008d14:	e006      	b.n	8008d24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	691b      	ldr	r3, [r3, #16]
 8008d1a:	f003 0310 	and.w	r3, r3, #16
 8008d1e:	2b10      	cmp	r3, #16
 8008d20:	d0f0      	beq.n	8008d04 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008d22:	2300      	movs	r3, #0
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3714      	adds	r7, #20
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr
 8008d30:	00030d40 	.word	0x00030d40

08008d34 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b085      	sub	sp, #20
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	78fb      	ldrb	r3, [r7, #3]
 8008d4e:	68f9      	ldr	r1, [r7, #12]
 8008d50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d54:	4313      	orrs	r3, r2
 8008d56:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008d58:	2300      	movs	r3, #0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3714      	adds	r7, #20
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr

08008d66 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008d66:	b480      	push	{r7}
 8008d68:	b087      	sub	sp, #28
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	f003 0306 	and.w	r3, r3, #6
 8008d7e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d102      	bne.n	8008d8c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008d86:	2300      	movs	r3, #0
 8008d88:	75fb      	strb	r3, [r7, #23]
 8008d8a:	e00a      	b.n	8008da2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2b02      	cmp	r3, #2
 8008d90:	d002      	beq.n	8008d98 <USB_GetDevSpeed+0x32>
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2b06      	cmp	r3, #6
 8008d96:	d102      	bne.n	8008d9e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008d98:	2302      	movs	r3, #2
 8008d9a:	75fb      	strb	r3, [r7, #23]
 8008d9c:	e001      	b.n	8008da2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008d9e:	230f      	movs	r3, #15
 8008da0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	371c      	adds	r7, #28
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b085      	sub	sp, #20
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	785b      	ldrb	r3, [r3, #1]
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d139      	bne.n	8008e40 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dd2:	69da      	ldr	r2, [r3, #28]
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	f003 030f 	and.w	r3, r3, #15
 8008ddc:	2101      	movs	r1, #1
 8008dde:	fa01 f303 	lsl.w	r3, r1, r3
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	68f9      	ldr	r1, [r7, #12]
 8008de6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008dea:	4313      	orrs	r3, r2
 8008dec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	015a      	lsls	r2, r3, #5
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	4413      	add	r3, r2
 8008df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d153      	bne.n	8008eac <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	015a      	lsls	r2, r3, #5
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	791b      	ldrb	r3, [r3, #4]
 8008e1e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008e20:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	059b      	lsls	r3, r3, #22
 8008e26:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008e28:	431a      	orrs	r2, r3
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	0159      	lsls	r1, r3, #5
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	440b      	add	r3, r1
 8008e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e36:	4619      	mov	r1, r3
 8008e38:	4b20      	ldr	r3, [pc, #128]	; (8008ebc <USB_ActivateEndpoint+0x10c>)
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	600b      	str	r3, [r1, #0]
 8008e3e:	e035      	b.n	8008eac <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e46:	69da      	ldr	r2, [r3, #28]
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	f003 030f 	and.w	r3, r3, #15
 8008e50:	2101      	movs	r1, #1
 8008e52:	fa01 f303 	lsl.w	r3, r1, r3
 8008e56:	041b      	lsls	r3, r3, #16
 8008e58:	68f9      	ldr	r1, [r7, #12]
 8008e5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	015a      	lsls	r2, r3, #5
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	4413      	add	r3, r2
 8008e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d119      	bne.n	8008eac <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	015a      	lsls	r2, r3, #5
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	4413      	add	r3, r2
 8008e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	791b      	ldrb	r3, [r3, #4]
 8008e92:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008e94:	430b      	orrs	r3, r1
 8008e96:	431a      	orrs	r2, r3
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	0159      	lsls	r1, r3, #5
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	440b      	add	r3, r1
 8008ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	4b05      	ldr	r3, [pc, #20]	; (8008ebc <USB_ActivateEndpoint+0x10c>)
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008eac:	2300      	movs	r3, #0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3714      	adds	r7, #20
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop
 8008ebc:	10008000 	.word	0x10008000

08008ec0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b085      	sub	sp, #20
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	785b      	ldrb	r3, [r3, #1]
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d161      	bne.n	8008fa0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	015a      	lsls	r2, r3, #5
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008eee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ef2:	d11f      	bne.n	8008f34 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	015a      	lsls	r2, r3, #5
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	4413      	add	r3, r2
 8008efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	68ba      	ldr	r2, [r7, #8]
 8008f04:	0151      	lsls	r1, r2, #5
 8008f06:	68fa      	ldr	r2, [r7, #12]
 8008f08:	440a      	add	r2, r1
 8008f0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008f12:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	015a      	lsls	r2, r3, #5
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	68ba      	ldr	r2, [r7, #8]
 8008f24:	0151      	lsls	r1, r2, #5
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	440a      	add	r2, r1
 8008f2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	f003 030f 	and.w	r3, r3, #15
 8008f44:	2101      	movs	r1, #1
 8008f46:	fa01 f303 	lsl.w	r3, r1, r3
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	43db      	mvns	r3, r3
 8008f4e:	68f9      	ldr	r1, [r7, #12]
 8008f50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f54:	4013      	ands	r3, r2
 8008f56:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f5e:	69da      	ldr	r2, [r3, #28]
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	f003 030f 	and.w	r3, r3, #15
 8008f68:	2101      	movs	r1, #1
 8008f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8008f6e:	b29b      	uxth	r3, r3
 8008f70:	43db      	mvns	r3, r3
 8008f72:	68f9      	ldr	r1, [r7, #12]
 8008f74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f78:	4013      	ands	r3, r2
 8008f7a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	015a      	lsls	r2, r3, #5
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	4413      	add	r3, r2
 8008f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	0159      	lsls	r1, r3, #5
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	440b      	add	r3, r1
 8008f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f96:	4619      	mov	r1, r3
 8008f98:	4b35      	ldr	r3, [pc, #212]	; (8009070 <USB_DeactivateEndpoint+0x1b0>)
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	600b      	str	r3, [r1, #0]
 8008f9e:	e060      	b.n	8009062 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	015a      	lsls	r2, r3, #5
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	4413      	add	r3, r2
 8008fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fb6:	d11f      	bne.n	8008ff8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	015a      	lsls	r2, r3, #5
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	68ba      	ldr	r2, [r7, #8]
 8008fc8:	0151      	lsls	r1, r2, #5
 8008fca:	68fa      	ldr	r2, [r7, #12]
 8008fcc:	440a      	add	r2, r1
 8008fce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008fd6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	015a      	lsls	r2, r3, #5
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	4413      	add	r3, r2
 8008fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	68ba      	ldr	r2, [r7, #8]
 8008fe8:	0151      	lsls	r1, r2, #5
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	440a      	add	r2, r1
 8008fee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ff2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ff6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ffe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	f003 030f 	and.w	r3, r3, #15
 8009008:	2101      	movs	r1, #1
 800900a:	fa01 f303 	lsl.w	r3, r1, r3
 800900e:	041b      	lsls	r3, r3, #16
 8009010:	43db      	mvns	r3, r3
 8009012:	68f9      	ldr	r1, [r7, #12]
 8009014:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009018:	4013      	ands	r3, r2
 800901a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009022:	69da      	ldr	r2, [r3, #28]
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	f003 030f 	and.w	r3, r3, #15
 800902c:	2101      	movs	r1, #1
 800902e:	fa01 f303 	lsl.w	r3, r1, r3
 8009032:	041b      	lsls	r3, r3, #16
 8009034:	43db      	mvns	r3, r3
 8009036:	68f9      	ldr	r1, [r7, #12]
 8009038:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800903c:	4013      	ands	r3, r2
 800903e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	015a      	lsls	r2, r3, #5
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	4413      	add	r3, r2
 8009048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	0159      	lsls	r1, r3, #5
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	440b      	add	r3, r1
 8009056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800905a:	4619      	mov	r1, r3
 800905c:	4b05      	ldr	r3, [pc, #20]	; (8009074 <USB_DeactivateEndpoint+0x1b4>)
 800905e:	4013      	ands	r3, r2
 8009060:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009062:	2300      	movs	r3, #0
}
 8009064:	4618      	mov	r0, r3
 8009066:	3714      	adds	r7, #20
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr
 8009070:	ec337800 	.word	0xec337800
 8009074:	eff37800 	.word	0xeff37800

08009078 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b08a      	sub	sp, #40	; 0x28
 800907c:	af02      	add	r7, sp, #8
 800907e:	60f8      	str	r0, [r7, #12]
 8009080:	60b9      	str	r1, [r7, #8]
 8009082:	4613      	mov	r3, r2
 8009084:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	785b      	ldrb	r3, [r3, #1]
 8009094:	2b01      	cmp	r3, #1
 8009096:	f040 8163 	bne.w	8009360 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	699b      	ldr	r3, [r3, #24]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d132      	bne.n	8009108 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	015a      	lsls	r2, r3, #5
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	4413      	add	r3, r2
 80090aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ae:	691a      	ldr	r2, [r3, #16]
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	0159      	lsls	r1, r3, #5
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	440b      	add	r3, r1
 80090b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090bc:	4619      	mov	r1, r3
 80090be:	4ba5      	ldr	r3, [pc, #660]	; (8009354 <USB_EPStartXfer+0x2dc>)
 80090c0:	4013      	ands	r3, r2
 80090c2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80090c4:	69bb      	ldr	r3, [r7, #24]
 80090c6:	015a      	lsls	r2, r3, #5
 80090c8:	69fb      	ldr	r3, [r7, #28]
 80090ca:	4413      	add	r3, r2
 80090cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090d0:	691b      	ldr	r3, [r3, #16]
 80090d2:	69ba      	ldr	r2, [r7, #24]
 80090d4:	0151      	lsls	r1, r2, #5
 80090d6:	69fa      	ldr	r2, [r7, #28]
 80090d8:	440a      	add	r2, r1
 80090da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80090e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	015a      	lsls	r2, r3, #5
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	4413      	add	r3, r2
 80090ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090f0:	691a      	ldr	r2, [r3, #16]
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	0159      	lsls	r1, r3, #5
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	440b      	add	r3, r1
 80090fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090fe:	4619      	mov	r1, r3
 8009100:	4b95      	ldr	r3, [pc, #596]	; (8009358 <USB_EPStartXfer+0x2e0>)
 8009102:	4013      	ands	r3, r2
 8009104:	610b      	str	r3, [r1, #16]
 8009106:	e074      	b.n	80091f2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	015a      	lsls	r2, r3, #5
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	4413      	add	r3, r2
 8009110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009114:	691a      	ldr	r2, [r3, #16]
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	0159      	lsls	r1, r3, #5
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	440b      	add	r3, r1
 800911e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009122:	4619      	mov	r1, r3
 8009124:	4b8c      	ldr	r3, [pc, #560]	; (8009358 <USB_EPStartXfer+0x2e0>)
 8009126:	4013      	ands	r3, r2
 8009128:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800912a:	69bb      	ldr	r3, [r7, #24]
 800912c:	015a      	lsls	r2, r3, #5
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	4413      	add	r3, r2
 8009132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009136:	691a      	ldr	r2, [r3, #16]
 8009138:	69bb      	ldr	r3, [r7, #24]
 800913a:	0159      	lsls	r1, r3, #5
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	440b      	add	r3, r1
 8009140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009144:	4619      	mov	r1, r3
 8009146:	4b83      	ldr	r3, [pc, #524]	; (8009354 <USB_EPStartXfer+0x2dc>)
 8009148:	4013      	ands	r3, r2
 800914a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800914c:	69bb      	ldr	r3, [r7, #24]
 800914e:	015a      	lsls	r2, r3, #5
 8009150:	69fb      	ldr	r3, [r7, #28]
 8009152:	4413      	add	r3, r2
 8009154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009158:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	6999      	ldr	r1, [r3, #24]
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	440b      	add	r3, r1
 8009164:	1e59      	subs	r1, r3, #1
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	fbb1 f3f3 	udiv	r3, r1, r3
 800916e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009170:	4b7a      	ldr	r3, [pc, #488]	; (800935c <USB_EPStartXfer+0x2e4>)
 8009172:	400b      	ands	r3, r1
 8009174:	69b9      	ldr	r1, [r7, #24]
 8009176:	0148      	lsls	r0, r1, #5
 8009178:	69f9      	ldr	r1, [r7, #28]
 800917a:	4401      	add	r1, r0
 800917c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009180:	4313      	orrs	r3, r2
 8009182:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009184:	69bb      	ldr	r3, [r7, #24]
 8009186:	015a      	lsls	r2, r3, #5
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	4413      	add	r3, r2
 800918c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009190:	691a      	ldr	r2, [r3, #16]
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	699b      	ldr	r3, [r3, #24]
 8009196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800919a:	69b9      	ldr	r1, [r7, #24]
 800919c:	0148      	lsls	r0, r1, #5
 800919e:	69f9      	ldr	r1, [r7, #28]
 80091a0:	4401      	add	r1, r0
 80091a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80091a6:	4313      	orrs	r3, r2
 80091a8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	791b      	ldrb	r3, [r3, #4]
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d11f      	bne.n	80091f2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	015a      	lsls	r2, r3, #5
 80091b6:	69fb      	ldr	r3, [r7, #28]
 80091b8:	4413      	add	r3, r2
 80091ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091be:	691b      	ldr	r3, [r3, #16]
 80091c0:	69ba      	ldr	r2, [r7, #24]
 80091c2:	0151      	lsls	r1, r2, #5
 80091c4:	69fa      	ldr	r2, [r7, #28]
 80091c6:	440a      	add	r2, r1
 80091c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091cc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80091d0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	015a      	lsls	r2, r3, #5
 80091d6:	69fb      	ldr	r3, [r7, #28]
 80091d8:	4413      	add	r3, r2
 80091da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091de:	691b      	ldr	r3, [r3, #16]
 80091e0:	69ba      	ldr	r2, [r7, #24]
 80091e2:	0151      	lsls	r1, r2, #5
 80091e4:	69fa      	ldr	r2, [r7, #28]
 80091e6:	440a      	add	r2, r1
 80091e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80091f0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80091f2:	79fb      	ldrb	r3, [r7, #7]
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d14b      	bne.n	8009290 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	695b      	ldr	r3, [r3, #20]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d009      	beq.n	8009214 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	015a      	lsls	r2, r3, #5
 8009204:	69fb      	ldr	r3, [r7, #28]
 8009206:	4413      	add	r3, r2
 8009208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800920c:	461a      	mov	r2, r3
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	695b      	ldr	r3, [r3, #20]
 8009212:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	791b      	ldrb	r3, [r3, #4]
 8009218:	2b01      	cmp	r3, #1
 800921a:	d128      	bne.n	800926e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009228:	2b00      	cmp	r3, #0
 800922a:	d110      	bne.n	800924e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	015a      	lsls	r2, r3, #5
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	4413      	add	r3, r2
 8009234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	69ba      	ldr	r2, [r7, #24]
 800923c:	0151      	lsls	r1, r2, #5
 800923e:	69fa      	ldr	r2, [r7, #28]
 8009240:	440a      	add	r2, r1
 8009242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009246:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800924a:	6013      	str	r3, [r2, #0]
 800924c:	e00f      	b.n	800926e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	015a      	lsls	r2, r3, #5
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	4413      	add	r3, r2
 8009256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	69ba      	ldr	r2, [r7, #24]
 800925e:	0151      	lsls	r1, r2, #5
 8009260:	69fa      	ldr	r2, [r7, #28]
 8009262:	440a      	add	r2, r1
 8009264:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800926c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800926e:	69bb      	ldr	r3, [r7, #24]
 8009270:	015a      	lsls	r2, r3, #5
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	4413      	add	r3, r2
 8009276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	69ba      	ldr	r2, [r7, #24]
 800927e:	0151      	lsls	r1, r2, #5
 8009280:	69fa      	ldr	r2, [r7, #28]
 8009282:	440a      	add	r2, r1
 8009284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009288:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800928c:	6013      	str	r3, [r2, #0]
 800928e:	e137      	b.n	8009500 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	015a      	lsls	r2, r3, #5
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	4413      	add	r3, r2
 8009298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	69ba      	ldr	r2, [r7, #24]
 80092a0:	0151      	lsls	r1, r2, #5
 80092a2:	69fa      	ldr	r2, [r7, #28]
 80092a4:	440a      	add	r2, r1
 80092a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80092ae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	791b      	ldrb	r3, [r3, #4]
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d015      	beq.n	80092e4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	699b      	ldr	r3, [r3, #24]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f000 811f 	beq.w	8009500 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	f003 030f 	and.w	r3, r3, #15
 80092d2:	2101      	movs	r1, #1
 80092d4:	fa01 f303 	lsl.w	r3, r1, r3
 80092d8:	69f9      	ldr	r1, [r7, #28]
 80092da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092de:	4313      	orrs	r3, r2
 80092e0:	634b      	str	r3, [r1, #52]	; 0x34
 80092e2:	e10d      	b.n	8009500 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80092e4:	69fb      	ldr	r3, [r7, #28]
 80092e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d110      	bne.n	8009316 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80092f4:	69bb      	ldr	r3, [r7, #24]
 80092f6:	015a      	lsls	r2, r3, #5
 80092f8:	69fb      	ldr	r3, [r7, #28]
 80092fa:	4413      	add	r3, r2
 80092fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	69ba      	ldr	r2, [r7, #24]
 8009304:	0151      	lsls	r1, r2, #5
 8009306:	69fa      	ldr	r2, [r7, #28]
 8009308:	440a      	add	r2, r1
 800930a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800930e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009312:	6013      	str	r3, [r2, #0]
 8009314:	e00f      	b.n	8009336 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	015a      	lsls	r2, r3, #5
 800931a:	69fb      	ldr	r3, [r7, #28]
 800931c:	4413      	add	r3, r2
 800931e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	69ba      	ldr	r2, [r7, #24]
 8009326:	0151      	lsls	r1, r2, #5
 8009328:	69fa      	ldr	r2, [r7, #28]
 800932a:	440a      	add	r2, r1
 800932c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009334:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	6919      	ldr	r1, [r3, #16]
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	781a      	ldrb	r2, [r3, #0]
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	699b      	ldr	r3, [r3, #24]
 8009342:	b298      	uxth	r0, r3
 8009344:	79fb      	ldrb	r3, [r7, #7]
 8009346:	9300      	str	r3, [sp, #0]
 8009348:	4603      	mov	r3, r0
 800934a:	68f8      	ldr	r0, [r7, #12]
 800934c:	f000 faea 	bl	8009924 <USB_WritePacket>
 8009350:	e0d6      	b.n	8009500 <USB_EPStartXfer+0x488>
 8009352:	bf00      	nop
 8009354:	e007ffff 	.word	0xe007ffff
 8009358:	fff80000 	.word	0xfff80000
 800935c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	015a      	lsls	r2, r3, #5
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	4413      	add	r3, r2
 8009368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800936c:	691a      	ldr	r2, [r3, #16]
 800936e:	69bb      	ldr	r3, [r7, #24]
 8009370:	0159      	lsls	r1, r3, #5
 8009372:	69fb      	ldr	r3, [r7, #28]
 8009374:	440b      	add	r3, r1
 8009376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800937a:	4619      	mov	r1, r3
 800937c:	4b63      	ldr	r3, [pc, #396]	; (800950c <USB_EPStartXfer+0x494>)
 800937e:	4013      	ands	r3, r2
 8009380:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	015a      	lsls	r2, r3, #5
 8009386:	69fb      	ldr	r3, [r7, #28]
 8009388:	4413      	add	r3, r2
 800938a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800938e:	691a      	ldr	r2, [r3, #16]
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	0159      	lsls	r1, r3, #5
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	440b      	add	r3, r1
 8009398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800939c:	4619      	mov	r1, r3
 800939e:	4b5c      	ldr	r3, [pc, #368]	; (8009510 <USB_EPStartXfer+0x498>)
 80093a0:	4013      	ands	r3, r2
 80093a2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	699b      	ldr	r3, [r3, #24]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d123      	bne.n	80093f4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80093ac:	69bb      	ldr	r3, [r7, #24]
 80093ae:	015a      	lsls	r2, r3, #5
 80093b0:	69fb      	ldr	r3, [r7, #28]
 80093b2:	4413      	add	r3, r2
 80093b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093b8:	691a      	ldr	r2, [r3, #16]
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	68db      	ldr	r3, [r3, #12]
 80093be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093c2:	69b9      	ldr	r1, [r7, #24]
 80093c4:	0148      	lsls	r0, r1, #5
 80093c6:	69f9      	ldr	r1, [r7, #28]
 80093c8:	4401      	add	r1, r0
 80093ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80093ce:	4313      	orrs	r3, r2
 80093d0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	015a      	lsls	r2, r3, #5
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	4413      	add	r3, r2
 80093da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093de:	691b      	ldr	r3, [r3, #16]
 80093e0:	69ba      	ldr	r2, [r7, #24]
 80093e2:	0151      	lsls	r1, r2, #5
 80093e4:	69fa      	ldr	r2, [r7, #28]
 80093e6:	440a      	add	r2, r1
 80093e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80093f0:	6113      	str	r3, [r2, #16]
 80093f2:	e037      	b.n	8009464 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	699a      	ldr	r2, [r3, #24]
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	4413      	add	r3, r2
 80093fe:	1e5a      	subs	r2, r3, #1
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	fbb2 f3f3 	udiv	r3, r2, r3
 8009408:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	68db      	ldr	r3, [r3, #12]
 800940e:	8afa      	ldrh	r2, [r7, #22]
 8009410:	fb03 f202 	mul.w	r2, r3, r2
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009418:	69bb      	ldr	r3, [r7, #24]
 800941a:	015a      	lsls	r2, r3, #5
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	4413      	add	r3, r2
 8009420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009424:	691a      	ldr	r2, [r3, #16]
 8009426:	8afb      	ldrh	r3, [r7, #22]
 8009428:	04d9      	lsls	r1, r3, #19
 800942a:	4b3a      	ldr	r3, [pc, #232]	; (8009514 <USB_EPStartXfer+0x49c>)
 800942c:	400b      	ands	r3, r1
 800942e:	69b9      	ldr	r1, [r7, #24]
 8009430:	0148      	lsls	r0, r1, #5
 8009432:	69f9      	ldr	r1, [r7, #28]
 8009434:	4401      	add	r1, r0
 8009436:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800943a:	4313      	orrs	r3, r2
 800943c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800943e:	69bb      	ldr	r3, [r7, #24]
 8009440:	015a      	lsls	r2, r3, #5
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	4413      	add	r3, r2
 8009446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800944a:	691a      	ldr	r2, [r3, #16]
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	69db      	ldr	r3, [r3, #28]
 8009450:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009454:	69b9      	ldr	r1, [r7, #24]
 8009456:	0148      	lsls	r0, r1, #5
 8009458:	69f9      	ldr	r1, [r7, #28]
 800945a:	4401      	add	r1, r0
 800945c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009460:	4313      	orrs	r3, r2
 8009462:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009464:	79fb      	ldrb	r3, [r7, #7]
 8009466:	2b01      	cmp	r3, #1
 8009468:	d10d      	bne.n	8009486 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	691b      	ldr	r3, [r3, #16]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d009      	beq.n	8009486 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	6919      	ldr	r1, [r3, #16]
 8009476:	69bb      	ldr	r3, [r7, #24]
 8009478:	015a      	lsls	r2, r3, #5
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	4413      	add	r3, r2
 800947e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009482:	460a      	mov	r2, r1
 8009484:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	791b      	ldrb	r3, [r3, #4]
 800948a:	2b01      	cmp	r3, #1
 800948c:	d128      	bne.n	80094e0 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800948e:	69fb      	ldr	r3, [r7, #28]
 8009490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800949a:	2b00      	cmp	r3, #0
 800949c:	d110      	bne.n	80094c0 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	015a      	lsls	r2, r3, #5
 80094a2:	69fb      	ldr	r3, [r7, #28]
 80094a4:	4413      	add	r3, r2
 80094a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	69ba      	ldr	r2, [r7, #24]
 80094ae:	0151      	lsls	r1, r2, #5
 80094b0:	69fa      	ldr	r2, [r7, #28]
 80094b2:	440a      	add	r2, r1
 80094b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80094bc:	6013      	str	r3, [r2, #0]
 80094be:	e00f      	b.n	80094e0 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80094c0:	69bb      	ldr	r3, [r7, #24]
 80094c2:	015a      	lsls	r2, r3, #5
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	4413      	add	r3, r2
 80094c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	69ba      	ldr	r2, [r7, #24]
 80094d0:	0151      	lsls	r1, r2, #5
 80094d2:	69fa      	ldr	r2, [r7, #28]
 80094d4:	440a      	add	r2, r1
 80094d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094de:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80094e0:	69bb      	ldr	r3, [r7, #24]
 80094e2:	015a      	lsls	r2, r3, #5
 80094e4:	69fb      	ldr	r3, [r7, #28]
 80094e6:	4413      	add	r3, r2
 80094e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	69ba      	ldr	r2, [r7, #24]
 80094f0:	0151      	lsls	r1, r2, #5
 80094f2:	69fa      	ldr	r2, [r7, #28]
 80094f4:	440a      	add	r2, r1
 80094f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80094fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009500:	2300      	movs	r3, #0
}
 8009502:	4618      	mov	r0, r3
 8009504:	3720      	adds	r7, #32
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
 800950a:	bf00      	nop
 800950c:	fff80000 	.word	0xfff80000
 8009510:	e007ffff 	.word	0xe007ffff
 8009514:	1ff80000 	.word	0x1ff80000

08009518 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009518:	b480      	push	{r7}
 800951a:	b087      	sub	sp, #28
 800951c:	af00      	add	r7, sp, #0
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	4613      	mov	r3, r2
 8009524:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	785b      	ldrb	r3, [r3, #1]
 8009534:	2b01      	cmp	r3, #1
 8009536:	f040 80ce 	bne.w	80096d6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	699b      	ldr	r3, [r3, #24]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d132      	bne.n	80095a8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	015a      	lsls	r2, r3, #5
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	4413      	add	r3, r2
 800954a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800954e:	691a      	ldr	r2, [r3, #16]
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	0159      	lsls	r1, r3, #5
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	440b      	add	r3, r1
 8009558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800955c:	4619      	mov	r1, r3
 800955e:	4b9a      	ldr	r3, [pc, #616]	; (80097c8 <USB_EP0StartXfer+0x2b0>)
 8009560:	4013      	ands	r3, r2
 8009562:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	015a      	lsls	r2, r3, #5
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	4413      	add	r3, r2
 800956c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009570:	691b      	ldr	r3, [r3, #16]
 8009572:	693a      	ldr	r2, [r7, #16]
 8009574:	0151      	lsls	r1, r2, #5
 8009576:	697a      	ldr	r2, [r7, #20]
 8009578:	440a      	add	r2, r1
 800957a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800957e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009582:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	015a      	lsls	r2, r3, #5
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	4413      	add	r3, r2
 800958c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009590:	691a      	ldr	r2, [r3, #16]
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	0159      	lsls	r1, r3, #5
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	440b      	add	r3, r1
 800959a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800959e:	4619      	mov	r1, r3
 80095a0:	4b8a      	ldr	r3, [pc, #552]	; (80097cc <USB_EP0StartXfer+0x2b4>)
 80095a2:	4013      	ands	r3, r2
 80095a4:	610b      	str	r3, [r1, #16]
 80095a6:	e04e      	b.n	8009646 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	015a      	lsls	r2, r3, #5
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	4413      	add	r3, r2
 80095b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095b4:	691a      	ldr	r2, [r3, #16]
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	0159      	lsls	r1, r3, #5
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	440b      	add	r3, r1
 80095be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095c2:	4619      	mov	r1, r3
 80095c4:	4b81      	ldr	r3, [pc, #516]	; (80097cc <USB_EP0StartXfer+0x2b4>)
 80095c6:	4013      	ands	r3, r2
 80095c8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	015a      	lsls	r2, r3, #5
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	4413      	add	r3, r2
 80095d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095d6:	691a      	ldr	r2, [r3, #16]
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	0159      	lsls	r1, r3, #5
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	440b      	add	r3, r1
 80095e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095e4:	4619      	mov	r1, r3
 80095e6:	4b78      	ldr	r3, [pc, #480]	; (80097c8 <USB_EP0StartXfer+0x2b0>)
 80095e8:	4013      	ands	r3, r2
 80095ea:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	699a      	ldr	r2, [r3, #24]
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d903      	bls.n	8009600 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	68da      	ldr	r2, [r3, #12]
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	015a      	lsls	r2, r3, #5
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	4413      	add	r3, r2
 8009608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800960c:	691b      	ldr	r3, [r3, #16]
 800960e:	693a      	ldr	r2, [r7, #16]
 8009610:	0151      	lsls	r1, r2, #5
 8009612:	697a      	ldr	r2, [r7, #20]
 8009614:	440a      	add	r2, r1
 8009616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800961a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800961e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	015a      	lsls	r2, r3, #5
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	4413      	add	r3, r2
 8009628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800962c:	691a      	ldr	r2, [r3, #16]
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	699b      	ldr	r3, [r3, #24]
 8009632:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009636:	6939      	ldr	r1, [r7, #16]
 8009638:	0148      	lsls	r0, r1, #5
 800963a:	6979      	ldr	r1, [r7, #20]
 800963c:	4401      	add	r1, r0
 800963e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009642:	4313      	orrs	r3, r2
 8009644:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009646:	79fb      	ldrb	r3, [r7, #7]
 8009648:	2b01      	cmp	r3, #1
 800964a:	d11e      	bne.n	800968a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	695b      	ldr	r3, [r3, #20]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d009      	beq.n	8009668 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	015a      	lsls	r2, r3, #5
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	4413      	add	r3, r2
 800965c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009660:	461a      	mov	r2, r3
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	695b      	ldr	r3, [r3, #20]
 8009666:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	015a      	lsls	r2, r3, #5
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	4413      	add	r3, r2
 8009670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	693a      	ldr	r2, [r7, #16]
 8009678:	0151      	lsls	r1, r2, #5
 800967a:	697a      	ldr	r2, [r7, #20]
 800967c:	440a      	add	r2, r1
 800967e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009682:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009686:	6013      	str	r3, [r2, #0]
 8009688:	e097      	b.n	80097ba <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	015a      	lsls	r2, r3, #5
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	4413      	add	r3, r2
 8009692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	693a      	ldr	r2, [r7, #16]
 800969a:	0151      	lsls	r1, r2, #5
 800969c:	697a      	ldr	r2, [r7, #20]
 800969e:	440a      	add	r2, r1
 80096a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80096a8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	699b      	ldr	r3, [r3, #24]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	f000 8083 	beq.w	80097ba <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	f003 030f 	and.w	r3, r3, #15
 80096c4:	2101      	movs	r1, #1
 80096c6:	fa01 f303 	lsl.w	r3, r1, r3
 80096ca:	6979      	ldr	r1, [r7, #20]
 80096cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096d0:	4313      	orrs	r3, r2
 80096d2:	634b      	str	r3, [r1, #52]	; 0x34
 80096d4:	e071      	b.n	80097ba <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	015a      	lsls	r2, r3, #5
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	4413      	add	r3, r2
 80096de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096e2:	691a      	ldr	r2, [r3, #16]
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	0159      	lsls	r1, r3, #5
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	440b      	add	r3, r1
 80096ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096f0:	4619      	mov	r1, r3
 80096f2:	4b36      	ldr	r3, [pc, #216]	; (80097cc <USB_EP0StartXfer+0x2b4>)
 80096f4:	4013      	ands	r3, r2
 80096f6:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	015a      	lsls	r2, r3, #5
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	4413      	add	r3, r2
 8009700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009704:	691a      	ldr	r2, [r3, #16]
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	0159      	lsls	r1, r3, #5
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	440b      	add	r3, r1
 800970e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009712:	4619      	mov	r1, r3
 8009714:	4b2c      	ldr	r3, [pc, #176]	; (80097c8 <USB_EP0StartXfer+0x2b0>)
 8009716:	4013      	ands	r3, r2
 8009718:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	699b      	ldr	r3, [r3, #24]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d003      	beq.n	800972a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	68da      	ldr	r2, [r3, #12]
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	68da      	ldr	r2, [r3, #12]
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	015a      	lsls	r2, r3, #5
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	4413      	add	r3, r2
 800973a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	693a      	ldr	r2, [r7, #16]
 8009742:	0151      	lsls	r1, r2, #5
 8009744:	697a      	ldr	r2, [r7, #20]
 8009746:	440a      	add	r2, r1
 8009748:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800974c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009750:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	015a      	lsls	r2, r3, #5
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	4413      	add	r3, r2
 800975a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800975e:	691a      	ldr	r2, [r3, #16]
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	69db      	ldr	r3, [r3, #28]
 8009764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009768:	6939      	ldr	r1, [r7, #16]
 800976a:	0148      	lsls	r0, r1, #5
 800976c:	6979      	ldr	r1, [r7, #20]
 800976e:	4401      	add	r1, r0
 8009770:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009774:	4313      	orrs	r3, r2
 8009776:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009778:	79fb      	ldrb	r3, [r7, #7]
 800977a:	2b01      	cmp	r3, #1
 800977c:	d10d      	bne.n	800979a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	691b      	ldr	r3, [r3, #16]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d009      	beq.n	800979a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	6919      	ldr	r1, [r3, #16]
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	015a      	lsls	r2, r3, #5
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	4413      	add	r3, r2
 8009792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009796:	460a      	mov	r2, r1
 8009798:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	015a      	lsls	r2, r3, #5
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	4413      	add	r3, r2
 80097a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	693a      	ldr	r2, [r7, #16]
 80097aa:	0151      	lsls	r1, r2, #5
 80097ac:	697a      	ldr	r2, [r7, #20]
 80097ae:	440a      	add	r2, r1
 80097b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80097b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	371c      	adds	r7, #28
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr
 80097c8:	e007ffff 	.word	0xe007ffff
 80097cc:	fff80000 	.word	0xfff80000

080097d0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b087      	sub	sp, #28
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80097da:	2300      	movs	r3, #0
 80097dc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80097de:	2300      	movs	r3, #0
 80097e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	785b      	ldrb	r3, [r3, #1]
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d14a      	bne.n	8009884 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	015a      	lsls	r2, r3, #5
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	4413      	add	r3, r2
 80097f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009802:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009806:	f040 8086 	bne.w	8009916 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	015a      	lsls	r2, r3, #5
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	4413      	add	r3, r2
 8009814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	683a      	ldr	r2, [r7, #0]
 800981c:	7812      	ldrb	r2, [r2, #0]
 800981e:	0151      	lsls	r1, r2, #5
 8009820:	693a      	ldr	r2, [r7, #16]
 8009822:	440a      	add	r2, r1
 8009824:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009828:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800982c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	015a      	lsls	r2, r3, #5
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	4413      	add	r3, r2
 8009838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	683a      	ldr	r2, [r7, #0]
 8009840:	7812      	ldrb	r2, [r2, #0]
 8009842:	0151      	lsls	r1, r2, #5
 8009844:	693a      	ldr	r2, [r7, #16]
 8009846:	440a      	add	r2, r1
 8009848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800984c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009850:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	3301      	adds	r3, #1
 8009856:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f242 7210 	movw	r2, #10000	; 0x2710
 800985e:	4293      	cmp	r3, r2
 8009860:	d902      	bls.n	8009868 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009862:	2301      	movs	r3, #1
 8009864:	75fb      	strb	r3, [r7, #23]
          break;
 8009866:	e056      	b.n	8009916 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	015a      	lsls	r2, r3, #5
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	4413      	add	r3, r2
 8009872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800987c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009880:	d0e7      	beq.n	8009852 <USB_EPStopXfer+0x82>
 8009882:	e048      	b.n	8009916 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	015a      	lsls	r2, r3, #5
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	4413      	add	r3, r2
 800988e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009898:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800989c:	d13b      	bne.n	8009916 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	781b      	ldrb	r3, [r3, #0]
 80098a2:	015a      	lsls	r2, r3, #5
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	4413      	add	r3, r2
 80098a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	683a      	ldr	r2, [r7, #0]
 80098b0:	7812      	ldrb	r2, [r2, #0]
 80098b2:	0151      	lsls	r1, r2, #5
 80098b4:	693a      	ldr	r2, [r7, #16]
 80098b6:	440a      	add	r2, r1
 80098b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80098c0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	015a      	lsls	r2, r3, #5
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	4413      	add	r3, r2
 80098cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	683a      	ldr	r2, [r7, #0]
 80098d4:	7812      	ldrb	r2, [r2, #0]
 80098d6:	0151      	lsls	r1, r2, #5
 80098d8:	693a      	ldr	r2, [r7, #16]
 80098da:	440a      	add	r2, r1
 80098dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80098e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	3301      	adds	r3, #1
 80098ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d902      	bls.n	80098fc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80098f6:	2301      	movs	r3, #1
 80098f8:	75fb      	strb	r3, [r7, #23]
          break;
 80098fa:	e00c      	b.n	8009916 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	015a      	lsls	r2, r3, #5
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	4413      	add	r3, r2
 8009906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009910:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009914:	d0e7      	beq.n	80098e6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009916:	7dfb      	ldrb	r3, [r7, #23]
}
 8009918:	4618      	mov	r0, r3
 800991a:	371c      	adds	r7, #28
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009924:	b480      	push	{r7}
 8009926:	b089      	sub	sp, #36	; 0x24
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	4611      	mov	r1, r2
 8009930:	461a      	mov	r2, r3
 8009932:	460b      	mov	r3, r1
 8009934:	71fb      	strb	r3, [r7, #7]
 8009936:	4613      	mov	r3, r2
 8009938:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009942:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009946:	2b00      	cmp	r3, #0
 8009948:	d123      	bne.n	8009992 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800994a:	88bb      	ldrh	r3, [r7, #4]
 800994c:	3303      	adds	r3, #3
 800994e:	089b      	lsrs	r3, r3, #2
 8009950:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009952:	2300      	movs	r3, #0
 8009954:	61bb      	str	r3, [r7, #24]
 8009956:	e018      	b.n	800998a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009958:	79fb      	ldrb	r3, [r7, #7]
 800995a:	031a      	lsls	r2, r3, #12
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	4413      	add	r3, r2
 8009960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009964:	461a      	mov	r2, r3
 8009966:	69fb      	ldr	r3, [r7, #28]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	3301      	adds	r3, #1
 8009970:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009972:	69fb      	ldr	r3, [r7, #28]
 8009974:	3301      	adds	r3, #1
 8009976:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	3301      	adds	r3, #1
 800997c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	3301      	adds	r3, #1
 8009982:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009984:	69bb      	ldr	r3, [r7, #24]
 8009986:	3301      	adds	r3, #1
 8009988:	61bb      	str	r3, [r7, #24]
 800998a:	69ba      	ldr	r2, [r7, #24]
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	429a      	cmp	r2, r3
 8009990:	d3e2      	bcc.n	8009958 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009992:	2300      	movs	r3, #0
}
 8009994:	4618      	mov	r0, r3
 8009996:	3724      	adds	r7, #36	; 0x24
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b08b      	sub	sp, #44	; 0x2c
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	60b9      	str	r1, [r7, #8]
 80099aa:	4613      	mov	r3, r2
 80099ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80099b6:	88fb      	ldrh	r3, [r7, #6]
 80099b8:	089b      	lsrs	r3, r3, #2
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80099be:	88fb      	ldrh	r3, [r7, #6]
 80099c0:	f003 0303 	and.w	r3, r3, #3
 80099c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80099c6:	2300      	movs	r3, #0
 80099c8:	623b      	str	r3, [r7, #32]
 80099ca:	e014      	b.n	80099f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80099cc:	69bb      	ldr	r3, [r7, #24]
 80099ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d6:	601a      	str	r2, [r3, #0]
    pDest++;
 80099d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099da:	3301      	adds	r3, #1
 80099dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80099de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e0:	3301      	adds	r3, #1
 80099e2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80099e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e6:	3301      	adds	r3, #1
 80099e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80099ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ec:	3301      	adds	r3, #1
 80099ee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80099f0:	6a3b      	ldr	r3, [r7, #32]
 80099f2:	3301      	adds	r3, #1
 80099f4:	623b      	str	r3, [r7, #32]
 80099f6:	6a3a      	ldr	r2, [r7, #32]
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d3e6      	bcc.n	80099cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80099fe:	8bfb      	ldrh	r3, [r7, #30]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d01e      	beq.n	8009a42 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009a04:	2300      	movs	r3, #0
 8009a06:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009a08:	69bb      	ldr	r3, [r7, #24]
 8009a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a0e:	461a      	mov	r2, r3
 8009a10:	f107 0310 	add.w	r3, r7, #16
 8009a14:	6812      	ldr	r2, [r2, #0]
 8009a16:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009a18:	693a      	ldr	r2, [r7, #16]
 8009a1a:	6a3b      	ldr	r3, [r7, #32]
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	00db      	lsls	r3, r3, #3
 8009a20:	fa22 f303 	lsr.w	r3, r2, r3
 8009a24:	b2da      	uxtb	r2, r3
 8009a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a28:	701a      	strb	r2, [r3, #0]
      i++;
 8009a2a:	6a3b      	ldr	r3, [r7, #32]
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a32:	3301      	adds	r3, #1
 8009a34:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009a36:	8bfb      	ldrh	r3, [r7, #30]
 8009a38:	3b01      	subs	r3, #1
 8009a3a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009a3c:	8bfb      	ldrh	r3, [r7, #30]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d1ea      	bne.n	8009a18 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	372c      	adds	r7, #44	; 0x2c
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr

08009a50 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b085      	sub	sp, #20
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	785b      	ldrb	r3, [r3, #1]
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d12c      	bne.n	8009ac6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	015a      	lsls	r2, r3, #5
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	4413      	add	r3, r2
 8009a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	db12      	blt.n	8009aa4 <USB_EPSetStall+0x54>
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d00f      	beq.n	8009aa4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	015a      	lsls	r2, r3, #5
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	4413      	add	r3, r2
 8009a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	68ba      	ldr	r2, [r7, #8]
 8009a94:	0151      	lsls	r1, r2, #5
 8009a96:	68fa      	ldr	r2, [r7, #12]
 8009a98:	440a      	add	r2, r1
 8009a9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009aa2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	015a      	lsls	r2, r3, #5
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	4413      	add	r3, r2
 8009aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	68ba      	ldr	r2, [r7, #8]
 8009ab4:	0151      	lsls	r1, r2, #5
 8009ab6:	68fa      	ldr	r2, [r7, #12]
 8009ab8:	440a      	add	r2, r1
 8009aba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009abe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009ac2:	6013      	str	r3, [r2, #0]
 8009ac4:	e02b      	b.n	8009b1e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	015a      	lsls	r2, r3, #5
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	4413      	add	r3, r2
 8009ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	db12      	blt.n	8009afe <USB_EPSetStall+0xae>
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d00f      	beq.n	8009afe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	015a      	lsls	r2, r3, #5
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	4413      	add	r3, r2
 8009ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	68ba      	ldr	r2, [r7, #8]
 8009aee:	0151      	lsls	r1, r2, #5
 8009af0:	68fa      	ldr	r2, [r7, #12]
 8009af2:	440a      	add	r2, r1
 8009af4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009af8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009afc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	015a      	lsls	r2, r3, #5
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	4413      	add	r3, r2
 8009b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	68ba      	ldr	r2, [r7, #8]
 8009b0e:	0151      	lsls	r1, r2, #5
 8009b10:	68fa      	ldr	r2, [r7, #12]
 8009b12:	440a      	add	r2, r1
 8009b14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b1c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b1e:	2300      	movs	r3, #0
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3714      	adds	r7, #20
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b085      	sub	sp, #20
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	785b      	ldrb	r3, [r3, #1]
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d128      	bne.n	8009b9a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	015a      	lsls	r2, r3, #5
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	4413      	add	r3, r2
 8009b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	68ba      	ldr	r2, [r7, #8]
 8009b58:	0151      	lsls	r1, r2, #5
 8009b5a:	68fa      	ldr	r2, [r7, #12]
 8009b5c:	440a      	add	r2, r1
 8009b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009b66:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	791b      	ldrb	r3, [r3, #4]
 8009b6c:	2b03      	cmp	r3, #3
 8009b6e:	d003      	beq.n	8009b78 <USB_EPClearStall+0x4c>
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	791b      	ldrb	r3, [r3, #4]
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	d138      	bne.n	8009bea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	015a      	lsls	r2, r3, #5
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	4413      	add	r3, r2
 8009b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	68ba      	ldr	r2, [r7, #8]
 8009b88:	0151      	lsls	r1, r2, #5
 8009b8a:	68fa      	ldr	r2, [r7, #12]
 8009b8c:	440a      	add	r2, r1
 8009b8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b96:	6013      	str	r3, [r2, #0]
 8009b98:	e027      	b.n	8009bea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	015a      	lsls	r2, r3, #5
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	4413      	add	r3, r2
 8009ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	68ba      	ldr	r2, [r7, #8]
 8009baa:	0151      	lsls	r1, r2, #5
 8009bac:	68fa      	ldr	r2, [r7, #12]
 8009bae:	440a      	add	r2, r1
 8009bb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bb4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009bb8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	791b      	ldrb	r3, [r3, #4]
 8009bbe:	2b03      	cmp	r3, #3
 8009bc0:	d003      	beq.n	8009bca <USB_EPClearStall+0x9e>
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	791b      	ldrb	r3, [r3, #4]
 8009bc6:	2b02      	cmp	r3, #2
 8009bc8:	d10f      	bne.n	8009bea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	015a      	lsls	r2, r3, #5
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	68ba      	ldr	r2, [r7, #8]
 8009bda:	0151      	lsls	r1, r2, #5
 8009bdc:	68fa      	ldr	r2, [r7, #12]
 8009bde:	440a      	add	r2, r1
 8009be0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009be8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009bea:	2300      	movs	r3, #0
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3714      	adds	r7, #20
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr

08009bf8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b085      	sub	sp, #20
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	460b      	mov	r3, r1
 8009c02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	68fa      	ldr	r2, [r7, #12]
 8009c12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c16:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009c1a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	78fb      	ldrb	r3, [r7, #3]
 8009c26:	011b      	lsls	r3, r3, #4
 8009c28:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009c2c:	68f9      	ldr	r1, [r7, #12]
 8009c2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c32:	4313      	orrs	r3, r2
 8009c34:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009c36:	2300      	movs	r3, #0
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3714      	adds	r7, #20
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b085      	sub	sp, #20
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	68fa      	ldr	r2, [r7, #12]
 8009c5a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009c5e:	f023 0303 	bic.w	r3, r3, #3
 8009c62:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	68fa      	ldr	r2, [r7, #12]
 8009c6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c72:	f023 0302 	bic.w	r3, r3, #2
 8009c76:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009c78:	2300      	movs	r3, #0
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3714      	adds	r7, #20
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr

08009c86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009c86:	b480      	push	{r7}
 8009c88:	b085      	sub	sp, #20
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	68fa      	ldr	r2, [r7, #12]
 8009c9c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009ca0:	f023 0303 	bic.w	r3, r3, #3
 8009ca4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	68fa      	ldr	r2, [r7, #12]
 8009cb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cb4:	f043 0302 	orr.w	r3, r3, #2
 8009cb8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009cba:	2300      	movs	r3, #0
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3714      	adds	r7, #20
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b085      	sub	sp, #20
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	695b      	ldr	r3, [r3, #20]
 8009cd4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	699b      	ldr	r3, [r3, #24]
 8009cda:	68fa      	ldr	r2, [r7, #12]
 8009cdc:	4013      	ands	r3, r2
 8009cde:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3714      	adds	r7, #20
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr

08009cee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009cee:	b480      	push	{r7}
 8009cf0:	b085      	sub	sp, #20
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d00:	699b      	ldr	r3, [r3, #24]
 8009d02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d0a:	69db      	ldr	r3, [r3, #28]
 8009d0c:	68ba      	ldr	r2, [r7, #8]
 8009d0e:	4013      	ands	r3, r2
 8009d10:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	0c1b      	lsrs	r3, r3, #16
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3714      	adds	r7, #20
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d20:	4770      	bx	lr

08009d22 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d22:	b480      	push	{r7}
 8009d24:	b085      	sub	sp, #20
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d34:	699b      	ldr	r3, [r3, #24]
 8009d36:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d3e:	69db      	ldr	r3, [r3, #28]
 8009d40:	68ba      	ldr	r2, [r7, #8]
 8009d42:	4013      	ands	r3, r2
 8009d44:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	b29b      	uxth	r3, r3
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3714      	adds	r7, #20
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr

08009d56 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009d56:	b480      	push	{r7}
 8009d58:	b085      	sub	sp, #20
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
 8009d5e:	460b      	mov	r3, r1
 8009d60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009d66:	78fb      	ldrb	r3, [r7, #3]
 8009d68:	015a      	lsls	r2, r3, #5
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d72:	689b      	ldr	r3, [r3, #8]
 8009d74:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d7c:	695b      	ldr	r3, [r3, #20]
 8009d7e:	68ba      	ldr	r2, [r7, #8]
 8009d80:	4013      	ands	r3, r2
 8009d82:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009d84:	68bb      	ldr	r3, [r7, #8]
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3714      	adds	r7, #20
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr

08009d92 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009d92:	b480      	push	{r7}
 8009d94:	b087      	sub	sp, #28
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009da8:	691b      	ldr	r3, [r3, #16]
 8009daa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009db4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009db6:	78fb      	ldrb	r3, [r7, #3]
 8009db8:	f003 030f 	and.w	r3, r3, #15
 8009dbc:	68fa      	ldr	r2, [r7, #12]
 8009dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8009dc2:	01db      	lsls	r3, r3, #7
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	693a      	ldr	r2, [r7, #16]
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009dcc:	78fb      	ldrb	r3, [r7, #3]
 8009dce:	015a      	lsls	r2, r3, #5
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	4413      	add	r3, r2
 8009dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dd8:	689b      	ldr	r3, [r3, #8]
 8009dda:	693a      	ldr	r2, [r7, #16]
 8009ddc:	4013      	ands	r3, r2
 8009dde:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009de0:	68bb      	ldr	r3, [r7, #8]
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	371c      	adds	r7, #28
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr

08009dee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009dee:	b480      	push	{r7}
 8009df0:	b083      	sub	sp, #12
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	695b      	ldr	r3, [r3, #20]
 8009dfa:	f003 0301 	and.w	r3, r3, #1
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	370c      	adds	r7, #12
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr
	...

08009e0c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b085      	sub	sp, #20
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e1e:	681a      	ldr	r2, [r3, #0]
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e26:	4619      	mov	r1, r3
 8009e28:	4b09      	ldr	r3, [pc, #36]	; (8009e50 <USB_ActivateSetup+0x44>)
 8009e2a:	4013      	ands	r3, r2
 8009e2c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	68fa      	ldr	r2, [r7, #12]
 8009e38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e42:	2300      	movs	r3, #0
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3714      	adds	r7, #20
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr
 8009e50:	fffff800 	.word	0xfffff800

08009e54 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b087      	sub	sp, #28
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	607a      	str	r2, [r7, #4]
 8009e60:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	333c      	adds	r3, #60	; 0x3c
 8009e6a:	3304      	adds	r3, #4
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	4a26      	ldr	r2, [pc, #152]	; (8009f0c <USB_EP0_OutStart+0xb8>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d90a      	bls.n	8009e8e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e88:	d101      	bne.n	8009e8e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	e037      	b.n	8009efe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e94:	461a      	mov	r2, r3
 8009e96:	2300      	movs	r3, #0
 8009e98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ea0:	691b      	ldr	r3, [r3, #16]
 8009ea2:	697a      	ldr	r2, [r7, #20]
 8009ea4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ea8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009eac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eb4:	691b      	ldr	r3, [r3, #16]
 8009eb6:	697a      	ldr	r2, [r7, #20]
 8009eb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ebc:	f043 0318 	orr.w	r3, r3, #24
 8009ec0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ec8:	691b      	ldr	r3, [r3, #16]
 8009eca:	697a      	ldr	r2, [r7, #20]
 8009ecc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ed0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009ed4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009ed6:	7afb      	ldrb	r3, [r7, #11]
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d10f      	bne.n	8009efc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	697a      	ldr	r2, [r7, #20]
 8009ef2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ef6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009efa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009efc:	2300      	movs	r3, #0
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	371c      	adds	r7, #28
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr
 8009f0a:	bf00      	nop
 8009f0c:	4f54300a 	.word	0x4f54300a

08009f10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b085      	sub	sp, #20
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	4a13      	ldr	r2, [pc, #76]	; (8009f74 <USB_CoreReset+0x64>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d901      	bls.n	8009f2e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009f2a:	2303      	movs	r3, #3
 8009f2c:	e01b      	b.n	8009f66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	691b      	ldr	r3, [r3, #16]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	daf2      	bge.n	8009f1c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009f36:	2300      	movs	r3, #0
 8009f38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	691b      	ldr	r3, [r3, #16]
 8009f3e:	f043 0201 	orr.w	r2, r3, #1
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	3301      	adds	r3, #1
 8009f4a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	4a09      	ldr	r2, [pc, #36]	; (8009f74 <USB_CoreReset+0x64>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d901      	bls.n	8009f58 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009f54:	2303      	movs	r3, #3
 8009f56:	e006      	b.n	8009f66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	691b      	ldr	r3, [r3, #16]
 8009f5c:	f003 0301 	and.w	r3, r3, #1
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d0f0      	beq.n	8009f46 <USB_CoreReset+0x36>

  return HAL_OK;
 8009f64:	2300      	movs	r3, #0
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3714      	adds	r7, #20
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop
 8009f74:	00030d40 	.word	0x00030d40

08009f78 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009f7c:	4904      	ldr	r1, [pc, #16]	; (8009f90 <MX_FATFS_Init+0x18>)
 8009f7e:	4805      	ldr	r0, [pc, #20]	; (8009f94 <MX_FATFS_Init+0x1c>)
 8009f80:	f005 fa82 	bl	800f488 <FATFS_LinkDriver>
 8009f84:	4603      	mov	r3, r0
 8009f86:	461a      	mov	r2, r3
 8009f88:	4b03      	ldr	r3, [pc, #12]	; (8009f98 <MX_FATFS_Init+0x20>)
 8009f8a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009f8c:	bf00      	nop
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	20002dfc 	.word	0x20002dfc
 8009f94:	080119d0 	.word	0x080119d0
 8009f98:	20002df8 	.word	0x20002df8

08009f9c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009fa0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr

08009fac <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009fb6:	f000 f888 	bl	800a0ca <BSP_SD_IsDetected>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d001      	beq.n	8009fc4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8009fc0:	2302      	movs	r3, #2
 8009fc2:	e005      	b.n	8009fd0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8009fc4:	4804      	ldr	r0, [pc, #16]	; (8009fd8 <BSP_SD_Init+0x2c>)
 8009fc6:	f7fc f845 	bl	8006054 <HAL_SD_Init>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8009fce:	79fb      	ldrb	r3, [r7, #7]
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3708      	adds	r7, #8
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	200001cc 	.word	0x200001cc

08009fdc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b086      	sub	sp, #24
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	68ba      	ldr	r2, [r7, #8]
 8009ff0:	68f9      	ldr	r1, [r7, #12]
 8009ff2:	4806      	ldr	r0, [pc, #24]	; (800a00c <BSP_SD_ReadBlocks_DMA+0x30>)
 8009ff4:	f7fc f8e6 	bl	80061c4 <HAL_SD_ReadBlocks_DMA>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d001      	beq.n	800a002 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009ffe:	2301      	movs	r3, #1
 800a000:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a002:	7dfb      	ldrb	r3, [r7, #23]
}
 800a004:	4618      	mov	r0, r3
 800a006:	3718      	adds	r7, #24
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}
 800a00c:	200001cc 	.word	0x200001cc

0800a010 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b086      	sub	sp, #24
 800a014:	af00      	add	r7, sp, #0
 800a016:	60f8      	str	r0, [r7, #12]
 800a018:	60b9      	str	r1, [r7, #8]
 800a01a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a01c:	2300      	movs	r3, #0
 800a01e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	68ba      	ldr	r2, [r7, #8]
 800a024:	68f9      	ldr	r1, [r7, #12]
 800a026:	4806      	ldr	r0, [pc, #24]	; (800a040 <BSP_SD_WriteBlocks_DMA+0x30>)
 800a028:	f7fc f9ae 	bl	8006388 <HAL_SD_WriteBlocks_DMA>
 800a02c:	4603      	mov	r3, r0
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d001      	beq.n	800a036 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a032:	2301      	movs	r3, #1
 800a034:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a036:	7dfb      	ldrb	r3, [r7, #23]
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3718      	adds	r7, #24
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	200001cc 	.word	0x200001cc

0800a044 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a048:	4805      	ldr	r0, [pc, #20]	; (800a060 <BSP_SD_GetCardState+0x1c>)
 800a04a:	f7fc fdd3 	bl	8006bf4 <HAL_SD_GetCardState>
 800a04e:	4603      	mov	r3, r0
 800a050:	2b04      	cmp	r3, #4
 800a052:	bf14      	ite	ne
 800a054:	2301      	movne	r3, #1
 800a056:	2300      	moveq	r3, #0
 800a058:	b2db      	uxtb	r3, r3
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	200001cc 	.word	0x200001cc

0800a064 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b082      	sub	sp, #8
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a06c:	6879      	ldr	r1, [r7, #4]
 800a06e:	4803      	ldr	r0, [pc, #12]	; (800a07c <BSP_SD_GetCardInfo+0x18>)
 800a070:	f7fc fd94 	bl	8006b9c <HAL_SD_GetCardInfo>
}
 800a074:	bf00      	nop
 800a076:	3708      	adds	r7, #8
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	200001cc 	.word	0x200001cc

0800a080 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b082      	sub	sp, #8
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800a088:	f000 f818 	bl	800a0bc <BSP_SD_AbortCallback>
}
 800a08c:	bf00      	nop
 800a08e:	3708      	adds	r7, #8
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a09c:	f000 f9a8 	bl	800a3f0 <BSP_SD_WriteCpltCallback>
}
 800a0a0:	bf00      	nop
 800a0a2:	3708      	adds	r7, #8
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a0b0:	f000 f9aa 	bl	800a408 <BSP_SD_ReadCpltCallback>
}
 800a0b4:	bf00      	nop
 800a0b6:	3708      	adds	r7, #8
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	af00      	add	r7, sp, #0

}
 800a0c0:	bf00      	nop
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr

0800a0ca <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	b082      	sub	sp, #8
 800a0ce:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a0d4:	f000 f80c 	bl	800a0f0 <BSP_PlatformIsDetected>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d101      	bne.n	800a0e2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a0e2:	79fb      	ldrb	r3, [r7, #7]
 800a0e4:	b2db      	uxtb	r3, r3
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3708      	adds	r7, #8
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
	...

0800a0f0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 800a0fa:	2104      	movs	r1, #4
 800a0fc:	4806      	ldr	r0, [pc, #24]	; (800a118 <BSP_PlatformIsDetected+0x28>)
 800a0fe:	f7f9 f8e3 	bl	80032c8 <HAL_GPIO_ReadPin>
 800a102:	4603      	mov	r3, r0
 800a104:	2b01      	cmp	r3, #1
 800a106:	d001      	beq.n	800a10c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800a108:	2300      	movs	r3, #0
 800a10a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800a10c:	79fb      	ldrb	r3, [r7, #7]
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3708      	adds	r7, #8
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop
 800a118:	40021800 	.word	0x40021800

0800a11c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800a124:	f7f7 fc38 	bl	8001998 <HAL_GetTick>
 800a128:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800a12a:	e006      	b.n	800a13a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a12c:	f7ff ff8a 	bl	800a044 <BSP_SD_GetCardState>
 800a130:	4603      	mov	r3, r0
 800a132:	2b00      	cmp	r3, #0
 800a134:	d101      	bne.n	800a13a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a136:	2300      	movs	r3, #0
 800a138:	e009      	b.n	800a14e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800a13a:	f7f7 fc2d 	bl	8001998 <HAL_GetTick>
 800a13e:	4602      	mov	r2, r0
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	1ad3      	subs	r3, r2, r3
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	429a      	cmp	r2, r3
 800a148:	d8f0      	bhi.n	800a12c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a14a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3710      	adds	r7, #16
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
	...

0800a158 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b082      	sub	sp, #8
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	4603      	mov	r3, r0
 800a160:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a162:	4b0b      	ldr	r3, [pc, #44]	; (800a190 <SD_CheckStatus+0x38>)
 800a164:	2201      	movs	r2, #1
 800a166:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a168:	f7ff ff6c 	bl	800a044 <BSP_SD_GetCardState>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d107      	bne.n	800a182 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a172:	4b07      	ldr	r3, [pc, #28]	; (800a190 <SD_CheckStatus+0x38>)
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	b2db      	uxtb	r3, r3
 800a178:	f023 0301 	bic.w	r3, r3, #1
 800a17c:	b2da      	uxtb	r2, r3
 800a17e:	4b04      	ldr	r3, [pc, #16]	; (800a190 <SD_CheckStatus+0x38>)
 800a180:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a182:	4b03      	ldr	r3, [pc, #12]	; (800a190 <SD_CheckStatus+0x38>)
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	b2db      	uxtb	r3, r3
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3708      	adds	r7, #8
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	20000009 	.word	0x20000009

0800a194 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	4603      	mov	r3, r0
 800a19c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a19e:	f7ff ff05 	bl	8009fac <BSP_SD_Init>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d107      	bne.n	800a1b8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800a1a8:	79fb      	ldrb	r3, [r7, #7]
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7ff ffd4 	bl	800a158 <SD_CheckStatus>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	4b04      	ldr	r3, [pc, #16]	; (800a1c8 <SD_initialize+0x34>)
 800a1b6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a1b8:	4b03      	ldr	r3, [pc, #12]	; (800a1c8 <SD_initialize+0x34>)
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	b2db      	uxtb	r3, r3
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3708      	adds	r7, #8
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}
 800a1c6:	bf00      	nop
 800a1c8:	20000009 	.word	0x20000009

0800a1cc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b082      	sub	sp, #8
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a1d6:	79fb      	ldrb	r3, [r7, #7]
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f7ff ffbd 	bl	800a158 <SD_CheckStatus>
 800a1de:	4603      	mov	r3, r0
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3708      	adds	r7, #8
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b086      	sub	sp, #24
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	60b9      	str	r1, [r7, #8]
 800a1f0:	607a      	str	r2, [r7, #4]
 800a1f2:	603b      	str	r3, [r7, #0]
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a1fc:	f247 5030 	movw	r0, #30000	; 0x7530
 800a200:	f7ff ff8c 	bl	800a11c <SD_CheckStatusWithTimeout>
 800a204:	4603      	mov	r3, r0
 800a206:	2b00      	cmp	r3, #0
 800a208:	da01      	bge.n	800a20e <SD_read+0x26>
  {
    return res;
 800a20a:	7dfb      	ldrb	r3, [r7, #23]
 800a20c:	e03b      	b.n	800a286 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800a20e:	683a      	ldr	r2, [r7, #0]
 800a210:	6879      	ldr	r1, [r7, #4]
 800a212:	68b8      	ldr	r0, [r7, #8]
 800a214:	f7ff fee2 	bl	8009fdc <BSP_SD_ReadBlocks_DMA>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d132      	bne.n	800a284 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800a21e:	4b1c      	ldr	r3, [pc, #112]	; (800a290 <SD_read+0xa8>)
 800a220:	2200      	movs	r2, #0
 800a222:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800a224:	f7f7 fbb8 	bl	8001998 <HAL_GetTick>
 800a228:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a22a:	bf00      	nop
 800a22c:	4b18      	ldr	r3, [pc, #96]	; (800a290 <SD_read+0xa8>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d108      	bne.n	800a246 <SD_read+0x5e>
 800a234:	f7f7 fbb0 	bl	8001998 <HAL_GetTick>
 800a238:	4602      	mov	r2, r0
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	1ad3      	subs	r3, r2, r3
 800a23e:	f247 522f 	movw	r2, #29999	; 0x752f
 800a242:	4293      	cmp	r3, r2
 800a244:	d9f2      	bls.n	800a22c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800a246:	4b12      	ldr	r3, [pc, #72]	; (800a290 <SD_read+0xa8>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d102      	bne.n	800a254 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	75fb      	strb	r3, [r7, #23]
 800a252:	e017      	b.n	800a284 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800a254:	4b0e      	ldr	r3, [pc, #56]	; (800a290 <SD_read+0xa8>)
 800a256:	2200      	movs	r2, #0
 800a258:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a25a:	f7f7 fb9d 	bl	8001998 <HAL_GetTick>
 800a25e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a260:	e007      	b.n	800a272 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a262:	f7ff feef 	bl	800a044 <BSP_SD_GetCardState>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d102      	bne.n	800a272 <SD_read+0x8a>
          {
            res = RES_OK;
 800a26c:	2300      	movs	r3, #0
 800a26e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800a270:	e008      	b.n	800a284 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a272:	f7f7 fb91 	bl	8001998 <HAL_GetTick>
 800a276:	4602      	mov	r2, r0
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	1ad3      	subs	r3, r2, r3
 800a27c:	f247 522f 	movw	r2, #29999	; 0x752f
 800a280:	4293      	cmp	r3, r2
 800a282:	d9ee      	bls.n	800a262 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800a284:	7dfb      	ldrb	r3, [r7, #23]
}
 800a286:	4618      	mov	r0, r3
 800a288:	3718      	adds	r7, #24
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	20003268 	.word	0x20003268

0800a294 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b086      	sub	sp, #24
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60b9      	str	r1, [r7, #8]
 800a29c:	607a      	str	r2, [r7, #4]
 800a29e:	603b      	str	r3, [r7, #0]
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800a2a8:	4b24      	ldr	r3, [pc, #144]	; (800a33c <SD_write+0xa8>)
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a2ae:	f247 5030 	movw	r0, #30000	; 0x7530
 800a2b2:	f7ff ff33 	bl	800a11c <SD_CheckStatusWithTimeout>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	da01      	bge.n	800a2c0 <SD_write+0x2c>
  {
    return res;
 800a2bc:	7dfb      	ldrb	r3, [r7, #23]
 800a2be:	e038      	b.n	800a332 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800a2c0:	683a      	ldr	r2, [r7, #0]
 800a2c2:	6879      	ldr	r1, [r7, #4]
 800a2c4:	68b8      	ldr	r0, [r7, #8]
 800a2c6:	f7ff fea3 	bl	800a010 <BSP_SD_WriteBlocks_DMA>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d12f      	bne.n	800a330 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800a2d0:	f7f7 fb62 	bl	8001998 <HAL_GetTick>
 800a2d4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a2d6:	bf00      	nop
 800a2d8:	4b18      	ldr	r3, [pc, #96]	; (800a33c <SD_write+0xa8>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d108      	bne.n	800a2f2 <SD_write+0x5e>
 800a2e0:	f7f7 fb5a 	bl	8001998 <HAL_GetTick>
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	1ad3      	subs	r3, r2, r3
 800a2ea:	f247 522f 	movw	r2, #29999	; 0x752f
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d9f2      	bls.n	800a2d8 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800a2f2:	4b12      	ldr	r3, [pc, #72]	; (800a33c <SD_write+0xa8>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d102      	bne.n	800a300 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	75fb      	strb	r3, [r7, #23]
 800a2fe:	e017      	b.n	800a330 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800a300:	4b0e      	ldr	r3, [pc, #56]	; (800a33c <SD_write+0xa8>)
 800a302:	2200      	movs	r2, #0
 800a304:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a306:	f7f7 fb47 	bl	8001998 <HAL_GetTick>
 800a30a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a30c:	e007      	b.n	800a31e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a30e:	f7ff fe99 	bl	800a044 <BSP_SD_GetCardState>
 800a312:	4603      	mov	r3, r0
 800a314:	2b00      	cmp	r3, #0
 800a316:	d102      	bne.n	800a31e <SD_write+0x8a>
          {
            res = RES_OK;
 800a318:	2300      	movs	r3, #0
 800a31a:	75fb      	strb	r3, [r7, #23]
            break;
 800a31c:	e008      	b.n	800a330 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a31e:	f7f7 fb3b 	bl	8001998 <HAL_GetTick>
 800a322:	4602      	mov	r2, r0
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	1ad3      	subs	r3, r2, r3
 800a328:	f247 522f 	movw	r2, #29999	; 0x752f
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d9ee      	bls.n	800a30e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800a330:	7dfb      	ldrb	r3, [r7, #23]
}
 800a332:	4618      	mov	r0, r3
 800a334:	3718      	adds	r7, #24
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	20003264 	.word	0x20003264

0800a340 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b08c      	sub	sp, #48	; 0x30
 800a344:	af00      	add	r7, sp, #0
 800a346:	4603      	mov	r3, r0
 800a348:	603a      	str	r2, [r7, #0]
 800a34a:	71fb      	strb	r3, [r7, #7]
 800a34c:	460b      	mov	r3, r1
 800a34e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a350:	2301      	movs	r3, #1
 800a352:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a356:	4b25      	ldr	r3, [pc, #148]	; (800a3ec <SD_ioctl+0xac>)
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	f003 0301 	and.w	r3, r3, #1
 800a360:	2b00      	cmp	r3, #0
 800a362:	d001      	beq.n	800a368 <SD_ioctl+0x28>
 800a364:	2303      	movs	r3, #3
 800a366:	e03c      	b.n	800a3e2 <SD_ioctl+0xa2>

  switch (cmd)
 800a368:	79bb      	ldrb	r3, [r7, #6]
 800a36a:	2b03      	cmp	r3, #3
 800a36c:	d834      	bhi.n	800a3d8 <SD_ioctl+0x98>
 800a36e:	a201      	add	r2, pc, #4	; (adr r2, 800a374 <SD_ioctl+0x34>)
 800a370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a374:	0800a385 	.word	0x0800a385
 800a378:	0800a38d 	.word	0x0800a38d
 800a37c:	0800a3a5 	.word	0x0800a3a5
 800a380:	0800a3bf 	.word	0x0800a3bf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a384:	2300      	movs	r3, #0
 800a386:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a38a:	e028      	b.n	800a3de <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a38c:	f107 030c 	add.w	r3, r7, #12
 800a390:	4618      	mov	r0, r3
 800a392:	f7ff fe67 	bl	800a064 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a39c:	2300      	movs	r3, #0
 800a39e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a3a2:	e01c      	b.n	800a3de <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a3a4:	f107 030c 	add.w	r3, r7, #12
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7ff fe5b 	bl	800a064 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b0:	b29a      	uxth	r2, r3
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a3bc:	e00f      	b.n	800a3de <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a3be:	f107 030c 	add.w	r3, r7, #12
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f7ff fe4e 	bl	800a064 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ca:	0a5a      	lsrs	r2, r3, #9
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a3d6:	e002      	b.n	800a3de <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a3d8:	2304      	movs	r3, #4
 800a3da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a3de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3730      	adds	r7, #48	; 0x30
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	20000009 	.word	0x20000009

0800a3f0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800a3f4:	4b03      	ldr	r3, [pc, #12]	; (800a404 <BSP_SD_WriteCpltCallback+0x14>)
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	601a      	str	r2, [r3, #0]
}
 800a3fa:	bf00      	nop
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr
 800a404:	20003264 	.word	0x20003264

0800a408 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800a408:	b480      	push	{r7}
 800a40a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800a40c:	4b03      	ldr	r3, [pc, #12]	; (800a41c <BSP_SD_ReadCpltCallback+0x14>)
 800a40e:	2201      	movs	r2, #1
 800a410:	601a      	str	r2, [r3, #0]
}
 800a412:	bf00      	nop
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr
 800a41c:	20003268 	.word	0x20003268

0800a420 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	460b      	mov	r3, r1
 800a42a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a42c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a430:	f005 fe86 	bl	8010140 <malloc>
 800a434:	4603      	mov	r3, r0
 800a436:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d109      	bne.n	800a452 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	32b0      	adds	r2, #176	; 0xb0
 800a448:	2100      	movs	r1, #0
 800a44a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a44e:	2302      	movs	r3, #2
 800a450:	e0d4      	b.n	800a5fc <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a452:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a456:	2100      	movs	r1, #0
 800a458:	68f8      	ldr	r0, [r7, #12]
 800a45a:	f006 f92c 	bl	80106b6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	32b0      	adds	r2, #176	; 0xb0
 800a468:	68f9      	ldr	r1, [r7, #12]
 800a46a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	32b0      	adds	r2, #176	; 0xb0
 800a478:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	7c1b      	ldrb	r3, [r3, #16]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d138      	bne.n	800a4fc <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a48a:	4b5e      	ldr	r3, [pc, #376]	; (800a604 <USBD_CDC_Init+0x1e4>)
 800a48c:	7819      	ldrb	r1, [r3, #0]
 800a48e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a492:	2202      	movs	r2, #2
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f005 fcb0 	bl	800fdfa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a49a:	4b5a      	ldr	r3, [pc, #360]	; (800a604 <USBD_CDC_Init+0x1e4>)
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	f003 020f 	and.w	r2, r3, #15
 800a4a2:	6879      	ldr	r1, [r7, #4]
 800a4a4:	4613      	mov	r3, r2
 800a4a6:	009b      	lsls	r3, r3, #2
 800a4a8:	4413      	add	r3, r2
 800a4aa:	009b      	lsls	r3, r3, #2
 800a4ac:	440b      	add	r3, r1
 800a4ae:	3324      	adds	r3, #36	; 0x24
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a4b4:	4b54      	ldr	r3, [pc, #336]	; (800a608 <USBD_CDC_Init+0x1e8>)
 800a4b6:	7819      	ldrb	r1, [r3, #0]
 800a4b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4bc:	2202      	movs	r2, #2
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f005 fc9b 	bl	800fdfa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a4c4:	4b50      	ldr	r3, [pc, #320]	; (800a608 <USBD_CDC_Init+0x1e8>)
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	f003 020f 	and.w	r2, r3, #15
 800a4cc:	6879      	ldr	r1, [r7, #4]
 800a4ce:	4613      	mov	r3, r2
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	4413      	add	r3, r2
 800a4d4:	009b      	lsls	r3, r3, #2
 800a4d6:	440b      	add	r3, r1
 800a4d8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a4dc:	2201      	movs	r2, #1
 800a4de:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a4e0:	4b4a      	ldr	r3, [pc, #296]	; (800a60c <USBD_CDC_Init+0x1ec>)
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	f003 020f 	and.w	r2, r3, #15
 800a4e8:	6879      	ldr	r1, [r7, #4]
 800a4ea:	4613      	mov	r3, r2
 800a4ec:	009b      	lsls	r3, r3, #2
 800a4ee:	4413      	add	r3, r2
 800a4f0:	009b      	lsls	r3, r3, #2
 800a4f2:	440b      	add	r3, r1
 800a4f4:	3326      	adds	r3, #38	; 0x26
 800a4f6:	2210      	movs	r2, #16
 800a4f8:	801a      	strh	r2, [r3, #0]
 800a4fa:	e035      	b.n	800a568 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a4fc:	4b41      	ldr	r3, [pc, #260]	; (800a604 <USBD_CDC_Init+0x1e4>)
 800a4fe:	7819      	ldrb	r1, [r3, #0]
 800a500:	2340      	movs	r3, #64	; 0x40
 800a502:	2202      	movs	r2, #2
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f005 fc78 	bl	800fdfa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a50a:	4b3e      	ldr	r3, [pc, #248]	; (800a604 <USBD_CDC_Init+0x1e4>)
 800a50c:	781b      	ldrb	r3, [r3, #0]
 800a50e:	f003 020f 	and.w	r2, r3, #15
 800a512:	6879      	ldr	r1, [r7, #4]
 800a514:	4613      	mov	r3, r2
 800a516:	009b      	lsls	r3, r3, #2
 800a518:	4413      	add	r3, r2
 800a51a:	009b      	lsls	r3, r3, #2
 800a51c:	440b      	add	r3, r1
 800a51e:	3324      	adds	r3, #36	; 0x24
 800a520:	2201      	movs	r2, #1
 800a522:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a524:	4b38      	ldr	r3, [pc, #224]	; (800a608 <USBD_CDC_Init+0x1e8>)
 800a526:	7819      	ldrb	r1, [r3, #0]
 800a528:	2340      	movs	r3, #64	; 0x40
 800a52a:	2202      	movs	r2, #2
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f005 fc64 	bl	800fdfa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a532:	4b35      	ldr	r3, [pc, #212]	; (800a608 <USBD_CDC_Init+0x1e8>)
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	f003 020f 	and.w	r2, r3, #15
 800a53a:	6879      	ldr	r1, [r7, #4]
 800a53c:	4613      	mov	r3, r2
 800a53e:	009b      	lsls	r3, r3, #2
 800a540:	4413      	add	r3, r2
 800a542:	009b      	lsls	r3, r3, #2
 800a544:	440b      	add	r3, r1
 800a546:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a54a:	2201      	movs	r2, #1
 800a54c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a54e:	4b2f      	ldr	r3, [pc, #188]	; (800a60c <USBD_CDC_Init+0x1ec>)
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	f003 020f 	and.w	r2, r3, #15
 800a556:	6879      	ldr	r1, [r7, #4]
 800a558:	4613      	mov	r3, r2
 800a55a:	009b      	lsls	r3, r3, #2
 800a55c:	4413      	add	r3, r2
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	440b      	add	r3, r1
 800a562:	3326      	adds	r3, #38	; 0x26
 800a564:	2210      	movs	r2, #16
 800a566:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a568:	4b28      	ldr	r3, [pc, #160]	; (800a60c <USBD_CDC_Init+0x1ec>)
 800a56a:	7819      	ldrb	r1, [r3, #0]
 800a56c:	2308      	movs	r3, #8
 800a56e:	2203      	movs	r2, #3
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f005 fc42 	bl	800fdfa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a576:	4b25      	ldr	r3, [pc, #148]	; (800a60c <USBD_CDC_Init+0x1ec>)
 800a578:	781b      	ldrb	r3, [r3, #0]
 800a57a:	f003 020f 	and.w	r2, r3, #15
 800a57e:	6879      	ldr	r1, [r7, #4]
 800a580:	4613      	mov	r3, r2
 800a582:	009b      	lsls	r3, r3, #2
 800a584:	4413      	add	r3, r2
 800a586:	009b      	lsls	r3, r3, #2
 800a588:	440b      	add	r3, r1
 800a58a:	3324      	adds	r3, #36	; 0x24
 800a58c:	2201      	movs	r2, #1
 800a58e:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2200      	movs	r2, #0
 800a594:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	33b0      	adds	r3, #176	; 0xb0
 800a5a2:	009b      	lsls	r3, r3, #2
 800a5a4:	4413      	add	r3, r2
 800a5a6:	685b      	ldr	r3, [r3, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d101      	bne.n	800a5ca <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800a5c6:	2302      	movs	r3, #2
 800a5c8:	e018      	b.n	800a5fc <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	7c1b      	ldrb	r3, [r3, #16]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d10a      	bne.n	800a5e8 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a5d2:	4b0d      	ldr	r3, [pc, #52]	; (800a608 <USBD_CDC_Init+0x1e8>)
 800a5d4:	7819      	ldrb	r1, [r3, #0]
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a5dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f005 fcf9 	bl	800ffd8 <USBD_LL_PrepareReceive>
 800a5e6:	e008      	b.n	800a5fa <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a5e8:	4b07      	ldr	r3, [pc, #28]	; (800a608 <USBD_CDC_Init+0x1e8>)
 800a5ea:	7819      	ldrb	r1, [r3, #0]
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a5f2:	2340      	movs	r3, #64	; 0x40
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f005 fcef 	bl	800ffd8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a5fa:	2300      	movs	r3, #0
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3710      	adds	r7, #16
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}
 800a604:	20000093 	.word	0x20000093
 800a608:	20000094 	.word	0x20000094
 800a60c:	20000095 	.word	0x20000095

0800a610 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	460b      	mov	r3, r1
 800a61a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a61c:	4b3a      	ldr	r3, [pc, #232]	; (800a708 <USBD_CDC_DeInit+0xf8>)
 800a61e:	781b      	ldrb	r3, [r3, #0]
 800a620:	4619      	mov	r1, r3
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f005 fc0f 	bl	800fe46 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a628:	4b37      	ldr	r3, [pc, #220]	; (800a708 <USBD_CDC_DeInit+0xf8>)
 800a62a:	781b      	ldrb	r3, [r3, #0]
 800a62c:	f003 020f 	and.w	r2, r3, #15
 800a630:	6879      	ldr	r1, [r7, #4]
 800a632:	4613      	mov	r3, r2
 800a634:	009b      	lsls	r3, r3, #2
 800a636:	4413      	add	r3, r2
 800a638:	009b      	lsls	r3, r3, #2
 800a63a:	440b      	add	r3, r1
 800a63c:	3324      	adds	r3, #36	; 0x24
 800a63e:	2200      	movs	r2, #0
 800a640:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a642:	4b32      	ldr	r3, [pc, #200]	; (800a70c <USBD_CDC_DeInit+0xfc>)
 800a644:	781b      	ldrb	r3, [r3, #0]
 800a646:	4619      	mov	r1, r3
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f005 fbfc 	bl	800fe46 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a64e:	4b2f      	ldr	r3, [pc, #188]	; (800a70c <USBD_CDC_DeInit+0xfc>)
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	f003 020f 	and.w	r2, r3, #15
 800a656:	6879      	ldr	r1, [r7, #4]
 800a658:	4613      	mov	r3, r2
 800a65a:	009b      	lsls	r3, r3, #2
 800a65c:	4413      	add	r3, r2
 800a65e:	009b      	lsls	r3, r3, #2
 800a660:	440b      	add	r3, r1
 800a662:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a666:	2200      	movs	r2, #0
 800a668:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a66a:	4b29      	ldr	r3, [pc, #164]	; (800a710 <USBD_CDC_DeInit+0x100>)
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	4619      	mov	r1, r3
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f005 fbe8 	bl	800fe46 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a676:	4b26      	ldr	r3, [pc, #152]	; (800a710 <USBD_CDC_DeInit+0x100>)
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	f003 020f 	and.w	r2, r3, #15
 800a67e:	6879      	ldr	r1, [r7, #4]
 800a680:	4613      	mov	r3, r2
 800a682:	009b      	lsls	r3, r3, #2
 800a684:	4413      	add	r3, r2
 800a686:	009b      	lsls	r3, r3, #2
 800a688:	440b      	add	r3, r1
 800a68a:	3324      	adds	r3, #36	; 0x24
 800a68c:	2200      	movs	r2, #0
 800a68e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a690:	4b1f      	ldr	r3, [pc, #124]	; (800a710 <USBD_CDC_DeInit+0x100>)
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	f003 020f 	and.w	r2, r3, #15
 800a698:	6879      	ldr	r1, [r7, #4]
 800a69a:	4613      	mov	r3, r2
 800a69c:	009b      	lsls	r3, r3, #2
 800a69e:	4413      	add	r3, r2
 800a6a0:	009b      	lsls	r3, r3, #2
 800a6a2:	440b      	add	r3, r1
 800a6a4:	3326      	adds	r3, #38	; 0x26
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	32b0      	adds	r2, #176	; 0xb0
 800a6b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d01f      	beq.n	800a6fc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	33b0      	adds	r3, #176	; 0xb0
 800a6c6:	009b      	lsls	r3, r3, #2
 800a6c8:	4413      	add	r3, r2
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	32b0      	adds	r2, #176	; 0xb0
 800a6da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f005 fd36 	bl	8010150 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	32b0      	adds	r2, #176	; 0xb0
 800a6ee:	2100      	movs	r1, #0
 800a6f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a6fc:	2300      	movs	r3, #0
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3708      	adds	r7, #8
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	20000093 	.word	0x20000093
 800a70c:	20000094 	.word	0x20000094
 800a710:	20000095 	.word	0x20000095

0800a714 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b086      	sub	sp, #24
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	32b0      	adds	r2, #176	; 0xb0
 800a728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a72c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a72e:	2300      	movs	r3, #0
 800a730:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a732:	2300      	movs	r3, #0
 800a734:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a736:	2300      	movs	r3, #0
 800a738:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d101      	bne.n	800a744 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a740:	2303      	movs	r3, #3
 800a742:	e0bf      	b.n	800a8c4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	781b      	ldrb	r3, [r3, #0]
 800a748:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d050      	beq.n	800a7f2 <USBD_CDC_Setup+0xde>
 800a750:	2b20      	cmp	r3, #32
 800a752:	f040 80af 	bne.w	800a8b4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	88db      	ldrh	r3, [r3, #6]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d03a      	beq.n	800a7d4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	781b      	ldrb	r3, [r3, #0]
 800a762:	b25b      	sxtb	r3, r3
 800a764:	2b00      	cmp	r3, #0
 800a766:	da1b      	bge.n	800a7a0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	33b0      	adds	r3, #176	; 0xb0
 800a772:	009b      	lsls	r3, r3, #2
 800a774:	4413      	add	r3, r2
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	689b      	ldr	r3, [r3, #8]
 800a77a:	683a      	ldr	r2, [r7, #0]
 800a77c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a77e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a780:	683a      	ldr	r2, [r7, #0]
 800a782:	88d2      	ldrh	r2, [r2, #6]
 800a784:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	88db      	ldrh	r3, [r3, #6]
 800a78a:	2b07      	cmp	r3, #7
 800a78c:	bf28      	it	cs
 800a78e:	2307      	movcs	r3, #7
 800a790:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	89fa      	ldrh	r2, [r7, #14]
 800a796:	4619      	mov	r1, r3
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f001 fdad 	bl	800c2f8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a79e:	e090      	b.n	800a8c2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	785a      	ldrb	r2, [r3, #1]
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	88db      	ldrh	r3, [r3, #6]
 800a7ae:	2b3f      	cmp	r3, #63	; 0x3f
 800a7b0:	d803      	bhi.n	800a7ba <USBD_CDC_Setup+0xa6>
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	88db      	ldrh	r3, [r3, #6]
 800a7b6:	b2da      	uxtb	r2, r3
 800a7b8:	e000      	b.n	800a7bc <USBD_CDC_Setup+0xa8>
 800a7ba:	2240      	movs	r2, #64	; 0x40
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a7c2:	6939      	ldr	r1, [r7, #16]
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f001 fdbf 	bl	800c350 <USBD_CtlPrepareRx>
      break;
 800a7d2:	e076      	b.n	800a8c2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a7da:	687a      	ldr	r2, [r7, #4]
 800a7dc:	33b0      	adds	r3, #176	; 0xb0
 800a7de:	009b      	lsls	r3, r3, #2
 800a7e0:	4413      	add	r3, r2
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	689b      	ldr	r3, [r3, #8]
 800a7e6:	683a      	ldr	r2, [r7, #0]
 800a7e8:	7850      	ldrb	r0, [r2, #1]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	6839      	ldr	r1, [r7, #0]
 800a7ee:	4798      	blx	r3
      break;
 800a7f0:	e067      	b.n	800a8c2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	785b      	ldrb	r3, [r3, #1]
 800a7f6:	2b0b      	cmp	r3, #11
 800a7f8:	d851      	bhi.n	800a89e <USBD_CDC_Setup+0x18a>
 800a7fa:	a201      	add	r2, pc, #4	; (adr r2, 800a800 <USBD_CDC_Setup+0xec>)
 800a7fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a800:	0800a831 	.word	0x0800a831
 800a804:	0800a8ad 	.word	0x0800a8ad
 800a808:	0800a89f 	.word	0x0800a89f
 800a80c:	0800a89f 	.word	0x0800a89f
 800a810:	0800a89f 	.word	0x0800a89f
 800a814:	0800a89f 	.word	0x0800a89f
 800a818:	0800a89f 	.word	0x0800a89f
 800a81c:	0800a89f 	.word	0x0800a89f
 800a820:	0800a89f 	.word	0x0800a89f
 800a824:	0800a89f 	.word	0x0800a89f
 800a828:	0800a85b 	.word	0x0800a85b
 800a82c:	0800a885 	.word	0x0800a885
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a836:	b2db      	uxtb	r3, r3
 800a838:	2b03      	cmp	r3, #3
 800a83a:	d107      	bne.n	800a84c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a83c:	f107 030a 	add.w	r3, r7, #10
 800a840:	2202      	movs	r2, #2
 800a842:	4619      	mov	r1, r3
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f001 fd57 	bl	800c2f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a84a:	e032      	b.n	800a8b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a84c:	6839      	ldr	r1, [r7, #0]
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f001 fce1 	bl	800c216 <USBD_CtlError>
            ret = USBD_FAIL;
 800a854:	2303      	movs	r3, #3
 800a856:	75fb      	strb	r3, [r7, #23]
          break;
 800a858:	e02b      	b.n	800a8b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a860:	b2db      	uxtb	r3, r3
 800a862:	2b03      	cmp	r3, #3
 800a864:	d107      	bne.n	800a876 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a866:	f107 030d 	add.w	r3, r7, #13
 800a86a:	2201      	movs	r2, #1
 800a86c:	4619      	mov	r1, r3
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f001 fd42 	bl	800c2f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a874:	e01d      	b.n	800a8b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a876:	6839      	ldr	r1, [r7, #0]
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f001 fccc 	bl	800c216 <USBD_CtlError>
            ret = USBD_FAIL;
 800a87e:	2303      	movs	r3, #3
 800a880:	75fb      	strb	r3, [r7, #23]
          break;
 800a882:	e016      	b.n	800a8b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a88a:	b2db      	uxtb	r3, r3
 800a88c:	2b03      	cmp	r3, #3
 800a88e:	d00f      	beq.n	800a8b0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a890:	6839      	ldr	r1, [r7, #0]
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f001 fcbf 	bl	800c216 <USBD_CtlError>
            ret = USBD_FAIL;
 800a898:	2303      	movs	r3, #3
 800a89a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a89c:	e008      	b.n	800a8b0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a89e:	6839      	ldr	r1, [r7, #0]
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f001 fcb8 	bl	800c216 <USBD_CtlError>
          ret = USBD_FAIL;
 800a8a6:	2303      	movs	r3, #3
 800a8a8:	75fb      	strb	r3, [r7, #23]
          break;
 800a8aa:	e002      	b.n	800a8b2 <USBD_CDC_Setup+0x19e>
          break;
 800a8ac:	bf00      	nop
 800a8ae:	e008      	b.n	800a8c2 <USBD_CDC_Setup+0x1ae>
          break;
 800a8b0:	bf00      	nop
      }
      break;
 800a8b2:	e006      	b.n	800a8c2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a8b4:	6839      	ldr	r1, [r7, #0]
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f001 fcad 	bl	800c216 <USBD_CtlError>
      ret = USBD_FAIL;
 800a8bc:	2303      	movs	r3, #3
 800a8be:	75fb      	strb	r3, [r7, #23]
      break;
 800a8c0:	bf00      	nop
  }

  return (uint8_t)ret;
 800a8c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3718      	adds	r7, #24
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}

0800a8cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b084      	sub	sp, #16
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	460b      	mov	r3, r1
 800a8d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a8de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	32b0      	adds	r2, #176	; 0xb0
 800a8ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d101      	bne.n	800a8f6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a8f2:	2303      	movs	r3, #3
 800a8f4:	e065      	b.n	800a9c2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	32b0      	adds	r2, #176	; 0xb0
 800a900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a904:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a906:	78fb      	ldrb	r3, [r7, #3]
 800a908:	f003 020f 	and.w	r2, r3, #15
 800a90c:	6879      	ldr	r1, [r7, #4]
 800a90e:	4613      	mov	r3, r2
 800a910:	009b      	lsls	r3, r3, #2
 800a912:	4413      	add	r3, r2
 800a914:	009b      	lsls	r3, r3, #2
 800a916:	440b      	add	r3, r1
 800a918:	3318      	adds	r3, #24
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d02f      	beq.n	800a980 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a920:	78fb      	ldrb	r3, [r7, #3]
 800a922:	f003 020f 	and.w	r2, r3, #15
 800a926:	6879      	ldr	r1, [r7, #4]
 800a928:	4613      	mov	r3, r2
 800a92a:	009b      	lsls	r3, r3, #2
 800a92c:	4413      	add	r3, r2
 800a92e:	009b      	lsls	r3, r3, #2
 800a930:	440b      	add	r3, r1
 800a932:	3318      	adds	r3, #24
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	78fb      	ldrb	r3, [r7, #3]
 800a938:	f003 010f 	and.w	r1, r3, #15
 800a93c:	68f8      	ldr	r0, [r7, #12]
 800a93e:	460b      	mov	r3, r1
 800a940:	00db      	lsls	r3, r3, #3
 800a942:	440b      	add	r3, r1
 800a944:	009b      	lsls	r3, r3, #2
 800a946:	4403      	add	r3, r0
 800a948:	3348      	adds	r3, #72	; 0x48
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	fbb2 f1f3 	udiv	r1, r2, r3
 800a950:	fb01 f303 	mul.w	r3, r1, r3
 800a954:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a956:	2b00      	cmp	r3, #0
 800a958:	d112      	bne.n	800a980 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a95a:	78fb      	ldrb	r3, [r7, #3]
 800a95c:	f003 020f 	and.w	r2, r3, #15
 800a960:	6879      	ldr	r1, [r7, #4]
 800a962:	4613      	mov	r3, r2
 800a964:	009b      	lsls	r3, r3, #2
 800a966:	4413      	add	r3, r2
 800a968:	009b      	lsls	r3, r3, #2
 800a96a:	440b      	add	r3, r1
 800a96c:	3318      	adds	r3, #24
 800a96e:	2200      	movs	r2, #0
 800a970:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a972:	78f9      	ldrb	r1, [r7, #3]
 800a974:	2300      	movs	r3, #0
 800a976:	2200      	movs	r2, #0
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f005 fb0c 	bl	800ff96 <USBD_LL_Transmit>
 800a97e:	e01f      	b.n	800a9c0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	2200      	movs	r2, #0
 800a984:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	33b0      	adds	r3, #176	; 0xb0
 800a992:	009b      	lsls	r3, r3, #2
 800a994:	4413      	add	r3, r2
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	691b      	ldr	r3, [r3, #16]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d010      	beq.n	800a9c0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a9a4:	687a      	ldr	r2, [r7, #4]
 800a9a6:	33b0      	adds	r3, #176	; 0xb0
 800a9a8:	009b      	lsls	r3, r3, #2
 800a9aa:	4413      	add	r3, r2
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	691b      	ldr	r3, [r3, #16]
 800a9b0:	68ba      	ldr	r2, [r7, #8]
 800a9b2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a9b6:	68ba      	ldr	r2, [r7, #8]
 800a9b8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a9bc:	78fa      	ldrb	r2, [r7, #3]
 800a9be:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a9c0:	2300      	movs	r3, #0
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3710      	adds	r7, #16
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}

0800a9ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a9ca:	b580      	push	{r7, lr}
 800a9cc:	b084      	sub	sp, #16
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
 800a9d2:	460b      	mov	r3, r1
 800a9d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	32b0      	adds	r2, #176	; 0xb0
 800a9e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9e4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	32b0      	adds	r2, #176	; 0xb0
 800a9f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d101      	bne.n	800a9fc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a9f8:	2303      	movs	r3, #3
 800a9fa:	e01a      	b.n	800aa32 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a9fc:	78fb      	ldrb	r3, [r7, #3]
 800a9fe:	4619      	mov	r1, r3
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f005 fb0a 	bl	801001a <USBD_LL_GetRxDataSize>
 800aa06:	4602      	mov	r2, r0
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aa14:	687a      	ldr	r2, [r7, #4]
 800aa16:	33b0      	adds	r3, #176	; 0xb0
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	4413      	add	r3, r2
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	68fa      	ldr	r2, [r7, #12]
 800aa22:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800aa26:	68fa      	ldr	r2, [r7, #12]
 800aa28:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800aa2c:	4611      	mov	r1, r2
 800aa2e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800aa30:	2300      	movs	r3, #0
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b084      	sub	sp, #16
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	32b0      	adds	r2, #176	; 0xb0
 800aa4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa50:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d101      	bne.n	800aa5c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800aa58:	2303      	movs	r3, #3
 800aa5a:	e025      	b.n	800aaa8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	33b0      	adds	r3, #176	; 0xb0
 800aa66:	009b      	lsls	r3, r3, #2
 800aa68:	4413      	add	r3, r2
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d01a      	beq.n	800aaa6 <USBD_CDC_EP0_RxReady+0x6c>
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800aa76:	2bff      	cmp	r3, #255	; 0xff
 800aa78:	d015      	beq.n	800aaa6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aa80:	687a      	ldr	r2, [r7, #4]
 800aa82:	33b0      	adds	r3, #176	; 0xb0
 800aa84:	009b      	lsls	r3, r3, #2
 800aa86:	4413      	add	r3, r2
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	689b      	ldr	r3, [r3, #8]
 800aa8c:	68fa      	ldr	r2, [r7, #12]
 800aa8e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800aa92:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800aa94:	68fa      	ldr	r2, [r7, #12]
 800aa96:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800aa9a:	b292      	uxth	r2, r2
 800aa9c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	22ff      	movs	r2, #255	; 0xff
 800aaa2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800aaa6:	2300      	movs	r3, #0
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3710      	adds	r7, #16
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b086      	sub	sp, #24
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aab8:	2182      	movs	r1, #130	; 0x82
 800aaba:	4818      	ldr	r0, [pc, #96]	; (800ab1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aabc:	f000 fd49 	bl	800b552 <USBD_GetEpDesc>
 800aac0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800aac2:	2101      	movs	r1, #1
 800aac4:	4815      	ldr	r0, [pc, #84]	; (800ab1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aac6:	f000 fd44 	bl	800b552 <USBD_GetEpDesc>
 800aaca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800aacc:	2181      	movs	r1, #129	; 0x81
 800aace:	4813      	ldr	r0, [pc, #76]	; (800ab1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aad0:	f000 fd3f 	bl	800b552 <USBD_GetEpDesc>
 800aad4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d002      	beq.n	800aae2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	2210      	movs	r2, #16
 800aae0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d006      	beq.n	800aaf6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aae8:	693b      	ldr	r3, [r7, #16]
 800aaea:	2200      	movs	r2, #0
 800aaec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aaf0:	711a      	strb	r2, [r3, #4]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d006      	beq.n	800ab0a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2200      	movs	r2, #0
 800ab00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ab04:	711a      	strb	r2, [r3, #4]
 800ab06:	2200      	movs	r2, #0
 800ab08:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2243      	movs	r2, #67	; 0x43
 800ab0e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ab10:	4b02      	ldr	r3, [pc, #8]	; (800ab1c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3718      	adds	r7, #24
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	20000050 	.word	0x20000050

0800ab20 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b086      	sub	sp, #24
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ab28:	2182      	movs	r1, #130	; 0x82
 800ab2a:	4818      	ldr	r0, [pc, #96]	; (800ab8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ab2c:	f000 fd11 	bl	800b552 <USBD_GetEpDesc>
 800ab30:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ab32:	2101      	movs	r1, #1
 800ab34:	4815      	ldr	r0, [pc, #84]	; (800ab8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ab36:	f000 fd0c 	bl	800b552 <USBD_GetEpDesc>
 800ab3a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ab3c:	2181      	movs	r1, #129	; 0x81
 800ab3e:	4813      	ldr	r0, [pc, #76]	; (800ab8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ab40:	f000 fd07 	bl	800b552 <USBD_GetEpDesc>
 800ab44:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d002      	beq.n	800ab52 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	2210      	movs	r2, #16
 800ab50:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d006      	beq.n	800ab66 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	711a      	strb	r2, [r3, #4]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	f042 0202 	orr.w	r2, r2, #2
 800ab64:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d006      	beq.n	800ab7a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	711a      	strb	r2, [r3, #4]
 800ab72:	2200      	movs	r2, #0
 800ab74:	f042 0202 	orr.w	r2, r2, #2
 800ab78:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2243      	movs	r2, #67	; 0x43
 800ab7e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ab80:	4b02      	ldr	r3, [pc, #8]	; (800ab8c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3718      	adds	r7, #24
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
 800ab8a:	bf00      	nop
 800ab8c:	20000050 	.word	0x20000050

0800ab90 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b086      	sub	sp, #24
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ab98:	2182      	movs	r1, #130	; 0x82
 800ab9a:	4818      	ldr	r0, [pc, #96]	; (800abfc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ab9c:	f000 fcd9 	bl	800b552 <USBD_GetEpDesc>
 800aba0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800aba2:	2101      	movs	r1, #1
 800aba4:	4815      	ldr	r0, [pc, #84]	; (800abfc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aba6:	f000 fcd4 	bl	800b552 <USBD_GetEpDesc>
 800abaa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800abac:	2181      	movs	r1, #129	; 0x81
 800abae:	4813      	ldr	r0, [pc, #76]	; (800abfc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800abb0:	f000 fccf 	bl	800b552 <USBD_GetEpDesc>
 800abb4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d002      	beq.n	800abc2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	2210      	movs	r2, #16
 800abc0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d006      	beq.n	800abd6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	2200      	movs	r2, #0
 800abcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800abd0:	711a      	strb	r2, [r3, #4]
 800abd2:	2200      	movs	r2, #0
 800abd4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d006      	beq.n	800abea <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2200      	movs	r2, #0
 800abe0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800abe4:	711a      	strb	r2, [r3, #4]
 800abe6:	2200      	movs	r2, #0
 800abe8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2243      	movs	r2, #67	; 0x43
 800abee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800abf0:	4b02      	ldr	r3, [pc, #8]	; (800abfc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3718      	adds	r7, #24
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
 800abfa:	bf00      	nop
 800abfc:	20000050 	.word	0x20000050

0800ac00 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b083      	sub	sp, #12
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	220a      	movs	r2, #10
 800ac0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ac0e:	4b03      	ldr	r3, [pc, #12]	; (800ac1c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	370c      	adds	r7, #12
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr
 800ac1c:	2000000c 	.word	0x2000000c

0800ac20 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b083      	sub	sp, #12
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d101      	bne.n	800ac34 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ac30:	2303      	movs	r3, #3
 800ac32:	e009      	b.n	800ac48 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	33b0      	adds	r3, #176	; 0xb0
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	4413      	add	r3, r2
 800ac42:	683a      	ldr	r2, [r7, #0]
 800ac44:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ac46:	2300      	movs	r3, #0
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	370c      	adds	r7, #12
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr

0800ac54 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b087      	sub	sp, #28
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	60f8      	str	r0, [r7, #12]
 800ac5c:	60b9      	str	r1, [r7, #8]
 800ac5e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	32b0      	adds	r2, #176	; 0xb0
 800ac6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac6e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d101      	bne.n	800ac7a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ac76:	2303      	movs	r3, #3
 800ac78:	e008      	b.n	800ac8c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	68ba      	ldr	r2, [r7, #8]
 800ac7e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ac8a:	2300      	movs	r3, #0
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	371c      	adds	r7, #28
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr

0800ac98 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b085      	sub	sp, #20
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	32b0      	adds	r2, #176	; 0xb0
 800acac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acb0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d101      	bne.n	800acbc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800acb8:	2303      	movs	r3, #3
 800acba:	e004      	b.n	800acc6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	683a      	ldr	r2, [r7, #0]
 800acc0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800acc4:	2300      	movs	r3, #0
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3714      	adds	r7, #20
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr
	...

0800acd4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b084      	sub	sp, #16
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	32b0      	adds	r2, #176	; 0xb0
 800ace6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acea:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800acec:	2301      	movs	r3, #1
 800acee:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d101      	bne.n	800acfa <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800acf6:	2303      	movs	r3, #3
 800acf8:	e025      	b.n	800ad46 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d11f      	bne.n	800ad44 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	2201      	movs	r2, #1
 800ad08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800ad0c:	4b10      	ldr	r3, [pc, #64]	; (800ad50 <USBD_CDC_TransmitPacket+0x7c>)
 800ad0e:	781b      	ldrb	r3, [r3, #0]
 800ad10:	f003 020f 	and.w	r2, r3, #15
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	4613      	mov	r3, r2
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	4413      	add	r3, r2
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	4403      	add	r3, r0
 800ad26:	3318      	adds	r3, #24
 800ad28:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800ad2a:	4b09      	ldr	r3, [pc, #36]	; (800ad50 <USBD_CDC_TransmitPacket+0x7c>)
 800ad2c:	7819      	ldrb	r1, [r3, #0]
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f005 f92b 	bl	800ff96 <USBD_LL_Transmit>

    ret = USBD_OK;
 800ad40:	2300      	movs	r3, #0
 800ad42:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ad44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3710      	adds	r7, #16
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	20000093 	.word	0x20000093

0800ad54 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b084      	sub	sp, #16
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	32b0      	adds	r2, #176	; 0xb0
 800ad66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad6a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	32b0      	adds	r2, #176	; 0xb0
 800ad76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d101      	bne.n	800ad82 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ad7e:	2303      	movs	r3, #3
 800ad80:	e018      	b.n	800adb4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	7c1b      	ldrb	r3, [r3, #16]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d10a      	bne.n	800ada0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad8a:	4b0c      	ldr	r3, [pc, #48]	; (800adbc <USBD_CDC_ReceivePacket+0x68>)
 800ad8c:	7819      	ldrb	r1, [r3, #0]
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad94:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f005 f91d 	bl	800ffd8 <USBD_LL_PrepareReceive>
 800ad9e:	e008      	b.n	800adb2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ada0:	4b06      	ldr	r3, [pc, #24]	; (800adbc <USBD_CDC_ReceivePacket+0x68>)
 800ada2:	7819      	ldrb	r1, [r3, #0]
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800adaa:	2340      	movs	r3, #64	; 0x40
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f005 f913 	bl	800ffd8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800adb2:	2300      	movs	r3, #0
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3710      	adds	r7, #16
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}
 800adbc:	20000094 	.word	0x20000094

0800adc0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b086      	sub	sp, #24
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	60b9      	str	r1, [r7, #8]
 800adca:	4613      	mov	r3, r2
 800adcc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d101      	bne.n	800add8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800add4:	2303      	movs	r3, #3
 800add6:	e01f      	b.n	800ae18 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2200      	movs	r2, #0
 800addc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2200      	movs	r2, #0
 800ade4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2200      	movs	r2, #0
 800adec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d003      	beq.n	800adfe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	68ba      	ldr	r2, [r7, #8]
 800adfa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2201      	movs	r2, #1
 800ae02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	79fa      	ldrb	r2, [r7, #7]
 800ae0a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ae0c:	68f8      	ldr	r0, [r7, #12]
 800ae0e:	f004 ff8d 	bl	800fd2c <USBD_LL_Init>
 800ae12:	4603      	mov	r3, r0
 800ae14:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ae16:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3718      	adds	r7, #24
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b084      	sub	sp, #16
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d101      	bne.n	800ae38 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ae34:	2303      	movs	r3, #3
 800ae36:	e025      	b.n	800ae84 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	683a      	ldr	r2, [r7, #0]
 800ae3c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	32ae      	adds	r2, #174	; 0xae
 800ae4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d00f      	beq.n	800ae74 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	32ae      	adds	r2, #174	; 0xae
 800ae5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae64:	f107 020e 	add.w	r2, r7, #14
 800ae68:	4610      	mov	r0, r2
 800ae6a:	4798      	blx	r3
 800ae6c:	4602      	mov	r2, r0
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ae7a:	1c5a      	adds	r2, r3, #1
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800ae82:	2300      	movs	r3, #0
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3710      	adds	r7, #16
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}

0800ae8c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b082      	sub	sp, #8
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f004 ff95 	bl	800fdc4 <USBD_LL_Start>
 800ae9a:	4603      	mov	r3, r0
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3708      	adds	r7, #8
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b083      	sub	sp, #12
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aeac:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	370c      	adds	r7, #12
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb8:	4770      	bx	lr

0800aeba <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aeba:	b580      	push	{r7, lr}
 800aebc:	b084      	sub	sp, #16
 800aebe:	af00      	add	r7, sp, #0
 800aec0:	6078      	str	r0, [r7, #4]
 800aec2:	460b      	mov	r3, r1
 800aec4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800aec6:	2300      	movs	r3, #0
 800aec8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d009      	beq.n	800aee8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	78fa      	ldrb	r2, [r7, #3]
 800aede:	4611      	mov	r1, r2
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	4798      	blx	r3
 800aee4:	4603      	mov	r3, r0
 800aee6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aee8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3710      	adds	r7, #16
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}

0800aef2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aef2:	b580      	push	{r7, lr}
 800aef4:	b084      	sub	sp, #16
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]
 800aefa:	460b      	mov	r3, r1
 800aefc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800aefe:	2300      	movs	r3, #0
 800af00:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	78fa      	ldrb	r2, [r7, #3]
 800af0c:	4611      	mov	r1, r2
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	4798      	blx	r3
 800af12:	4603      	mov	r3, r0
 800af14:	2b00      	cmp	r3, #0
 800af16:	d001      	beq.n	800af1c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800af18:	2303      	movs	r3, #3
 800af1a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800af1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3710      	adds	r7, #16
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}

0800af26 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800af26:	b580      	push	{r7, lr}
 800af28:	b084      	sub	sp, #16
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	6078      	str	r0, [r7, #4]
 800af2e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800af36:	6839      	ldr	r1, [r7, #0]
 800af38:	4618      	mov	r0, r3
 800af3a:	f001 f932 	bl	800c1a2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2201      	movs	r2, #1
 800af42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800af4c:	461a      	mov	r2, r3
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800af5a:	f003 031f 	and.w	r3, r3, #31
 800af5e:	2b02      	cmp	r3, #2
 800af60:	d01a      	beq.n	800af98 <USBD_LL_SetupStage+0x72>
 800af62:	2b02      	cmp	r3, #2
 800af64:	d822      	bhi.n	800afac <USBD_LL_SetupStage+0x86>
 800af66:	2b00      	cmp	r3, #0
 800af68:	d002      	beq.n	800af70 <USBD_LL_SetupStage+0x4a>
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d00a      	beq.n	800af84 <USBD_LL_SetupStage+0x5e>
 800af6e:	e01d      	b.n	800afac <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800af76:	4619      	mov	r1, r3
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f000 fb5f 	bl	800b63c <USBD_StdDevReq>
 800af7e:	4603      	mov	r3, r0
 800af80:	73fb      	strb	r3, [r7, #15]
      break;
 800af82:	e020      	b.n	800afc6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800af8a:	4619      	mov	r1, r3
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f000 fbc7 	bl	800b720 <USBD_StdItfReq>
 800af92:	4603      	mov	r3, r0
 800af94:	73fb      	strb	r3, [r7, #15]
      break;
 800af96:	e016      	b.n	800afc6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800af9e:	4619      	mov	r1, r3
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 fc29 	bl	800b7f8 <USBD_StdEPReq>
 800afa6:	4603      	mov	r3, r0
 800afa8:	73fb      	strb	r3, [r7, #15]
      break;
 800afaa:	e00c      	b.n	800afc6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800afb2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	4619      	mov	r1, r3
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f004 ff62 	bl	800fe84 <USBD_LL_StallEP>
 800afc0:	4603      	mov	r3, r0
 800afc2:	73fb      	strb	r3, [r7, #15]
      break;
 800afc4:	bf00      	nop
  }

  return ret;
 800afc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3710      	adds	r7, #16
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b086      	sub	sp, #24
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	60f8      	str	r0, [r7, #12]
 800afd8:	460b      	mov	r3, r1
 800afda:	607a      	str	r2, [r7, #4]
 800afdc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800afde:	2300      	movs	r3, #0
 800afe0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800afe2:	7afb      	ldrb	r3, [r7, #11]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d16e      	bne.n	800b0c6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800afee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aff6:	2b03      	cmp	r3, #3
 800aff8:	f040 8098 	bne.w	800b12c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	689a      	ldr	r2, [r3, #8]
 800b000:	693b      	ldr	r3, [r7, #16]
 800b002:	68db      	ldr	r3, [r3, #12]
 800b004:	429a      	cmp	r2, r3
 800b006:	d913      	bls.n	800b030 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	689a      	ldr	r2, [r3, #8]
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	68db      	ldr	r3, [r3, #12]
 800b010:	1ad2      	subs	r2, r2, r3
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	68da      	ldr	r2, [r3, #12]
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	689b      	ldr	r3, [r3, #8]
 800b01e:	4293      	cmp	r3, r2
 800b020:	bf28      	it	cs
 800b022:	4613      	movcs	r3, r2
 800b024:	461a      	mov	r2, r3
 800b026:	6879      	ldr	r1, [r7, #4]
 800b028:	68f8      	ldr	r0, [r7, #12]
 800b02a:	f001 f9ae 	bl	800c38a <USBD_CtlContinueRx>
 800b02e:	e07d      	b.n	800b12c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b036:	f003 031f 	and.w	r3, r3, #31
 800b03a:	2b02      	cmp	r3, #2
 800b03c:	d014      	beq.n	800b068 <USBD_LL_DataOutStage+0x98>
 800b03e:	2b02      	cmp	r3, #2
 800b040:	d81d      	bhi.n	800b07e <USBD_LL_DataOutStage+0xae>
 800b042:	2b00      	cmp	r3, #0
 800b044:	d002      	beq.n	800b04c <USBD_LL_DataOutStage+0x7c>
 800b046:	2b01      	cmp	r3, #1
 800b048:	d003      	beq.n	800b052 <USBD_LL_DataOutStage+0x82>
 800b04a:	e018      	b.n	800b07e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b04c:	2300      	movs	r3, #0
 800b04e:	75bb      	strb	r3, [r7, #22]
            break;
 800b050:	e018      	b.n	800b084 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b058:	b2db      	uxtb	r3, r3
 800b05a:	4619      	mov	r1, r3
 800b05c:	68f8      	ldr	r0, [r7, #12]
 800b05e:	f000 fa5e 	bl	800b51e <USBD_CoreFindIF>
 800b062:	4603      	mov	r3, r0
 800b064:	75bb      	strb	r3, [r7, #22]
            break;
 800b066:	e00d      	b.n	800b084 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b06e:	b2db      	uxtb	r3, r3
 800b070:	4619      	mov	r1, r3
 800b072:	68f8      	ldr	r0, [r7, #12]
 800b074:	f000 fa60 	bl	800b538 <USBD_CoreFindEP>
 800b078:	4603      	mov	r3, r0
 800b07a:	75bb      	strb	r3, [r7, #22]
            break;
 800b07c:	e002      	b.n	800b084 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b07e:	2300      	movs	r3, #0
 800b080:	75bb      	strb	r3, [r7, #22]
            break;
 800b082:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b084:	7dbb      	ldrb	r3, [r7, #22]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d119      	bne.n	800b0be <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b090:	b2db      	uxtb	r3, r3
 800b092:	2b03      	cmp	r3, #3
 800b094:	d113      	bne.n	800b0be <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b096:	7dba      	ldrb	r2, [r7, #22]
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	32ae      	adds	r2, #174	; 0xae
 800b09c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0a0:	691b      	ldr	r3, [r3, #16]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d00b      	beq.n	800b0be <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b0a6:	7dba      	ldrb	r2, [r7, #22]
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b0ae:	7dba      	ldrb	r2, [r7, #22]
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	32ae      	adds	r2, #174	; 0xae
 800b0b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0b8:	691b      	ldr	r3, [r3, #16]
 800b0ba:	68f8      	ldr	r0, [r7, #12]
 800b0bc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b0be:	68f8      	ldr	r0, [r7, #12]
 800b0c0:	f001 f974 	bl	800c3ac <USBD_CtlSendStatus>
 800b0c4:	e032      	b.n	800b12c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b0c6:	7afb      	ldrb	r3, [r7, #11]
 800b0c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0cc:	b2db      	uxtb	r3, r3
 800b0ce:	4619      	mov	r1, r3
 800b0d0:	68f8      	ldr	r0, [r7, #12]
 800b0d2:	f000 fa31 	bl	800b538 <USBD_CoreFindEP>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b0da:	7dbb      	ldrb	r3, [r7, #22]
 800b0dc:	2bff      	cmp	r3, #255	; 0xff
 800b0de:	d025      	beq.n	800b12c <USBD_LL_DataOutStage+0x15c>
 800b0e0:	7dbb      	ldrb	r3, [r7, #22]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d122      	bne.n	800b12c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0ec:	b2db      	uxtb	r3, r3
 800b0ee:	2b03      	cmp	r3, #3
 800b0f0:	d117      	bne.n	800b122 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b0f2:	7dba      	ldrb	r2, [r7, #22]
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	32ae      	adds	r2, #174	; 0xae
 800b0f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0fc:	699b      	ldr	r3, [r3, #24]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d00f      	beq.n	800b122 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b102:	7dba      	ldrb	r2, [r7, #22]
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b10a:	7dba      	ldrb	r2, [r7, #22]
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	32ae      	adds	r2, #174	; 0xae
 800b110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b114:	699b      	ldr	r3, [r3, #24]
 800b116:	7afa      	ldrb	r2, [r7, #11]
 800b118:	4611      	mov	r1, r2
 800b11a:	68f8      	ldr	r0, [r7, #12]
 800b11c:	4798      	blx	r3
 800b11e:	4603      	mov	r3, r0
 800b120:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b122:	7dfb      	ldrb	r3, [r7, #23]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d001      	beq.n	800b12c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b128:	7dfb      	ldrb	r3, [r7, #23]
 800b12a:	e000      	b.n	800b12e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b12c:	2300      	movs	r3, #0
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3718      	adds	r7, #24
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}

0800b136 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b136:	b580      	push	{r7, lr}
 800b138:	b086      	sub	sp, #24
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	60f8      	str	r0, [r7, #12]
 800b13e:	460b      	mov	r3, r1
 800b140:	607a      	str	r2, [r7, #4]
 800b142:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b144:	7afb      	ldrb	r3, [r7, #11]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d16f      	bne.n	800b22a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	3314      	adds	r3, #20
 800b14e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b156:	2b02      	cmp	r3, #2
 800b158:	d15a      	bne.n	800b210 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	689a      	ldr	r2, [r3, #8]
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	68db      	ldr	r3, [r3, #12]
 800b162:	429a      	cmp	r2, r3
 800b164:	d914      	bls.n	800b190 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	689a      	ldr	r2, [r3, #8]
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	68db      	ldr	r3, [r3, #12]
 800b16e:	1ad2      	subs	r2, r2, r3
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	689b      	ldr	r3, [r3, #8]
 800b178:	461a      	mov	r2, r3
 800b17a:	6879      	ldr	r1, [r7, #4]
 800b17c:	68f8      	ldr	r0, [r7, #12]
 800b17e:	f001 f8d6 	bl	800c32e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b182:	2300      	movs	r3, #0
 800b184:	2200      	movs	r2, #0
 800b186:	2100      	movs	r1, #0
 800b188:	68f8      	ldr	r0, [r7, #12]
 800b18a:	f004 ff25 	bl	800ffd8 <USBD_LL_PrepareReceive>
 800b18e:	e03f      	b.n	800b210 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	68da      	ldr	r2, [r3, #12]
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	689b      	ldr	r3, [r3, #8]
 800b198:	429a      	cmp	r2, r3
 800b19a:	d11c      	bne.n	800b1d6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	685a      	ldr	r2, [r3, #4]
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d316      	bcc.n	800b1d6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	685a      	ldr	r2, [r3, #4]
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	d20f      	bcs.n	800b1d6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	2100      	movs	r1, #0
 800b1ba:	68f8      	ldr	r0, [r7, #12]
 800b1bc:	f001 f8b7 	bl	800c32e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	2100      	movs	r1, #0
 800b1ce:	68f8      	ldr	r0, [r7, #12]
 800b1d0:	f004 ff02 	bl	800ffd8 <USBD_LL_PrepareReceive>
 800b1d4:	e01c      	b.n	800b210 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1dc:	b2db      	uxtb	r3, r3
 800b1de:	2b03      	cmp	r3, #3
 800b1e0:	d10f      	bne.n	800b202 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1e8:	68db      	ldr	r3, [r3, #12]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d009      	beq.n	800b202 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1fc:	68db      	ldr	r3, [r3, #12]
 800b1fe:	68f8      	ldr	r0, [r7, #12]
 800b200:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b202:	2180      	movs	r1, #128	; 0x80
 800b204:	68f8      	ldr	r0, [r7, #12]
 800b206:	f004 fe3d 	bl	800fe84 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b20a:	68f8      	ldr	r0, [r7, #12]
 800b20c:	f001 f8e1 	bl	800c3d2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b216:	2b00      	cmp	r3, #0
 800b218:	d03a      	beq.n	800b290 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b21a:	68f8      	ldr	r0, [r7, #12]
 800b21c:	f7ff fe42 	bl	800aea4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2200      	movs	r2, #0
 800b224:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b228:	e032      	b.n	800b290 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b22a:	7afb      	ldrb	r3, [r7, #11]
 800b22c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b230:	b2db      	uxtb	r3, r3
 800b232:	4619      	mov	r1, r3
 800b234:	68f8      	ldr	r0, [r7, #12]
 800b236:	f000 f97f 	bl	800b538 <USBD_CoreFindEP>
 800b23a:	4603      	mov	r3, r0
 800b23c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b23e:	7dfb      	ldrb	r3, [r7, #23]
 800b240:	2bff      	cmp	r3, #255	; 0xff
 800b242:	d025      	beq.n	800b290 <USBD_LL_DataInStage+0x15a>
 800b244:	7dfb      	ldrb	r3, [r7, #23]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d122      	bne.n	800b290 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b250:	b2db      	uxtb	r3, r3
 800b252:	2b03      	cmp	r3, #3
 800b254:	d11c      	bne.n	800b290 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b256:	7dfa      	ldrb	r2, [r7, #23]
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	32ae      	adds	r2, #174	; 0xae
 800b25c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b260:	695b      	ldr	r3, [r3, #20]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d014      	beq.n	800b290 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b266:	7dfa      	ldrb	r2, [r7, #23]
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b26e:	7dfa      	ldrb	r2, [r7, #23]
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	32ae      	adds	r2, #174	; 0xae
 800b274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b278:	695b      	ldr	r3, [r3, #20]
 800b27a:	7afa      	ldrb	r2, [r7, #11]
 800b27c:	4611      	mov	r1, r2
 800b27e:	68f8      	ldr	r0, [r7, #12]
 800b280:	4798      	blx	r3
 800b282:	4603      	mov	r3, r0
 800b284:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b286:	7dbb      	ldrb	r3, [r7, #22]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d001      	beq.n	800b290 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b28c:	7dbb      	ldrb	r3, [r7, #22]
 800b28e:	e000      	b.n	800b292 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b290:	2300      	movs	r3, #0
}
 800b292:	4618      	mov	r0, r3
 800b294:	3718      	adds	r7, #24
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}

0800b29a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b29a:	b580      	push	{r7, lr}
 800b29c:	b084      	sub	sp, #16
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2201      	movs	r2, #1
 800b2aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d014      	beq.n	800b300 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d00e      	beq.n	800b300 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2e8:	685b      	ldr	r3, [r3, #4]
 800b2ea:	687a      	ldr	r2, [r7, #4]
 800b2ec:	6852      	ldr	r2, [r2, #4]
 800b2ee:	b2d2      	uxtb	r2, r2
 800b2f0:	4611      	mov	r1, r2
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	4798      	blx	r3
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d001      	beq.n	800b300 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b2fc:	2303      	movs	r3, #3
 800b2fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b300:	2340      	movs	r3, #64	; 0x40
 800b302:	2200      	movs	r2, #0
 800b304:	2100      	movs	r1, #0
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f004 fd77 	bl	800fdfa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2201      	movs	r2, #1
 800b310:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2240      	movs	r2, #64	; 0x40
 800b318:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b31c:	2340      	movs	r3, #64	; 0x40
 800b31e:	2200      	movs	r2, #0
 800b320:	2180      	movs	r1, #128	; 0x80
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f004 fd69 	bl	800fdfa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2201      	movs	r2, #1
 800b32c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2240      	movs	r2, #64	; 0x40
 800b332:	621a      	str	r2, [r3, #32]

  return ret;
 800b334:	7bfb      	ldrb	r3, [r7, #15]
}
 800b336:	4618      	mov	r0, r3
 800b338:	3710      	adds	r7, #16
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}

0800b33e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b33e:	b480      	push	{r7}
 800b340:	b083      	sub	sp, #12
 800b342:	af00      	add	r7, sp, #0
 800b344:	6078      	str	r0, [r7, #4]
 800b346:	460b      	mov	r3, r1
 800b348:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	78fa      	ldrb	r2, [r7, #3]
 800b34e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b350:	2300      	movs	r3, #0
}
 800b352:	4618      	mov	r0, r3
 800b354:	370c      	adds	r7, #12
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr

0800b35e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b35e:	b480      	push	{r7}
 800b360:	b083      	sub	sp, #12
 800b362:	af00      	add	r7, sp, #0
 800b364:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b36c:	b2da      	uxtb	r2, r3
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2204      	movs	r2, #4
 800b378:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b37c:	2300      	movs	r3, #0
}
 800b37e:	4618      	mov	r0, r3
 800b380:	370c      	adds	r7, #12
 800b382:	46bd      	mov	sp, r7
 800b384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b388:	4770      	bx	lr

0800b38a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b38a:	b480      	push	{r7}
 800b38c:	b083      	sub	sp, #12
 800b38e:	af00      	add	r7, sp, #0
 800b390:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b398:	b2db      	uxtb	r3, r3
 800b39a:	2b04      	cmp	r3, #4
 800b39c:	d106      	bne.n	800b3ac <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b3a4:	b2da      	uxtb	r2, r3
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b3ac:	2300      	movs	r3, #0
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	370c      	adds	r7, #12
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b8:	4770      	bx	lr

0800b3ba <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b3ba:	b580      	push	{r7, lr}
 800b3bc:	b082      	sub	sp, #8
 800b3be:	af00      	add	r7, sp, #0
 800b3c0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3c8:	b2db      	uxtb	r3, r3
 800b3ca:	2b03      	cmp	r3, #3
 800b3cc:	d110      	bne.n	800b3f0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d00b      	beq.n	800b3f0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3de:	69db      	ldr	r3, [r3, #28]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d005      	beq.n	800b3f0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3ea:	69db      	ldr	r3, [r3, #28]
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b3f0:	2300      	movs	r3, #0
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3708      	adds	r7, #8
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}

0800b3fa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b3fa:	b580      	push	{r7, lr}
 800b3fc:	b082      	sub	sp, #8
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
 800b402:	460b      	mov	r3, r1
 800b404:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	32ae      	adds	r2, #174	; 0xae
 800b410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d101      	bne.n	800b41c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b418:	2303      	movs	r3, #3
 800b41a:	e01c      	b.n	800b456 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b422:	b2db      	uxtb	r3, r3
 800b424:	2b03      	cmp	r3, #3
 800b426:	d115      	bne.n	800b454 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	32ae      	adds	r2, #174	; 0xae
 800b432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b436:	6a1b      	ldr	r3, [r3, #32]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d00b      	beq.n	800b454 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	32ae      	adds	r2, #174	; 0xae
 800b446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b44a:	6a1b      	ldr	r3, [r3, #32]
 800b44c:	78fa      	ldrb	r2, [r7, #3]
 800b44e:	4611      	mov	r1, r2
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b454:	2300      	movs	r3, #0
}
 800b456:	4618      	mov	r0, r3
 800b458:	3708      	adds	r7, #8
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}

0800b45e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b45e:	b580      	push	{r7, lr}
 800b460:	b082      	sub	sp, #8
 800b462:	af00      	add	r7, sp, #0
 800b464:	6078      	str	r0, [r7, #4]
 800b466:	460b      	mov	r3, r1
 800b468:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	32ae      	adds	r2, #174	; 0xae
 800b474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d101      	bne.n	800b480 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b47c:	2303      	movs	r3, #3
 800b47e:	e01c      	b.n	800b4ba <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b486:	b2db      	uxtb	r3, r3
 800b488:	2b03      	cmp	r3, #3
 800b48a:	d115      	bne.n	800b4b8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	32ae      	adds	r2, #174	; 0xae
 800b496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d00b      	beq.n	800b4b8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	32ae      	adds	r2, #174	; 0xae
 800b4aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4b0:	78fa      	ldrb	r2, [r7, #3]
 800b4b2:	4611      	mov	r1, r2
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b4b8:	2300      	movs	r3, #0
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3708      	adds	r7, #8
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}

0800b4c2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b4c2:	b480      	push	{r7}
 800b4c4:	b083      	sub	sp, #12
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b4ca:	2300      	movs	r3, #0
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	370c      	adds	r7, #12
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d6:	4770      	bx	lr

0800b4d8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b084      	sub	sp, #16
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d00e      	beq.n	800b514 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	687a      	ldr	r2, [r7, #4]
 800b500:	6852      	ldr	r2, [r2, #4]
 800b502:	b2d2      	uxtb	r2, r2
 800b504:	4611      	mov	r1, r2
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	4798      	blx	r3
 800b50a:	4603      	mov	r3, r0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d001      	beq.n	800b514 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b510:	2303      	movs	r3, #3
 800b512:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b514:	7bfb      	ldrb	r3, [r7, #15]
}
 800b516:	4618      	mov	r0, r3
 800b518:	3710      	adds	r7, #16
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}

0800b51e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b51e:	b480      	push	{r7}
 800b520:	b083      	sub	sp, #12
 800b522:	af00      	add	r7, sp, #0
 800b524:	6078      	str	r0, [r7, #4]
 800b526:	460b      	mov	r3, r1
 800b528:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b52a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	370c      	adds	r7, #12
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr

0800b538 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b538:	b480      	push	{r7}
 800b53a:	b083      	sub	sp, #12
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	460b      	mov	r3, r1
 800b542:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b544:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b546:	4618      	mov	r0, r3
 800b548:	370c      	adds	r7, #12
 800b54a:	46bd      	mov	sp, r7
 800b54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b550:	4770      	bx	lr

0800b552 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b552:	b580      	push	{r7, lr}
 800b554:	b086      	sub	sp, #24
 800b556:	af00      	add	r7, sp, #0
 800b558:	6078      	str	r0, [r7, #4]
 800b55a:	460b      	mov	r3, r1
 800b55c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b566:	2300      	movs	r3, #0
 800b568:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	885b      	ldrh	r3, [r3, #2]
 800b56e:	b29a      	uxth	r2, r3
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	781b      	ldrb	r3, [r3, #0]
 800b574:	b29b      	uxth	r3, r3
 800b576:	429a      	cmp	r2, r3
 800b578:	d920      	bls.n	800b5bc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	781b      	ldrb	r3, [r3, #0]
 800b57e:	b29b      	uxth	r3, r3
 800b580:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b582:	e013      	b.n	800b5ac <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b584:	f107 030a 	add.w	r3, r7, #10
 800b588:	4619      	mov	r1, r3
 800b58a:	6978      	ldr	r0, [r7, #20]
 800b58c:	f000 f81b 	bl	800b5c6 <USBD_GetNextDesc>
 800b590:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	785b      	ldrb	r3, [r3, #1]
 800b596:	2b05      	cmp	r3, #5
 800b598:	d108      	bne.n	800b5ac <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	789b      	ldrb	r3, [r3, #2]
 800b5a2:	78fa      	ldrb	r2, [r7, #3]
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d008      	beq.n	800b5ba <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	885b      	ldrh	r3, [r3, #2]
 800b5b0:	b29a      	uxth	r2, r3
 800b5b2:	897b      	ldrh	r3, [r7, #10]
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d8e5      	bhi.n	800b584 <USBD_GetEpDesc+0x32>
 800b5b8:	e000      	b.n	800b5bc <USBD_GetEpDesc+0x6a>
          break;
 800b5ba:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b5bc:	693b      	ldr	r3, [r7, #16]
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3718      	adds	r7, #24
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}

0800b5c6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b5c6:	b480      	push	{r7}
 800b5c8:	b085      	sub	sp, #20
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	6078      	str	r0, [r7, #4]
 800b5ce:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	881a      	ldrh	r2, [r3, #0]
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	781b      	ldrb	r3, [r3, #0]
 800b5dc:	b29b      	uxth	r3, r3
 800b5de:	4413      	add	r3, r2
 800b5e0:	b29a      	uxth	r2, r3
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	781b      	ldrb	r3, [r3, #0]
 800b5ea:	461a      	mov	r2, r3
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	4413      	add	r3, r2
 800b5f0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b5f2:	68fb      	ldr	r3, [r7, #12]
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3714      	adds	r7, #20
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr

0800b600 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b600:	b480      	push	{r7}
 800b602:	b087      	sub	sp, #28
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	3301      	adds	r3, #1
 800b616:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	781b      	ldrb	r3, [r3, #0]
 800b61c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b61e:	8a3b      	ldrh	r3, [r7, #16]
 800b620:	021b      	lsls	r3, r3, #8
 800b622:	b21a      	sxth	r2, r3
 800b624:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b628:	4313      	orrs	r3, r2
 800b62a:	b21b      	sxth	r3, r3
 800b62c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b62e:	89fb      	ldrh	r3, [r7, #14]
}
 800b630:	4618      	mov	r0, r3
 800b632:	371c      	adds	r7, #28
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr

0800b63c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b084      	sub	sp, #16
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b646:	2300      	movs	r3, #0
 800b648:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b652:	2b40      	cmp	r3, #64	; 0x40
 800b654:	d005      	beq.n	800b662 <USBD_StdDevReq+0x26>
 800b656:	2b40      	cmp	r3, #64	; 0x40
 800b658:	d857      	bhi.n	800b70a <USBD_StdDevReq+0xce>
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d00f      	beq.n	800b67e <USBD_StdDevReq+0x42>
 800b65e:	2b20      	cmp	r3, #32
 800b660:	d153      	bne.n	800b70a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	32ae      	adds	r2, #174	; 0xae
 800b66c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b670:	689b      	ldr	r3, [r3, #8]
 800b672:	6839      	ldr	r1, [r7, #0]
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	4798      	blx	r3
 800b678:	4603      	mov	r3, r0
 800b67a:	73fb      	strb	r3, [r7, #15]
      break;
 800b67c:	e04a      	b.n	800b714 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	785b      	ldrb	r3, [r3, #1]
 800b682:	2b09      	cmp	r3, #9
 800b684:	d83b      	bhi.n	800b6fe <USBD_StdDevReq+0xc2>
 800b686:	a201      	add	r2, pc, #4	; (adr r2, 800b68c <USBD_StdDevReq+0x50>)
 800b688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b68c:	0800b6e1 	.word	0x0800b6e1
 800b690:	0800b6f5 	.word	0x0800b6f5
 800b694:	0800b6ff 	.word	0x0800b6ff
 800b698:	0800b6eb 	.word	0x0800b6eb
 800b69c:	0800b6ff 	.word	0x0800b6ff
 800b6a0:	0800b6bf 	.word	0x0800b6bf
 800b6a4:	0800b6b5 	.word	0x0800b6b5
 800b6a8:	0800b6ff 	.word	0x0800b6ff
 800b6ac:	0800b6d7 	.word	0x0800b6d7
 800b6b0:	0800b6c9 	.word	0x0800b6c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b6b4:	6839      	ldr	r1, [r7, #0]
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f000 fa3c 	bl	800bb34 <USBD_GetDescriptor>
          break;
 800b6bc:	e024      	b.n	800b708 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b6be:	6839      	ldr	r1, [r7, #0]
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f000 fbcb 	bl	800be5c <USBD_SetAddress>
          break;
 800b6c6:	e01f      	b.n	800b708 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b6c8:	6839      	ldr	r1, [r7, #0]
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f000 fc0a 	bl	800bee4 <USBD_SetConfig>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	73fb      	strb	r3, [r7, #15]
          break;
 800b6d4:	e018      	b.n	800b708 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b6d6:	6839      	ldr	r1, [r7, #0]
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f000 fcad 	bl	800c038 <USBD_GetConfig>
          break;
 800b6de:	e013      	b.n	800b708 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b6e0:	6839      	ldr	r1, [r7, #0]
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f000 fcde 	bl	800c0a4 <USBD_GetStatus>
          break;
 800b6e8:	e00e      	b.n	800b708 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b6ea:	6839      	ldr	r1, [r7, #0]
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f000 fd0d 	bl	800c10c <USBD_SetFeature>
          break;
 800b6f2:	e009      	b.n	800b708 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b6f4:	6839      	ldr	r1, [r7, #0]
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f000 fd31 	bl	800c15e <USBD_ClrFeature>
          break;
 800b6fc:	e004      	b.n	800b708 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b6fe:	6839      	ldr	r1, [r7, #0]
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f000 fd88 	bl	800c216 <USBD_CtlError>
          break;
 800b706:	bf00      	nop
      }
      break;
 800b708:	e004      	b.n	800b714 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b70a:	6839      	ldr	r1, [r7, #0]
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f000 fd82 	bl	800c216 <USBD_CtlError>
      break;
 800b712:	bf00      	nop
  }

  return ret;
 800b714:	7bfb      	ldrb	r3, [r7, #15]
}
 800b716:	4618      	mov	r0, r3
 800b718:	3710      	adds	r7, #16
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop

0800b720 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b72a:	2300      	movs	r3, #0
 800b72c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b736:	2b40      	cmp	r3, #64	; 0x40
 800b738:	d005      	beq.n	800b746 <USBD_StdItfReq+0x26>
 800b73a:	2b40      	cmp	r3, #64	; 0x40
 800b73c:	d852      	bhi.n	800b7e4 <USBD_StdItfReq+0xc4>
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d001      	beq.n	800b746 <USBD_StdItfReq+0x26>
 800b742:	2b20      	cmp	r3, #32
 800b744:	d14e      	bne.n	800b7e4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b74c:	b2db      	uxtb	r3, r3
 800b74e:	3b01      	subs	r3, #1
 800b750:	2b02      	cmp	r3, #2
 800b752:	d840      	bhi.n	800b7d6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	889b      	ldrh	r3, [r3, #4]
 800b758:	b2db      	uxtb	r3, r3
 800b75a:	2b01      	cmp	r3, #1
 800b75c:	d836      	bhi.n	800b7cc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	889b      	ldrh	r3, [r3, #4]
 800b762:	b2db      	uxtb	r3, r3
 800b764:	4619      	mov	r1, r3
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f7ff fed9 	bl	800b51e <USBD_CoreFindIF>
 800b76c:	4603      	mov	r3, r0
 800b76e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b770:	7bbb      	ldrb	r3, [r7, #14]
 800b772:	2bff      	cmp	r3, #255	; 0xff
 800b774:	d01d      	beq.n	800b7b2 <USBD_StdItfReq+0x92>
 800b776:	7bbb      	ldrb	r3, [r7, #14]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d11a      	bne.n	800b7b2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b77c:	7bba      	ldrb	r2, [r7, #14]
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	32ae      	adds	r2, #174	; 0xae
 800b782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b786:	689b      	ldr	r3, [r3, #8]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d00f      	beq.n	800b7ac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b78c:	7bba      	ldrb	r2, [r7, #14]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b794:	7bba      	ldrb	r2, [r7, #14]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	32ae      	adds	r2, #174	; 0xae
 800b79a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b79e:	689b      	ldr	r3, [r3, #8]
 800b7a0:	6839      	ldr	r1, [r7, #0]
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	4798      	blx	r3
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b7aa:	e004      	b.n	800b7b6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b7ac:	2303      	movs	r3, #3
 800b7ae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b7b0:	e001      	b.n	800b7b6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b7b2:	2303      	movs	r3, #3
 800b7b4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	88db      	ldrh	r3, [r3, #6]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d110      	bne.n	800b7e0 <USBD_StdItfReq+0xc0>
 800b7be:	7bfb      	ldrb	r3, [r7, #15]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d10d      	bne.n	800b7e0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f000 fdf1 	bl	800c3ac <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b7ca:	e009      	b.n	800b7e0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b7cc:	6839      	ldr	r1, [r7, #0]
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f000 fd21 	bl	800c216 <USBD_CtlError>
          break;
 800b7d4:	e004      	b.n	800b7e0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b7d6:	6839      	ldr	r1, [r7, #0]
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f000 fd1c 	bl	800c216 <USBD_CtlError>
          break;
 800b7de:	e000      	b.n	800b7e2 <USBD_StdItfReq+0xc2>
          break;
 800b7e0:	bf00      	nop
      }
      break;
 800b7e2:	e004      	b.n	800b7ee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b7e4:	6839      	ldr	r1, [r7, #0]
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 fd15 	bl	800c216 <USBD_CtlError>
      break;
 800b7ec:	bf00      	nop
  }

  return ret;
 800b7ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3710      	adds	r7, #16
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b084      	sub	sp, #16
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b802:	2300      	movs	r3, #0
 800b804:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	889b      	ldrh	r3, [r3, #4]
 800b80a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	781b      	ldrb	r3, [r3, #0]
 800b810:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b814:	2b40      	cmp	r3, #64	; 0x40
 800b816:	d007      	beq.n	800b828 <USBD_StdEPReq+0x30>
 800b818:	2b40      	cmp	r3, #64	; 0x40
 800b81a:	f200 817f 	bhi.w	800bb1c <USBD_StdEPReq+0x324>
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d02a      	beq.n	800b878 <USBD_StdEPReq+0x80>
 800b822:	2b20      	cmp	r3, #32
 800b824:	f040 817a 	bne.w	800bb1c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b828:	7bbb      	ldrb	r3, [r7, #14]
 800b82a:	4619      	mov	r1, r3
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f7ff fe83 	bl	800b538 <USBD_CoreFindEP>
 800b832:	4603      	mov	r3, r0
 800b834:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b836:	7b7b      	ldrb	r3, [r7, #13]
 800b838:	2bff      	cmp	r3, #255	; 0xff
 800b83a:	f000 8174 	beq.w	800bb26 <USBD_StdEPReq+0x32e>
 800b83e:	7b7b      	ldrb	r3, [r7, #13]
 800b840:	2b00      	cmp	r3, #0
 800b842:	f040 8170 	bne.w	800bb26 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b846:	7b7a      	ldrb	r2, [r7, #13]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b84e:	7b7a      	ldrb	r2, [r7, #13]
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	32ae      	adds	r2, #174	; 0xae
 800b854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b858:	689b      	ldr	r3, [r3, #8]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	f000 8163 	beq.w	800bb26 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b860:	7b7a      	ldrb	r2, [r7, #13]
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	32ae      	adds	r2, #174	; 0xae
 800b866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b86a:	689b      	ldr	r3, [r3, #8]
 800b86c:	6839      	ldr	r1, [r7, #0]
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	4798      	blx	r3
 800b872:	4603      	mov	r3, r0
 800b874:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b876:	e156      	b.n	800bb26 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	785b      	ldrb	r3, [r3, #1]
 800b87c:	2b03      	cmp	r3, #3
 800b87e:	d008      	beq.n	800b892 <USBD_StdEPReq+0x9a>
 800b880:	2b03      	cmp	r3, #3
 800b882:	f300 8145 	bgt.w	800bb10 <USBD_StdEPReq+0x318>
 800b886:	2b00      	cmp	r3, #0
 800b888:	f000 809b 	beq.w	800b9c2 <USBD_StdEPReq+0x1ca>
 800b88c:	2b01      	cmp	r3, #1
 800b88e:	d03c      	beq.n	800b90a <USBD_StdEPReq+0x112>
 800b890:	e13e      	b.n	800bb10 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b898:	b2db      	uxtb	r3, r3
 800b89a:	2b02      	cmp	r3, #2
 800b89c:	d002      	beq.n	800b8a4 <USBD_StdEPReq+0xac>
 800b89e:	2b03      	cmp	r3, #3
 800b8a0:	d016      	beq.n	800b8d0 <USBD_StdEPReq+0xd8>
 800b8a2:	e02c      	b.n	800b8fe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b8a4:	7bbb      	ldrb	r3, [r7, #14]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d00d      	beq.n	800b8c6 <USBD_StdEPReq+0xce>
 800b8aa:	7bbb      	ldrb	r3, [r7, #14]
 800b8ac:	2b80      	cmp	r3, #128	; 0x80
 800b8ae:	d00a      	beq.n	800b8c6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b8b0:	7bbb      	ldrb	r3, [r7, #14]
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f004 fae5 	bl	800fe84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b8ba:	2180      	movs	r1, #128	; 0x80
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f004 fae1 	bl	800fe84 <USBD_LL_StallEP>
 800b8c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b8c4:	e020      	b.n	800b908 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b8c6:	6839      	ldr	r1, [r7, #0]
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f000 fca4 	bl	800c216 <USBD_CtlError>
              break;
 800b8ce:	e01b      	b.n	800b908 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	885b      	ldrh	r3, [r3, #2]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d10e      	bne.n	800b8f6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b8d8:	7bbb      	ldrb	r3, [r7, #14]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d00b      	beq.n	800b8f6 <USBD_StdEPReq+0xfe>
 800b8de:	7bbb      	ldrb	r3, [r7, #14]
 800b8e0:	2b80      	cmp	r3, #128	; 0x80
 800b8e2:	d008      	beq.n	800b8f6 <USBD_StdEPReq+0xfe>
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	88db      	ldrh	r3, [r3, #6]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d104      	bne.n	800b8f6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b8ec:	7bbb      	ldrb	r3, [r7, #14]
 800b8ee:	4619      	mov	r1, r3
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f004 fac7 	bl	800fe84 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f000 fd58 	bl	800c3ac <USBD_CtlSendStatus>

              break;
 800b8fc:	e004      	b.n	800b908 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b8fe:	6839      	ldr	r1, [r7, #0]
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f000 fc88 	bl	800c216 <USBD_CtlError>
              break;
 800b906:	bf00      	nop
          }
          break;
 800b908:	e107      	b.n	800bb1a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b910:	b2db      	uxtb	r3, r3
 800b912:	2b02      	cmp	r3, #2
 800b914:	d002      	beq.n	800b91c <USBD_StdEPReq+0x124>
 800b916:	2b03      	cmp	r3, #3
 800b918:	d016      	beq.n	800b948 <USBD_StdEPReq+0x150>
 800b91a:	e04b      	b.n	800b9b4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b91c:	7bbb      	ldrb	r3, [r7, #14]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d00d      	beq.n	800b93e <USBD_StdEPReq+0x146>
 800b922:	7bbb      	ldrb	r3, [r7, #14]
 800b924:	2b80      	cmp	r3, #128	; 0x80
 800b926:	d00a      	beq.n	800b93e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b928:	7bbb      	ldrb	r3, [r7, #14]
 800b92a:	4619      	mov	r1, r3
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f004 faa9 	bl	800fe84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b932:	2180      	movs	r1, #128	; 0x80
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f004 faa5 	bl	800fe84 <USBD_LL_StallEP>
 800b93a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b93c:	e040      	b.n	800b9c0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b93e:	6839      	ldr	r1, [r7, #0]
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f000 fc68 	bl	800c216 <USBD_CtlError>
              break;
 800b946:	e03b      	b.n	800b9c0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	885b      	ldrh	r3, [r3, #2]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d136      	bne.n	800b9be <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b950:	7bbb      	ldrb	r3, [r7, #14]
 800b952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b956:	2b00      	cmp	r3, #0
 800b958:	d004      	beq.n	800b964 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b95a:	7bbb      	ldrb	r3, [r7, #14]
 800b95c:	4619      	mov	r1, r3
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f004 faaf 	bl	800fec2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f000 fd21 	bl	800c3ac <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b96a:	7bbb      	ldrb	r3, [r7, #14]
 800b96c:	4619      	mov	r1, r3
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f7ff fde2 	bl	800b538 <USBD_CoreFindEP>
 800b974:	4603      	mov	r3, r0
 800b976:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b978:	7b7b      	ldrb	r3, [r7, #13]
 800b97a:	2bff      	cmp	r3, #255	; 0xff
 800b97c:	d01f      	beq.n	800b9be <USBD_StdEPReq+0x1c6>
 800b97e:	7b7b      	ldrb	r3, [r7, #13]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d11c      	bne.n	800b9be <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b984:	7b7a      	ldrb	r2, [r7, #13]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b98c:	7b7a      	ldrb	r2, [r7, #13]
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	32ae      	adds	r2, #174	; 0xae
 800b992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b996:	689b      	ldr	r3, [r3, #8]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d010      	beq.n	800b9be <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b99c:	7b7a      	ldrb	r2, [r7, #13]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	32ae      	adds	r2, #174	; 0xae
 800b9a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9a6:	689b      	ldr	r3, [r3, #8]
 800b9a8:	6839      	ldr	r1, [r7, #0]
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	4798      	blx	r3
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b9b2:	e004      	b.n	800b9be <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b9b4:	6839      	ldr	r1, [r7, #0]
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 fc2d 	bl	800c216 <USBD_CtlError>
              break;
 800b9bc:	e000      	b.n	800b9c0 <USBD_StdEPReq+0x1c8>
              break;
 800b9be:	bf00      	nop
          }
          break;
 800b9c0:	e0ab      	b.n	800bb1a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9c8:	b2db      	uxtb	r3, r3
 800b9ca:	2b02      	cmp	r3, #2
 800b9cc:	d002      	beq.n	800b9d4 <USBD_StdEPReq+0x1dc>
 800b9ce:	2b03      	cmp	r3, #3
 800b9d0:	d032      	beq.n	800ba38 <USBD_StdEPReq+0x240>
 800b9d2:	e097      	b.n	800bb04 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b9d4:	7bbb      	ldrb	r3, [r7, #14]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d007      	beq.n	800b9ea <USBD_StdEPReq+0x1f2>
 800b9da:	7bbb      	ldrb	r3, [r7, #14]
 800b9dc:	2b80      	cmp	r3, #128	; 0x80
 800b9de:	d004      	beq.n	800b9ea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b9e0:	6839      	ldr	r1, [r7, #0]
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f000 fc17 	bl	800c216 <USBD_CtlError>
                break;
 800b9e8:	e091      	b.n	800bb0e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	da0b      	bge.n	800ba0a <USBD_StdEPReq+0x212>
 800b9f2:	7bbb      	ldrb	r3, [r7, #14]
 800b9f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b9f8:	4613      	mov	r3, r2
 800b9fa:	009b      	lsls	r3, r3, #2
 800b9fc:	4413      	add	r3, r2
 800b9fe:	009b      	lsls	r3, r3, #2
 800ba00:	3310      	adds	r3, #16
 800ba02:	687a      	ldr	r2, [r7, #4]
 800ba04:	4413      	add	r3, r2
 800ba06:	3304      	adds	r3, #4
 800ba08:	e00b      	b.n	800ba22 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ba0a:	7bbb      	ldrb	r3, [r7, #14]
 800ba0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba10:	4613      	mov	r3, r2
 800ba12:	009b      	lsls	r3, r3, #2
 800ba14:	4413      	add	r3, r2
 800ba16:	009b      	lsls	r3, r3, #2
 800ba18:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ba1c:	687a      	ldr	r2, [r7, #4]
 800ba1e:	4413      	add	r3, r2
 800ba20:	3304      	adds	r3, #4
 800ba22:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	2200      	movs	r2, #0
 800ba28:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	2202      	movs	r2, #2
 800ba2e:	4619      	mov	r1, r3
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f000 fc61 	bl	800c2f8 <USBD_CtlSendData>
              break;
 800ba36:	e06a      	b.n	800bb0e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ba38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	da11      	bge.n	800ba64 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ba40:	7bbb      	ldrb	r3, [r7, #14]
 800ba42:	f003 020f 	and.w	r2, r3, #15
 800ba46:	6879      	ldr	r1, [r7, #4]
 800ba48:	4613      	mov	r3, r2
 800ba4a:	009b      	lsls	r3, r3, #2
 800ba4c:	4413      	add	r3, r2
 800ba4e:	009b      	lsls	r3, r3, #2
 800ba50:	440b      	add	r3, r1
 800ba52:	3324      	adds	r3, #36	; 0x24
 800ba54:	881b      	ldrh	r3, [r3, #0]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d117      	bne.n	800ba8a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ba5a:	6839      	ldr	r1, [r7, #0]
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f000 fbda 	bl	800c216 <USBD_CtlError>
                  break;
 800ba62:	e054      	b.n	800bb0e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ba64:	7bbb      	ldrb	r3, [r7, #14]
 800ba66:	f003 020f 	and.w	r2, r3, #15
 800ba6a:	6879      	ldr	r1, [r7, #4]
 800ba6c:	4613      	mov	r3, r2
 800ba6e:	009b      	lsls	r3, r3, #2
 800ba70:	4413      	add	r3, r2
 800ba72:	009b      	lsls	r3, r3, #2
 800ba74:	440b      	add	r3, r1
 800ba76:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ba7a:	881b      	ldrh	r3, [r3, #0]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d104      	bne.n	800ba8a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ba80:	6839      	ldr	r1, [r7, #0]
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f000 fbc7 	bl	800c216 <USBD_CtlError>
                  break;
 800ba88:	e041      	b.n	800bb0e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	da0b      	bge.n	800baaa <USBD_StdEPReq+0x2b2>
 800ba92:	7bbb      	ldrb	r3, [r7, #14]
 800ba94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba98:	4613      	mov	r3, r2
 800ba9a:	009b      	lsls	r3, r3, #2
 800ba9c:	4413      	add	r3, r2
 800ba9e:	009b      	lsls	r3, r3, #2
 800baa0:	3310      	adds	r3, #16
 800baa2:	687a      	ldr	r2, [r7, #4]
 800baa4:	4413      	add	r3, r2
 800baa6:	3304      	adds	r3, #4
 800baa8:	e00b      	b.n	800bac2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800baaa:	7bbb      	ldrb	r3, [r7, #14]
 800baac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bab0:	4613      	mov	r3, r2
 800bab2:	009b      	lsls	r3, r3, #2
 800bab4:	4413      	add	r3, r2
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800babc:	687a      	ldr	r2, [r7, #4]
 800babe:	4413      	add	r3, r2
 800bac0:	3304      	adds	r3, #4
 800bac2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bac4:	7bbb      	ldrb	r3, [r7, #14]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d002      	beq.n	800bad0 <USBD_StdEPReq+0x2d8>
 800baca:	7bbb      	ldrb	r3, [r7, #14]
 800bacc:	2b80      	cmp	r3, #128	; 0x80
 800bace:	d103      	bne.n	800bad8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	2200      	movs	r2, #0
 800bad4:	601a      	str	r2, [r3, #0]
 800bad6:	e00e      	b.n	800baf6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bad8:	7bbb      	ldrb	r3, [r7, #14]
 800bada:	4619      	mov	r1, r3
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f004 fa0f 	bl	800ff00 <USBD_LL_IsStallEP>
 800bae2:	4603      	mov	r3, r0
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d003      	beq.n	800baf0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	2201      	movs	r2, #1
 800baec:	601a      	str	r2, [r3, #0]
 800baee:	e002      	b.n	800baf6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	2200      	movs	r2, #0
 800baf4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	2202      	movs	r2, #2
 800bafa:	4619      	mov	r1, r3
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f000 fbfb 	bl	800c2f8 <USBD_CtlSendData>
              break;
 800bb02:	e004      	b.n	800bb0e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bb04:	6839      	ldr	r1, [r7, #0]
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f000 fb85 	bl	800c216 <USBD_CtlError>
              break;
 800bb0c:	bf00      	nop
          }
          break;
 800bb0e:	e004      	b.n	800bb1a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bb10:	6839      	ldr	r1, [r7, #0]
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f000 fb7f 	bl	800c216 <USBD_CtlError>
          break;
 800bb18:	bf00      	nop
      }
      break;
 800bb1a:	e005      	b.n	800bb28 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bb1c:	6839      	ldr	r1, [r7, #0]
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f000 fb79 	bl	800c216 <USBD_CtlError>
      break;
 800bb24:	e000      	b.n	800bb28 <USBD_StdEPReq+0x330>
      break;
 800bb26:	bf00      	nop
  }

  return ret;
 800bb28:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3710      	adds	r7, #16
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
	...

0800bb34 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b084      	sub	sp, #16
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bb42:	2300      	movs	r3, #0
 800bb44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bb46:	2300      	movs	r3, #0
 800bb48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	885b      	ldrh	r3, [r3, #2]
 800bb4e:	0a1b      	lsrs	r3, r3, #8
 800bb50:	b29b      	uxth	r3, r3
 800bb52:	3b01      	subs	r3, #1
 800bb54:	2b0e      	cmp	r3, #14
 800bb56:	f200 8152 	bhi.w	800bdfe <USBD_GetDescriptor+0x2ca>
 800bb5a:	a201      	add	r2, pc, #4	; (adr r2, 800bb60 <USBD_GetDescriptor+0x2c>)
 800bb5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb60:	0800bbd1 	.word	0x0800bbd1
 800bb64:	0800bbe9 	.word	0x0800bbe9
 800bb68:	0800bc29 	.word	0x0800bc29
 800bb6c:	0800bdff 	.word	0x0800bdff
 800bb70:	0800bdff 	.word	0x0800bdff
 800bb74:	0800bd9f 	.word	0x0800bd9f
 800bb78:	0800bdcb 	.word	0x0800bdcb
 800bb7c:	0800bdff 	.word	0x0800bdff
 800bb80:	0800bdff 	.word	0x0800bdff
 800bb84:	0800bdff 	.word	0x0800bdff
 800bb88:	0800bdff 	.word	0x0800bdff
 800bb8c:	0800bdff 	.word	0x0800bdff
 800bb90:	0800bdff 	.word	0x0800bdff
 800bb94:	0800bdff 	.word	0x0800bdff
 800bb98:	0800bb9d 	.word	0x0800bb9d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bba2:	69db      	ldr	r3, [r3, #28]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d00b      	beq.n	800bbc0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbae:	69db      	ldr	r3, [r3, #28]
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	7c12      	ldrb	r2, [r2, #16]
 800bbb4:	f107 0108 	add.w	r1, r7, #8
 800bbb8:	4610      	mov	r0, r2
 800bbba:	4798      	blx	r3
 800bbbc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bbbe:	e126      	b.n	800be0e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bbc0:	6839      	ldr	r1, [r7, #0]
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f000 fb27 	bl	800c216 <USBD_CtlError>
        err++;
 800bbc8:	7afb      	ldrb	r3, [r7, #11]
 800bbca:	3301      	adds	r3, #1
 800bbcc:	72fb      	strb	r3, [r7, #11]
      break;
 800bbce:	e11e      	b.n	800be0e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	687a      	ldr	r2, [r7, #4]
 800bbda:	7c12      	ldrb	r2, [r2, #16]
 800bbdc:	f107 0108 	add.w	r1, r7, #8
 800bbe0:	4610      	mov	r0, r2
 800bbe2:	4798      	blx	r3
 800bbe4:	60f8      	str	r0, [r7, #12]
      break;
 800bbe6:	e112      	b.n	800be0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	7c1b      	ldrb	r3, [r3, #16]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d10d      	bne.n	800bc0c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbf8:	f107 0208 	add.w	r2, r7, #8
 800bbfc:	4610      	mov	r0, r2
 800bbfe:	4798      	blx	r3
 800bc00:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	3301      	adds	r3, #1
 800bc06:	2202      	movs	r2, #2
 800bc08:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bc0a:	e100      	b.n	800be0e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc14:	f107 0208 	add.w	r2, r7, #8
 800bc18:	4610      	mov	r0, r2
 800bc1a:	4798      	blx	r3
 800bc1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	3301      	adds	r3, #1
 800bc22:	2202      	movs	r2, #2
 800bc24:	701a      	strb	r2, [r3, #0]
      break;
 800bc26:	e0f2      	b.n	800be0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	885b      	ldrh	r3, [r3, #2]
 800bc2c:	b2db      	uxtb	r3, r3
 800bc2e:	2b05      	cmp	r3, #5
 800bc30:	f200 80ac 	bhi.w	800bd8c <USBD_GetDescriptor+0x258>
 800bc34:	a201      	add	r2, pc, #4	; (adr r2, 800bc3c <USBD_GetDescriptor+0x108>)
 800bc36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc3a:	bf00      	nop
 800bc3c:	0800bc55 	.word	0x0800bc55
 800bc40:	0800bc89 	.word	0x0800bc89
 800bc44:	0800bcbd 	.word	0x0800bcbd
 800bc48:	0800bcf1 	.word	0x0800bcf1
 800bc4c:	0800bd25 	.word	0x0800bd25
 800bc50:	0800bd59 	.word	0x0800bd59
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d00b      	beq.n	800bc78 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc66:	685b      	ldr	r3, [r3, #4]
 800bc68:	687a      	ldr	r2, [r7, #4]
 800bc6a:	7c12      	ldrb	r2, [r2, #16]
 800bc6c:	f107 0108 	add.w	r1, r7, #8
 800bc70:	4610      	mov	r0, r2
 800bc72:	4798      	blx	r3
 800bc74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc76:	e091      	b.n	800bd9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bc78:	6839      	ldr	r1, [r7, #0]
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f000 facb 	bl	800c216 <USBD_CtlError>
            err++;
 800bc80:	7afb      	ldrb	r3, [r7, #11]
 800bc82:	3301      	adds	r3, #1
 800bc84:	72fb      	strb	r3, [r7, #11]
          break;
 800bc86:	e089      	b.n	800bd9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc8e:	689b      	ldr	r3, [r3, #8]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d00b      	beq.n	800bcac <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc9a:	689b      	ldr	r3, [r3, #8]
 800bc9c:	687a      	ldr	r2, [r7, #4]
 800bc9e:	7c12      	ldrb	r2, [r2, #16]
 800bca0:	f107 0108 	add.w	r1, r7, #8
 800bca4:	4610      	mov	r0, r2
 800bca6:	4798      	blx	r3
 800bca8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcaa:	e077      	b.n	800bd9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bcac:	6839      	ldr	r1, [r7, #0]
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f000 fab1 	bl	800c216 <USBD_CtlError>
            err++;
 800bcb4:	7afb      	ldrb	r3, [r7, #11]
 800bcb6:	3301      	adds	r3, #1
 800bcb8:	72fb      	strb	r3, [r7, #11]
          break;
 800bcba:	e06f      	b.n	800bd9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcc2:	68db      	ldr	r3, [r3, #12]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d00b      	beq.n	800bce0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcce:	68db      	ldr	r3, [r3, #12]
 800bcd0:	687a      	ldr	r2, [r7, #4]
 800bcd2:	7c12      	ldrb	r2, [r2, #16]
 800bcd4:	f107 0108 	add.w	r1, r7, #8
 800bcd8:	4610      	mov	r0, r2
 800bcda:	4798      	blx	r3
 800bcdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcde:	e05d      	b.n	800bd9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bce0:	6839      	ldr	r1, [r7, #0]
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f000 fa97 	bl	800c216 <USBD_CtlError>
            err++;
 800bce8:	7afb      	ldrb	r3, [r7, #11]
 800bcea:	3301      	adds	r3, #1
 800bcec:	72fb      	strb	r3, [r7, #11]
          break;
 800bcee:	e055      	b.n	800bd9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcf6:	691b      	ldr	r3, [r3, #16]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d00b      	beq.n	800bd14 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd02:	691b      	ldr	r3, [r3, #16]
 800bd04:	687a      	ldr	r2, [r7, #4]
 800bd06:	7c12      	ldrb	r2, [r2, #16]
 800bd08:	f107 0108 	add.w	r1, r7, #8
 800bd0c:	4610      	mov	r0, r2
 800bd0e:	4798      	blx	r3
 800bd10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd12:	e043      	b.n	800bd9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bd14:	6839      	ldr	r1, [r7, #0]
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f000 fa7d 	bl	800c216 <USBD_CtlError>
            err++;
 800bd1c:	7afb      	ldrb	r3, [r7, #11]
 800bd1e:	3301      	adds	r3, #1
 800bd20:	72fb      	strb	r3, [r7, #11]
          break;
 800bd22:	e03b      	b.n	800bd9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd2a:	695b      	ldr	r3, [r3, #20]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d00b      	beq.n	800bd48 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd36:	695b      	ldr	r3, [r3, #20]
 800bd38:	687a      	ldr	r2, [r7, #4]
 800bd3a:	7c12      	ldrb	r2, [r2, #16]
 800bd3c:	f107 0108 	add.w	r1, r7, #8
 800bd40:	4610      	mov	r0, r2
 800bd42:	4798      	blx	r3
 800bd44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd46:	e029      	b.n	800bd9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bd48:	6839      	ldr	r1, [r7, #0]
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f000 fa63 	bl	800c216 <USBD_CtlError>
            err++;
 800bd50:	7afb      	ldrb	r3, [r7, #11]
 800bd52:	3301      	adds	r3, #1
 800bd54:	72fb      	strb	r3, [r7, #11]
          break;
 800bd56:	e021      	b.n	800bd9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd5e:	699b      	ldr	r3, [r3, #24]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d00b      	beq.n	800bd7c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd6a:	699b      	ldr	r3, [r3, #24]
 800bd6c:	687a      	ldr	r2, [r7, #4]
 800bd6e:	7c12      	ldrb	r2, [r2, #16]
 800bd70:	f107 0108 	add.w	r1, r7, #8
 800bd74:	4610      	mov	r0, r2
 800bd76:	4798      	blx	r3
 800bd78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd7a:	e00f      	b.n	800bd9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bd7c:	6839      	ldr	r1, [r7, #0]
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f000 fa49 	bl	800c216 <USBD_CtlError>
            err++;
 800bd84:	7afb      	ldrb	r3, [r7, #11]
 800bd86:	3301      	adds	r3, #1
 800bd88:	72fb      	strb	r3, [r7, #11]
          break;
 800bd8a:	e007      	b.n	800bd9c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bd8c:	6839      	ldr	r1, [r7, #0]
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f000 fa41 	bl	800c216 <USBD_CtlError>
          err++;
 800bd94:	7afb      	ldrb	r3, [r7, #11]
 800bd96:	3301      	adds	r3, #1
 800bd98:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bd9a:	bf00      	nop
      }
      break;
 800bd9c:	e037      	b.n	800be0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	7c1b      	ldrb	r3, [r3, #16]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d109      	bne.n	800bdba <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdae:	f107 0208 	add.w	r2, r7, #8
 800bdb2:	4610      	mov	r0, r2
 800bdb4:	4798      	blx	r3
 800bdb6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bdb8:	e029      	b.n	800be0e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bdba:	6839      	ldr	r1, [r7, #0]
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f000 fa2a 	bl	800c216 <USBD_CtlError>
        err++;
 800bdc2:	7afb      	ldrb	r3, [r7, #11]
 800bdc4:	3301      	adds	r3, #1
 800bdc6:	72fb      	strb	r3, [r7, #11]
      break;
 800bdc8:	e021      	b.n	800be0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	7c1b      	ldrb	r3, [r3, #16]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d10d      	bne.n	800bdee <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdda:	f107 0208 	add.w	r2, r7, #8
 800bdde:	4610      	mov	r0, r2
 800bde0:	4798      	blx	r3
 800bde2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	3301      	adds	r3, #1
 800bde8:	2207      	movs	r2, #7
 800bdea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bdec:	e00f      	b.n	800be0e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bdee:	6839      	ldr	r1, [r7, #0]
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f000 fa10 	bl	800c216 <USBD_CtlError>
        err++;
 800bdf6:	7afb      	ldrb	r3, [r7, #11]
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	72fb      	strb	r3, [r7, #11]
      break;
 800bdfc:	e007      	b.n	800be0e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800bdfe:	6839      	ldr	r1, [r7, #0]
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f000 fa08 	bl	800c216 <USBD_CtlError>
      err++;
 800be06:	7afb      	ldrb	r3, [r7, #11]
 800be08:	3301      	adds	r3, #1
 800be0a:	72fb      	strb	r3, [r7, #11]
      break;
 800be0c:	bf00      	nop
  }

  if (err != 0U)
 800be0e:	7afb      	ldrb	r3, [r7, #11]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d11e      	bne.n	800be52 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	88db      	ldrh	r3, [r3, #6]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d016      	beq.n	800be4a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800be1c:	893b      	ldrh	r3, [r7, #8]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d00e      	beq.n	800be40 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	88da      	ldrh	r2, [r3, #6]
 800be26:	893b      	ldrh	r3, [r7, #8]
 800be28:	4293      	cmp	r3, r2
 800be2a:	bf28      	it	cs
 800be2c:	4613      	movcs	r3, r2
 800be2e:	b29b      	uxth	r3, r3
 800be30:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800be32:	893b      	ldrh	r3, [r7, #8]
 800be34:	461a      	mov	r2, r3
 800be36:	68f9      	ldr	r1, [r7, #12]
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f000 fa5d 	bl	800c2f8 <USBD_CtlSendData>
 800be3e:	e009      	b.n	800be54 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800be40:	6839      	ldr	r1, [r7, #0]
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f000 f9e7 	bl	800c216 <USBD_CtlError>
 800be48:	e004      	b.n	800be54 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f000 faae 	bl	800c3ac <USBD_CtlSendStatus>
 800be50:	e000      	b.n	800be54 <USBD_GetDescriptor+0x320>
    return;
 800be52:	bf00      	nop
  }
}
 800be54:	3710      	adds	r7, #16
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}
 800be5a:	bf00      	nop

0800be5c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b084      	sub	sp, #16
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
 800be64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	889b      	ldrh	r3, [r3, #4]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d131      	bne.n	800bed2 <USBD_SetAddress+0x76>
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	88db      	ldrh	r3, [r3, #6]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d12d      	bne.n	800bed2 <USBD_SetAddress+0x76>
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	885b      	ldrh	r3, [r3, #2]
 800be7a:	2b7f      	cmp	r3, #127	; 0x7f
 800be7c:	d829      	bhi.n	800bed2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	885b      	ldrh	r3, [r3, #2]
 800be82:	b2db      	uxtb	r3, r3
 800be84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be90:	b2db      	uxtb	r3, r3
 800be92:	2b03      	cmp	r3, #3
 800be94:	d104      	bne.n	800bea0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800be96:	6839      	ldr	r1, [r7, #0]
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f000 f9bc 	bl	800c216 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be9e:	e01d      	b.n	800bedc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	7bfa      	ldrb	r2, [r7, #15]
 800bea4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bea8:	7bfb      	ldrb	r3, [r7, #15]
 800beaa:	4619      	mov	r1, r3
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f004 f853 	bl	800ff58 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f000 fa7a 	bl	800c3ac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800beb8:	7bfb      	ldrb	r3, [r7, #15]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d004      	beq.n	800bec8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2202      	movs	r2, #2
 800bec2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bec6:	e009      	b.n	800bedc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2201      	movs	r2, #1
 800becc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bed0:	e004      	b.n	800bedc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bed2:	6839      	ldr	r1, [r7, #0]
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f000 f99e 	bl	800c216 <USBD_CtlError>
  }
}
 800beda:	bf00      	nop
 800bedc:	bf00      	nop
 800bede:	3710      	adds	r7, #16
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b084      	sub	sp, #16
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800beee:	2300      	movs	r3, #0
 800bef0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	885b      	ldrh	r3, [r3, #2]
 800bef6:	b2da      	uxtb	r2, r3
 800bef8:	4b4e      	ldr	r3, [pc, #312]	; (800c034 <USBD_SetConfig+0x150>)
 800befa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800befc:	4b4d      	ldr	r3, [pc, #308]	; (800c034 <USBD_SetConfig+0x150>)
 800befe:	781b      	ldrb	r3, [r3, #0]
 800bf00:	2b01      	cmp	r3, #1
 800bf02:	d905      	bls.n	800bf10 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bf04:	6839      	ldr	r1, [r7, #0]
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f000 f985 	bl	800c216 <USBD_CtlError>
    return USBD_FAIL;
 800bf0c:	2303      	movs	r3, #3
 800bf0e:	e08c      	b.n	800c02a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf16:	b2db      	uxtb	r3, r3
 800bf18:	2b02      	cmp	r3, #2
 800bf1a:	d002      	beq.n	800bf22 <USBD_SetConfig+0x3e>
 800bf1c:	2b03      	cmp	r3, #3
 800bf1e:	d029      	beq.n	800bf74 <USBD_SetConfig+0x90>
 800bf20:	e075      	b.n	800c00e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bf22:	4b44      	ldr	r3, [pc, #272]	; (800c034 <USBD_SetConfig+0x150>)
 800bf24:	781b      	ldrb	r3, [r3, #0]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d020      	beq.n	800bf6c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bf2a:	4b42      	ldr	r3, [pc, #264]	; (800c034 <USBD_SetConfig+0x150>)
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	461a      	mov	r2, r3
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bf34:	4b3f      	ldr	r3, [pc, #252]	; (800c034 <USBD_SetConfig+0x150>)
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	4619      	mov	r1, r3
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f7fe ffbd 	bl	800aeba <USBD_SetClassConfig>
 800bf40:	4603      	mov	r3, r0
 800bf42:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bf44:	7bfb      	ldrb	r3, [r7, #15]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d008      	beq.n	800bf5c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bf4a:	6839      	ldr	r1, [r7, #0]
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f000 f962 	bl	800c216 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2202      	movs	r2, #2
 800bf56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bf5a:	e065      	b.n	800c028 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f000 fa25 	bl	800c3ac <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2203      	movs	r2, #3
 800bf66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bf6a:	e05d      	b.n	800c028 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f000 fa1d 	bl	800c3ac <USBD_CtlSendStatus>
      break;
 800bf72:	e059      	b.n	800c028 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bf74:	4b2f      	ldr	r3, [pc, #188]	; (800c034 <USBD_SetConfig+0x150>)
 800bf76:	781b      	ldrb	r3, [r3, #0]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d112      	bne.n	800bfa2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2202      	movs	r2, #2
 800bf80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bf84:	4b2b      	ldr	r3, [pc, #172]	; (800c034 <USBD_SetConfig+0x150>)
 800bf86:	781b      	ldrb	r3, [r3, #0]
 800bf88:	461a      	mov	r2, r3
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bf8e:	4b29      	ldr	r3, [pc, #164]	; (800c034 <USBD_SetConfig+0x150>)
 800bf90:	781b      	ldrb	r3, [r3, #0]
 800bf92:	4619      	mov	r1, r3
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f7fe ffac 	bl	800aef2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f000 fa06 	bl	800c3ac <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bfa0:	e042      	b.n	800c028 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bfa2:	4b24      	ldr	r3, [pc, #144]	; (800c034 <USBD_SetConfig+0x150>)
 800bfa4:	781b      	ldrb	r3, [r3, #0]
 800bfa6:	461a      	mov	r2, r3
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	685b      	ldr	r3, [r3, #4]
 800bfac:	429a      	cmp	r2, r3
 800bfae:	d02a      	beq.n	800c006 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	685b      	ldr	r3, [r3, #4]
 800bfb4:	b2db      	uxtb	r3, r3
 800bfb6:	4619      	mov	r1, r3
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f7fe ff9a 	bl	800aef2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bfbe:	4b1d      	ldr	r3, [pc, #116]	; (800c034 <USBD_SetConfig+0x150>)
 800bfc0:	781b      	ldrb	r3, [r3, #0]
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bfc8:	4b1a      	ldr	r3, [pc, #104]	; (800c034 <USBD_SetConfig+0x150>)
 800bfca:	781b      	ldrb	r3, [r3, #0]
 800bfcc:	4619      	mov	r1, r3
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f7fe ff73 	bl	800aeba <USBD_SetClassConfig>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bfd8:	7bfb      	ldrb	r3, [r7, #15]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d00f      	beq.n	800bffe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bfde:	6839      	ldr	r1, [r7, #0]
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f000 f918 	bl	800c216 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	685b      	ldr	r3, [r3, #4]
 800bfea:	b2db      	uxtb	r3, r3
 800bfec:	4619      	mov	r1, r3
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f7fe ff7f 	bl	800aef2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2202      	movs	r2, #2
 800bff8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bffc:	e014      	b.n	800c028 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f000 f9d4 	bl	800c3ac <USBD_CtlSendStatus>
      break;
 800c004:	e010      	b.n	800c028 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f000 f9d0 	bl	800c3ac <USBD_CtlSendStatus>
      break;
 800c00c:	e00c      	b.n	800c028 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c00e:	6839      	ldr	r1, [r7, #0]
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f000 f900 	bl	800c216 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c016:	4b07      	ldr	r3, [pc, #28]	; (800c034 <USBD_SetConfig+0x150>)
 800c018:	781b      	ldrb	r3, [r3, #0]
 800c01a:	4619      	mov	r1, r3
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f7fe ff68 	bl	800aef2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c022:	2303      	movs	r3, #3
 800c024:	73fb      	strb	r3, [r7, #15]
      break;
 800c026:	bf00      	nop
  }

  return ret;
 800c028:	7bfb      	ldrb	r3, [r7, #15]
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3710      	adds	r7, #16
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
 800c032:	bf00      	nop
 800c034:	2000326c 	.word	0x2000326c

0800c038 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b082      	sub	sp, #8
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	88db      	ldrh	r3, [r3, #6]
 800c046:	2b01      	cmp	r3, #1
 800c048:	d004      	beq.n	800c054 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c04a:	6839      	ldr	r1, [r7, #0]
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f000 f8e2 	bl	800c216 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c052:	e023      	b.n	800c09c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c05a:	b2db      	uxtb	r3, r3
 800c05c:	2b02      	cmp	r3, #2
 800c05e:	dc02      	bgt.n	800c066 <USBD_GetConfig+0x2e>
 800c060:	2b00      	cmp	r3, #0
 800c062:	dc03      	bgt.n	800c06c <USBD_GetConfig+0x34>
 800c064:	e015      	b.n	800c092 <USBD_GetConfig+0x5a>
 800c066:	2b03      	cmp	r3, #3
 800c068:	d00b      	beq.n	800c082 <USBD_GetConfig+0x4a>
 800c06a:	e012      	b.n	800c092 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2200      	movs	r2, #0
 800c070:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	3308      	adds	r3, #8
 800c076:	2201      	movs	r2, #1
 800c078:	4619      	mov	r1, r3
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f000 f93c 	bl	800c2f8 <USBD_CtlSendData>
        break;
 800c080:	e00c      	b.n	800c09c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	3304      	adds	r3, #4
 800c086:	2201      	movs	r2, #1
 800c088:	4619      	mov	r1, r3
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f000 f934 	bl	800c2f8 <USBD_CtlSendData>
        break;
 800c090:	e004      	b.n	800c09c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c092:	6839      	ldr	r1, [r7, #0]
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f000 f8be 	bl	800c216 <USBD_CtlError>
        break;
 800c09a:	bf00      	nop
}
 800c09c:	bf00      	nop
 800c09e:	3708      	adds	r7, #8
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b082      	sub	sp, #8
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0b4:	b2db      	uxtb	r3, r3
 800c0b6:	3b01      	subs	r3, #1
 800c0b8:	2b02      	cmp	r3, #2
 800c0ba:	d81e      	bhi.n	800c0fa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	88db      	ldrh	r3, [r3, #6]
 800c0c0:	2b02      	cmp	r3, #2
 800c0c2:	d004      	beq.n	800c0ce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c0c4:	6839      	ldr	r1, [r7, #0]
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 f8a5 	bl	800c216 <USBD_CtlError>
        break;
 800c0cc:	e01a      	b.n	800c104 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2201      	movs	r2, #1
 800c0d2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d005      	beq.n	800c0ea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	68db      	ldr	r3, [r3, #12]
 800c0e2:	f043 0202 	orr.w	r2, r3, #2
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	330c      	adds	r3, #12
 800c0ee:	2202      	movs	r2, #2
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 f900 	bl	800c2f8 <USBD_CtlSendData>
      break;
 800c0f8:	e004      	b.n	800c104 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c0fa:	6839      	ldr	r1, [r7, #0]
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f000 f88a 	bl	800c216 <USBD_CtlError>
      break;
 800c102:	bf00      	nop
  }
}
 800c104:	bf00      	nop
 800c106:	3708      	adds	r7, #8
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}

0800c10c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
 800c114:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	885b      	ldrh	r3, [r3, #2]
 800c11a:	2b01      	cmp	r3, #1
 800c11c:	d107      	bne.n	800c12e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2201      	movs	r2, #1
 800c122:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f000 f940 	bl	800c3ac <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c12c:	e013      	b.n	800c156 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	885b      	ldrh	r3, [r3, #2]
 800c132:	2b02      	cmp	r3, #2
 800c134:	d10b      	bne.n	800c14e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	889b      	ldrh	r3, [r3, #4]
 800c13a:	0a1b      	lsrs	r3, r3, #8
 800c13c:	b29b      	uxth	r3, r3
 800c13e:	b2da      	uxtb	r2, r3
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f000 f930 	bl	800c3ac <USBD_CtlSendStatus>
}
 800c14c:	e003      	b.n	800c156 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c14e:	6839      	ldr	r1, [r7, #0]
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f000 f860 	bl	800c216 <USBD_CtlError>
}
 800c156:	bf00      	nop
 800c158:	3708      	adds	r7, #8
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}

0800c15e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c15e:	b580      	push	{r7, lr}
 800c160:	b082      	sub	sp, #8
 800c162:	af00      	add	r7, sp, #0
 800c164:	6078      	str	r0, [r7, #4]
 800c166:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c16e:	b2db      	uxtb	r3, r3
 800c170:	3b01      	subs	r3, #1
 800c172:	2b02      	cmp	r3, #2
 800c174:	d80b      	bhi.n	800c18e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	885b      	ldrh	r3, [r3, #2]
 800c17a:	2b01      	cmp	r3, #1
 800c17c:	d10c      	bne.n	800c198 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2200      	movs	r2, #0
 800c182:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f000 f910 	bl	800c3ac <USBD_CtlSendStatus>
      }
      break;
 800c18c:	e004      	b.n	800c198 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c18e:	6839      	ldr	r1, [r7, #0]
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f000 f840 	bl	800c216 <USBD_CtlError>
      break;
 800c196:	e000      	b.n	800c19a <USBD_ClrFeature+0x3c>
      break;
 800c198:	bf00      	nop
  }
}
 800c19a:	bf00      	nop
 800c19c:	3708      	adds	r7, #8
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}

0800c1a2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c1a2:	b580      	push	{r7, lr}
 800c1a4:	b084      	sub	sp, #16
 800c1a6:	af00      	add	r7, sp, #0
 800c1a8:	6078      	str	r0, [r7, #4]
 800c1aa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	781a      	ldrb	r2, [r3, #0]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	3301      	adds	r3, #1
 800c1bc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	781a      	ldrb	r2, [r3, #0]
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	3301      	adds	r3, #1
 800c1ca:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c1cc:	68f8      	ldr	r0, [r7, #12]
 800c1ce:	f7ff fa17 	bl	800b600 <SWAPBYTE>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	461a      	mov	r2, r3
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	3301      	adds	r3, #1
 800c1de:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	3301      	adds	r3, #1
 800c1e4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c1e6:	68f8      	ldr	r0, [r7, #12]
 800c1e8:	f7ff fa0a 	bl	800b600 <SWAPBYTE>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	461a      	mov	r2, r3
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	3301      	adds	r3, #1
 800c1f8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	3301      	adds	r3, #1
 800c1fe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c200:	68f8      	ldr	r0, [r7, #12]
 800c202:	f7ff f9fd 	bl	800b600 <SWAPBYTE>
 800c206:	4603      	mov	r3, r0
 800c208:	461a      	mov	r2, r3
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	80da      	strh	r2, [r3, #6]
}
 800c20e:	bf00      	nop
 800c210:	3710      	adds	r7, #16
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}

0800c216 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c216:	b580      	push	{r7, lr}
 800c218:	b082      	sub	sp, #8
 800c21a:	af00      	add	r7, sp, #0
 800c21c:	6078      	str	r0, [r7, #4]
 800c21e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c220:	2180      	movs	r1, #128	; 0x80
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f003 fe2e 	bl	800fe84 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c228:	2100      	movs	r1, #0
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f003 fe2a 	bl	800fe84 <USBD_LL_StallEP>
}
 800c230:	bf00      	nop
 800c232:	3708      	adds	r7, #8
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}

0800c238 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b086      	sub	sp, #24
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	60f8      	str	r0, [r7, #12]
 800c240:	60b9      	str	r1, [r7, #8]
 800c242:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c244:	2300      	movs	r3, #0
 800c246:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d036      	beq.n	800c2bc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c252:	6938      	ldr	r0, [r7, #16]
 800c254:	f000 f836 	bl	800c2c4 <USBD_GetLen>
 800c258:	4603      	mov	r3, r0
 800c25a:	3301      	adds	r3, #1
 800c25c:	b29b      	uxth	r3, r3
 800c25e:	005b      	lsls	r3, r3, #1
 800c260:	b29a      	uxth	r2, r3
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c266:	7dfb      	ldrb	r3, [r7, #23]
 800c268:	68ba      	ldr	r2, [r7, #8]
 800c26a:	4413      	add	r3, r2
 800c26c:	687a      	ldr	r2, [r7, #4]
 800c26e:	7812      	ldrb	r2, [r2, #0]
 800c270:	701a      	strb	r2, [r3, #0]
  idx++;
 800c272:	7dfb      	ldrb	r3, [r7, #23]
 800c274:	3301      	adds	r3, #1
 800c276:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c278:	7dfb      	ldrb	r3, [r7, #23]
 800c27a:	68ba      	ldr	r2, [r7, #8]
 800c27c:	4413      	add	r3, r2
 800c27e:	2203      	movs	r2, #3
 800c280:	701a      	strb	r2, [r3, #0]
  idx++;
 800c282:	7dfb      	ldrb	r3, [r7, #23]
 800c284:	3301      	adds	r3, #1
 800c286:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c288:	e013      	b.n	800c2b2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c28a:	7dfb      	ldrb	r3, [r7, #23]
 800c28c:	68ba      	ldr	r2, [r7, #8]
 800c28e:	4413      	add	r3, r2
 800c290:	693a      	ldr	r2, [r7, #16]
 800c292:	7812      	ldrb	r2, [r2, #0]
 800c294:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c296:	693b      	ldr	r3, [r7, #16]
 800c298:	3301      	adds	r3, #1
 800c29a:	613b      	str	r3, [r7, #16]
    idx++;
 800c29c:	7dfb      	ldrb	r3, [r7, #23]
 800c29e:	3301      	adds	r3, #1
 800c2a0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c2a2:	7dfb      	ldrb	r3, [r7, #23]
 800c2a4:	68ba      	ldr	r2, [r7, #8]
 800c2a6:	4413      	add	r3, r2
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	701a      	strb	r2, [r3, #0]
    idx++;
 800c2ac:	7dfb      	ldrb	r3, [r7, #23]
 800c2ae:	3301      	adds	r3, #1
 800c2b0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	781b      	ldrb	r3, [r3, #0]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d1e7      	bne.n	800c28a <USBD_GetString+0x52>
 800c2ba:	e000      	b.n	800c2be <USBD_GetString+0x86>
    return;
 800c2bc:	bf00      	nop
  }
}
 800c2be:	3718      	adds	r7, #24
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}

0800c2c4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b085      	sub	sp, #20
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c2d4:	e005      	b.n	800c2e2 <USBD_GetLen+0x1e>
  {
    len++;
 800c2d6:	7bfb      	ldrb	r3, [r7, #15]
 800c2d8:	3301      	adds	r3, #1
 800c2da:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	3301      	adds	r3, #1
 800c2e0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	781b      	ldrb	r3, [r3, #0]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d1f5      	bne.n	800c2d6 <USBD_GetLen+0x12>
  }

  return len;
 800c2ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3714      	adds	r7, #20
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr

0800c2f8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b084      	sub	sp, #16
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	60f8      	str	r0, [r7, #12]
 800c300:	60b9      	str	r1, [r7, #8]
 800c302:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2202      	movs	r2, #2
 800c308:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	687a      	ldr	r2, [r7, #4]
 800c310:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	687a      	ldr	r2, [r7, #4]
 800c316:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	68ba      	ldr	r2, [r7, #8]
 800c31c:	2100      	movs	r1, #0
 800c31e:	68f8      	ldr	r0, [r7, #12]
 800c320:	f003 fe39 	bl	800ff96 <USBD_LL_Transmit>

  return USBD_OK;
 800c324:	2300      	movs	r3, #0
}
 800c326:	4618      	mov	r0, r3
 800c328:	3710      	adds	r7, #16
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}

0800c32e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c32e:	b580      	push	{r7, lr}
 800c330:	b084      	sub	sp, #16
 800c332:	af00      	add	r7, sp, #0
 800c334:	60f8      	str	r0, [r7, #12]
 800c336:	60b9      	str	r1, [r7, #8]
 800c338:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	68ba      	ldr	r2, [r7, #8]
 800c33e:	2100      	movs	r1, #0
 800c340:	68f8      	ldr	r0, [r7, #12]
 800c342:	f003 fe28 	bl	800ff96 <USBD_LL_Transmit>

  return USBD_OK;
 800c346:	2300      	movs	r3, #0
}
 800c348:	4618      	mov	r0, r3
 800c34a:	3710      	adds	r7, #16
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}

0800c350 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b084      	sub	sp, #16
 800c354:	af00      	add	r7, sp, #0
 800c356:	60f8      	str	r0, [r7, #12]
 800c358:	60b9      	str	r1, [r7, #8]
 800c35a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	2203      	movs	r2, #3
 800c360:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	687a      	ldr	r2, [r7, #4]
 800c368:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	687a      	ldr	r2, [r7, #4]
 800c370:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	68ba      	ldr	r2, [r7, #8]
 800c378:	2100      	movs	r1, #0
 800c37a:	68f8      	ldr	r0, [r7, #12]
 800c37c:	f003 fe2c 	bl	800ffd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c380:	2300      	movs	r3, #0
}
 800c382:	4618      	mov	r0, r3
 800c384:	3710      	adds	r7, #16
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}

0800c38a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c38a:	b580      	push	{r7, lr}
 800c38c:	b084      	sub	sp, #16
 800c38e:	af00      	add	r7, sp, #0
 800c390:	60f8      	str	r0, [r7, #12]
 800c392:	60b9      	str	r1, [r7, #8]
 800c394:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	68ba      	ldr	r2, [r7, #8]
 800c39a:	2100      	movs	r1, #0
 800c39c:	68f8      	ldr	r0, [r7, #12]
 800c39e:	f003 fe1b 	bl	800ffd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c3a2:	2300      	movs	r3, #0
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3710      	adds	r7, #16
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}

0800c3ac <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b082      	sub	sp, #8
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2204      	movs	r2, #4
 800c3b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c3bc:	2300      	movs	r3, #0
 800c3be:	2200      	movs	r2, #0
 800c3c0:	2100      	movs	r1, #0
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f003 fde7 	bl	800ff96 <USBD_LL_Transmit>

  return USBD_OK;
 800c3c8:	2300      	movs	r3, #0
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3708      	adds	r7, #8
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}

0800c3d2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c3d2:	b580      	push	{r7, lr}
 800c3d4:	b082      	sub	sp, #8
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2205      	movs	r2, #5
 800c3de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	2100      	movs	r1, #0
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f003 fdf5 	bl	800ffd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c3ee:	2300      	movs	r3, #0
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3708      	adds	r7, #8
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b084      	sub	sp, #16
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	4603      	mov	r3, r0
 800c400:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c402:	79fb      	ldrb	r3, [r7, #7]
 800c404:	4a08      	ldr	r2, [pc, #32]	; (800c428 <disk_status+0x30>)
 800c406:	009b      	lsls	r3, r3, #2
 800c408:	4413      	add	r3, r2
 800c40a:	685b      	ldr	r3, [r3, #4]
 800c40c:	685b      	ldr	r3, [r3, #4]
 800c40e:	79fa      	ldrb	r2, [r7, #7]
 800c410:	4905      	ldr	r1, [pc, #20]	; (800c428 <disk_status+0x30>)
 800c412:	440a      	add	r2, r1
 800c414:	7a12      	ldrb	r2, [r2, #8]
 800c416:	4610      	mov	r0, r2
 800c418:	4798      	blx	r3
 800c41a:	4603      	mov	r3, r0
 800c41c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c41e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c420:	4618      	mov	r0, r3
 800c422:	3710      	adds	r7, #16
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}
 800c428:	20003498 	.word	0x20003498

0800c42c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b084      	sub	sp, #16
 800c430:	af00      	add	r7, sp, #0
 800c432:	4603      	mov	r3, r0
 800c434:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c436:	2300      	movs	r3, #0
 800c438:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c43a:	79fb      	ldrb	r3, [r7, #7]
 800c43c:	4a0d      	ldr	r2, [pc, #52]	; (800c474 <disk_initialize+0x48>)
 800c43e:	5cd3      	ldrb	r3, [r2, r3]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d111      	bne.n	800c468 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c444:	79fb      	ldrb	r3, [r7, #7]
 800c446:	4a0b      	ldr	r2, [pc, #44]	; (800c474 <disk_initialize+0x48>)
 800c448:	2101      	movs	r1, #1
 800c44a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c44c:	79fb      	ldrb	r3, [r7, #7]
 800c44e:	4a09      	ldr	r2, [pc, #36]	; (800c474 <disk_initialize+0x48>)
 800c450:	009b      	lsls	r3, r3, #2
 800c452:	4413      	add	r3, r2
 800c454:	685b      	ldr	r3, [r3, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	79fa      	ldrb	r2, [r7, #7]
 800c45a:	4906      	ldr	r1, [pc, #24]	; (800c474 <disk_initialize+0x48>)
 800c45c:	440a      	add	r2, r1
 800c45e:	7a12      	ldrb	r2, [r2, #8]
 800c460:	4610      	mov	r0, r2
 800c462:	4798      	blx	r3
 800c464:	4603      	mov	r3, r0
 800c466:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c468:	7bfb      	ldrb	r3, [r7, #15]
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3710      	adds	r7, #16
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	20003498 	.word	0x20003498

0800c478 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c478:	b590      	push	{r4, r7, lr}
 800c47a:	b087      	sub	sp, #28
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	60b9      	str	r1, [r7, #8]
 800c480:	607a      	str	r2, [r7, #4]
 800c482:	603b      	str	r3, [r7, #0]
 800c484:	4603      	mov	r3, r0
 800c486:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c488:	7bfb      	ldrb	r3, [r7, #15]
 800c48a:	4a0a      	ldr	r2, [pc, #40]	; (800c4b4 <disk_read+0x3c>)
 800c48c:	009b      	lsls	r3, r3, #2
 800c48e:	4413      	add	r3, r2
 800c490:	685b      	ldr	r3, [r3, #4]
 800c492:	689c      	ldr	r4, [r3, #8]
 800c494:	7bfb      	ldrb	r3, [r7, #15]
 800c496:	4a07      	ldr	r2, [pc, #28]	; (800c4b4 <disk_read+0x3c>)
 800c498:	4413      	add	r3, r2
 800c49a:	7a18      	ldrb	r0, [r3, #8]
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	687a      	ldr	r2, [r7, #4]
 800c4a0:	68b9      	ldr	r1, [r7, #8]
 800c4a2:	47a0      	blx	r4
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	75fb      	strb	r3, [r7, #23]
  return res;
 800c4a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	371c      	adds	r7, #28
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd90      	pop	{r4, r7, pc}
 800c4b2:	bf00      	nop
 800c4b4:	20003498 	.word	0x20003498

0800c4b8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c4b8:	b590      	push	{r4, r7, lr}
 800c4ba:	b087      	sub	sp, #28
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	60b9      	str	r1, [r7, #8]
 800c4c0:	607a      	str	r2, [r7, #4]
 800c4c2:	603b      	str	r3, [r7, #0]
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c4c8:	7bfb      	ldrb	r3, [r7, #15]
 800c4ca:	4a0a      	ldr	r2, [pc, #40]	; (800c4f4 <disk_write+0x3c>)
 800c4cc:	009b      	lsls	r3, r3, #2
 800c4ce:	4413      	add	r3, r2
 800c4d0:	685b      	ldr	r3, [r3, #4]
 800c4d2:	68dc      	ldr	r4, [r3, #12]
 800c4d4:	7bfb      	ldrb	r3, [r7, #15]
 800c4d6:	4a07      	ldr	r2, [pc, #28]	; (800c4f4 <disk_write+0x3c>)
 800c4d8:	4413      	add	r3, r2
 800c4da:	7a18      	ldrb	r0, [r3, #8]
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	687a      	ldr	r2, [r7, #4]
 800c4e0:	68b9      	ldr	r1, [r7, #8]
 800c4e2:	47a0      	blx	r4
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	75fb      	strb	r3, [r7, #23]
  return res;
 800c4e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	371c      	adds	r7, #28
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd90      	pop	{r4, r7, pc}
 800c4f2:	bf00      	nop
 800c4f4:	20003498 	.word	0x20003498

0800c4f8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b084      	sub	sp, #16
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	4603      	mov	r3, r0
 800c500:	603a      	str	r2, [r7, #0]
 800c502:	71fb      	strb	r3, [r7, #7]
 800c504:	460b      	mov	r3, r1
 800c506:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c508:	79fb      	ldrb	r3, [r7, #7]
 800c50a:	4a09      	ldr	r2, [pc, #36]	; (800c530 <disk_ioctl+0x38>)
 800c50c:	009b      	lsls	r3, r3, #2
 800c50e:	4413      	add	r3, r2
 800c510:	685b      	ldr	r3, [r3, #4]
 800c512:	691b      	ldr	r3, [r3, #16]
 800c514:	79fa      	ldrb	r2, [r7, #7]
 800c516:	4906      	ldr	r1, [pc, #24]	; (800c530 <disk_ioctl+0x38>)
 800c518:	440a      	add	r2, r1
 800c51a:	7a10      	ldrb	r0, [r2, #8]
 800c51c:	79b9      	ldrb	r1, [r7, #6]
 800c51e:	683a      	ldr	r2, [r7, #0]
 800c520:	4798      	blx	r3
 800c522:	4603      	mov	r3, r0
 800c524:	73fb      	strb	r3, [r7, #15]
  return res;
 800c526:	7bfb      	ldrb	r3, [r7, #15]
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3710      	adds	r7, #16
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}
 800c530:	20003498 	.word	0x20003498

0800c534 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c534:	b480      	push	{r7}
 800c536:	b085      	sub	sp, #20
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	3301      	adds	r3, #1
 800c540:	781b      	ldrb	r3, [r3, #0]
 800c542:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c544:	89fb      	ldrh	r3, [r7, #14]
 800c546:	021b      	lsls	r3, r3, #8
 800c548:	b21a      	sxth	r2, r3
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	781b      	ldrb	r3, [r3, #0]
 800c54e:	b21b      	sxth	r3, r3
 800c550:	4313      	orrs	r3, r2
 800c552:	b21b      	sxth	r3, r3
 800c554:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c556:	89fb      	ldrh	r3, [r7, #14]
}
 800c558:	4618      	mov	r0, r3
 800c55a:	3714      	adds	r7, #20
 800c55c:	46bd      	mov	sp, r7
 800c55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c562:	4770      	bx	lr

0800c564 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c564:	b480      	push	{r7}
 800c566:	b085      	sub	sp, #20
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	3303      	adds	r3, #3
 800c570:	781b      	ldrb	r3, [r3, #0]
 800c572:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	021b      	lsls	r3, r3, #8
 800c578:	687a      	ldr	r2, [r7, #4]
 800c57a:	3202      	adds	r2, #2
 800c57c:	7812      	ldrb	r2, [r2, #0]
 800c57e:	4313      	orrs	r3, r2
 800c580:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	021b      	lsls	r3, r3, #8
 800c586:	687a      	ldr	r2, [r7, #4]
 800c588:	3201      	adds	r2, #1
 800c58a:	7812      	ldrb	r2, [r2, #0]
 800c58c:	4313      	orrs	r3, r2
 800c58e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	021b      	lsls	r3, r3, #8
 800c594:	687a      	ldr	r2, [r7, #4]
 800c596:	7812      	ldrb	r2, [r2, #0]
 800c598:	4313      	orrs	r3, r2
 800c59a:	60fb      	str	r3, [r7, #12]
	return rv;
 800c59c:	68fb      	ldr	r3, [r7, #12]
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3714      	adds	r7, #20
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a8:	4770      	bx	lr

0800c5aa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c5aa:	b480      	push	{r7}
 800c5ac:	b083      	sub	sp, #12
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	6078      	str	r0, [r7, #4]
 800c5b2:	460b      	mov	r3, r1
 800c5b4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	1c5a      	adds	r2, r3, #1
 800c5ba:	607a      	str	r2, [r7, #4]
 800c5bc:	887a      	ldrh	r2, [r7, #2]
 800c5be:	b2d2      	uxtb	r2, r2
 800c5c0:	701a      	strb	r2, [r3, #0]
 800c5c2:	887b      	ldrh	r3, [r7, #2]
 800c5c4:	0a1b      	lsrs	r3, r3, #8
 800c5c6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	1c5a      	adds	r2, r3, #1
 800c5cc:	607a      	str	r2, [r7, #4]
 800c5ce:	887a      	ldrh	r2, [r7, #2]
 800c5d0:	b2d2      	uxtb	r2, r2
 800c5d2:	701a      	strb	r2, [r3, #0]
}
 800c5d4:	bf00      	nop
 800c5d6:	370c      	adds	r7, #12
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr

0800c5e0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b083      	sub	sp, #12
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
 800c5e8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	1c5a      	adds	r2, r3, #1
 800c5ee:	607a      	str	r2, [r7, #4]
 800c5f0:	683a      	ldr	r2, [r7, #0]
 800c5f2:	b2d2      	uxtb	r2, r2
 800c5f4:	701a      	strb	r2, [r3, #0]
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	0a1b      	lsrs	r3, r3, #8
 800c5fa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	1c5a      	adds	r2, r3, #1
 800c600:	607a      	str	r2, [r7, #4]
 800c602:	683a      	ldr	r2, [r7, #0]
 800c604:	b2d2      	uxtb	r2, r2
 800c606:	701a      	strb	r2, [r3, #0]
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	0a1b      	lsrs	r3, r3, #8
 800c60c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	1c5a      	adds	r2, r3, #1
 800c612:	607a      	str	r2, [r7, #4]
 800c614:	683a      	ldr	r2, [r7, #0]
 800c616:	b2d2      	uxtb	r2, r2
 800c618:	701a      	strb	r2, [r3, #0]
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	0a1b      	lsrs	r3, r3, #8
 800c61e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	1c5a      	adds	r2, r3, #1
 800c624:	607a      	str	r2, [r7, #4]
 800c626:	683a      	ldr	r2, [r7, #0]
 800c628:	b2d2      	uxtb	r2, r2
 800c62a:	701a      	strb	r2, [r3, #0]
}
 800c62c:	bf00      	nop
 800c62e:	370c      	adds	r7, #12
 800c630:	46bd      	mov	sp, r7
 800c632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c636:	4770      	bx	lr

0800c638 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c638:	b480      	push	{r7}
 800c63a:	b087      	sub	sp, #28
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	60f8      	str	r0, [r7, #12]
 800c640:	60b9      	str	r1, [r7, #8]
 800c642:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d00d      	beq.n	800c66e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c652:	693a      	ldr	r2, [r7, #16]
 800c654:	1c53      	adds	r3, r2, #1
 800c656:	613b      	str	r3, [r7, #16]
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	1c59      	adds	r1, r3, #1
 800c65c:	6179      	str	r1, [r7, #20]
 800c65e:	7812      	ldrb	r2, [r2, #0]
 800c660:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	3b01      	subs	r3, #1
 800c666:	607b      	str	r3, [r7, #4]
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d1f1      	bne.n	800c652 <mem_cpy+0x1a>
	}
}
 800c66e:	bf00      	nop
 800c670:	371c      	adds	r7, #28
 800c672:	46bd      	mov	sp, r7
 800c674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c678:	4770      	bx	lr

0800c67a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c67a:	b480      	push	{r7}
 800c67c:	b087      	sub	sp, #28
 800c67e:	af00      	add	r7, sp, #0
 800c680:	60f8      	str	r0, [r7, #12]
 800c682:	60b9      	str	r1, [r7, #8]
 800c684:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	1c5a      	adds	r2, r3, #1
 800c68e:	617a      	str	r2, [r7, #20]
 800c690:	68ba      	ldr	r2, [r7, #8]
 800c692:	b2d2      	uxtb	r2, r2
 800c694:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	3b01      	subs	r3, #1
 800c69a:	607b      	str	r3, [r7, #4]
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d1f3      	bne.n	800c68a <mem_set+0x10>
}
 800c6a2:	bf00      	nop
 800c6a4:	bf00      	nop
 800c6a6:	371c      	adds	r7, #28
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ae:	4770      	bx	lr

0800c6b0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c6b0:	b480      	push	{r7}
 800c6b2:	b089      	sub	sp, #36	; 0x24
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	60b9      	str	r1, [r7, #8]
 800c6ba:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	61fb      	str	r3, [r7, #28]
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c6c8:	69fb      	ldr	r3, [r7, #28]
 800c6ca:	1c5a      	adds	r2, r3, #1
 800c6cc:	61fa      	str	r2, [r7, #28]
 800c6ce:	781b      	ldrb	r3, [r3, #0]
 800c6d0:	4619      	mov	r1, r3
 800c6d2:	69bb      	ldr	r3, [r7, #24]
 800c6d4:	1c5a      	adds	r2, r3, #1
 800c6d6:	61ba      	str	r2, [r7, #24]
 800c6d8:	781b      	ldrb	r3, [r3, #0]
 800c6da:	1acb      	subs	r3, r1, r3
 800c6dc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	3b01      	subs	r3, #1
 800c6e2:	607b      	str	r3, [r7, #4]
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d002      	beq.n	800c6f0 <mem_cmp+0x40>
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d0eb      	beq.n	800c6c8 <mem_cmp+0x18>

	return r;
 800c6f0:	697b      	ldr	r3, [r7, #20]
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3724      	adds	r7, #36	; 0x24
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr

0800c6fe <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c6fe:	b480      	push	{r7}
 800c700:	b083      	sub	sp, #12
 800c702:	af00      	add	r7, sp, #0
 800c704:	6078      	str	r0, [r7, #4]
 800c706:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c708:	e002      	b.n	800c710 <chk_chr+0x12>
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	3301      	adds	r3, #1
 800c70e:	607b      	str	r3, [r7, #4]
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d005      	beq.n	800c724 <chk_chr+0x26>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	781b      	ldrb	r3, [r3, #0]
 800c71c:	461a      	mov	r2, r3
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	4293      	cmp	r3, r2
 800c722:	d1f2      	bne.n	800c70a <chk_chr+0xc>
	return *str;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	781b      	ldrb	r3, [r3, #0]
}
 800c728:	4618      	mov	r0, r3
 800c72a:	370c      	adds	r7, #12
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr

0800c734 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c734:	b480      	push	{r7}
 800c736:	b085      	sub	sp, #20
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c73e:	2300      	movs	r3, #0
 800c740:	60bb      	str	r3, [r7, #8]
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	60fb      	str	r3, [r7, #12]
 800c746:	e029      	b.n	800c79c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c748:	4a27      	ldr	r2, [pc, #156]	; (800c7e8 <chk_lock+0xb4>)
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	011b      	lsls	r3, r3, #4
 800c74e:	4413      	add	r3, r2
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d01d      	beq.n	800c792 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c756:	4a24      	ldr	r2, [pc, #144]	; (800c7e8 <chk_lock+0xb4>)
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	011b      	lsls	r3, r3, #4
 800c75c:	4413      	add	r3, r2
 800c75e:	681a      	ldr	r2, [r3, #0]
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	429a      	cmp	r2, r3
 800c766:	d116      	bne.n	800c796 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c768:	4a1f      	ldr	r2, [pc, #124]	; (800c7e8 <chk_lock+0xb4>)
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	011b      	lsls	r3, r3, #4
 800c76e:	4413      	add	r3, r2
 800c770:	3304      	adds	r3, #4
 800c772:	681a      	ldr	r2, [r3, #0]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c778:	429a      	cmp	r2, r3
 800c77a:	d10c      	bne.n	800c796 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c77c:	4a1a      	ldr	r2, [pc, #104]	; (800c7e8 <chk_lock+0xb4>)
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	011b      	lsls	r3, r3, #4
 800c782:	4413      	add	r3, r2
 800c784:	3308      	adds	r3, #8
 800c786:	681a      	ldr	r2, [r3, #0]
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c78c:	429a      	cmp	r2, r3
 800c78e:	d102      	bne.n	800c796 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c790:	e007      	b.n	800c7a2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c792:	2301      	movs	r3, #1
 800c794:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	3301      	adds	r3, #1
 800c79a:	60fb      	str	r3, [r7, #12]
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	2b01      	cmp	r3, #1
 800c7a0:	d9d2      	bls.n	800c748 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	2b02      	cmp	r3, #2
 800c7a6:	d109      	bne.n	800c7bc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d102      	bne.n	800c7b4 <chk_lock+0x80>
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	2b02      	cmp	r3, #2
 800c7b2:	d101      	bne.n	800c7b8 <chk_lock+0x84>
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	e010      	b.n	800c7da <chk_lock+0xa6>
 800c7b8:	2312      	movs	r3, #18
 800c7ba:	e00e      	b.n	800c7da <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d108      	bne.n	800c7d4 <chk_lock+0xa0>
 800c7c2:	4a09      	ldr	r2, [pc, #36]	; (800c7e8 <chk_lock+0xb4>)
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	011b      	lsls	r3, r3, #4
 800c7c8:	4413      	add	r3, r2
 800c7ca:	330c      	adds	r3, #12
 800c7cc:	881b      	ldrh	r3, [r3, #0]
 800c7ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7d2:	d101      	bne.n	800c7d8 <chk_lock+0xa4>
 800c7d4:	2310      	movs	r3, #16
 800c7d6:	e000      	b.n	800c7da <chk_lock+0xa6>
 800c7d8:	2300      	movs	r3, #0
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3714      	adds	r7, #20
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e4:	4770      	bx	lr
 800c7e6:	bf00      	nop
 800c7e8:	20003278 	.word	0x20003278

0800c7ec <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b083      	sub	sp, #12
 800c7f0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	607b      	str	r3, [r7, #4]
 800c7f6:	e002      	b.n	800c7fe <enq_lock+0x12>
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	3301      	adds	r3, #1
 800c7fc:	607b      	str	r3, [r7, #4]
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2b01      	cmp	r3, #1
 800c802:	d806      	bhi.n	800c812 <enq_lock+0x26>
 800c804:	4a09      	ldr	r2, [pc, #36]	; (800c82c <enq_lock+0x40>)
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	011b      	lsls	r3, r3, #4
 800c80a:	4413      	add	r3, r2
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d1f2      	bne.n	800c7f8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2b02      	cmp	r3, #2
 800c816:	bf14      	ite	ne
 800c818:	2301      	movne	r3, #1
 800c81a:	2300      	moveq	r3, #0
 800c81c:	b2db      	uxtb	r3, r3
}
 800c81e:	4618      	mov	r0, r3
 800c820:	370c      	adds	r7, #12
 800c822:	46bd      	mov	sp, r7
 800c824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c828:	4770      	bx	lr
 800c82a:	bf00      	nop
 800c82c:	20003278 	.word	0x20003278

0800c830 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c830:	b480      	push	{r7}
 800c832:	b085      	sub	sp, #20
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
 800c838:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c83a:	2300      	movs	r3, #0
 800c83c:	60fb      	str	r3, [r7, #12]
 800c83e:	e01f      	b.n	800c880 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c840:	4a41      	ldr	r2, [pc, #260]	; (800c948 <inc_lock+0x118>)
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	011b      	lsls	r3, r3, #4
 800c846:	4413      	add	r3, r2
 800c848:	681a      	ldr	r2, [r3, #0]
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	429a      	cmp	r2, r3
 800c850:	d113      	bne.n	800c87a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c852:	4a3d      	ldr	r2, [pc, #244]	; (800c948 <inc_lock+0x118>)
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	011b      	lsls	r3, r3, #4
 800c858:	4413      	add	r3, r2
 800c85a:	3304      	adds	r3, #4
 800c85c:	681a      	ldr	r2, [r3, #0]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c862:	429a      	cmp	r2, r3
 800c864:	d109      	bne.n	800c87a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c866:	4a38      	ldr	r2, [pc, #224]	; (800c948 <inc_lock+0x118>)
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	011b      	lsls	r3, r3, #4
 800c86c:	4413      	add	r3, r2
 800c86e:	3308      	adds	r3, #8
 800c870:	681a      	ldr	r2, [r3, #0]
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c876:	429a      	cmp	r2, r3
 800c878:	d006      	beq.n	800c888 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	3301      	adds	r3, #1
 800c87e:	60fb      	str	r3, [r7, #12]
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	2b01      	cmp	r3, #1
 800c884:	d9dc      	bls.n	800c840 <inc_lock+0x10>
 800c886:	e000      	b.n	800c88a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c888:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	2b02      	cmp	r3, #2
 800c88e:	d132      	bne.n	800c8f6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c890:	2300      	movs	r3, #0
 800c892:	60fb      	str	r3, [r7, #12]
 800c894:	e002      	b.n	800c89c <inc_lock+0x6c>
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	3301      	adds	r3, #1
 800c89a:	60fb      	str	r3, [r7, #12]
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	2b01      	cmp	r3, #1
 800c8a0:	d806      	bhi.n	800c8b0 <inc_lock+0x80>
 800c8a2:	4a29      	ldr	r2, [pc, #164]	; (800c948 <inc_lock+0x118>)
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	011b      	lsls	r3, r3, #4
 800c8a8:	4413      	add	r3, r2
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d1f2      	bne.n	800c896 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	2b02      	cmp	r3, #2
 800c8b4:	d101      	bne.n	800c8ba <inc_lock+0x8a>
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	e040      	b.n	800c93c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681a      	ldr	r2, [r3, #0]
 800c8be:	4922      	ldr	r1, [pc, #136]	; (800c948 <inc_lock+0x118>)
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	011b      	lsls	r3, r3, #4
 800c8c4:	440b      	add	r3, r1
 800c8c6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	689a      	ldr	r2, [r3, #8]
 800c8cc:	491e      	ldr	r1, [pc, #120]	; (800c948 <inc_lock+0x118>)
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	011b      	lsls	r3, r3, #4
 800c8d2:	440b      	add	r3, r1
 800c8d4:	3304      	adds	r3, #4
 800c8d6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	695a      	ldr	r2, [r3, #20]
 800c8dc:	491a      	ldr	r1, [pc, #104]	; (800c948 <inc_lock+0x118>)
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	011b      	lsls	r3, r3, #4
 800c8e2:	440b      	add	r3, r1
 800c8e4:	3308      	adds	r3, #8
 800c8e6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c8e8:	4a17      	ldr	r2, [pc, #92]	; (800c948 <inc_lock+0x118>)
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	011b      	lsls	r3, r3, #4
 800c8ee:	4413      	add	r3, r2
 800c8f0:	330c      	adds	r3, #12
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d009      	beq.n	800c910 <inc_lock+0xe0>
 800c8fc:	4a12      	ldr	r2, [pc, #72]	; (800c948 <inc_lock+0x118>)
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	011b      	lsls	r3, r3, #4
 800c902:	4413      	add	r3, r2
 800c904:	330c      	adds	r3, #12
 800c906:	881b      	ldrh	r3, [r3, #0]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d001      	beq.n	800c910 <inc_lock+0xe0>
 800c90c:	2300      	movs	r3, #0
 800c90e:	e015      	b.n	800c93c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d108      	bne.n	800c928 <inc_lock+0xf8>
 800c916:	4a0c      	ldr	r2, [pc, #48]	; (800c948 <inc_lock+0x118>)
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	011b      	lsls	r3, r3, #4
 800c91c:	4413      	add	r3, r2
 800c91e:	330c      	adds	r3, #12
 800c920:	881b      	ldrh	r3, [r3, #0]
 800c922:	3301      	adds	r3, #1
 800c924:	b29a      	uxth	r2, r3
 800c926:	e001      	b.n	800c92c <inc_lock+0xfc>
 800c928:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c92c:	4906      	ldr	r1, [pc, #24]	; (800c948 <inc_lock+0x118>)
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	011b      	lsls	r3, r3, #4
 800c932:	440b      	add	r3, r1
 800c934:	330c      	adds	r3, #12
 800c936:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	3301      	adds	r3, #1
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3714      	adds	r7, #20
 800c940:	46bd      	mov	sp, r7
 800c942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c946:	4770      	bx	lr
 800c948:	20003278 	.word	0x20003278

0800c94c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c94c:	b480      	push	{r7}
 800c94e:	b085      	sub	sp, #20
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	3b01      	subs	r3, #1
 800c958:	607b      	str	r3, [r7, #4]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2b01      	cmp	r3, #1
 800c95e:	d825      	bhi.n	800c9ac <dec_lock+0x60>
		n = Files[i].ctr;
 800c960:	4a17      	ldr	r2, [pc, #92]	; (800c9c0 <dec_lock+0x74>)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	011b      	lsls	r3, r3, #4
 800c966:	4413      	add	r3, r2
 800c968:	330c      	adds	r3, #12
 800c96a:	881b      	ldrh	r3, [r3, #0]
 800c96c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c96e:	89fb      	ldrh	r3, [r7, #14]
 800c970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c974:	d101      	bne.n	800c97a <dec_lock+0x2e>
 800c976:	2300      	movs	r3, #0
 800c978:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c97a:	89fb      	ldrh	r3, [r7, #14]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d002      	beq.n	800c986 <dec_lock+0x3a>
 800c980:	89fb      	ldrh	r3, [r7, #14]
 800c982:	3b01      	subs	r3, #1
 800c984:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c986:	4a0e      	ldr	r2, [pc, #56]	; (800c9c0 <dec_lock+0x74>)
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	011b      	lsls	r3, r3, #4
 800c98c:	4413      	add	r3, r2
 800c98e:	330c      	adds	r3, #12
 800c990:	89fa      	ldrh	r2, [r7, #14]
 800c992:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c994:	89fb      	ldrh	r3, [r7, #14]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d105      	bne.n	800c9a6 <dec_lock+0x5a>
 800c99a:	4a09      	ldr	r2, [pc, #36]	; (800c9c0 <dec_lock+0x74>)
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	011b      	lsls	r3, r3, #4
 800c9a0:	4413      	add	r3, r2
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	737b      	strb	r3, [r7, #13]
 800c9aa:	e001      	b.n	800c9b0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c9ac:	2302      	movs	r3, #2
 800c9ae:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c9b0:	7b7b      	ldrb	r3, [r7, #13]
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3714      	adds	r7, #20
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9bc:	4770      	bx	lr
 800c9be:	bf00      	nop
 800c9c0:	20003278 	.word	0x20003278

0800c9c4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b085      	sub	sp, #20
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	60fb      	str	r3, [r7, #12]
 800c9d0:	e010      	b.n	800c9f4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c9d2:	4a0d      	ldr	r2, [pc, #52]	; (800ca08 <clear_lock+0x44>)
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	011b      	lsls	r3, r3, #4
 800c9d8:	4413      	add	r3, r2
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	687a      	ldr	r2, [r7, #4]
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d105      	bne.n	800c9ee <clear_lock+0x2a>
 800c9e2:	4a09      	ldr	r2, [pc, #36]	; (800ca08 <clear_lock+0x44>)
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	011b      	lsls	r3, r3, #4
 800c9e8:	4413      	add	r3, r2
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	60fb      	str	r3, [r7, #12]
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	2b01      	cmp	r3, #1
 800c9f8:	d9eb      	bls.n	800c9d2 <clear_lock+0xe>
	}
}
 800c9fa:	bf00      	nop
 800c9fc:	bf00      	nop
 800c9fe:	3714      	adds	r7, #20
 800ca00:	46bd      	mov	sp, r7
 800ca02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca06:	4770      	bx	lr
 800ca08:	20003278 	.word	0x20003278

0800ca0c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b086      	sub	sp, #24
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ca14:	2300      	movs	r3, #0
 800ca16:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	78db      	ldrb	r3, [r3, #3]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d034      	beq.n	800ca8a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca24:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	7858      	ldrb	r0, [r3, #1]
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ca30:	2301      	movs	r3, #1
 800ca32:	697a      	ldr	r2, [r7, #20]
 800ca34:	f7ff fd40 	bl	800c4b8 <disk_write>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d002      	beq.n	800ca44 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ca3e:	2301      	movs	r3, #1
 800ca40:	73fb      	strb	r3, [r7, #15]
 800ca42:	e022      	b.n	800ca8a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2200      	movs	r2, #0
 800ca48:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca4e:	697a      	ldr	r2, [r7, #20]
 800ca50:	1ad2      	subs	r2, r2, r3
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	69db      	ldr	r3, [r3, #28]
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d217      	bcs.n	800ca8a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	789b      	ldrb	r3, [r3, #2]
 800ca5e:	613b      	str	r3, [r7, #16]
 800ca60:	e010      	b.n	800ca84 <sync_window+0x78>
					wsect += fs->fsize;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	69db      	ldr	r3, [r3, #28]
 800ca66:	697a      	ldr	r2, [r7, #20]
 800ca68:	4413      	add	r3, r2
 800ca6a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	7858      	ldrb	r0, [r3, #1]
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ca76:	2301      	movs	r3, #1
 800ca78:	697a      	ldr	r2, [r7, #20]
 800ca7a:	f7ff fd1d 	bl	800c4b8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	3b01      	subs	r3, #1
 800ca82:	613b      	str	r3, [r7, #16]
 800ca84:	693b      	ldr	r3, [r7, #16]
 800ca86:	2b01      	cmp	r3, #1
 800ca88:	d8eb      	bhi.n	800ca62 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ca8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	3718      	adds	r7, #24
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}

0800ca94 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b084      	sub	sp, #16
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
 800ca9c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caa6:	683a      	ldr	r2, [r7, #0]
 800caa8:	429a      	cmp	r2, r3
 800caaa:	d01b      	beq.n	800cae4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f7ff ffad 	bl	800ca0c <sync_window>
 800cab2:	4603      	mov	r3, r0
 800cab4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cab6:	7bfb      	ldrb	r3, [r7, #15]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d113      	bne.n	800cae4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	7858      	ldrb	r0, [r3, #1]
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cac6:	2301      	movs	r3, #1
 800cac8:	683a      	ldr	r2, [r7, #0]
 800caca:	f7ff fcd5 	bl	800c478 <disk_read>
 800cace:	4603      	mov	r3, r0
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d004      	beq.n	800cade <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cad4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cad8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cada:	2301      	movs	r3, #1
 800cadc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	683a      	ldr	r2, [r7, #0]
 800cae2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800cae4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3710      	adds	r7, #16
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}
	...

0800caf0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b084      	sub	sp, #16
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f7ff ff87 	bl	800ca0c <sync_window>
 800cafe:	4603      	mov	r3, r0
 800cb00:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cb02:	7bfb      	ldrb	r3, [r7, #15]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d158      	bne.n	800cbba <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	2b03      	cmp	r3, #3
 800cb0e:	d148      	bne.n	800cba2 <sync_fs+0xb2>
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	791b      	ldrb	r3, [r3, #4]
 800cb14:	2b01      	cmp	r3, #1
 800cb16:	d144      	bne.n	800cba2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	3334      	adds	r3, #52	; 0x34
 800cb1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cb20:	2100      	movs	r1, #0
 800cb22:	4618      	mov	r0, r3
 800cb24:	f7ff fda9 	bl	800c67a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	3334      	adds	r3, #52	; 0x34
 800cb2c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cb30:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800cb34:	4618      	mov	r0, r3
 800cb36:	f7ff fd38 	bl	800c5aa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	3334      	adds	r3, #52	; 0x34
 800cb3e:	4921      	ldr	r1, [pc, #132]	; (800cbc4 <sync_fs+0xd4>)
 800cb40:	4618      	mov	r0, r3
 800cb42:	f7ff fd4d 	bl	800c5e0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	3334      	adds	r3, #52	; 0x34
 800cb4a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cb4e:	491e      	ldr	r1, [pc, #120]	; (800cbc8 <sync_fs+0xd8>)
 800cb50:	4618      	mov	r0, r3
 800cb52:	f7ff fd45 	bl	800c5e0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	3334      	adds	r3, #52	; 0x34
 800cb5a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	695b      	ldr	r3, [r3, #20]
 800cb62:	4619      	mov	r1, r3
 800cb64:	4610      	mov	r0, r2
 800cb66:	f7ff fd3b 	bl	800c5e0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	3334      	adds	r3, #52	; 0x34
 800cb6e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	691b      	ldr	r3, [r3, #16]
 800cb76:	4619      	mov	r1, r3
 800cb78:	4610      	mov	r0, r2
 800cb7a:	f7ff fd31 	bl	800c5e0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6a1b      	ldr	r3, [r3, #32]
 800cb82:	1c5a      	adds	r2, r3, #1
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	7858      	ldrb	r0, [r3, #1]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb96:	2301      	movs	r3, #1
 800cb98:	f7ff fc8e 	bl	800c4b8 <disk_write>
			fs->fsi_flag = 0;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2200      	movs	r2, #0
 800cba0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	785b      	ldrb	r3, [r3, #1]
 800cba6:	2200      	movs	r2, #0
 800cba8:	2100      	movs	r1, #0
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f7ff fca4 	bl	800c4f8 <disk_ioctl>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d001      	beq.n	800cbba <sync_fs+0xca>
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800cbba:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3710      	adds	r7, #16
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}
 800cbc4:	41615252 	.word	0x41615252
 800cbc8:	61417272 	.word	0x61417272

0800cbcc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b083      	sub	sp, #12
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	3b02      	subs	r3, #2
 800cbda:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	699b      	ldr	r3, [r3, #24]
 800cbe0:	3b02      	subs	r3, #2
 800cbe2:	683a      	ldr	r2, [r7, #0]
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	d301      	bcc.n	800cbec <clust2sect+0x20>
 800cbe8:	2300      	movs	r3, #0
 800cbea:	e008      	b.n	800cbfe <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	895b      	ldrh	r3, [r3, #10]
 800cbf0:	461a      	mov	r2, r3
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	fb03 f202 	mul.w	r2, r3, r2
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbfc:	4413      	add	r3, r2
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	370c      	adds	r7, #12
 800cc02:	46bd      	mov	sp, r7
 800cc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc08:	4770      	bx	lr

0800cc0a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800cc0a:	b580      	push	{r7, lr}
 800cc0c:	b086      	sub	sp, #24
 800cc0e:	af00      	add	r7, sp, #0
 800cc10:	6078      	str	r0, [r7, #4]
 800cc12:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	2b01      	cmp	r3, #1
 800cc1e:	d904      	bls.n	800cc2a <get_fat+0x20>
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	699b      	ldr	r3, [r3, #24]
 800cc24:	683a      	ldr	r2, [r7, #0]
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d302      	bcc.n	800cc30 <get_fat+0x26>
		val = 1;	/* Internal error */
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	617b      	str	r3, [r7, #20]
 800cc2e:	e08f      	b.n	800cd50 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cc30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc34:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	781b      	ldrb	r3, [r3, #0]
 800cc3a:	2b03      	cmp	r3, #3
 800cc3c:	d062      	beq.n	800cd04 <get_fat+0xfa>
 800cc3e:	2b03      	cmp	r3, #3
 800cc40:	dc7c      	bgt.n	800cd3c <get_fat+0x132>
 800cc42:	2b01      	cmp	r3, #1
 800cc44:	d002      	beq.n	800cc4c <get_fat+0x42>
 800cc46:	2b02      	cmp	r3, #2
 800cc48:	d042      	beq.n	800ccd0 <get_fat+0xc6>
 800cc4a:	e077      	b.n	800cd3c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	60fb      	str	r3, [r7, #12]
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	085b      	lsrs	r3, r3, #1
 800cc54:	68fa      	ldr	r2, [r7, #12]
 800cc56:	4413      	add	r3, r2
 800cc58:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cc5a:	693b      	ldr	r3, [r7, #16]
 800cc5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	0a5b      	lsrs	r3, r3, #9
 800cc62:	4413      	add	r3, r2
 800cc64:	4619      	mov	r1, r3
 800cc66:	6938      	ldr	r0, [r7, #16]
 800cc68:	f7ff ff14 	bl	800ca94 <move_window>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d167      	bne.n	800cd42 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	1c5a      	adds	r2, r3, #1
 800cc76:	60fa      	str	r2, [r7, #12]
 800cc78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc7c:	693a      	ldr	r2, [r7, #16]
 800cc7e:	4413      	add	r3, r2
 800cc80:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cc84:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	0a5b      	lsrs	r3, r3, #9
 800cc8e:	4413      	add	r3, r2
 800cc90:	4619      	mov	r1, r3
 800cc92:	6938      	ldr	r0, [r7, #16]
 800cc94:	f7ff fefe 	bl	800ca94 <move_window>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d153      	bne.n	800cd46 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cca4:	693a      	ldr	r2, [r7, #16]
 800cca6:	4413      	add	r3, r2
 800cca8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ccac:	021b      	lsls	r3, r3, #8
 800ccae:	461a      	mov	r2, r3
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	4313      	orrs	r3, r2
 800ccb4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	f003 0301 	and.w	r3, r3, #1
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d002      	beq.n	800ccc6 <get_fat+0xbc>
 800ccc0:	68bb      	ldr	r3, [r7, #8]
 800ccc2:	091b      	lsrs	r3, r3, #4
 800ccc4:	e002      	b.n	800cccc <get_fat+0xc2>
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cccc:	617b      	str	r3, [r7, #20]
			break;
 800ccce:	e03f      	b.n	800cd50 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ccd0:	693b      	ldr	r3, [r7, #16]
 800ccd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	0a1b      	lsrs	r3, r3, #8
 800ccd8:	4413      	add	r3, r2
 800ccda:	4619      	mov	r1, r3
 800ccdc:	6938      	ldr	r0, [r7, #16]
 800ccde:	f7ff fed9 	bl	800ca94 <move_window>
 800cce2:	4603      	mov	r3, r0
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d130      	bne.n	800cd4a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	005b      	lsls	r3, r3, #1
 800ccf2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ccf6:	4413      	add	r3, r2
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f7ff fc1b 	bl	800c534 <ld_word>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	617b      	str	r3, [r7, #20]
			break;
 800cd02:	e025      	b.n	800cd50 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	09db      	lsrs	r3, r3, #7
 800cd0c:	4413      	add	r3, r2
 800cd0e:	4619      	mov	r1, r3
 800cd10:	6938      	ldr	r0, [r7, #16]
 800cd12:	f7ff febf 	bl	800ca94 <move_window>
 800cd16:	4603      	mov	r3, r0
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d118      	bne.n	800cd4e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800cd1c:	693b      	ldr	r3, [r7, #16]
 800cd1e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	009b      	lsls	r3, r3, #2
 800cd26:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cd2a:	4413      	add	r3, r2
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f7ff fc19 	bl	800c564 <ld_dword>
 800cd32:	4603      	mov	r3, r0
 800cd34:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cd38:	617b      	str	r3, [r7, #20]
			break;
 800cd3a:	e009      	b.n	800cd50 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800cd3c:	2301      	movs	r3, #1
 800cd3e:	617b      	str	r3, [r7, #20]
 800cd40:	e006      	b.n	800cd50 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cd42:	bf00      	nop
 800cd44:	e004      	b.n	800cd50 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cd46:	bf00      	nop
 800cd48:	e002      	b.n	800cd50 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cd4a:	bf00      	nop
 800cd4c:	e000      	b.n	800cd50 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cd4e:	bf00      	nop
		}
	}

	return val;
 800cd50:	697b      	ldr	r3, [r7, #20]
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3718      	adds	r7, #24
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}

0800cd5a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800cd5a:	b590      	push	{r4, r7, lr}
 800cd5c:	b089      	sub	sp, #36	; 0x24
 800cd5e:	af00      	add	r7, sp, #0
 800cd60:	60f8      	str	r0, [r7, #12]
 800cd62:	60b9      	str	r1, [r7, #8]
 800cd64:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800cd66:	2302      	movs	r3, #2
 800cd68:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	2b01      	cmp	r3, #1
 800cd6e:	f240 80d9 	bls.w	800cf24 <put_fat+0x1ca>
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	699b      	ldr	r3, [r3, #24]
 800cd76:	68ba      	ldr	r2, [r7, #8]
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	f080 80d3 	bcs.w	800cf24 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	781b      	ldrb	r3, [r3, #0]
 800cd82:	2b03      	cmp	r3, #3
 800cd84:	f000 8096 	beq.w	800ceb4 <put_fat+0x15a>
 800cd88:	2b03      	cmp	r3, #3
 800cd8a:	f300 80cb 	bgt.w	800cf24 <put_fat+0x1ca>
 800cd8e:	2b01      	cmp	r3, #1
 800cd90:	d002      	beq.n	800cd98 <put_fat+0x3e>
 800cd92:	2b02      	cmp	r3, #2
 800cd94:	d06e      	beq.n	800ce74 <put_fat+0x11a>
 800cd96:	e0c5      	b.n	800cf24 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	61bb      	str	r3, [r7, #24]
 800cd9c:	69bb      	ldr	r3, [r7, #24]
 800cd9e:	085b      	lsrs	r3, r3, #1
 800cda0:	69ba      	ldr	r2, [r7, #24]
 800cda2:	4413      	add	r3, r2
 800cda4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cdaa:	69bb      	ldr	r3, [r7, #24]
 800cdac:	0a5b      	lsrs	r3, r3, #9
 800cdae:	4413      	add	r3, r2
 800cdb0:	4619      	mov	r1, r3
 800cdb2:	68f8      	ldr	r0, [r7, #12]
 800cdb4:	f7ff fe6e 	bl	800ca94 <move_window>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cdbc:	7ffb      	ldrb	r3, [r7, #31]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	f040 80a9 	bne.w	800cf16 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cdca:	69bb      	ldr	r3, [r7, #24]
 800cdcc:	1c59      	adds	r1, r3, #1
 800cdce:	61b9      	str	r1, [r7, #24]
 800cdd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdd4:	4413      	add	r3, r2
 800cdd6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	f003 0301 	and.w	r3, r3, #1
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d00d      	beq.n	800cdfe <put_fat+0xa4>
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	781b      	ldrb	r3, [r3, #0]
 800cde6:	b25b      	sxtb	r3, r3
 800cde8:	f003 030f 	and.w	r3, r3, #15
 800cdec:	b25a      	sxtb	r2, r3
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	b2db      	uxtb	r3, r3
 800cdf2:	011b      	lsls	r3, r3, #4
 800cdf4:	b25b      	sxtb	r3, r3
 800cdf6:	4313      	orrs	r3, r2
 800cdf8:	b25b      	sxtb	r3, r3
 800cdfa:	b2db      	uxtb	r3, r3
 800cdfc:	e001      	b.n	800ce02 <put_fat+0xa8>
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	b2db      	uxtb	r3, r3
 800ce02:	697a      	ldr	r2, [r7, #20]
 800ce04:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	2201      	movs	r2, #1
 800ce0a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ce10:	69bb      	ldr	r3, [r7, #24]
 800ce12:	0a5b      	lsrs	r3, r3, #9
 800ce14:	4413      	add	r3, r2
 800ce16:	4619      	mov	r1, r3
 800ce18:	68f8      	ldr	r0, [r7, #12]
 800ce1a:	f7ff fe3b 	bl	800ca94 <move_window>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ce22:	7ffb      	ldrb	r3, [r7, #31]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d178      	bne.n	800cf1a <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ce2e:	69bb      	ldr	r3, [r7, #24]
 800ce30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce34:	4413      	add	r3, r2
 800ce36:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	f003 0301 	and.w	r3, r3, #1
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d003      	beq.n	800ce4a <put_fat+0xf0>
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	091b      	lsrs	r3, r3, #4
 800ce46:	b2db      	uxtb	r3, r3
 800ce48:	e00e      	b.n	800ce68 <put_fat+0x10e>
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	781b      	ldrb	r3, [r3, #0]
 800ce4e:	b25b      	sxtb	r3, r3
 800ce50:	f023 030f 	bic.w	r3, r3, #15
 800ce54:	b25a      	sxtb	r2, r3
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	0a1b      	lsrs	r3, r3, #8
 800ce5a:	b25b      	sxtb	r3, r3
 800ce5c:	f003 030f 	and.w	r3, r3, #15
 800ce60:	b25b      	sxtb	r3, r3
 800ce62:	4313      	orrs	r3, r2
 800ce64:	b25b      	sxtb	r3, r3
 800ce66:	b2db      	uxtb	r3, r3
 800ce68:	697a      	ldr	r2, [r7, #20]
 800ce6a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	2201      	movs	r2, #1
 800ce70:	70da      	strb	r2, [r3, #3]
			break;
 800ce72:	e057      	b.n	800cf24 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	0a1b      	lsrs	r3, r3, #8
 800ce7c:	4413      	add	r3, r2
 800ce7e:	4619      	mov	r1, r3
 800ce80:	68f8      	ldr	r0, [r7, #12]
 800ce82:	f7ff fe07 	bl	800ca94 <move_window>
 800ce86:	4603      	mov	r3, r0
 800ce88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ce8a:	7ffb      	ldrb	r3, [r7, #31]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d146      	bne.n	800cf1e <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	005b      	lsls	r3, r3, #1
 800ce9a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ce9e:	4413      	add	r3, r2
 800cea0:	687a      	ldr	r2, [r7, #4]
 800cea2:	b292      	uxth	r2, r2
 800cea4:	4611      	mov	r1, r2
 800cea6:	4618      	mov	r0, r3
 800cea8:	f7ff fb7f 	bl	800c5aa <st_word>
			fs->wflag = 1;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	2201      	movs	r2, #1
 800ceb0:	70da      	strb	r2, [r3, #3]
			break;
 800ceb2:	e037      	b.n	800cf24 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	09db      	lsrs	r3, r3, #7
 800cebc:	4413      	add	r3, r2
 800cebe:	4619      	mov	r1, r3
 800cec0:	68f8      	ldr	r0, [r7, #12]
 800cec2:	f7ff fde7 	bl	800ca94 <move_window>
 800cec6:	4603      	mov	r3, r0
 800cec8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ceca:	7ffb      	ldrb	r3, [r7, #31]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d128      	bne.n	800cf22 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	009b      	lsls	r3, r3, #2
 800cee0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cee4:	4413      	add	r3, r2
 800cee6:	4618      	mov	r0, r3
 800cee8:	f7ff fb3c 	bl	800c564 <ld_dword>
 800ceec:	4603      	mov	r3, r0
 800ceee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cef2:	4323      	orrs	r3, r4
 800cef4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	009b      	lsls	r3, r3, #2
 800cf00:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cf04:	4413      	add	r3, r2
 800cf06:	6879      	ldr	r1, [r7, #4]
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f7ff fb69 	bl	800c5e0 <st_dword>
			fs->wflag = 1;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	2201      	movs	r2, #1
 800cf12:	70da      	strb	r2, [r3, #3]
			break;
 800cf14:	e006      	b.n	800cf24 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cf16:	bf00      	nop
 800cf18:	e004      	b.n	800cf24 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cf1a:	bf00      	nop
 800cf1c:	e002      	b.n	800cf24 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cf1e:	bf00      	nop
 800cf20:	e000      	b.n	800cf24 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800cf22:	bf00      	nop
		}
	}
	return res;
 800cf24:	7ffb      	ldrb	r3, [r7, #31]
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	3724      	adds	r7, #36	; 0x24
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd90      	pop	{r4, r7, pc}

0800cf2e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800cf2e:	b580      	push	{r7, lr}
 800cf30:	b088      	sub	sp, #32
 800cf32:	af00      	add	r7, sp, #0
 800cf34:	60f8      	str	r0, [r7, #12]
 800cf36:	60b9      	str	r1, [r7, #8]
 800cf38:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	2b01      	cmp	r3, #1
 800cf48:	d904      	bls.n	800cf54 <remove_chain+0x26>
 800cf4a:	69bb      	ldr	r3, [r7, #24]
 800cf4c:	699b      	ldr	r3, [r3, #24]
 800cf4e:	68ba      	ldr	r2, [r7, #8]
 800cf50:	429a      	cmp	r2, r3
 800cf52:	d301      	bcc.n	800cf58 <remove_chain+0x2a>
 800cf54:	2302      	movs	r3, #2
 800cf56:	e04b      	b.n	800cff0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d00c      	beq.n	800cf78 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800cf5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cf62:	6879      	ldr	r1, [r7, #4]
 800cf64:	69b8      	ldr	r0, [r7, #24]
 800cf66:	f7ff fef8 	bl	800cd5a <put_fat>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800cf6e:	7ffb      	ldrb	r3, [r7, #31]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d001      	beq.n	800cf78 <remove_chain+0x4a>
 800cf74:	7ffb      	ldrb	r3, [r7, #31]
 800cf76:	e03b      	b.n	800cff0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800cf78:	68b9      	ldr	r1, [r7, #8]
 800cf7a:	68f8      	ldr	r0, [r7, #12]
 800cf7c:	f7ff fe45 	bl	800cc0a <get_fat>
 800cf80:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d031      	beq.n	800cfec <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	2b01      	cmp	r3, #1
 800cf8c:	d101      	bne.n	800cf92 <remove_chain+0x64>
 800cf8e:	2302      	movs	r3, #2
 800cf90:	e02e      	b.n	800cff0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf98:	d101      	bne.n	800cf9e <remove_chain+0x70>
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	e028      	b.n	800cff0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	68b9      	ldr	r1, [r7, #8]
 800cfa2:	69b8      	ldr	r0, [r7, #24]
 800cfa4:	f7ff fed9 	bl	800cd5a <put_fat>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800cfac:	7ffb      	ldrb	r3, [r7, #31]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d001      	beq.n	800cfb6 <remove_chain+0x88>
 800cfb2:	7ffb      	ldrb	r3, [r7, #31]
 800cfb4:	e01c      	b.n	800cff0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cfb6:	69bb      	ldr	r3, [r7, #24]
 800cfb8:	695a      	ldr	r2, [r3, #20]
 800cfba:	69bb      	ldr	r3, [r7, #24]
 800cfbc:	699b      	ldr	r3, [r3, #24]
 800cfbe:	3b02      	subs	r3, #2
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d20b      	bcs.n	800cfdc <remove_chain+0xae>
			fs->free_clst++;
 800cfc4:	69bb      	ldr	r3, [r7, #24]
 800cfc6:	695b      	ldr	r3, [r3, #20]
 800cfc8:	1c5a      	adds	r2, r3, #1
 800cfca:	69bb      	ldr	r3, [r7, #24]
 800cfcc:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800cfce:	69bb      	ldr	r3, [r7, #24]
 800cfd0:	791b      	ldrb	r3, [r3, #4]
 800cfd2:	f043 0301 	orr.w	r3, r3, #1
 800cfd6:	b2da      	uxtb	r2, r3
 800cfd8:	69bb      	ldr	r3, [r7, #24]
 800cfda:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800cfdc:	697b      	ldr	r3, [r7, #20]
 800cfde:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800cfe0:	69bb      	ldr	r3, [r7, #24]
 800cfe2:	699b      	ldr	r3, [r3, #24]
 800cfe4:	68ba      	ldr	r2, [r7, #8]
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	d3c6      	bcc.n	800cf78 <remove_chain+0x4a>
 800cfea:	e000      	b.n	800cfee <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800cfec:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800cfee:	2300      	movs	r3, #0
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	3720      	adds	r7, #32
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}

0800cff8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b088      	sub	sp, #32
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
 800d000:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d10d      	bne.n	800d02a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d00e:	693b      	ldr	r3, [r7, #16]
 800d010:	691b      	ldr	r3, [r3, #16]
 800d012:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d014:	69bb      	ldr	r3, [r7, #24]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d004      	beq.n	800d024 <create_chain+0x2c>
 800d01a:	693b      	ldr	r3, [r7, #16]
 800d01c:	699b      	ldr	r3, [r3, #24]
 800d01e:	69ba      	ldr	r2, [r7, #24]
 800d020:	429a      	cmp	r2, r3
 800d022:	d31b      	bcc.n	800d05c <create_chain+0x64>
 800d024:	2301      	movs	r3, #1
 800d026:	61bb      	str	r3, [r7, #24]
 800d028:	e018      	b.n	800d05c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d02a:	6839      	ldr	r1, [r7, #0]
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f7ff fdec 	bl	800cc0a <get_fat>
 800d032:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	2b01      	cmp	r3, #1
 800d038:	d801      	bhi.n	800d03e <create_chain+0x46>
 800d03a:	2301      	movs	r3, #1
 800d03c:	e070      	b.n	800d120 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d044:	d101      	bne.n	800d04a <create_chain+0x52>
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	e06a      	b.n	800d120 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	699b      	ldr	r3, [r3, #24]
 800d04e:	68fa      	ldr	r2, [r7, #12]
 800d050:	429a      	cmp	r2, r3
 800d052:	d201      	bcs.n	800d058 <create_chain+0x60>
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	e063      	b.n	800d120 <create_chain+0x128>
		scl = clst;
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d05c:	69bb      	ldr	r3, [r7, #24]
 800d05e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d060:	69fb      	ldr	r3, [r7, #28]
 800d062:	3301      	adds	r3, #1
 800d064:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d066:	693b      	ldr	r3, [r7, #16]
 800d068:	699b      	ldr	r3, [r3, #24]
 800d06a:	69fa      	ldr	r2, [r7, #28]
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d307      	bcc.n	800d080 <create_chain+0x88>
				ncl = 2;
 800d070:	2302      	movs	r3, #2
 800d072:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d074:	69fa      	ldr	r2, [r7, #28]
 800d076:	69bb      	ldr	r3, [r7, #24]
 800d078:	429a      	cmp	r2, r3
 800d07a:	d901      	bls.n	800d080 <create_chain+0x88>
 800d07c:	2300      	movs	r3, #0
 800d07e:	e04f      	b.n	800d120 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d080:	69f9      	ldr	r1, [r7, #28]
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f7ff fdc1 	bl	800cc0a <get_fat>
 800d088:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d00e      	beq.n	800d0ae <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	2b01      	cmp	r3, #1
 800d094:	d003      	beq.n	800d09e <create_chain+0xa6>
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d09c:	d101      	bne.n	800d0a2 <create_chain+0xaa>
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	e03e      	b.n	800d120 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d0a2:	69fa      	ldr	r2, [r7, #28]
 800d0a4:	69bb      	ldr	r3, [r7, #24]
 800d0a6:	429a      	cmp	r2, r3
 800d0a8:	d1da      	bne.n	800d060 <create_chain+0x68>
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	e038      	b.n	800d120 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d0ae:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d0b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d0b4:	69f9      	ldr	r1, [r7, #28]
 800d0b6:	6938      	ldr	r0, [r7, #16]
 800d0b8:	f7ff fe4f 	bl	800cd5a <put_fat>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d0c0:	7dfb      	ldrb	r3, [r7, #23]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d109      	bne.n	800d0da <create_chain+0xe2>
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d006      	beq.n	800d0da <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d0cc:	69fa      	ldr	r2, [r7, #28]
 800d0ce:	6839      	ldr	r1, [r7, #0]
 800d0d0:	6938      	ldr	r0, [r7, #16]
 800d0d2:	f7ff fe42 	bl	800cd5a <put_fat>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d0da:	7dfb      	ldrb	r3, [r7, #23]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d116      	bne.n	800d10e <create_chain+0x116>
		fs->last_clst = ncl;
 800d0e0:	693b      	ldr	r3, [r7, #16]
 800d0e2:	69fa      	ldr	r2, [r7, #28]
 800d0e4:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d0e6:	693b      	ldr	r3, [r7, #16]
 800d0e8:	695a      	ldr	r2, [r3, #20]
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	699b      	ldr	r3, [r3, #24]
 800d0ee:	3b02      	subs	r3, #2
 800d0f0:	429a      	cmp	r2, r3
 800d0f2:	d804      	bhi.n	800d0fe <create_chain+0x106>
 800d0f4:	693b      	ldr	r3, [r7, #16]
 800d0f6:	695b      	ldr	r3, [r3, #20]
 800d0f8:	1e5a      	subs	r2, r3, #1
 800d0fa:	693b      	ldr	r3, [r7, #16]
 800d0fc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800d0fe:	693b      	ldr	r3, [r7, #16]
 800d100:	791b      	ldrb	r3, [r3, #4]
 800d102:	f043 0301 	orr.w	r3, r3, #1
 800d106:	b2da      	uxtb	r2, r3
 800d108:	693b      	ldr	r3, [r7, #16]
 800d10a:	711a      	strb	r2, [r3, #4]
 800d10c:	e007      	b.n	800d11e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d10e:	7dfb      	ldrb	r3, [r7, #23]
 800d110:	2b01      	cmp	r3, #1
 800d112:	d102      	bne.n	800d11a <create_chain+0x122>
 800d114:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d118:	e000      	b.n	800d11c <create_chain+0x124>
 800d11a:	2301      	movs	r3, #1
 800d11c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d11e:	69fb      	ldr	r3, [r7, #28]
}
 800d120:	4618      	mov	r0, r3
 800d122:	3720      	adds	r7, #32
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}

0800d128 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d128:	b480      	push	{r7}
 800d12a:	b087      	sub	sp, #28
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
 800d130:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d13c:	3304      	adds	r3, #4
 800d13e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	0a5b      	lsrs	r3, r3, #9
 800d144:	68fa      	ldr	r2, [r7, #12]
 800d146:	8952      	ldrh	r2, [r2, #10]
 800d148:	fbb3 f3f2 	udiv	r3, r3, r2
 800d14c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d14e:	693b      	ldr	r3, [r7, #16]
 800d150:	1d1a      	adds	r2, r3, #4
 800d152:	613a      	str	r2, [r7, #16]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d101      	bne.n	800d162 <clmt_clust+0x3a>
 800d15e:	2300      	movs	r3, #0
 800d160:	e010      	b.n	800d184 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d162:	697a      	ldr	r2, [r7, #20]
 800d164:	68bb      	ldr	r3, [r7, #8]
 800d166:	429a      	cmp	r2, r3
 800d168:	d307      	bcc.n	800d17a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d16a:	697a      	ldr	r2, [r7, #20]
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	1ad3      	subs	r3, r2, r3
 800d170:	617b      	str	r3, [r7, #20]
 800d172:	693b      	ldr	r3, [r7, #16]
 800d174:	3304      	adds	r3, #4
 800d176:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d178:	e7e9      	b.n	800d14e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d17a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	681a      	ldr	r2, [r3, #0]
 800d180:	697b      	ldr	r3, [r7, #20]
 800d182:	4413      	add	r3, r2
}
 800d184:	4618      	mov	r0, r3
 800d186:	371c      	adds	r7, #28
 800d188:	46bd      	mov	sp, r7
 800d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18e:	4770      	bx	lr

0800d190 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b086      	sub	sp, #24
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
 800d198:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d1a6:	d204      	bcs.n	800d1b2 <dir_sdi+0x22>
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	f003 031f 	and.w	r3, r3, #31
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d001      	beq.n	800d1b6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d1b2:	2302      	movs	r3, #2
 800d1b4:	e063      	b.n	800d27e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	683a      	ldr	r2, [r7, #0]
 800d1ba:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	689b      	ldr	r3, [r3, #8]
 800d1c0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d1c2:	697b      	ldr	r3, [r7, #20]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d106      	bne.n	800d1d6 <dir_sdi+0x46>
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	781b      	ldrb	r3, [r3, #0]
 800d1cc:	2b02      	cmp	r3, #2
 800d1ce:	d902      	bls.n	800d1d6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1d4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d10c      	bne.n	800d1f6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	095b      	lsrs	r3, r3, #5
 800d1e0:	693a      	ldr	r2, [r7, #16]
 800d1e2:	8912      	ldrh	r2, [r2, #8]
 800d1e4:	4293      	cmp	r3, r2
 800d1e6:	d301      	bcc.n	800d1ec <dir_sdi+0x5c>
 800d1e8:	2302      	movs	r3, #2
 800d1ea:	e048      	b.n	800d27e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	61da      	str	r2, [r3, #28]
 800d1f4:	e029      	b.n	800d24a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d1f6:	693b      	ldr	r3, [r7, #16]
 800d1f8:	895b      	ldrh	r3, [r3, #10]
 800d1fa:	025b      	lsls	r3, r3, #9
 800d1fc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d1fe:	e019      	b.n	800d234 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6979      	ldr	r1, [r7, #20]
 800d204:	4618      	mov	r0, r3
 800d206:	f7ff fd00 	bl	800cc0a <get_fat>
 800d20a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d20c:	697b      	ldr	r3, [r7, #20]
 800d20e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d212:	d101      	bne.n	800d218 <dir_sdi+0x88>
 800d214:	2301      	movs	r3, #1
 800d216:	e032      	b.n	800d27e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	2b01      	cmp	r3, #1
 800d21c:	d904      	bls.n	800d228 <dir_sdi+0x98>
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	699b      	ldr	r3, [r3, #24]
 800d222:	697a      	ldr	r2, [r7, #20]
 800d224:	429a      	cmp	r2, r3
 800d226:	d301      	bcc.n	800d22c <dir_sdi+0x9c>
 800d228:	2302      	movs	r3, #2
 800d22a:	e028      	b.n	800d27e <dir_sdi+0xee>
			ofs -= csz;
 800d22c:	683a      	ldr	r2, [r7, #0]
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	1ad3      	subs	r3, r2, r3
 800d232:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d234:	683a      	ldr	r2, [r7, #0]
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	429a      	cmp	r2, r3
 800d23a:	d2e1      	bcs.n	800d200 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d23c:	6979      	ldr	r1, [r7, #20]
 800d23e:	6938      	ldr	r0, [r7, #16]
 800d240:	f7ff fcc4 	bl	800cbcc <clust2sect>
 800d244:	4602      	mov	r2, r0
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	697a      	ldr	r2, [r7, #20]
 800d24e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	69db      	ldr	r3, [r3, #28]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d101      	bne.n	800d25c <dir_sdi+0xcc>
 800d258:	2302      	movs	r3, #2
 800d25a:	e010      	b.n	800d27e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	69da      	ldr	r2, [r3, #28]
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	0a5b      	lsrs	r3, r3, #9
 800d264:	441a      	add	r2, r3
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d26a:	693b      	ldr	r3, [r7, #16]
 800d26c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d276:	441a      	add	r2, r3
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d27c:	2300      	movs	r3, #0
}
 800d27e:	4618      	mov	r0, r3
 800d280:	3718      	adds	r7, #24
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}

0800d286 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d286:	b580      	push	{r7, lr}
 800d288:	b086      	sub	sp, #24
 800d28a:	af00      	add	r7, sp, #0
 800d28c:	6078      	str	r0, [r7, #4]
 800d28e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	695b      	ldr	r3, [r3, #20]
 800d29a:	3320      	adds	r3, #32
 800d29c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	69db      	ldr	r3, [r3, #28]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d003      	beq.n	800d2ae <dir_next+0x28>
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d2ac:	d301      	bcc.n	800d2b2 <dir_next+0x2c>
 800d2ae:	2304      	movs	r3, #4
 800d2b0:	e0aa      	b.n	800d408 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d2b2:	68bb      	ldr	r3, [r7, #8]
 800d2b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	f040 8098 	bne.w	800d3ee <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	69db      	ldr	r3, [r3, #28]
 800d2c2:	1c5a      	adds	r2, r3, #1
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	699b      	ldr	r3, [r3, #24]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d10b      	bne.n	800d2e8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d2d0:	68bb      	ldr	r3, [r7, #8]
 800d2d2:	095b      	lsrs	r3, r3, #5
 800d2d4:	68fa      	ldr	r2, [r7, #12]
 800d2d6:	8912      	ldrh	r2, [r2, #8]
 800d2d8:	4293      	cmp	r3, r2
 800d2da:	f0c0 8088 	bcc.w	800d3ee <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	61da      	str	r2, [r3, #28]
 800d2e4:	2304      	movs	r3, #4
 800d2e6:	e08f      	b.n	800d408 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d2e8:	68bb      	ldr	r3, [r7, #8]
 800d2ea:	0a5b      	lsrs	r3, r3, #9
 800d2ec:	68fa      	ldr	r2, [r7, #12]
 800d2ee:	8952      	ldrh	r2, [r2, #10]
 800d2f0:	3a01      	subs	r2, #1
 800d2f2:	4013      	ands	r3, r2
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d17a      	bne.n	800d3ee <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d2f8:	687a      	ldr	r2, [r7, #4]
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	699b      	ldr	r3, [r3, #24]
 800d2fe:	4619      	mov	r1, r3
 800d300:	4610      	mov	r0, r2
 800d302:	f7ff fc82 	bl	800cc0a <get_fat>
 800d306:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d308:	697b      	ldr	r3, [r7, #20]
 800d30a:	2b01      	cmp	r3, #1
 800d30c:	d801      	bhi.n	800d312 <dir_next+0x8c>
 800d30e:	2302      	movs	r3, #2
 800d310:	e07a      	b.n	800d408 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d312:	697b      	ldr	r3, [r7, #20]
 800d314:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d318:	d101      	bne.n	800d31e <dir_next+0x98>
 800d31a:	2301      	movs	r3, #1
 800d31c:	e074      	b.n	800d408 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	699b      	ldr	r3, [r3, #24]
 800d322:	697a      	ldr	r2, [r7, #20]
 800d324:	429a      	cmp	r2, r3
 800d326:	d358      	bcc.n	800d3da <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d104      	bne.n	800d338 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2200      	movs	r2, #0
 800d332:	61da      	str	r2, [r3, #28]
 800d334:	2304      	movs	r3, #4
 800d336:	e067      	b.n	800d408 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d338:	687a      	ldr	r2, [r7, #4]
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	699b      	ldr	r3, [r3, #24]
 800d33e:	4619      	mov	r1, r3
 800d340:	4610      	mov	r0, r2
 800d342:	f7ff fe59 	bl	800cff8 <create_chain>
 800d346:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d348:	697b      	ldr	r3, [r7, #20]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d101      	bne.n	800d352 <dir_next+0xcc>
 800d34e:	2307      	movs	r3, #7
 800d350:	e05a      	b.n	800d408 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d352:	697b      	ldr	r3, [r7, #20]
 800d354:	2b01      	cmp	r3, #1
 800d356:	d101      	bne.n	800d35c <dir_next+0xd6>
 800d358:	2302      	movs	r3, #2
 800d35a:	e055      	b.n	800d408 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d362:	d101      	bne.n	800d368 <dir_next+0xe2>
 800d364:	2301      	movs	r3, #1
 800d366:	e04f      	b.n	800d408 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d368:	68f8      	ldr	r0, [r7, #12]
 800d36a:	f7ff fb4f 	bl	800ca0c <sync_window>
 800d36e:	4603      	mov	r3, r0
 800d370:	2b00      	cmp	r3, #0
 800d372:	d001      	beq.n	800d378 <dir_next+0xf2>
 800d374:	2301      	movs	r3, #1
 800d376:	e047      	b.n	800d408 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	3334      	adds	r3, #52	; 0x34
 800d37c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d380:	2100      	movs	r1, #0
 800d382:	4618      	mov	r0, r3
 800d384:	f7ff f979 	bl	800c67a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d388:	2300      	movs	r3, #0
 800d38a:	613b      	str	r3, [r7, #16]
 800d38c:	6979      	ldr	r1, [r7, #20]
 800d38e:	68f8      	ldr	r0, [r7, #12]
 800d390:	f7ff fc1c 	bl	800cbcc <clust2sect>
 800d394:	4602      	mov	r2, r0
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	631a      	str	r2, [r3, #48]	; 0x30
 800d39a:	e012      	b.n	800d3c2 <dir_next+0x13c>
						fs->wflag = 1;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	2201      	movs	r2, #1
 800d3a0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d3a2:	68f8      	ldr	r0, [r7, #12]
 800d3a4:	f7ff fb32 	bl	800ca0c <sync_window>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d001      	beq.n	800d3b2 <dir_next+0x12c>
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	e02a      	b.n	800d408 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	3301      	adds	r3, #1
 800d3b6:	613b      	str	r3, [r7, #16]
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3bc:	1c5a      	adds	r2, r3, #1
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	631a      	str	r2, [r3, #48]	; 0x30
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	895b      	ldrh	r3, [r3, #10]
 800d3c6:	461a      	mov	r2, r3
 800d3c8:	693b      	ldr	r3, [r7, #16]
 800d3ca:	4293      	cmp	r3, r2
 800d3cc:	d3e6      	bcc.n	800d39c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d3d2:	693b      	ldr	r3, [r7, #16]
 800d3d4:	1ad2      	subs	r2, r2, r3
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	697a      	ldr	r2, [r7, #20]
 800d3de:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d3e0:	6979      	ldr	r1, [r7, #20]
 800d3e2:	68f8      	ldr	r0, [r7, #12]
 800d3e4:	f7ff fbf2 	bl	800cbcc <clust2sect>
 800d3e8:	4602      	mov	r2, r0
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	68ba      	ldr	r2, [r7, #8]
 800d3f2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d400:	441a      	add	r2, r3
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d406:	2300      	movs	r3, #0
}
 800d408:	4618      	mov	r0, r3
 800d40a:	3718      	adds	r7, #24
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}

0800d410 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b086      	sub	sp, #24
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
 800d418:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d420:	2100      	movs	r1, #0
 800d422:	6878      	ldr	r0, [r7, #4]
 800d424:	f7ff feb4 	bl	800d190 <dir_sdi>
 800d428:	4603      	mov	r3, r0
 800d42a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d42c:	7dfb      	ldrb	r3, [r7, #23]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d12b      	bne.n	800d48a <dir_alloc+0x7a>
		n = 0;
 800d432:	2300      	movs	r3, #0
 800d434:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	69db      	ldr	r3, [r3, #28]
 800d43a:	4619      	mov	r1, r3
 800d43c:	68f8      	ldr	r0, [r7, #12]
 800d43e:	f7ff fb29 	bl	800ca94 <move_window>
 800d442:	4603      	mov	r3, r0
 800d444:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d446:	7dfb      	ldrb	r3, [r7, #23]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d11d      	bne.n	800d488 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6a1b      	ldr	r3, [r3, #32]
 800d450:	781b      	ldrb	r3, [r3, #0]
 800d452:	2be5      	cmp	r3, #229	; 0xe5
 800d454:	d004      	beq.n	800d460 <dir_alloc+0x50>
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6a1b      	ldr	r3, [r3, #32]
 800d45a:	781b      	ldrb	r3, [r3, #0]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d107      	bne.n	800d470 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d460:	693b      	ldr	r3, [r7, #16]
 800d462:	3301      	adds	r3, #1
 800d464:	613b      	str	r3, [r7, #16]
 800d466:	693a      	ldr	r2, [r7, #16]
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	429a      	cmp	r2, r3
 800d46c:	d102      	bne.n	800d474 <dir_alloc+0x64>
 800d46e:	e00c      	b.n	800d48a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d470:	2300      	movs	r3, #0
 800d472:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d474:	2101      	movs	r1, #1
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f7ff ff05 	bl	800d286 <dir_next>
 800d47c:	4603      	mov	r3, r0
 800d47e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d480:	7dfb      	ldrb	r3, [r7, #23]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d0d7      	beq.n	800d436 <dir_alloc+0x26>
 800d486:	e000      	b.n	800d48a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d488:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d48a:	7dfb      	ldrb	r3, [r7, #23]
 800d48c:	2b04      	cmp	r3, #4
 800d48e:	d101      	bne.n	800d494 <dir_alloc+0x84>
 800d490:	2307      	movs	r3, #7
 800d492:	75fb      	strb	r3, [r7, #23]
	return res;
 800d494:	7dfb      	ldrb	r3, [r7, #23]
}
 800d496:	4618      	mov	r0, r3
 800d498:	3718      	adds	r7, #24
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}

0800d49e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d49e:	b580      	push	{r7, lr}
 800d4a0:	b084      	sub	sp, #16
 800d4a2:	af00      	add	r7, sp, #0
 800d4a4:	6078      	str	r0, [r7, #4]
 800d4a6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	331a      	adds	r3, #26
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f7ff f841 	bl	800c534 <ld_word>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	781b      	ldrb	r3, [r3, #0]
 800d4ba:	2b03      	cmp	r3, #3
 800d4bc:	d109      	bne.n	800d4d2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	3314      	adds	r3, #20
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f7ff f836 	bl	800c534 <ld_word>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	041b      	lsls	r3, r3, #16
 800d4cc:	68fa      	ldr	r2, [r7, #12]
 800d4ce:	4313      	orrs	r3, r2
 800d4d0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3710      	adds	r7, #16
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}

0800d4dc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b084      	sub	sp, #16
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	60f8      	str	r0, [r7, #12]
 800d4e4:	60b9      	str	r1, [r7, #8]
 800d4e6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	331a      	adds	r3, #26
 800d4ec:	687a      	ldr	r2, [r7, #4]
 800d4ee:	b292      	uxth	r2, r2
 800d4f0:	4611      	mov	r1, r2
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f7ff f859 	bl	800c5aa <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	781b      	ldrb	r3, [r3, #0]
 800d4fc:	2b03      	cmp	r3, #3
 800d4fe:	d109      	bne.n	800d514 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	f103 0214 	add.w	r2, r3, #20
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	0c1b      	lsrs	r3, r3, #16
 800d50a:	b29b      	uxth	r3, r3
 800d50c:	4619      	mov	r1, r3
 800d50e:	4610      	mov	r0, r2
 800d510:	f7ff f84b 	bl	800c5aa <st_word>
	}
}
 800d514:	bf00      	nop
 800d516:	3710      	adds	r7, #16
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}

0800d51c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800d51c:	b590      	push	{r4, r7, lr}
 800d51e:	b087      	sub	sp, #28
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
 800d524:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	331a      	adds	r3, #26
 800d52a:	4618      	mov	r0, r3
 800d52c:	f7ff f802 	bl	800c534 <ld_word>
 800d530:	4603      	mov	r3, r0
 800d532:	2b00      	cmp	r3, #0
 800d534:	d001      	beq.n	800d53a <cmp_lfn+0x1e>
 800d536:	2300      	movs	r3, #0
 800d538:	e059      	b.n	800d5ee <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	781b      	ldrb	r3, [r3, #0]
 800d53e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d542:	1e5a      	subs	r2, r3, #1
 800d544:	4613      	mov	r3, r2
 800d546:	005b      	lsls	r3, r3, #1
 800d548:	4413      	add	r3, r2
 800d54a:	009b      	lsls	r3, r3, #2
 800d54c:	4413      	add	r3, r2
 800d54e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d550:	2301      	movs	r3, #1
 800d552:	81fb      	strh	r3, [r7, #14]
 800d554:	2300      	movs	r3, #0
 800d556:	613b      	str	r3, [r7, #16]
 800d558:	e033      	b.n	800d5c2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d55a:	4a27      	ldr	r2, [pc, #156]	; (800d5f8 <cmp_lfn+0xdc>)
 800d55c:	693b      	ldr	r3, [r7, #16]
 800d55e:	4413      	add	r3, r2
 800d560:	781b      	ldrb	r3, [r3, #0]
 800d562:	461a      	mov	r2, r3
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	4413      	add	r3, r2
 800d568:	4618      	mov	r0, r3
 800d56a:	f7fe ffe3 	bl	800c534 <ld_word>
 800d56e:	4603      	mov	r3, r0
 800d570:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d572:	89fb      	ldrh	r3, [r7, #14]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d01a      	beq.n	800d5ae <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	2bfe      	cmp	r3, #254	; 0xfe
 800d57c:	d812      	bhi.n	800d5a4 <cmp_lfn+0x88>
 800d57e:	89bb      	ldrh	r3, [r7, #12]
 800d580:	4618      	mov	r0, r3
 800d582:	f001 ffcd 	bl	800f520 <ff_wtoupper>
 800d586:	4603      	mov	r3, r0
 800d588:	461c      	mov	r4, r3
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	1c5a      	adds	r2, r3, #1
 800d58e:	617a      	str	r2, [r7, #20]
 800d590:	005b      	lsls	r3, r3, #1
 800d592:	687a      	ldr	r2, [r7, #4]
 800d594:	4413      	add	r3, r2
 800d596:	881b      	ldrh	r3, [r3, #0]
 800d598:	4618      	mov	r0, r3
 800d59a:	f001 ffc1 	bl	800f520 <ff_wtoupper>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	429c      	cmp	r4, r3
 800d5a2:	d001      	beq.n	800d5a8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	e022      	b.n	800d5ee <cmp_lfn+0xd2>
			}
			wc = uc;
 800d5a8:	89bb      	ldrh	r3, [r7, #12]
 800d5aa:	81fb      	strh	r3, [r7, #14]
 800d5ac:	e006      	b.n	800d5bc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d5ae:	89bb      	ldrh	r3, [r7, #12]
 800d5b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d5b4:	4293      	cmp	r3, r2
 800d5b6:	d001      	beq.n	800d5bc <cmp_lfn+0xa0>
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	e018      	b.n	800d5ee <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d5bc:	693b      	ldr	r3, [r7, #16]
 800d5be:	3301      	adds	r3, #1
 800d5c0:	613b      	str	r3, [r7, #16]
 800d5c2:	693b      	ldr	r3, [r7, #16]
 800d5c4:	2b0c      	cmp	r3, #12
 800d5c6:	d9c8      	bls.n	800d55a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	781b      	ldrb	r3, [r3, #0]
 800d5cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d00b      	beq.n	800d5ec <cmp_lfn+0xd0>
 800d5d4:	89fb      	ldrh	r3, [r7, #14]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d008      	beq.n	800d5ec <cmp_lfn+0xd0>
 800d5da:	697b      	ldr	r3, [r7, #20]
 800d5dc:	005b      	lsls	r3, r3, #1
 800d5de:	687a      	ldr	r2, [r7, #4]
 800d5e0:	4413      	add	r3, r2
 800d5e2:	881b      	ldrh	r3, [r3, #0]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d001      	beq.n	800d5ec <cmp_lfn+0xd0>
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	e000      	b.n	800d5ee <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d5ec:	2301      	movs	r3, #1
}
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	371c      	adds	r7, #28
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd90      	pop	{r4, r7, pc}
 800d5f6:	bf00      	nop
 800d5f8:	08011a64 	.word	0x08011a64

0800d5fc <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b086      	sub	sp, #24
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
 800d604:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	331a      	adds	r3, #26
 800d60a:	4618      	mov	r0, r3
 800d60c:	f7fe ff92 	bl	800c534 <ld_word>
 800d610:	4603      	mov	r3, r0
 800d612:	2b00      	cmp	r3, #0
 800d614:	d001      	beq.n	800d61a <pick_lfn+0x1e>
 800d616:	2300      	movs	r3, #0
 800d618:	e04d      	b.n	800d6b6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	781b      	ldrb	r3, [r3, #0]
 800d61e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d622:	1e5a      	subs	r2, r3, #1
 800d624:	4613      	mov	r3, r2
 800d626:	005b      	lsls	r3, r3, #1
 800d628:	4413      	add	r3, r2
 800d62a:	009b      	lsls	r3, r3, #2
 800d62c:	4413      	add	r3, r2
 800d62e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d630:	2301      	movs	r3, #1
 800d632:	81fb      	strh	r3, [r7, #14]
 800d634:	2300      	movs	r3, #0
 800d636:	613b      	str	r3, [r7, #16]
 800d638:	e028      	b.n	800d68c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d63a:	4a21      	ldr	r2, [pc, #132]	; (800d6c0 <pick_lfn+0xc4>)
 800d63c:	693b      	ldr	r3, [r7, #16]
 800d63e:	4413      	add	r3, r2
 800d640:	781b      	ldrb	r3, [r3, #0]
 800d642:	461a      	mov	r2, r3
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	4413      	add	r3, r2
 800d648:	4618      	mov	r0, r3
 800d64a:	f7fe ff73 	bl	800c534 <ld_word>
 800d64e:	4603      	mov	r3, r0
 800d650:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d652:	89fb      	ldrh	r3, [r7, #14]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d00f      	beq.n	800d678 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	2bfe      	cmp	r3, #254	; 0xfe
 800d65c:	d901      	bls.n	800d662 <pick_lfn+0x66>
 800d65e:	2300      	movs	r3, #0
 800d660:	e029      	b.n	800d6b6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d662:	89bb      	ldrh	r3, [r7, #12]
 800d664:	81fb      	strh	r3, [r7, #14]
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	1c5a      	adds	r2, r3, #1
 800d66a:	617a      	str	r2, [r7, #20]
 800d66c:	005b      	lsls	r3, r3, #1
 800d66e:	687a      	ldr	r2, [r7, #4]
 800d670:	4413      	add	r3, r2
 800d672:	89fa      	ldrh	r2, [r7, #14]
 800d674:	801a      	strh	r2, [r3, #0]
 800d676:	e006      	b.n	800d686 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d678:	89bb      	ldrh	r3, [r7, #12]
 800d67a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d67e:	4293      	cmp	r3, r2
 800d680:	d001      	beq.n	800d686 <pick_lfn+0x8a>
 800d682:	2300      	movs	r3, #0
 800d684:	e017      	b.n	800d6b6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d686:	693b      	ldr	r3, [r7, #16]
 800d688:	3301      	adds	r3, #1
 800d68a:	613b      	str	r3, [r7, #16]
 800d68c:	693b      	ldr	r3, [r7, #16]
 800d68e:	2b0c      	cmp	r3, #12
 800d690:	d9d3      	bls.n	800d63a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	781b      	ldrb	r3, [r3, #0]
 800d696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d00a      	beq.n	800d6b4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800d69e:	697b      	ldr	r3, [r7, #20]
 800d6a0:	2bfe      	cmp	r3, #254	; 0xfe
 800d6a2:	d901      	bls.n	800d6a8 <pick_lfn+0xac>
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	e006      	b.n	800d6b6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	005b      	lsls	r3, r3, #1
 800d6ac:	687a      	ldr	r2, [r7, #4]
 800d6ae:	4413      	add	r3, r2
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800d6b4:	2301      	movs	r3, #1
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	3718      	adds	r7, #24
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}
 800d6be:	bf00      	nop
 800d6c0:	08011a64 	.word	0x08011a64

0800d6c4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b088      	sub	sp, #32
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	60f8      	str	r0, [r7, #12]
 800d6cc:	60b9      	str	r1, [r7, #8]
 800d6ce:	4611      	mov	r1, r2
 800d6d0:	461a      	mov	r2, r3
 800d6d2:	460b      	mov	r3, r1
 800d6d4:	71fb      	strb	r3, [r7, #7]
 800d6d6:	4613      	mov	r3, r2
 800d6d8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	330d      	adds	r3, #13
 800d6de:	79ba      	ldrb	r2, [r7, #6]
 800d6e0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	330b      	adds	r3, #11
 800d6e6:	220f      	movs	r2, #15
 800d6e8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	330c      	adds	r3, #12
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d6f2:	68bb      	ldr	r3, [r7, #8]
 800d6f4:	331a      	adds	r3, #26
 800d6f6:	2100      	movs	r1, #0
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7fe ff56 	bl	800c5aa <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d6fe:	79fb      	ldrb	r3, [r7, #7]
 800d700:	1e5a      	subs	r2, r3, #1
 800d702:	4613      	mov	r3, r2
 800d704:	005b      	lsls	r3, r3, #1
 800d706:	4413      	add	r3, r2
 800d708:	009b      	lsls	r3, r3, #2
 800d70a:	4413      	add	r3, r2
 800d70c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d70e:	2300      	movs	r3, #0
 800d710:	82fb      	strh	r3, [r7, #22]
 800d712:	2300      	movs	r3, #0
 800d714:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d716:	8afb      	ldrh	r3, [r7, #22]
 800d718:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d71c:	4293      	cmp	r3, r2
 800d71e:	d007      	beq.n	800d730 <put_lfn+0x6c>
 800d720:	69fb      	ldr	r3, [r7, #28]
 800d722:	1c5a      	adds	r2, r3, #1
 800d724:	61fa      	str	r2, [r7, #28]
 800d726:	005b      	lsls	r3, r3, #1
 800d728:	68fa      	ldr	r2, [r7, #12]
 800d72a:	4413      	add	r3, r2
 800d72c:	881b      	ldrh	r3, [r3, #0]
 800d72e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d730:	4a17      	ldr	r2, [pc, #92]	; (800d790 <put_lfn+0xcc>)
 800d732:	69bb      	ldr	r3, [r7, #24]
 800d734:	4413      	add	r3, r2
 800d736:	781b      	ldrb	r3, [r3, #0]
 800d738:	461a      	mov	r2, r3
 800d73a:	68bb      	ldr	r3, [r7, #8]
 800d73c:	4413      	add	r3, r2
 800d73e:	8afa      	ldrh	r2, [r7, #22]
 800d740:	4611      	mov	r1, r2
 800d742:	4618      	mov	r0, r3
 800d744:	f7fe ff31 	bl	800c5aa <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d748:	8afb      	ldrh	r3, [r7, #22]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d102      	bne.n	800d754 <put_lfn+0x90>
 800d74e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d752:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d754:	69bb      	ldr	r3, [r7, #24]
 800d756:	3301      	adds	r3, #1
 800d758:	61bb      	str	r3, [r7, #24]
 800d75a:	69bb      	ldr	r3, [r7, #24]
 800d75c:	2b0c      	cmp	r3, #12
 800d75e:	d9da      	bls.n	800d716 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d760:	8afb      	ldrh	r3, [r7, #22]
 800d762:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d766:	4293      	cmp	r3, r2
 800d768:	d006      	beq.n	800d778 <put_lfn+0xb4>
 800d76a:	69fb      	ldr	r3, [r7, #28]
 800d76c:	005b      	lsls	r3, r3, #1
 800d76e:	68fa      	ldr	r2, [r7, #12]
 800d770:	4413      	add	r3, r2
 800d772:	881b      	ldrh	r3, [r3, #0]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d103      	bne.n	800d780 <put_lfn+0xbc>
 800d778:	79fb      	ldrb	r3, [r7, #7]
 800d77a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d77e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	79fa      	ldrb	r2, [r7, #7]
 800d784:	701a      	strb	r2, [r3, #0]
}
 800d786:	bf00      	nop
 800d788:	3720      	adds	r7, #32
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}
 800d78e:	bf00      	nop
 800d790:	08011a64 	.word	0x08011a64

0800d794 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b08c      	sub	sp, #48	; 0x30
 800d798:	af00      	add	r7, sp, #0
 800d79a:	60f8      	str	r0, [r7, #12]
 800d79c:	60b9      	str	r1, [r7, #8]
 800d79e:	607a      	str	r2, [r7, #4]
 800d7a0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d7a2:	220b      	movs	r2, #11
 800d7a4:	68b9      	ldr	r1, [r7, #8]
 800d7a6:	68f8      	ldr	r0, [r7, #12]
 800d7a8:	f7fe ff46 	bl	800c638 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	2b05      	cmp	r3, #5
 800d7b0:	d929      	bls.n	800d806 <gen_numname+0x72>
		sr = seq;
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d7b6:	e020      	b.n	800d7fa <gen_numname+0x66>
			wc = *lfn++;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	1c9a      	adds	r2, r3, #2
 800d7bc:	607a      	str	r2, [r7, #4]
 800d7be:	881b      	ldrh	r3, [r3, #0]
 800d7c0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	62bb      	str	r3, [r7, #40]	; 0x28
 800d7c6:	e015      	b.n	800d7f4 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800d7c8:	69fb      	ldr	r3, [r7, #28]
 800d7ca:	005a      	lsls	r2, r3, #1
 800d7cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d7ce:	f003 0301 	and.w	r3, r3, #1
 800d7d2:	4413      	add	r3, r2
 800d7d4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d7d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d7d8:	085b      	lsrs	r3, r3, #1
 800d7da:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d7dc:	69fb      	ldr	r3, [r7, #28]
 800d7de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d003      	beq.n	800d7ee <gen_numname+0x5a>
 800d7e6:	69fa      	ldr	r2, [r7, #28]
 800d7e8:	4b30      	ldr	r3, [pc, #192]	; (800d8ac <gen_numname+0x118>)
 800d7ea:	4053      	eors	r3, r2
 800d7ec:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f0:	3301      	adds	r3, #1
 800d7f2:	62bb      	str	r3, [r7, #40]	; 0x28
 800d7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f6:	2b0f      	cmp	r3, #15
 800d7f8:	d9e6      	bls.n	800d7c8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	881b      	ldrh	r3, [r3, #0]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d1da      	bne.n	800d7b8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d802:	69fb      	ldr	r3, [r7, #28]
 800d804:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d806:	2307      	movs	r3, #7
 800d808:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	b2db      	uxtb	r3, r3
 800d80e:	f003 030f 	and.w	r3, r3, #15
 800d812:	b2db      	uxtb	r3, r3
 800d814:	3330      	adds	r3, #48	; 0x30
 800d816:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800d81a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d81e:	2b39      	cmp	r3, #57	; 0x39
 800d820:	d904      	bls.n	800d82c <gen_numname+0x98>
 800d822:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d826:	3307      	adds	r3, #7
 800d828:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800d82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d82e:	1e5a      	subs	r2, r3, #1
 800d830:	62ba      	str	r2, [r7, #40]	; 0x28
 800d832:	3330      	adds	r3, #48	; 0x30
 800d834:	443b      	add	r3, r7
 800d836:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d83a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	091b      	lsrs	r3, r3, #4
 800d842:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d1df      	bne.n	800d80a <gen_numname+0x76>
	ns[i] = '~';
 800d84a:	f107 0214 	add.w	r2, r7, #20
 800d84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d850:	4413      	add	r3, r2
 800d852:	227e      	movs	r2, #126	; 0x7e
 800d854:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d856:	2300      	movs	r3, #0
 800d858:	627b      	str	r3, [r7, #36]	; 0x24
 800d85a:	e002      	b.n	800d862 <gen_numname+0xce>
 800d85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d85e:	3301      	adds	r3, #1
 800d860:	627b      	str	r3, [r7, #36]	; 0x24
 800d862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d866:	429a      	cmp	r2, r3
 800d868:	d205      	bcs.n	800d876 <gen_numname+0xe2>
 800d86a:	68fa      	ldr	r2, [r7, #12]
 800d86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d86e:	4413      	add	r3, r2
 800d870:	781b      	ldrb	r3, [r3, #0]
 800d872:	2b20      	cmp	r3, #32
 800d874:	d1f2      	bne.n	800d85c <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d878:	2b07      	cmp	r3, #7
 800d87a:	d807      	bhi.n	800d88c <gen_numname+0xf8>
 800d87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d87e:	1c5a      	adds	r2, r3, #1
 800d880:	62ba      	str	r2, [r7, #40]	; 0x28
 800d882:	3330      	adds	r3, #48	; 0x30
 800d884:	443b      	add	r3, r7
 800d886:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d88a:	e000      	b.n	800d88e <gen_numname+0xfa>
 800d88c:	2120      	movs	r1, #32
 800d88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d890:	1c5a      	adds	r2, r3, #1
 800d892:	627a      	str	r2, [r7, #36]	; 0x24
 800d894:	68fa      	ldr	r2, [r7, #12]
 800d896:	4413      	add	r3, r2
 800d898:	460a      	mov	r2, r1
 800d89a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d89e:	2b07      	cmp	r3, #7
 800d8a0:	d9e9      	bls.n	800d876 <gen_numname+0xe2>
}
 800d8a2:	bf00      	nop
 800d8a4:	bf00      	nop
 800d8a6:	3730      	adds	r7, #48	; 0x30
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}
 800d8ac:	00011021 	.word	0x00011021

0800d8b0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	b085      	sub	sp, #20
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d8bc:	230b      	movs	r3, #11
 800d8be:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d8c0:	7bfb      	ldrb	r3, [r7, #15]
 800d8c2:	b2da      	uxtb	r2, r3
 800d8c4:	0852      	lsrs	r2, r2, #1
 800d8c6:	01db      	lsls	r3, r3, #7
 800d8c8:	4313      	orrs	r3, r2
 800d8ca:	b2da      	uxtb	r2, r3
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	1c59      	adds	r1, r3, #1
 800d8d0:	6079      	str	r1, [r7, #4]
 800d8d2:	781b      	ldrb	r3, [r3, #0]
 800d8d4:	4413      	add	r3, r2
 800d8d6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	3b01      	subs	r3, #1
 800d8dc:	60bb      	str	r3, [r7, #8]
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d1ed      	bne.n	800d8c0 <sum_sfn+0x10>
	return sum;
 800d8e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	3714      	adds	r7, #20
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f0:	4770      	bx	lr

0800d8f2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800d8f2:	b580      	push	{r7, lr}
 800d8f4:	b086      	sub	sp, #24
 800d8f6:	af00      	add	r7, sp, #0
 800d8f8:	6078      	str	r0, [r7, #4]
 800d8fa:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800d8fc:	2304      	movs	r3, #4
 800d8fe:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800d906:	23ff      	movs	r3, #255	; 0xff
 800d908:	757b      	strb	r3, [r7, #21]
 800d90a:	23ff      	movs	r3, #255	; 0xff
 800d90c:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800d90e:	e081      	b.n	800da14 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	69db      	ldr	r3, [r3, #28]
 800d914:	4619      	mov	r1, r3
 800d916:	6938      	ldr	r0, [r7, #16]
 800d918:	f7ff f8bc 	bl	800ca94 <move_window>
 800d91c:	4603      	mov	r3, r0
 800d91e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d920:	7dfb      	ldrb	r3, [r7, #23]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d17c      	bne.n	800da20 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6a1b      	ldr	r3, [r3, #32]
 800d92a:	781b      	ldrb	r3, [r3, #0]
 800d92c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800d92e:	7dbb      	ldrb	r3, [r7, #22]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d102      	bne.n	800d93a <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800d934:	2304      	movs	r3, #4
 800d936:	75fb      	strb	r3, [r7, #23]
 800d938:	e077      	b.n	800da2a <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6a1b      	ldr	r3, [r3, #32]
 800d93e:	330b      	adds	r3, #11
 800d940:	781b      	ldrb	r3, [r3, #0]
 800d942:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d946:	73fb      	strb	r3, [r7, #15]
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	7bfa      	ldrb	r2, [r7, #15]
 800d94c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800d94e:	7dbb      	ldrb	r3, [r7, #22]
 800d950:	2be5      	cmp	r3, #229	; 0xe5
 800d952:	d00e      	beq.n	800d972 <dir_read+0x80>
 800d954:	7dbb      	ldrb	r3, [r7, #22]
 800d956:	2b2e      	cmp	r3, #46	; 0x2e
 800d958:	d00b      	beq.n	800d972 <dir_read+0x80>
 800d95a:	7bfb      	ldrb	r3, [r7, #15]
 800d95c:	f023 0320 	bic.w	r3, r3, #32
 800d960:	2b08      	cmp	r3, #8
 800d962:	bf0c      	ite	eq
 800d964:	2301      	moveq	r3, #1
 800d966:	2300      	movne	r3, #0
 800d968:	b2db      	uxtb	r3, r3
 800d96a:	461a      	mov	r2, r3
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	4293      	cmp	r3, r2
 800d970:	d002      	beq.n	800d978 <dir_read+0x86>
				ord = 0xFF;
 800d972:	23ff      	movs	r3, #255	; 0xff
 800d974:	757b      	strb	r3, [r7, #21]
 800d976:	e044      	b.n	800da02 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800d978:	7bfb      	ldrb	r3, [r7, #15]
 800d97a:	2b0f      	cmp	r3, #15
 800d97c:	d12f      	bne.n	800d9de <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800d97e:	7dbb      	ldrb	r3, [r7, #22]
 800d980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d984:	2b00      	cmp	r3, #0
 800d986:	d00d      	beq.n	800d9a4 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	6a1b      	ldr	r3, [r3, #32]
 800d98c:	7b5b      	ldrb	r3, [r3, #13]
 800d98e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800d990:	7dbb      	ldrb	r3, [r7, #22]
 800d992:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d996:	75bb      	strb	r3, [r7, #22]
 800d998:	7dbb      	ldrb	r3, [r7, #22]
 800d99a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	695a      	ldr	r2, [r3, #20]
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d9a4:	7dba      	ldrb	r2, [r7, #22]
 800d9a6:	7d7b      	ldrb	r3, [r7, #21]
 800d9a8:	429a      	cmp	r2, r3
 800d9aa:	d115      	bne.n	800d9d8 <dir_read+0xe6>
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6a1b      	ldr	r3, [r3, #32]
 800d9b0:	330d      	adds	r3, #13
 800d9b2:	781b      	ldrb	r3, [r3, #0]
 800d9b4:	7d3a      	ldrb	r2, [r7, #20]
 800d9b6:	429a      	cmp	r2, r3
 800d9b8:	d10e      	bne.n	800d9d8 <dir_read+0xe6>
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	68da      	ldr	r2, [r3, #12]
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6a1b      	ldr	r3, [r3, #32]
 800d9c2:	4619      	mov	r1, r3
 800d9c4:	4610      	mov	r0, r2
 800d9c6:	f7ff fe19 	bl	800d5fc <pick_lfn>
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d003      	beq.n	800d9d8 <dir_read+0xe6>
 800d9d0:	7d7b      	ldrb	r3, [r7, #21]
 800d9d2:	3b01      	subs	r3, #1
 800d9d4:	b2db      	uxtb	r3, r3
 800d9d6:	e000      	b.n	800d9da <dir_read+0xe8>
 800d9d8:	23ff      	movs	r3, #255	; 0xff
 800d9da:	757b      	strb	r3, [r7, #21]
 800d9dc:	e011      	b.n	800da02 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800d9de:	7d7b      	ldrb	r3, [r7, #21]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d109      	bne.n	800d9f8 <dir_read+0x106>
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	6a1b      	ldr	r3, [r3, #32]
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f7ff ff61 	bl	800d8b0 <sum_sfn>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	461a      	mov	r2, r3
 800d9f2:	7d3b      	ldrb	r3, [r7, #20]
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	d015      	beq.n	800da24 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d9fe:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800da00:	e010      	b.n	800da24 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800da02:	2100      	movs	r1, #0
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f7ff fc3e 	bl	800d286 <dir_next>
 800da0a:	4603      	mov	r3, r0
 800da0c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800da0e:	7dfb      	ldrb	r3, [r7, #23]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d109      	bne.n	800da28 <dir_read+0x136>
	while (dp->sect) {
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	69db      	ldr	r3, [r3, #28]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	f47f af79 	bne.w	800d910 <dir_read+0x1e>
 800da1e:	e004      	b.n	800da2a <dir_read+0x138>
		if (res != FR_OK) break;
 800da20:	bf00      	nop
 800da22:	e002      	b.n	800da2a <dir_read+0x138>
					break;
 800da24:	bf00      	nop
 800da26:	e000      	b.n	800da2a <dir_read+0x138>
		if (res != FR_OK) break;
 800da28:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800da2a:	7dfb      	ldrb	r3, [r7, #23]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d002      	beq.n	800da36 <dir_read+0x144>
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2200      	movs	r2, #0
 800da34:	61da      	str	r2, [r3, #28]
	return res;
 800da36:	7dfb      	ldrb	r3, [r7, #23]
}
 800da38:	4618      	mov	r0, r3
 800da3a:	3718      	adds	r7, #24
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}

0800da40 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b086      	sub	sp, #24
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800da4e:	2100      	movs	r1, #0
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f7ff fb9d 	bl	800d190 <dir_sdi>
 800da56:	4603      	mov	r3, r0
 800da58:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800da5a:	7dfb      	ldrb	r3, [r7, #23]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d001      	beq.n	800da64 <dir_find+0x24>
 800da60:	7dfb      	ldrb	r3, [r7, #23]
 800da62:	e0a9      	b.n	800dbb8 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800da64:	23ff      	movs	r3, #255	; 0xff
 800da66:	753b      	strb	r3, [r7, #20]
 800da68:	7d3b      	ldrb	r3, [r7, #20]
 800da6a:	757b      	strb	r3, [r7, #21]
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800da72:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	69db      	ldr	r3, [r3, #28]
 800da78:	4619      	mov	r1, r3
 800da7a:	6938      	ldr	r0, [r7, #16]
 800da7c:	f7ff f80a 	bl	800ca94 <move_window>
 800da80:	4603      	mov	r3, r0
 800da82:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800da84:	7dfb      	ldrb	r3, [r7, #23]
 800da86:	2b00      	cmp	r3, #0
 800da88:	f040 8090 	bne.w	800dbac <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	6a1b      	ldr	r3, [r3, #32]
 800da90:	781b      	ldrb	r3, [r3, #0]
 800da92:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800da94:	7dbb      	ldrb	r3, [r7, #22]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d102      	bne.n	800daa0 <dir_find+0x60>
 800da9a:	2304      	movs	r3, #4
 800da9c:	75fb      	strb	r3, [r7, #23]
 800da9e:	e08a      	b.n	800dbb6 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6a1b      	ldr	r3, [r3, #32]
 800daa4:	330b      	adds	r3, #11
 800daa6:	781b      	ldrb	r3, [r3, #0]
 800daa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800daac:	73fb      	strb	r3, [r7, #15]
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	7bfa      	ldrb	r2, [r7, #15]
 800dab2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800dab4:	7dbb      	ldrb	r3, [r7, #22]
 800dab6:	2be5      	cmp	r3, #229	; 0xe5
 800dab8:	d007      	beq.n	800daca <dir_find+0x8a>
 800daba:	7bfb      	ldrb	r3, [r7, #15]
 800dabc:	f003 0308 	and.w	r3, r3, #8
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d009      	beq.n	800dad8 <dir_find+0x98>
 800dac4:	7bfb      	ldrb	r3, [r7, #15]
 800dac6:	2b0f      	cmp	r3, #15
 800dac8:	d006      	beq.n	800dad8 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800daca:	23ff      	movs	r3, #255	; 0xff
 800dacc:	757b      	strb	r3, [r7, #21]
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dad4:	631a      	str	r2, [r3, #48]	; 0x30
 800dad6:	e05e      	b.n	800db96 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800dad8:	7bfb      	ldrb	r3, [r7, #15]
 800dada:	2b0f      	cmp	r3, #15
 800dadc:	d136      	bne.n	800db4c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d154      	bne.n	800db96 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800daec:	7dbb      	ldrb	r3, [r7, #22]
 800daee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d00d      	beq.n	800db12 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6a1b      	ldr	r3, [r3, #32]
 800dafa:	7b5b      	ldrb	r3, [r3, #13]
 800dafc:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800dafe:	7dbb      	ldrb	r3, [r7, #22]
 800db00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db04:	75bb      	strb	r3, [r7, #22]
 800db06:	7dbb      	ldrb	r3, [r7, #22]
 800db08:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	695a      	ldr	r2, [r3, #20]
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800db12:	7dba      	ldrb	r2, [r7, #22]
 800db14:	7d7b      	ldrb	r3, [r7, #21]
 800db16:	429a      	cmp	r2, r3
 800db18:	d115      	bne.n	800db46 <dir_find+0x106>
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6a1b      	ldr	r3, [r3, #32]
 800db1e:	330d      	adds	r3, #13
 800db20:	781b      	ldrb	r3, [r3, #0]
 800db22:	7d3a      	ldrb	r2, [r7, #20]
 800db24:	429a      	cmp	r2, r3
 800db26:	d10e      	bne.n	800db46 <dir_find+0x106>
 800db28:	693b      	ldr	r3, [r7, #16]
 800db2a:	68da      	ldr	r2, [r3, #12]
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	6a1b      	ldr	r3, [r3, #32]
 800db30:	4619      	mov	r1, r3
 800db32:	4610      	mov	r0, r2
 800db34:	f7ff fcf2 	bl	800d51c <cmp_lfn>
 800db38:	4603      	mov	r3, r0
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d003      	beq.n	800db46 <dir_find+0x106>
 800db3e:	7d7b      	ldrb	r3, [r7, #21]
 800db40:	3b01      	subs	r3, #1
 800db42:	b2db      	uxtb	r3, r3
 800db44:	e000      	b.n	800db48 <dir_find+0x108>
 800db46:	23ff      	movs	r3, #255	; 0xff
 800db48:	757b      	strb	r3, [r7, #21]
 800db4a:	e024      	b.n	800db96 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800db4c:	7d7b      	ldrb	r3, [r7, #21]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d109      	bne.n	800db66 <dir_find+0x126>
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	6a1b      	ldr	r3, [r3, #32]
 800db56:	4618      	mov	r0, r3
 800db58:	f7ff feaa 	bl	800d8b0 <sum_sfn>
 800db5c:	4603      	mov	r3, r0
 800db5e:	461a      	mov	r2, r3
 800db60:	7d3b      	ldrb	r3, [r7, #20]
 800db62:	4293      	cmp	r3, r2
 800db64:	d024      	beq.n	800dbb0 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800db6c:	f003 0301 	and.w	r3, r3, #1
 800db70:	2b00      	cmp	r3, #0
 800db72:	d10a      	bne.n	800db8a <dir_find+0x14a>
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	6a18      	ldr	r0, [r3, #32]
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	3324      	adds	r3, #36	; 0x24
 800db7c:	220b      	movs	r2, #11
 800db7e:	4619      	mov	r1, r3
 800db80:	f7fe fd96 	bl	800c6b0 <mem_cmp>
 800db84:	4603      	mov	r3, r0
 800db86:	2b00      	cmp	r3, #0
 800db88:	d014      	beq.n	800dbb4 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800db8a:	23ff      	movs	r3, #255	; 0xff
 800db8c:	757b      	strb	r3, [r7, #21]
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800db94:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800db96:	2100      	movs	r1, #0
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	f7ff fb74 	bl	800d286 <dir_next>
 800db9e:	4603      	mov	r3, r0
 800dba0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800dba2:	7dfb      	ldrb	r3, [r7, #23]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	f43f af65 	beq.w	800da74 <dir_find+0x34>
 800dbaa:	e004      	b.n	800dbb6 <dir_find+0x176>
		if (res != FR_OK) break;
 800dbac:	bf00      	nop
 800dbae:	e002      	b.n	800dbb6 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800dbb0:	bf00      	nop
 800dbb2:	e000      	b.n	800dbb6 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800dbb4:	bf00      	nop

	return res;
 800dbb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbb8:	4618      	mov	r0, r3
 800dbba:	3718      	adds	r7, #24
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}

0800dbc0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b08c      	sub	sp, #48	; 0x30
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dbd4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d001      	beq.n	800dbe0 <dir_register+0x20>
 800dbdc:	2306      	movs	r3, #6
 800dbde:	e0e0      	b.n	800dda2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	627b      	str	r3, [r7, #36]	; 0x24
 800dbe4:	e002      	b.n	800dbec <dir_register+0x2c>
 800dbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe8:	3301      	adds	r3, #1
 800dbea:	627b      	str	r3, [r7, #36]	; 0x24
 800dbec:	69fb      	ldr	r3, [r7, #28]
 800dbee:	68da      	ldr	r2, [r3, #12]
 800dbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf2:	005b      	lsls	r3, r3, #1
 800dbf4:	4413      	add	r3, r2
 800dbf6:	881b      	ldrh	r3, [r3, #0]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d1f4      	bne.n	800dbe6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800dc02:	f107 030c 	add.w	r3, r7, #12
 800dc06:	220c      	movs	r2, #12
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f7fe fd15 	bl	800c638 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800dc0e:	7dfb      	ldrb	r3, [r7, #23]
 800dc10:	f003 0301 	and.w	r3, r3, #1
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d032      	beq.n	800dc7e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2240      	movs	r2, #64	; 0x40
 800dc1c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800dc20:	2301      	movs	r3, #1
 800dc22:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc24:	e016      	b.n	800dc54 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800dc2c:	69fb      	ldr	r3, [r7, #28]
 800dc2e:	68da      	ldr	r2, [r3, #12]
 800dc30:	f107 010c 	add.w	r1, r7, #12
 800dc34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc36:	f7ff fdad 	bl	800d794 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f7ff ff00 	bl	800da40 <dir_find>
 800dc40:	4603      	mov	r3, r0
 800dc42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800dc46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d106      	bne.n	800dc5c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800dc4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc50:	3301      	adds	r3, #1
 800dc52:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc56:	2b63      	cmp	r3, #99	; 0x63
 800dc58:	d9e5      	bls.n	800dc26 <dir_register+0x66>
 800dc5a:	e000      	b.n	800dc5e <dir_register+0x9e>
			if (res != FR_OK) break;
 800dc5c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800dc5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc60:	2b64      	cmp	r3, #100	; 0x64
 800dc62:	d101      	bne.n	800dc68 <dir_register+0xa8>
 800dc64:	2307      	movs	r3, #7
 800dc66:	e09c      	b.n	800dda2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800dc68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc6c:	2b04      	cmp	r3, #4
 800dc6e:	d002      	beq.n	800dc76 <dir_register+0xb6>
 800dc70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc74:	e095      	b.n	800dda2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800dc76:	7dfa      	ldrb	r2, [r7, #23]
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800dc7e:	7dfb      	ldrb	r3, [r7, #23]
 800dc80:	f003 0302 	and.w	r3, r3, #2
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d007      	beq.n	800dc98 <dir_register+0xd8>
 800dc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc8a:	330c      	adds	r3, #12
 800dc8c:	4a47      	ldr	r2, [pc, #284]	; (800ddac <dir_register+0x1ec>)
 800dc8e:	fba2 2303 	umull	r2, r3, r2, r3
 800dc92:	089b      	lsrs	r3, r3, #2
 800dc94:	3301      	adds	r3, #1
 800dc96:	e000      	b.n	800dc9a <dir_register+0xda>
 800dc98:	2301      	movs	r3, #1
 800dc9a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800dc9c:	6a39      	ldr	r1, [r7, #32]
 800dc9e:	6878      	ldr	r0, [r7, #4]
 800dca0:	f7ff fbb6 	bl	800d410 <dir_alloc>
 800dca4:	4603      	mov	r3, r0
 800dca6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800dcaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d148      	bne.n	800dd44 <dir_register+0x184>
 800dcb2:	6a3b      	ldr	r3, [r7, #32]
 800dcb4:	3b01      	subs	r3, #1
 800dcb6:	623b      	str	r3, [r7, #32]
 800dcb8:	6a3b      	ldr	r3, [r7, #32]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d042      	beq.n	800dd44 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	695a      	ldr	r2, [r3, #20]
 800dcc2:	6a3b      	ldr	r3, [r7, #32]
 800dcc4:	015b      	lsls	r3, r3, #5
 800dcc6:	1ad3      	subs	r3, r2, r3
 800dcc8:	4619      	mov	r1, r3
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	f7ff fa60 	bl	800d190 <dir_sdi>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800dcd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d132      	bne.n	800dd44 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	3324      	adds	r3, #36	; 0x24
 800dce2:	4618      	mov	r0, r3
 800dce4:	f7ff fde4 	bl	800d8b0 <sum_sfn>
 800dce8:	4603      	mov	r3, r0
 800dcea:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	69db      	ldr	r3, [r3, #28]
 800dcf0:	4619      	mov	r1, r3
 800dcf2:	69f8      	ldr	r0, [r7, #28]
 800dcf4:	f7fe fece 	bl	800ca94 <move_window>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800dcfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d11d      	bne.n	800dd42 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800dd06:	69fb      	ldr	r3, [r7, #28]
 800dd08:	68d8      	ldr	r0, [r3, #12]
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	6a19      	ldr	r1, [r3, #32]
 800dd0e:	6a3b      	ldr	r3, [r7, #32]
 800dd10:	b2da      	uxtb	r2, r3
 800dd12:	7efb      	ldrb	r3, [r7, #27]
 800dd14:	f7ff fcd6 	bl	800d6c4 <put_lfn>
				fs->wflag = 1;
 800dd18:	69fb      	ldr	r3, [r7, #28]
 800dd1a:	2201      	movs	r2, #1
 800dd1c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800dd1e:	2100      	movs	r1, #0
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f7ff fab0 	bl	800d286 <dir_next>
 800dd26:	4603      	mov	r3, r0
 800dd28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800dd2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d107      	bne.n	800dd44 <dir_register+0x184>
 800dd34:	6a3b      	ldr	r3, [r7, #32]
 800dd36:	3b01      	subs	r3, #1
 800dd38:	623b      	str	r3, [r7, #32]
 800dd3a:	6a3b      	ldr	r3, [r7, #32]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d1d5      	bne.n	800dcec <dir_register+0x12c>
 800dd40:	e000      	b.n	800dd44 <dir_register+0x184>
				if (res != FR_OK) break;
 800dd42:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800dd44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d128      	bne.n	800dd9e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	69db      	ldr	r3, [r3, #28]
 800dd50:	4619      	mov	r1, r3
 800dd52:	69f8      	ldr	r0, [r7, #28]
 800dd54:	f7fe fe9e 	bl	800ca94 <move_window>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800dd5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d11b      	bne.n	800dd9e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6a1b      	ldr	r3, [r3, #32]
 800dd6a:	2220      	movs	r2, #32
 800dd6c:	2100      	movs	r1, #0
 800dd6e:	4618      	mov	r0, r3
 800dd70:	f7fe fc83 	bl	800c67a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	6a18      	ldr	r0, [r3, #32]
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	3324      	adds	r3, #36	; 0x24
 800dd7c:	220b      	movs	r2, #11
 800dd7e:	4619      	mov	r1, r3
 800dd80:	f7fe fc5a 	bl	800c638 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6a1b      	ldr	r3, [r3, #32]
 800dd8e:	330c      	adds	r3, #12
 800dd90:	f002 0218 	and.w	r2, r2, #24
 800dd94:	b2d2      	uxtb	r2, r2
 800dd96:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800dd98:	69fb      	ldr	r3, [r7, #28]
 800dd9a:	2201      	movs	r2, #1
 800dd9c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800dd9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800dda2:	4618      	mov	r0, r3
 800dda4:	3730      	adds	r7, #48	; 0x30
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bd80      	pop	{r7, pc}
 800ddaa:	bf00      	nop
 800ddac:	4ec4ec4f 	.word	0x4ec4ec4f

0800ddb0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b088      	sub	sp, #32
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	69db      	ldr	r3, [r3, #28]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	f000 80c9 	beq.w	800df62 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ddd8:	d032      	beq.n	800de40 <get_fileinfo+0x90>
			i = j = 0;
 800ddda:	2300      	movs	r3, #0
 800dddc:	61bb      	str	r3, [r7, #24]
 800ddde:	69bb      	ldr	r3, [r7, #24]
 800dde0:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800dde2:	e01b      	b.n	800de1c <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800dde4:	89fb      	ldrh	r3, [r7, #14]
 800dde6:	2100      	movs	r1, #0
 800dde8:	4618      	mov	r0, r3
 800ddea:	f001 fb5d 	bl	800f4a8 <ff_convert>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800ddf2:	89fb      	ldrh	r3, [r7, #14]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d102      	bne.n	800ddfe <get_fileinfo+0x4e>
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	61fb      	str	r3, [r7, #28]
 800ddfc:	e01a      	b.n	800de34 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800ddfe:	69fb      	ldr	r3, [r7, #28]
 800de00:	2bfe      	cmp	r3, #254	; 0xfe
 800de02:	d902      	bls.n	800de0a <get_fileinfo+0x5a>
 800de04:	2300      	movs	r3, #0
 800de06:	61fb      	str	r3, [r7, #28]
 800de08:	e014      	b.n	800de34 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800de0a:	69fb      	ldr	r3, [r7, #28]
 800de0c:	1c5a      	adds	r2, r3, #1
 800de0e:	61fa      	str	r2, [r7, #28]
 800de10:	89fa      	ldrh	r2, [r7, #14]
 800de12:	b2d1      	uxtb	r1, r2
 800de14:	683a      	ldr	r2, [r7, #0]
 800de16:	4413      	add	r3, r2
 800de18:	460a      	mov	r2, r1
 800de1a:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800de1c:	693b      	ldr	r3, [r7, #16]
 800de1e:	68da      	ldr	r2, [r3, #12]
 800de20:	69bb      	ldr	r3, [r7, #24]
 800de22:	1c59      	adds	r1, r3, #1
 800de24:	61b9      	str	r1, [r7, #24]
 800de26:	005b      	lsls	r3, r3, #1
 800de28:	4413      	add	r3, r2
 800de2a:	881b      	ldrh	r3, [r3, #0]
 800de2c:	81fb      	strh	r3, [r7, #14]
 800de2e:	89fb      	ldrh	r3, [r7, #14]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d1d7      	bne.n	800dde4 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800de34:	683a      	ldr	r2, [r7, #0]
 800de36:	69fb      	ldr	r3, [r7, #28]
 800de38:	4413      	add	r3, r2
 800de3a:	3316      	adds	r3, #22
 800de3c:	2200      	movs	r2, #0
 800de3e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800de40:	2300      	movs	r3, #0
 800de42:	61bb      	str	r3, [r7, #24]
 800de44:	69bb      	ldr	r3, [r7, #24]
 800de46:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800de48:	683a      	ldr	r2, [r7, #0]
 800de4a:	69fb      	ldr	r3, [r7, #28]
 800de4c:	4413      	add	r3, r2
 800de4e:	3316      	adds	r3, #22
 800de50:	781b      	ldrb	r3, [r3, #0]
 800de52:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800de54:	e04c      	b.n	800def0 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	6a1a      	ldr	r2, [r3, #32]
 800de5a:	69fb      	ldr	r3, [r7, #28]
 800de5c:	1c59      	adds	r1, r3, #1
 800de5e:	61f9      	str	r1, [r7, #28]
 800de60:	4413      	add	r3, r2
 800de62:	781b      	ldrb	r3, [r3, #0]
 800de64:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800de66:	7dfb      	ldrb	r3, [r7, #23]
 800de68:	2b20      	cmp	r3, #32
 800de6a:	d100      	bne.n	800de6e <get_fileinfo+0xbe>
 800de6c:	e040      	b.n	800def0 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800de6e:	7dfb      	ldrb	r3, [r7, #23]
 800de70:	2b05      	cmp	r3, #5
 800de72:	d101      	bne.n	800de78 <get_fileinfo+0xc8>
 800de74:	23e5      	movs	r3, #229	; 0xe5
 800de76:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800de78:	69fb      	ldr	r3, [r7, #28]
 800de7a:	2b09      	cmp	r3, #9
 800de7c:	d10f      	bne.n	800de9e <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800de7e:	89bb      	ldrh	r3, [r7, #12]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d105      	bne.n	800de90 <get_fileinfo+0xe0>
 800de84:	683a      	ldr	r2, [r7, #0]
 800de86:	69bb      	ldr	r3, [r7, #24]
 800de88:	4413      	add	r3, r2
 800de8a:	3316      	adds	r3, #22
 800de8c:	222e      	movs	r2, #46	; 0x2e
 800de8e:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800de90:	69bb      	ldr	r3, [r7, #24]
 800de92:	1c5a      	adds	r2, r3, #1
 800de94:	61ba      	str	r2, [r7, #24]
 800de96:	683a      	ldr	r2, [r7, #0]
 800de98:	4413      	add	r3, r2
 800de9a:	222e      	movs	r2, #46	; 0x2e
 800de9c:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800de9e:	683a      	ldr	r2, [r7, #0]
 800dea0:	69bb      	ldr	r3, [r7, #24]
 800dea2:	4413      	add	r3, r2
 800dea4:	3309      	adds	r3, #9
 800dea6:	7dfa      	ldrb	r2, [r7, #23]
 800dea8:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800deaa:	89bb      	ldrh	r3, [r7, #12]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d11c      	bne.n	800deea <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800deb0:	7dfb      	ldrb	r3, [r7, #23]
 800deb2:	2b40      	cmp	r3, #64	; 0x40
 800deb4:	d913      	bls.n	800dede <get_fileinfo+0x12e>
 800deb6:	7dfb      	ldrb	r3, [r7, #23]
 800deb8:	2b5a      	cmp	r3, #90	; 0x5a
 800deba:	d810      	bhi.n	800dede <get_fileinfo+0x12e>
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6a1b      	ldr	r3, [r3, #32]
 800dec0:	330c      	adds	r3, #12
 800dec2:	781b      	ldrb	r3, [r3, #0]
 800dec4:	461a      	mov	r2, r3
 800dec6:	69fb      	ldr	r3, [r7, #28]
 800dec8:	2b08      	cmp	r3, #8
 800deca:	d901      	bls.n	800ded0 <get_fileinfo+0x120>
 800decc:	2310      	movs	r3, #16
 800dece:	e000      	b.n	800ded2 <get_fileinfo+0x122>
 800ded0:	2308      	movs	r3, #8
 800ded2:	4013      	ands	r3, r2
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d002      	beq.n	800dede <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800ded8:	7dfb      	ldrb	r3, [r7, #23]
 800deda:	3320      	adds	r3, #32
 800dedc:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800dede:	683a      	ldr	r2, [r7, #0]
 800dee0:	69bb      	ldr	r3, [r7, #24]
 800dee2:	4413      	add	r3, r2
 800dee4:	3316      	adds	r3, #22
 800dee6:	7dfa      	ldrb	r2, [r7, #23]
 800dee8:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800deea:	69bb      	ldr	r3, [r7, #24]
 800deec:	3301      	adds	r3, #1
 800deee:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800def0:	69fb      	ldr	r3, [r7, #28]
 800def2:	2b0a      	cmp	r3, #10
 800def4:	d9af      	bls.n	800de56 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800def6:	89bb      	ldrh	r3, [r7, #12]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d10d      	bne.n	800df18 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800defc:	683a      	ldr	r2, [r7, #0]
 800defe:	69bb      	ldr	r3, [r7, #24]
 800df00:	4413      	add	r3, r2
 800df02:	3316      	adds	r3, #22
 800df04:	2200      	movs	r2, #0
 800df06:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	6a1b      	ldr	r3, [r3, #32]
 800df0c:	330c      	adds	r3, #12
 800df0e:	781b      	ldrb	r3, [r3, #0]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d101      	bne.n	800df18 <get_fileinfo+0x168>
 800df14:	2300      	movs	r3, #0
 800df16:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800df18:	683a      	ldr	r2, [r7, #0]
 800df1a:	69bb      	ldr	r3, [r7, #24]
 800df1c:	4413      	add	r3, r2
 800df1e:	3309      	adds	r3, #9
 800df20:	2200      	movs	r2, #0
 800df22:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6a1b      	ldr	r3, [r3, #32]
 800df28:	7ada      	ldrb	r2, [r3, #11]
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6a1b      	ldr	r3, [r3, #32]
 800df32:	331c      	adds	r3, #28
 800df34:	4618      	mov	r0, r3
 800df36:	f7fe fb15 	bl	800c564 <ld_dword>
 800df3a:	4602      	mov	r2, r0
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6a1b      	ldr	r3, [r3, #32]
 800df44:	3316      	adds	r3, #22
 800df46:	4618      	mov	r0, r3
 800df48:	f7fe fb0c 	bl	800c564 <ld_dword>
 800df4c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800df4e:	68bb      	ldr	r3, [r7, #8]
 800df50:	b29a      	uxth	r2, r3
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	80da      	strh	r2, [r3, #6]
 800df56:	68bb      	ldr	r3, [r7, #8]
 800df58:	0c1b      	lsrs	r3, r3, #16
 800df5a:	b29a      	uxth	r2, r3
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	809a      	strh	r2, [r3, #4]
 800df60:	e000      	b.n	800df64 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800df62:	bf00      	nop
}
 800df64:	3720      	adds	r7, #32
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}
	...

0800df6c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b08a      	sub	sp, #40	; 0x28
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
 800df74:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	613b      	str	r3, [r7, #16]
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	68db      	ldr	r3, [r3, #12]
 800df82:	60fb      	str	r3, [r7, #12]
 800df84:	2300      	movs	r3, #0
 800df86:	617b      	str	r3, [r7, #20]
 800df88:	697b      	ldr	r3, [r7, #20]
 800df8a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800df8c:	69bb      	ldr	r3, [r7, #24]
 800df8e:	1c5a      	adds	r2, r3, #1
 800df90:	61ba      	str	r2, [r7, #24]
 800df92:	693a      	ldr	r2, [r7, #16]
 800df94:	4413      	add	r3, r2
 800df96:	781b      	ldrb	r3, [r3, #0]
 800df98:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800df9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df9c:	2b1f      	cmp	r3, #31
 800df9e:	d940      	bls.n	800e022 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800dfa0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dfa2:	2b2f      	cmp	r3, #47	; 0x2f
 800dfa4:	d006      	beq.n	800dfb4 <create_name+0x48>
 800dfa6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dfa8:	2b5c      	cmp	r3, #92	; 0x5c
 800dfaa:	d110      	bne.n	800dfce <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800dfac:	e002      	b.n	800dfb4 <create_name+0x48>
 800dfae:	69bb      	ldr	r3, [r7, #24]
 800dfb0:	3301      	adds	r3, #1
 800dfb2:	61bb      	str	r3, [r7, #24]
 800dfb4:	693a      	ldr	r2, [r7, #16]
 800dfb6:	69bb      	ldr	r3, [r7, #24]
 800dfb8:	4413      	add	r3, r2
 800dfba:	781b      	ldrb	r3, [r3, #0]
 800dfbc:	2b2f      	cmp	r3, #47	; 0x2f
 800dfbe:	d0f6      	beq.n	800dfae <create_name+0x42>
 800dfc0:	693a      	ldr	r2, [r7, #16]
 800dfc2:	69bb      	ldr	r3, [r7, #24]
 800dfc4:	4413      	add	r3, r2
 800dfc6:	781b      	ldrb	r3, [r3, #0]
 800dfc8:	2b5c      	cmp	r3, #92	; 0x5c
 800dfca:	d0f0      	beq.n	800dfae <create_name+0x42>
			break;
 800dfcc:	e02a      	b.n	800e024 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800dfce:	697b      	ldr	r3, [r7, #20]
 800dfd0:	2bfe      	cmp	r3, #254	; 0xfe
 800dfd2:	d901      	bls.n	800dfd8 <create_name+0x6c>
 800dfd4:	2306      	movs	r3, #6
 800dfd6:	e17d      	b.n	800e2d4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800dfd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dfda:	b2db      	uxtb	r3, r3
 800dfdc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800dfde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dfe0:	2101      	movs	r1, #1
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f001 fa60 	bl	800f4a8 <ff_convert>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800dfec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d101      	bne.n	800dff6 <create_name+0x8a>
 800dff2:	2306      	movs	r3, #6
 800dff4:	e16e      	b.n	800e2d4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800dff6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dff8:	2b7f      	cmp	r3, #127	; 0x7f
 800dffa:	d809      	bhi.n	800e010 <create_name+0xa4>
 800dffc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dffe:	4619      	mov	r1, r3
 800e000:	488d      	ldr	r0, [pc, #564]	; (800e238 <create_name+0x2cc>)
 800e002:	f7fe fb7c 	bl	800c6fe <chk_chr>
 800e006:	4603      	mov	r3, r0
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d001      	beq.n	800e010 <create_name+0xa4>
 800e00c:	2306      	movs	r3, #6
 800e00e:	e161      	b.n	800e2d4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800e010:	697b      	ldr	r3, [r7, #20]
 800e012:	1c5a      	adds	r2, r3, #1
 800e014:	617a      	str	r2, [r7, #20]
 800e016:	005b      	lsls	r3, r3, #1
 800e018:	68fa      	ldr	r2, [r7, #12]
 800e01a:	4413      	add	r3, r2
 800e01c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e01e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e020:	e7b4      	b.n	800df8c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800e022:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e024:	693a      	ldr	r2, [r7, #16]
 800e026:	69bb      	ldr	r3, [r7, #24]
 800e028:	441a      	add	r2, r3
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e02e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e030:	2b1f      	cmp	r3, #31
 800e032:	d801      	bhi.n	800e038 <create_name+0xcc>
 800e034:	2304      	movs	r3, #4
 800e036:	e000      	b.n	800e03a <create_name+0xce>
 800e038:	2300      	movs	r3, #0
 800e03a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e03e:	e011      	b.n	800e064 <create_name+0xf8>
		w = lfn[di - 1];
 800e040:	697a      	ldr	r2, [r7, #20]
 800e042:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e046:	4413      	add	r3, r2
 800e048:	005b      	lsls	r3, r3, #1
 800e04a:	68fa      	ldr	r2, [r7, #12]
 800e04c:	4413      	add	r3, r2
 800e04e:	881b      	ldrh	r3, [r3, #0]
 800e050:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800e052:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e054:	2b20      	cmp	r3, #32
 800e056:	d002      	beq.n	800e05e <create_name+0xf2>
 800e058:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e05a:	2b2e      	cmp	r3, #46	; 0x2e
 800e05c:	d106      	bne.n	800e06c <create_name+0x100>
		di--;
 800e05e:	697b      	ldr	r3, [r7, #20]
 800e060:	3b01      	subs	r3, #1
 800e062:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e064:	697b      	ldr	r3, [r7, #20]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d1ea      	bne.n	800e040 <create_name+0xd4>
 800e06a:	e000      	b.n	800e06e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800e06c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800e06e:	697b      	ldr	r3, [r7, #20]
 800e070:	005b      	lsls	r3, r3, #1
 800e072:	68fa      	ldr	r2, [r7, #12]
 800e074:	4413      	add	r3, r2
 800e076:	2200      	movs	r2, #0
 800e078:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e07a:	697b      	ldr	r3, [r7, #20]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d101      	bne.n	800e084 <create_name+0x118>
 800e080:	2306      	movs	r3, #6
 800e082:	e127      	b.n	800e2d4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	3324      	adds	r3, #36	; 0x24
 800e088:	220b      	movs	r2, #11
 800e08a:	2120      	movs	r1, #32
 800e08c:	4618      	mov	r0, r3
 800e08e:	f7fe faf4 	bl	800c67a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e092:	2300      	movs	r3, #0
 800e094:	61bb      	str	r3, [r7, #24]
 800e096:	e002      	b.n	800e09e <create_name+0x132>
 800e098:	69bb      	ldr	r3, [r7, #24]
 800e09a:	3301      	adds	r3, #1
 800e09c:	61bb      	str	r3, [r7, #24]
 800e09e:	69bb      	ldr	r3, [r7, #24]
 800e0a0:	005b      	lsls	r3, r3, #1
 800e0a2:	68fa      	ldr	r2, [r7, #12]
 800e0a4:	4413      	add	r3, r2
 800e0a6:	881b      	ldrh	r3, [r3, #0]
 800e0a8:	2b20      	cmp	r3, #32
 800e0aa:	d0f5      	beq.n	800e098 <create_name+0x12c>
 800e0ac:	69bb      	ldr	r3, [r7, #24]
 800e0ae:	005b      	lsls	r3, r3, #1
 800e0b0:	68fa      	ldr	r2, [r7, #12]
 800e0b2:	4413      	add	r3, r2
 800e0b4:	881b      	ldrh	r3, [r3, #0]
 800e0b6:	2b2e      	cmp	r3, #46	; 0x2e
 800e0b8:	d0ee      	beq.n	800e098 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e0ba:	69bb      	ldr	r3, [r7, #24]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d009      	beq.n	800e0d4 <create_name+0x168>
 800e0c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0c4:	f043 0303 	orr.w	r3, r3, #3
 800e0c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e0cc:	e002      	b.n	800e0d4 <create_name+0x168>
 800e0ce:	697b      	ldr	r3, [r7, #20]
 800e0d0:	3b01      	subs	r3, #1
 800e0d2:	617b      	str	r3, [r7, #20]
 800e0d4:	697b      	ldr	r3, [r7, #20]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d009      	beq.n	800e0ee <create_name+0x182>
 800e0da:	697a      	ldr	r2, [r7, #20]
 800e0dc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e0e0:	4413      	add	r3, r2
 800e0e2:	005b      	lsls	r3, r3, #1
 800e0e4:	68fa      	ldr	r2, [r7, #12]
 800e0e6:	4413      	add	r3, r2
 800e0e8:	881b      	ldrh	r3, [r3, #0]
 800e0ea:	2b2e      	cmp	r3, #46	; 0x2e
 800e0ec:	d1ef      	bne.n	800e0ce <create_name+0x162>

	i = b = 0; ni = 8;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	623b      	str	r3, [r7, #32]
 800e0f8:	2308      	movs	r3, #8
 800e0fa:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e0fc:	69bb      	ldr	r3, [r7, #24]
 800e0fe:	1c5a      	adds	r2, r3, #1
 800e100:	61ba      	str	r2, [r7, #24]
 800e102:	005b      	lsls	r3, r3, #1
 800e104:	68fa      	ldr	r2, [r7, #12]
 800e106:	4413      	add	r3, r2
 800e108:	881b      	ldrh	r3, [r3, #0]
 800e10a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e10c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e10e:	2b00      	cmp	r3, #0
 800e110:	f000 8090 	beq.w	800e234 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e114:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e116:	2b20      	cmp	r3, #32
 800e118:	d006      	beq.n	800e128 <create_name+0x1bc>
 800e11a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e11c:	2b2e      	cmp	r3, #46	; 0x2e
 800e11e:	d10a      	bne.n	800e136 <create_name+0x1ca>
 800e120:	69ba      	ldr	r2, [r7, #24]
 800e122:	697b      	ldr	r3, [r7, #20]
 800e124:	429a      	cmp	r2, r3
 800e126:	d006      	beq.n	800e136 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800e128:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e12c:	f043 0303 	orr.w	r3, r3, #3
 800e130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e134:	e07d      	b.n	800e232 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e136:	6a3a      	ldr	r2, [r7, #32]
 800e138:	69fb      	ldr	r3, [r7, #28]
 800e13a:	429a      	cmp	r2, r3
 800e13c:	d203      	bcs.n	800e146 <create_name+0x1da>
 800e13e:	69ba      	ldr	r2, [r7, #24]
 800e140:	697b      	ldr	r3, [r7, #20]
 800e142:	429a      	cmp	r2, r3
 800e144:	d123      	bne.n	800e18e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800e146:	69fb      	ldr	r3, [r7, #28]
 800e148:	2b0b      	cmp	r3, #11
 800e14a:	d106      	bne.n	800e15a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800e14c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e150:	f043 0303 	orr.w	r3, r3, #3
 800e154:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e158:	e075      	b.n	800e246 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e15a:	69ba      	ldr	r2, [r7, #24]
 800e15c:	697b      	ldr	r3, [r7, #20]
 800e15e:	429a      	cmp	r2, r3
 800e160:	d005      	beq.n	800e16e <create_name+0x202>
 800e162:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e166:	f043 0303 	orr.w	r3, r3, #3
 800e16a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800e16e:	69ba      	ldr	r2, [r7, #24]
 800e170:	697b      	ldr	r3, [r7, #20]
 800e172:	429a      	cmp	r2, r3
 800e174:	d866      	bhi.n	800e244 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e176:	697b      	ldr	r3, [r7, #20]
 800e178:	61bb      	str	r3, [r7, #24]
 800e17a:	2308      	movs	r3, #8
 800e17c:	623b      	str	r3, [r7, #32]
 800e17e:	230b      	movs	r3, #11
 800e180:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e182:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e186:	009b      	lsls	r3, r3, #2
 800e188:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e18c:	e051      	b.n	800e232 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e18e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e190:	2b7f      	cmp	r3, #127	; 0x7f
 800e192:	d914      	bls.n	800e1be <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e194:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e196:	2100      	movs	r1, #0
 800e198:	4618      	mov	r0, r3
 800e19a:	f001 f985 	bl	800f4a8 <ff_convert>
 800e19e:	4603      	mov	r3, r0
 800e1a0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e1a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d004      	beq.n	800e1b2 <create_name+0x246>
 800e1a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1aa:	3b80      	subs	r3, #128	; 0x80
 800e1ac:	4a23      	ldr	r2, [pc, #140]	; (800e23c <create_name+0x2d0>)
 800e1ae:	5cd3      	ldrb	r3, [r2, r3]
 800e1b0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e1b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1b6:	f043 0302 	orr.w	r3, r3, #2
 800e1ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e1be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d007      	beq.n	800e1d4 <create_name+0x268>
 800e1c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1c6:	4619      	mov	r1, r3
 800e1c8:	481d      	ldr	r0, [pc, #116]	; (800e240 <create_name+0x2d4>)
 800e1ca:	f7fe fa98 	bl	800c6fe <chk_chr>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d008      	beq.n	800e1e6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e1d4:	235f      	movs	r3, #95	; 0x5f
 800e1d6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e1d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1dc:	f043 0303 	orr.w	r3, r3, #3
 800e1e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e1e4:	e01b      	b.n	800e21e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e1e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1e8:	2b40      	cmp	r3, #64	; 0x40
 800e1ea:	d909      	bls.n	800e200 <create_name+0x294>
 800e1ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1ee:	2b5a      	cmp	r3, #90	; 0x5a
 800e1f0:	d806      	bhi.n	800e200 <create_name+0x294>
					b |= 2;
 800e1f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e1f6:	f043 0302 	orr.w	r3, r3, #2
 800e1fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e1fe:	e00e      	b.n	800e21e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e200:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e202:	2b60      	cmp	r3, #96	; 0x60
 800e204:	d90b      	bls.n	800e21e <create_name+0x2b2>
 800e206:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e208:	2b7a      	cmp	r3, #122	; 0x7a
 800e20a:	d808      	bhi.n	800e21e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800e20c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e210:	f043 0301 	orr.w	r3, r3, #1
 800e214:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e218:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e21a:	3b20      	subs	r3, #32
 800e21c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e21e:	6a3b      	ldr	r3, [r7, #32]
 800e220:	1c5a      	adds	r2, r3, #1
 800e222:	623a      	str	r2, [r7, #32]
 800e224:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e226:	b2d1      	uxtb	r1, r2
 800e228:	687a      	ldr	r2, [r7, #4]
 800e22a:	4413      	add	r3, r2
 800e22c:	460a      	mov	r2, r1
 800e22e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800e232:	e763      	b.n	800e0fc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800e234:	bf00      	nop
 800e236:	e006      	b.n	800e246 <create_name+0x2da>
 800e238:	08011920 	.word	0x08011920
 800e23c:	080119e4 	.word	0x080119e4
 800e240:	0801192c 	.word	0x0801192c
			if (si > di) break;			/* No extension */
 800e244:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e24c:	2be5      	cmp	r3, #229	; 0xe5
 800e24e:	d103      	bne.n	800e258 <create_name+0x2ec>
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2205      	movs	r2, #5
 800e254:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800e258:	69fb      	ldr	r3, [r7, #28]
 800e25a:	2b08      	cmp	r3, #8
 800e25c:	d104      	bne.n	800e268 <create_name+0x2fc>
 800e25e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e262:	009b      	lsls	r3, r3, #2
 800e264:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e268:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e26c:	f003 030c 	and.w	r3, r3, #12
 800e270:	2b0c      	cmp	r3, #12
 800e272:	d005      	beq.n	800e280 <create_name+0x314>
 800e274:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e278:	f003 0303 	and.w	r3, r3, #3
 800e27c:	2b03      	cmp	r3, #3
 800e27e:	d105      	bne.n	800e28c <create_name+0x320>
 800e280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e284:	f043 0302 	orr.w	r3, r3, #2
 800e288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e28c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e290:	f003 0302 	and.w	r3, r3, #2
 800e294:	2b00      	cmp	r3, #0
 800e296:	d117      	bne.n	800e2c8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e298:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e29c:	f003 0303 	and.w	r3, r3, #3
 800e2a0:	2b01      	cmp	r3, #1
 800e2a2:	d105      	bne.n	800e2b0 <create_name+0x344>
 800e2a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2a8:	f043 0310 	orr.w	r3, r3, #16
 800e2ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e2b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e2b4:	f003 030c 	and.w	r3, r3, #12
 800e2b8:	2b04      	cmp	r3, #4
 800e2ba:	d105      	bne.n	800e2c8 <create_name+0x35c>
 800e2bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2c0:	f043 0308 	orr.w	r3, r3, #8
 800e2c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e2ce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800e2d2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	3728      	adds	r7, #40	; 0x28
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}

0800e2dc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b086      	sub	sp, #24
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
 800e2e4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e2ea:	693b      	ldr	r3, [r7, #16]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e2f0:	e002      	b.n	800e2f8 <follow_path+0x1c>
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	3301      	adds	r3, #1
 800e2f6:	603b      	str	r3, [r7, #0]
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	781b      	ldrb	r3, [r3, #0]
 800e2fc:	2b2f      	cmp	r3, #47	; 0x2f
 800e2fe:	d0f8      	beq.n	800e2f2 <follow_path+0x16>
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	781b      	ldrb	r3, [r3, #0]
 800e304:	2b5c      	cmp	r3, #92	; 0x5c
 800e306:	d0f4      	beq.n	800e2f2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e308:	693b      	ldr	r3, [r7, #16]
 800e30a:	2200      	movs	r2, #0
 800e30c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	781b      	ldrb	r3, [r3, #0]
 800e312:	2b1f      	cmp	r3, #31
 800e314:	d80a      	bhi.n	800e32c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	2280      	movs	r2, #128	; 0x80
 800e31a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e31e:	2100      	movs	r1, #0
 800e320:	6878      	ldr	r0, [r7, #4]
 800e322:	f7fe ff35 	bl	800d190 <dir_sdi>
 800e326:	4603      	mov	r3, r0
 800e328:	75fb      	strb	r3, [r7, #23]
 800e32a:	e043      	b.n	800e3b4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e32c:	463b      	mov	r3, r7
 800e32e:	4619      	mov	r1, r3
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f7ff fe1b 	bl	800df6c <create_name>
 800e336:	4603      	mov	r3, r0
 800e338:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e33a:	7dfb      	ldrb	r3, [r7, #23]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d134      	bne.n	800e3aa <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f7ff fb7d 	bl	800da40 <dir_find>
 800e346:	4603      	mov	r3, r0
 800e348:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e350:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e352:	7dfb      	ldrb	r3, [r7, #23]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d00a      	beq.n	800e36e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e358:	7dfb      	ldrb	r3, [r7, #23]
 800e35a:	2b04      	cmp	r3, #4
 800e35c:	d127      	bne.n	800e3ae <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e35e:	7afb      	ldrb	r3, [r7, #11]
 800e360:	f003 0304 	and.w	r3, r3, #4
 800e364:	2b00      	cmp	r3, #0
 800e366:	d122      	bne.n	800e3ae <follow_path+0xd2>
 800e368:	2305      	movs	r3, #5
 800e36a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e36c:	e01f      	b.n	800e3ae <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e36e:	7afb      	ldrb	r3, [r7, #11]
 800e370:	f003 0304 	and.w	r3, r3, #4
 800e374:	2b00      	cmp	r3, #0
 800e376:	d11c      	bne.n	800e3b2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e378:	693b      	ldr	r3, [r7, #16]
 800e37a:	799b      	ldrb	r3, [r3, #6]
 800e37c:	f003 0310 	and.w	r3, r3, #16
 800e380:	2b00      	cmp	r3, #0
 800e382:	d102      	bne.n	800e38a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e384:	2305      	movs	r3, #5
 800e386:	75fb      	strb	r3, [r7, #23]
 800e388:	e014      	b.n	800e3b4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	695b      	ldr	r3, [r3, #20]
 800e394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e398:	4413      	add	r3, r2
 800e39a:	4619      	mov	r1, r3
 800e39c:	68f8      	ldr	r0, [r7, #12]
 800e39e:	f7ff f87e 	bl	800d49e <ld_clust>
 800e3a2:	4602      	mov	r2, r0
 800e3a4:	693b      	ldr	r3, [r7, #16]
 800e3a6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e3a8:	e7c0      	b.n	800e32c <follow_path+0x50>
			if (res != FR_OK) break;
 800e3aa:	bf00      	nop
 800e3ac:	e002      	b.n	800e3b4 <follow_path+0xd8>
				break;
 800e3ae:	bf00      	nop
 800e3b0:	e000      	b.n	800e3b4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e3b2:	bf00      	nop
			}
		}
	}

	return res;
 800e3b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	3718      	adds	r7, #24
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd80      	pop	{r7, pc}

0800e3be <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e3be:	b480      	push	{r7}
 800e3c0:	b087      	sub	sp, #28
 800e3c2:	af00      	add	r7, sp, #0
 800e3c4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e3c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e3ca:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d031      	beq.n	800e438 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	617b      	str	r3, [r7, #20]
 800e3da:	e002      	b.n	800e3e2 <get_ldnumber+0x24>
 800e3dc:	697b      	ldr	r3, [r7, #20]
 800e3de:	3301      	adds	r3, #1
 800e3e0:	617b      	str	r3, [r7, #20]
 800e3e2:	697b      	ldr	r3, [r7, #20]
 800e3e4:	781b      	ldrb	r3, [r3, #0]
 800e3e6:	2b1f      	cmp	r3, #31
 800e3e8:	d903      	bls.n	800e3f2 <get_ldnumber+0x34>
 800e3ea:	697b      	ldr	r3, [r7, #20]
 800e3ec:	781b      	ldrb	r3, [r3, #0]
 800e3ee:	2b3a      	cmp	r3, #58	; 0x3a
 800e3f0:	d1f4      	bne.n	800e3dc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e3f2:	697b      	ldr	r3, [r7, #20]
 800e3f4:	781b      	ldrb	r3, [r3, #0]
 800e3f6:	2b3a      	cmp	r3, #58	; 0x3a
 800e3f8:	d11c      	bne.n	800e434 <get_ldnumber+0x76>
			tp = *path;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	1c5a      	adds	r2, r3, #1
 800e404:	60fa      	str	r2, [r7, #12]
 800e406:	781b      	ldrb	r3, [r3, #0]
 800e408:	3b30      	subs	r3, #48	; 0x30
 800e40a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e40c:	68bb      	ldr	r3, [r7, #8]
 800e40e:	2b09      	cmp	r3, #9
 800e410:	d80e      	bhi.n	800e430 <get_ldnumber+0x72>
 800e412:	68fa      	ldr	r2, [r7, #12]
 800e414:	697b      	ldr	r3, [r7, #20]
 800e416:	429a      	cmp	r2, r3
 800e418:	d10a      	bne.n	800e430 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d107      	bne.n	800e430 <get_ldnumber+0x72>
					vol = (int)i;
 800e420:	68bb      	ldr	r3, [r7, #8]
 800e422:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e424:	697b      	ldr	r3, [r7, #20]
 800e426:	3301      	adds	r3, #1
 800e428:	617b      	str	r3, [r7, #20]
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	697a      	ldr	r2, [r7, #20]
 800e42e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e430:	693b      	ldr	r3, [r7, #16]
 800e432:	e002      	b.n	800e43a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e434:	2300      	movs	r3, #0
 800e436:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e438:	693b      	ldr	r3, [r7, #16]
}
 800e43a:	4618      	mov	r0, r3
 800e43c:	371c      	adds	r7, #28
 800e43e:	46bd      	mov	sp, r7
 800e440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e444:	4770      	bx	lr
	...

0800e448 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b082      	sub	sp, #8
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
 800e450:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	2200      	movs	r2, #0
 800e456:	70da      	strb	r2, [r3, #3]
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e45e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e460:	6839      	ldr	r1, [r7, #0]
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f7fe fb16 	bl	800ca94 <move_window>
 800e468:	4603      	mov	r3, r0
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d001      	beq.n	800e472 <check_fs+0x2a>
 800e46e:	2304      	movs	r3, #4
 800e470:	e038      	b.n	800e4e4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	3334      	adds	r3, #52	; 0x34
 800e476:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e47a:	4618      	mov	r0, r3
 800e47c:	f7fe f85a 	bl	800c534 <ld_word>
 800e480:	4603      	mov	r3, r0
 800e482:	461a      	mov	r2, r3
 800e484:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e488:	429a      	cmp	r2, r3
 800e48a:	d001      	beq.n	800e490 <check_fs+0x48>
 800e48c:	2303      	movs	r3, #3
 800e48e:	e029      	b.n	800e4e4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e496:	2be9      	cmp	r3, #233	; 0xe9
 800e498:	d009      	beq.n	800e4ae <check_fs+0x66>
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e4a0:	2beb      	cmp	r3, #235	; 0xeb
 800e4a2:	d11e      	bne.n	800e4e2 <check_fs+0x9a>
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e4aa:	2b90      	cmp	r3, #144	; 0x90
 800e4ac:	d119      	bne.n	800e4e2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	3334      	adds	r3, #52	; 0x34
 800e4b2:	3336      	adds	r3, #54	; 0x36
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f7fe f855 	bl	800c564 <ld_dword>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e4c0:	4a0a      	ldr	r2, [pc, #40]	; (800e4ec <check_fs+0xa4>)
 800e4c2:	4293      	cmp	r3, r2
 800e4c4:	d101      	bne.n	800e4ca <check_fs+0x82>
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	e00c      	b.n	800e4e4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	3334      	adds	r3, #52	; 0x34
 800e4ce:	3352      	adds	r3, #82	; 0x52
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f7fe f847 	bl	800c564 <ld_dword>
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	4a05      	ldr	r2, [pc, #20]	; (800e4f0 <check_fs+0xa8>)
 800e4da:	4293      	cmp	r3, r2
 800e4dc:	d101      	bne.n	800e4e2 <check_fs+0x9a>
 800e4de:	2300      	movs	r3, #0
 800e4e0:	e000      	b.n	800e4e4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e4e2:	2302      	movs	r3, #2
}
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	3708      	adds	r7, #8
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}
 800e4ec:	00544146 	.word	0x00544146
 800e4f0:	33544146 	.word	0x33544146

0800e4f4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b096      	sub	sp, #88	; 0x58
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	60f8      	str	r0, [r7, #12]
 800e4fc:	60b9      	str	r1, [r7, #8]
 800e4fe:	4613      	mov	r3, r2
 800e500:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e502:	68bb      	ldr	r3, [r7, #8]
 800e504:	2200      	movs	r2, #0
 800e506:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e508:	68f8      	ldr	r0, [r7, #12]
 800e50a:	f7ff ff58 	bl	800e3be <get_ldnumber>
 800e50e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e512:	2b00      	cmp	r3, #0
 800e514:	da01      	bge.n	800e51a <find_volume+0x26>
 800e516:	230b      	movs	r3, #11
 800e518:	e230      	b.n	800e97c <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e51a:	4aa1      	ldr	r2, [pc, #644]	; (800e7a0 <find_volume+0x2ac>)
 800e51c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e51e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e522:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e526:	2b00      	cmp	r3, #0
 800e528:	d101      	bne.n	800e52e <find_volume+0x3a>
 800e52a:	230c      	movs	r3, #12
 800e52c:	e226      	b.n	800e97c <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e532:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e534:	79fb      	ldrb	r3, [r7, #7]
 800e536:	f023 0301 	bic.w	r3, r3, #1
 800e53a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e53e:	781b      	ldrb	r3, [r3, #0]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d01a      	beq.n	800e57a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e546:	785b      	ldrb	r3, [r3, #1]
 800e548:	4618      	mov	r0, r3
 800e54a:	f7fd ff55 	bl	800c3f8 <disk_status>
 800e54e:	4603      	mov	r3, r0
 800e550:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e554:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e558:	f003 0301 	and.w	r3, r3, #1
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d10c      	bne.n	800e57a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e560:	79fb      	ldrb	r3, [r7, #7]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d007      	beq.n	800e576 <find_volume+0x82>
 800e566:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e56a:	f003 0304 	and.w	r3, r3, #4
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d001      	beq.n	800e576 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e572:	230a      	movs	r3, #10
 800e574:	e202      	b.n	800e97c <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800e576:	2300      	movs	r3, #0
 800e578:	e200      	b.n	800e97c <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e57c:	2200      	movs	r2, #0
 800e57e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e582:	b2da      	uxtb	r2, r3
 800e584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e586:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e58a:	785b      	ldrb	r3, [r3, #1]
 800e58c:	4618      	mov	r0, r3
 800e58e:	f7fd ff4d 	bl	800c42c <disk_initialize>
 800e592:	4603      	mov	r3, r0
 800e594:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e598:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e59c:	f003 0301 	and.w	r3, r3, #1
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d001      	beq.n	800e5a8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e5a4:	2303      	movs	r3, #3
 800e5a6:	e1e9      	b.n	800e97c <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e5a8:	79fb      	ldrb	r3, [r7, #7]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d007      	beq.n	800e5be <find_volume+0xca>
 800e5ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e5b2:	f003 0304 	and.w	r3, r3, #4
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d001      	beq.n	800e5be <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e5ba:	230a      	movs	r3, #10
 800e5bc:	e1de      	b.n	800e97c <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e5c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e5c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e5c6:	f7ff ff3f 	bl	800e448 <check_fs>
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e5d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e5d4:	2b02      	cmp	r3, #2
 800e5d6:	d149      	bne.n	800e66c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e5d8:	2300      	movs	r3, #0
 800e5da:	643b      	str	r3, [r7, #64]	; 0x40
 800e5dc:	e01e      	b.n	800e61c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5e0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e5e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5e6:	011b      	lsls	r3, r3, #4
 800e5e8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e5ec:	4413      	add	r3, r2
 800e5ee:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5f2:	3304      	adds	r3, #4
 800e5f4:	781b      	ldrb	r3, [r3, #0]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d006      	beq.n	800e608 <find_volume+0x114>
 800e5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5fc:	3308      	adds	r3, #8
 800e5fe:	4618      	mov	r0, r3
 800e600:	f7fd ffb0 	bl	800c564 <ld_dword>
 800e604:	4602      	mov	r2, r0
 800e606:	e000      	b.n	800e60a <find_volume+0x116>
 800e608:	2200      	movs	r2, #0
 800e60a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e60c:	009b      	lsls	r3, r3, #2
 800e60e:	3358      	adds	r3, #88	; 0x58
 800e610:	443b      	add	r3, r7
 800e612:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e618:	3301      	adds	r3, #1
 800e61a:	643b      	str	r3, [r7, #64]	; 0x40
 800e61c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e61e:	2b03      	cmp	r3, #3
 800e620:	d9dd      	bls.n	800e5de <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e622:	2300      	movs	r3, #0
 800e624:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d002      	beq.n	800e632 <find_volume+0x13e>
 800e62c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e62e:	3b01      	subs	r3, #1
 800e630:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e634:	009b      	lsls	r3, r3, #2
 800e636:	3358      	adds	r3, #88	; 0x58
 800e638:	443b      	add	r3, r7
 800e63a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e63e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e640:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e642:	2b00      	cmp	r3, #0
 800e644:	d005      	beq.n	800e652 <find_volume+0x15e>
 800e646:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e648:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e64a:	f7ff fefd 	bl	800e448 <check_fs>
 800e64e:	4603      	mov	r3, r0
 800e650:	e000      	b.n	800e654 <find_volume+0x160>
 800e652:	2303      	movs	r3, #3
 800e654:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e658:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e65c:	2b01      	cmp	r3, #1
 800e65e:	d905      	bls.n	800e66c <find_volume+0x178>
 800e660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e662:	3301      	adds	r3, #1
 800e664:	643b      	str	r3, [r7, #64]	; 0x40
 800e666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e668:	2b03      	cmp	r3, #3
 800e66a:	d9e2      	bls.n	800e632 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e66c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e670:	2b04      	cmp	r3, #4
 800e672:	d101      	bne.n	800e678 <find_volume+0x184>
 800e674:	2301      	movs	r3, #1
 800e676:	e181      	b.n	800e97c <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e678:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e67c:	2b01      	cmp	r3, #1
 800e67e:	d901      	bls.n	800e684 <find_volume+0x190>
 800e680:	230d      	movs	r3, #13
 800e682:	e17b      	b.n	800e97c <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e686:	3334      	adds	r3, #52	; 0x34
 800e688:	330b      	adds	r3, #11
 800e68a:	4618      	mov	r0, r3
 800e68c:	f7fd ff52 	bl	800c534 <ld_word>
 800e690:	4603      	mov	r3, r0
 800e692:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e696:	d001      	beq.n	800e69c <find_volume+0x1a8>
 800e698:	230d      	movs	r3, #13
 800e69a:	e16f      	b.n	800e97c <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e69e:	3334      	adds	r3, #52	; 0x34
 800e6a0:	3316      	adds	r3, #22
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f7fd ff46 	bl	800c534 <ld_word>
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e6ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d106      	bne.n	800e6c0 <find_volume+0x1cc>
 800e6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6b4:	3334      	adds	r3, #52	; 0x34
 800e6b6:	3324      	adds	r3, #36	; 0x24
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f7fd ff53 	bl	800c564 <ld_dword>
 800e6be:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e6c4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6c8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ce:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6d2:	789b      	ldrb	r3, [r3, #2]
 800e6d4:	2b01      	cmp	r3, #1
 800e6d6:	d005      	beq.n	800e6e4 <find_volume+0x1f0>
 800e6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6da:	789b      	ldrb	r3, [r3, #2]
 800e6dc:	2b02      	cmp	r3, #2
 800e6de:	d001      	beq.n	800e6e4 <find_volume+0x1f0>
 800e6e0:	230d      	movs	r3, #13
 800e6e2:	e14b      	b.n	800e97c <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e6:	789b      	ldrb	r3, [r3, #2]
 800e6e8:	461a      	mov	r2, r3
 800e6ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6ec:	fb02 f303 	mul.w	r3, r2, r3
 800e6f0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e6f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e6f8:	b29a      	uxth	r2, r3
 800e6fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6fc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e700:	895b      	ldrh	r3, [r3, #10]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d008      	beq.n	800e718 <find_volume+0x224>
 800e706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e708:	895b      	ldrh	r3, [r3, #10]
 800e70a:	461a      	mov	r2, r3
 800e70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e70e:	895b      	ldrh	r3, [r3, #10]
 800e710:	3b01      	subs	r3, #1
 800e712:	4013      	ands	r3, r2
 800e714:	2b00      	cmp	r3, #0
 800e716:	d001      	beq.n	800e71c <find_volume+0x228>
 800e718:	230d      	movs	r3, #13
 800e71a:	e12f      	b.n	800e97c <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e71e:	3334      	adds	r3, #52	; 0x34
 800e720:	3311      	adds	r3, #17
 800e722:	4618      	mov	r0, r3
 800e724:	f7fd ff06 	bl	800c534 <ld_word>
 800e728:	4603      	mov	r3, r0
 800e72a:	461a      	mov	r2, r3
 800e72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e72e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e732:	891b      	ldrh	r3, [r3, #8]
 800e734:	f003 030f 	and.w	r3, r3, #15
 800e738:	b29b      	uxth	r3, r3
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d001      	beq.n	800e742 <find_volume+0x24e>
 800e73e:	230d      	movs	r3, #13
 800e740:	e11c      	b.n	800e97c <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e744:	3334      	adds	r3, #52	; 0x34
 800e746:	3313      	adds	r3, #19
 800e748:	4618      	mov	r0, r3
 800e74a:	f7fd fef3 	bl	800c534 <ld_word>
 800e74e:	4603      	mov	r3, r0
 800e750:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e754:	2b00      	cmp	r3, #0
 800e756:	d106      	bne.n	800e766 <find_volume+0x272>
 800e758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e75a:	3334      	adds	r3, #52	; 0x34
 800e75c:	3320      	adds	r3, #32
 800e75e:	4618      	mov	r0, r3
 800e760:	f7fd ff00 	bl	800c564 <ld_dword>
 800e764:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e768:	3334      	adds	r3, #52	; 0x34
 800e76a:	330e      	adds	r3, #14
 800e76c:	4618      	mov	r0, r3
 800e76e:	f7fd fee1 	bl	800c534 <ld_word>
 800e772:	4603      	mov	r3, r0
 800e774:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e776:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d101      	bne.n	800e780 <find_volume+0x28c>
 800e77c:	230d      	movs	r3, #13
 800e77e:	e0fd      	b.n	800e97c <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e780:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e784:	4413      	add	r3, r2
 800e786:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e788:	8912      	ldrh	r2, [r2, #8]
 800e78a:	0912      	lsrs	r2, r2, #4
 800e78c:	b292      	uxth	r2, r2
 800e78e:	4413      	add	r3, r2
 800e790:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e792:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e796:	429a      	cmp	r2, r3
 800e798:	d204      	bcs.n	800e7a4 <find_volume+0x2b0>
 800e79a:	230d      	movs	r3, #13
 800e79c:	e0ee      	b.n	800e97c <find_volume+0x488>
 800e79e:	bf00      	nop
 800e7a0:	20003270 	.word	0x20003270
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e7a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a8:	1ad3      	subs	r3, r2, r3
 800e7aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e7ac:	8952      	ldrh	r2, [r2, #10]
 800e7ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800e7b2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d101      	bne.n	800e7be <find_volume+0x2ca>
 800e7ba:	230d      	movs	r3, #13
 800e7bc:	e0de      	b.n	800e97c <find_volume+0x488>
		fmt = FS_FAT32;
 800e7be:	2303      	movs	r3, #3
 800e7c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e7ca:	4293      	cmp	r3, r2
 800e7cc:	d802      	bhi.n	800e7d4 <find_volume+0x2e0>
 800e7ce:	2302      	movs	r3, #2
 800e7d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d6:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e7da:	4293      	cmp	r3, r2
 800e7dc:	d802      	bhi.n	800e7e4 <find_volume+0x2f0>
 800e7de:	2301      	movs	r3, #1
 800e7e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7e6:	1c9a      	adds	r2, r3, #2
 800e7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ea:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800e7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e7f0:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e7f2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e7f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7f6:	441a      	add	r2, r3
 800e7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7fa:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800e7fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e800:	441a      	add	r2, r3
 800e802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e804:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800e806:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e80a:	2b03      	cmp	r3, #3
 800e80c:	d11e      	bne.n	800e84c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e810:	3334      	adds	r3, #52	; 0x34
 800e812:	332a      	adds	r3, #42	; 0x2a
 800e814:	4618      	mov	r0, r3
 800e816:	f7fd fe8d 	bl	800c534 <ld_word>
 800e81a:	4603      	mov	r3, r0
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d001      	beq.n	800e824 <find_volume+0x330>
 800e820:	230d      	movs	r3, #13
 800e822:	e0ab      	b.n	800e97c <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e826:	891b      	ldrh	r3, [r3, #8]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d001      	beq.n	800e830 <find_volume+0x33c>
 800e82c:	230d      	movs	r3, #13
 800e82e:	e0a5      	b.n	800e97c <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e832:	3334      	adds	r3, #52	; 0x34
 800e834:	332c      	adds	r3, #44	; 0x2c
 800e836:	4618      	mov	r0, r3
 800e838:	f7fd fe94 	bl	800c564 <ld_dword>
 800e83c:	4602      	mov	r2, r0
 800e83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e840:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e844:	699b      	ldr	r3, [r3, #24]
 800e846:	009b      	lsls	r3, r3, #2
 800e848:	647b      	str	r3, [r7, #68]	; 0x44
 800e84a:	e01f      	b.n	800e88c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e84e:	891b      	ldrh	r3, [r3, #8]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d101      	bne.n	800e858 <find_volume+0x364>
 800e854:	230d      	movs	r3, #13
 800e856:	e091      	b.n	800e97c <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e85a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e85c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e85e:	441a      	add	r2, r3
 800e860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e862:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e864:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e868:	2b02      	cmp	r3, #2
 800e86a:	d103      	bne.n	800e874 <find_volume+0x380>
 800e86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e86e:	699b      	ldr	r3, [r3, #24]
 800e870:	005b      	lsls	r3, r3, #1
 800e872:	e00a      	b.n	800e88a <find_volume+0x396>
 800e874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e876:	699a      	ldr	r2, [r3, #24]
 800e878:	4613      	mov	r3, r2
 800e87a:	005b      	lsls	r3, r3, #1
 800e87c:	4413      	add	r3, r2
 800e87e:	085a      	lsrs	r2, r3, #1
 800e880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e882:	699b      	ldr	r3, [r3, #24]
 800e884:	f003 0301 	and.w	r3, r3, #1
 800e888:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e88a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e88c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e88e:	69da      	ldr	r2, [r3, #28]
 800e890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e892:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e896:	0a5b      	lsrs	r3, r3, #9
 800e898:	429a      	cmp	r2, r3
 800e89a:	d201      	bcs.n	800e8a0 <find_volume+0x3ac>
 800e89c:	230d      	movs	r3, #13
 800e89e:	e06d      	b.n	800e97c <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e8a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e8a6:	615a      	str	r2, [r3, #20]
 800e8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8aa:	695a      	ldr	r2, [r3, #20]
 800e8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ae:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800e8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8b2:	2280      	movs	r2, #128	; 0x80
 800e8b4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e8b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e8ba:	2b03      	cmp	r3, #3
 800e8bc:	d149      	bne.n	800e952 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8c0:	3334      	adds	r3, #52	; 0x34
 800e8c2:	3330      	adds	r3, #48	; 0x30
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	f7fd fe35 	bl	800c534 <ld_word>
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	2b01      	cmp	r3, #1
 800e8ce:	d140      	bne.n	800e952 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e8d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8d2:	3301      	adds	r3, #1
 800e8d4:	4619      	mov	r1, r3
 800e8d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e8d8:	f7fe f8dc 	bl	800ca94 <move_window>
 800e8dc:	4603      	mov	r3, r0
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d137      	bne.n	800e952 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ea:	3334      	adds	r3, #52	; 0x34
 800e8ec:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	f7fd fe1f 	bl	800c534 <ld_word>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	461a      	mov	r2, r3
 800e8fa:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e8fe:	429a      	cmp	r2, r3
 800e900:	d127      	bne.n	800e952 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e904:	3334      	adds	r3, #52	; 0x34
 800e906:	4618      	mov	r0, r3
 800e908:	f7fd fe2c 	bl	800c564 <ld_dword>
 800e90c:	4603      	mov	r3, r0
 800e90e:	4a1d      	ldr	r2, [pc, #116]	; (800e984 <find_volume+0x490>)
 800e910:	4293      	cmp	r3, r2
 800e912:	d11e      	bne.n	800e952 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e916:	3334      	adds	r3, #52	; 0x34
 800e918:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e91c:	4618      	mov	r0, r3
 800e91e:	f7fd fe21 	bl	800c564 <ld_dword>
 800e922:	4603      	mov	r3, r0
 800e924:	4a18      	ldr	r2, [pc, #96]	; (800e988 <find_volume+0x494>)
 800e926:	4293      	cmp	r3, r2
 800e928:	d113      	bne.n	800e952 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e92c:	3334      	adds	r3, #52	; 0x34
 800e92e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e932:	4618      	mov	r0, r3
 800e934:	f7fd fe16 	bl	800c564 <ld_dword>
 800e938:	4602      	mov	r2, r0
 800e93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e93c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e93e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e940:	3334      	adds	r3, #52	; 0x34
 800e942:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e946:	4618      	mov	r0, r3
 800e948:	f7fd fe0c 	bl	800c564 <ld_dword>
 800e94c:	4602      	mov	r2, r0
 800e94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e950:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e954:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e958:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e95a:	4b0c      	ldr	r3, [pc, #48]	; (800e98c <find_volume+0x498>)
 800e95c:	881b      	ldrh	r3, [r3, #0]
 800e95e:	3301      	adds	r3, #1
 800e960:	b29a      	uxth	r2, r3
 800e962:	4b0a      	ldr	r3, [pc, #40]	; (800e98c <find_volume+0x498>)
 800e964:	801a      	strh	r2, [r3, #0]
 800e966:	4b09      	ldr	r3, [pc, #36]	; (800e98c <find_volume+0x498>)
 800e968:	881a      	ldrh	r2, [r3, #0]
 800e96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e96c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800e96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e970:	4a07      	ldr	r2, [pc, #28]	; (800e990 <find_volume+0x49c>)
 800e972:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e974:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e976:	f7fe f825 	bl	800c9c4 <clear_lock>
#endif
	return FR_OK;
 800e97a:	2300      	movs	r3, #0
}
 800e97c:	4618      	mov	r0, r3
 800e97e:	3758      	adds	r7, #88	; 0x58
 800e980:	46bd      	mov	sp, r7
 800e982:	bd80      	pop	{r7, pc}
 800e984:	41615252 	.word	0x41615252
 800e988:	61417272 	.word	0x61417272
 800e98c:	20003274 	.word	0x20003274
 800e990:	20003298 	.word	0x20003298

0800e994 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b084      	sub	sp, #16
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]
 800e99c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e99e:	2309      	movs	r3, #9
 800e9a0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d01c      	beq.n	800e9e2 <validate+0x4e>
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d018      	beq.n	800e9e2 <validate+0x4e>
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	781b      	ldrb	r3, [r3, #0]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d013      	beq.n	800e9e2 <validate+0x4e>
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	889a      	ldrh	r2, [r3, #4]
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	88db      	ldrh	r3, [r3, #6]
 800e9c4:	429a      	cmp	r2, r3
 800e9c6:	d10c      	bne.n	800e9e2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	785b      	ldrb	r3, [r3, #1]
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	f7fd fd12 	bl	800c3f8 <disk_status>
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	f003 0301 	and.w	r3, r3, #1
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d101      	bne.n	800e9e2 <validate+0x4e>
			res = FR_OK;
 800e9de:	2300      	movs	r3, #0
 800e9e0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e9e2:	7bfb      	ldrb	r3, [r7, #15]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d102      	bne.n	800e9ee <validate+0x5a>
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	e000      	b.n	800e9f0 <validate+0x5c>
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	683a      	ldr	r2, [r7, #0]
 800e9f2:	6013      	str	r3, [r2, #0]
	return res;
 800e9f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	3710      	adds	r7, #16
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	bd80      	pop	{r7, pc}
	...

0800ea00 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b088      	sub	sp, #32
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	60f8      	str	r0, [r7, #12]
 800ea08:	60b9      	str	r1, [r7, #8]
 800ea0a:	4613      	mov	r3, r2
 800ea0c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ea12:	f107 0310 	add.w	r3, r7, #16
 800ea16:	4618      	mov	r0, r3
 800ea18:	f7ff fcd1 	bl	800e3be <get_ldnumber>
 800ea1c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ea1e:	69fb      	ldr	r3, [r7, #28]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	da01      	bge.n	800ea28 <f_mount+0x28>
 800ea24:	230b      	movs	r3, #11
 800ea26:	e02b      	b.n	800ea80 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ea28:	4a17      	ldr	r2, [pc, #92]	; (800ea88 <f_mount+0x88>)
 800ea2a:	69fb      	ldr	r3, [r7, #28]
 800ea2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea30:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ea32:	69bb      	ldr	r3, [r7, #24]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d005      	beq.n	800ea44 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ea38:	69b8      	ldr	r0, [r7, #24]
 800ea3a:	f7fd ffc3 	bl	800c9c4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ea3e:	69bb      	ldr	r3, [r7, #24]
 800ea40:	2200      	movs	r2, #0
 800ea42:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d002      	beq.n	800ea50 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ea50:	68fa      	ldr	r2, [r7, #12]
 800ea52:	490d      	ldr	r1, [pc, #52]	; (800ea88 <f_mount+0x88>)
 800ea54:	69fb      	ldr	r3, [r7, #28]
 800ea56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d002      	beq.n	800ea66 <f_mount+0x66>
 800ea60:	79fb      	ldrb	r3, [r7, #7]
 800ea62:	2b01      	cmp	r3, #1
 800ea64:	d001      	beq.n	800ea6a <f_mount+0x6a>
 800ea66:	2300      	movs	r3, #0
 800ea68:	e00a      	b.n	800ea80 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ea6a:	f107 010c 	add.w	r1, r7, #12
 800ea6e:	f107 0308 	add.w	r3, r7, #8
 800ea72:	2200      	movs	r2, #0
 800ea74:	4618      	mov	r0, r3
 800ea76:	f7ff fd3d 	bl	800e4f4 <find_volume>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ea7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea80:	4618      	mov	r0, r3
 800ea82:	3720      	adds	r7, #32
 800ea84:	46bd      	mov	sp, r7
 800ea86:	bd80      	pop	{r7, pc}
 800ea88:	20003270 	.word	0x20003270

0800ea8c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b09a      	sub	sp, #104	; 0x68
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	60f8      	str	r0, [r7, #12]
 800ea94:	60b9      	str	r1, [r7, #8]
 800ea96:	4613      	mov	r3, r2
 800ea98:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d101      	bne.n	800eaa4 <f_open+0x18>
 800eaa0:	2309      	movs	r3, #9
 800eaa2:	e1ad      	b.n	800ee00 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800eaa4:	79fb      	ldrb	r3, [r7, #7]
 800eaa6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eaaa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800eaac:	79fa      	ldrb	r2, [r7, #7]
 800eaae:	f107 0114 	add.w	r1, r7, #20
 800eab2:	f107 0308 	add.w	r3, r7, #8
 800eab6:	4618      	mov	r0, r3
 800eab8:	f7ff fd1c 	bl	800e4f4 <find_volume>
 800eabc:	4603      	mov	r3, r0
 800eabe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800eac2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	f040 8191 	bne.w	800edee <f_open+0x362>
		dj.obj.fs = fs;
 800eacc:	697b      	ldr	r3, [r7, #20]
 800eace:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ead0:	68ba      	ldr	r2, [r7, #8]
 800ead2:	f107 0318 	add.w	r3, r7, #24
 800ead6:	4611      	mov	r1, r2
 800ead8:	4618      	mov	r0, r3
 800eada:	f7ff fbff 	bl	800e2dc <follow_path>
 800eade:	4603      	mov	r3, r0
 800eae0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800eae4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d11a      	bne.n	800eb22 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800eaec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800eaf0:	b25b      	sxtb	r3, r3
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	da03      	bge.n	800eafe <f_open+0x72>
				res = FR_INVALID_NAME;
 800eaf6:	2306      	movs	r3, #6
 800eaf8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800eafc:	e011      	b.n	800eb22 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800eafe:	79fb      	ldrb	r3, [r7, #7]
 800eb00:	f023 0301 	bic.w	r3, r3, #1
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	bf14      	ite	ne
 800eb08:	2301      	movne	r3, #1
 800eb0a:	2300      	moveq	r3, #0
 800eb0c:	b2db      	uxtb	r3, r3
 800eb0e:	461a      	mov	r2, r3
 800eb10:	f107 0318 	add.w	r3, r7, #24
 800eb14:	4611      	mov	r1, r2
 800eb16:	4618      	mov	r0, r3
 800eb18:	f7fd fe0c 	bl	800c734 <chk_lock>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800eb22:	79fb      	ldrb	r3, [r7, #7]
 800eb24:	f003 031c 	and.w	r3, r3, #28
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d07f      	beq.n	800ec2c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800eb2c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d017      	beq.n	800eb64 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800eb34:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eb38:	2b04      	cmp	r3, #4
 800eb3a:	d10e      	bne.n	800eb5a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800eb3c:	f7fd fe56 	bl	800c7ec <enq_lock>
 800eb40:	4603      	mov	r3, r0
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d006      	beq.n	800eb54 <f_open+0xc8>
 800eb46:	f107 0318 	add.w	r3, r7, #24
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f7ff f838 	bl	800dbc0 <dir_register>
 800eb50:	4603      	mov	r3, r0
 800eb52:	e000      	b.n	800eb56 <f_open+0xca>
 800eb54:	2312      	movs	r3, #18
 800eb56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800eb5a:	79fb      	ldrb	r3, [r7, #7]
 800eb5c:	f043 0308 	orr.w	r3, r3, #8
 800eb60:	71fb      	strb	r3, [r7, #7]
 800eb62:	e010      	b.n	800eb86 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800eb64:	7fbb      	ldrb	r3, [r7, #30]
 800eb66:	f003 0311 	and.w	r3, r3, #17
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d003      	beq.n	800eb76 <f_open+0xea>
					res = FR_DENIED;
 800eb6e:	2307      	movs	r3, #7
 800eb70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800eb74:	e007      	b.n	800eb86 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800eb76:	79fb      	ldrb	r3, [r7, #7]
 800eb78:	f003 0304 	and.w	r3, r3, #4
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d002      	beq.n	800eb86 <f_open+0xfa>
 800eb80:	2308      	movs	r3, #8
 800eb82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800eb86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d168      	bne.n	800ec60 <f_open+0x1d4>
 800eb8e:	79fb      	ldrb	r3, [r7, #7]
 800eb90:	f003 0308 	and.w	r3, r3, #8
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d063      	beq.n	800ec60 <f_open+0x1d4>
				dw = GET_FATTIME();
 800eb98:	f7fb fa00 	bl	8009f9c <get_fattime>
 800eb9c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800eb9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eba0:	330e      	adds	r3, #14
 800eba2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eba4:	4618      	mov	r0, r3
 800eba6:	f7fd fd1b 	bl	800c5e0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ebaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebac:	3316      	adds	r3, #22
 800ebae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f7fd fd15 	bl	800c5e0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ebb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebb8:	330b      	adds	r3, #11
 800ebba:	2220      	movs	r2, #32
 800ebbc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ebbe:	697b      	ldr	r3, [r7, #20]
 800ebc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ebc2:	4611      	mov	r1, r2
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f7fe fc6a 	bl	800d49e <ld_clust>
 800ebca:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ebcc:	697b      	ldr	r3, [r7, #20]
 800ebce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	f7fe fc82 	bl	800d4dc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ebd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebda:	331c      	adds	r3, #28
 800ebdc:	2100      	movs	r1, #0
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f7fd fcfe 	bl	800c5e0 <st_dword>
					fs->wflag = 1;
 800ebe4:	697b      	ldr	r3, [r7, #20]
 800ebe6:	2201      	movs	r2, #1
 800ebe8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ebea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d037      	beq.n	800ec60 <f_open+0x1d4>
						dw = fs->winsect;
 800ebf0:	697b      	ldr	r3, [r7, #20]
 800ebf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebf4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800ebf6:	f107 0318 	add.w	r3, r7, #24
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f7fe f995 	bl	800cf2e <remove_chain>
 800ec04:	4603      	mov	r3, r0
 800ec06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800ec0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d126      	bne.n	800ec60 <f_open+0x1d4>
							res = move_window(fs, dw);
 800ec12:	697b      	ldr	r3, [r7, #20]
 800ec14:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ec16:	4618      	mov	r0, r3
 800ec18:	f7fd ff3c 	bl	800ca94 <move_window>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ec22:	697b      	ldr	r3, [r7, #20]
 800ec24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ec26:	3a01      	subs	r2, #1
 800ec28:	611a      	str	r2, [r3, #16]
 800ec2a:	e019      	b.n	800ec60 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ec2c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d115      	bne.n	800ec60 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ec34:	7fbb      	ldrb	r3, [r7, #30]
 800ec36:	f003 0310 	and.w	r3, r3, #16
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d003      	beq.n	800ec46 <f_open+0x1ba>
					res = FR_NO_FILE;
 800ec3e:	2304      	movs	r3, #4
 800ec40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ec44:	e00c      	b.n	800ec60 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ec46:	79fb      	ldrb	r3, [r7, #7]
 800ec48:	f003 0302 	and.w	r3, r3, #2
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d007      	beq.n	800ec60 <f_open+0x1d4>
 800ec50:	7fbb      	ldrb	r3, [r7, #30]
 800ec52:	f003 0301 	and.w	r3, r3, #1
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d002      	beq.n	800ec60 <f_open+0x1d4>
						res = FR_DENIED;
 800ec5a:	2307      	movs	r3, #7
 800ec5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800ec60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d128      	bne.n	800ecba <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ec68:	79fb      	ldrb	r3, [r7, #7]
 800ec6a:	f003 0308 	and.w	r3, r3, #8
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d003      	beq.n	800ec7a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ec72:	79fb      	ldrb	r3, [r7, #7]
 800ec74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec78:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ec82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ec88:	79fb      	ldrb	r3, [r7, #7]
 800ec8a:	f023 0301 	bic.w	r3, r3, #1
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	bf14      	ite	ne
 800ec92:	2301      	movne	r3, #1
 800ec94:	2300      	moveq	r3, #0
 800ec96:	b2db      	uxtb	r3, r3
 800ec98:	461a      	mov	r2, r3
 800ec9a:	f107 0318 	add.w	r3, r7, #24
 800ec9e:	4611      	mov	r1, r2
 800eca0:	4618      	mov	r0, r3
 800eca2:	f7fd fdc5 	bl	800c830 <inc_lock>
 800eca6:	4602      	mov	r2, r0
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	691b      	ldr	r3, [r3, #16]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d102      	bne.n	800ecba <f_open+0x22e>
 800ecb4:	2302      	movs	r3, #2
 800ecb6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ecba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	f040 8095 	bne.w	800edee <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ecc4:	697b      	ldr	r3, [r7, #20]
 800ecc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ecc8:	4611      	mov	r1, r2
 800ecca:	4618      	mov	r0, r3
 800eccc:	f7fe fbe7 	bl	800d49e <ld_clust>
 800ecd0:	4602      	mov	r2, r0
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ecd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecd8:	331c      	adds	r3, #28
 800ecda:	4618      	mov	r0, r3
 800ecdc:	f7fd fc42 	bl	800c564 <ld_dword>
 800ece0:	4602      	mov	r2, r0
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	2200      	movs	r2, #0
 800ecea:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ecec:	697a      	ldr	r2, [r7, #20]
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ecf2:	697b      	ldr	r3, [r7, #20]
 800ecf4:	88da      	ldrh	r2, [r3, #6]
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	79fa      	ldrb	r2, [r7, #7]
 800ecfe:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	2200      	movs	r2, #0
 800ed04:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	2200      	movs	r2, #0
 800ed0a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	2200      	movs	r2, #0
 800ed10:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	3330      	adds	r3, #48	; 0x30
 800ed16:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ed1a:	2100      	movs	r1, #0
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f7fd fcac 	bl	800c67a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ed22:	79fb      	ldrb	r3, [r7, #7]
 800ed24:	f003 0320 	and.w	r3, r3, #32
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d060      	beq.n	800edee <f_open+0x362>
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	68db      	ldr	r3, [r3, #12]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d05c      	beq.n	800edee <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	68da      	ldr	r2, [r3, #12]
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ed3c:	697b      	ldr	r3, [r7, #20]
 800ed3e:	895b      	ldrh	r3, [r3, #10]
 800ed40:	025b      	lsls	r3, r3, #9
 800ed42:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	689b      	ldr	r3, [r3, #8]
 800ed48:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	68db      	ldr	r3, [r3, #12]
 800ed4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ed50:	e016      	b.n	800ed80 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ed56:	4618      	mov	r0, r3
 800ed58:	f7fd ff57 	bl	800cc0a <get_fat>
 800ed5c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800ed5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ed60:	2b01      	cmp	r3, #1
 800ed62:	d802      	bhi.n	800ed6a <f_open+0x2de>
 800ed64:	2302      	movs	r3, #2
 800ed66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ed6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ed6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed70:	d102      	bne.n	800ed78 <f_open+0x2ec>
 800ed72:	2301      	movs	r3, #1
 800ed74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ed78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ed7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed7c:	1ad3      	subs	r3, r2, r3
 800ed7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ed80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d103      	bne.n	800ed90 <f_open+0x304>
 800ed88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ed8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed8c:	429a      	cmp	r2, r3
 800ed8e:	d8e0      	bhi.n	800ed52 <f_open+0x2c6>
				}
				fp->clust = clst;
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ed94:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ed96:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d127      	bne.n	800edee <f_open+0x362>
 800ed9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eda0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d022      	beq.n	800edee <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800eda8:	697b      	ldr	r3, [r7, #20]
 800edaa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800edac:	4618      	mov	r0, r3
 800edae:	f7fd ff0d 	bl	800cbcc <clust2sect>
 800edb2:	64f8      	str	r0, [r7, #76]	; 0x4c
 800edb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d103      	bne.n	800edc2 <f_open+0x336>
						res = FR_INT_ERR;
 800edba:	2302      	movs	r3, #2
 800edbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800edc0:	e015      	b.n	800edee <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800edc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800edc4:	0a5a      	lsrs	r2, r3, #9
 800edc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edc8:	441a      	add	r2, r3
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800edce:	697b      	ldr	r3, [r7, #20]
 800edd0:	7858      	ldrb	r0, [r3, #1]
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	6a1a      	ldr	r2, [r3, #32]
 800eddc:	2301      	movs	r3, #1
 800edde:	f7fd fb4b 	bl	800c478 <disk_read>
 800ede2:	4603      	mov	r3, r0
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d002      	beq.n	800edee <f_open+0x362>
 800ede8:	2301      	movs	r3, #1
 800edea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800edee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d002      	beq.n	800edfc <f_open+0x370>
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	2200      	movs	r2, #0
 800edfa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800edfc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	3768      	adds	r7, #104	; 0x68
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bd80      	pop	{r7, pc}

0800ee08 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b08c      	sub	sp, #48	; 0x30
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	60f8      	str	r0, [r7, #12]
 800ee10:	60b9      	str	r1, [r7, #8]
 800ee12:	607a      	str	r2, [r7, #4]
 800ee14:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ee16:	68bb      	ldr	r3, [r7, #8]
 800ee18:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ee1a:	683b      	ldr	r3, [r7, #0]
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	f107 0210 	add.w	r2, r7, #16
 800ee26:	4611      	mov	r1, r2
 800ee28:	4618      	mov	r0, r3
 800ee2a:	f7ff fdb3 	bl	800e994 <validate>
 800ee2e:	4603      	mov	r3, r0
 800ee30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ee34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d107      	bne.n	800ee4c <f_write+0x44>
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	7d5b      	ldrb	r3, [r3, #21]
 800ee40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ee44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d002      	beq.n	800ee52 <f_write+0x4a>
 800ee4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee50:	e14b      	b.n	800f0ea <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	7d1b      	ldrb	r3, [r3, #20]
 800ee56:	f003 0302 	and.w	r3, r3, #2
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d101      	bne.n	800ee62 <f_write+0x5a>
 800ee5e:	2307      	movs	r3, #7
 800ee60:	e143      	b.n	800f0ea <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	699a      	ldr	r2, [r3, #24]
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	441a      	add	r2, r3
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	699b      	ldr	r3, [r3, #24]
 800ee6e:	429a      	cmp	r2, r3
 800ee70:	f080 812d 	bcs.w	800f0ce <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	699b      	ldr	r3, [r3, #24]
 800ee78:	43db      	mvns	r3, r3
 800ee7a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ee7c:	e127      	b.n	800f0ce <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	699b      	ldr	r3, [r3, #24]
 800ee82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	f040 80e3 	bne.w	800f052 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	699b      	ldr	r3, [r3, #24]
 800ee90:	0a5b      	lsrs	r3, r3, #9
 800ee92:	693a      	ldr	r2, [r7, #16]
 800ee94:	8952      	ldrh	r2, [r2, #10]
 800ee96:	3a01      	subs	r2, #1
 800ee98:	4013      	ands	r3, r2
 800ee9a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ee9c:	69bb      	ldr	r3, [r7, #24]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d143      	bne.n	800ef2a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	699b      	ldr	r3, [r3, #24]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d10c      	bne.n	800eec4 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	689b      	ldr	r3, [r3, #8]
 800eeae:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800eeb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d11a      	bne.n	800eeec <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	2100      	movs	r1, #0
 800eeba:	4618      	mov	r0, r3
 800eebc:	f7fe f89c 	bl	800cff8 <create_chain>
 800eec0:	62b8      	str	r0, [r7, #40]	; 0x28
 800eec2:	e013      	b.n	800eeec <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d007      	beq.n	800eedc <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	699b      	ldr	r3, [r3, #24]
 800eed0:	4619      	mov	r1, r3
 800eed2:	68f8      	ldr	r0, [r7, #12]
 800eed4:	f7fe f928 	bl	800d128 <clmt_clust>
 800eed8:	62b8      	str	r0, [r7, #40]	; 0x28
 800eeda:	e007      	b.n	800eeec <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800eedc:	68fa      	ldr	r2, [r7, #12]
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	69db      	ldr	r3, [r3, #28]
 800eee2:	4619      	mov	r1, r3
 800eee4:	4610      	mov	r0, r2
 800eee6:	f7fe f887 	bl	800cff8 <create_chain>
 800eeea:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800eeec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	f000 80f2 	beq.w	800f0d8 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800eef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eef6:	2b01      	cmp	r3, #1
 800eef8:	d104      	bne.n	800ef04 <f_write+0xfc>
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	2202      	movs	r2, #2
 800eefe:	755a      	strb	r2, [r3, #21]
 800ef00:	2302      	movs	r3, #2
 800ef02:	e0f2      	b.n	800f0ea <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ef04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef0a:	d104      	bne.n	800ef16 <f_write+0x10e>
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	2201      	movs	r2, #1
 800ef10:	755a      	strb	r2, [r3, #21]
 800ef12:	2301      	movs	r3, #1
 800ef14:	e0e9      	b.n	800f0ea <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef1a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	689b      	ldr	r3, [r3, #8]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d102      	bne.n	800ef2a <f_write+0x122>
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef28:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	7d1b      	ldrb	r3, [r3, #20]
 800ef2e:	b25b      	sxtb	r3, r3
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	da18      	bge.n	800ef66 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ef34:	693b      	ldr	r3, [r7, #16]
 800ef36:	7858      	ldrb	r0, [r3, #1]
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	6a1a      	ldr	r2, [r3, #32]
 800ef42:	2301      	movs	r3, #1
 800ef44:	f7fd fab8 	bl	800c4b8 <disk_write>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d004      	beq.n	800ef58 <f_write+0x150>
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	2201      	movs	r2, #1
 800ef52:	755a      	strb	r2, [r3, #21]
 800ef54:	2301      	movs	r3, #1
 800ef56:	e0c8      	b.n	800f0ea <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	7d1b      	ldrb	r3, [r3, #20]
 800ef5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef60:	b2da      	uxtb	r2, r3
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ef66:	693a      	ldr	r2, [r7, #16]
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	69db      	ldr	r3, [r3, #28]
 800ef6c:	4619      	mov	r1, r3
 800ef6e:	4610      	mov	r0, r2
 800ef70:	f7fd fe2c 	bl	800cbcc <clust2sect>
 800ef74:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ef76:	697b      	ldr	r3, [r7, #20]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d104      	bne.n	800ef86 <f_write+0x17e>
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	2202      	movs	r2, #2
 800ef80:	755a      	strb	r2, [r3, #21]
 800ef82:	2302      	movs	r3, #2
 800ef84:	e0b1      	b.n	800f0ea <f_write+0x2e2>
			sect += csect;
 800ef86:	697a      	ldr	r2, [r7, #20]
 800ef88:	69bb      	ldr	r3, [r7, #24]
 800ef8a:	4413      	add	r3, r2
 800ef8c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	0a5b      	lsrs	r3, r3, #9
 800ef92:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ef94:	6a3b      	ldr	r3, [r7, #32]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d03c      	beq.n	800f014 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ef9a:	69ba      	ldr	r2, [r7, #24]
 800ef9c:	6a3b      	ldr	r3, [r7, #32]
 800ef9e:	4413      	add	r3, r2
 800efa0:	693a      	ldr	r2, [r7, #16]
 800efa2:	8952      	ldrh	r2, [r2, #10]
 800efa4:	4293      	cmp	r3, r2
 800efa6:	d905      	bls.n	800efb4 <f_write+0x1ac>
					cc = fs->csize - csect;
 800efa8:	693b      	ldr	r3, [r7, #16]
 800efaa:	895b      	ldrh	r3, [r3, #10]
 800efac:	461a      	mov	r2, r3
 800efae:	69bb      	ldr	r3, [r7, #24]
 800efb0:	1ad3      	subs	r3, r2, r3
 800efb2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800efb4:	693b      	ldr	r3, [r7, #16]
 800efb6:	7858      	ldrb	r0, [r3, #1]
 800efb8:	6a3b      	ldr	r3, [r7, #32]
 800efba:	697a      	ldr	r2, [r7, #20]
 800efbc:	69f9      	ldr	r1, [r7, #28]
 800efbe:	f7fd fa7b 	bl	800c4b8 <disk_write>
 800efc2:	4603      	mov	r3, r0
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d004      	beq.n	800efd2 <f_write+0x1ca>
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	2201      	movs	r2, #1
 800efcc:	755a      	strb	r2, [r3, #21]
 800efce:	2301      	movs	r3, #1
 800efd0:	e08b      	b.n	800f0ea <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	6a1a      	ldr	r2, [r3, #32]
 800efd6:	697b      	ldr	r3, [r7, #20]
 800efd8:	1ad3      	subs	r3, r2, r3
 800efda:	6a3a      	ldr	r2, [r7, #32]
 800efdc:	429a      	cmp	r2, r3
 800efde:	d915      	bls.n	800f00c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	6a1a      	ldr	r2, [r3, #32]
 800efea:	697b      	ldr	r3, [r7, #20]
 800efec:	1ad3      	subs	r3, r2, r3
 800efee:	025b      	lsls	r3, r3, #9
 800eff0:	69fa      	ldr	r2, [r7, #28]
 800eff2:	4413      	add	r3, r2
 800eff4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eff8:	4619      	mov	r1, r3
 800effa:	f7fd fb1d 	bl	800c638 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	7d1b      	ldrb	r3, [r3, #20]
 800f002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f006:	b2da      	uxtb	r2, r3
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f00c:	6a3b      	ldr	r3, [r7, #32]
 800f00e:	025b      	lsls	r3, r3, #9
 800f010:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f012:	e03f      	b.n	800f094 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	6a1b      	ldr	r3, [r3, #32]
 800f018:	697a      	ldr	r2, [r7, #20]
 800f01a:	429a      	cmp	r2, r3
 800f01c:	d016      	beq.n	800f04c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	699a      	ldr	r2, [r3, #24]
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f026:	429a      	cmp	r2, r3
 800f028:	d210      	bcs.n	800f04c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f02a:	693b      	ldr	r3, [r7, #16]
 800f02c:	7858      	ldrb	r0, [r3, #1]
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f034:	2301      	movs	r3, #1
 800f036:	697a      	ldr	r2, [r7, #20]
 800f038:	f7fd fa1e 	bl	800c478 <disk_read>
 800f03c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d004      	beq.n	800f04c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	2201      	movs	r2, #1
 800f046:	755a      	strb	r2, [r3, #21]
 800f048:	2301      	movs	r3, #1
 800f04a:	e04e      	b.n	800f0ea <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	697a      	ldr	r2, [r7, #20]
 800f050:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	699b      	ldr	r3, [r3, #24]
 800f056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f05a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f05e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	429a      	cmp	r2, r3
 800f066:	d901      	bls.n	800f06c <f_write+0x264>
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	699b      	ldr	r3, [r3, #24]
 800f076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f07a:	4413      	add	r3, r2
 800f07c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f07e:	69f9      	ldr	r1, [r7, #28]
 800f080:	4618      	mov	r0, r3
 800f082:	f7fd fad9 	bl	800c638 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	7d1b      	ldrb	r3, [r3, #20]
 800f08a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f08e:	b2da      	uxtb	r2, r3
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f094:	69fa      	ldr	r2, [r7, #28]
 800f096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f098:	4413      	add	r3, r2
 800f09a:	61fb      	str	r3, [r7, #28]
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	699a      	ldr	r2, [r3, #24]
 800f0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a2:	441a      	add	r2, r3
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	619a      	str	r2, [r3, #24]
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	68da      	ldr	r2, [r3, #12]
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	699b      	ldr	r3, [r3, #24]
 800f0b0:	429a      	cmp	r2, r3
 800f0b2:	bf38      	it	cc
 800f0b4:	461a      	movcc	r2, r3
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	60da      	str	r2, [r3, #12]
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	681a      	ldr	r2, [r3, #0]
 800f0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c0:	441a      	add	r2, r3
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	601a      	str	r2, [r3, #0]
 800f0c6:	687a      	ldr	r2, [r7, #4]
 800f0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ca:	1ad3      	subs	r3, r2, r3
 800f0cc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	f47f aed4 	bne.w	800ee7e <f_write+0x76>
 800f0d6:	e000      	b.n	800f0da <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f0d8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	7d1b      	ldrb	r3, [r3, #20]
 800f0de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0e2:	b2da      	uxtb	r2, r3
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f0e8:	2300      	movs	r3, #0
}
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	3730      	adds	r7, #48	; 0x30
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	bd80      	pop	{r7, pc}

0800f0f2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f0f2:	b580      	push	{r7, lr}
 800f0f4:	b086      	sub	sp, #24
 800f0f6:	af00      	add	r7, sp, #0
 800f0f8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f107 0208 	add.w	r2, r7, #8
 800f100:	4611      	mov	r1, r2
 800f102:	4618      	mov	r0, r3
 800f104:	f7ff fc46 	bl	800e994 <validate>
 800f108:	4603      	mov	r3, r0
 800f10a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f10c:	7dfb      	ldrb	r3, [r7, #23]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d168      	bne.n	800f1e4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	7d1b      	ldrb	r3, [r3, #20]
 800f116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d062      	beq.n	800f1e4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	7d1b      	ldrb	r3, [r3, #20]
 800f122:	b25b      	sxtb	r3, r3
 800f124:	2b00      	cmp	r3, #0
 800f126:	da15      	bge.n	800f154 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f128:	68bb      	ldr	r3, [r7, #8]
 800f12a:	7858      	ldrb	r0, [r3, #1]
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	6a1a      	ldr	r2, [r3, #32]
 800f136:	2301      	movs	r3, #1
 800f138:	f7fd f9be 	bl	800c4b8 <disk_write>
 800f13c:	4603      	mov	r3, r0
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d001      	beq.n	800f146 <f_sync+0x54>
 800f142:	2301      	movs	r3, #1
 800f144:	e04f      	b.n	800f1e6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	7d1b      	ldrb	r3, [r3, #20]
 800f14a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f14e:	b2da      	uxtb	r2, r3
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f154:	f7fa ff22 	bl	8009f9c <get_fattime>
 800f158:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f15a:	68ba      	ldr	r2, [r7, #8]
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f160:	4619      	mov	r1, r3
 800f162:	4610      	mov	r0, r2
 800f164:	f7fd fc96 	bl	800ca94 <move_window>
 800f168:	4603      	mov	r3, r0
 800f16a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f16c:	7dfb      	ldrb	r3, [r7, #23]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d138      	bne.n	800f1e4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f176:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	330b      	adds	r3, #11
 800f17c:	781a      	ldrb	r2, [r3, #0]
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	330b      	adds	r3, #11
 800f182:	f042 0220 	orr.w	r2, r2, #32
 800f186:	b2d2      	uxtb	r2, r2
 800f188:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	6818      	ldr	r0, [r3, #0]
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	689b      	ldr	r3, [r3, #8]
 800f192:	461a      	mov	r2, r3
 800f194:	68f9      	ldr	r1, [r7, #12]
 800f196:	f7fe f9a1 	bl	800d4dc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	f103 021c 	add.w	r2, r3, #28
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	68db      	ldr	r3, [r3, #12]
 800f1a4:	4619      	mov	r1, r3
 800f1a6:	4610      	mov	r0, r2
 800f1a8:	f7fd fa1a 	bl	800c5e0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	3316      	adds	r3, #22
 800f1b0:	6939      	ldr	r1, [r7, #16]
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f7fd fa14 	bl	800c5e0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	3312      	adds	r3, #18
 800f1bc:	2100      	movs	r1, #0
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f7fd f9f3 	bl	800c5aa <st_word>
					fs->wflag = 1;
 800f1c4:	68bb      	ldr	r3, [r7, #8]
 800f1c6:	2201      	movs	r2, #1
 800f1c8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f1ca:	68bb      	ldr	r3, [r7, #8]
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f7fd fc8f 	bl	800caf0 <sync_fs>
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	7d1b      	ldrb	r3, [r3, #20]
 800f1da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f1de:	b2da      	uxtb	r2, r3
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f1e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	3718      	adds	r7, #24
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	bd80      	pop	{r7, pc}

0800f1ee <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f1ee:	b580      	push	{r7, lr}
 800f1f0:	b084      	sub	sp, #16
 800f1f2:	af00      	add	r7, sp, #0
 800f1f4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f7ff ff7b 	bl	800f0f2 <f_sync>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f200:	7bfb      	ldrb	r3, [r7, #15]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d118      	bne.n	800f238 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	f107 0208 	add.w	r2, r7, #8
 800f20c:	4611      	mov	r1, r2
 800f20e:	4618      	mov	r0, r3
 800f210:	f7ff fbc0 	bl	800e994 <validate>
 800f214:	4603      	mov	r3, r0
 800f216:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f218:	7bfb      	ldrb	r3, [r7, #15]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d10c      	bne.n	800f238 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	691b      	ldr	r3, [r3, #16]
 800f222:	4618      	mov	r0, r3
 800f224:	f7fd fb92 	bl	800c94c <dec_lock>
 800f228:	4603      	mov	r3, r0
 800f22a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f22c:	7bfb      	ldrb	r3, [r7, #15]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d102      	bne.n	800f238 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	2200      	movs	r2, #0
 800f236:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f238:	7bfb      	ldrb	r3, [r7, #15]
}
 800f23a:	4618      	mov	r0, r3
 800f23c:	3710      	adds	r7, #16
 800f23e:	46bd      	mov	sp, r7
 800f240:	bd80      	pop	{r7, pc}

0800f242 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800f242:	b580      	push	{r7, lr}
 800f244:	b086      	sub	sp, #24
 800f246:	af00      	add	r7, sp, #0
 800f248:	6078      	str	r0, [r7, #4]
 800f24a:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d101      	bne.n	800f256 <f_opendir+0x14>
 800f252:	2309      	movs	r3, #9
 800f254:	e064      	b.n	800f320 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800f25a:	f107 010c 	add.w	r1, r7, #12
 800f25e:	463b      	mov	r3, r7
 800f260:	2200      	movs	r2, #0
 800f262:	4618      	mov	r0, r3
 800f264:	f7ff f946 	bl	800e4f4 <find_volume>
 800f268:	4603      	mov	r3, r0
 800f26a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f26c:	7dfb      	ldrb	r3, [r7, #23]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d14f      	bne.n	800f312 <f_opendir+0xd0>
		obj->fs = fs;
 800f272:	68fa      	ldr	r2, [r7, #12]
 800f274:	693b      	ldr	r3, [r7, #16]
 800f276:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800f278:	683b      	ldr	r3, [r7, #0]
 800f27a:	4619      	mov	r1, r3
 800f27c:	6878      	ldr	r0, [r7, #4]
 800f27e:	f7ff f82d 	bl	800e2dc <follow_path>
 800f282:	4603      	mov	r3, r0
 800f284:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800f286:	7dfb      	ldrb	r3, [r7, #23]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d13d      	bne.n	800f308 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f292:	b25b      	sxtb	r3, r3
 800f294:	2b00      	cmp	r3, #0
 800f296:	db12      	blt.n	800f2be <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800f298:	693b      	ldr	r3, [r7, #16]
 800f29a:	799b      	ldrb	r3, [r3, #6]
 800f29c:	f003 0310 	and.w	r3, r3, #16
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d00a      	beq.n	800f2ba <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800f2a4:	68fa      	ldr	r2, [r7, #12]
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	6a1b      	ldr	r3, [r3, #32]
 800f2aa:	4619      	mov	r1, r3
 800f2ac:	4610      	mov	r0, r2
 800f2ae:	f7fe f8f6 	bl	800d49e <ld_clust>
 800f2b2:	4602      	mov	r2, r0
 800f2b4:	693b      	ldr	r3, [r7, #16]
 800f2b6:	609a      	str	r2, [r3, #8]
 800f2b8:	e001      	b.n	800f2be <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800f2ba:	2305      	movs	r3, #5
 800f2bc:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800f2be:	7dfb      	ldrb	r3, [r7, #23]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d121      	bne.n	800f308 <f_opendir+0xc6>
				obj->id = fs->id;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	88da      	ldrh	r2, [r3, #6]
 800f2c8:	693b      	ldr	r3, [r7, #16]
 800f2ca:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800f2cc:	2100      	movs	r1, #0
 800f2ce:	6878      	ldr	r0, [r7, #4]
 800f2d0:	f7fd ff5e 	bl	800d190 <dir_sdi>
 800f2d4:	4603      	mov	r3, r0
 800f2d6:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800f2d8:	7dfb      	ldrb	r3, [r7, #23]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d114      	bne.n	800f308 <f_opendir+0xc6>
					if (obj->sclust) {
 800f2de:	693b      	ldr	r3, [r7, #16]
 800f2e0:	689b      	ldr	r3, [r3, #8]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d00d      	beq.n	800f302 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800f2e6:	2100      	movs	r1, #0
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	f7fd faa1 	bl	800c830 <inc_lock>
 800f2ee:	4602      	mov	r2, r0
 800f2f0:	693b      	ldr	r3, [r7, #16]
 800f2f2:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800f2f4:	693b      	ldr	r3, [r7, #16]
 800f2f6:	691b      	ldr	r3, [r3, #16]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d105      	bne.n	800f308 <f_opendir+0xc6>
 800f2fc:	2312      	movs	r3, #18
 800f2fe:	75fb      	strb	r3, [r7, #23]
 800f300:	e002      	b.n	800f308 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800f302:	693b      	ldr	r3, [r7, #16]
 800f304:	2200      	movs	r2, #0
 800f306:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800f308:	7dfb      	ldrb	r3, [r7, #23]
 800f30a:	2b04      	cmp	r3, #4
 800f30c:	d101      	bne.n	800f312 <f_opendir+0xd0>
 800f30e:	2305      	movs	r3, #5
 800f310:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800f312:	7dfb      	ldrb	r3, [r7, #23]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d002      	beq.n	800f31e <f_opendir+0xdc>
 800f318:	693b      	ldr	r3, [r7, #16]
 800f31a:	2200      	movs	r2, #0
 800f31c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f31e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f320:	4618      	mov	r0, r3
 800f322:	3718      	adds	r7, #24
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}

0800f328 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b084      	sub	sp, #16
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	f107 0208 	add.w	r2, r7, #8
 800f336:	4611      	mov	r1, r2
 800f338:	4618      	mov	r0, r3
 800f33a:	f7ff fb2b 	bl	800e994 <validate>
 800f33e:	4603      	mov	r3, r0
 800f340:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f342:	7bfb      	ldrb	r3, [r7, #15]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d110      	bne.n	800f36a <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	691b      	ldr	r3, [r3, #16]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d006      	beq.n	800f35e <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	691b      	ldr	r3, [r3, #16]
 800f354:	4618      	mov	r0, r3
 800f356:	f7fd faf9 	bl	800c94c <dec_lock>
 800f35a:	4603      	mov	r3, r0
 800f35c:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800f35e:	7bfb      	ldrb	r3, [r7, #15]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d102      	bne.n	800f36a <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	2200      	movs	r2, #0
 800f368:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800f36a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f36c:	4618      	mov	r0, r3
 800f36e:	3710      	adds	r7, #16
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}

0800f374 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b084      	sub	sp, #16
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
 800f37c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	f107 0208 	add.w	r2, r7, #8
 800f384:	4611      	mov	r1, r2
 800f386:	4618      	mov	r0, r3
 800f388:	f7ff fb04 	bl	800e994 <validate>
 800f38c:	4603      	mov	r3, r0
 800f38e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f390:	7bfb      	ldrb	r3, [r7, #15]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d126      	bne.n	800f3e4 <f_readdir+0x70>
		if (!fno) {
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d106      	bne.n	800f3aa <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800f39c:	2100      	movs	r1, #0
 800f39e:	6878      	ldr	r0, [r7, #4]
 800f3a0:	f7fd fef6 	bl	800d190 <dir_sdi>
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	73fb      	strb	r3, [r7, #15]
 800f3a8:	e01c      	b.n	800f3e4 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800f3aa:	2100      	movs	r1, #0
 800f3ac:	6878      	ldr	r0, [r7, #4]
 800f3ae:	f7fe faa0 	bl	800d8f2 <dir_read>
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800f3b6:	7bfb      	ldrb	r3, [r7, #15]
 800f3b8:	2b04      	cmp	r3, #4
 800f3ba:	d101      	bne.n	800f3c0 <f_readdir+0x4c>
 800f3bc:	2300      	movs	r3, #0
 800f3be:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800f3c0:	7bfb      	ldrb	r3, [r7, #15]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d10e      	bne.n	800f3e4 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800f3c6:	6839      	ldr	r1, [r7, #0]
 800f3c8:	6878      	ldr	r0, [r7, #4]
 800f3ca:	f7fe fcf1 	bl	800ddb0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800f3ce:	2100      	movs	r1, #0
 800f3d0:	6878      	ldr	r0, [r7, #4]
 800f3d2:	f7fd ff58 	bl	800d286 <dir_next>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800f3da:	7bfb      	ldrb	r3, [r7, #15]
 800f3dc:	2b04      	cmp	r3, #4
 800f3de:	d101      	bne.n	800f3e4 <f_readdir+0x70>
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800f3e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	3710      	adds	r7, #16
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	bd80      	pop	{r7, pc}
	...

0800f3f0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f3f0:	b480      	push	{r7}
 800f3f2:	b087      	sub	sp, #28
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	60f8      	str	r0, [r7, #12]
 800f3f8:	60b9      	str	r1, [r7, #8]
 800f3fa:	4613      	mov	r3, r2
 800f3fc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f3fe:	2301      	movs	r3, #1
 800f400:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f402:	2300      	movs	r3, #0
 800f404:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f406:	4b1f      	ldr	r3, [pc, #124]	; (800f484 <FATFS_LinkDriverEx+0x94>)
 800f408:	7a5b      	ldrb	r3, [r3, #9]
 800f40a:	b2db      	uxtb	r3, r3
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d131      	bne.n	800f474 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f410:	4b1c      	ldr	r3, [pc, #112]	; (800f484 <FATFS_LinkDriverEx+0x94>)
 800f412:	7a5b      	ldrb	r3, [r3, #9]
 800f414:	b2db      	uxtb	r3, r3
 800f416:	461a      	mov	r2, r3
 800f418:	4b1a      	ldr	r3, [pc, #104]	; (800f484 <FATFS_LinkDriverEx+0x94>)
 800f41a:	2100      	movs	r1, #0
 800f41c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f41e:	4b19      	ldr	r3, [pc, #100]	; (800f484 <FATFS_LinkDriverEx+0x94>)
 800f420:	7a5b      	ldrb	r3, [r3, #9]
 800f422:	b2db      	uxtb	r3, r3
 800f424:	4a17      	ldr	r2, [pc, #92]	; (800f484 <FATFS_LinkDriverEx+0x94>)
 800f426:	009b      	lsls	r3, r3, #2
 800f428:	4413      	add	r3, r2
 800f42a:	68fa      	ldr	r2, [r7, #12]
 800f42c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f42e:	4b15      	ldr	r3, [pc, #84]	; (800f484 <FATFS_LinkDriverEx+0x94>)
 800f430:	7a5b      	ldrb	r3, [r3, #9]
 800f432:	b2db      	uxtb	r3, r3
 800f434:	461a      	mov	r2, r3
 800f436:	4b13      	ldr	r3, [pc, #76]	; (800f484 <FATFS_LinkDriverEx+0x94>)
 800f438:	4413      	add	r3, r2
 800f43a:	79fa      	ldrb	r2, [r7, #7]
 800f43c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f43e:	4b11      	ldr	r3, [pc, #68]	; (800f484 <FATFS_LinkDriverEx+0x94>)
 800f440:	7a5b      	ldrb	r3, [r3, #9]
 800f442:	b2db      	uxtb	r3, r3
 800f444:	1c5a      	adds	r2, r3, #1
 800f446:	b2d1      	uxtb	r1, r2
 800f448:	4a0e      	ldr	r2, [pc, #56]	; (800f484 <FATFS_LinkDriverEx+0x94>)
 800f44a:	7251      	strb	r1, [r2, #9]
 800f44c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f44e:	7dbb      	ldrb	r3, [r7, #22]
 800f450:	3330      	adds	r3, #48	; 0x30
 800f452:	b2da      	uxtb	r2, r3
 800f454:	68bb      	ldr	r3, [r7, #8]
 800f456:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f458:	68bb      	ldr	r3, [r7, #8]
 800f45a:	3301      	adds	r3, #1
 800f45c:	223a      	movs	r2, #58	; 0x3a
 800f45e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f460:	68bb      	ldr	r3, [r7, #8]
 800f462:	3302      	adds	r3, #2
 800f464:	222f      	movs	r2, #47	; 0x2f
 800f466:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f468:	68bb      	ldr	r3, [r7, #8]
 800f46a:	3303      	adds	r3, #3
 800f46c:	2200      	movs	r2, #0
 800f46e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f470:	2300      	movs	r3, #0
 800f472:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f474:	7dfb      	ldrb	r3, [r7, #23]
}
 800f476:	4618      	mov	r0, r3
 800f478:	371c      	adds	r7, #28
 800f47a:	46bd      	mov	sp, r7
 800f47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f480:	4770      	bx	lr
 800f482:	bf00      	nop
 800f484:	20003498 	.word	0x20003498

0800f488 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b082      	sub	sp, #8
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
 800f490:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f492:	2200      	movs	r2, #0
 800f494:	6839      	ldr	r1, [r7, #0]
 800f496:	6878      	ldr	r0, [r7, #4]
 800f498:	f7ff ffaa 	bl	800f3f0 <FATFS_LinkDriverEx>
 800f49c:	4603      	mov	r3, r0
}
 800f49e:	4618      	mov	r0, r3
 800f4a0:	3708      	adds	r7, #8
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	bd80      	pop	{r7, pc}
	...

0800f4a8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f4a8:	b480      	push	{r7}
 800f4aa:	b085      	sub	sp, #20
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	6039      	str	r1, [r7, #0]
 800f4b2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f4b4:	88fb      	ldrh	r3, [r7, #6]
 800f4b6:	2b7f      	cmp	r3, #127	; 0x7f
 800f4b8:	d802      	bhi.n	800f4c0 <ff_convert+0x18>
		c = chr;
 800f4ba:	88fb      	ldrh	r3, [r7, #6]
 800f4bc:	81fb      	strh	r3, [r7, #14]
 800f4be:	e025      	b.n	800f50c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800f4c0:	683b      	ldr	r3, [r7, #0]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d00b      	beq.n	800f4de <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f4c6:	88fb      	ldrh	r3, [r7, #6]
 800f4c8:	2bff      	cmp	r3, #255	; 0xff
 800f4ca:	d805      	bhi.n	800f4d8 <ff_convert+0x30>
 800f4cc:	88fb      	ldrh	r3, [r7, #6]
 800f4ce:	3b80      	subs	r3, #128	; 0x80
 800f4d0:	4a12      	ldr	r2, [pc, #72]	; (800f51c <ff_convert+0x74>)
 800f4d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f4d6:	e000      	b.n	800f4da <ff_convert+0x32>
 800f4d8:	2300      	movs	r3, #0
 800f4da:	81fb      	strh	r3, [r7, #14]
 800f4dc:	e016      	b.n	800f50c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f4de:	2300      	movs	r3, #0
 800f4e0:	81fb      	strh	r3, [r7, #14]
 800f4e2:	e009      	b.n	800f4f8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f4e4:	89fb      	ldrh	r3, [r7, #14]
 800f4e6:	4a0d      	ldr	r2, [pc, #52]	; (800f51c <ff_convert+0x74>)
 800f4e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f4ec:	88fa      	ldrh	r2, [r7, #6]
 800f4ee:	429a      	cmp	r2, r3
 800f4f0:	d006      	beq.n	800f500 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f4f2:	89fb      	ldrh	r3, [r7, #14]
 800f4f4:	3301      	adds	r3, #1
 800f4f6:	81fb      	strh	r3, [r7, #14]
 800f4f8:	89fb      	ldrh	r3, [r7, #14]
 800f4fa:	2b7f      	cmp	r3, #127	; 0x7f
 800f4fc:	d9f2      	bls.n	800f4e4 <ff_convert+0x3c>
 800f4fe:	e000      	b.n	800f502 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f500:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f502:	89fb      	ldrh	r3, [r7, #14]
 800f504:	3380      	adds	r3, #128	; 0x80
 800f506:	b29b      	uxth	r3, r3
 800f508:	b2db      	uxtb	r3, r3
 800f50a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f50c:	89fb      	ldrh	r3, [r7, #14]
}
 800f50e:	4618      	mov	r0, r3
 800f510:	3714      	adds	r7, #20
 800f512:	46bd      	mov	sp, r7
 800f514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f518:	4770      	bx	lr
 800f51a:	bf00      	nop
 800f51c:	08011a74 	.word	0x08011a74

0800f520 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f520:	b480      	push	{r7}
 800f522:	b087      	sub	sp, #28
 800f524:	af00      	add	r7, sp, #0
 800f526:	4603      	mov	r3, r0
 800f528:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f52a:	88fb      	ldrh	r3, [r7, #6]
 800f52c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f530:	d201      	bcs.n	800f536 <ff_wtoupper+0x16>
 800f532:	4b3e      	ldr	r3, [pc, #248]	; (800f62c <ff_wtoupper+0x10c>)
 800f534:	e000      	b.n	800f538 <ff_wtoupper+0x18>
 800f536:	4b3e      	ldr	r3, [pc, #248]	; (800f630 <ff_wtoupper+0x110>)
 800f538:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f53a:	697b      	ldr	r3, [r7, #20]
 800f53c:	1c9a      	adds	r2, r3, #2
 800f53e:	617a      	str	r2, [r7, #20]
 800f540:	881b      	ldrh	r3, [r3, #0]
 800f542:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f544:	8a7b      	ldrh	r3, [r7, #18]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d068      	beq.n	800f61c <ff_wtoupper+0xfc>
 800f54a:	88fa      	ldrh	r2, [r7, #6]
 800f54c:	8a7b      	ldrh	r3, [r7, #18]
 800f54e:	429a      	cmp	r2, r3
 800f550:	d364      	bcc.n	800f61c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f552:	697b      	ldr	r3, [r7, #20]
 800f554:	1c9a      	adds	r2, r3, #2
 800f556:	617a      	str	r2, [r7, #20]
 800f558:	881b      	ldrh	r3, [r3, #0]
 800f55a:	823b      	strh	r3, [r7, #16]
 800f55c:	8a3b      	ldrh	r3, [r7, #16]
 800f55e:	0a1b      	lsrs	r3, r3, #8
 800f560:	81fb      	strh	r3, [r7, #14]
 800f562:	8a3b      	ldrh	r3, [r7, #16]
 800f564:	b2db      	uxtb	r3, r3
 800f566:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f568:	88fa      	ldrh	r2, [r7, #6]
 800f56a:	8a79      	ldrh	r1, [r7, #18]
 800f56c:	8a3b      	ldrh	r3, [r7, #16]
 800f56e:	440b      	add	r3, r1
 800f570:	429a      	cmp	r2, r3
 800f572:	da49      	bge.n	800f608 <ff_wtoupper+0xe8>
			switch (cmd) {
 800f574:	89fb      	ldrh	r3, [r7, #14]
 800f576:	2b08      	cmp	r3, #8
 800f578:	d84f      	bhi.n	800f61a <ff_wtoupper+0xfa>
 800f57a:	a201      	add	r2, pc, #4	; (adr r2, 800f580 <ff_wtoupper+0x60>)
 800f57c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f580:	0800f5a5 	.word	0x0800f5a5
 800f584:	0800f5b7 	.word	0x0800f5b7
 800f588:	0800f5cd 	.word	0x0800f5cd
 800f58c:	0800f5d5 	.word	0x0800f5d5
 800f590:	0800f5dd 	.word	0x0800f5dd
 800f594:	0800f5e5 	.word	0x0800f5e5
 800f598:	0800f5ed 	.word	0x0800f5ed
 800f59c:	0800f5f5 	.word	0x0800f5f5
 800f5a0:	0800f5fd 	.word	0x0800f5fd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f5a4:	88fa      	ldrh	r2, [r7, #6]
 800f5a6:	8a7b      	ldrh	r3, [r7, #18]
 800f5a8:	1ad3      	subs	r3, r2, r3
 800f5aa:	005b      	lsls	r3, r3, #1
 800f5ac:	697a      	ldr	r2, [r7, #20]
 800f5ae:	4413      	add	r3, r2
 800f5b0:	881b      	ldrh	r3, [r3, #0]
 800f5b2:	80fb      	strh	r3, [r7, #6]
 800f5b4:	e027      	b.n	800f606 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f5b6:	88fa      	ldrh	r2, [r7, #6]
 800f5b8:	8a7b      	ldrh	r3, [r7, #18]
 800f5ba:	1ad3      	subs	r3, r2, r3
 800f5bc:	b29b      	uxth	r3, r3
 800f5be:	f003 0301 	and.w	r3, r3, #1
 800f5c2:	b29b      	uxth	r3, r3
 800f5c4:	88fa      	ldrh	r2, [r7, #6]
 800f5c6:	1ad3      	subs	r3, r2, r3
 800f5c8:	80fb      	strh	r3, [r7, #6]
 800f5ca:	e01c      	b.n	800f606 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f5cc:	88fb      	ldrh	r3, [r7, #6]
 800f5ce:	3b10      	subs	r3, #16
 800f5d0:	80fb      	strh	r3, [r7, #6]
 800f5d2:	e018      	b.n	800f606 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f5d4:	88fb      	ldrh	r3, [r7, #6]
 800f5d6:	3b20      	subs	r3, #32
 800f5d8:	80fb      	strh	r3, [r7, #6]
 800f5da:	e014      	b.n	800f606 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f5dc:	88fb      	ldrh	r3, [r7, #6]
 800f5de:	3b30      	subs	r3, #48	; 0x30
 800f5e0:	80fb      	strh	r3, [r7, #6]
 800f5e2:	e010      	b.n	800f606 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f5e4:	88fb      	ldrh	r3, [r7, #6]
 800f5e6:	3b1a      	subs	r3, #26
 800f5e8:	80fb      	strh	r3, [r7, #6]
 800f5ea:	e00c      	b.n	800f606 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f5ec:	88fb      	ldrh	r3, [r7, #6]
 800f5ee:	3308      	adds	r3, #8
 800f5f0:	80fb      	strh	r3, [r7, #6]
 800f5f2:	e008      	b.n	800f606 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f5f4:	88fb      	ldrh	r3, [r7, #6]
 800f5f6:	3b50      	subs	r3, #80	; 0x50
 800f5f8:	80fb      	strh	r3, [r7, #6]
 800f5fa:	e004      	b.n	800f606 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f5fc:	88fb      	ldrh	r3, [r7, #6]
 800f5fe:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800f602:	80fb      	strh	r3, [r7, #6]
 800f604:	bf00      	nop
			}
			break;
 800f606:	e008      	b.n	800f61a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f608:	89fb      	ldrh	r3, [r7, #14]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d195      	bne.n	800f53a <ff_wtoupper+0x1a>
 800f60e:	8a3b      	ldrh	r3, [r7, #16]
 800f610:	005b      	lsls	r3, r3, #1
 800f612:	697a      	ldr	r2, [r7, #20]
 800f614:	4413      	add	r3, r2
 800f616:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f618:	e78f      	b.n	800f53a <ff_wtoupper+0x1a>
			break;
 800f61a:	bf00      	nop
	}

	return chr;
 800f61c:	88fb      	ldrh	r3, [r7, #6]
}
 800f61e:	4618      	mov	r0, r3
 800f620:	371c      	adds	r7, #28
 800f622:	46bd      	mov	sp, r7
 800f624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f628:	4770      	bx	lr
 800f62a:	bf00      	nop
 800f62c:	08011b74 	.word	0x08011b74
 800f630:	08011d68 	.word	0x08011d68

0800f634 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f634:	b580      	push	{r7, lr}
 800f636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f638:	2200      	movs	r2, #0
 800f63a:	4912      	ldr	r1, [pc, #72]	; (800f684 <MX_USB_DEVICE_Init+0x50>)
 800f63c:	4812      	ldr	r0, [pc, #72]	; (800f688 <MX_USB_DEVICE_Init+0x54>)
 800f63e:	f7fb fbbf 	bl	800adc0 <USBD_Init>
 800f642:	4603      	mov	r3, r0
 800f644:	2b00      	cmp	r3, #0
 800f646:	d001      	beq.n	800f64c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f648:	f7f1 fddc 	bl	8001204 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f64c:	490f      	ldr	r1, [pc, #60]	; (800f68c <MX_USB_DEVICE_Init+0x58>)
 800f64e:	480e      	ldr	r0, [pc, #56]	; (800f688 <MX_USB_DEVICE_Init+0x54>)
 800f650:	f7fb fbe6 	bl	800ae20 <USBD_RegisterClass>
 800f654:	4603      	mov	r3, r0
 800f656:	2b00      	cmp	r3, #0
 800f658:	d001      	beq.n	800f65e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f65a:	f7f1 fdd3 	bl	8001204 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f65e:	490c      	ldr	r1, [pc, #48]	; (800f690 <MX_USB_DEVICE_Init+0x5c>)
 800f660:	4809      	ldr	r0, [pc, #36]	; (800f688 <MX_USB_DEVICE_Init+0x54>)
 800f662:	f7fb fadd 	bl	800ac20 <USBD_CDC_RegisterInterface>
 800f666:	4603      	mov	r3, r0
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d001      	beq.n	800f670 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f66c:	f7f1 fdca 	bl	8001204 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f670:	4805      	ldr	r0, [pc, #20]	; (800f688 <MX_USB_DEVICE_Init+0x54>)
 800f672:	f7fb fc0b 	bl	800ae8c <USBD_Start>
 800f676:	4603      	mov	r3, r0
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d001      	beq.n	800f680 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f67c:	f7f1 fdc2 	bl	8001204 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f680:	bf00      	nop
 800f682:	bd80      	pop	{r7, pc}
 800f684:	200000ac 	.word	0x200000ac
 800f688:	200034a4 	.word	0x200034a4
 800f68c:	20000018 	.word	0x20000018
 800f690:	20000098 	.word	0x20000098

0800f694 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f694:	b580      	push	{r7, lr}
 800f696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f698:	2200      	movs	r2, #0
 800f69a:	4905      	ldr	r1, [pc, #20]	; (800f6b0 <CDC_Init_FS+0x1c>)
 800f69c:	4805      	ldr	r0, [pc, #20]	; (800f6b4 <CDC_Init_FS+0x20>)
 800f69e:	f7fb fad9 	bl	800ac54 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f6a2:	4905      	ldr	r1, [pc, #20]	; (800f6b8 <CDC_Init_FS+0x24>)
 800f6a4:	4803      	ldr	r0, [pc, #12]	; (800f6b4 <CDC_Init_FS+0x20>)
 800f6a6:	f7fb faf7 	bl	800ac98 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f6aa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	bd80      	pop	{r7, pc}
 800f6b0:	20003f80 	.word	0x20003f80
 800f6b4:	200034a4 	.word	0x200034a4
 800f6b8:	20003780 	.word	0x20003780

0800f6bc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f6bc:	b480      	push	{r7}
 800f6be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f6c0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ca:	4770      	bx	lr

0800f6cc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f6cc:	b480      	push	{r7}
 800f6ce:	b083      	sub	sp, #12
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	6039      	str	r1, [r7, #0]
 800f6d6:	71fb      	strb	r3, [r7, #7]
 800f6d8:	4613      	mov	r3, r2
 800f6da:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f6dc:	79fb      	ldrb	r3, [r7, #7]
 800f6de:	2b23      	cmp	r3, #35	; 0x23
 800f6e0:	d84a      	bhi.n	800f778 <CDC_Control_FS+0xac>
 800f6e2:	a201      	add	r2, pc, #4	; (adr r2, 800f6e8 <CDC_Control_FS+0x1c>)
 800f6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6e8:	0800f779 	.word	0x0800f779
 800f6ec:	0800f779 	.word	0x0800f779
 800f6f0:	0800f779 	.word	0x0800f779
 800f6f4:	0800f779 	.word	0x0800f779
 800f6f8:	0800f779 	.word	0x0800f779
 800f6fc:	0800f779 	.word	0x0800f779
 800f700:	0800f779 	.word	0x0800f779
 800f704:	0800f779 	.word	0x0800f779
 800f708:	0800f779 	.word	0x0800f779
 800f70c:	0800f779 	.word	0x0800f779
 800f710:	0800f779 	.word	0x0800f779
 800f714:	0800f779 	.word	0x0800f779
 800f718:	0800f779 	.word	0x0800f779
 800f71c:	0800f779 	.word	0x0800f779
 800f720:	0800f779 	.word	0x0800f779
 800f724:	0800f779 	.word	0x0800f779
 800f728:	0800f779 	.word	0x0800f779
 800f72c:	0800f779 	.word	0x0800f779
 800f730:	0800f779 	.word	0x0800f779
 800f734:	0800f779 	.word	0x0800f779
 800f738:	0800f779 	.word	0x0800f779
 800f73c:	0800f779 	.word	0x0800f779
 800f740:	0800f779 	.word	0x0800f779
 800f744:	0800f779 	.word	0x0800f779
 800f748:	0800f779 	.word	0x0800f779
 800f74c:	0800f779 	.word	0x0800f779
 800f750:	0800f779 	.word	0x0800f779
 800f754:	0800f779 	.word	0x0800f779
 800f758:	0800f779 	.word	0x0800f779
 800f75c:	0800f779 	.word	0x0800f779
 800f760:	0800f779 	.word	0x0800f779
 800f764:	0800f779 	.word	0x0800f779
 800f768:	0800f779 	.word	0x0800f779
 800f76c:	0800f779 	.word	0x0800f779
 800f770:	0800f779 	.word	0x0800f779
 800f774:	0800f779 	.word	0x0800f779
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f778:	bf00      	nop
  }

  return (USBD_OK);
 800f77a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f77c:	4618      	mov	r0, r3
 800f77e:	370c      	adds	r7, #12
 800f780:	46bd      	mov	sp, r7
 800f782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f786:	4770      	bx	lr

0800f788 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b082      	sub	sp, #8
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
 800f790:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f792:	6879      	ldr	r1, [r7, #4]
 800f794:	4805      	ldr	r0, [pc, #20]	; (800f7ac <CDC_Receive_FS+0x24>)
 800f796:	f7fb fa7f 	bl	800ac98 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f79a:	4804      	ldr	r0, [pc, #16]	; (800f7ac <CDC_Receive_FS+0x24>)
 800f79c:	f7fb fada 	bl	800ad54 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f7a0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	3708      	adds	r7, #8
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	bd80      	pop	{r7, pc}
 800f7aa:	bf00      	nop
 800f7ac:	200034a4 	.word	0x200034a4

0800f7b0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b084      	sub	sp, #16
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
 800f7b8:	460b      	mov	r3, r1
 800f7ba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f7bc:	2300      	movs	r3, #0
 800f7be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f7c0:	4b0d      	ldr	r3, [pc, #52]	; (800f7f8 <CDC_Transmit_FS+0x48>)
 800f7c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f7c6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f7c8:	68bb      	ldr	r3, [r7, #8]
 800f7ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d001      	beq.n	800f7d6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f7d2:	2301      	movs	r3, #1
 800f7d4:	e00b      	b.n	800f7ee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f7d6:	887b      	ldrh	r3, [r7, #2]
 800f7d8:	461a      	mov	r2, r3
 800f7da:	6879      	ldr	r1, [r7, #4]
 800f7dc:	4806      	ldr	r0, [pc, #24]	; (800f7f8 <CDC_Transmit_FS+0x48>)
 800f7de:	f7fb fa39 	bl	800ac54 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f7e2:	4805      	ldr	r0, [pc, #20]	; (800f7f8 <CDC_Transmit_FS+0x48>)
 800f7e4:	f7fb fa76 	bl	800acd4 <USBD_CDC_TransmitPacket>
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f7ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	3710      	adds	r7, #16
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bd80      	pop	{r7, pc}
 800f7f6:	bf00      	nop
 800f7f8:	200034a4 	.word	0x200034a4

0800f7fc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f7fc:	b480      	push	{r7}
 800f7fe:	b087      	sub	sp, #28
 800f800:	af00      	add	r7, sp, #0
 800f802:	60f8      	str	r0, [r7, #12]
 800f804:	60b9      	str	r1, [r7, #8]
 800f806:	4613      	mov	r3, r2
 800f808:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f80a:	2300      	movs	r3, #0
 800f80c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f80e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f812:	4618      	mov	r0, r3
 800f814:	371c      	adds	r7, #28
 800f816:	46bd      	mov	sp, r7
 800f818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81c:	4770      	bx	lr
	...

0800f820 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f820:	b480      	push	{r7}
 800f822:	b083      	sub	sp, #12
 800f824:	af00      	add	r7, sp, #0
 800f826:	4603      	mov	r3, r0
 800f828:	6039      	str	r1, [r7, #0]
 800f82a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f82c:	683b      	ldr	r3, [r7, #0]
 800f82e:	2212      	movs	r2, #18
 800f830:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f832:	4b03      	ldr	r3, [pc, #12]	; (800f840 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f834:	4618      	mov	r0, r3
 800f836:	370c      	adds	r7, #12
 800f838:	46bd      	mov	sp, r7
 800f83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83e:	4770      	bx	lr
 800f840:	200000cc 	.word	0x200000cc

0800f844 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f844:	b480      	push	{r7}
 800f846:	b083      	sub	sp, #12
 800f848:	af00      	add	r7, sp, #0
 800f84a:	4603      	mov	r3, r0
 800f84c:	6039      	str	r1, [r7, #0]
 800f84e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f850:	683b      	ldr	r3, [r7, #0]
 800f852:	2204      	movs	r2, #4
 800f854:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f856:	4b03      	ldr	r3, [pc, #12]	; (800f864 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f858:	4618      	mov	r0, r3
 800f85a:	370c      	adds	r7, #12
 800f85c:	46bd      	mov	sp, r7
 800f85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f862:	4770      	bx	lr
 800f864:	200000ec 	.word	0x200000ec

0800f868 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b082      	sub	sp, #8
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	4603      	mov	r3, r0
 800f870:	6039      	str	r1, [r7, #0]
 800f872:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f874:	79fb      	ldrb	r3, [r7, #7]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d105      	bne.n	800f886 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f87a:	683a      	ldr	r2, [r7, #0]
 800f87c:	4907      	ldr	r1, [pc, #28]	; (800f89c <USBD_FS_ProductStrDescriptor+0x34>)
 800f87e:	4808      	ldr	r0, [pc, #32]	; (800f8a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800f880:	f7fc fcda 	bl	800c238 <USBD_GetString>
 800f884:	e004      	b.n	800f890 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f886:	683a      	ldr	r2, [r7, #0]
 800f888:	4904      	ldr	r1, [pc, #16]	; (800f89c <USBD_FS_ProductStrDescriptor+0x34>)
 800f88a:	4805      	ldr	r0, [pc, #20]	; (800f8a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800f88c:	f7fc fcd4 	bl	800c238 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f890:	4b02      	ldr	r3, [pc, #8]	; (800f89c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f892:	4618      	mov	r0, r3
 800f894:	3708      	adds	r7, #8
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}
 800f89a:	bf00      	nop
 800f89c:	20004780 	.word	0x20004780
 800f8a0:	08011968 	.word	0x08011968

0800f8a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b082      	sub	sp, #8
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	6039      	str	r1, [r7, #0]
 800f8ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f8b0:	683a      	ldr	r2, [r7, #0]
 800f8b2:	4904      	ldr	r1, [pc, #16]	; (800f8c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f8b4:	4804      	ldr	r0, [pc, #16]	; (800f8c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f8b6:	f7fc fcbf 	bl	800c238 <USBD_GetString>
  return USBD_StrDesc;
 800f8ba:	4b02      	ldr	r3, [pc, #8]	; (800f8c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f8bc:	4618      	mov	r0, r3
 800f8be:	3708      	adds	r7, #8
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	bd80      	pop	{r7, pc}
 800f8c4:	20004780 	.word	0x20004780
 800f8c8:	08011980 	.word	0x08011980

0800f8cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b082      	sub	sp, #8
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	6039      	str	r1, [r7, #0]
 800f8d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f8d8:	683b      	ldr	r3, [r7, #0]
 800f8da:	221a      	movs	r2, #26
 800f8dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f8de:	f000 f855 	bl	800f98c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f8e2:	4b02      	ldr	r3, [pc, #8]	; (800f8ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	3708      	adds	r7, #8
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	bd80      	pop	{r7, pc}
 800f8ec:	200000f0 	.word	0x200000f0

0800f8f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b082      	sub	sp, #8
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	6039      	str	r1, [r7, #0]
 800f8fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f8fc:	79fb      	ldrb	r3, [r7, #7]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d105      	bne.n	800f90e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f902:	683a      	ldr	r2, [r7, #0]
 800f904:	4907      	ldr	r1, [pc, #28]	; (800f924 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f906:	4808      	ldr	r0, [pc, #32]	; (800f928 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f908:	f7fc fc96 	bl	800c238 <USBD_GetString>
 800f90c:	e004      	b.n	800f918 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f90e:	683a      	ldr	r2, [r7, #0]
 800f910:	4904      	ldr	r1, [pc, #16]	; (800f924 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f912:	4805      	ldr	r0, [pc, #20]	; (800f928 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f914:	f7fc fc90 	bl	800c238 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f918:	4b02      	ldr	r3, [pc, #8]	; (800f924 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f91a:	4618      	mov	r0, r3
 800f91c:	3708      	adds	r7, #8
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd80      	pop	{r7, pc}
 800f922:	bf00      	nop
 800f924:	20004780 	.word	0x20004780
 800f928:	08011994 	.word	0x08011994

0800f92c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b082      	sub	sp, #8
 800f930:	af00      	add	r7, sp, #0
 800f932:	4603      	mov	r3, r0
 800f934:	6039      	str	r1, [r7, #0]
 800f936:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f938:	79fb      	ldrb	r3, [r7, #7]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d105      	bne.n	800f94a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f93e:	683a      	ldr	r2, [r7, #0]
 800f940:	4907      	ldr	r1, [pc, #28]	; (800f960 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f942:	4808      	ldr	r0, [pc, #32]	; (800f964 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f944:	f7fc fc78 	bl	800c238 <USBD_GetString>
 800f948:	e004      	b.n	800f954 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f94a:	683a      	ldr	r2, [r7, #0]
 800f94c:	4904      	ldr	r1, [pc, #16]	; (800f960 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f94e:	4805      	ldr	r0, [pc, #20]	; (800f964 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f950:	f7fc fc72 	bl	800c238 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f954:	4b02      	ldr	r3, [pc, #8]	; (800f960 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f956:	4618      	mov	r0, r3
 800f958:	3708      	adds	r7, #8
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd80      	pop	{r7, pc}
 800f95e:	bf00      	nop
 800f960:	20004780 	.word	0x20004780
 800f964:	080119a0 	.word	0x080119a0

0800f968 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f968:	b480      	push	{r7}
 800f96a:	b083      	sub	sp, #12
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	4603      	mov	r3, r0
 800f970:	6039      	str	r1, [r7, #0]
 800f972:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	220c      	movs	r2, #12
 800f978:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800f97a:	4b03      	ldr	r3, [pc, #12]	; (800f988 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800f97c:	4618      	mov	r0, r3
 800f97e:	370c      	adds	r7, #12
 800f980:	46bd      	mov	sp, r7
 800f982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f986:	4770      	bx	lr
 800f988:	200000e0 	.word	0x200000e0

0800f98c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b084      	sub	sp, #16
 800f990:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f992:	4b0f      	ldr	r3, [pc, #60]	; (800f9d0 <Get_SerialNum+0x44>)
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f998:	4b0e      	ldr	r3, [pc, #56]	; (800f9d4 <Get_SerialNum+0x48>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f99e:	4b0e      	ldr	r3, [pc, #56]	; (800f9d8 <Get_SerialNum+0x4c>)
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f9a4:	68fa      	ldr	r2, [r7, #12]
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	4413      	add	r3, r2
 800f9aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d009      	beq.n	800f9c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f9b2:	2208      	movs	r2, #8
 800f9b4:	4909      	ldr	r1, [pc, #36]	; (800f9dc <Get_SerialNum+0x50>)
 800f9b6:	68f8      	ldr	r0, [r7, #12]
 800f9b8:	f000 f814 	bl	800f9e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f9bc:	2204      	movs	r2, #4
 800f9be:	4908      	ldr	r1, [pc, #32]	; (800f9e0 <Get_SerialNum+0x54>)
 800f9c0:	68b8      	ldr	r0, [r7, #8]
 800f9c2:	f000 f80f 	bl	800f9e4 <IntToUnicode>
  }
}
 800f9c6:	bf00      	nop
 800f9c8:	3710      	adds	r7, #16
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	bd80      	pop	{r7, pc}
 800f9ce:	bf00      	nop
 800f9d0:	1ff0f420 	.word	0x1ff0f420
 800f9d4:	1ff0f424 	.word	0x1ff0f424
 800f9d8:	1ff0f428 	.word	0x1ff0f428
 800f9dc:	200000f2 	.word	0x200000f2
 800f9e0:	20000102 	.word	0x20000102

0800f9e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f9e4:	b480      	push	{r7}
 800f9e6:	b087      	sub	sp, #28
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	60f8      	str	r0, [r7, #12]
 800f9ec:	60b9      	str	r1, [r7, #8]
 800f9ee:	4613      	mov	r3, r2
 800f9f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	75fb      	strb	r3, [r7, #23]
 800f9fa:	e027      	b.n	800fa4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	0f1b      	lsrs	r3, r3, #28
 800fa00:	2b09      	cmp	r3, #9
 800fa02:	d80b      	bhi.n	800fa1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	0f1b      	lsrs	r3, r3, #28
 800fa08:	b2da      	uxtb	r2, r3
 800fa0a:	7dfb      	ldrb	r3, [r7, #23]
 800fa0c:	005b      	lsls	r3, r3, #1
 800fa0e:	4619      	mov	r1, r3
 800fa10:	68bb      	ldr	r3, [r7, #8]
 800fa12:	440b      	add	r3, r1
 800fa14:	3230      	adds	r2, #48	; 0x30
 800fa16:	b2d2      	uxtb	r2, r2
 800fa18:	701a      	strb	r2, [r3, #0]
 800fa1a:	e00a      	b.n	800fa32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	0f1b      	lsrs	r3, r3, #28
 800fa20:	b2da      	uxtb	r2, r3
 800fa22:	7dfb      	ldrb	r3, [r7, #23]
 800fa24:	005b      	lsls	r3, r3, #1
 800fa26:	4619      	mov	r1, r3
 800fa28:	68bb      	ldr	r3, [r7, #8]
 800fa2a:	440b      	add	r3, r1
 800fa2c:	3237      	adds	r2, #55	; 0x37
 800fa2e:	b2d2      	uxtb	r2, r2
 800fa30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	011b      	lsls	r3, r3, #4
 800fa36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fa38:	7dfb      	ldrb	r3, [r7, #23]
 800fa3a:	005b      	lsls	r3, r3, #1
 800fa3c:	3301      	adds	r3, #1
 800fa3e:	68ba      	ldr	r2, [r7, #8]
 800fa40:	4413      	add	r3, r2
 800fa42:	2200      	movs	r2, #0
 800fa44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fa46:	7dfb      	ldrb	r3, [r7, #23]
 800fa48:	3301      	adds	r3, #1
 800fa4a:	75fb      	strb	r3, [r7, #23]
 800fa4c:	7dfa      	ldrb	r2, [r7, #23]
 800fa4e:	79fb      	ldrb	r3, [r7, #7]
 800fa50:	429a      	cmp	r2, r3
 800fa52:	d3d3      	bcc.n	800f9fc <IntToUnicode+0x18>
  }
}
 800fa54:	bf00      	nop
 800fa56:	bf00      	nop
 800fa58:	371c      	adds	r7, #28
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa60:	4770      	bx	lr
	...

0800fa64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b0ae      	sub	sp, #184	; 0xb8
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fa6c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fa70:	2200      	movs	r2, #0
 800fa72:	601a      	str	r2, [r3, #0]
 800fa74:	605a      	str	r2, [r3, #4]
 800fa76:	609a      	str	r2, [r3, #8]
 800fa78:	60da      	str	r2, [r3, #12]
 800fa7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800fa7c:	f107 0314 	add.w	r3, r7, #20
 800fa80:	2290      	movs	r2, #144	; 0x90
 800fa82:	2100      	movs	r1, #0
 800fa84:	4618      	mov	r0, r3
 800fa86:	f000 fe16 	bl	80106b6 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fa92:	d151      	bne.n	800fb38 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800fa94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800fa98:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800faa0:	f107 0314 	add.w	r3, r7, #20
 800faa4:	4618      	mov	r0, r3
 800faa6:	f7f5 fc01 	bl	80052ac <HAL_RCCEx_PeriphCLKConfig>
 800faaa:	4603      	mov	r3, r0
 800faac:	2b00      	cmp	r3, #0
 800faae:	d001      	beq.n	800fab4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800fab0:	f7f1 fba8 	bl	8001204 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fab4:	4b22      	ldr	r3, [pc, #136]	; (800fb40 <HAL_PCD_MspInit+0xdc>)
 800fab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fab8:	4a21      	ldr	r2, [pc, #132]	; (800fb40 <HAL_PCD_MspInit+0xdc>)
 800faba:	f043 0301 	orr.w	r3, r3, #1
 800fabe:	6313      	str	r3, [r2, #48]	; 0x30
 800fac0:	4b1f      	ldr	r3, [pc, #124]	; (800fb40 <HAL_PCD_MspInit+0xdc>)
 800fac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fac4:	f003 0301 	and.w	r3, r3, #1
 800fac8:	613b      	str	r3, [r7, #16]
 800faca:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800facc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800fad0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fad4:	2302      	movs	r3, #2
 800fad6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fada:	2300      	movs	r3, #0
 800fadc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fae0:	2303      	movs	r3, #3
 800fae2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fae6:	230a      	movs	r3, #10
 800fae8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800faec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800faf0:	4619      	mov	r1, r3
 800faf2:	4814      	ldr	r0, [pc, #80]	; (800fb44 <HAL_PCD_MspInit+0xe0>)
 800faf4:	f7f3 fa3c 	bl	8002f70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800faf8:	4b11      	ldr	r3, [pc, #68]	; (800fb40 <HAL_PCD_MspInit+0xdc>)
 800fafa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fafc:	4a10      	ldr	r2, [pc, #64]	; (800fb40 <HAL_PCD_MspInit+0xdc>)
 800fafe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb02:	6353      	str	r3, [r2, #52]	; 0x34
 800fb04:	4b0e      	ldr	r3, [pc, #56]	; (800fb40 <HAL_PCD_MspInit+0xdc>)
 800fb06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fb0c:	60fb      	str	r3, [r7, #12]
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	4b0b      	ldr	r3, [pc, #44]	; (800fb40 <HAL_PCD_MspInit+0xdc>)
 800fb12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb14:	4a0a      	ldr	r2, [pc, #40]	; (800fb40 <HAL_PCD_MspInit+0xdc>)
 800fb16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fb1a:	6453      	str	r3, [r2, #68]	; 0x44
 800fb1c:	4b08      	ldr	r3, [pc, #32]	; (800fb40 <HAL_PCD_MspInit+0xdc>)
 800fb1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fb24:	60bb      	str	r3, [r7, #8]
 800fb26:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800fb28:	2200      	movs	r2, #0
 800fb2a:	2100      	movs	r1, #0
 800fb2c:	2043      	movs	r0, #67	; 0x43
 800fb2e:	f7f2 fe42 	bl	80027b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fb32:	2043      	movs	r0, #67	; 0x43
 800fb34:	f7f2 fe5b 	bl	80027ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fb38:	bf00      	nop
 800fb3a:	37b8      	adds	r7, #184	; 0xb8
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bd80      	pop	{r7, pc}
 800fb40:	40023800 	.word	0x40023800
 800fb44:	40020000 	.word	0x40020000

0800fb48 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b082      	sub	sp, #8
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800fb5c:	4619      	mov	r1, r3
 800fb5e:	4610      	mov	r0, r2
 800fb60:	f7fb f9e1 	bl	800af26 <USBD_LL_SetupStage>
}
 800fb64:	bf00      	nop
 800fb66:	3708      	adds	r7, #8
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	bd80      	pop	{r7, pc}

0800fb6c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b082      	sub	sp, #8
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
 800fb74:	460b      	mov	r3, r1
 800fb76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800fb7e:	78fa      	ldrb	r2, [r7, #3]
 800fb80:	6879      	ldr	r1, [r7, #4]
 800fb82:	4613      	mov	r3, r2
 800fb84:	00db      	lsls	r3, r3, #3
 800fb86:	4413      	add	r3, r2
 800fb88:	009b      	lsls	r3, r3, #2
 800fb8a:	440b      	add	r3, r1
 800fb8c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800fb90:	681a      	ldr	r2, [r3, #0]
 800fb92:	78fb      	ldrb	r3, [r7, #3]
 800fb94:	4619      	mov	r1, r3
 800fb96:	f7fb fa1b 	bl	800afd0 <USBD_LL_DataOutStage>
}
 800fb9a:	bf00      	nop
 800fb9c:	3708      	adds	r7, #8
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}

0800fba2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fba2:	b580      	push	{r7, lr}
 800fba4:	b082      	sub	sp, #8
 800fba6:	af00      	add	r7, sp, #0
 800fba8:	6078      	str	r0, [r7, #4]
 800fbaa:	460b      	mov	r3, r1
 800fbac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800fbb4:	78fa      	ldrb	r2, [r7, #3]
 800fbb6:	6879      	ldr	r1, [r7, #4]
 800fbb8:	4613      	mov	r3, r2
 800fbba:	00db      	lsls	r3, r3, #3
 800fbbc:	4413      	add	r3, r2
 800fbbe:	009b      	lsls	r3, r3, #2
 800fbc0:	440b      	add	r3, r1
 800fbc2:	334c      	adds	r3, #76	; 0x4c
 800fbc4:	681a      	ldr	r2, [r3, #0]
 800fbc6:	78fb      	ldrb	r3, [r7, #3]
 800fbc8:	4619      	mov	r1, r3
 800fbca:	f7fb fab4 	bl	800b136 <USBD_LL_DataInStage>
}
 800fbce:	bf00      	nop
 800fbd0:	3708      	adds	r7, #8
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	bd80      	pop	{r7, pc}

0800fbd6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fbd6:	b580      	push	{r7, lr}
 800fbd8:	b082      	sub	sp, #8
 800fbda:	af00      	add	r7, sp, #0
 800fbdc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	f7fb fbe8 	bl	800b3ba <USBD_LL_SOF>
}
 800fbea:	bf00      	nop
 800fbec:	3708      	adds	r7, #8
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	bd80      	pop	{r7, pc}

0800fbf2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fbf2:	b580      	push	{r7, lr}
 800fbf4:	b084      	sub	sp, #16
 800fbf6:	af00      	add	r7, sp, #0
 800fbf8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fbfa:	2301      	movs	r3, #1
 800fbfc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	68db      	ldr	r3, [r3, #12]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d102      	bne.n	800fc0c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800fc06:	2300      	movs	r3, #0
 800fc08:	73fb      	strb	r3, [r7, #15]
 800fc0a:	e008      	b.n	800fc1e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	68db      	ldr	r3, [r3, #12]
 800fc10:	2b02      	cmp	r3, #2
 800fc12:	d102      	bne.n	800fc1a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800fc14:	2301      	movs	r3, #1
 800fc16:	73fb      	strb	r3, [r7, #15]
 800fc18:	e001      	b.n	800fc1e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800fc1a:	f7f1 faf3 	bl	8001204 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fc24:	7bfa      	ldrb	r2, [r7, #15]
 800fc26:	4611      	mov	r1, r2
 800fc28:	4618      	mov	r0, r3
 800fc2a:	f7fb fb88 	bl	800b33e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fc34:	4618      	mov	r0, r3
 800fc36:	f7fb fb30 	bl	800b29a <USBD_LL_Reset>
}
 800fc3a:	bf00      	nop
 800fc3c:	3710      	adds	r7, #16
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}
	...

0800fc44 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b082      	sub	sp, #8
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fc52:	4618      	mov	r0, r3
 800fc54:	f7fb fb83 	bl	800b35e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	687a      	ldr	r2, [r7, #4]
 800fc64:	6812      	ldr	r2, [r2, #0]
 800fc66:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fc6a:	f043 0301 	orr.w	r3, r3, #1
 800fc6e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	6a1b      	ldr	r3, [r3, #32]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d005      	beq.n	800fc84 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fc78:	4b04      	ldr	r3, [pc, #16]	; (800fc8c <HAL_PCD_SuspendCallback+0x48>)
 800fc7a:	691b      	ldr	r3, [r3, #16]
 800fc7c:	4a03      	ldr	r2, [pc, #12]	; (800fc8c <HAL_PCD_SuspendCallback+0x48>)
 800fc7e:	f043 0306 	orr.w	r3, r3, #6
 800fc82:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fc84:	bf00      	nop
 800fc86:	3708      	adds	r7, #8
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	bd80      	pop	{r7, pc}
 800fc8c:	e000ed00 	.word	0xe000ed00

0800fc90 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b082      	sub	sp, #8
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f7fb fb73 	bl	800b38a <USBD_LL_Resume>
}
 800fca4:	bf00      	nop
 800fca6:	3708      	adds	r7, #8
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	bd80      	pop	{r7, pc}

0800fcac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b082      	sub	sp, #8
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
 800fcb4:	460b      	mov	r3, r1
 800fcb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fcbe:	78fa      	ldrb	r2, [r7, #3]
 800fcc0:	4611      	mov	r1, r2
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f7fb fbcb 	bl	800b45e <USBD_LL_IsoOUTIncomplete>
}
 800fcc8:	bf00      	nop
 800fcca:	3708      	adds	r7, #8
 800fccc:	46bd      	mov	sp, r7
 800fcce:	bd80      	pop	{r7, pc}

0800fcd0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b082      	sub	sp, #8
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
 800fcd8:	460b      	mov	r3, r1
 800fcda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fce2:	78fa      	ldrb	r2, [r7, #3]
 800fce4:	4611      	mov	r1, r2
 800fce6:	4618      	mov	r0, r3
 800fce8:	f7fb fb87 	bl	800b3fa <USBD_LL_IsoINIncomplete>
}
 800fcec:	bf00      	nop
 800fcee:	3708      	adds	r7, #8
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}

0800fcf4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b082      	sub	sp, #8
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fd02:	4618      	mov	r0, r3
 800fd04:	f7fb fbdd 	bl	800b4c2 <USBD_LL_DevConnected>
}
 800fd08:	bf00      	nop
 800fd0a:	3708      	adds	r7, #8
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	bd80      	pop	{r7, pc}

0800fd10 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b082      	sub	sp, #8
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f7fb fbda 	bl	800b4d8 <USBD_LL_DevDisconnected>
}
 800fd24:	bf00      	nop
 800fd26:	3708      	adds	r7, #8
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	bd80      	pop	{r7, pc}

0800fd2c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b082      	sub	sp, #8
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	781b      	ldrb	r3, [r3, #0]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d13c      	bne.n	800fdb6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fd3c:	4a20      	ldr	r2, [pc, #128]	; (800fdc0 <USBD_LL_Init+0x94>)
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	4a1e      	ldr	r2, [pc, #120]	; (800fdc0 <USBD_LL_Init+0x94>)
 800fd48:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fd4c:	4b1c      	ldr	r3, [pc, #112]	; (800fdc0 <USBD_LL_Init+0x94>)
 800fd4e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800fd52:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800fd54:	4b1a      	ldr	r3, [pc, #104]	; (800fdc0 <USBD_LL_Init+0x94>)
 800fd56:	2206      	movs	r2, #6
 800fd58:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800fd5a:	4b19      	ldr	r3, [pc, #100]	; (800fdc0 <USBD_LL_Init+0x94>)
 800fd5c:	2202      	movs	r2, #2
 800fd5e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fd60:	4b17      	ldr	r3, [pc, #92]	; (800fdc0 <USBD_LL_Init+0x94>)
 800fd62:	2200      	movs	r2, #0
 800fd64:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fd66:	4b16      	ldr	r3, [pc, #88]	; (800fdc0 <USBD_LL_Init+0x94>)
 800fd68:	2202      	movs	r2, #2
 800fd6a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fd6c:	4b14      	ldr	r3, [pc, #80]	; (800fdc0 <USBD_LL_Init+0x94>)
 800fd6e:	2200      	movs	r2, #0
 800fd70:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fd72:	4b13      	ldr	r3, [pc, #76]	; (800fdc0 <USBD_LL_Init+0x94>)
 800fd74:	2200      	movs	r2, #0
 800fd76:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fd78:	4b11      	ldr	r3, [pc, #68]	; (800fdc0 <USBD_LL_Init+0x94>)
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800fd7e:	4b10      	ldr	r3, [pc, #64]	; (800fdc0 <USBD_LL_Init+0x94>)
 800fd80:	2200      	movs	r2, #0
 800fd82:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fd84:	4b0e      	ldr	r3, [pc, #56]	; (800fdc0 <USBD_LL_Init+0x94>)
 800fd86:	2200      	movs	r2, #0
 800fd88:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fd8a:	480d      	ldr	r0, [pc, #52]	; (800fdc0 <USBD_LL_Init+0x94>)
 800fd8c:	f7f3 faf1 	bl	8003372 <HAL_PCD_Init>
 800fd90:	4603      	mov	r3, r0
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d001      	beq.n	800fd9a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800fd96:	f7f1 fa35 	bl	8001204 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fd9a:	2180      	movs	r1, #128	; 0x80
 800fd9c:	4808      	ldr	r0, [pc, #32]	; (800fdc0 <USBD_LL_Init+0x94>)
 800fd9e:	f7f4 fd6c 	bl	800487a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fda2:	2240      	movs	r2, #64	; 0x40
 800fda4:	2100      	movs	r1, #0
 800fda6:	4806      	ldr	r0, [pc, #24]	; (800fdc0 <USBD_LL_Init+0x94>)
 800fda8:	f7f4 fd20 	bl	80047ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fdac:	2280      	movs	r2, #128	; 0x80
 800fdae:	2101      	movs	r1, #1
 800fdb0:	4803      	ldr	r0, [pc, #12]	; (800fdc0 <USBD_LL_Init+0x94>)
 800fdb2:	f7f4 fd1b 	bl	80047ec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800fdb6:	2300      	movs	r3, #0
}
 800fdb8:	4618      	mov	r0, r3
 800fdba:	3708      	adds	r7, #8
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}
 800fdc0:	20004980 	.word	0x20004980

0800fdc4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b084      	sub	sp, #16
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fdcc:	2300      	movs	r3, #0
 800fdce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fdda:	4618      	mov	r0, r3
 800fddc:	f7f3 fbed 	bl	80035ba <HAL_PCD_Start>
 800fde0:	4603      	mov	r3, r0
 800fde2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fde4:	7bfb      	ldrb	r3, [r7, #15]
 800fde6:	4618      	mov	r0, r3
 800fde8:	f000 f97e 	bl	80100e8 <USBD_Get_USB_Status>
 800fdec:	4603      	mov	r3, r0
 800fdee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fdf0:	7bbb      	ldrb	r3, [r7, #14]
}
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	3710      	adds	r7, #16
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	bd80      	pop	{r7, pc}

0800fdfa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fdfa:	b580      	push	{r7, lr}
 800fdfc:	b084      	sub	sp, #16
 800fdfe:	af00      	add	r7, sp, #0
 800fe00:	6078      	str	r0, [r7, #4]
 800fe02:	4608      	mov	r0, r1
 800fe04:	4611      	mov	r1, r2
 800fe06:	461a      	mov	r2, r3
 800fe08:	4603      	mov	r3, r0
 800fe0a:	70fb      	strb	r3, [r7, #3]
 800fe0c:	460b      	mov	r3, r1
 800fe0e:	70bb      	strb	r3, [r7, #2]
 800fe10:	4613      	mov	r3, r2
 800fe12:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe14:	2300      	movs	r3, #0
 800fe16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe18:	2300      	movs	r3, #0
 800fe1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fe22:	78bb      	ldrb	r3, [r7, #2]
 800fe24:	883a      	ldrh	r2, [r7, #0]
 800fe26:	78f9      	ldrb	r1, [r7, #3]
 800fe28:	f7f4 f8da 	bl	8003fe0 <HAL_PCD_EP_Open>
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe30:	7bfb      	ldrb	r3, [r7, #15]
 800fe32:	4618      	mov	r0, r3
 800fe34:	f000 f958 	bl	80100e8 <USBD_Get_USB_Status>
 800fe38:	4603      	mov	r3, r0
 800fe3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe3e:	4618      	mov	r0, r3
 800fe40:	3710      	adds	r7, #16
 800fe42:	46bd      	mov	sp, r7
 800fe44:	bd80      	pop	{r7, pc}

0800fe46 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe46:	b580      	push	{r7, lr}
 800fe48:	b084      	sub	sp, #16
 800fe4a:	af00      	add	r7, sp, #0
 800fe4c:	6078      	str	r0, [r7, #4]
 800fe4e:	460b      	mov	r3, r1
 800fe50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe52:	2300      	movs	r3, #0
 800fe54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe56:	2300      	movs	r3, #0
 800fe58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fe60:	78fa      	ldrb	r2, [r7, #3]
 800fe62:	4611      	mov	r1, r2
 800fe64:	4618      	mov	r0, r3
 800fe66:	f7f4 f923 	bl	80040b0 <HAL_PCD_EP_Close>
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe6e:	7bfb      	ldrb	r3, [r7, #15]
 800fe70:	4618      	mov	r0, r3
 800fe72:	f000 f939 	bl	80100e8 <USBD_Get_USB_Status>
 800fe76:	4603      	mov	r3, r0
 800fe78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe7a:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	3710      	adds	r7, #16
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}

0800fe84 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b084      	sub	sp, #16
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
 800fe8c:	460b      	mov	r3, r1
 800fe8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe90:	2300      	movs	r3, #0
 800fe92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe94:	2300      	movs	r3, #0
 800fe96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fe9e:	78fa      	ldrb	r2, [r7, #3]
 800fea0:	4611      	mov	r1, r2
 800fea2:	4618      	mov	r0, r3
 800fea4:	f7f4 f9fb 	bl	800429e <HAL_PCD_EP_SetStall>
 800fea8:	4603      	mov	r3, r0
 800feaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800feac:	7bfb      	ldrb	r3, [r7, #15]
 800feae:	4618      	mov	r0, r3
 800feb0:	f000 f91a 	bl	80100e8 <USBD_Get_USB_Status>
 800feb4:	4603      	mov	r3, r0
 800feb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800feb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800feba:	4618      	mov	r0, r3
 800febc:	3710      	adds	r7, #16
 800febe:	46bd      	mov	sp, r7
 800fec0:	bd80      	pop	{r7, pc}

0800fec2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fec2:	b580      	push	{r7, lr}
 800fec4:	b084      	sub	sp, #16
 800fec6:	af00      	add	r7, sp, #0
 800fec8:	6078      	str	r0, [r7, #4]
 800feca:	460b      	mov	r3, r1
 800fecc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fece:	2300      	movs	r3, #0
 800fed0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fed2:	2300      	movs	r3, #0
 800fed4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fedc:	78fa      	ldrb	r2, [r7, #3]
 800fede:	4611      	mov	r1, r2
 800fee0:	4618      	mov	r0, r3
 800fee2:	f7f4 fa40 	bl	8004366 <HAL_PCD_EP_ClrStall>
 800fee6:	4603      	mov	r3, r0
 800fee8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800feea:	7bfb      	ldrb	r3, [r7, #15]
 800feec:	4618      	mov	r0, r3
 800feee:	f000 f8fb 	bl	80100e8 <USBD_Get_USB_Status>
 800fef2:	4603      	mov	r3, r0
 800fef4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fef6:	7bbb      	ldrb	r3, [r7, #14]
}
 800fef8:	4618      	mov	r0, r3
 800fefa:	3710      	adds	r7, #16
 800fefc:	46bd      	mov	sp, r7
 800fefe:	bd80      	pop	{r7, pc}

0800ff00 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ff00:	b480      	push	{r7}
 800ff02:	b085      	sub	sp, #20
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
 800ff08:	460b      	mov	r3, r1
 800ff0a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ff12:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ff14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	da0b      	bge.n	800ff34 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ff1c:	78fb      	ldrb	r3, [r7, #3]
 800ff1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ff22:	68f9      	ldr	r1, [r7, #12]
 800ff24:	4613      	mov	r3, r2
 800ff26:	00db      	lsls	r3, r3, #3
 800ff28:	4413      	add	r3, r2
 800ff2a:	009b      	lsls	r3, r3, #2
 800ff2c:	440b      	add	r3, r1
 800ff2e:	333e      	adds	r3, #62	; 0x3e
 800ff30:	781b      	ldrb	r3, [r3, #0]
 800ff32:	e00b      	b.n	800ff4c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ff34:	78fb      	ldrb	r3, [r7, #3]
 800ff36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ff3a:	68f9      	ldr	r1, [r7, #12]
 800ff3c:	4613      	mov	r3, r2
 800ff3e:	00db      	lsls	r3, r3, #3
 800ff40:	4413      	add	r3, r2
 800ff42:	009b      	lsls	r3, r3, #2
 800ff44:	440b      	add	r3, r1
 800ff46:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ff4a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	3714      	adds	r7, #20
 800ff50:	46bd      	mov	sp, r7
 800ff52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff56:	4770      	bx	lr

0800ff58 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b084      	sub	sp, #16
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
 800ff60:	460b      	mov	r3, r1
 800ff62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff64:	2300      	movs	r3, #0
 800ff66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff68:	2300      	movs	r3, #0
 800ff6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ff72:	78fa      	ldrb	r2, [r7, #3]
 800ff74:	4611      	mov	r1, r2
 800ff76:	4618      	mov	r0, r3
 800ff78:	f7f4 f80d 	bl	8003f96 <HAL_PCD_SetAddress>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff80:	7bfb      	ldrb	r3, [r7, #15]
 800ff82:	4618      	mov	r0, r3
 800ff84:	f000 f8b0 	bl	80100e8 <USBD_Get_USB_Status>
 800ff88:	4603      	mov	r3, r0
 800ff8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff8e:	4618      	mov	r0, r3
 800ff90:	3710      	adds	r7, #16
 800ff92:	46bd      	mov	sp, r7
 800ff94:	bd80      	pop	{r7, pc}

0800ff96 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ff96:	b580      	push	{r7, lr}
 800ff98:	b086      	sub	sp, #24
 800ff9a:	af00      	add	r7, sp, #0
 800ff9c:	60f8      	str	r0, [r7, #12]
 800ff9e:	607a      	str	r2, [r7, #4]
 800ffa0:	603b      	str	r3, [r7, #0]
 800ffa2:	460b      	mov	r3, r1
 800ffa4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ffaa:	2300      	movs	r3, #0
 800ffac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ffb4:	7af9      	ldrb	r1, [r7, #11]
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	687a      	ldr	r2, [r7, #4]
 800ffba:	f7f4 f926 	bl	800420a <HAL_PCD_EP_Transmit>
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ffc2:	7dfb      	ldrb	r3, [r7, #23]
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	f000 f88f 	bl	80100e8 <USBD_Get_USB_Status>
 800ffca:	4603      	mov	r3, r0
 800ffcc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ffce:	7dbb      	ldrb	r3, [r7, #22]
}
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	3718      	adds	r7, #24
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	bd80      	pop	{r7, pc}

0800ffd8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b086      	sub	sp, #24
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	60f8      	str	r0, [r7, #12]
 800ffe0:	607a      	str	r2, [r7, #4]
 800ffe2:	603b      	str	r3, [r7, #0]
 800ffe4:	460b      	mov	r3, r1
 800ffe6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffe8:	2300      	movs	r3, #0
 800ffea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ffec:	2300      	movs	r3, #0
 800ffee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fff6:	7af9      	ldrb	r1, [r7, #11]
 800fff8:	683b      	ldr	r3, [r7, #0]
 800fffa:	687a      	ldr	r2, [r7, #4]
 800fffc:	f7f4 f8a2 	bl	8004144 <HAL_PCD_EP_Receive>
 8010000:	4603      	mov	r3, r0
 8010002:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010004:	7dfb      	ldrb	r3, [r7, #23]
 8010006:	4618      	mov	r0, r3
 8010008:	f000 f86e 	bl	80100e8 <USBD_Get_USB_Status>
 801000c:	4603      	mov	r3, r0
 801000e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010010:	7dbb      	ldrb	r3, [r7, #22]
}
 8010012:	4618      	mov	r0, r3
 8010014:	3718      	adds	r7, #24
 8010016:	46bd      	mov	sp, r7
 8010018:	bd80      	pop	{r7, pc}

0801001a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801001a:	b580      	push	{r7, lr}
 801001c:	b082      	sub	sp, #8
 801001e:	af00      	add	r7, sp, #0
 8010020:	6078      	str	r0, [r7, #4]
 8010022:	460b      	mov	r3, r1
 8010024:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801002c:	78fa      	ldrb	r2, [r7, #3]
 801002e:	4611      	mov	r1, r2
 8010030:	4618      	mov	r0, r3
 8010032:	f7f4 f8d2 	bl	80041da <HAL_PCD_EP_GetRxCount>
 8010036:	4603      	mov	r3, r0
}
 8010038:	4618      	mov	r0, r3
 801003a:	3708      	adds	r7, #8
 801003c:	46bd      	mov	sp, r7
 801003e:	bd80      	pop	{r7, pc}

08010040 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8010040:	b580      	push	{r7, lr}
 8010042:	b082      	sub	sp, #8
 8010044:	af00      	add	r7, sp, #0
 8010046:	6078      	str	r0, [r7, #4]
 8010048:	460b      	mov	r3, r1
 801004a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 801004c:	78fb      	ldrb	r3, [r7, #3]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d002      	beq.n	8010058 <HAL_PCDEx_LPM_Callback+0x18>
 8010052:	2b01      	cmp	r3, #1
 8010054:	d01f      	beq.n	8010096 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8010056:	e03b      	b.n	80100d0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	6a1b      	ldr	r3, [r3, #32]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d007      	beq.n	8010070 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8010060:	f000 f83c 	bl	80100dc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010064:	4b1c      	ldr	r3, [pc, #112]	; (80100d8 <HAL_PCDEx_LPM_Callback+0x98>)
 8010066:	691b      	ldr	r3, [r3, #16]
 8010068:	4a1b      	ldr	r2, [pc, #108]	; (80100d8 <HAL_PCDEx_LPM_Callback+0x98>)
 801006a:	f023 0306 	bic.w	r3, r3, #6
 801006e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	687a      	ldr	r2, [r7, #4]
 801007c:	6812      	ldr	r2, [r2, #0]
 801007e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010082:	f023 0301 	bic.w	r3, r3, #1
 8010086:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801008e:	4618      	mov	r0, r3
 8010090:	f7fb f97b 	bl	800b38a <USBD_LL_Resume>
    break;
 8010094:	e01c      	b.n	80100d0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	687a      	ldr	r2, [r7, #4]
 80100a2:	6812      	ldr	r2, [r2, #0]
 80100a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80100a8:	f043 0301 	orr.w	r3, r3, #1
 80100ac:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80100b4:	4618      	mov	r0, r3
 80100b6:	f7fb f952 	bl	800b35e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	6a1b      	ldr	r3, [r3, #32]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d005      	beq.n	80100ce <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80100c2:	4b05      	ldr	r3, [pc, #20]	; (80100d8 <HAL_PCDEx_LPM_Callback+0x98>)
 80100c4:	691b      	ldr	r3, [r3, #16]
 80100c6:	4a04      	ldr	r2, [pc, #16]	; (80100d8 <HAL_PCDEx_LPM_Callback+0x98>)
 80100c8:	f043 0306 	orr.w	r3, r3, #6
 80100cc:	6113      	str	r3, [r2, #16]
    break;
 80100ce:	bf00      	nop
}
 80100d0:	bf00      	nop
 80100d2:	3708      	adds	r7, #8
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bd80      	pop	{r7, pc}
 80100d8:	e000ed00 	.word	0xe000ed00

080100dc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80100dc:	b580      	push	{r7, lr}
 80100de:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80100e0:	f7f0 fd14 	bl	8000b0c <SystemClock_Config>
}
 80100e4:	bf00      	nop
 80100e6:	bd80      	pop	{r7, pc}

080100e8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80100e8:	b480      	push	{r7}
 80100ea:	b085      	sub	sp, #20
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	4603      	mov	r3, r0
 80100f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80100f2:	2300      	movs	r3, #0
 80100f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80100f6:	79fb      	ldrb	r3, [r7, #7]
 80100f8:	2b03      	cmp	r3, #3
 80100fa:	d817      	bhi.n	801012c <USBD_Get_USB_Status+0x44>
 80100fc:	a201      	add	r2, pc, #4	; (adr r2, 8010104 <USBD_Get_USB_Status+0x1c>)
 80100fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010102:	bf00      	nop
 8010104:	08010115 	.word	0x08010115
 8010108:	0801011b 	.word	0x0801011b
 801010c:	08010121 	.word	0x08010121
 8010110:	08010127 	.word	0x08010127
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010114:	2300      	movs	r3, #0
 8010116:	73fb      	strb	r3, [r7, #15]
    break;
 8010118:	e00b      	b.n	8010132 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801011a:	2303      	movs	r3, #3
 801011c:	73fb      	strb	r3, [r7, #15]
    break;
 801011e:	e008      	b.n	8010132 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010120:	2301      	movs	r3, #1
 8010122:	73fb      	strb	r3, [r7, #15]
    break;
 8010124:	e005      	b.n	8010132 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010126:	2303      	movs	r3, #3
 8010128:	73fb      	strb	r3, [r7, #15]
    break;
 801012a:	e002      	b.n	8010132 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801012c:	2303      	movs	r3, #3
 801012e:	73fb      	strb	r3, [r7, #15]
    break;
 8010130:	bf00      	nop
  }
  return usb_status;
 8010132:	7bfb      	ldrb	r3, [r7, #15]
}
 8010134:	4618      	mov	r0, r3
 8010136:	3714      	adds	r7, #20
 8010138:	46bd      	mov	sp, r7
 801013a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013e:	4770      	bx	lr

08010140 <malloc>:
 8010140:	4b02      	ldr	r3, [pc, #8]	; (801014c <malloc+0xc>)
 8010142:	4601      	mov	r1, r0
 8010144:	6818      	ldr	r0, [r3, #0]
 8010146:	f000 b82b 	b.w	80101a0 <_malloc_r>
 801014a:	bf00      	nop
 801014c:	20000164 	.word	0x20000164

08010150 <free>:
 8010150:	4b02      	ldr	r3, [pc, #8]	; (801015c <free+0xc>)
 8010152:	4601      	mov	r1, r0
 8010154:	6818      	ldr	r0, [r3, #0]
 8010156:	f000 baf5 	b.w	8010744 <_free_r>
 801015a:	bf00      	nop
 801015c:	20000164 	.word	0x20000164

08010160 <sbrk_aligned>:
 8010160:	b570      	push	{r4, r5, r6, lr}
 8010162:	4e0e      	ldr	r6, [pc, #56]	; (801019c <sbrk_aligned+0x3c>)
 8010164:	460c      	mov	r4, r1
 8010166:	6831      	ldr	r1, [r6, #0]
 8010168:	4605      	mov	r5, r0
 801016a:	b911      	cbnz	r1, 8010172 <sbrk_aligned+0x12>
 801016c:	f000 faac 	bl	80106c8 <_sbrk_r>
 8010170:	6030      	str	r0, [r6, #0]
 8010172:	4621      	mov	r1, r4
 8010174:	4628      	mov	r0, r5
 8010176:	f000 faa7 	bl	80106c8 <_sbrk_r>
 801017a:	1c43      	adds	r3, r0, #1
 801017c:	d00a      	beq.n	8010194 <sbrk_aligned+0x34>
 801017e:	1cc4      	adds	r4, r0, #3
 8010180:	f024 0403 	bic.w	r4, r4, #3
 8010184:	42a0      	cmp	r0, r4
 8010186:	d007      	beq.n	8010198 <sbrk_aligned+0x38>
 8010188:	1a21      	subs	r1, r4, r0
 801018a:	4628      	mov	r0, r5
 801018c:	f000 fa9c 	bl	80106c8 <_sbrk_r>
 8010190:	3001      	adds	r0, #1
 8010192:	d101      	bne.n	8010198 <sbrk_aligned+0x38>
 8010194:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010198:	4620      	mov	r0, r4
 801019a:	bd70      	pop	{r4, r5, r6, pc}
 801019c:	20004e8c 	.word	0x20004e8c

080101a0 <_malloc_r>:
 80101a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101a4:	1ccd      	adds	r5, r1, #3
 80101a6:	f025 0503 	bic.w	r5, r5, #3
 80101aa:	3508      	adds	r5, #8
 80101ac:	2d0c      	cmp	r5, #12
 80101ae:	bf38      	it	cc
 80101b0:	250c      	movcc	r5, #12
 80101b2:	2d00      	cmp	r5, #0
 80101b4:	4607      	mov	r7, r0
 80101b6:	db01      	blt.n	80101bc <_malloc_r+0x1c>
 80101b8:	42a9      	cmp	r1, r5
 80101ba:	d905      	bls.n	80101c8 <_malloc_r+0x28>
 80101bc:	230c      	movs	r3, #12
 80101be:	603b      	str	r3, [r7, #0]
 80101c0:	2600      	movs	r6, #0
 80101c2:	4630      	mov	r0, r6
 80101c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801029c <_malloc_r+0xfc>
 80101cc:	f000 f89c 	bl	8010308 <__malloc_lock>
 80101d0:	f8d8 3000 	ldr.w	r3, [r8]
 80101d4:	461c      	mov	r4, r3
 80101d6:	bb5c      	cbnz	r4, 8010230 <_malloc_r+0x90>
 80101d8:	4629      	mov	r1, r5
 80101da:	4638      	mov	r0, r7
 80101dc:	f7ff ffc0 	bl	8010160 <sbrk_aligned>
 80101e0:	1c43      	adds	r3, r0, #1
 80101e2:	4604      	mov	r4, r0
 80101e4:	d155      	bne.n	8010292 <_malloc_r+0xf2>
 80101e6:	f8d8 4000 	ldr.w	r4, [r8]
 80101ea:	4626      	mov	r6, r4
 80101ec:	2e00      	cmp	r6, #0
 80101ee:	d145      	bne.n	801027c <_malloc_r+0xdc>
 80101f0:	2c00      	cmp	r4, #0
 80101f2:	d048      	beq.n	8010286 <_malloc_r+0xe6>
 80101f4:	6823      	ldr	r3, [r4, #0]
 80101f6:	4631      	mov	r1, r6
 80101f8:	4638      	mov	r0, r7
 80101fa:	eb04 0903 	add.w	r9, r4, r3
 80101fe:	f000 fa63 	bl	80106c8 <_sbrk_r>
 8010202:	4581      	cmp	r9, r0
 8010204:	d13f      	bne.n	8010286 <_malloc_r+0xe6>
 8010206:	6821      	ldr	r1, [r4, #0]
 8010208:	1a6d      	subs	r5, r5, r1
 801020a:	4629      	mov	r1, r5
 801020c:	4638      	mov	r0, r7
 801020e:	f7ff ffa7 	bl	8010160 <sbrk_aligned>
 8010212:	3001      	adds	r0, #1
 8010214:	d037      	beq.n	8010286 <_malloc_r+0xe6>
 8010216:	6823      	ldr	r3, [r4, #0]
 8010218:	442b      	add	r3, r5
 801021a:	6023      	str	r3, [r4, #0]
 801021c:	f8d8 3000 	ldr.w	r3, [r8]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d038      	beq.n	8010296 <_malloc_r+0xf6>
 8010224:	685a      	ldr	r2, [r3, #4]
 8010226:	42a2      	cmp	r2, r4
 8010228:	d12b      	bne.n	8010282 <_malloc_r+0xe2>
 801022a:	2200      	movs	r2, #0
 801022c:	605a      	str	r2, [r3, #4]
 801022e:	e00f      	b.n	8010250 <_malloc_r+0xb0>
 8010230:	6822      	ldr	r2, [r4, #0]
 8010232:	1b52      	subs	r2, r2, r5
 8010234:	d41f      	bmi.n	8010276 <_malloc_r+0xd6>
 8010236:	2a0b      	cmp	r2, #11
 8010238:	d917      	bls.n	801026a <_malloc_r+0xca>
 801023a:	1961      	adds	r1, r4, r5
 801023c:	42a3      	cmp	r3, r4
 801023e:	6025      	str	r5, [r4, #0]
 8010240:	bf18      	it	ne
 8010242:	6059      	strne	r1, [r3, #4]
 8010244:	6863      	ldr	r3, [r4, #4]
 8010246:	bf08      	it	eq
 8010248:	f8c8 1000 	streq.w	r1, [r8]
 801024c:	5162      	str	r2, [r4, r5]
 801024e:	604b      	str	r3, [r1, #4]
 8010250:	4638      	mov	r0, r7
 8010252:	f104 060b 	add.w	r6, r4, #11
 8010256:	f000 f85d 	bl	8010314 <__malloc_unlock>
 801025a:	f026 0607 	bic.w	r6, r6, #7
 801025e:	1d23      	adds	r3, r4, #4
 8010260:	1af2      	subs	r2, r6, r3
 8010262:	d0ae      	beq.n	80101c2 <_malloc_r+0x22>
 8010264:	1b9b      	subs	r3, r3, r6
 8010266:	50a3      	str	r3, [r4, r2]
 8010268:	e7ab      	b.n	80101c2 <_malloc_r+0x22>
 801026a:	42a3      	cmp	r3, r4
 801026c:	6862      	ldr	r2, [r4, #4]
 801026e:	d1dd      	bne.n	801022c <_malloc_r+0x8c>
 8010270:	f8c8 2000 	str.w	r2, [r8]
 8010274:	e7ec      	b.n	8010250 <_malloc_r+0xb0>
 8010276:	4623      	mov	r3, r4
 8010278:	6864      	ldr	r4, [r4, #4]
 801027a:	e7ac      	b.n	80101d6 <_malloc_r+0x36>
 801027c:	4634      	mov	r4, r6
 801027e:	6876      	ldr	r6, [r6, #4]
 8010280:	e7b4      	b.n	80101ec <_malloc_r+0x4c>
 8010282:	4613      	mov	r3, r2
 8010284:	e7cc      	b.n	8010220 <_malloc_r+0x80>
 8010286:	230c      	movs	r3, #12
 8010288:	603b      	str	r3, [r7, #0]
 801028a:	4638      	mov	r0, r7
 801028c:	f000 f842 	bl	8010314 <__malloc_unlock>
 8010290:	e797      	b.n	80101c2 <_malloc_r+0x22>
 8010292:	6025      	str	r5, [r4, #0]
 8010294:	e7dc      	b.n	8010250 <_malloc_r+0xb0>
 8010296:	605b      	str	r3, [r3, #4]
 8010298:	deff      	udf	#255	; 0xff
 801029a:	bf00      	nop
 801029c:	20004e88 	.word	0x20004e88

080102a0 <sniprintf>:
 80102a0:	b40c      	push	{r2, r3}
 80102a2:	b530      	push	{r4, r5, lr}
 80102a4:	4b17      	ldr	r3, [pc, #92]	; (8010304 <sniprintf+0x64>)
 80102a6:	1e0c      	subs	r4, r1, #0
 80102a8:	681d      	ldr	r5, [r3, #0]
 80102aa:	b09d      	sub	sp, #116	; 0x74
 80102ac:	da08      	bge.n	80102c0 <sniprintf+0x20>
 80102ae:	238b      	movs	r3, #139	; 0x8b
 80102b0:	602b      	str	r3, [r5, #0]
 80102b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80102b6:	b01d      	add	sp, #116	; 0x74
 80102b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80102bc:	b002      	add	sp, #8
 80102be:	4770      	bx	lr
 80102c0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80102c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80102c8:	bf14      	ite	ne
 80102ca:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80102ce:	4623      	moveq	r3, r4
 80102d0:	9304      	str	r3, [sp, #16]
 80102d2:	9307      	str	r3, [sp, #28]
 80102d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80102d8:	9002      	str	r0, [sp, #8]
 80102da:	9006      	str	r0, [sp, #24]
 80102dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80102e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80102e2:	ab21      	add	r3, sp, #132	; 0x84
 80102e4:	a902      	add	r1, sp, #8
 80102e6:	4628      	mov	r0, r5
 80102e8:	9301      	str	r3, [sp, #4]
 80102ea:	f000 fad1 	bl	8010890 <_svfiprintf_r>
 80102ee:	1c43      	adds	r3, r0, #1
 80102f0:	bfbc      	itt	lt
 80102f2:	238b      	movlt	r3, #139	; 0x8b
 80102f4:	602b      	strlt	r3, [r5, #0]
 80102f6:	2c00      	cmp	r4, #0
 80102f8:	d0dd      	beq.n	80102b6 <sniprintf+0x16>
 80102fa:	9b02      	ldr	r3, [sp, #8]
 80102fc:	2200      	movs	r2, #0
 80102fe:	701a      	strb	r2, [r3, #0]
 8010300:	e7d9      	b.n	80102b6 <sniprintf+0x16>
 8010302:	bf00      	nop
 8010304:	20000164 	.word	0x20000164

08010308 <__malloc_lock>:
 8010308:	4801      	ldr	r0, [pc, #4]	; (8010310 <__malloc_lock+0x8>)
 801030a:	f000 ba18 	b.w	801073e <__retarget_lock_acquire_recursive>
 801030e:	bf00      	nop
 8010310:	20004fcc 	.word	0x20004fcc

08010314 <__malloc_unlock>:
 8010314:	4801      	ldr	r0, [pc, #4]	; (801031c <__malloc_unlock+0x8>)
 8010316:	f000 ba13 	b.w	8010740 <__retarget_lock_release_recursive>
 801031a:	bf00      	nop
 801031c:	20004fcc 	.word	0x20004fcc

08010320 <std>:
 8010320:	2300      	movs	r3, #0
 8010322:	b510      	push	{r4, lr}
 8010324:	4604      	mov	r4, r0
 8010326:	e9c0 3300 	strd	r3, r3, [r0]
 801032a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801032e:	6083      	str	r3, [r0, #8]
 8010330:	8181      	strh	r1, [r0, #12]
 8010332:	6643      	str	r3, [r0, #100]	; 0x64
 8010334:	81c2      	strh	r2, [r0, #14]
 8010336:	6183      	str	r3, [r0, #24]
 8010338:	4619      	mov	r1, r3
 801033a:	2208      	movs	r2, #8
 801033c:	305c      	adds	r0, #92	; 0x5c
 801033e:	f000 f9ba 	bl	80106b6 <memset>
 8010342:	4b0d      	ldr	r3, [pc, #52]	; (8010378 <std+0x58>)
 8010344:	6263      	str	r3, [r4, #36]	; 0x24
 8010346:	4b0d      	ldr	r3, [pc, #52]	; (801037c <std+0x5c>)
 8010348:	62a3      	str	r3, [r4, #40]	; 0x28
 801034a:	4b0d      	ldr	r3, [pc, #52]	; (8010380 <std+0x60>)
 801034c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801034e:	4b0d      	ldr	r3, [pc, #52]	; (8010384 <std+0x64>)
 8010350:	6323      	str	r3, [r4, #48]	; 0x30
 8010352:	4b0d      	ldr	r3, [pc, #52]	; (8010388 <std+0x68>)
 8010354:	6224      	str	r4, [r4, #32]
 8010356:	429c      	cmp	r4, r3
 8010358:	d006      	beq.n	8010368 <std+0x48>
 801035a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801035e:	4294      	cmp	r4, r2
 8010360:	d002      	beq.n	8010368 <std+0x48>
 8010362:	33d0      	adds	r3, #208	; 0xd0
 8010364:	429c      	cmp	r4, r3
 8010366:	d105      	bne.n	8010374 <std+0x54>
 8010368:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801036c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010370:	f000 b9e4 	b.w	801073c <__retarget_lock_init_recursive>
 8010374:	bd10      	pop	{r4, pc}
 8010376:	bf00      	nop
 8010378:	08011191 	.word	0x08011191
 801037c:	080111b3 	.word	0x080111b3
 8010380:	080111eb 	.word	0x080111eb
 8010384:	0801120f 	.word	0x0801120f
 8010388:	20004e90 	.word	0x20004e90

0801038c <stdio_exit_handler>:
 801038c:	4a02      	ldr	r2, [pc, #8]	; (8010398 <stdio_exit_handler+0xc>)
 801038e:	4903      	ldr	r1, [pc, #12]	; (801039c <stdio_exit_handler+0x10>)
 8010390:	4803      	ldr	r0, [pc, #12]	; (80103a0 <stdio_exit_handler+0x14>)
 8010392:	f000 b8f5 	b.w	8010580 <_fwalk_sglue>
 8010396:	bf00      	nop
 8010398:	2000010c 	.word	0x2000010c
 801039c:	08011141 	.word	0x08011141
 80103a0:	20000118 	.word	0x20000118

080103a4 <cleanup_stdio>:
 80103a4:	6841      	ldr	r1, [r0, #4]
 80103a6:	4b0c      	ldr	r3, [pc, #48]	; (80103d8 <cleanup_stdio+0x34>)
 80103a8:	4299      	cmp	r1, r3
 80103aa:	b510      	push	{r4, lr}
 80103ac:	4604      	mov	r4, r0
 80103ae:	d001      	beq.n	80103b4 <cleanup_stdio+0x10>
 80103b0:	f000 fec6 	bl	8011140 <_fflush_r>
 80103b4:	68a1      	ldr	r1, [r4, #8]
 80103b6:	4b09      	ldr	r3, [pc, #36]	; (80103dc <cleanup_stdio+0x38>)
 80103b8:	4299      	cmp	r1, r3
 80103ba:	d002      	beq.n	80103c2 <cleanup_stdio+0x1e>
 80103bc:	4620      	mov	r0, r4
 80103be:	f000 febf 	bl	8011140 <_fflush_r>
 80103c2:	68e1      	ldr	r1, [r4, #12]
 80103c4:	4b06      	ldr	r3, [pc, #24]	; (80103e0 <cleanup_stdio+0x3c>)
 80103c6:	4299      	cmp	r1, r3
 80103c8:	d004      	beq.n	80103d4 <cleanup_stdio+0x30>
 80103ca:	4620      	mov	r0, r4
 80103cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103d0:	f000 beb6 	b.w	8011140 <_fflush_r>
 80103d4:	bd10      	pop	{r4, pc}
 80103d6:	bf00      	nop
 80103d8:	20004e90 	.word	0x20004e90
 80103dc:	20004ef8 	.word	0x20004ef8
 80103e0:	20004f60 	.word	0x20004f60

080103e4 <global_stdio_init.part.0>:
 80103e4:	b510      	push	{r4, lr}
 80103e6:	4b0b      	ldr	r3, [pc, #44]	; (8010414 <global_stdio_init.part.0+0x30>)
 80103e8:	4c0b      	ldr	r4, [pc, #44]	; (8010418 <global_stdio_init.part.0+0x34>)
 80103ea:	4a0c      	ldr	r2, [pc, #48]	; (801041c <global_stdio_init.part.0+0x38>)
 80103ec:	601a      	str	r2, [r3, #0]
 80103ee:	4620      	mov	r0, r4
 80103f0:	2200      	movs	r2, #0
 80103f2:	2104      	movs	r1, #4
 80103f4:	f7ff ff94 	bl	8010320 <std>
 80103f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80103fc:	2201      	movs	r2, #1
 80103fe:	2109      	movs	r1, #9
 8010400:	f7ff ff8e 	bl	8010320 <std>
 8010404:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010408:	2202      	movs	r2, #2
 801040a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801040e:	2112      	movs	r1, #18
 8010410:	f7ff bf86 	b.w	8010320 <std>
 8010414:	20004fc8 	.word	0x20004fc8
 8010418:	20004e90 	.word	0x20004e90
 801041c:	0801038d 	.word	0x0801038d

08010420 <__sfp_lock_acquire>:
 8010420:	4801      	ldr	r0, [pc, #4]	; (8010428 <__sfp_lock_acquire+0x8>)
 8010422:	f000 b98c 	b.w	801073e <__retarget_lock_acquire_recursive>
 8010426:	bf00      	nop
 8010428:	20004fcd 	.word	0x20004fcd

0801042c <__sfp_lock_release>:
 801042c:	4801      	ldr	r0, [pc, #4]	; (8010434 <__sfp_lock_release+0x8>)
 801042e:	f000 b987 	b.w	8010740 <__retarget_lock_release_recursive>
 8010432:	bf00      	nop
 8010434:	20004fcd 	.word	0x20004fcd

08010438 <__sinit>:
 8010438:	b510      	push	{r4, lr}
 801043a:	4604      	mov	r4, r0
 801043c:	f7ff fff0 	bl	8010420 <__sfp_lock_acquire>
 8010440:	6a23      	ldr	r3, [r4, #32]
 8010442:	b11b      	cbz	r3, 801044c <__sinit+0x14>
 8010444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010448:	f7ff bff0 	b.w	801042c <__sfp_lock_release>
 801044c:	4b04      	ldr	r3, [pc, #16]	; (8010460 <__sinit+0x28>)
 801044e:	6223      	str	r3, [r4, #32]
 8010450:	4b04      	ldr	r3, [pc, #16]	; (8010464 <__sinit+0x2c>)
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d1f5      	bne.n	8010444 <__sinit+0xc>
 8010458:	f7ff ffc4 	bl	80103e4 <global_stdio_init.part.0>
 801045c:	e7f2      	b.n	8010444 <__sinit+0xc>
 801045e:	bf00      	nop
 8010460:	080103a5 	.word	0x080103a5
 8010464:	20004fc8 	.word	0x20004fc8

08010468 <_strtol_l.constprop.0>:
 8010468:	2b01      	cmp	r3, #1
 801046a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801046e:	d001      	beq.n	8010474 <_strtol_l.constprop.0+0xc>
 8010470:	2b24      	cmp	r3, #36	; 0x24
 8010472:	d906      	bls.n	8010482 <_strtol_l.constprop.0+0x1a>
 8010474:	f000 f938 	bl	80106e8 <__errno>
 8010478:	2316      	movs	r3, #22
 801047a:	6003      	str	r3, [r0, #0]
 801047c:	2000      	movs	r0, #0
 801047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010482:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010568 <_strtol_l.constprop.0+0x100>
 8010486:	460d      	mov	r5, r1
 8010488:	462e      	mov	r6, r5
 801048a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801048e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8010492:	f017 0708 	ands.w	r7, r7, #8
 8010496:	d1f7      	bne.n	8010488 <_strtol_l.constprop.0+0x20>
 8010498:	2c2d      	cmp	r4, #45	; 0x2d
 801049a:	d132      	bne.n	8010502 <_strtol_l.constprop.0+0x9a>
 801049c:	782c      	ldrb	r4, [r5, #0]
 801049e:	2701      	movs	r7, #1
 80104a0:	1cb5      	adds	r5, r6, #2
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d05b      	beq.n	801055e <_strtol_l.constprop.0+0xf6>
 80104a6:	2b10      	cmp	r3, #16
 80104a8:	d109      	bne.n	80104be <_strtol_l.constprop.0+0x56>
 80104aa:	2c30      	cmp	r4, #48	; 0x30
 80104ac:	d107      	bne.n	80104be <_strtol_l.constprop.0+0x56>
 80104ae:	782c      	ldrb	r4, [r5, #0]
 80104b0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80104b4:	2c58      	cmp	r4, #88	; 0x58
 80104b6:	d14d      	bne.n	8010554 <_strtol_l.constprop.0+0xec>
 80104b8:	786c      	ldrb	r4, [r5, #1]
 80104ba:	2310      	movs	r3, #16
 80104bc:	3502      	adds	r5, #2
 80104be:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80104c2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80104c6:	f04f 0e00 	mov.w	lr, #0
 80104ca:	fbb8 f9f3 	udiv	r9, r8, r3
 80104ce:	4676      	mov	r6, lr
 80104d0:	fb03 8a19 	mls	sl, r3, r9, r8
 80104d4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80104d8:	f1bc 0f09 	cmp.w	ip, #9
 80104dc:	d816      	bhi.n	801050c <_strtol_l.constprop.0+0xa4>
 80104de:	4664      	mov	r4, ip
 80104e0:	42a3      	cmp	r3, r4
 80104e2:	dd24      	ble.n	801052e <_strtol_l.constprop.0+0xc6>
 80104e4:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80104e8:	d008      	beq.n	80104fc <_strtol_l.constprop.0+0x94>
 80104ea:	45b1      	cmp	r9, r6
 80104ec:	d31c      	bcc.n	8010528 <_strtol_l.constprop.0+0xc0>
 80104ee:	d101      	bne.n	80104f4 <_strtol_l.constprop.0+0x8c>
 80104f0:	45a2      	cmp	sl, r4
 80104f2:	db19      	blt.n	8010528 <_strtol_l.constprop.0+0xc0>
 80104f4:	fb06 4603 	mla	r6, r6, r3, r4
 80104f8:	f04f 0e01 	mov.w	lr, #1
 80104fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010500:	e7e8      	b.n	80104d4 <_strtol_l.constprop.0+0x6c>
 8010502:	2c2b      	cmp	r4, #43	; 0x2b
 8010504:	bf04      	itt	eq
 8010506:	782c      	ldrbeq	r4, [r5, #0]
 8010508:	1cb5      	addeq	r5, r6, #2
 801050a:	e7ca      	b.n	80104a2 <_strtol_l.constprop.0+0x3a>
 801050c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010510:	f1bc 0f19 	cmp.w	ip, #25
 8010514:	d801      	bhi.n	801051a <_strtol_l.constprop.0+0xb2>
 8010516:	3c37      	subs	r4, #55	; 0x37
 8010518:	e7e2      	b.n	80104e0 <_strtol_l.constprop.0+0x78>
 801051a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801051e:	f1bc 0f19 	cmp.w	ip, #25
 8010522:	d804      	bhi.n	801052e <_strtol_l.constprop.0+0xc6>
 8010524:	3c57      	subs	r4, #87	; 0x57
 8010526:	e7db      	b.n	80104e0 <_strtol_l.constprop.0+0x78>
 8010528:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 801052c:	e7e6      	b.n	80104fc <_strtol_l.constprop.0+0x94>
 801052e:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8010532:	d105      	bne.n	8010540 <_strtol_l.constprop.0+0xd8>
 8010534:	2322      	movs	r3, #34	; 0x22
 8010536:	6003      	str	r3, [r0, #0]
 8010538:	4646      	mov	r6, r8
 801053a:	b942      	cbnz	r2, 801054e <_strtol_l.constprop.0+0xe6>
 801053c:	4630      	mov	r0, r6
 801053e:	e79e      	b.n	801047e <_strtol_l.constprop.0+0x16>
 8010540:	b107      	cbz	r7, 8010544 <_strtol_l.constprop.0+0xdc>
 8010542:	4276      	negs	r6, r6
 8010544:	2a00      	cmp	r2, #0
 8010546:	d0f9      	beq.n	801053c <_strtol_l.constprop.0+0xd4>
 8010548:	f1be 0f00 	cmp.w	lr, #0
 801054c:	d000      	beq.n	8010550 <_strtol_l.constprop.0+0xe8>
 801054e:	1e69      	subs	r1, r5, #1
 8010550:	6011      	str	r1, [r2, #0]
 8010552:	e7f3      	b.n	801053c <_strtol_l.constprop.0+0xd4>
 8010554:	2430      	movs	r4, #48	; 0x30
 8010556:	2b00      	cmp	r3, #0
 8010558:	d1b1      	bne.n	80104be <_strtol_l.constprop.0+0x56>
 801055a:	2308      	movs	r3, #8
 801055c:	e7af      	b.n	80104be <_strtol_l.constprop.0+0x56>
 801055e:	2c30      	cmp	r4, #48	; 0x30
 8010560:	d0a5      	beq.n	80104ae <_strtol_l.constprop.0+0x46>
 8010562:	230a      	movs	r3, #10
 8010564:	e7ab      	b.n	80104be <_strtol_l.constprop.0+0x56>
 8010566:	bf00      	nop
 8010568:	08011e25 	.word	0x08011e25

0801056c <strtol>:
 801056c:	4613      	mov	r3, r2
 801056e:	460a      	mov	r2, r1
 8010570:	4601      	mov	r1, r0
 8010572:	4802      	ldr	r0, [pc, #8]	; (801057c <strtol+0x10>)
 8010574:	6800      	ldr	r0, [r0, #0]
 8010576:	f7ff bf77 	b.w	8010468 <_strtol_l.constprop.0>
 801057a:	bf00      	nop
 801057c:	20000164 	.word	0x20000164

08010580 <_fwalk_sglue>:
 8010580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010584:	4607      	mov	r7, r0
 8010586:	4688      	mov	r8, r1
 8010588:	4614      	mov	r4, r2
 801058a:	2600      	movs	r6, #0
 801058c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010590:	f1b9 0901 	subs.w	r9, r9, #1
 8010594:	d505      	bpl.n	80105a2 <_fwalk_sglue+0x22>
 8010596:	6824      	ldr	r4, [r4, #0]
 8010598:	2c00      	cmp	r4, #0
 801059a:	d1f7      	bne.n	801058c <_fwalk_sglue+0xc>
 801059c:	4630      	mov	r0, r6
 801059e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105a2:	89ab      	ldrh	r3, [r5, #12]
 80105a4:	2b01      	cmp	r3, #1
 80105a6:	d907      	bls.n	80105b8 <_fwalk_sglue+0x38>
 80105a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80105ac:	3301      	adds	r3, #1
 80105ae:	d003      	beq.n	80105b8 <_fwalk_sglue+0x38>
 80105b0:	4629      	mov	r1, r5
 80105b2:	4638      	mov	r0, r7
 80105b4:	47c0      	blx	r8
 80105b6:	4306      	orrs	r6, r0
 80105b8:	3568      	adds	r5, #104	; 0x68
 80105ba:	e7e9      	b.n	8010590 <_fwalk_sglue+0x10>

080105bc <iprintf>:
 80105bc:	b40f      	push	{r0, r1, r2, r3}
 80105be:	b507      	push	{r0, r1, r2, lr}
 80105c0:	4906      	ldr	r1, [pc, #24]	; (80105dc <iprintf+0x20>)
 80105c2:	ab04      	add	r3, sp, #16
 80105c4:	6808      	ldr	r0, [r1, #0]
 80105c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80105ca:	6881      	ldr	r1, [r0, #8]
 80105cc:	9301      	str	r3, [sp, #4]
 80105ce:	f000 fa87 	bl	8010ae0 <_vfiprintf_r>
 80105d2:	b003      	add	sp, #12
 80105d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80105d8:	b004      	add	sp, #16
 80105da:	4770      	bx	lr
 80105dc:	20000164 	.word	0x20000164

080105e0 <_puts_r>:
 80105e0:	6a03      	ldr	r3, [r0, #32]
 80105e2:	b570      	push	{r4, r5, r6, lr}
 80105e4:	6884      	ldr	r4, [r0, #8]
 80105e6:	4605      	mov	r5, r0
 80105e8:	460e      	mov	r6, r1
 80105ea:	b90b      	cbnz	r3, 80105f0 <_puts_r+0x10>
 80105ec:	f7ff ff24 	bl	8010438 <__sinit>
 80105f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80105f2:	07db      	lsls	r3, r3, #31
 80105f4:	d405      	bmi.n	8010602 <_puts_r+0x22>
 80105f6:	89a3      	ldrh	r3, [r4, #12]
 80105f8:	0598      	lsls	r0, r3, #22
 80105fa:	d402      	bmi.n	8010602 <_puts_r+0x22>
 80105fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80105fe:	f000 f89e 	bl	801073e <__retarget_lock_acquire_recursive>
 8010602:	89a3      	ldrh	r3, [r4, #12]
 8010604:	0719      	lsls	r1, r3, #28
 8010606:	d513      	bpl.n	8010630 <_puts_r+0x50>
 8010608:	6923      	ldr	r3, [r4, #16]
 801060a:	b18b      	cbz	r3, 8010630 <_puts_r+0x50>
 801060c:	3e01      	subs	r6, #1
 801060e:	68a3      	ldr	r3, [r4, #8]
 8010610:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010614:	3b01      	subs	r3, #1
 8010616:	60a3      	str	r3, [r4, #8]
 8010618:	b9e9      	cbnz	r1, 8010656 <_puts_r+0x76>
 801061a:	2b00      	cmp	r3, #0
 801061c:	da2e      	bge.n	801067c <_puts_r+0x9c>
 801061e:	4622      	mov	r2, r4
 8010620:	210a      	movs	r1, #10
 8010622:	4628      	mov	r0, r5
 8010624:	f000 fe26 	bl	8011274 <__swbuf_r>
 8010628:	3001      	adds	r0, #1
 801062a:	d007      	beq.n	801063c <_puts_r+0x5c>
 801062c:	250a      	movs	r5, #10
 801062e:	e007      	b.n	8010640 <_puts_r+0x60>
 8010630:	4621      	mov	r1, r4
 8010632:	4628      	mov	r0, r5
 8010634:	f000 fe5c 	bl	80112f0 <__swsetup_r>
 8010638:	2800      	cmp	r0, #0
 801063a:	d0e7      	beq.n	801060c <_puts_r+0x2c>
 801063c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8010640:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010642:	07da      	lsls	r2, r3, #31
 8010644:	d405      	bmi.n	8010652 <_puts_r+0x72>
 8010646:	89a3      	ldrh	r3, [r4, #12]
 8010648:	059b      	lsls	r3, r3, #22
 801064a:	d402      	bmi.n	8010652 <_puts_r+0x72>
 801064c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801064e:	f000 f877 	bl	8010740 <__retarget_lock_release_recursive>
 8010652:	4628      	mov	r0, r5
 8010654:	bd70      	pop	{r4, r5, r6, pc}
 8010656:	2b00      	cmp	r3, #0
 8010658:	da04      	bge.n	8010664 <_puts_r+0x84>
 801065a:	69a2      	ldr	r2, [r4, #24]
 801065c:	429a      	cmp	r2, r3
 801065e:	dc06      	bgt.n	801066e <_puts_r+0x8e>
 8010660:	290a      	cmp	r1, #10
 8010662:	d004      	beq.n	801066e <_puts_r+0x8e>
 8010664:	6823      	ldr	r3, [r4, #0]
 8010666:	1c5a      	adds	r2, r3, #1
 8010668:	6022      	str	r2, [r4, #0]
 801066a:	7019      	strb	r1, [r3, #0]
 801066c:	e7cf      	b.n	801060e <_puts_r+0x2e>
 801066e:	4622      	mov	r2, r4
 8010670:	4628      	mov	r0, r5
 8010672:	f000 fdff 	bl	8011274 <__swbuf_r>
 8010676:	3001      	adds	r0, #1
 8010678:	d1c9      	bne.n	801060e <_puts_r+0x2e>
 801067a:	e7df      	b.n	801063c <_puts_r+0x5c>
 801067c:	6823      	ldr	r3, [r4, #0]
 801067e:	250a      	movs	r5, #10
 8010680:	1c5a      	adds	r2, r3, #1
 8010682:	6022      	str	r2, [r4, #0]
 8010684:	701d      	strb	r5, [r3, #0]
 8010686:	e7db      	b.n	8010640 <_puts_r+0x60>

08010688 <puts>:
 8010688:	4b02      	ldr	r3, [pc, #8]	; (8010694 <puts+0xc>)
 801068a:	4601      	mov	r1, r0
 801068c:	6818      	ldr	r0, [r3, #0]
 801068e:	f7ff bfa7 	b.w	80105e0 <_puts_r>
 8010692:	bf00      	nop
 8010694:	20000164 	.word	0x20000164

08010698 <strcat>:
 8010698:	b510      	push	{r4, lr}
 801069a:	4602      	mov	r2, r0
 801069c:	7814      	ldrb	r4, [r2, #0]
 801069e:	4613      	mov	r3, r2
 80106a0:	3201      	adds	r2, #1
 80106a2:	2c00      	cmp	r4, #0
 80106a4:	d1fa      	bne.n	801069c <strcat+0x4>
 80106a6:	3b01      	subs	r3, #1
 80106a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80106ac:	f803 2f01 	strb.w	r2, [r3, #1]!
 80106b0:	2a00      	cmp	r2, #0
 80106b2:	d1f9      	bne.n	80106a8 <strcat+0x10>
 80106b4:	bd10      	pop	{r4, pc}

080106b6 <memset>:
 80106b6:	4402      	add	r2, r0
 80106b8:	4603      	mov	r3, r0
 80106ba:	4293      	cmp	r3, r2
 80106bc:	d100      	bne.n	80106c0 <memset+0xa>
 80106be:	4770      	bx	lr
 80106c0:	f803 1b01 	strb.w	r1, [r3], #1
 80106c4:	e7f9      	b.n	80106ba <memset+0x4>
	...

080106c8 <_sbrk_r>:
 80106c8:	b538      	push	{r3, r4, r5, lr}
 80106ca:	4d06      	ldr	r5, [pc, #24]	; (80106e4 <_sbrk_r+0x1c>)
 80106cc:	2300      	movs	r3, #0
 80106ce:	4604      	mov	r4, r0
 80106d0:	4608      	mov	r0, r1
 80106d2:	602b      	str	r3, [r5, #0]
 80106d4:	f7f1 f89e 	bl	8001814 <_sbrk>
 80106d8:	1c43      	adds	r3, r0, #1
 80106da:	d102      	bne.n	80106e2 <_sbrk_r+0x1a>
 80106dc:	682b      	ldr	r3, [r5, #0]
 80106de:	b103      	cbz	r3, 80106e2 <_sbrk_r+0x1a>
 80106e0:	6023      	str	r3, [r4, #0]
 80106e2:	bd38      	pop	{r3, r4, r5, pc}
 80106e4:	20004fd0 	.word	0x20004fd0

080106e8 <__errno>:
 80106e8:	4b01      	ldr	r3, [pc, #4]	; (80106f0 <__errno+0x8>)
 80106ea:	6818      	ldr	r0, [r3, #0]
 80106ec:	4770      	bx	lr
 80106ee:	bf00      	nop
 80106f0:	20000164 	.word	0x20000164

080106f4 <__libc_init_array>:
 80106f4:	b570      	push	{r4, r5, r6, lr}
 80106f6:	4d0d      	ldr	r5, [pc, #52]	; (801072c <__libc_init_array+0x38>)
 80106f8:	4c0d      	ldr	r4, [pc, #52]	; (8010730 <__libc_init_array+0x3c>)
 80106fa:	1b64      	subs	r4, r4, r5
 80106fc:	10a4      	asrs	r4, r4, #2
 80106fe:	2600      	movs	r6, #0
 8010700:	42a6      	cmp	r6, r4
 8010702:	d109      	bne.n	8010718 <__libc_init_array+0x24>
 8010704:	4d0b      	ldr	r5, [pc, #44]	; (8010734 <__libc_init_array+0x40>)
 8010706:	4c0c      	ldr	r4, [pc, #48]	; (8010738 <__libc_init_array+0x44>)
 8010708:	f000 ff44 	bl	8011594 <_init>
 801070c:	1b64      	subs	r4, r4, r5
 801070e:	10a4      	asrs	r4, r4, #2
 8010710:	2600      	movs	r6, #0
 8010712:	42a6      	cmp	r6, r4
 8010714:	d105      	bne.n	8010722 <__libc_init_array+0x2e>
 8010716:	bd70      	pop	{r4, r5, r6, pc}
 8010718:	f855 3b04 	ldr.w	r3, [r5], #4
 801071c:	4798      	blx	r3
 801071e:	3601      	adds	r6, #1
 8010720:	e7ee      	b.n	8010700 <__libc_init_array+0xc>
 8010722:	f855 3b04 	ldr.w	r3, [r5], #4
 8010726:	4798      	blx	r3
 8010728:	3601      	adds	r6, #1
 801072a:	e7f2      	b.n	8010712 <__libc_init_array+0x1e>
 801072c:	08011f60 	.word	0x08011f60
 8010730:	08011f60 	.word	0x08011f60
 8010734:	08011f60 	.word	0x08011f60
 8010738:	08011f64 	.word	0x08011f64

0801073c <__retarget_lock_init_recursive>:
 801073c:	4770      	bx	lr

0801073e <__retarget_lock_acquire_recursive>:
 801073e:	4770      	bx	lr

08010740 <__retarget_lock_release_recursive>:
 8010740:	4770      	bx	lr
	...

08010744 <_free_r>:
 8010744:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010746:	2900      	cmp	r1, #0
 8010748:	d044      	beq.n	80107d4 <_free_r+0x90>
 801074a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801074e:	9001      	str	r0, [sp, #4]
 8010750:	2b00      	cmp	r3, #0
 8010752:	f1a1 0404 	sub.w	r4, r1, #4
 8010756:	bfb8      	it	lt
 8010758:	18e4      	addlt	r4, r4, r3
 801075a:	f7ff fdd5 	bl	8010308 <__malloc_lock>
 801075e:	4a1e      	ldr	r2, [pc, #120]	; (80107d8 <_free_r+0x94>)
 8010760:	9801      	ldr	r0, [sp, #4]
 8010762:	6813      	ldr	r3, [r2, #0]
 8010764:	b933      	cbnz	r3, 8010774 <_free_r+0x30>
 8010766:	6063      	str	r3, [r4, #4]
 8010768:	6014      	str	r4, [r2, #0]
 801076a:	b003      	add	sp, #12
 801076c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010770:	f7ff bdd0 	b.w	8010314 <__malloc_unlock>
 8010774:	42a3      	cmp	r3, r4
 8010776:	d908      	bls.n	801078a <_free_r+0x46>
 8010778:	6825      	ldr	r5, [r4, #0]
 801077a:	1961      	adds	r1, r4, r5
 801077c:	428b      	cmp	r3, r1
 801077e:	bf01      	itttt	eq
 8010780:	6819      	ldreq	r1, [r3, #0]
 8010782:	685b      	ldreq	r3, [r3, #4]
 8010784:	1949      	addeq	r1, r1, r5
 8010786:	6021      	streq	r1, [r4, #0]
 8010788:	e7ed      	b.n	8010766 <_free_r+0x22>
 801078a:	461a      	mov	r2, r3
 801078c:	685b      	ldr	r3, [r3, #4]
 801078e:	b10b      	cbz	r3, 8010794 <_free_r+0x50>
 8010790:	42a3      	cmp	r3, r4
 8010792:	d9fa      	bls.n	801078a <_free_r+0x46>
 8010794:	6811      	ldr	r1, [r2, #0]
 8010796:	1855      	adds	r5, r2, r1
 8010798:	42a5      	cmp	r5, r4
 801079a:	d10b      	bne.n	80107b4 <_free_r+0x70>
 801079c:	6824      	ldr	r4, [r4, #0]
 801079e:	4421      	add	r1, r4
 80107a0:	1854      	adds	r4, r2, r1
 80107a2:	42a3      	cmp	r3, r4
 80107a4:	6011      	str	r1, [r2, #0]
 80107a6:	d1e0      	bne.n	801076a <_free_r+0x26>
 80107a8:	681c      	ldr	r4, [r3, #0]
 80107aa:	685b      	ldr	r3, [r3, #4]
 80107ac:	6053      	str	r3, [r2, #4]
 80107ae:	440c      	add	r4, r1
 80107b0:	6014      	str	r4, [r2, #0]
 80107b2:	e7da      	b.n	801076a <_free_r+0x26>
 80107b4:	d902      	bls.n	80107bc <_free_r+0x78>
 80107b6:	230c      	movs	r3, #12
 80107b8:	6003      	str	r3, [r0, #0]
 80107ba:	e7d6      	b.n	801076a <_free_r+0x26>
 80107bc:	6825      	ldr	r5, [r4, #0]
 80107be:	1961      	adds	r1, r4, r5
 80107c0:	428b      	cmp	r3, r1
 80107c2:	bf04      	itt	eq
 80107c4:	6819      	ldreq	r1, [r3, #0]
 80107c6:	685b      	ldreq	r3, [r3, #4]
 80107c8:	6063      	str	r3, [r4, #4]
 80107ca:	bf04      	itt	eq
 80107cc:	1949      	addeq	r1, r1, r5
 80107ce:	6021      	streq	r1, [r4, #0]
 80107d0:	6054      	str	r4, [r2, #4]
 80107d2:	e7ca      	b.n	801076a <_free_r+0x26>
 80107d4:	b003      	add	sp, #12
 80107d6:	bd30      	pop	{r4, r5, pc}
 80107d8:	20004e88 	.word	0x20004e88

080107dc <__ssputs_r>:
 80107dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107e0:	688e      	ldr	r6, [r1, #8]
 80107e2:	461f      	mov	r7, r3
 80107e4:	42be      	cmp	r6, r7
 80107e6:	680b      	ldr	r3, [r1, #0]
 80107e8:	4682      	mov	sl, r0
 80107ea:	460c      	mov	r4, r1
 80107ec:	4690      	mov	r8, r2
 80107ee:	d82c      	bhi.n	801084a <__ssputs_r+0x6e>
 80107f0:	898a      	ldrh	r2, [r1, #12]
 80107f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80107f6:	d026      	beq.n	8010846 <__ssputs_r+0x6a>
 80107f8:	6965      	ldr	r5, [r4, #20]
 80107fa:	6909      	ldr	r1, [r1, #16]
 80107fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010800:	eba3 0901 	sub.w	r9, r3, r1
 8010804:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010808:	1c7b      	adds	r3, r7, #1
 801080a:	444b      	add	r3, r9
 801080c:	106d      	asrs	r5, r5, #1
 801080e:	429d      	cmp	r5, r3
 8010810:	bf38      	it	cc
 8010812:	461d      	movcc	r5, r3
 8010814:	0553      	lsls	r3, r2, #21
 8010816:	d527      	bpl.n	8010868 <__ssputs_r+0x8c>
 8010818:	4629      	mov	r1, r5
 801081a:	f7ff fcc1 	bl	80101a0 <_malloc_r>
 801081e:	4606      	mov	r6, r0
 8010820:	b360      	cbz	r0, 801087c <__ssputs_r+0xa0>
 8010822:	6921      	ldr	r1, [r4, #16]
 8010824:	464a      	mov	r2, r9
 8010826:	f000 fe9f 	bl	8011568 <memcpy>
 801082a:	89a3      	ldrh	r3, [r4, #12]
 801082c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010834:	81a3      	strh	r3, [r4, #12]
 8010836:	6126      	str	r6, [r4, #16]
 8010838:	6165      	str	r5, [r4, #20]
 801083a:	444e      	add	r6, r9
 801083c:	eba5 0509 	sub.w	r5, r5, r9
 8010840:	6026      	str	r6, [r4, #0]
 8010842:	60a5      	str	r5, [r4, #8]
 8010844:	463e      	mov	r6, r7
 8010846:	42be      	cmp	r6, r7
 8010848:	d900      	bls.n	801084c <__ssputs_r+0x70>
 801084a:	463e      	mov	r6, r7
 801084c:	6820      	ldr	r0, [r4, #0]
 801084e:	4632      	mov	r2, r6
 8010850:	4641      	mov	r1, r8
 8010852:	f000 fe07 	bl	8011464 <memmove>
 8010856:	68a3      	ldr	r3, [r4, #8]
 8010858:	1b9b      	subs	r3, r3, r6
 801085a:	60a3      	str	r3, [r4, #8]
 801085c:	6823      	ldr	r3, [r4, #0]
 801085e:	4433      	add	r3, r6
 8010860:	6023      	str	r3, [r4, #0]
 8010862:	2000      	movs	r0, #0
 8010864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010868:	462a      	mov	r2, r5
 801086a:	f000 fcd4 	bl	8011216 <_realloc_r>
 801086e:	4606      	mov	r6, r0
 8010870:	2800      	cmp	r0, #0
 8010872:	d1e0      	bne.n	8010836 <__ssputs_r+0x5a>
 8010874:	6921      	ldr	r1, [r4, #16]
 8010876:	4650      	mov	r0, sl
 8010878:	f7ff ff64 	bl	8010744 <_free_r>
 801087c:	230c      	movs	r3, #12
 801087e:	f8ca 3000 	str.w	r3, [sl]
 8010882:	89a3      	ldrh	r3, [r4, #12]
 8010884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010888:	81a3      	strh	r3, [r4, #12]
 801088a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801088e:	e7e9      	b.n	8010864 <__ssputs_r+0x88>

08010890 <_svfiprintf_r>:
 8010890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010894:	4698      	mov	r8, r3
 8010896:	898b      	ldrh	r3, [r1, #12]
 8010898:	061b      	lsls	r3, r3, #24
 801089a:	b09d      	sub	sp, #116	; 0x74
 801089c:	4607      	mov	r7, r0
 801089e:	460d      	mov	r5, r1
 80108a0:	4614      	mov	r4, r2
 80108a2:	d50e      	bpl.n	80108c2 <_svfiprintf_r+0x32>
 80108a4:	690b      	ldr	r3, [r1, #16]
 80108a6:	b963      	cbnz	r3, 80108c2 <_svfiprintf_r+0x32>
 80108a8:	2140      	movs	r1, #64	; 0x40
 80108aa:	f7ff fc79 	bl	80101a0 <_malloc_r>
 80108ae:	6028      	str	r0, [r5, #0]
 80108b0:	6128      	str	r0, [r5, #16]
 80108b2:	b920      	cbnz	r0, 80108be <_svfiprintf_r+0x2e>
 80108b4:	230c      	movs	r3, #12
 80108b6:	603b      	str	r3, [r7, #0]
 80108b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80108bc:	e0d0      	b.n	8010a60 <_svfiprintf_r+0x1d0>
 80108be:	2340      	movs	r3, #64	; 0x40
 80108c0:	616b      	str	r3, [r5, #20]
 80108c2:	2300      	movs	r3, #0
 80108c4:	9309      	str	r3, [sp, #36]	; 0x24
 80108c6:	2320      	movs	r3, #32
 80108c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80108cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80108d0:	2330      	movs	r3, #48	; 0x30
 80108d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010a78 <_svfiprintf_r+0x1e8>
 80108d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80108da:	f04f 0901 	mov.w	r9, #1
 80108de:	4623      	mov	r3, r4
 80108e0:	469a      	mov	sl, r3
 80108e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80108e6:	b10a      	cbz	r2, 80108ec <_svfiprintf_r+0x5c>
 80108e8:	2a25      	cmp	r2, #37	; 0x25
 80108ea:	d1f9      	bne.n	80108e0 <_svfiprintf_r+0x50>
 80108ec:	ebba 0b04 	subs.w	fp, sl, r4
 80108f0:	d00b      	beq.n	801090a <_svfiprintf_r+0x7a>
 80108f2:	465b      	mov	r3, fp
 80108f4:	4622      	mov	r2, r4
 80108f6:	4629      	mov	r1, r5
 80108f8:	4638      	mov	r0, r7
 80108fa:	f7ff ff6f 	bl	80107dc <__ssputs_r>
 80108fe:	3001      	adds	r0, #1
 8010900:	f000 80a9 	beq.w	8010a56 <_svfiprintf_r+0x1c6>
 8010904:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010906:	445a      	add	r2, fp
 8010908:	9209      	str	r2, [sp, #36]	; 0x24
 801090a:	f89a 3000 	ldrb.w	r3, [sl]
 801090e:	2b00      	cmp	r3, #0
 8010910:	f000 80a1 	beq.w	8010a56 <_svfiprintf_r+0x1c6>
 8010914:	2300      	movs	r3, #0
 8010916:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801091a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801091e:	f10a 0a01 	add.w	sl, sl, #1
 8010922:	9304      	str	r3, [sp, #16]
 8010924:	9307      	str	r3, [sp, #28]
 8010926:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801092a:	931a      	str	r3, [sp, #104]	; 0x68
 801092c:	4654      	mov	r4, sl
 801092e:	2205      	movs	r2, #5
 8010930:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010934:	4850      	ldr	r0, [pc, #320]	; (8010a78 <_svfiprintf_r+0x1e8>)
 8010936:	f7ef fc83 	bl	8000240 <memchr>
 801093a:	9a04      	ldr	r2, [sp, #16]
 801093c:	b9d8      	cbnz	r0, 8010976 <_svfiprintf_r+0xe6>
 801093e:	06d0      	lsls	r0, r2, #27
 8010940:	bf44      	itt	mi
 8010942:	2320      	movmi	r3, #32
 8010944:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010948:	0711      	lsls	r1, r2, #28
 801094a:	bf44      	itt	mi
 801094c:	232b      	movmi	r3, #43	; 0x2b
 801094e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010952:	f89a 3000 	ldrb.w	r3, [sl]
 8010956:	2b2a      	cmp	r3, #42	; 0x2a
 8010958:	d015      	beq.n	8010986 <_svfiprintf_r+0xf6>
 801095a:	9a07      	ldr	r2, [sp, #28]
 801095c:	4654      	mov	r4, sl
 801095e:	2000      	movs	r0, #0
 8010960:	f04f 0c0a 	mov.w	ip, #10
 8010964:	4621      	mov	r1, r4
 8010966:	f811 3b01 	ldrb.w	r3, [r1], #1
 801096a:	3b30      	subs	r3, #48	; 0x30
 801096c:	2b09      	cmp	r3, #9
 801096e:	d94d      	bls.n	8010a0c <_svfiprintf_r+0x17c>
 8010970:	b1b0      	cbz	r0, 80109a0 <_svfiprintf_r+0x110>
 8010972:	9207      	str	r2, [sp, #28]
 8010974:	e014      	b.n	80109a0 <_svfiprintf_r+0x110>
 8010976:	eba0 0308 	sub.w	r3, r0, r8
 801097a:	fa09 f303 	lsl.w	r3, r9, r3
 801097e:	4313      	orrs	r3, r2
 8010980:	9304      	str	r3, [sp, #16]
 8010982:	46a2      	mov	sl, r4
 8010984:	e7d2      	b.n	801092c <_svfiprintf_r+0x9c>
 8010986:	9b03      	ldr	r3, [sp, #12]
 8010988:	1d19      	adds	r1, r3, #4
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	9103      	str	r1, [sp, #12]
 801098e:	2b00      	cmp	r3, #0
 8010990:	bfbb      	ittet	lt
 8010992:	425b      	neglt	r3, r3
 8010994:	f042 0202 	orrlt.w	r2, r2, #2
 8010998:	9307      	strge	r3, [sp, #28]
 801099a:	9307      	strlt	r3, [sp, #28]
 801099c:	bfb8      	it	lt
 801099e:	9204      	strlt	r2, [sp, #16]
 80109a0:	7823      	ldrb	r3, [r4, #0]
 80109a2:	2b2e      	cmp	r3, #46	; 0x2e
 80109a4:	d10c      	bne.n	80109c0 <_svfiprintf_r+0x130>
 80109a6:	7863      	ldrb	r3, [r4, #1]
 80109a8:	2b2a      	cmp	r3, #42	; 0x2a
 80109aa:	d134      	bne.n	8010a16 <_svfiprintf_r+0x186>
 80109ac:	9b03      	ldr	r3, [sp, #12]
 80109ae:	1d1a      	adds	r2, r3, #4
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	9203      	str	r2, [sp, #12]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	bfb8      	it	lt
 80109b8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80109bc:	3402      	adds	r4, #2
 80109be:	9305      	str	r3, [sp, #20]
 80109c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010a88 <_svfiprintf_r+0x1f8>
 80109c4:	7821      	ldrb	r1, [r4, #0]
 80109c6:	2203      	movs	r2, #3
 80109c8:	4650      	mov	r0, sl
 80109ca:	f7ef fc39 	bl	8000240 <memchr>
 80109ce:	b138      	cbz	r0, 80109e0 <_svfiprintf_r+0x150>
 80109d0:	9b04      	ldr	r3, [sp, #16]
 80109d2:	eba0 000a 	sub.w	r0, r0, sl
 80109d6:	2240      	movs	r2, #64	; 0x40
 80109d8:	4082      	lsls	r2, r0
 80109da:	4313      	orrs	r3, r2
 80109dc:	3401      	adds	r4, #1
 80109de:	9304      	str	r3, [sp, #16]
 80109e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109e4:	4825      	ldr	r0, [pc, #148]	; (8010a7c <_svfiprintf_r+0x1ec>)
 80109e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80109ea:	2206      	movs	r2, #6
 80109ec:	f7ef fc28 	bl	8000240 <memchr>
 80109f0:	2800      	cmp	r0, #0
 80109f2:	d038      	beq.n	8010a66 <_svfiprintf_r+0x1d6>
 80109f4:	4b22      	ldr	r3, [pc, #136]	; (8010a80 <_svfiprintf_r+0x1f0>)
 80109f6:	bb1b      	cbnz	r3, 8010a40 <_svfiprintf_r+0x1b0>
 80109f8:	9b03      	ldr	r3, [sp, #12]
 80109fa:	3307      	adds	r3, #7
 80109fc:	f023 0307 	bic.w	r3, r3, #7
 8010a00:	3308      	adds	r3, #8
 8010a02:	9303      	str	r3, [sp, #12]
 8010a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a06:	4433      	add	r3, r6
 8010a08:	9309      	str	r3, [sp, #36]	; 0x24
 8010a0a:	e768      	b.n	80108de <_svfiprintf_r+0x4e>
 8010a0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010a10:	460c      	mov	r4, r1
 8010a12:	2001      	movs	r0, #1
 8010a14:	e7a6      	b.n	8010964 <_svfiprintf_r+0xd4>
 8010a16:	2300      	movs	r3, #0
 8010a18:	3401      	adds	r4, #1
 8010a1a:	9305      	str	r3, [sp, #20]
 8010a1c:	4619      	mov	r1, r3
 8010a1e:	f04f 0c0a 	mov.w	ip, #10
 8010a22:	4620      	mov	r0, r4
 8010a24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010a28:	3a30      	subs	r2, #48	; 0x30
 8010a2a:	2a09      	cmp	r2, #9
 8010a2c:	d903      	bls.n	8010a36 <_svfiprintf_r+0x1a6>
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d0c6      	beq.n	80109c0 <_svfiprintf_r+0x130>
 8010a32:	9105      	str	r1, [sp, #20]
 8010a34:	e7c4      	b.n	80109c0 <_svfiprintf_r+0x130>
 8010a36:	fb0c 2101 	mla	r1, ip, r1, r2
 8010a3a:	4604      	mov	r4, r0
 8010a3c:	2301      	movs	r3, #1
 8010a3e:	e7f0      	b.n	8010a22 <_svfiprintf_r+0x192>
 8010a40:	ab03      	add	r3, sp, #12
 8010a42:	9300      	str	r3, [sp, #0]
 8010a44:	462a      	mov	r2, r5
 8010a46:	4b0f      	ldr	r3, [pc, #60]	; (8010a84 <_svfiprintf_r+0x1f4>)
 8010a48:	a904      	add	r1, sp, #16
 8010a4a:	4638      	mov	r0, r7
 8010a4c:	f3af 8000 	nop.w
 8010a50:	1c42      	adds	r2, r0, #1
 8010a52:	4606      	mov	r6, r0
 8010a54:	d1d6      	bne.n	8010a04 <_svfiprintf_r+0x174>
 8010a56:	89ab      	ldrh	r3, [r5, #12]
 8010a58:	065b      	lsls	r3, r3, #25
 8010a5a:	f53f af2d 	bmi.w	80108b8 <_svfiprintf_r+0x28>
 8010a5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010a60:	b01d      	add	sp, #116	; 0x74
 8010a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a66:	ab03      	add	r3, sp, #12
 8010a68:	9300      	str	r3, [sp, #0]
 8010a6a:	462a      	mov	r2, r5
 8010a6c:	4b05      	ldr	r3, [pc, #20]	; (8010a84 <_svfiprintf_r+0x1f4>)
 8010a6e:	a904      	add	r1, sp, #16
 8010a70:	4638      	mov	r0, r7
 8010a72:	f000 f9bd 	bl	8010df0 <_printf_i>
 8010a76:	e7eb      	b.n	8010a50 <_svfiprintf_r+0x1c0>
 8010a78:	08011f25 	.word	0x08011f25
 8010a7c:	08011f2f 	.word	0x08011f2f
 8010a80:	00000000 	.word	0x00000000
 8010a84:	080107dd 	.word	0x080107dd
 8010a88:	08011f2b 	.word	0x08011f2b

08010a8c <__sfputc_r>:
 8010a8c:	6893      	ldr	r3, [r2, #8]
 8010a8e:	3b01      	subs	r3, #1
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	b410      	push	{r4}
 8010a94:	6093      	str	r3, [r2, #8]
 8010a96:	da08      	bge.n	8010aaa <__sfputc_r+0x1e>
 8010a98:	6994      	ldr	r4, [r2, #24]
 8010a9a:	42a3      	cmp	r3, r4
 8010a9c:	db01      	blt.n	8010aa2 <__sfputc_r+0x16>
 8010a9e:	290a      	cmp	r1, #10
 8010aa0:	d103      	bne.n	8010aaa <__sfputc_r+0x1e>
 8010aa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010aa6:	f000 bbe5 	b.w	8011274 <__swbuf_r>
 8010aaa:	6813      	ldr	r3, [r2, #0]
 8010aac:	1c58      	adds	r0, r3, #1
 8010aae:	6010      	str	r0, [r2, #0]
 8010ab0:	7019      	strb	r1, [r3, #0]
 8010ab2:	4608      	mov	r0, r1
 8010ab4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010ab8:	4770      	bx	lr

08010aba <__sfputs_r>:
 8010aba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010abc:	4606      	mov	r6, r0
 8010abe:	460f      	mov	r7, r1
 8010ac0:	4614      	mov	r4, r2
 8010ac2:	18d5      	adds	r5, r2, r3
 8010ac4:	42ac      	cmp	r4, r5
 8010ac6:	d101      	bne.n	8010acc <__sfputs_r+0x12>
 8010ac8:	2000      	movs	r0, #0
 8010aca:	e007      	b.n	8010adc <__sfputs_r+0x22>
 8010acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ad0:	463a      	mov	r2, r7
 8010ad2:	4630      	mov	r0, r6
 8010ad4:	f7ff ffda 	bl	8010a8c <__sfputc_r>
 8010ad8:	1c43      	adds	r3, r0, #1
 8010ada:	d1f3      	bne.n	8010ac4 <__sfputs_r+0xa>
 8010adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010ae0 <_vfiprintf_r>:
 8010ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ae4:	460d      	mov	r5, r1
 8010ae6:	b09d      	sub	sp, #116	; 0x74
 8010ae8:	4614      	mov	r4, r2
 8010aea:	4698      	mov	r8, r3
 8010aec:	4606      	mov	r6, r0
 8010aee:	b118      	cbz	r0, 8010af8 <_vfiprintf_r+0x18>
 8010af0:	6a03      	ldr	r3, [r0, #32]
 8010af2:	b90b      	cbnz	r3, 8010af8 <_vfiprintf_r+0x18>
 8010af4:	f7ff fca0 	bl	8010438 <__sinit>
 8010af8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010afa:	07d9      	lsls	r1, r3, #31
 8010afc:	d405      	bmi.n	8010b0a <_vfiprintf_r+0x2a>
 8010afe:	89ab      	ldrh	r3, [r5, #12]
 8010b00:	059a      	lsls	r2, r3, #22
 8010b02:	d402      	bmi.n	8010b0a <_vfiprintf_r+0x2a>
 8010b04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010b06:	f7ff fe1a 	bl	801073e <__retarget_lock_acquire_recursive>
 8010b0a:	89ab      	ldrh	r3, [r5, #12]
 8010b0c:	071b      	lsls	r3, r3, #28
 8010b0e:	d501      	bpl.n	8010b14 <_vfiprintf_r+0x34>
 8010b10:	692b      	ldr	r3, [r5, #16]
 8010b12:	b99b      	cbnz	r3, 8010b3c <_vfiprintf_r+0x5c>
 8010b14:	4629      	mov	r1, r5
 8010b16:	4630      	mov	r0, r6
 8010b18:	f000 fbea 	bl	80112f0 <__swsetup_r>
 8010b1c:	b170      	cbz	r0, 8010b3c <_vfiprintf_r+0x5c>
 8010b1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010b20:	07dc      	lsls	r4, r3, #31
 8010b22:	d504      	bpl.n	8010b2e <_vfiprintf_r+0x4e>
 8010b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010b28:	b01d      	add	sp, #116	; 0x74
 8010b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b2e:	89ab      	ldrh	r3, [r5, #12]
 8010b30:	0598      	lsls	r0, r3, #22
 8010b32:	d4f7      	bmi.n	8010b24 <_vfiprintf_r+0x44>
 8010b34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010b36:	f7ff fe03 	bl	8010740 <__retarget_lock_release_recursive>
 8010b3a:	e7f3      	b.n	8010b24 <_vfiprintf_r+0x44>
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8010b40:	2320      	movs	r3, #32
 8010b42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010b46:	f8cd 800c 	str.w	r8, [sp, #12]
 8010b4a:	2330      	movs	r3, #48	; 0x30
 8010b4c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010d00 <_vfiprintf_r+0x220>
 8010b50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010b54:	f04f 0901 	mov.w	r9, #1
 8010b58:	4623      	mov	r3, r4
 8010b5a:	469a      	mov	sl, r3
 8010b5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b60:	b10a      	cbz	r2, 8010b66 <_vfiprintf_r+0x86>
 8010b62:	2a25      	cmp	r2, #37	; 0x25
 8010b64:	d1f9      	bne.n	8010b5a <_vfiprintf_r+0x7a>
 8010b66:	ebba 0b04 	subs.w	fp, sl, r4
 8010b6a:	d00b      	beq.n	8010b84 <_vfiprintf_r+0xa4>
 8010b6c:	465b      	mov	r3, fp
 8010b6e:	4622      	mov	r2, r4
 8010b70:	4629      	mov	r1, r5
 8010b72:	4630      	mov	r0, r6
 8010b74:	f7ff ffa1 	bl	8010aba <__sfputs_r>
 8010b78:	3001      	adds	r0, #1
 8010b7a:	f000 80a9 	beq.w	8010cd0 <_vfiprintf_r+0x1f0>
 8010b7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b80:	445a      	add	r2, fp
 8010b82:	9209      	str	r2, [sp, #36]	; 0x24
 8010b84:	f89a 3000 	ldrb.w	r3, [sl]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	f000 80a1 	beq.w	8010cd0 <_vfiprintf_r+0x1f0>
 8010b8e:	2300      	movs	r3, #0
 8010b90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010b94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b98:	f10a 0a01 	add.w	sl, sl, #1
 8010b9c:	9304      	str	r3, [sp, #16]
 8010b9e:	9307      	str	r3, [sp, #28]
 8010ba0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010ba4:	931a      	str	r3, [sp, #104]	; 0x68
 8010ba6:	4654      	mov	r4, sl
 8010ba8:	2205      	movs	r2, #5
 8010baa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bae:	4854      	ldr	r0, [pc, #336]	; (8010d00 <_vfiprintf_r+0x220>)
 8010bb0:	f7ef fb46 	bl	8000240 <memchr>
 8010bb4:	9a04      	ldr	r2, [sp, #16]
 8010bb6:	b9d8      	cbnz	r0, 8010bf0 <_vfiprintf_r+0x110>
 8010bb8:	06d1      	lsls	r1, r2, #27
 8010bba:	bf44      	itt	mi
 8010bbc:	2320      	movmi	r3, #32
 8010bbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010bc2:	0713      	lsls	r3, r2, #28
 8010bc4:	bf44      	itt	mi
 8010bc6:	232b      	movmi	r3, #43	; 0x2b
 8010bc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010bcc:	f89a 3000 	ldrb.w	r3, [sl]
 8010bd0:	2b2a      	cmp	r3, #42	; 0x2a
 8010bd2:	d015      	beq.n	8010c00 <_vfiprintf_r+0x120>
 8010bd4:	9a07      	ldr	r2, [sp, #28]
 8010bd6:	4654      	mov	r4, sl
 8010bd8:	2000      	movs	r0, #0
 8010bda:	f04f 0c0a 	mov.w	ip, #10
 8010bde:	4621      	mov	r1, r4
 8010be0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010be4:	3b30      	subs	r3, #48	; 0x30
 8010be6:	2b09      	cmp	r3, #9
 8010be8:	d94d      	bls.n	8010c86 <_vfiprintf_r+0x1a6>
 8010bea:	b1b0      	cbz	r0, 8010c1a <_vfiprintf_r+0x13a>
 8010bec:	9207      	str	r2, [sp, #28]
 8010bee:	e014      	b.n	8010c1a <_vfiprintf_r+0x13a>
 8010bf0:	eba0 0308 	sub.w	r3, r0, r8
 8010bf4:	fa09 f303 	lsl.w	r3, r9, r3
 8010bf8:	4313      	orrs	r3, r2
 8010bfa:	9304      	str	r3, [sp, #16]
 8010bfc:	46a2      	mov	sl, r4
 8010bfe:	e7d2      	b.n	8010ba6 <_vfiprintf_r+0xc6>
 8010c00:	9b03      	ldr	r3, [sp, #12]
 8010c02:	1d19      	adds	r1, r3, #4
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	9103      	str	r1, [sp, #12]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	bfbb      	ittet	lt
 8010c0c:	425b      	neglt	r3, r3
 8010c0e:	f042 0202 	orrlt.w	r2, r2, #2
 8010c12:	9307      	strge	r3, [sp, #28]
 8010c14:	9307      	strlt	r3, [sp, #28]
 8010c16:	bfb8      	it	lt
 8010c18:	9204      	strlt	r2, [sp, #16]
 8010c1a:	7823      	ldrb	r3, [r4, #0]
 8010c1c:	2b2e      	cmp	r3, #46	; 0x2e
 8010c1e:	d10c      	bne.n	8010c3a <_vfiprintf_r+0x15a>
 8010c20:	7863      	ldrb	r3, [r4, #1]
 8010c22:	2b2a      	cmp	r3, #42	; 0x2a
 8010c24:	d134      	bne.n	8010c90 <_vfiprintf_r+0x1b0>
 8010c26:	9b03      	ldr	r3, [sp, #12]
 8010c28:	1d1a      	adds	r2, r3, #4
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	9203      	str	r2, [sp, #12]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	bfb8      	it	lt
 8010c32:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010c36:	3402      	adds	r4, #2
 8010c38:	9305      	str	r3, [sp, #20]
 8010c3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010d10 <_vfiprintf_r+0x230>
 8010c3e:	7821      	ldrb	r1, [r4, #0]
 8010c40:	2203      	movs	r2, #3
 8010c42:	4650      	mov	r0, sl
 8010c44:	f7ef fafc 	bl	8000240 <memchr>
 8010c48:	b138      	cbz	r0, 8010c5a <_vfiprintf_r+0x17a>
 8010c4a:	9b04      	ldr	r3, [sp, #16]
 8010c4c:	eba0 000a 	sub.w	r0, r0, sl
 8010c50:	2240      	movs	r2, #64	; 0x40
 8010c52:	4082      	lsls	r2, r0
 8010c54:	4313      	orrs	r3, r2
 8010c56:	3401      	adds	r4, #1
 8010c58:	9304      	str	r3, [sp, #16]
 8010c5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c5e:	4829      	ldr	r0, [pc, #164]	; (8010d04 <_vfiprintf_r+0x224>)
 8010c60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010c64:	2206      	movs	r2, #6
 8010c66:	f7ef faeb 	bl	8000240 <memchr>
 8010c6a:	2800      	cmp	r0, #0
 8010c6c:	d03f      	beq.n	8010cee <_vfiprintf_r+0x20e>
 8010c6e:	4b26      	ldr	r3, [pc, #152]	; (8010d08 <_vfiprintf_r+0x228>)
 8010c70:	bb1b      	cbnz	r3, 8010cba <_vfiprintf_r+0x1da>
 8010c72:	9b03      	ldr	r3, [sp, #12]
 8010c74:	3307      	adds	r3, #7
 8010c76:	f023 0307 	bic.w	r3, r3, #7
 8010c7a:	3308      	adds	r3, #8
 8010c7c:	9303      	str	r3, [sp, #12]
 8010c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c80:	443b      	add	r3, r7
 8010c82:	9309      	str	r3, [sp, #36]	; 0x24
 8010c84:	e768      	b.n	8010b58 <_vfiprintf_r+0x78>
 8010c86:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c8a:	460c      	mov	r4, r1
 8010c8c:	2001      	movs	r0, #1
 8010c8e:	e7a6      	b.n	8010bde <_vfiprintf_r+0xfe>
 8010c90:	2300      	movs	r3, #0
 8010c92:	3401      	adds	r4, #1
 8010c94:	9305      	str	r3, [sp, #20]
 8010c96:	4619      	mov	r1, r3
 8010c98:	f04f 0c0a 	mov.w	ip, #10
 8010c9c:	4620      	mov	r0, r4
 8010c9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ca2:	3a30      	subs	r2, #48	; 0x30
 8010ca4:	2a09      	cmp	r2, #9
 8010ca6:	d903      	bls.n	8010cb0 <_vfiprintf_r+0x1d0>
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d0c6      	beq.n	8010c3a <_vfiprintf_r+0x15a>
 8010cac:	9105      	str	r1, [sp, #20]
 8010cae:	e7c4      	b.n	8010c3a <_vfiprintf_r+0x15a>
 8010cb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8010cb4:	4604      	mov	r4, r0
 8010cb6:	2301      	movs	r3, #1
 8010cb8:	e7f0      	b.n	8010c9c <_vfiprintf_r+0x1bc>
 8010cba:	ab03      	add	r3, sp, #12
 8010cbc:	9300      	str	r3, [sp, #0]
 8010cbe:	462a      	mov	r2, r5
 8010cc0:	4b12      	ldr	r3, [pc, #72]	; (8010d0c <_vfiprintf_r+0x22c>)
 8010cc2:	a904      	add	r1, sp, #16
 8010cc4:	4630      	mov	r0, r6
 8010cc6:	f3af 8000 	nop.w
 8010cca:	4607      	mov	r7, r0
 8010ccc:	1c78      	adds	r0, r7, #1
 8010cce:	d1d6      	bne.n	8010c7e <_vfiprintf_r+0x19e>
 8010cd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010cd2:	07d9      	lsls	r1, r3, #31
 8010cd4:	d405      	bmi.n	8010ce2 <_vfiprintf_r+0x202>
 8010cd6:	89ab      	ldrh	r3, [r5, #12]
 8010cd8:	059a      	lsls	r2, r3, #22
 8010cda:	d402      	bmi.n	8010ce2 <_vfiprintf_r+0x202>
 8010cdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010cde:	f7ff fd2f 	bl	8010740 <__retarget_lock_release_recursive>
 8010ce2:	89ab      	ldrh	r3, [r5, #12]
 8010ce4:	065b      	lsls	r3, r3, #25
 8010ce6:	f53f af1d 	bmi.w	8010b24 <_vfiprintf_r+0x44>
 8010cea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010cec:	e71c      	b.n	8010b28 <_vfiprintf_r+0x48>
 8010cee:	ab03      	add	r3, sp, #12
 8010cf0:	9300      	str	r3, [sp, #0]
 8010cf2:	462a      	mov	r2, r5
 8010cf4:	4b05      	ldr	r3, [pc, #20]	; (8010d0c <_vfiprintf_r+0x22c>)
 8010cf6:	a904      	add	r1, sp, #16
 8010cf8:	4630      	mov	r0, r6
 8010cfa:	f000 f879 	bl	8010df0 <_printf_i>
 8010cfe:	e7e4      	b.n	8010cca <_vfiprintf_r+0x1ea>
 8010d00:	08011f25 	.word	0x08011f25
 8010d04:	08011f2f 	.word	0x08011f2f
 8010d08:	00000000 	.word	0x00000000
 8010d0c:	08010abb 	.word	0x08010abb
 8010d10:	08011f2b 	.word	0x08011f2b

08010d14 <_printf_common>:
 8010d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d18:	4616      	mov	r6, r2
 8010d1a:	4699      	mov	r9, r3
 8010d1c:	688a      	ldr	r2, [r1, #8]
 8010d1e:	690b      	ldr	r3, [r1, #16]
 8010d20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010d24:	4293      	cmp	r3, r2
 8010d26:	bfb8      	it	lt
 8010d28:	4613      	movlt	r3, r2
 8010d2a:	6033      	str	r3, [r6, #0]
 8010d2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010d30:	4607      	mov	r7, r0
 8010d32:	460c      	mov	r4, r1
 8010d34:	b10a      	cbz	r2, 8010d3a <_printf_common+0x26>
 8010d36:	3301      	adds	r3, #1
 8010d38:	6033      	str	r3, [r6, #0]
 8010d3a:	6823      	ldr	r3, [r4, #0]
 8010d3c:	0699      	lsls	r1, r3, #26
 8010d3e:	bf42      	ittt	mi
 8010d40:	6833      	ldrmi	r3, [r6, #0]
 8010d42:	3302      	addmi	r3, #2
 8010d44:	6033      	strmi	r3, [r6, #0]
 8010d46:	6825      	ldr	r5, [r4, #0]
 8010d48:	f015 0506 	ands.w	r5, r5, #6
 8010d4c:	d106      	bne.n	8010d5c <_printf_common+0x48>
 8010d4e:	f104 0a19 	add.w	sl, r4, #25
 8010d52:	68e3      	ldr	r3, [r4, #12]
 8010d54:	6832      	ldr	r2, [r6, #0]
 8010d56:	1a9b      	subs	r3, r3, r2
 8010d58:	42ab      	cmp	r3, r5
 8010d5a:	dc26      	bgt.n	8010daa <_printf_common+0x96>
 8010d5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010d60:	1e13      	subs	r3, r2, #0
 8010d62:	6822      	ldr	r2, [r4, #0]
 8010d64:	bf18      	it	ne
 8010d66:	2301      	movne	r3, #1
 8010d68:	0692      	lsls	r2, r2, #26
 8010d6a:	d42b      	bmi.n	8010dc4 <_printf_common+0xb0>
 8010d6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010d70:	4649      	mov	r1, r9
 8010d72:	4638      	mov	r0, r7
 8010d74:	47c0      	blx	r8
 8010d76:	3001      	adds	r0, #1
 8010d78:	d01e      	beq.n	8010db8 <_printf_common+0xa4>
 8010d7a:	6823      	ldr	r3, [r4, #0]
 8010d7c:	6922      	ldr	r2, [r4, #16]
 8010d7e:	f003 0306 	and.w	r3, r3, #6
 8010d82:	2b04      	cmp	r3, #4
 8010d84:	bf02      	ittt	eq
 8010d86:	68e5      	ldreq	r5, [r4, #12]
 8010d88:	6833      	ldreq	r3, [r6, #0]
 8010d8a:	1aed      	subeq	r5, r5, r3
 8010d8c:	68a3      	ldr	r3, [r4, #8]
 8010d8e:	bf0c      	ite	eq
 8010d90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010d94:	2500      	movne	r5, #0
 8010d96:	4293      	cmp	r3, r2
 8010d98:	bfc4      	itt	gt
 8010d9a:	1a9b      	subgt	r3, r3, r2
 8010d9c:	18ed      	addgt	r5, r5, r3
 8010d9e:	2600      	movs	r6, #0
 8010da0:	341a      	adds	r4, #26
 8010da2:	42b5      	cmp	r5, r6
 8010da4:	d11a      	bne.n	8010ddc <_printf_common+0xc8>
 8010da6:	2000      	movs	r0, #0
 8010da8:	e008      	b.n	8010dbc <_printf_common+0xa8>
 8010daa:	2301      	movs	r3, #1
 8010dac:	4652      	mov	r2, sl
 8010dae:	4649      	mov	r1, r9
 8010db0:	4638      	mov	r0, r7
 8010db2:	47c0      	blx	r8
 8010db4:	3001      	adds	r0, #1
 8010db6:	d103      	bne.n	8010dc0 <_printf_common+0xac>
 8010db8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010dc0:	3501      	adds	r5, #1
 8010dc2:	e7c6      	b.n	8010d52 <_printf_common+0x3e>
 8010dc4:	18e1      	adds	r1, r4, r3
 8010dc6:	1c5a      	adds	r2, r3, #1
 8010dc8:	2030      	movs	r0, #48	; 0x30
 8010dca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010dce:	4422      	add	r2, r4
 8010dd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010dd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010dd8:	3302      	adds	r3, #2
 8010dda:	e7c7      	b.n	8010d6c <_printf_common+0x58>
 8010ddc:	2301      	movs	r3, #1
 8010dde:	4622      	mov	r2, r4
 8010de0:	4649      	mov	r1, r9
 8010de2:	4638      	mov	r0, r7
 8010de4:	47c0      	blx	r8
 8010de6:	3001      	adds	r0, #1
 8010de8:	d0e6      	beq.n	8010db8 <_printf_common+0xa4>
 8010dea:	3601      	adds	r6, #1
 8010dec:	e7d9      	b.n	8010da2 <_printf_common+0x8e>
	...

08010df0 <_printf_i>:
 8010df0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010df4:	7e0f      	ldrb	r7, [r1, #24]
 8010df6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010df8:	2f78      	cmp	r7, #120	; 0x78
 8010dfa:	4691      	mov	r9, r2
 8010dfc:	4680      	mov	r8, r0
 8010dfe:	460c      	mov	r4, r1
 8010e00:	469a      	mov	sl, r3
 8010e02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010e06:	d807      	bhi.n	8010e18 <_printf_i+0x28>
 8010e08:	2f62      	cmp	r7, #98	; 0x62
 8010e0a:	d80a      	bhi.n	8010e22 <_printf_i+0x32>
 8010e0c:	2f00      	cmp	r7, #0
 8010e0e:	f000 80d4 	beq.w	8010fba <_printf_i+0x1ca>
 8010e12:	2f58      	cmp	r7, #88	; 0x58
 8010e14:	f000 80c0 	beq.w	8010f98 <_printf_i+0x1a8>
 8010e18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010e1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010e20:	e03a      	b.n	8010e98 <_printf_i+0xa8>
 8010e22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010e26:	2b15      	cmp	r3, #21
 8010e28:	d8f6      	bhi.n	8010e18 <_printf_i+0x28>
 8010e2a:	a101      	add	r1, pc, #4	; (adr r1, 8010e30 <_printf_i+0x40>)
 8010e2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010e30:	08010e89 	.word	0x08010e89
 8010e34:	08010e9d 	.word	0x08010e9d
 8010e38:	08010e19 	.word	0x08010e19
 8010e3c:	08010e19 	.word	0x08010e19
 8010e40:	08010e19 	.word	0x08010e19
 8010e44:	08010e19 	.word	0x08010e19
 8010e48:	08010e9d 	.word	0x08010e9d
 8010e4c:	08010e19 	.word	0x08010e19
 8010e50:	08010e19 	.word	0x08010e19
 8010e54:	08010e19 	.word	0x08010e19
 8010e58:	08010e19 	.word	0x08010e19
 8010e5c:	08010fa1 	.word	0x08010fa1
 8010e60:	08010ec9 	.word	0x08010ec9
 8010e64:	08010f5b 	.word	0x08010f5b
 8010e68:	08010e19 	.word	0x08010e19
 8010e6c:	08010e19 	.word	0x08010e19
 8010e70:	08010fc3 	.word	0x08010fc3
 8010e74:	08010e19 	.word	0x08010e19
 8010e78:	08010ec9 	.word	0x08010ec9
 8010e7c:	08010e19 	.word	0x08010e19
 8010e80:	08010e19 	.word	0x08010e19
 8010e84:	08010f63 	.word	0x08010f63
 8010e88:	682b      	ldr	r3, [r5, #0]
 8010e8a:	1d1a      	adds	r2, r3, #4
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	602a      	str	r2, [r5, #0]
 8010e90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010e94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010e98:	2301      	movs	r3, #1
 8010e9a:	e09f      	b.n	8010fdc <_printf_i+0x1ec>
 8010e9c:	6820      	ldr	r0, [r4, #0]
 8010e9e:	682b      	ldr	r3, [r5, #0]
 8010ea0:	0607      	lsls	r7, r0, #24
 8010ea2:	f103 0104 	add.w	r1, r3, #4
 8010ea6:	6029      	str	r1, [r5, #0]
 8010ea8:	d501      	bpl.n	8010eae <_printf_i+0xbe>
 8010eaa:	681e      	ldr	r6, [r3, #0]
 8010eac:	e003      	b.n	8010eb6 <_printf_i+0xc6>
 8010eae:	0646      	lsls	r6, r0, #25
 8010eb0:	d5fb      	bpl.n	8010eaa <_printf_i+0xba>
 8010eb2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8010eb6:	2e00      	cmp	r6, #0
 8010eb8:	da03      	bge.n	8010ec2 <_printf_i+0xd2>
 8010eba:	232d      	movs	r3, #45	; 0x2d
 8010ebc:	4276      	negs	r6, r6
 8010ebe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ec2:	485a      	ldr	r0, [pc, #360]	; (801102c <_printf_i+0x23c>)
 8010ec4:	230a      	movs	r3, #10
 8010ec6:	e012      	b.n	8010eee <_printf_i+0xfe>
 8010ec8:	682b      	ldr	r3, [r5, #0]
 8010eca:	6820      	ldr	r0, [r4, #0]
 8010ecc:	1d19      	adds	r1, r3, #4
 8010ece:	6029      	str	r1, [r5, #0]
 8010ed0:	0605      	lsls	r5, r0, #24
 8010ed2:	d501      	bpl.n	8010ed8 <_printf_i+0xe8>
 8010ed4:	681e      	ldr	r6, [r3, #0]
 8010ed6:	e002      	b.n	8010ede <_printf_i+0xee>
 8010ed8:	0641      	lsls	r1, r0, #25
 8010eda:	d5fb      	bpl.n	8010ed4 <_printf_i+0xe4>
 8010edc:	881e      	ldrh	r6, [r3, #0]
 8010ede:	4853      	ldr	r0, [pc, #332]	; (801102c <_printf_i+0x23c>)
 8010ee0:	2f6f      	cmp	r7, #111	; 0x6f
 8010ee2:	bf0c      	ite	eq
 8010ee4:	2308      	moveq	r3, #8
 8010ee6:	230a      	movne	r3, #10
 8010ee8:	2100      	movs	r1, #0
 8010eea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010eee:	6865      	ldr	r5, [r4, #4]
 8010ef0:	60a5      	str	r5, [r4, #8]
 8010ef2:	2d00      	cmp	r5, #0
 8010ef4:	bfa2      	ittt	ge
 8010ef6:	6821      	ldrge	r1, [r4, #0]
 8010ef8:	f021 0104 	bicge.w	r1, r1, #4
 8010efc:	6021      	strge	r1, [r4, #0]
 8010efe:	b90e      	cbnz	r6, 8010f04 <_printf_i+0x114>
 8010f00:	2d00      	cmp	r5, #0
 8010f02:	d04b      	beq.n	8010f9c <_printf_i+0x1ac>
 8010f04:	4615      	mov	r5, r2
 8010f06:	fbb6 f1f3 	udiv	r1, r6, r3
 8010f0a:	fb03 6711 	mls	r7, r3, r1, r6
 8010f0e:	5dc7      	ldrb	r7, [r0, r7]
 8010f10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010f14:	4637      	mov	r7, r6
 8010f16:	42bb      	cmp	r3, r7
 8010f18:	460e      	mov	r6, r1
 8010f1a:	d9f4      	bls.n	8010f06 <_printf_i+0x116>
 8010f1c:	2b08      	cmp	r3, #8
 8010f1e:	d10b      	bne.n	8010f38 <_printf_i+0x148>
 8010f20:	6823      	ldr	r3, [r4, #0]
 8010f22:	07de      	lsls	r6, r3, #31
 8010f24:	d508      	bpl.n	8010f38 <_printf_i+0x148>
 8010f26:	6923      	ldr	r3, [r4, #16]
 8010f28:	6861      	ldr	r1, [r4, #4]
 8010f2a:	4299      	cmp	r1, r3
 8010f2c:	bfde      	ittt	le
 8010f2e:	2330      	movle	r3, #48	; 0x30
 8010f30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010f34:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010f38:	1b52      	subs	r2, r2, r5
 8010f3a:	6122      	str	r2, [r4, #16]
 8010f3c:	f8cd a000 	str.w	sl, [sp]
 8010f40:	464b      	mov	r3, r9
 8010f42:	aa03      	add	r2, sp, #12
 8010f44:	4621      	mov	r1, r4
 8010f46:	4640      	mov	r0, r8
 8010f48:	f7ff fee4 	bl	8010d14 <_printf_common>
 8010f4c:	3001      	adds	r0, #1
 8010f4e:	d14a      	bne.n	8010fe6 <_printf_i+0x1f6>
 8010f50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010f54:	b004      	add	sp, #16
 8010f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f5a:	6823      	ldr	r3, [r4, #0]
 8010f5c:	f043 0320 	orr.w	r3, r3, #32
 8010f60:	6023      	str	r3, [r4, #0]
 8010f62:	4833      	ldr	r0, [pc, #204]	; (8011030 <_printf_i+0x240>)
 8010f64:	2778      	movs	r7, #120	; 0x78
 8010f66:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010f6a:	6823      	ldr	r3, [r4, #0]
 8010f6c:	6829      	ldr	r1, [r5, #0]
 8010f6e:	061f      	lsls	r7, r3, #24
 8010f70:	f851 6b04 	ldr.w	r6, [r1], #4
 8010f74:	d402      	bmi.n	8010f7c <_printf_i+0x18c>
 8010f76:	065f      	lsls	r7, r3, #25
 8010f78:	bf48      	it	mi
 8010f7a:	b2b6      	uxthmi	r6, r6
 8010f7c:	07df      	lsls	r7, r3, #31
 8010f7e:	bf48      	it	mi
 8010f80:	f043 0320 	orrmi.w	r3, r3, #32
 8010f84:	6029      	str	r1, [r5, #0]
 8010f86:	bf48      	it	mi
 8010f88:	6023      	strmi	r3, [r4, #0]
 8010f8a:	b91e      	cbnz	r6, 8010f94 <_printf_i+0x1a4>
 8010f8c:	6823      	ldr	r3, [r4, #0]
 8010f8e:	f023 0320 	bic.w	r3, r3, #32
 8010f92:	6023      	str	r3, [r4, #0]
 8010f94:	2310      	movs	r3, #16
 8010f96:	e7a7      	b.n	8010ee8 <_printf_i+0xf8>
 8010f98:	4824      	ldr	r0, [pc, #144]	; (801102c <_printf_i+0x23c>)
 8010f9a:	e7e4      	b.n	8010f66 <_printf_i+0x176>
 8010f9c:	4615      	mov	r5, r2
 8010f9e:	e7bd      	b.n	8010f1c <_printf_i+0x12c>
 8010fa0:	682b      	ldr	r3, [r5, #0]
 8010fa2:	6826      	ldr	r6, [r4, #0]
 8010fa4:	6961      	ldr	r1, [r4, #20]
 8010fa6:	1d18      	adds	r0, r3, #4
 8010fa8:	6028      	str	r0, [r5, #0]
 8010faa:	0635      	lsls	r5, r6, #24
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	d501      	bpl.n	8010fb4 <_printf_i+0x1c4>
 8010fb0:	6019      	str	r1, [r3, #0]
 8010fb2:	e002      	b.n	8010fba <_printf_i+0x1ca>
 8010fb4:	0670      	lsls	r0, r6, #25
 8010fb6:	d5fb      	bpl.n	8010fb0 <_printf_i+0x1c0>
 8010fb8:	8019      	strh	r1, [r3, #0]
 8010fba:	2300      	movs	r3, #0
 8010fbc:	6123      	str	r3, [r4, #16]
 8010fbe:	4615      	mov	r5, r2
 8010fc0:	e7bc      	b.n	8010f3c <_printf_i+0x14c>
 8010fc2:	682b      	ldr	r3, [r5, #0]
 8010fc4:	1d1a      	adds	r2, r3, #4
 8010fc6:	602a      	str	r2, [r5, #0]
 8010fc8:	681d      	ldr	r5, [r3, #0]
 8010fca:	6862      	ldr	r2, [r4, #4]
 8010fcc:	2100      	movs	r1, #0
 8010fce:	4628      	mov	r0, r5
 8010fd0:	f7ef f936 	bl	8000240 <memchr>
 8010fd4:	b108      	cbz	r0, 8010fda <_printf_i+0x1ea>
 8010fd6:	1b40      	subs	r0, r0, r5
 8010fd8:	6060      	str	r0, [r4, #4]
 8010fda:	6863      	ldr	r3, [r4, #4]
 8010fdc:	6123      	str	r3, [r4, #16]
 8010fde:	2300      	movs	r3, #0
 8010fe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010fe4:	e7aa      	b.n	8010f3c <_printf_i+0x14c>
 8010fe6:	6923      	ldr	r3, [r4, #16]
 8010fe8:	462a      	mov	r2, r5
 8010fea:	4649      	mov	r1, r9
 8010fec:	4640      	mov	r0, r8
 8010fee:	47d0      	blx	sl
 8010ff0:	3001      	adds	r0, #1
 8010ff2:	d0ad      	beq.n	8010f50 <_printf_i+0x160>
 8010ff4:	6823      	ldr	r3, [r4, #0]
 8010ff6:	079b      	lsls	r3, r3, #30
 8010ff8:	d413      	bmi.n	8011022 <_printf_i+0x232>
 8010ffa:	68e0      	ldr	r0, [r4, #12]
 8010ffc:	9b03      	ldr	r3, [sp, #12]
 8010ffe:	4298      	cmp	r0, r3
 8011000:	bfb8      	it	lt
 8011002:	4618      	movlt	r0, r3
 8011004:	e7a6      	b.n	8010f54 <_printf_i+0x164>
 8011006:	2301      	movs	r3, #1
 8011008:	4632      	mov	r2, r6
 801100a:	4649      	mov	r1, r9
 801100c:	4640      	mov	r0, r8
 801100e:	47d0      	blx	sl
 8011010:	3001      	adds	r0, #1
 8011012:	d09d      	beq.n	8010f50 <_printf_i+0x160>
 8011014:	3501      	adds	r5, #1
 8011016:	68e3      	ldr	r3, [r4, #12]
 8011018:	9903      	ldr	r1, [sp, #12]
 801101a:	1a5b      	subs	r3, r3, r1
 801101c:	42ab      	cmp	r3, r5
 801101e:	dcf2      	bgt.n	8011006 <_printf_i+0x216>
 8011020:	e7eb      	b.n	8010ffa <_printf_i+0x20a>
 8011022:	2500      	movs	r5, #0
 8011024:	f104 0619 	add.w	r6, r4, #25
 8011028:	e7f5      	b.n	8011016 <_printf_i+0x226>
 801102a:	bf00      	nop
 801102c:	08011f36 	.word	0x08011f36
 8011030:	08011f47 	.word	0x08011f47

08011034 <__sflush_r>:
 8011034:	898a      	ldrh	r2, [r1, #12]
 8011036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801103a:	4605      	mov	r5, r0
 801103c:	0710      	lsls	r0, r2, #28
 801103e:	460c      	mov	r4, r1
 8011040:	d458      	bmi.n	80110f4 <__sflush_r+0xc0>
 8011042:	684b      	ldr	r3, [r1, #4]
 8011044:	2b00      	cmp	r3, #0
 8011046:	dc05      	bgt.n	8011054 <__sflush_r+0x20>
 8011048:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801104a:	2b00      	cmp	r3, #0
 801104c:	dc02      	bgt.n	8011054 <__sflush_r+0x20>
 801104e:	2000      	movs	r0, #0
 8011050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011054:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011056:	2e00      	cmp	r6, #0
 8011058:	d0f9      	beq.n	801104e <__sflush_r+0x1a>
 801105a:	2300      	movs	r3, #0
 801105c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011060:	682f      	ldr	r7, [r5, #0]
 8011062:	6a21      	ldr	r1, [r4, #32]
 8011064:	602b      	str	r3, [r5, #0]
 8011066:	d032      	beq.n	80110ce <__sflush_r+0x9a>
 8011068:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801106a:	89a3      	ldrh	r3, [r4, #12]
 801106c:	075a      	lsls	r2, r3, #29
 801106e:	d505      	bpl.n	801107c <__sflush_r+0x48>
 8011070:	6863      	ldr	r3, [r4, #4]
 8011072:	1ac0      	subs	r0, r0, r3
 8011074:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011076:	b10b      	cbz	r3, 801107c <__sflush_r+0x48>
 8011078:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801107a:	1ac0      	subs	r0, r0, r3
 801107c:	2300      	movs	r3, #0
 801107e:	4602      	mov	r2, r0
 8011080:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011082:	6a21      	ldr	r1, [r4, #32]
 8011084:	4628      	mov	r0, r5
 8011086:	47b0      	blx	r6
 8011088:	1c43      	adds	r3, r0, #1
 801108a:	89a3      	ldrh	r3, [r4, #12]
 801108c:	d106      	bne.n	801109c <__sflush_r+0x68>
 801108e:	6829      	ldr	r1, [r5, #0]
 8011090:	291d      	cmp	r1, #29
 8011092:	d82b      	bhi.n	80110ec <__sflush_r+0xb8>
 8011094:	4a29      	ldr	r2, [pc, #164]	; (801113c <__sflush_r+0x108>)
 8011096:	410a      	asrs	r2, r1
 8011098:	07d6      	lsls	r6, r2, #31
 801109a:	d427      	bmi.n	80110ec <__sflush_r+0xb8>
 801109c:	2200      	movs	r2, #0
 801109e:	6062      	str	r2, [r4, #4]
 80110a0:	04d9      	lsls	r1, r3, #19
 80110a2:	6922      	ldr	r2, [r4, #16]
 80110a4:	6022      	str	r2, [r4, #0]
 80110a6:	d504      	bpl.n	80110b2 <__sflush_r+0x7e>
 80110a8:	1c42      	adds	r2, r0, #1
 80110aa:	d101      	bne.n	80110b0 <__sflush_r+0x7c>
 80110ac:	682b      	ldr	r3, [r5, #0]
 80110ae:	b903      	cbnz	r3, 80110b2 <__sflush_r+0x7e>
 80110b0:	6560      	str	r0, [r4, #84]	; 0x54
 80110b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80110b4:	602f      	str	r7, [r5, #0]
 80110b6:	2900      	cmp	r1, #0
 80110b8:	d0c9      	beq.n	801104e <__sflush_r+0x1a>
 80110ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80110be:	4299      	cmp	r1, r3
 80110c0:	d002      	beq.n	80110c8 <__sflush_r+0x94>
 80110c2:	4628      	mov	r0, r5
 80110c4:	f7ff fb3e 	bl	8010744 <_free_r>
 80110c8:	2000      	movs	r0, #0
 80110ca:	6360      	str	r0, [r4, #52]	; 0x34
 80110cc:	e7c0      	b.n	8011050 <__sflush_r+0x1c>
 80110ce:	2301      	movs	r3, #1
 80110d0:	4628      	mov	r0, r5
 80110d2:	47b0      	blx	r6
 80110d4:	1c41      	adds	r1, r0, #1
 80110d6:	d1c8      	bne.n	801106a <__sflush_r+0x36>
 80110d8:	682b      	ldr	r3, [r5, #0]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d0c5      	beq.n	801106a <__sflush_r+0x36>
 80110de:	2b1d      	cmp	r3, #29
 80110e0:	d001      	beq.n	80110e6 <__sflush_r+0xb2>
 80110e2:	2b16      	cmp	r3, #22
 80110e4:	d101      	bne.n	80110ea <__sflush_r+0xb6>
 80110e6:	602f      	str	r7, [r5, #0]
 80110e8:	e7b1      	b.n	801104e <__sflush_r+0x1a>
 80110ea:	89a3      	ldrh	r3, [r4, #12]
 80110ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110f0:	81a3      	strh	r3, [r4, #12]
 80110f2:	e7ad      	b.n	8011050 <__sflush_r+0x1c>
 80110f4:	690f      	ldr	r7, [r1, #16]
 80110f6:	2f00      	cmp	r7, #0
 80110f8:	d0a9      	beq.n	801104e <__sflush_r+0x1a>
 80110fa:	0793      	lsls	r3, r2, #30
 80110fc:	680e      	ldr	r6, [r1, #0]
 80110fe:	bf08      	it	eq
 8011100:	694b      	ldreq	r3, [r1, #20]
 8011102:	600f      	str	r7, [r1, #0]
 8011104:	bf18      	it	ne
 8011106:	2300      	movne	r3, #0
 8011108:	eba6 0807 	sub.w	r8, r6, r7
 801110c:	608b      	str	r3, [r1, #8]
 801110e:	f1b8 0f00 	cmp.w	r8, #0
 8011112:	dd9c      	ble.n	801104e <__sflush_r+0x1a>
 8011114:	6a21      	ldr	r1, [r4, #32]
 8011116:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011118:	4643      	mov	r3, r8
 801111a:	463a      	mov	r2, r7
 801111c:	4628      	mov	r0, r5
 801111e:	47b0      	blx	r6
 8011120:	2800      	cmp	r0, #0
 8011122:	dc06      	bgt.n	8011132 <__sflush_r+0xfe>
 8011124:	89a3      	ldrh	r3, [r4, #12]
 8011126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801112a:	81a3      	strh	r3, [r4, #12]
 801112c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011130:	e78e      	b.n	8011050 <__sflush_r+0x1c>
 8011132:	4407      	add	r7, r0
 8011134:	eba8 0800 	sub.w	r8, r8, r0
 8011138:	e7e9      	b.n	801110e <__sflush_r+0xda>
 801113a:	bf00      	nop
 801113c:	dfbffffe 	.word	0xdfbffffe

08011140 <_fflush_r>:
 8011140:	b538      	push	{r3, r4, r5, lr}
 8011142:	690b      	ldr	r3, [r1, #16]
 8011144:	4605      	mov	r5, r0
 8011146:	460c      	mov	r4, r1
 8011148:	b913      	cbnz	r3, 8011150 <_fflush_r+0x10>
 801114a:	2500      	movs	r5, #0
 801114c:	4628      	mov	r0, r5
 801114e:	bd38      	pop	{r3, r4, r5, pc}
 8011150:	b118      	cbz	r0, 801115a <_fflush_r+0x1a>
 8011152:	6a03      	ldr	r3, [r0, #32]
 8011154:	b90b      	cbnz	r3, 801115a <_fflush_r+0x1a>
 8011156:	f7ff f96f 	bl	8010438 <__sinit>
 801115a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d0f3      	beq.n	801114a <_fflush_r+0xa>
 8011162:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011164:	07d0      	lsls	r0, r2, #31
 8011166:	d404      	bmi.n	8011172 <_fflush_r+0x32>
 8011168:	0599      	lsls	r1, r3, #22
 801116a:	d402      	bmi.n	8011172 <_fflush_r+0x32>
 801116c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801116e:	f7ff fae6 	bl	801073e <__retarget_lock_acquire_recursive>
 8011172:	4628      	mov	r0, r5
 8011174:	4621      	mov	r1, r4
 8011176:	f7ff ff5d 	bl	8011034 <__sflush_r>
 801117a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801117c:	07da      	lsls	r2, r3, #31
 801117e:	4605      	mov	r5, r0
 8011180:	d4e4      	bmi.n	801114c <_fflush_r+0xc>
 8011182:	89a3      	ldrh	r3, [r4, #12]
 8011184:	059b      	lsls	r3, r3, #22
 8011186:	d4e1      	bmi.n	801114c <_fflush_r+0xc>
 8011188:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801118a:	f7ff fad9 	bl	8010740 <__retarget_lock_release_recursive>
 801118e:	e7dd      	b.n	801114c <_fflush_r+0xc>

08011190 <__sread>:
 8011190:	b510      	push	{r4, lr}
 8011192:	460c      	mov	r4, r1
 8011194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011198:	f000 f9c2 	bl	8011520 <_read_r>
 801119c:	2800      	cmp	r0, #0
 801119e:	bfab      	itete	ge
 80111a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80111a2:	89a3      	ldrhlt	r3, [r4, #12]
 80111a4:	181b      	addge	r3, r3, r0
 80111a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80111aa:	bfac      	ite	ge
 80111ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80111ae:	81a3      	strhlt	r3, [r4, #12]
 80111b0:	bd10      	pop	{r4, pc}

080111b2 <__swrite>:
 80111b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111b6:	461f      	mov	r7, r3
 80111b8:	898b      	ldrh	r3, [r1, #12]
 80111ba:	05db      	lsls	r3, r3, #23
 80111bc:	4605      	mov	r5, r0
 80111be:	460c      	mov	r4, r1
 80111c0:	4616      	mov	r6, r2
 80111c2:	d505      	bpl.n	80111d0 <__swrite+0x1e>
 80111c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111c8:	2302      	movs	r3, #2
 80111ca:	2200      	movs	r2, #0
 80111cc:	f000 f996 	bl	80114fc <_lseek_r>
 80111d0:	89a3      	ldrh	r3, [r4, #12]
 80111d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80111d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80111da:	81a3      	strh	r3, [r4, #12]
 80111dc:	4632      	mov	r2, r6
 80111de:	463b      	mov	r3, r7
 80111e0:	4628      	mov	r0, r5
 80111e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80111e6:	f000 b9ad 	b.w	8011544 <_write_r>

080111ea <__sseek>:
 80111ea:	b510      	push	{r4, lr}
 80111ec:	460c      	mov	r4, r1
 80111ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111f2:	f000 f983 	bl	80114fc <_lseek_r>
 80111f6:	1c43      	adds	r3, r0, #1
 80111f8:	89a3      	ldrh	r3, [r4, #12]
 80111fa:	bf15      	itete	ne
 80111fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80111fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011202:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011206:	81a3      	strheq	r3, [r4, #12]
 8011208:	bf18      	it	ne
 801120a:	81a3      	strhne	r3, [r4, #12]
 801120c:	bd10      	pop	{r4, pc}

0801120e <__sclose>:
 801120e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011212:	f000 b941 	b.w	8011498 <_close_r>

08011216 <_realloc_r>:
 8011216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801121a:	4680      	mov	r8, r0
 801121c:	4614      	mov	r4, r2
 801121e:	460e      	mov	r6, r1
 8011220:	b921      	cbnz	r1, 801122c <_realloc_r+0x16>
 8011222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011226:	4611      	mov	r1, r2
 8011228:	f7fe bfba 	b.w	80101a0 <_malloc_r>
 801122c:	b92a      	cbnz	r2, 801123a <_realloc_r+0x24>
 801122e:	f7ff fa89 	bl	8010744 <_free_r>
 8011232:	4625      	mov	r5, r4
 8011234:	4628      	mov	r0, r5
 8011236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801123a:	f000 f9a3 	bl	8011584 <_malloc_usable_size_r>
 801123e:	4284      	cmp	r4, r0
 8011240:	4607      	mov	r7, r0
 8011242:	d802      	bhi.n	801124a <_realloc_r+0x34>
 8011244:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011248:	d812      	bhi.n	8011270 <_realloc_r+0x5a>
 801124a:	4621      	mov	r1, r4
 801124c:	4640      	mov	r0, r8
 801124e:	f7fe ffa7 	bl	80101a0 <_malloc_r>
 8011252:	4605      	mov	r5, r0
 8011254:	2800      	cmp	r0, #0
 8011256:	d0ed      	beq.n	8011234 <_realloc_r+0x1e>
 8011258:	42bc      	cmp	r4, r7
 801125a:	4622      	mov	r2, r4
 801125c:	4631      	mov	r1, r6
 801125e:	bf28      	it	cs
 8011260:	463a      	movcs	r2, r7
 8011262:	f000 f981 	bl	8011568 <memcpy>
 8011266:	4631      	mov	r1, r6
 8011268:	4640      	mov	r0, r8
 801126a:	f7ff fa6b 	bl	8010744 <_free_r>
 801126e:	e7e1      	b.n	8011234 <_realloc_r+0x1e>
 8011270:	4635      	mov	r5, r6
 8011272:	e7df      	b.n	8011234 <_realloc_r+0x1e>

08011274 <__swbuf_r>:
 8011274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011276:	460e      	mov	r6, r1
 8011278:	4614      	mov	r4, r2
 801127a:	4605      	mov	r5, r0
 801127c:	b118      	cbz	r0, 8011286 <__swbuf_r+0x12>
 801127e:	6a03      	ldr	r3, [r0, #32]
 8011280:	b90b      	cbnz	r3, 8011286 <__swbuf_r+0x12>
 8011282:	f7ff f8d9 	bl	8010438 <__sinit>
 8011286:	69a3      	ldr	r3, [r4, #24]
 8011288:	60a3      	str	r3, [r4, #8]
 801128a:	89a3      	ldrh	r3, [r4, #12]
 801128c:	071a      	lsls	r2, r3, #28
 801128e:	d525      	bpl.n	80112dc <__swbuf_r+0x68>
 8011290:	6923      	ldr	r3, [r4, #16]
 8011292:	b31b      	cbz	r3, 80112dc <__swbuf_r+0x68>
 8011294:	6823      	ldr	r3, [r4, #0]
 8011296:	6922      	ldr	r2, [r4, #16]
 8011298:	1a98      	subs	r0, r3, r2
 801129a:	6963      	ldr	r3, [r4, #20]
 801129c:	b2f6      	uxtb	r6, r6
 801129e:	4283      	cmp	r3, r0
 80112a0:	4637      	mov	r7, r6
 80112a2:	dc04      	bgt.n	80112ae <__swbuf_r+0x3a>
 80112a4:	4621      	mov	r1, r4
 80112a6:	4628      	mov	r0, r5
 80112a8:	f7ff ff4a 	bl	8011140 <_fflush_r>
 80112ac:	b9e0      	cbnz	r0, 80112e8 <__swbuf_r+0x74>
 80112ae:	68a3      	ldr	r3, [r4, #8]
 80112b0:	3b01      	subs	r3, #1
 80112b2:	60a3      	str	r3, [r4, #8]
 80112b4:	6823      	ldr	r3, [r4, #0]
 80112b6:	1c5a      	adds	r2, r3, #1
 80112b8:	6022      	str	r2, [r4, #0]
 80112ba:	701e      	strb	r6, [r3, #0]
 80112bc:	6962      	ldr	r2, [r4, #20]
 80112be:	1c43      	adds	r3, r0, #1
 80112c0:	429a      	cmp	r2, r3
 80112c2:	d004      	beq.n	80112ce <__swbuf_r+0x5a>
 80112c4:	89a3      	ldrh	r3, [r4, #12]
 80112c6:	07db      	lsls	r3, r3, #31
 80112c8:	d506      	bpl.n	80112d8 <__swbuf_r+0x64>
 80112ca:	2e0a      	cmp	r6, #10
 80112cc:	d104      	bne.n	80112d8 <__swbuf_r+0x64>
 80112ce:	4621      	mov	r1, r4
 80112d0:	4628      	mov	r0, r5
 80112d2:	f7ff ff35 	bl	8011140 <_fflush_r>
 80112d6:	b938      	cbnz	r0, 80112e8 <__swbuf_r+0x74>
 80112d8:	4638      	mov	r0, r7
 80112da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112dc:	4621      	mov	r1, r4
 80112de:	4628      	mov	r0, r5
 80112e0:	f000 f806 	bl	80112f0 <__swsetup_r>
 80112e4:	2800      	cmp	r0, #0
 80112e6:	d0d5      	beq.n	8011294 <__swbuf_r+0x20>
 80112e8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80112ec:	e7f4      	b.n	80112d8 <__swbuf_r+0x64>
	...

080112f0 <__swsetup_r>:
 80112f0:	b538      	push	{r3, r4, r5, lr}
 80112f2:	4b2a      	ldr	r3, [pc, #168]	; (801139c <__swsetup_r+0xac>)
 80112f4:	4605      	mov	r5, r0
 80112f6:	6818      	ldr	r0, [r3, #0]
 80112f8:	460c      	mov	r4, r1
 80112fa:	b118      	cbz	r0, 8011304 <__swsetup_r+0x14>
 80112fc:	6a03      	ldr	r3, [r0, #32]
 80112fe:	b90b      	cbnz	r3, 8011304 <__swsetup_r+0x14>
 8011300:	f7ff f89a 	bl	8010438 <__sinit>
 8011304:	89a3      	ldrh	r3, [r4, #12]
 8011306:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801130a:	0718      	lsls	r0, r3, #28
 801130c:	d422      	bmi.n	8011354 <__swsetup_r+0x64>
 801130e:	06d9      	lsls	r1, r3, #27
 8011310:	d407      	bmi.n	8011322 <__swsetup_r+0x32>
 8011312:	2309      	movs	r3, #9
 8011314:	602b      	str	r3, [r5, #0]
 8011316:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801131a:	81a3      	strh	r3, [r4, #12]
 801131c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011320:	e034      	b.n	801138c <__swsetup_r+0x9c>
 8011322:	0758      	lsls	r0, r3, #29
 8011324:	d512      	bpl.n	801134c <__swsetup_r+0x5c>
 8011326:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011328:	b141      	cbz	r1, 801133c <__swsetup_r+0x4c>
 801132a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801132e:	4299      	cmp	r1, r3
 8011330:	d002      	beq.n	8011338 <__swsetup_r+0x48>
 8011332:	4628      	mov	r0, r5
 8011334:	f7ff fa06 	bl	8010744 <_free_r>
 8011338:	2300      	movs	r3, #0
 801133a:	6363      	str	r3, [r4, #52]	; 0x34
 801133c:	89a3      	ldrh	r3, [r4, #12]
 801133e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011342:	81a3      	strh	r3, [r4, #12]
 8011344:	2300      	movs	r3, #0
 8011346:	6063      	str	r3, [r4, #4]
 8011348:	6923      	ldr	r3, [r4, #16]
 801134a:	6023      	str	r3, [r4, #0]
 801134c:	89a3      	ldrh	r3, [r4, #12]
 801134e:	f043 0308 	orr.w	r3, r3, #8
 8011352:	81a3      	strh	r3, [r4, #12]
 8011354:	6923      	ldr	r3, [r4, #16]
 8011356:	b94b      	cbnz	r3, 801136c <__swsetup_r+0x7c>
 8011358:	89a3      	ldrh	r3, [r4, #12]
 801135a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801135e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011362:	d003      	beq.n	801136c <__swsetup_r+0x7c>
 8011364:	4621      	mov	r1, r4
 8011366:	4628      	mov	r0, r5
 8011368:	f000 f840 	bl	80113ec <__smakebuf_r>
 801136c:	89a0      	ldrh	r0, [r4, #12]
 801136e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011372:	f010 0301 	ands.w	r3, r0, #1
 8011376:	d00a      	beq.n	801138e <__swsetup_r+0x9e>
 8011378:	2300      	movs	r3, #0
 801137a:	60a3      	str	r3, [r4, #8]
 801137c:	6963      	ldr	r3, [r4, #20]
 801137e:	425b      	negs	r3, r3
 8011380:	61a3      	str	r3, [r4, #24]
 8011382:	6923      	ldr	r3, [r4, #16]
 8011384:	b943      	cbnz	r3, 8011398 <__swsetup_r+0xa8>
 8011386:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801138a:	d1c4      	bne.n	8011316 <__swsetup_r+0x26>
 801138c:	bd38      	pop	{r3, r4, r5, pc}
 801138e:	0781      	lsls	r1, r0, #30
 8011390:	bf58      	it	pl
 8011392:	6963      	ldrpl	r3, [r4, #20]
 8011394:	60a3      	str	r3, [r4, #8]
 8011396:	e7f4      	b.n	8011382 <__swsetup_r+0x92>
 8011398:	2000      	movs	r0, #0
 801139a:	e7f7      	b.n	801138c <__swsetup_r+0x9c>
 801139c:	20000164 	.word	0x20000164

080113a0 <__swhatbuf_r>:
 80113a0:	b570      	push	{r4, r5, r6, lr}
 80113a2:	460c      	mov	r4, r1
 80113a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113a8:	2900      	cmp	r1, #0
 80113aa:	b096      	sub	sp, #88	; 0x58
 80113ac:	4615      	mov	r5, r2
 80113ae:	461e      	mov	r6, r3
 80113b0:	da0d      	bge.n	80113ce <__swhatbuf_r+0x2e>
 80113b2:	89a3      	ldrh	r3, [r4, #12]
 80113b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80113b8:	f04f 0100 	mov.w	r1, #0
 80113bc:	bf0c      	ite	eq
 80113be:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80113c2:	2340      	movne	r3, #64	; 0x40
 80113c4:	2000      	movs	r0, #0
 80113c6:	6031      	str	r1, [r6, #0]
 80113c8:	602b      	str	r3, [r5, #0]
 80113ca:	b016      	add	sp, #88	; 0x58
 80113cc:	bd70      	pop	{r4, r5, r6, pc}
 80113ce:	466a      	mov	r2, sp
 80113d0:	f000 f872 	bl	80114b8 <_fstat_r>
 80113d4:	2800      	cmp	r0, #0
 80113d6:	dbec      	blt.n	80113b2 <__swhatbuf_r+0x12>
 80113d8:	9901      	ldr	r1, [sp, #4]
 80113da:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80113de:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80113e2:	4259      	negs	r1, r3
 80113e4:	4159      	adcs	r1, r3
 80113e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80113ea:	e7eb      	b.n	80113c4 <__swhatbuf_r+0x24>

080113ec <__smakebuf_r>:
 80113ec:	898b      	ldrh	r3, [r1, #12]
 80113ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80113f0:	079d      	lsls	r5, r3, #30
 80113f2:	4606      	mov	r6, r0
 80113f4:	460c      	mov	r4, r1
 80113f6:	d507      	bpl.n	8011408 <__smakebuf_r+0x1c>
 80113f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80113fc:	6023      	str	r3, [r4, #0]
 80113fe:	6123      	str	r3, [r4, #16]
 8011400:	2301      	movs	r3, #1
 8011402:	6163      	str	r3, [r4, #20]
 8011404:	b002      	add	sp, #8
 8011406:	bd70      	pop	{r4, r5, r6, pc}
 8011408:	ab01      	add	r3, sp, #4
 801140a:	466a      	mov	r2, sp
 801140c:	f7ff ffc8 	bl	80113a0 <__swhatbuf_r>
 8011410:	9900      	ldr	r1, [sp, #0]
 8011412:	4605      	mov	r5, r0
 8011414:	4630      	mov	r0, r6
 8011416:	f7fe fec3 	bl	80101a0 <_malloc_r>
 801141a:	b948      	cbnz	r0, 8011430 <__smakebuf_r+0x44>
 801141c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011420:	059a      	lsls	r2, r3, #22
 8011422:	d4ef      	bmi.n	8011404 <__smakebuf_r+0x18>
 8011424:	f023 0303 	bic.w	r3, r3, #3
 8011428:	f043 0302 	orr.w	r3, r3, #2
 801142c:	81a3      	strh	r3, [r4, #12]
 801142e:	e7e3      	b.n	80113f8 <__smakebuf_r+0xc>
 8011430:	89a3      	ldrh	r3, [r4, #12]
 8011432:	6020      	str	r0, [r4, #0]
 8011434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011438:	81a3      	strh	r3, [r4, #12]
 801143a:	9b00      	ldr	r3, [sp, #0]
 801143c:	6163      	str	r3, [r4, #20]
 801143e:	9b01      	ldr	r3, [sp, #4]
 8011440:	6120      	str	r0, [r4, #16]
 8011442:	b15b      	cbz	r3, 801145c <__smakebuf_r+0x70>
 8011444:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011448:	4630      	mov	r0, r6
 801144a:	f000 f847 	bl	80114dc <_isatty_r>
 801144e:	b128      	cbz	r0, 801145c <__smakebuf_r+0x70>
 8011450:	89a3      	ldrh	r3, [r4, #12]
 8011452:	f023 0303 	bic.w	r3, r3, #3
 8011456:	f043 0301 	orr.w	r3, r3, #1
 801145a:	81a3      	strh	r3, [r4, #12]
 801145c:	89a3      	ldrh	r3, [r4, #12]
 801145e:	431d      	orrs	r5, r3
 8011460:	81a5      	strh	r5, [r4, #12]
 8011462:	e7cf      	b.n	8011404 <__smakebuf_r+0x18>

08011464 <memmove>:
 8011464:	4288      	cmp	r0, r1
 8011466:	b510      	push	{r4, lr}
 8011468:	eb01 0402 	add.w	r4, r1, r2
 801146c:	d902      	bls.n	8011474 <memmove+0x10>
 801146e:	4284      	cmp	r4, r0
 8011470:	4623      	mov	r3, r4
 8011472:	d807      	bhi.n	8011484 <memmove+0x20>
 8011474:	1e43      	subs	r3, r0, #1
 8011476:	42a1      	cmp	r1, r4
 8011478:	d008      	beq.n	801148c <memmove+0x28>
 801147a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801147e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011482:	e7f8      	b.n	8011476 <memmove+0x12>
 8011484:	4402      	add	r2, r0
 8011486:	4601      	mov	r1, r0
 8011488:	428a      	cmp	r2, r1
 801148a:	d100      	bne.n	801148e <memmove+0x2a>
 801148c:	bd10      	pop	{r4, pc}
 801148e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011492:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011496:	e7f7      	b.n	8011488 <memmove+0x24>

08011498 <_close_r>:
 8011498:	b538      	push	{r3, r4, r5, lr}
 801149a:	4d06      	ldr	r5, [pc, #24]	; (80114b4 <_close_r+0x1c>)
 801149c:	2300      	movs	r3, #0
 801149e:	4604      	mov	r4, r0
 80114a0:	4608      	mov	r0, r1
 80114a2:	602b      	str	r3, [r5, #0]
 80114a4:	f7f0 f981 	bl	80017aa <_close>
 80114a8:	1c43      	adds	r3, r0, #1
 80114aa:	d102      	bne.n	80114b2 <_close_r+0x1a>
 80114ac:	682b      	ldr	r3, [r5, #0]
 80114ae:	b103      	cbz	r3, 80114b2 <_close_r+0x1a>
 80114b0:	6023      	str	r3, [r4, #0]
 80114b2:	bd38      	pop	{r3, r4, r5, pc}
 80114b4:	20004fd0 	.word	0x20004fd0

080114b8 <_fstat_r>:
 80114b8:	b538      	push	{r3, r4, r5, lr}
 80114ba:	4d07      	ldr	r5, [pc, #28]	; (80114d8 <_fstat_r+0x20>)
 80114bc:	2300      	movs	r3, #0
 80114be:	4604      	mov	r4, r0
 80114c0:	4608      	mov	r0, r1
 80114c2:	4611      	mov	r1, r2
 80114c4:	602b      	str	r3, [r5, #0]
 80114c6:	f7f0 f97c 	bl	80017c2 <_fstat>
 80114ca:	1c43      	adds	r3, r0, #1
 80114cc:	d102      	bne.n	80114d4 <_fstat_r+0x1c>
 80114ce:	682b      	ldr	r3, [r5, #0]
 80114d0:	b103      	cbz	r3, 80114d4 <_fstat_r+0x1c>
 80114d2:	6023      	str	r3, [r4, #0]
 80114d4:	bd38      	pop	{r3, r4, r5, pc}
 80114d6:	bf00      	nop
 80114d8:	20004fd0 	.word	0x20004fd0

080114dc <_isatty_r>:
 80114dc:	b538      	push	{r3, r4, r5, lr}
 80114de:	4d06      	ldr	r5, [pc, #24]	; (80114f8 <_isatty_r+0x1c>)
 80114e0:	2300      	movs	r3, #0
 80114e2:	4604      	mov	r4, r0
 80114e4:	4608      	mov	r0, r1
 80114e6:	602b      	str	r3, [r5, #0]
 80114e8:	f7f0 f97b 	bl	80017e2 <_isatty>
 80114ec:	1c43      	adds	r3, r0, #1
 80114ee:	d102      	bne.n	80114f6 <_isatty_r+0x1a>
 80114f0:	682b      	ldr	r3, [r5, #0]
 80114f2:	b103      	cbz	r3, 80114f6 <_isatty_r+0x1a>
 80114f4:	6023      	str	r3, [r4, #0]
 80114f6:	bd38      	pop	{r3, r4, r5, pc}
 80114f8:	20004fd0 	.word	0x20004fd0

080114fc <_lseek_r>:
 80114fc:	b538      	push	{r3, r4, r5, lr}
 80114fe:	4d07      	ldr	r5, [pc, #28]	; (801151c <_lseek_r+0x20>)
 8011500:	4604      	mov	r4, r0
 8011502:	4608      	mov	r0, r1
 8011504:	4611      	mov	r1, r2
 8011506:	2200      	movs	r2, #0
 8011508:	602a      	str	r2, [r5, #0]
 801150a:	461a      	mov	r2, r3
 801150c:	f7f0 f974 	bl	80017f8 <_lseek>
 8011510:	1c43      	adds	r3, r0, #1
 8011512:	d102      	bne.n	801151a <_lseek_r+0x1e>
 8011514:	682b      	ldr	r3, [r5, #0]
 8011516:	b103      	cbz	r3, 801151a <_lseek_r+0x1e>
 8011518:	6023      	str	r3, [r4, #0]
 801151a:	bd38      	pop	{r3, r4, r5, pc}
 801151c:	20004fd0 	.word	0x20004fd0

08011520 <_read_r>:
 8011520:	b538      	push	{r3, r4, r5, lr}
 8011522:	4d07      	ldr	r5, [pc, #28]	; (8011540 <_read_r+0x20>)
 8011524:	4604      	mov	r4, r0
 8011526:	4608      	mov	r0, r1
 8011528:	4611      	mov	r1, r2
 801152a:	2200      	movs	r2, #0
 801152c:	602a      	str	r2, [r5, #0]
 801152e:	461a      	mov	r2, r3
 8011530:	f7f0 f902 	bl	8001738 <_read>
 8011534:	1c43      	adds	r3, r0, #1
 8011536:	d102      	bne.n	801153e <_read_r+0x1e>
 8011538:	682b      	ldr	r3, [r5, #0]
 801153a:	b103      	cbz	r3, 801153e <_read_r+0x1e>
 801153c:	6023      	str	r3, [r4, #0]
 801153e:	bd38      	pop	{r3, r4, r5, pc}
 8011540:	20004fd0 	.word	0x20004fd0

08011544 <_write_r>:
 8011544:	b538      	push	{r3, r4, r5, lr}
 8011546:	4d07      	ldr	r5, [pc, #28]	; (8011564 <_write_r+0x20>)
 8011548:	4604      	mov	r4, r0
 801154a:	4608      	mov	r0, r1
 801154c:	4611      	mov	r1, r2
 801154e:	2200      	movs	r2, #0
 8011550:	602a      	str	r2, [r5, #0]
 8011552:	461a      	mov	r2, r3
 8011554:	f7f0 f90d 	bl	8001772 <_write>
 8011558:	1c43      	adds	r3, r0, #1
 801155a:	d102      	bne.n	8011562 <_write_r+0x1e>
 801155c:	682b      	ldr	r3, [r5, #0]
 801155e:	b103      	cbz	r3, 8011562 <_write_r+0x1e>
 8011560:	6023      	str	r3, [r4, #0]
 8011562:	bd38      	pop	{r3, r4, r5, pc}
 8011564:	20004fd0 	.word	0x20004fd0

08011568 <memcpy>:
 8011568:	440a      	add	r2, r1
 801156a:	4291      	cmp	r1, r2
 801156c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011570:	d100      	bne.n	8011574 <memcpy+0xc>
 8011572:	4770      	bx	lr
 8011574:	b510      	push	{r4, lr}
 8011576:	f811 4b01 	ldrb.w	r4, [r1], #1
 801157a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801157e:	4291      	cmp	r1, r2
 8011580:	d1f9      	bne.n	8011576 <memcpy+0xe>
 8011582:	bd10      	pop	{r4, pc}

08011584 <_malloc_usable_size_r>:
 8011584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011588:	1f18      	subs	r0, r3, #4
 801158a:	2b00      	cmp	r3, #0
 801158c:	bfbc      	itt	lt
 801158e:	580b      	ldrlt	r3, [r1, r0]
 8011590:	18c0      	addlt	r0, r0, r3
 8011592:	4770      	bx	lr

08011594 <_init>:
 8011594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011596:	bf00      	nop
 8011598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801159a:	bc08      	pop	{r3}
 801159c:	469e      	mov	lr, r3
 801159e:	4770      	bx	lr

080115a0 <_fini>:
 80115a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115a2:	bf00      	nop
 80115a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115a6:	bc08      	pop	{r3}
 80115a8:	469e      	mov	lr, r3
 80115aa:	4770      	bx	lr
