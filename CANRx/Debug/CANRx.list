
CANRx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c98  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000098c  08010e98  08010e98  00020e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011824  08011824  00030168  2**0
                  CONTENTS
  4 .ARM          00000008  08011824  08011824  00021824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801182c  0801182c  00030168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801182c  0801182c  0002182c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011830  08011830  00021830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  08011834  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e4c  20000168  0801199c  00030168  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004fb4  0801199c  00034fb4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030168  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030196  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f27b  00000000  00000000  000301d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b5b  00000000  00000000  0004f454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001830  00000000  00000000  00053fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001256  00000000  00000000  000557e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e076  00000000  00000000  00056a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000219bd  00000000  00000000  00084aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001009fc  00000000  00000000  000a6469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006d70  00000000  00000000  001a6e68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001adbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000168 	.word	0x20000168
 800021c:	00000000 	.word	0x00000000
 8000220:	08010e80 	.word	0x08010e80

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000016c 	.word	0x2000016c
 800023c:	08010e80 	.word	0x08010e80

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b590      	push	{r4, r7, lr}
 80005de:	b0c9      	sub	sp, #292	; 0x124
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f001 f8ba 	bl	800175a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 fa7f 	bl	8000ae8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 fb97 	bl	8000d1c <MX_GPIO_Init>
  MX_DMA_Init();
 80005ee:	f000 fb6f 	bl	8000cd0 <MX_DMA_Init>
  MX_CAN1_Init();
 80005f2:	f000 fae1 	bl	8000bb8 <MX_CAN1_Init>
  MX_SDMMC1_SD_Init();
 80005f6:	f000 fb15 	bl	8000c24 <MX_SDMMC1_SD_Init>
  MX_USART3_UART_Init();
 80005fa:	f000 fb39 	bl	8000c70 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80005fe:	f009 f931 	bl	8009864 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000602:	f00e fc8d 	bl	800ef20 <MX_USB_DEVICE_Init>
		RESET_BUFFER,
		RESET_STATE,
		POWER_OFF
	} state_t;
	//Starting state is PERIPHERAL_INIT
	state_t state = TURN_ON;
 8000606:	2300      	movs	r3, #0
 8000608:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	uint32_t byteswritten; /* File write/read counts */
	uint32_t buffer_emptyings = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	uint32_t total_size = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		switch (state) {
 8000618:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800061c:	2b0c      	cmp	r3, #12
 800061e:	f200 8233 	bhi.w	8000a88 <main+0x4ac>
 8000622:	a201      	add	r2, pc, #4	; (adr r2, 8000628 <main+0x4c>)
 8000624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000628:	0800065d 	.word	0x0800065d
 800062c:	0800068f 	.word	0x0800068f
 8000630:	0800071d 	.word	0x0800071d
 8000634:	08000861 	.word	0x08000861
 8000638:	08000a9d 	.word	0x08000a9d
 800063c:	08000a9d 	.word	0x08000a9d
 8000640:	08000883 	.word	0x08000883
 8000644:	08000a9d 	.word	0x08000a9d
 8000648:	080008cd 	.word	0x080008cd
 800064c:	08000a9d 	.word	0x08000a9d
 8000650:	08000981 	.word	0x08000981
 8000654:	08000a0f 	.word	0x08000a0f
 8000658:	08000a63 	.word	0x08000a63
		case TURN_ON:
			MX_DMA_Init();
 800065c:	f000 fb38 	bl	8000cd0 <MX_DMA_Init>
			MX_SDMMC1_SD_Init();
 8000660:	f000 fae0 	bl	8000c24 <MX_SDMMC1_SD_Init>
			MX_FATFS_Init();
 8000664:	f009 f8fe 	bl	8009864 <MX_FATFS_Init>
			POWER_STATE = HAL_GPIO_ReadPin(PowerSwitch_GPIO_Port, PowerSwitch_Pin);
 8000668:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800066c:	48a3      	ldr	r0, [pc, #652]	; (80008fc <main+0x320>)
 800066e:	f002 fd5d 	bl	800312c <HAL_GPIO_ReadPin>
 8000672:	4603      	mov	r3, r0
 8000674:	461a      	mov	r2, r3
 8000676:	4ba2      	ldr	r3, [pc, #648]	; (8000900 <main+0x324>)
 8000678:	701a      	strb	r2, [r3, #0]
			state = POWER_STATE ? PERIPHERAL_INIT : POWER_OFF;
 800067a:	4ba1      	ldr	r3, [pc, #644]	; (8000900 <main+0x324>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <main+0xaa>
 8000682:	2301      	movs	r3, #1
 8000684:	e000      	b.n	8000688 <main+0xac>
 8000686:	230c      	movs	r3, #12
 8000688:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			break;
 800068c:	e20b      	b.n	8000aa6 <main+0x4ca>

		case PERIPHERAL_INIT:
			data_buffer[0][0] = '\00';
 800068e:	4b9d      	ldr	r3, [pc, #628]	; (8000904 <main+0x328>)
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
			data_buffer[1][0] = '\00';
 8000694:	4b9b      	ldr	r3, [pc, #620]	; (8000904 <main+0x328>)
 8000696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800069a:	2200      	movs	r2, #0
 800069c:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
			buffer_fill_level[0] = 0;
 80006a0:	4b99      	ldr	r3, [pc, #612]	; (8000908 <main+0x32c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
			buffer_fill_level[1] = 0;
 80006a6:	4b98      	ldr	r3, [pc, #608]	; (8000908 <main+0x32c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	705a      	strb	r2, [r3, #1]
			current_buffer = 0;
 80006ac:	4b97      	ldr	r3, [pc, #604]	; (800090c <main+0x330>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]

			printf("Initializing Peripherals...\r\n");
 80006b2:	4897      	ldr	r0, [pc, #604]	; (8000910 <main+0x334>)
 80006b4:	f00f fc5e 	bl	800ff74 <puts>
			HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_RESET); //Red LED
 80006b8:	2200      	movs	r2, #0
 80006ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006be:	4895      	ldr	r0, [pc, #596]	; (8000914 <main+0x338>)
 80006c0:	f002 fd4c 	bl	800315c <HAL_GPIO_WritePin>

			//Initializing CAN
			if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80006c4:	4894      	ldr	r0, [pc, #592]	; (8000918 <main+0x33c>)
 80006c6:	f001 fab1 	bl	8001c2c <HAL_CAN_Start>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d004      	beq.n	80006da <main+0xfe>
				printf("CAN could not start.\r\n");
 80006d0:	4892      	ldr	r0, [pc, #584]	; (800091c <main+0x340>)
 80006d2:	f00f fc4f 	bl	800ff74 <puts>
				Error_Handler();
 80006d6:	f000 fd01 	bl	80010dc <Error_Handler>
			}
			if (CAN_Filter_Config() != HAL_OK) {
 80006da:	f000 fc85 	bl	8000fe8 <CAN_Filter_Config>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d004      	beq.n	80006ee <main+0x112>
				printf("CAN filter failed to set.\r\n");
 80006e4:	488e      	ldr	r0, [pc, #568]	; (8000920 <main+0x344>)
 80006e6:	f00f fc45 	bl	800ff74 <puts>
				Error_Handler();
 80006ea:	f000 fcf7 	bl	80010dc <Error_Handler>
			}
			printf("CAN initialization succeeded...\r\n");
 80006ee:	488d      	ldr	r0, [pc, #564]	; (8000924 <main+0x348>)
 80006f0:	f00f fc40 	bl	800ff74 <puts>

			//Mount and Format SD Card
			if (f_mount(&SDFatFS, SDPath, 0) != FR_OK) {
 80006f4:	2200      	movs	r2, #0
 80006f6:	498c      	ldr	r1, [pc, #560]	; (8000928 <main+0x34c>)
 80006f8:	488c      	ldr	r0, [pc, #560]	; (800092c <main+0x350>)
 80006fa:	f00d fdf7 	bl	800e2ec <f_mount>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d004      	beq.n	800070e <main+0x132>
				printf("Mounting failed!\r\n");
 8000704:	488a      	ldr	r0, [pc, #552]	; (8000930 <main+0x354>)
 8000706:	f00f fc35 	bl	800ff74 <puts>
				Error_Handler();
 800070a:	f000 fce7 	bl	80010dc <Error_Handler>
			}

			printf("SD initialization succeeded...\r\n");
 800070e:	4889      	ldr	r0, [pc, #548]	; (8000934 <main+0x358>)
 8000710:	f00f fc30 	bl	800ff74 <puts>

			state = CREATE_LOG_FILE;
 8000714:	2302      	movs	r3, #2
 8000716:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			break;
 800071a:	e1c4      	b.n	8000aa6 <main+0x4ca>

		case CREATE_LOG_FILE:
			printf("Creating new log file...\r\n");
 800071c:	4886      	ldr	r0, [pc, #536]	; (8000938 <main+0x35c>)
 800071e:	f00f fc29 	bl	800ff74 <puts>

			//Opening CAN_DATA directory
			if (f_opendir(&dir, "/CAN_DATA") != FR_OK) {
 8000722:	4986      	ldr	r1, [pc, #536]	; (800093c <main+0x360>)
 8000724:	4886      	ldr	r0, [pc, #536]	; (8000940 <main+0x364>)
 8000726:	f00e fa02 	bl	800eb2e <f_opendir>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d004      	beq.n	800073a <main+0x15e>
				printf("Failed to open /CAN_DATA directory!\r\n");
 8000730:	4884      	ldr	r0, [pc, #528]	; (8000944 <main+0x368>)
 8000732:	f00f fc1f 	bl	800ff74 <puts>
				Error_Handler();
 8000736:	f000 fcd1 	bl	80010dc <Error_Handler>
			}

			// Finding next filename
			char last_file_number[5];
			uint16_t max_file_number = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
			do {
				if (f_readdir(&dir, &fno) != FR_OK){
 8000740:	4981      	ldr	r1, [pc, #516]	; (8000948 <main+0x36c>)
 8000742:	487f      	ldr	r0, [pc, #508]	; (8000940 <main+0x364>)
 8000744:	f00e fa8c 	bl	800ec60 <f_readdir>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d004      	beq.n	8000758 <main+0x17c>
					printf("Failed to read /CAN_DATA directory!\r\n");
 800074e:	487f      	ldr	r0, [pc, #508]	; (800094c <main+0x370>)
 8000750:	f00f fc10 	bl	800ff74 <puts>
					Error_Handler();
 8000754:	f000 fcc2 	bl	80010dc <Error_Handler>
				}
				if (fno.fname[0] != 0){
 8000758:	4b7b      	ldr	r3, [pc, #492]	; (8000948 <main+0x36c>)
 800075a:	7d9b      	ldrb	r3, [r3, #22]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d034      	beq.n	80007ca <main+0x1ee>
					for(int i=4; i<9; i++)
 8000760:	2304      	movs	r3, #4
 8000762:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000766:	e012      	b.n	800078e <main+0x1b2>
						last_file_number[i-4] = fno.fname[i];
 8000768:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800076c:	3b04      	subs	r3, #4
 800076e:	4976      	ldr	r1, [pc, #472]	; (8000948 <main+0x36c>)
 8000770:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000774:	440a      	add	r2, r1
 8000776:	3216      	adds	r2, #22
 8000778:	7812      	ldrb	r2, [r2, #0]
 800077a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800077e:	443b      	add	r3, r7
 8000780:	f803 2c20 	strb.w	r2, [r3, #-32]
					for(int i=4; i<9; i++)
 8000784:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000788:	3301      	adds	r3, #1
 800078a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800078e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000792:	2b08      	cmp	r3, #8
 8000794:	dde8      	ble.n	8000768 <main+0x18c>

					if (max_file_number < strtol(last_file_number, NULL, 10))
 8000796:	f8b7 4112 	ldrh.w	r4, [r7, #274]	; 0x112
 800079a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800079e:	220a      	movs	r2, #10
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f00f fb58 	bl	800fe58 <strtol>
 80007a8:	4603      	mov	r3, r0
 80007aa:	429c      	cmp	r4, r3
 80007ac:	da09      	bge.n	80007c2 <main+0x1e6>
						max_file_number = strtol(last_file_number, NULL, 10);
 80007ae:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80007b2:	220a      	movs	r2, #10
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f00f fb4e 	bl	800fe58 <strtol>
 80007bc:	4603      	mov	r3, r0
 80007be:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112

					printf("File found: %s\n\r", fno.fname); // Print File Name
 80007c2:	4963      	ldr	r1, [pc, #396]	; (8000950 <main+0x374>)
 80007c4:	4863      	ldr	r0, [pc, #396]	; (8000954 <main+0x378>)
 80007c6:	f00f fb6f 	bl	800fea8 <iprintf>
				}
			} while (fno.fname[0] != 0);
 80007ca:	4b5f      	ldr	r3, [pc, #380]	; (8000948 <main+0x36c>)
 80007cc:	7d9b      	ldrb	r3, [r3, #22]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d1b6      	bne.n	8000740 <main+0x164>

			//Closing CAN_DATA directory
			if (f_closedir(&dir) != FR_OK) {
 80007d2:	485b      	ldr	r0, [pc, #364]	; (8000940 <main+0x364>)
 80007d4:	f00e fa1e 	bl	800ec14 <f_closedir>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d004      	beq.n	80007e8 <main+0x20c>
				printf("Failed to close /CAN_DATA directory!\r\n");
 80007de:	485e      	ldr	r0, [pc, #376]	; (8000958 <main+0x37c>)
 80007e0:	f00f fbc8 	bl	800ff74 <puts>
				Error_Handler();
 80007e4:	f000 fc7a 	bl	80010dc <Error_Handler>
			}

			//Creating new filename
			TCHAR filename[FILENAME_MAX_BYTES];
			snprintf(filename, FILENAME_MAX_BYTES, "/CAN_DATA/CAN_%05d.log", max_file_number + 1);
 80007e8:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 80007ec:	3301      	adds	r3, #1
 80007ee:	4638      	mov	r0, r7
 80007f0:	4a5a      	ldr	r2, [pc, #360]	; (800095c <main+0x380>)
 80007f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007f6:	f00f f9c9 	bl	800fb8c <sniprintf>
			printf("New log name: %s \n\r", filename);
 80007fa:	463b      	mov	r3, r7
 80007fc:	4619      	mov	r1, r3
 80007fe:	4858      	ldr	r0, [pc, #352]	; (8000960 <main+0x384>)
 8000800:	f00f fb52 	bl	800fea8 <iprintf>

			//Open file for writing (Create)
			if (f_open(&SDFile, filename, FA_CREATE_ALWAYS | FA_WRITE)
 8000804:	463b      	mov	r3, r7
 8000806:	220a      	movs	r2, #10
 8000808:	4619      	mov	r1, r3
 800080a:	4856      	ldr	r0, [pc, #344]	; (8000964 <main+0x388>)
 800080c:	f00d fdb4 	bl	800e378 <f_open>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d006      	beq.n	8000824 <main+0x248>
					!= FR_OK) {
				printf("Failed to create new log file: %s ...!\r\n", filename);
 8000816:	463b      	mov	r3, r7
 8000818:	4619      	mov	r1, r3
 800081a:	4853      	ldr	r0, [pc, #332]	; (8000968 <main+0x38c>)
 800081c:	f00f fb44 	bl	800fea8 <iprintf>
				Error_Handler();
 8000820:	f000 fc5c 	bl	80010dc <Error_Handler>
			}
			printf("Successfully created new log file: %s ...\r\n", filename);
 8000824:	463b      	mov	r3, r7
 8000826:	4619      	mov	r1, r3
 8000828:	4850      	ldr	r0, [pc, #320]	; (800096c <main+0x390>)
 800082a:	f00f fb3d 	bl	800fea8 <iprintf>

			//Starting CANRx interrupts
			if (HAL_CAN_ActivateNotification(&hcan1,
 800082e:	2102      	movs	r1, #2
 8000830:	4839      	ldr	r0, [pc, #228]	; (8000918 <main+0x33c>)
 8000832:	f001 fb9a 	bl	8001f6a <HAL_CAN_ActivateNotification>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d004      	beq.n	8000846 <main+0x26a>
					CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
				/* Notification Error */
				printf("Failed to activate CAN\n\r");
 800083c:	484c      	ldr	r0, [pc, #304]	; (8000970 <main+0x394>)
 800083e:	f00f fb33 	bl	800fea8 <iprintf>
				Error_Handler();
 8000842:	f000 fc4b 	bl	80010dc <Error_Handler>
			}

			printf("Ready to receive messages!\n\r");
 8000846:	484b      	ldr	r0, [pc, #300]	; (8000974 <main+0x398>)
 8000848:	f00f fb2e 	bl	800fea8 <iprintf>
			HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_SET); // Successful LED
 800084c:	2201      	movs	r2, #1
 800084e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000852:	4830      	ldr	r0, [pc, #192]	; (8000914 <main+0x338>)
 8000854:	f002 fc82 	bl	800315c <HAL_GPIO_WritePin>

			state = STANDBY;
 8000858:	2303      	movs	r3, #3
 800085a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			break;
 800085e:	e122      	b.n	8000aa6 <main+0x4ca>

		case STANDBY:
			if (!POWER_STATE) //Power switch is off
 8000860:	4b27      	ldr	r3, [pc, #156]	; (8000900 <main+0x324>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d103      	bne.n	8000870 <main+0x294>
				state = RESET_STATE;
 8000868:	230b      	movs	r3, #11
 800086a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			else if (is_buffer_filled) //Buffer is filled
				state = SD_CARD_WRITE;
			break;
 800086e:	e117      	b.n	8000aa0 <main+0x4c4>
			else if (is_buffer_filled) //Buffer is filled
 8000870:	4b41      	ldr	r3, [pc, #260]	; (8000978 <main+0x39c>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	f000 8113 	beq.w	8000aa0 <main+0x4c4>
				state = SD_CARD_WRITE;
 800087a:	2306      	movs	r3, #6
 800087c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			break;
 8000880:	e10e      	b.n	8000aa0 <main+0x4c4>

		case SWITCH_BUFFER:
			break;

		case SD_CARD_WRITE:
			if (f_write(&SDFile, data_buffer[!current_buffer], BUFFER_TOTAL_SIZE, (void*) &byteswritten) != FR_OK || byteswritten == 0) {
 8000882:	4b22      	ldr	r3, [pc, #136]	; (800090c <main+0x330>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	bf0c      	ite	eq
 800088a:	2301      	moveq	r3, #1
 800088c:	2300      	movne	r3, #0
 800088e:	b2db      	uxtb	r3, r3
 8000890:	461a      	mov	r2, r3
 8000892:	f241 4381 	movw	r3, #5249	; 0x1481
 8000896:	fb02 f303 	mul.w	r3, r2, r3
 800089a:	4a1a      	ldr	r2, [pc, #104]	; (8000904 <main+0x328>)
 800089c:	1899      	adds	r1, r3, r2
 800089e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80008a2:	f44f 52a4 	mov.w	r2, #5248	; 0x1480
 80008a6:	482f      	ldr	r0, [pc, #188]	; (8000964 <main+0x388>)
 80008a8:	f00d ff24 	bl	800e6f4 <f_write>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d103      	bne.n	80008ba <main+0x2de>
 80008b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d104      	bne.n	80008c4 <main+0x2e8>
				printf("Writing Failed!\r\n");
 80008ba:	4830      	ldr	r0, [pc, #192]	; (800097c <main+0x3a0>)
 80008bc:	f00f fb5a 	bl	800ff74 <puts>
				Error_Handler();
 80008c0:	f000 fc0c 	bl	80010dc <Error_Handler>
			}

			state = USB_TRANSMIT;
 80008c4:	2308      	movs	r3, #8
 80008c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			break;
 80008ca:	e0ec      	b.n	8000aa6 <main+0x4ca>

		case SD_CARD_WRITE_ERROR:
			break;

		case USB_TRANSMIT:
			CDC_Transmit_FS(data_buffer[!current_buffer], BUFFER_TOTAL_SIZE);
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <main+0x330>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	bf0c      	ite	eq
 80008d4:	2301      	moveq	r3, #1
 80008d6:	2300      	movne	r3, #0
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	461a      	mov	r2, r3
 80008dc:	f241 4381 	movw	r3, #5249	; 0x1481
 80008e0:	fb02 f303 	mul.w	r3, r2, r3
 80008e4:	4a07      	ldr	r2, [pc, #28]	; (8000904 <main+0x328>)
 80008e6:	4413      	add	r3, r2
 80008e8:	f44f 51a4 	mov.w	r1, #5248	; 0x1480
 80008ec:	4618      	mov	r0, r3
 80008ee:	f00e fbd5 	bl	800f09c <CDC_Transmit_FS>
			state = RESET_BUFFER;
 80008f2:	230a      	movs	r3, #10
 80008f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			break;
 80008f8:	e0d5      	b.n	8000aa6 <main+0x4ca>
 80008fa:	bf00      	nop
 80008fc:	40021000 	.word	0x40021000
 8000900:	200004c4 	.word	0x200004c4
 8000904:	200004c8 	.word	0x200004c8
 8000908:	20002dcc 	.word	0x20002dcc
 800090c:	20002dce 	.word	0x20002dce
 8000910:	08010e98 	.word	0x08010e98
 8000914:	40021400 	.word	0x40021400
 8000918:	20000184 	.word	0x20000184
 800091c:	08010eb8 	.word	0x08010eb8
 8000920:	08010ed0 	.word	0x08010ed0
 8000924:	08010eec 	.word	0x08010eec
 8000928:	20002ddc 	.word	0x20002ddc
 800092c:	20002de0 	.word	0x20002de0
 8000930:	08010f10 	.word	0x08010f10
 8000934:	08010f24 	.word	0x08010f24
 8000938:	08010f44 	.word	0x08010f44
 800093c:	08010f60 	.word	0x08010f60
 8000940:	20000378 	.word	0x20000378
 8000944:	08010f6c 	.word	0x08010f6c
 8000948:	200003ac 	.word	0x200003ac
 800094c:	08010f94 	.word	0x08010f94
 8000950:	200003c2 	.word	0x200003c2
 8000954:	08010fbc 	.word	0x08010fbc
 8000958:	08010fd0 	.word	0x08010fd0
 800095c:	08010ff8 	.word	0x08010ff8
 8000960:	08011010 	.word	0x08011010
 8000964:	20003014 	.word	0x20003014
 8000968:	08011024 	.word	0x08011024
 800096c:	08011050 	.word	0x08011050
 8000970:	0801107c 	.word	0x0801107c
 8000974:	08011098 	.word	0x08011098
 8000978:	20002dcf 	.word	0x20002dcf
 800097c:	080110b8 	.word	0x080110b8

		case USB_TRANSMIT_ERROR:
			break;

		case RESET_BUFFER:
			buffer_emptyings++;
 8000980:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000984:	3301      	adds	r3, #1
 8000986:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
			total_size += byteswritten;
 800098a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800098e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000992:	4413      	add	r3, r2
 8000994:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
			printf("emptied buffer %d\n\r", !current_buffer);
 8000998:	4b43      	ldr	r3, [pc, #268]	; (8000aa8 <main+0x4cc>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	bf0c      	ite	eq
 80009a0:	2301      	moveq	r3, #1
 80009a2:	2300      	movne	r3, #0
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	4619      	mov	r1, r3
 80009a8:	4840      	ldr	r0, [pc, #256]	; (8000aac <main+0x4d0>)
 80009aa:	f00f fa7d 	bl	800fea8 <iprintf>
			printf("buffers emptied: %ld\n\r", buffer_emptyings);
 80009ae:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80009b2:	483f      	ldr	r0, [pc, #252]	; (8000ab0 <main+0x4d4>)
 80009b4:	f00f fa78 	bl	800fea8 <iprintf>
			printf("Wrote buffer sizeof: %ld\n\r", byteswritten);
 80009b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80009bc:	4619      	mov	r1, r3
 80009be:	483d      	ldr	r0, [pc, #244]	; (8000ab4 <main+0x4d8>)
 80009c0:	f00f fa72 	bl	800fea8 <iprintf>

			data_buffer[!current_buffer][0] = '\00';
 80009c4:	4b38      	ldr	r3, [pc, #224]	; (8000aa8 <main+0x4cc>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	bf0c      	ite	eq
 80009cc:	2301      	moveq	r3, #1
 80009ce:	2300      	movne	r3, #0
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	4619      	mov	r1, r3
 80009d4:	4a38      	ldr	r2, [pc, #224]	; (8000ab8 <main+0x4dc>)
 80009d6:	f241 4381 	movw	r3, #5249	; 0x1481
 80009da:	fb01 f303 	mul.w	r3, r1, r3
 80009de:	4413      	add	r3, r2
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]
			buffer_fill_level[!current_buffer] = 0;
 80009e4:	4b30      	ldr	r3, [pc, #192]	; (8000aa8 <main+0x4cc>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	bf0c      	ite	eq
 80009ec:	2301      	moveq	r3, #1
 80009ee:	2300      	movne	r3, #0
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	461a      	mov	r2, r3
 80009f4:	4b31      	ldr	r3, [pc, #196]	; (8000abc <main+0x4e0>)
 80009f6:	2100      	movs	r1, #0
 80009f8:	5499      	strb	r1, [r3, r2]
			is_buffer_filled = 0;
 80009fa:	4b31      	ldr	r3, [pc, #196]	; (8000ac0 <main+0x4e4>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	701a      	strb	r2, [r3, #0]

			byteswritten = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

			state = STANDBY;
 8000a06:	2303      	movs	r3, #3
 8000a08:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			break;
 8000a0c:	e04b      	b.n	8000aa6 <main+0x4ca>

		case RESET_STATE:
			HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000a0e:	2102      	movs	r1, #2
 8000a10:	482c      	ldr	r0, [pc, #176]	; (8000ac4 <main+0x4e8>)
 8000a12:	f001 fad0 	bl	8001fb6 <HAL_CAN_DeactivateNotification>
			HAL_CAN_Stop(&hcan1);
 8000a16:	482b      	ldr	r0, [pc, #172]	; (8000ac4 <main+0x4e8>)
 8000a18:	f001 f94c 	bl	8001cb4 <HAL_CAN_Stop>
			HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_RESET); //Red LED
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a22:	4829      	ldr	r0, [pc, #164]	; (8000ac8 <main+0x4ec>)
 8000a24:	f002 fb9a 	bl	800315c <HAL_GPIO_WritePin>

			printf("total sizeof: %ld\n\r", total_size);
 8000a28:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8000a2c:	4827      	ldr	r0, [pc, #156]	; (8000acc <main+0x4f0>)
 8000a2e:	f00f fa3b 	bl	800fea8 <iprintf>
			total_size = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
			buffer_emptyings = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
			printf("\r\nUnmounting!\r\n");
 8000a3e:	4824      	ldr	r0, [pc, #144]	; (8000ad0 <main+0x4f4>)
 8000a40:	f00f fa98 	bl	800ff74 <puts>
			f_close(&SDFile);
 8000a44:	4823      	ldr	r0, [pc, #140]	; (8000ad4 <main+0x4f8>)
 8000a46:	f00e f848 	bl	800eada <f_close>
			f_mount(0, (TCHAR const*) NULL, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f00d fc4c 	bl	800e2ec <f_mount>

			printf("Turning off!\n\r");
 8000a54:	4820      	ldr	r0, [pc, #128]	; (8000ad8 <main+0x4fc>)
 8000a56:	f00f fa27 	bl	800fea8 <iprintf>
			state = POWER_OFF;
 8000a5a:	230c      	movs	r3, #12
 8000a5c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			break;
 8000a60:	e021      	b.n	8000aa6 <main+0x4ca>

		case POWER_OFF:
			HAL_Delay(1000);
 8000a62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a66:	f000 fed5 	bl	8001814 <HAL_Delay>

			if (POWER_STATE) {
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <main+0x500>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d018      	beq.n	8000aa4 <main+0x4c8>
				printf("Turning back on!\n\r");
 8000a72:	481b      	ldr	r0, [pc, #108]	; (8000ae0 <main+0x504>)
 8000a74:	f00f fa18 	bl	800fea8 <iprintf>
				HAL_Delay(1000);
 8000a78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a7c:	f000 feca 	bl	8001814 <HAL_Delay>
				state = TURN_ON;
 8000a80:	2300      	movs	r3, #0
 8000a82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			}
			break;
 8000a86:	e00d      	b.n	8000aa4 <main+0x4c8>

		default:
			printf("CAN logger in unknown state!\n\r");
 8000a88:	4816      	ldr	r0, [pc, #88]	; (8000ae4 <main+0x508>)
 8000a8a:	f00f fa0d 	bl	800fea8 <iprintf>
			HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin,
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a94:	480c      	ldr	r0, [pc, #48]	; (8000ac8 <main+0x4ec>)
 8000a96:	f002 fb61 	bl	800315c <HAL_GPIO_WritePin>
					GPIO_PIN_RESET); // Red LED
			break;
 8000a9a:	e004      	b.n	8000aa6 <main+0x4ca>
			break;
 8000a9c:	bf00      	nop
 8000a9e:	e5bb      	b.n	8000618 <main+0x3c>
			break;
 8000aa0:	bf00      	nop
 8000aa2:	e5b9      	b.n	8000618 <main+0x3c>
			break;
 8000aa4:	bf00      	nop
		switch (state) {
 8000aa6:	e5b7      	b.n	8000618 <main+0x3c>
 8000aa8:	20002dce 	.word	0x20002dce
 8000aac:	080110cc 	.word	0x080110cc
 8000ab0:	080110e0 	.word	0x080110e0
 8000ab4:	080110f8 	.word	0x080110f8
 8000ab8:	200004c8 	.word	0x200004c8
 8000abc:	20002dcc 	.word	0x20002dcc
 8000ac0:	20002dcf 	.word	0x20002dcf
 8000ac4:	20000184 	.word	0x20000184
 8000ac8:	40021400 	.word	0x40021400
 8000acc:	08011114 	.word	0x08011114
 8000ad0:	08011128 	.word	0x08011128
 8000ad4:	20003014 	.word	0x20003014
 8000ad8:	08011138 	.word	0x08011138
 8000adc:	200004c4 	.word	0x200004c4
 8000ae0:	08011148 	.word	0x08011148
 8000ae4:	0801115c 	.word	0x0801115c

08000ae8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b094      	sub	sp, #80	; 0x50
 8000aec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	2234      	movs	r2, #52	; 0x34
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f00f fa53 	bl	800ffa2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000afc:	f107 0308 	add.w	r3, r7, #8
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0c:	4b28      	ldr	r3, [pc, #160]	; (8000bb0 <SystemClock_Config+0xc8>)
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b10:	4a27      	ldr	r2, [pc, #156]	; (8000bb0 <SystemClock_Config+0xc8>)
 8000b12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b16:	6413      	str	r3, [r2, #64]	; 0x40
 8000b18:	4b25      	ldr	r3, [pc, #148]	; (8000bb0 <SystemClock_Config+0xc8>)
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b24:	4b23      	ldr	r3, [pc, #140]	; (8000bb4 <SystemClock_Config+0xcc>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b2c:	4a21      	ldr	r2, [pc, #132]	; (8000bb4 <SystemClock_Config+0xcc>)
 8000b2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b32:	6013      	str	r3, [r2, #0]
 8000b34:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <SystemClock_Config+0xcc>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b3c:	603b      	str	r3, [r7, #0]
 8000b3e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b40:	2301      	movs	r3, #1
 8000b42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b48:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b52:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b54:	2304      	movs	r3, #4
 8000b56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000b58:	2360      	movs	r3, #96	; 0x60
 8000b5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b5c:	2304      	movs	r3, #4
 8000b5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b60:	2304      	movs	r3, #4
 8000b62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b64:	2302      	movs	r3, #2
 8000b66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f003 fdeb 	bl	8004748 <HAL_RCC_OscConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b78:	f000 fab0 	bl	80010dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b7c:	230f      	movs	r3, #15
 8000b7e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b80:	2302      	movs	r3, #2
 8000b82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b84:	2300      	movs	r3, #0
 8000b86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b92:	f107 0308 	add.w	r3, r7, #8
 8000b96:	2101      	movs	r1, #1
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f004 f883 	bl	8004ca4 <HAL_RCC_ClockConfig>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ba4:	f000 fa9a 	bl	80010dc <Error_Handler>
  }
}
 8000ba8:	bf00      	nop
 8000baa:	3750      	adds	r7, #80	; 0x50
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40007000 	.word	0x40007000

08000bb8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000bbc:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <MX_CAN1_Init+0x64>)
 8000bbe:	4a18      	ldr	r2, [pc, #96]	; (8000c20 <MX_CAN1_Init+0x68>)
 8000bc0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000bc2:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <MX_CAN1_Init+0x64>)
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000bc8:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <MX_CAN1_Init+0x64>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000bce:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <MX_CAN1_Init+0x64>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <MX_CAN1_Init+0x64>)
 8000bd6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000bda:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <MX_CAN1_Init+0x64>)
 8000bde:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000be2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000be4:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <MX_CAN1_Init+0x64>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <MX_CAN1_Init+0x64>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <MX_CAN1_Init+0x64>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <MX_CAN1_Init+0x64>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000bfc:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <MX_CAN1_Init+0x64>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <MX_CAN1_Init+0x64>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000c08:	4804      	ldr	r0, [pc, #16]	; (8000c1c <MX_CAN1_Init+0x64>)
 8000c0a:	f000 fe27 	bl	800185c <HAL_CAN_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000c14:	f000 fa62 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000184 	.word	0x20000184
 8000c20:	40006400 	.word	0x40006400

08000c24 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <MX_SDMMC1_SD_Init+0x44>)
 8000c2a:	4a10      	ldr	r2, [pc, #64]	; (8000c6c <MX_SDMMC1_SD_Init+0x48>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <MX_SDMMC1_SD_Init+0x44>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <MX_SDMMC1_SD_Init+0x44>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <MX_SDMMC1_SD_Init+0x44>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000c40:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <MX_SDMMC1_SD_Init+0x44>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <MX_SDMMC1_SD_Init+0x44>)
 8000c48:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c4c:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <MX_SDMMC1_SD_Init+0x44>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
	if (HAL_SD_Init(&hsd1) != HAL_OK) {
 8000c54:	4804      	ldr	r0, [pc, #16]	; (8000c68 <MX_SDMMC1_SD_Init+0x44>)
 8000c56:	f004 fe73 	bl	8005940 <HAL_SD_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_SDMMC1_SD_Init+0x40>
		Error_Handler();
 8000c60:	f000 fa3c 	bl	80010dc <Error_Handler>
	}
  /* USER CODE END SDMMC1_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	200001ac 	.word	0x200001ac
 8000c6c:	40012c00 	.word	0x40012c00

08000c70 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c74:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <MX_USART3_UART_Init+0x58>)
 8000c76:	4a15      	ldr	r2, [pc, #84]	; (8000ccc <MX_USART3_UART_Init+0x5c>)
 8000c78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c7a:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <MX_USART3_UART_Init+0x58>)
 8000c7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <MX_USART3_UART_Init+0x58>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <MX_USART3_UART_Init+0x58>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <MX_USART3_UART_Init+0x58>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_USART3_UART_Init+0x58>)
 8000c96:	220c      	movs	r2, #12
 8000c98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <MX_USART3_UART_Init+0x58>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca0:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <MX_USART3_UART_Init+0x58>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ca6:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <MX_USART3_UART_Init+0x58>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <MX_USART3_UART_Init+0x58>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cb2:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <MX_USART3_UART_Init+0x58>)
 8000cb4:	f005 ff6c 	bl	8006b90 <HAL_UART_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000cbe:	f000 fa0d 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200002f0 	.word	0x200002f0
 8000ccc:	40004800 	.word	0x40004800

08000cd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <MX_DMA_Init+0x48>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a0f      	ldr	r2, [pc, #60]	; (8000d18 <MX_DMA_Init+0x48>)
 8000cdc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <MX_DMA_Init+0x48>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	203b      	movs	r0, #59	; 0x3b
 8000cf4:	f001 fc91 	bl	800261a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000cf8:	203b      	movs	r0, #59	; 0x3b
 8000cfa:	f001 fcaa 	bl	8002652 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2100      	movs	r1, #0
 8000d02:	2045      	movs	r0, #69	; 0x45
 8000d04:	f001 fc89 	bl	800261a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000d08:	2045      	movs	r0, #69	; 0x45
 8000d0a:	f001 fca2 	bl	8002652 <HAL_NVIC_EnableIRQ>

}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40023800 	.word	0x40023800

08000d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08e      	sub	sp, #56	; 0x38
 8000d20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
 8000d30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d32:	4b69      	ldr	r3, [pc, #420]	; (8000ed8 <MX_GPIO_Init+0x1bc>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a68      	ldr	r2, [pc, #416]	; (8000ed8 <MX_GPIO_Init+0x1bc>)
 8000d38:	f043 0304 	orr.w	r3, r3, #4
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b66      	ldr	r3, [pc, #408]	; (8000ed8 <MX_GPIO_Init+0x1bc>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0304 	and.w	r3, r3, #4
 8000d46:	623b      	str	r3, [r7, #32]
 8000d48:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d4a:	4b63      	ldr	r3, [pc, #396]	; (8000ed8 <MX_GPIO_Init+0x1bc>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a62      	ldr	r2, [pc, #392]	; (8000ed8 <MX_GPIO_Init+0x1bc>)
 8000d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b60      	ldr	r3, [pc, #384]	; (8000ed8 <MX_GPIO_Init+0x1bc>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d5e:	61fb      	str	r3, [r7, #28]
 8000d60:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d62:	4b5d      	ldr	r3, [pc, #372]	; (8000ed8 <MX_GPIO_Init+0x1bc>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a5c      	ldr	r2, [pc, #368]	; (8000ed8 <MX_GPIO_Init+0x1bc>)
 8000d68:	f043 0320 	orr.w	r3, r3, #32
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b5a      	ldr	r3, [pc, #360]	; (8000ed8 <MX_GPIO_Init+0x1bc>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0320 	and.w	r3, r3, #32
 8000d76:	61bb      	str	r3, [r7, #24]
 8000d78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d7a:	4b57      	ldr	r3, [pc, #348]	; (8000ed8 <MX_GPIO_Init+0x1bc>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a56      	ldr	r2, [pc, #344]	; (8000ed8 <MX_GPIO_Init+0x1bc>)
 8000d80:	f043 0310 	orr.w	r3, r3, #16
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b54      	ldr	r3, [pc, #336]	; (8000ed8 <MX_GPIO_Init+0x1bc>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0310 	and.w	r3, r3, #16
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d92:	4b51      	ldr	r3, [pc, #324]	; (8000ed8 <MX_GPIO_Init+0x1bc>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a50      	ldr	r2, [pc, #320]	; (8000ed8 <MX_GPIO_Init+0x1bc>)
 8000d98:	f043 0308 	orr.w	r3, r3, #8
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b4e      	ldr	r3, [pc, #312]	; (8000ed8 <MX_GPIO_Init+0x1bc>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0308 	and.w	r3, r3, #8
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000daa:	4b4b      	ldr	r3, [pc, #300]	; (8000ed8 <MX_GPIO_Init+0x1bc>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a4a      	ldr	r2, [pc, #296]	; (8000ed8 <MX_GPIO_Init+0x1bc>)
 8000db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b48      	ldr	r3, [pc, #288]	; (8000ed8 <MX_GPIO_Init+0x1bc>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	4b45      	ldr	r3, [pc, #276]	; (8000ed8 <MX_GPIO_Init+0x1bc>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a44      	ldr	r2, [pc, #272]	; (8000ed8 <MX_GPIO_Init+0x1bc>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b42      	ldr	r3, [pc, #264]	; (8000ed8 <MX_GPIO_Init+0x1bc>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	4b3f      	ldr	r3, [pc, #252]	; (8000ed8 <MX_GPIO_Init+0x1bc>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a3e      	ldr	r2, [pc, #248]	; (8000ed8 <MX_GPIO_Init+0x1bc>)
 8000de0:	f043 0302 	orr.w	r3, r3, #2
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b3c      	ldr	r3, [pc, #240]	; (8000ed8 <MX_GPIO_Init+0x1bc>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000df8:	4838      	ldr	r0, [pc, #224]	; (8000edc <MX_GPIO_Init+0x1c0>)
 8000dfa:	f002 f9af 	bl	800315c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2140      	movs	r1, #64	; 0x40
 8000e02:	4837      	ldr	r0, [pc, #220]	; (8000ee0 <MX_GPIO_Init+0x1c4>)
 8000e04:	f002 f9aa 	bl	800315c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2180      	movs	r1, #128	; 0x80
 8000e0c:	4835      	ldr	r0, [pc, #212]	; (8000ee4 <MX_GPIO_Init+0x1c8>)
 8000e0e:	f002 f9a5 	bl	800315c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Error_LED_Pin */
  GPIO_InitStruct.Pin = Error_LED_Pin;
 8000e12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Error_LED_GPIO_Port, &GPIO_InitStruct);
 8000e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e28:	4619      	mov	r1, r3
 8000e2a:	482c      	ldr	r0, [pc, #176]	; (8000edc <MX_GPIO_Init+0x1c0>)
 8000e2c:	f001 ffd2 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e42:	2306      	movs	r3, #6
 8000e44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4826      	ldr	r0, [pc, #152]	; (8000ee8 <MX_GPIO_Init+0x1cc>)
 8000e4e:	f001 ffc1 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PowerSwitch_Pin */
  GPIO_InitStruct.Pin = PowerSwitch_Pin;
 8000e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e58:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PowerSwitch_GPIO_Port, &GPIO_InitStruct);
 8000e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e66:	4619      	mov	r1, r3
 8000e68:	481f      	ldr	r0, [pc, #124]	; (8000ee8 <MX_GPIO_Init+0x1cc>)
 8000e6a:	f001 ffb3 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CD_Pin USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = SD_CD_Pin|USB_OverCurrent_Pin;
 8000e6e:	2384      	movs	r3, #132	; 0x84
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e72:	2300      	movs	r3, #0
 8000e74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4817      	ldr	r0, [pc, #92]	; (8000ee0 <MX_GPIO_Init+0x1c4>)
 8000e82:	f001 ffa7 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e86:	2340      	movs	r3, #64	; 0x40
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4810      	ldr	r0, [pc, #64]	; (8000ee0 <MX_GPIO_Init+0x1c4>)
 8000e9e:	f001 ff99 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ea2:	2380      	movs	r3, #128	; 0x80
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	480a      	ldr	r0, [pc, #40]	; (8000ee4 <MX_GPIO_Init+0x1c8>)
 8000eba:	f001 ff8b 	bl	8002dd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	2028      	movs	r0, #40	; 0x28
 8000ec4:	f001 fba9 	bl	800261a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ec8:	2028      	movs	r0, #40	; 0x28
 8000eca:	f001 fbc2 	bl	8002652 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ece:	bf00      	nop
 8000ed0:	3738      	adds	r7, #56	; 0x38
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40021400 	.word	0x40021400
 8000ee0:	40021800 	.word	0x40021800
 8000ee4:	40020400 	.word	0x40020400
 8000ee8:	40021000 	.word	0x40021000

08000eec <Get_and_Append_CAN_Message_to_Buffer>:

/* USER CODE BEGIN 4 */
void Get_and_Append_CAN_Message_to_Buffer() {
 8000eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eee:	b09d      	sub	sp, #116	; 0x74
 8000ef0:	af06      	add	r7, sp, #24
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rcvd_msg[8];

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_msg)
 8000ef2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ef6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000efa:	2100      	movs	r1, #0
 8000efc:	4833      	ldr	r0, [pc, #204]	; (8000fcc <Get_and_Append_CAN_Message_to_Buffer+0xe0>)
 8000efe:	f000 ff22 	bl	8001d46 <HAL_CAN_GetRxMessage>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d004      	beq.n	8000f12 <Get_and_Append_CAN_Message_to_Buffer+0x26>
			!= HAL_OK){
		printf("Failed to get CAN message\n\r");
 8000f08:	4831      	ldr	r0, [pc, #196]	; (8000fd0 <Get_and_Append_CAN_Message_to_Buffer+0xe4>)
 8000f0a:	f00e ffcd 	bl	800fea8 <iprintf>
		Error_Handler();
 8000f0e:	f000 f8e5 	bl	80010dc <Error_Handler>
	}

	uint16_t data1 = (rcvd_msg[0] << 8) + rcvd_msg[1];
 8000f12:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	021b      	lsls	r3, r3, #8
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	4413      	add	r3, r2
 8000f24:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	uint16_t data2 = (rcvd_msg[2] << 8) + rcvd_msg[3];
 8000f28:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	021b      	lsls	r3, r3, #8
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	4413      	add	r3, r2
 8000f3a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	uint16_t data3 = (rcvd_msg[4] << 8) + rcvd_msg[5];
 8000f3e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	021b      	lsls	r3, r3, #8
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	4413      	add	r3, r2
 8000f50:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	uint16_t data4 = (rcvd_msg[6] << 8) + rcvd_msg[7];
 8000f54:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	021b      	lsls	r3, r3, #8
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	4413      	add	r3, r2
 8000f66:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	char encodedData[ENCODED_CAN_SIZE_BYTES];

	snprintf(encodedData, ENCODED_CAN_SIZE_BYTES + 1,
 8000f6a:	f000 fc47 	bl	80017fc <HAL_GetTick>
 8000f6e:	4606      	mov	r6, r0
 8000f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f72:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8000f76:	f8b7 1054 	ldrh.w	r1, [r7, #84]	; 0x54
 8000f7a:	f8b7 0052 	ldrh.w	r0, [r7, #82]	; 0x52
 8000f7e:	f8b7 4050 	ldrh.w	r4, [r7, #80]	; 0x50
 8000f82:	463d      	mov	r5, r7
 8000f84:	9404      	str	r4, [sp, #16]
 8000f86:	9003      	str	r0, [sp, #12]
 8000f88:	9102      	str	r1, [sp, #8]
 8000f8a:	9201      	str	r2, [sp, #4]
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	4633      	mov	r3, r6
 8000f90:	4a10      	ldr	r2, [pc, #64]	; (8000fd4 <Get_and_Append_CAN_Message_to_Buffer+0xe8>)
 8000f92:	212a      	movs	r1, #42	; 0x2a
 8000f94:	4628      	mov	r0, r5
 8000f96:	f00e fdf9 	bl	800fb8c <sniprintf>
			"(%010ld) X %08lX#%04X%04X%04X%04X\n", HAL_GetTick(),
			RxHeader.ExtId, data1, data2, data3, data4);

	strcat(current_buffer ? data_buffer[1] : data_buffer[0], encodedData);
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <Get_and_Append_CAN_Message_to_Buffer+0xec>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <Get_and_Append_CAN_Message_to_Buffer+0xba>
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <Get_and_Append_CAN_Message_to_Buffer+0xf0>)
 8000fa4:	e000      	b.n	8000fa8 <Get_and_Append_CAN_Message_to_Buffer+0xbc>
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <Get_and_Append_CAN_Message_to_Buffer+0xf4>)
 8000fa8:	463a      	mov	r2, r7
 8000faa:	4611      	mov	r1, r2
 8000fac:	4618      	mov	r0, r3
 8000fae:	f00e ffe9 	bl	800ff84 <strcat>
	buffer_fill_level[current_buffer]++;
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <Get_and_Append_CAN_Message_to_Buffer+0xec>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <Get_and_Append_CAN_Message_to_Buffer+0xf8>)
 8000fb8:	5cd2      	ldrb	r2, [r2, r3]
 8000fba:	3201      	adds	r2, #1
 8000fbc:	b2d1      	uxtb	r1, r2
 8000fbe:	4a09      	ldr	r2, [pc, #36]	; (8000fe4 <Get_and_Append_CAN_Message_to_Buffer+0xf8>)
 8000fc0:	54d1      	strb	r1, [r2, r3]
}
 8000fc2:	bf00      	nop
 8000fc4:	375c      	adds	r7, #92	; 0x5c
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000184 	.word	0x20000184
 8000fd0:	0801117c 	.word	0x0801117c
 8000fd4:	08011198 	.word	0x08011198
 8000fd8:	20002dce 	.word	0x20002dce
 8000fdc:	20001949 	.word	0x20001949
 8000fe0:	200004c8 	.word	0x200004c8
 8000fe4:	20002dcc 	.word	0x20002dcc

08000fe8 <CAN_Filter_Config>:

HAL_StatusTypeDef CAN_Filter_Config(void) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08c      	sub	sp, #48	; 0x30
 8000fec:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filter;

	uint32_t filter_mask = 0x00000000;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t filter_id = 0x000A0000;
 8000ff2:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 8000ff6:	62bb      	str	r3, [r7, #40]	; 0x28

	filter.FilterIdHigh = ((filter_id << 5) | (filter_id >> (32 - 5))) & 0xFFFF; // STID[10:0] & EXTID[17:13]
 8000ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ffa:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = (filter_id >> (11 - 3)) & 0xFFF8; // EXID[12:5] & 3 Reserved bits
 8001002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001004:	0a1a      	lsrs	r2, r3, #8
 8001006:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800100a:	4013      	ands	r3, r2
 800100c:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = ((filter_mask << 5) | (filter_mask >> (32 - 5)))
 800100e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001010:	ea4f 63f3 	mov.w	r3, r3, ror #27
			& 0xFFFF;
 8001014:	b29b      	uxth	r3, r3
	filter.FilterMaskIdHigh = ((filter_mask << 5) | (filter_mask >> (32 - 5)))
 8001016:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = (filter_mask >> (11 - 3)) & 0xFFF8;
 8001018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800101a:	0a1a      	lsrs	r2, r3, #8
 800101c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001020:	4013      	ands	r3, r2
 8001022:	60fb      	str	r3, [r7, #12]

	filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001024:	2300      	movs	r3, #0
 8001026:	613b      	str	r3, [r7, #16]
	filter.FilterBank = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 800102c:	2300      	movs	r3, #0
 800102e:	61bb      	str	r3, [r7, #24]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001030:	2301      	movs	r3, #1
 8001032:	61fb      	str	r3, [r7, #28]
	filter.FilterActivation = ENABLE;
 8001034:	2301      	movs	r3, #1
 8001036:	623b      	str	r3, [r7, #32]

	return HAL_CAN_ConfigFilter(&hcan1, &filter);
 8001038:	463b      	mov	r3, r7
 800103a:	4619      	mov	r1, r3
 800103c:	4803      	ldr	r0, [pc, #12]	; (800104c <CAN_Filter_Config+0x64>)
 800103e:	f000 fd09 	bl	8001a54 <HAL_CAN_ConfigFilter>
 8001042:	4603      	mov	r3, r0
}
 8001044:	4618      	mov	r0, r3
 8001046:	3730      	adds	r7, #48	; 0x30
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000184 	.word	0x20000184

08001050 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	if (buffer_fill_level[0] == CAN_MESSAGES_TO_BUFFER
 8001058:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b80      	cmp	r3, #128	; 0x80
 800105e:	d108      	bne.n	8001072 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
			&& buffer_fill_level[1] == CAN_MESSAGES_TO_BUFFER)
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8001062:	785b      	ldrb	r3, [r3, #1]
 8001064:	2b80      	cmp	r3, #128	; 0x80
 8001066:	d104      	bne.n	8001072 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		printf("Buffers are full\n\r");
 8001068:	4810      	ldr	r0, [pc, #64]	; (80010ac <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 800106a:	f00e ff1d 	bl	800fea8 <iprintf>
		Error_Handler();
 800106e:	f000 f835 	bl	80010dc <Error_Handler>
	}

	Get_and_Append_CAN_Message_to_Buffer();
 8001072:	f7ff ff3b 	bl	8000eec <Get_and_Append_CAN_Message_to_Buffer>

	if (buffer_fill_level[current_buffer] == CAN_MESSAGES_TO_BUFFER) {
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 800107e:	5c9b      	ldrb	r3, [r3, r2]
 8001080:	2b80      	cmp	r3, #128	; 0x80
 8001082:	d10c      	bne.n	800109e <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
		is_buffer_filled = 1;
 8001084:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8001086:	2201      	movs	r2, #1
 8001088:	701a      	strb	r2, [r3, #0]
		current_buffer = !current_buffer;
 800108a:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	bf0c      	ite	eq
 8001092:	2301      	moveq	r3, #1
 8001094:	2300      	movne	r3, #0
 8001096:	b2db      	uxtb	r3, r3
 8001098:	461a      	mov	r2, r3
 800109a:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 800109c:	701a      	strb	r2, [r3, #0]
	}
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20002dcc 	.word	0x20002dcc
 80010ac:	080111bc 	.word	0x080111bc
 80010b0:	20002dce 	.word	0x20002dce
 80010b4:	20002dcf 	.word	0x20002dcf

080010b8 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 80010c0:	1d39      	adds	r1, r7, #4
 80010c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010c6:	2201      	movs	r2, #1
 80010c8:	4803      	ldr	r0, [pc, #12]	; (80010d8 <__io_putchar+0x20>)
 80010ca:	f005 fdaf 	bl	8006c2c <HAL_UART_Transmit>

	return ch;
 80010ce:	687b      	ldr	r3, [r7, #4]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200002f0 	.word	0x200002f0

080010dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e0:	b672      	cpsid	i
}
 80010e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	printf("\r\nError Handler Reached\r\n");
 80010e4:	4804      	ldr	r0, [pc, #16]	; (80010f8 <Error_Handler+0x1c>)
 80010e6:	f00e ff45 	bl	800ff74 <puts>
	HAL_GPIO_WritePin(Error_LED_GPIO_Port, Error_LED_Pin, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <Error_Handler+0x20>)
 80010f2:	f002 f833 	bl	800315c <HAL_GPIO_WritePin>

	while (1) {
 80010f6:	e7fe      	b.n	80010f6 <Error_Handler+0x1a>
 80010f8:	080111d0 	.word	0x080111d0
 80010fc:	40021400 	.word	0x40021400

08001100 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <HAL_MspInit+0x44>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	4a0e      	ldr	r2, [pc, #56]	; (8001144 <HAL_MspInit+0x44>)
 800110c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001110:	6413      	str	r3, [r2, #64]	; 0x40
 8001112:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <HAL_MspInit+0x44>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <HAL_MspInit+0x44>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	4a08      	ldr	r2, [pc, #32]	; (8001144 <HAL_MspInit+0x44>)
 8001124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001128:	6453      	str	r3, [r2, #68]	; 0x44
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_MspInit+0x44>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800

08001148 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08a      	sub	sp, #40	; 0x28
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a1b      	ldr	r2, [pc, #108]	; (80011d4 <HAL_CAN_MspInit+0x8c>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d12f      	bne.n	80011ca <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800116a:	4b1b      	ldr	r3, [pc, #108]	; (80011d8 <HAL_CAN_MspInit+0x90>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	4a1a      	ldr	r2, [pc, #104]	; (80011d8 <HAL_CAN_MspInit+0x90>)
 8001170:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001174:	6413      	str	r3, [r2, #64]	; 0x40
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <HAL_CAN_MspInit+0x90>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <HAL_CAN_MspInit+0x90>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a14      	ldr	r2, [pc, #80]	; (80011d8 <HAL_CAN_MspInit+0x90>)
 8001188:	f043 0308 	orr.w	r3, r3, #8
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <HAL_CAN_MspInit+0x90>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0308 	and.w	r3, r3, #8
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800119a:	2303      	movs	r3, #3
 800119c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a6:	2303      	movs	r3, #3
 80011a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80011aa:	2309      	movs	r3, #9
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	4619      	mov	r1, r3
 80011b4:	4809      	ldr	r0, [pc, #36]	; (80011dc <HAL_CAN_MspInit+0x94>)
 80011b6:	f001 fe0d 	bl	8002dd4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	2014      	movs	r0, #20
 80011c0:	f001 fa2b 	bl	800261a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80011c4:	2014      	movs	r0, #20
 80011c6:	f001 fa44 	bl	8002652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80011ca:	bf00      	nop
 80011cc:	3728      	adds	r7, #40	; 0x28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40006400 	.word	0x40006400
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020c00 	.word	0x40020c00

080011e0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b0ae      	sub	sp, #184	; 0xb8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	2290      	movs	r2, #144	; 0x90
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f00e fece 	bl	800ffa2 <memset>
  if(hsd->Instance==SDMMC1)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a73      	ldr	r2, [pc, #460]	; (80013d8 <HAL_SD_MspInit+0x1f8>)
 800120c:	4293      	cmp	r3, r2
 800120e:	f040 80de 	bne.w	80013ce <HAL_SD_MspInit+0x1ee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001212:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001216:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 8001218:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800121c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	4618      	mov	r0, r3
 8001226:	f003 ff63 	bl	80050f0 <HAL_RCCEx_PeriphCLKConfig>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001230:	f7ff ff54 	bl	80010dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001234:	4b69      	ldr	r3, [pc, #420]	; (80013dc <HAL_SD_MspInit+0x1fc>)
 8001236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001238:	4a68      	ldr	r2, [pc, #416]	; (80013dc <HAL_SD_MspInit+0x1fc>)
 800123a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800123e:	6453      	str	r3, [r2, #68]	; 0x44
 8001240:	4b66      	ldr	r3, [pc, #408]	; (80013dc <HAL_SD_MspInit+0x1fc>)
 8001242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001244:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800124c:	4b63      	ldr	r3, [pc, #396]	; (80013dc <HAL_SD_MspInit+0x1fc>)
 800124e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001250:	4a62      	ldr	r2, [pc, #392]	; (80013dc <HAL_SD_MspInit+0x1fc>)
 8001252:	f043 0304 	orr.w	r3, r3, #4
 8001256:	6313      	str	r3, [r2, #48]	; 0x30
 8001258:	4b60      	ldr	r3, [pc, #384]	; (80013dc <HAL_SD_MspInit+0x1fc>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125c:	f003 0304 	and.w	r3, r3, #4
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001264:	4b5d      	ldr	r3, [pc, #372]	; (80013dc <HAL_SD_MspInit+0x1fc>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001268:	4a5c      	ldr	r2, [pc, #368]	; (80013dc <HAL_SD_MspInit+0x1fc>)
 800126a:	f043 0308 	orr.w	r3, r3, #8
 800126e:	6313      	str	r3, [r2, #48]	; 0x30
 8001270:	4b5a      	ldr	r3, [pc, #360]	; (80013dc <HAL_SD_MspInit+0x1fc>)
 8001272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001274:	f003 0308 	and.w	r3, r3, #8
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800127c:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001280:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001290:	2303      	movs	r3, #3
 8001292:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001296:	230c      	movs	r3, #12
 8001298:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012a0:	4619      	mov	r1, r3
 80012a2:	484f      	ldr	r0, [pc, #316]	; (80013e0 <HAL_SD_MspInit+0x200>)
 80012a4:	f001 fd96 	bl	8002dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012a8:	2304      	movs	r3, #4
 80012aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ba:	2303      	movs	r3, #3
 80012bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80012c0:	230c      	movs	r3, #12
 80012c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012c6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012ca:	4619      	mov	r1, r3
 80012cc:	4845      	ldr	r0, [pc, #276]	; (80013e4 <HAL_SD_MspInit+0x204>)
 80012ce:	f001 fd81 	bl	8002dd4 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 80012d2:	4b45      	ldr	r3, [pc, #276]	; (80013e8 <HAL_SD_MspInit+0x208>)
 80012d4:	4a45      	ldr	r2, [pc, #276]	; (80013ec <HAL_SD_MspInit+0x20c>)
 80012d6:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80012d8:	4b43      	ldr	r3, [pc, #268]	; (80013e8 <HAL_SD_MspInit+0x208>)
 80012da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012de:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012e0:	4b41      	ldr	r3, [pc, #260]	; (80013e8 <HAL_SD_MspInit+0x208>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012e6:	4b40      	ldr	r3, [pc, #256]	; (80013e8 <HAL_SD_MspInit+0x208>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012ec:	4b3e      	ldr	r3, [pc, #248]	; (80013e8 <HAL_SD_MspInit+0x208>)
 80012ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012f2:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012f4:	4b3c      	ldr	r3, [pc, #240]	; (80013e8 <HAL_SD_MspInit+0x208>)
 80012f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012fa:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012fc:	4b3a      	ldr	r3, [pc, #232]	; (80013e8 <HAL_SD_MspInit+0x208>)
 80012fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001302:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001304:	4b38      	ldr	r3, [pc, #224]	; (80013e8 <HAL_SD_MspInit+0x208>)
 8001306:	2220      	movs	r2, #32
 8001308:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800130a:	4b37      	ldr	r3, [pc, #220]	; (80013e8 <HAL_SD_MspInit+0x208>)
 800130c:	2200      	movs	r2, #0
 800130e:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001310:	4b35      	ldr	r3, [pc, #212]	; (80013e8 <HAL_SD_MspInit+0x208>)
 8001312:	2204      	movs	r2, #4
 8001314:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001316:	4b34      	ldr	r3, [pc, #208]	; (80013e8 <HAL_SD_MspInit+0x208>)
 8001318:	2203      	movs	r2, #3
 800131a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 800131c:	4b32      	ldr	r3, [pc, #200]	; (80013e8 <HAL_SD_MspInit+0x208>)
 800131e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001322:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001324:	4b30      	ldr	r3, [pc, #192]	; (80013e8 <HAL_SD_MspInit+0x208>)
 8001326:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800132a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 800132c:	482e      	ldr	r0, [pc, #184]	; (80013e8 <HAL_SD_MspInit+0x208>)
 800132e:	f001 f9ab 	bl	8002688 <HAL_DMA_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <HAL_SD_MspInit+0x15c>
    {
      Error_Handler();
 8001338:	f7ff fed0 	bl	80010dc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a2a      	ldr	r2, [pc, #168]	; (80013e8 <HAL_SD_MspInit+0x208>)
 8001340:	641a      	str	r2, [r3, #64]	; 0x40
 8001342:	4a29      	ldr	r2, [pc, #164]	; (80013e8 <HAL_SD_MspInit+0x208>)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8001348:	4b29      	ldr	r3, [pc, #164]	; (80013f0 <HAL_SD_MspInit+0x210>)
 800134a:	4a2a      	ldr	r2, [pc, #168]	; (80013f4 <HAL_SD_MspInit+0x214>)
 800134c:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800134e:	4b28      	ldr	r3, [pc, #160]	; (80013f0 <HAL_SD_MspInit+0x210>)
 8001350:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001354:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001356:	4b26      	ldr	r3, [pc, #152]	; (80013f0 <HAL_SD_MspInit+0x210>)
 8001358:	2240      	movs	r2, #64	; 0x40
 800135a:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800135c:	4b24      	ldr	r3, [pc, #144]	; (80013f0 <HAL_SD_MspInit+0x210>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001362:	4b23      	ldr	r3, [pc, #140]	; (80013f0 <HAL_SD_MspInit+0x210>)
 8001364:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001368:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800136a:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <HAL_SD_MspInit+0x210>)
 800136c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001370:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001372:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <HAL_SD_MspInit+0x210>)
 8001374:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001378:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 800137a:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <HAL_SD_MspInit+0x210>)
 800137c:	2220      	movs	r2, #32
 800137e:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001380:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <HAL_SD_MspInit+0x210>)
 8001382:	2200      	movs	r2, #0
 8001384:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001386:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <HAL_SD_MspInit+0x210>)
 8001388:	2204      	movs	r2, #4
 800138a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800138c:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <HAL_SD_MspInit+0x210>)
 800138e:	2203      	movs	r2, #3
 8001390:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001392:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <HAL_SD_MspInit+0x210>)
 8001394:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001398:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <HAL_SD_MspInit+0x210>)
 800139c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80013a0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80013a2:	4813      	ldr	r0, [pc, #76]	; (80013f0 <HAL_SD_MspInit+0x210>)
 80013a4:	f001 f970 	bl	8002688 <HAL_DMA_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_SD_MspInit+0x1d2>
    {
      Error_Handler();
 80013ae:	f7ff fe95 	bl	80010dc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a0e      	ldr	r2, [pc, #56]	; (80013f0 <HAL_SD_MspInit+0x210>)
 80013b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80013b8:	4a0d      	ldr	r2, [pc, #52]	; (80013f0 <HAL_SD_MspInit+0x210>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	2100      	movs	r1, #0
 80013c2:	2031      	movs	r0, #49	; 0x31
 80013c4:	f001 f929 	bl	800261a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80013c8:	2031      	movs	r0, #49	; 0x31
 80013ca:	f001 f942 	bl	8002652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80013ce:	bf00      	nop
 80013d0:	37b8      	adds	r7, #184	; 0xb8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40012c00 	.word	0x40012c00
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40020800 	.word	0x40020800
 80013e4:	40020c00 	.word	0x40020c00
 80013e8:	20000230 	.word	0x20000230
 80013ec:	40026458 	.word	0x40026458
 80013f0:	20000290 	.word	0x20000290
 80013f4:	400264a0 	.word	0x400264a0

080013f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b0ae      	sub	sp, #184	; 0xb8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	2290      	movs	r2, #144	; 0x90
 8001416:	2100      	movs	r1, #0
 8001418:	4618      	mov	r0, r3
 800141a:	f00e fdc2 	bl	800ffa2 <memset>
  if(huart->Instance==USART3)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a22      	ldr	r2, [pc, #136]	; (80014ac <HAL_UART_MspInit+0xb4>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d13c      	bne.n	80014a2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001428:	f44f 7380 	mov.w	r3, #256	; 0x100
 800142c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800142e:	2300      	movs	r3, #0
 8001430:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	4618      	mov	r0, r3
 8001438:	f003 fe5a 	bl	80050f0 <HAL_RCCEx_PeriphCLKConfig>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001442:	f7ff fe4b 	bl	80010dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001446:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <HAL_UART_MspInit+0xb8>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	4a19      	ldr	r2, [pc, #100]	; (80014b0 <HAL_UART_MspInit+0xb8>)
 800144c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001450:	6413      	str	r3, [r2, #64]	; 0x40
 8001452:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <HAL_UART_MspInit+0xb8>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800145e:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <HAL_UART_MspInit+0xb8>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a13      	ldr	r2, [pc, #76]	; (80014b0 <HAL_UART_MspInit+0xb8>)
 8001464:	f043 0308 	orr.w	r3, r3, #8
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <HAL_UART_MspInit+0xb8>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0308 	and.w	r3, r3, #8
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001476:	f44f 7340 	mov.w	r3, #768	; 0x300
 800147a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	2302      	movs	r3, #2
 8001480:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148a:	2303      	movs	r3, #3
 800148c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001490:	2307      	movs	r3, #7
 8001492:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001496:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800149a:	4619      	mov	r1, r3
 800149c:	4805      	ldr	r0, [pc, #20]	; (80014b4 <HAL_UART_MspInit+0xbc>)
 800149e:	f001 fc99 	bl	8002dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014a2:	bf00      	nop
 80014a4:	37b8      	adds	r7, #184	; 0xb8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40004800 	.word	0x40004800
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40020c00 	.word	0x40020c00

080014b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014bc:	e7fe      	b.n	80014bc <NMI_Handler+0x4>

080014be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c2:	e7fe      	b.n	80014c2 <HardFault_Handler+0x4>

080014c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <MemManage_Handler+0x4>

080014ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ce:	e7fe      	b.n	80014ce <BusFault_Handler+0x4>

080014d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <UsageFault_Handler+0x4>

080014d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001504:	f000 f966 	bl	80017d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}

0800150c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001510:	4802      	ldr	r0, [pc, #8]	; (800151c <CAN1_RX0_IRQHandler+0x10>)
 8001512:	f000 fd77 	bl	8002004 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000184 	.word	0x20000184

08001520 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	POWER_STATE = HAL_GPIO_ReadPin(PowerSwitch_GPIO_Port, PowerSwitch_Pin);
 8001524:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001528:	4806      	ldr	r0, [pc, #24]	; (8001544 <EXTI15_10_IRQHandler+0x24>)
 800152a:	f001 fdff 	bl	800312c <HAL_GPIO_ReadPin>
 800152e:	4603      	mov	r3, r0
 8001530:	461a      	mov	r2, r3
 8001532:	4b05      	ldr	r3, [pc, #20]	; (8001548 <EXTI15_10_IRQHandler+0x28>)
 8001534:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PowerSwitch_Pin);
 8001536:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800153a:	f001 fe29 	bl	8003190 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40021000 	.word	0x40021000
 8001548:	200004c4 	.word	0x200004c4

0800154c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001550:	4802      	ldr	r0, [pc, #8]	; (800155c <SDMMC1_IRQHandler+0x10>)
 8001552:	f004 fc75 	bl	8005e40 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	200001ac 	.word	0x200001ac

08001560 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001564:	4802      	ldr	r0, [pc, #8]	; (8001570 <DMA2_Stream3_IRQHandler+0x10>)
 8001566:	f001 f9bf 	bl	80028e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000230 	.word	0x20000230

08001574 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001578:	4802      	ldr	r0, [pc, #8]	; (8001584 <OTG_FS_IRQHandler+0x10>)
 800157a:	f001 ff72 	bl	8003462 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20004960 	.word	0x20004960

08001588 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 800158c:	4802      	ldr	r0, [pc, #8]	; (8001598 <DMA2_Stream6_IRQHandler+0x10>)
 800158e:	f001 f9ab 	bl	80028e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000290 	.word	0x20000290

0800159c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	e00a      	b.n	80015c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015ae:	f3af 8000 	nop.w
 80015b2:	4601      	mov	r1, r0
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	1c5a      	adds	r2, r3, #1
 80015b8:	60ba      	str	r2, [r7, #8]
 80015ba:	b2ca      	uxtb	r2, r1
 80015bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	3301      	adds	r3, #1
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	697a      	ldr	r2, [r7, #20]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	dbf0      	blt.n	80015ae <_read+0x12>
  }

  return len;
 80015cc:	687b      	ldr	r3, [r7, #4]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b086      	sub	sp, #24
 80015da:	af00      	add	r7, sp, #0
 80015dc:	60f8      	str	r0, [r7, #12]
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	e009      	b.n	80015fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	1c5a      	adds	r2, r3, #1
 80015ec:	60ba      	str	r2, [r7, #8]
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff fd61 	bl	80010b8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	3301      	adds	r3, #1
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	697a      	ldr	r2, [r7, #20]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	429a      	cmp	r2, r3
 8001602:	dbf1      	blt.n	80015e8 <_write+0x12>
  }
  return len;
 8001604:	687b      	ldr	r3, [r7, #4]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <_close>:

int _close(int file)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001636:	605a      	str	r2, [r3, #4]
  return 0;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <_isatty>:

int _isatty(int file)
{
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800164e:	2301      	movs	r3, #1
}
 8001650:	4618      	mov	r0, r3
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001680:	4a14      	ldr	r2, [pc, #80]	; (80016d4 <_sbrk+0x5c>)
 8001682:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <_sbrk+0x60>)
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800168c:	4b13      	ldr	r3, [pc, #76]	; (80016dc <_sbrk+0x64>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d102      	bne.n	800169a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <_sbrk+0x64>)
 8001696:	4a12      	ldr	r2, [pc, #72]	; (80016e0 <_sbrk+0x68>)
 8001698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800169a:	4b10      	ldr	r3, [pc, #64]	; (80016dc <_sbrk+0x64>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d207      	bcs.n	80016b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a8:	f00e fc94 	bl	800ffd4 <__errno>
 80016ac:	4603      	mov	r3, r0
 80016ae:	220c      	movs	r2, #12
 80016b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016b6:	e009      	b.n	80016cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <_sbrk+0x64>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016be:	4b07      	ldr	r3, [pc, #28]	; (80016dc <_sbrk+0x64>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	4a05      	ldr	r2, [pc, #20]	; (80016dc <_sbrk+0x64>)
 80016c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ca:	68fb      	ldr	r3, [r7, #12]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20080000 	.word	0x20080000
 80016d8:	00000400 	.word	0x00000400
 80016dc:	20002dd0 	.word	0x20002dd0
 80016e0:	20004fb8 	.word	0x20004fb8

080016e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <SystemInit+0x20>)
 80016ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ee:	4a05      	ldr	r2, [pc, #20]	; (8001704 <SystemInit+0x20>)
 80016f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001708:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001740 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800170c:	480d      	ldr	r0, [pc, #52]	; (8001744 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800170e:	490e      	ldr	r1, [pc, #56]	; (8001748 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001710:	4a0e      	ldr	r2, [pc, #56]	; (800174c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001714:	e002      	b.n	800171c <LoopCopyDataInit>

08001716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800171a:	3304      	adds	r3, #4

0800171c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800171c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800171e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001720:	d3f9      	bcc.n	8001716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001722:	4a0b      	ldr	r2, [pc, #44]	; (8001750 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001724:	4c0b      	ldr	r4, [pc, #44]	; (8001754 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001728:	e001      	b.n	800172e <LoopFillZerobss>

0800172a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800172a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800172c:	3204      	adds	r2, #4

0800172e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800172e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001730:	d3fb      	bcc.n	800172a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001732:	f7ff ffd7 	bl	80016e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001736:	f00e fc53 	bl	800ffe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800173a:	f7fe ff4f 	bl	80005dc <main>
  bx  lr    
 800173e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001740:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001748:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 800174c:	08011834 	.word	0x08011834
  ldr r2, =_sbss
 8001750:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8001754:	20004fb4 	.word	0x20004fb4

08001758 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001758:	e7fe      	b.n	8001758 <ADC_IRQHandler>

0800175a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800175e:	2003      	movs	r0, #3
 8001760:	f000 ff50 	bl	8002604 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001764:	2000      	movs	r0, #0
 8001766:	f000 f805 	bl	8001774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800176a:	f7ff fcc9 	bl	8001100 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	bd80      	pop	{r7, pc}

08001774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <HAL_InitTick+0x54>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <HAL_InitTick+0x58>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	4619      	mov	r1, r3
 8001786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800178a:	fbb3 f3f1 	udiv	r3, r3, r1
 800178e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001792:	4618      	mov	r0, r3
 8001794:	f000 ff6b 	bl	800266e <HAL_SYSTICK_Config>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e00e      	b.n	80017c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b0f      	cmp	r3, #15
 80017a6:	d80a      	bhi.n	80017be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a8:	2200      	movs	r2, #0
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017b0:	f000 ff33 	bl	800261a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017b4:	4a06      	ldr	r2, [pc, #24]	; (80017d0 <HAL_InitTick+0x5c>)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
 80017bc:	e000      	b.n	80017c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000000 	.word	0x20000000
 80017cc:	20000008 	.word	0x20000008
 80017d0:	20000004 	.word	0x20000004

080017d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <HAL_IncTick+0x20>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	461a      	mov	r2, r3
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_IncTick+0x24>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4413      	add	r3, r2
 80017e4:	4a04      	ldr	r2, [pc, #16]	; (80017f8 <HAL_IncTick+0x24>)
 80017e6:	6013      	str	r3, [r2, #0]
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	20000008 	.word	0x20000008
 80017f8:	20002dd4 	.word	0x20002dd4

080017fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001800:	4b03      	ldr	r3, [pc, #12]	; (8001810 <HAL_GetTick+0x14>)
 8001802:	681b      	ldr	r3, [r3, #0]
}
 8001804:	4618      	mov	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	20002dd4 	.word	0x20002dd4

08001814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800181c:	f7ff ffee 	bl	80017fc <HAL_GetTick>
 8001820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800182c:	d005      	beq.n	800183a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800182e:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <HAL_Delay+0x44>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	461a      	mov	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4413      	add	r3, r2
 8001838:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800183a:	bf00      	nop
 800183c:	f7ff ffde 	bl	80017fc <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	429a      	cmp	r2, r3
 800184a:	d8f7      	bhi.n	800183c <HAL_Delay+0x28>
  {
  }
}
 800184c:	bf00      	nop
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000008 	.word	0x20000008

0800185c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e0ed      	b.n	8001a4a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d102      	bne.n	8001880 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff fc64 	bl	8001148 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f042 0201 	orr.w	r2, r2, #1
 800188e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001890:	f7ff ffb4 	bl	80017fc <HAL_GetTick>
 8001894:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001896:	e012      	b.n	80018be <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001898:	f7ff ffb0 	bl	80017fc <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b0a      	cmp	r3, #10
 80018a4:	d90b      	bls.n	80018be <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2205      	movs	r2, #5
 80018b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e0c5      	b.n	8001a4a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0e5      	beq.n	8001898 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 0202 	bic.w	r2, r2, #2
 80018da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018dc:	f7ff ff8e 	bl	80017fc <HAL_GetTick>
 80018e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018e2:	e012      	b.n	800190a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018e4:	f7ff ff8a 	bl	80017fc <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b0a      	cmp	r3, #10
 80018f0:	d90b      	bls.n	800190a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2205      	movs	r2, #5
 8001902:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e09f      	b.n	8001a4a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1e5      	bne.n	80018e4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	7e1b      	ldrb	r3, [r3, #24]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d108      	bne.n	8001932 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	e007      	b.n	8001942 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001940:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	7e5b      	ldrb	r3, [r3, #25]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d108      	bne.n	800195c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	e007      	b.n	800196c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800196a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	7e9b      	ldrb	r3, [r3, #26]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d108      	bne.n	8001986 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f042 0220 	orr.w	r2, r2, #32
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	e007      	b.n	8001996 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f022 0220 	bic.w	r2, r2, #32
 8001994:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	7edb      	ldrb	r3, [r3, #27]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d108      	bne.n	80019b0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 0210 	bic.w	r2, r2, #16
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	e007      	b.n	80019c0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f042 0210 	orr.w	r2, r2, #16
 80019be:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	7f1b      	ldrb	r3, [r3, #28]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d108      	bne.n	80019da <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f042 0208 	orr.w	r2, r2, #8
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	e007      	b.n	80019ea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 0208 	bic.w	r2, r2, #8
 80019e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	7f5b      	ldrb	r3, [r3, #29]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d108      	bne.n	8001a04 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f042 0204 	orr.w	r2, r2, #4
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	e007      	b.n	8001a14 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0204 	bic.w	r2, r2, #4
 8001a12:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	ea42 0103 	orr.w	r1, r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	1e5a      	subs	r2, r3, #1
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	430a      	orrs	r2, r1
 8001a38:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b087      	sub	sp, #28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a6a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001a6c:	7cfb      	ldrb	r3, [r7, #19]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d003      	beq.n	8001a7a <HAL_CAN_ConfigFilter+0x26>
 8001a72:	7cfb      	ldrb	r3, [r7, #19]
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	f040 80c7 	bne.w	8001c08 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a69      	ldr	r2, [pc, #420]	; (8001c24 <HAL_CAN_ConfigFilter+0x1d0>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d001      	beq.n	8001a88 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001a84:	4b68      	ldr	r3, [pc, #416]	; (8001c28 <HAL_CAN_ConfigFilter+0x1d4>)
 8001a86:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a8e:	f043 0201 	orr.w	r2, r3, #1
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	4a63      	ldr	r2, [pc, #396]	; (8001c28 <HAL_CAN_ConfigFilter+0x1d4>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d111      	bne.n	8001ac4 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001aa6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aba:	021b      	lsls	r3, r3, #8
 8001abc:	431a      	orrs	r2, r3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	f003 031f 	and.w	r3, r3, #31
 8001acc:	2201      	movs	r2, #1
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	401a      	ands	r2, r3
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d123      	bne.n	8001b36 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	43db      	mvns	r3, r3
 8001af8:	401a      	ands	r2, r3
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b10:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	3248      	adds	r2, #72	; 0x48
 8001b16:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b2a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b2c:	6979      	ldr	r1, [r7, #20]
 8001b2e:	3348      	adds	r3, #72	; 0x48
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	440b      	add	r3, r1
 8001b34:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d122      	bne.n	8001b84 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	431a      	orrs	r2, r3
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b5e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	3248      	adds	r2, #72	; 0x48
 8001b64:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b78:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b7a:	6979      	ldr	r1, [r7, #20]
 8001b7c:	3348      	adds	r3, #72	; 0x48
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	440b      	add	r3, r1
 8001b82:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d109      	bne.n	8001ba0 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	43db      	mvns	r3, r3
 8001b96:	401a      	ands	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001b9e:	e007      	b.n	8001bb0 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d109      	bne.n	8001bcc <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	401a      	ands	r2, r3
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001bca:	e007      	b.n	8001bdc <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d107      	bne.n	8001bf4 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	431a      	orrs	r2, r3
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001bfa:	f023 0201 	bic.w	r2, r3, #1
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	e006      	b.n	8001c16 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
  }
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	371c      	adds	r7, #28
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	40003400 	.word	0x40003400
 8001c28:	40006400 	.word	0x40006400

08001c2c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d12e      	bne.n	8001c9e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2202      	movs	r2, #2
 8001c44:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0201 	bic.w	r2, r2, #1
 8001c56:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c58:	f7ff fdd0 	bl	80017fc <HAL_GetTick>
 8001c5c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c5e:	e012      	b.n	8001c86 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c60:	f7ff fdcc 	bl	80017fc <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b0a      	cmp	r3, #10
 8001c6c:	d90b      	bls.n	8001c86 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2205      	movs	r2, #5
 8001c7e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e012      	b.n	8001cac <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1e5      	bne.n	8001c60 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	e006      	b.n	8001cac <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
  }
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d133      	bne.n	8001d30 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0201 	orr.w	r2, r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001cd8:	f7ff fd90 	bl	80017fc <HAL_GetTick>
 8001cdc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cde:	e012      	b.n	8001d06 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ce0:	f7ff fd8c 	bl	80017fc <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b0a      	cmp	r3, #10
 8001cec:	d90b      	bls.n	8001d06 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2205      	movs	r2, #5
 8001cfe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e01b      	b.n	8001d3e <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0e5      	beq.n	8001ce0 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 0202 	bic.w	r2, r2, #2
 8001d22:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	e006      	b.n	8001d3e <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d34:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
  }
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001d46:	b480      	push	{r7}
 8001d48:	b087      	sub	sp, #28
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	60f8      	str	r0, [r7, #12]
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
 8001d52:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d5a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d5c:	7dfb      	ldrb	r3, [r7, #23]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d003      	beq.n	8001d6a <HAL_CAN_GetRxMessage+0x24>
 8001d62:	7dfb      	ldrb	r3, [r7, #23]
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	f040 80f3 	bne.w	8001f50 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d10e      	bne.n	8001d8e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d116      	bne.n	8001dac <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e0e7      	b.n	8001f5e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d107      	bne.n	8001dac <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e0d8      	b.n	8001f5e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	331b      	adds	r3, #27
 8001db4:	011b      	lsls	r3, r3, #4
 8001db6:	4413      	add	r3, r2
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0204 	and.w	r2, r3, #4
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10c      	bne.n	8001de4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	331b      	adds	r3, #27
 8001dd2:	011b      	lsls	r3, r3, #4
 8001dd4:	4413      	add	r3, r2
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	0d5b      	lsrs	r3, r3, #21
 8001dda:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	e00b      	b.n	8001dfc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	331b      	adds	r3, #27
 8001dec:	011b      	lsls	r3, r3, #4
 8001dee:	4413      	add	r3, r2
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	08db      	lsrs	r3, r3, #3
 8001df4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	331b      	adds	r3, #27
 8001e04:	011b      	lsls	r3, r3, #4
 8001e06:	4413      	add	r3, r2
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0202 	and.w	r2, r3, #2
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	331b      	adds	r3, #27
 8001e1a:	011b      	lsls	r3, r3, #4
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3304      	adds	r3, #4
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 020f 	and.w	r2, r3, #15
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	331b      	adds	r3, #27
 8001e32:	011b      	lsls	r3, r3, #4
 8001e34:	4413      	add	r3, r2
 8001e36:	3304      	adds	r3, #4
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	0a1b      	lsrs	r3, r3, #8
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	331b      	adds	r3, #27
 8001e4a:	011b      	lsls	r3, r3, #4
 8001e4c:	4413      	add	r3, r2
 8001e4e:	3304      	adds	r3, #4
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	0c1b      	lsrs	r3, r3, #16
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	011b      	lsls	r3, r3, #4
 8001e62:	4413      	add	r3, r2
 8001e64:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	011b      	lsls	r3, r3, #4
 8001e78:	4413      	add	r3, r2
 8001e7a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	0a1a      	lsrs	r2, r3, #8
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	3301      	adds	r3, #1
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	011b      	lsls	r3, r3, #4
 8001e92:	4413      	add	r3, r2
 8001e94:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	0c1a      	lsrs	r2, r3, #16
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	3302      	adds	r3, #2
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	011b      	lsls	r3, r3, #4
 8001eac:	4413      	add	r3, r2
 8001eae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	0e1a      	lsrs	r2, r3, #24
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	3303      	adds	r3, #3
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	011b      	lsls	r3, r3, #4
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	011b      	lsls	r3, r3, #4
 8001ede:	4413      	add	r3, r2
 8001ee0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	0a1a      	lsrs	r2, r3, #8
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	3305      	adds	r3, #5
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	011b      	lsls	r3, r3, #4
 8001ef8:	4413      	add	r3, r2
 8001efa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	0c1a      	lsrs	r2, r3, #16
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	3306      	adds	r3, #6
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	011b      	lsls	r3, r3, #4
 8001f12:	4413      	add	r3, r2
 8001f14:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	0e1a      	lsrs	r2, r3, #24
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	3307      	adds	r3, #7
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d108      	bne.n	8001f3c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f042 0220 	orr.w	r2, r2, #32
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	e007      	b.n	8001f4c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	691a      	ldr	r2, [r3, #16]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0220 	orr.w	r2, r2, #32
 8001f4a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	e006      	b.n	8001f5e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
  }
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	371c      	adds	r7, #28
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b085      	sub	sp, #20
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
 8001f72:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f7a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d002      	beq.n	8001f88 <HAL_CAN_ActivateNotification+0x1e>
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d109      	bne.n	8001f9c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6959      	ldr	r1, [r3, #20]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	e006      	b.n	8001faa <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
  }
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b085      	sub	sp, #20
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fc6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d002      	beq.n	8001fd4 <HAL_CAN_DeactivateNotification+0x1e>
 8001fce:	7bfb      	ldrb	r3, [r7, #15]
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d10a      	bne.n	8001fea <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6959      	ldr	r1, [r3, #20]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	43da      	mvns	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	400a      	ands	r2, r1
 8001fe4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	e006      	b.n	8001ff8 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
  }
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08a      	sub	sp, #40	; 0x28
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800200c:	2300      	movs	r3, #0
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002040:	6a3b      	ldr	r3, [r7, #32]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d07c      	beq.n	8002144 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b00      	cmp	r3, #0
 8002052:	d023      	beq.n	800209c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2201      	movs	r2, #1
 800205a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f983 	bl	8002372 <HAL_CAN_TxMailbox0CompleteCallback>
 800206c:	e016      	b.n	800209c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	2b00      	cmp	r3, #0
 8002076:	d004      	beq.n	8002082 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
 8002080:	e00c      	b.n	800209c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	f003 0308 	and.w	r3, r3, #8
 8002088:	2b00      	cmp	r3, #0
 800208a:	d004      	beq.n	8002096 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
 8002094:	e002      	b.n	800209c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f989 	bl	80023ae <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d024      	beq.n	80020f0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020ae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f963 	bl	8002386 <HAL_CAN_TxMailbox1CompleteCallback>
 80020c0:	e016      	b.n	80020f0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d004      	beq.n	80020d6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
 80020d4:	e00c      	b.n	80020f0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d004      	beq.n	80020ea <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
 80020e8:	e002      	b.n	80020f0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f969 	bl	80023c2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d024      	beq.n	8002144 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002102:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f943 	bl	800239a <HAL_CAN_TxMailbox2CompleteCallback>
 8002114:	e016      	b.n	8002144 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d004      	beq.n	800212a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
 8002128:	e00c      	b.n	8002144 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d004      	beq.n	800213e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
 800213c:	e002      	b.n	8002144 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f949 	bl	80023d6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00c      	beq.n	8002168 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f003 0310 	and.w	r3, r3, #16
 8002154:	2b00      	cmp	r3, #0
 8002156:	d007      	beq.n	8002168 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800215e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2210      	movs	r2, #16
 8002166:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002168:	6a3b      	ldr	r3, [r7, #32]
 800216a:	f003 0304 	and.w	r3, r3, #4
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00b      	beq.n	800218a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f003 0308 	and.w	r3, r3, #8
 8002178:	2b00      	cmp	r3, #0
 800217a:	d006      	beq.n	800218a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2208      	movs	r2, #8
 8002182:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 f930 	bl	80023ea <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d009      	beq.n	80021a8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d002      	beq.n	80021a8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7fe ff54 	bl	8001050 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80021a8:	6a3b      	ldr	r3, [r7, #32]
 80021aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00c      	beq.n	80021cc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	f003 0310 	and.w	r3, r3, #16
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d007      	beq.n	80021cc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80021bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021c2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2210      	movs	r2, #16
 80021ca:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80021cc:	6a3b      	ldr	r3, [r7, #32]
 80021ce:	f003 0320 	and.w	r3, r3, #32
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00b      	beq.n	80021ee <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	f003 0308 	and.w	r3, r3, #8
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d006      	beq.n	80021ee <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2208      	movs	r2, #8
 80021e6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 f912 	bl	8002412 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80021ee:	6a3b      	ldr	r3, [r7, #32]
 80021f0:	f003 0310 	and.w	r3, r3, #16
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d009      	beq.n	800220c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d002      	beq.n	800220c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f8f9 	bl	80023fe <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800220c:	6a3b      	ldr	r3, [r7, #32]
 800220e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00b      	beq.n	800222e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	f003 0310 	and.w	r3, r3, #16
 800221c:	2b00      	cmp	r3, #0
 800221e:	d006      	beq.n	800222e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2210      	movs	r2, #16
 8002226:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f8fc 	bl	8002426 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00b      	beq.n	8002250 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	f003 0308 	and.w	r3, r3, #8
 800223e:	2b00      	cmp	r3, #0
 8002240:	d006      	beq.n	8002250 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2208      	movs	r2, #8
 8002248:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f8f5 	bl	800243a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002250:	6a3b      	ldr	r3, [r7, #32]
 8002252:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d07b      	beq.n	8002352 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d072      	beq.n	800234a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002264:	6a3b      	ldr	r3, [r7, #32]
 8002266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226a:	2b00      	cmp	r3, #0
 800226c:	d008      	beq.n	8002280 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002280:	6a3b      	ldr	r3, [r7, #32]
 8002282:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002286:	2b00      	cmp	r3, #0
 8002288:	d008      	beq.n	800229c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	f043 0302 	orr.w	r3, r3, #2
 800229a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d008      	beq.n	80022b8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80022b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b2:	f043 0304 	orr.w	r3, r3, #4
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80022b8:	6a3b      	ldr	r3, [r7, #32]
 80022ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d043      	beq.n	800234a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d03e      	beq.n	800234a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022d2:	2b60      	cmp	r3, #96	; 0x60
 80022d4:	d02b      	beq.n	800232e <HAL_CAN_IRQHandler+0x32a>
 80022d6:	2b60      	cmp	r3, #96	; 0x60
 80022d8:	d82e      	bhi.n	8002338 <HAL_CAN_IRQHandler+0x334>
 80022da:	2b50      	cmp	r3, #80	; 0x50
 80022dc:	d022      	beq.n	8002324 <HAL_CAN_IRQHandler+0x320>
 80022de:	2b50      	cmp	r3, #80	; 0x50
 80022e0:	d82a      	bhi.n	8002338 <HAL_CAN_IRQHandler+0x334>
 80022e2:	2b40      	cmp	r3, #64	; 0x40
 80022e4:	d019      	beq.n	800231a <HAL_CAN_IRQHandler+0x316>
 80022e6:	2b40      	cmp	r3, #64	; 0x40
 80022e8:	d826      	bhi.n	8002338 <HAL_CAN_IRQHandler+0x334>
 80022ea:	2b30      	cmp	r3, #48	; 0x30
 80022ec:	d010      	beq.n	8002310 <HAL_CAN_IRQHandler+0x30c>
 80022ee:	2b30      	cmp	r3, #48	; 0x30
 80022f0:	d822      	bhi.n	8002338 <HAL_CAN_IRQHandler+0x334>
 80022f2:	2b10      	cmp	r3, #16
 80022f4:	d002      	beq.n	80022fc <HAL_CAN_IRQHandler+0x2f8>
 80022f6:	2b20      	cmp	r3, #32
 80022f8:	d005      	beq.n	8002306 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80022fa:	e01d      	b.n	8002338 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	f043 0308 	orr.w	r3, r3, #8
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002304:	e019      	b.n	800233a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	f043 0310 	orr.w	r3, r3, #16
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800230e:	e014      	b.n	800233a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	f043 0320 	orr.w	r3, r3, #32
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002318:	e00f      	b.n	800233a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002322:	e00a      	b.n	800233a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800232c:	e005      	b.n	800233a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002336:	e000      	b.n	800233a <HAL_CAN_IRQHandler+0x336>
            break;
 8002338:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	699a      	ldr	r2, [r3, #24]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002348:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2204      	movs	r2, #4
 8002350:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	2b00      	cmp	r3, #0
 8002356:	d008      	beq.n	800236a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 f872 	bl	800244e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800236a:	bf00      	nop
 800236c:	3728      	adds	r7, #40	; 0x28
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
	...

08002464 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002474:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <__NVIC_SetPriorityGrouping+0x40>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002480:	4013      	ands	r3, r2
 8002482:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <__NVIC_SetPriorityGrouping+0x44>)
 800248e:	4313      	orrs	r3, r2
 8002490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002492:	4a04      	ldr	r2, [pc, #16]	; (80024a4 <__NVIC_SetPriorityGrouping+0x40>)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	60d3      	str	r3, [r2, #12]
}
 8002498:	bf00      	nop
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	e000ed00 	.word	0xe000ed00
 80024a8:	05fa0000 	.word	0x05fa0000

080024ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b0:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <__NVIC_GetPriorityGrouping+0x18>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	0a1b      	lsrs	r3, r3, #8
 80024b6:	f003 0307 	and.w	r3, r3, #7
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	e000ed00 	.word	0xe000ed00

080024c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	db0b      	blt.n	80024f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	f003 021f 	and.w	r2, r3, #31
 80024e0:	4907      	ldr	r1, [pc, #28]	; (8002500 <__NVIC_EnableIRQ+0x38>)
 80024e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e6:	095b      	lsrs	r3, r3, #5
 80024e8:	2001      	movs	r0, #1
 80024ea:	fa00 f202 	lsl.w	r2, r0, r2
 80024ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024f2:	bf00      	nop
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	e000e100 	.word	0xe000e100

08002504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	6039      	str	r1, [r7, #0]
 800250e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002514:	2b00      	cmp	r3, #0
 8002516:	db0a      	blt.n	800252e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	b2da      	uxtb	r2, r3
 800251c:	490c      	ldr	r1, [pc, #48]	; (8002550 <__NVIC_SetPriority+0x4c>)
 800251e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002522:	0112      	lsls	r2, r2, #4
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	440b      	add	r3, r1
 8002528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800252c:	e00a      	b.n	8002544 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	b2da      	uxtb	r2, r3
 8002532:	4908      	ldr	r1, [pc, #32]	; (8002554 <__NVIC_SetPriority+0x50>)
 8002534:	79fb      	ldrb	r3, [r7, #7]
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	3b04      	subs	r3, #4
 800253c:	0112      	lsls	r2, r2, #4
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	440b      	add	r3, r1
 8002542:	761a      	strb	r2, [r3, #24]
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	e000e100 	.word	0xe000e100
 8002554:	e000ed00 	.word	0xe000ed00

08002558 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002558:	b480      	push	{r7}
 800255a:	b089      	sub	sp, #36	; 0x24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f1c3 0307 	rsb	r3, r3, #7
 8002572:	2b04      	cmp	r3, #4
 8002574:	bf28      	it	cs
 8002576:	2304      	movcs	r3, #4
 8002578:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	3304      	adds	r3, #4
 800257e:	2b06      	cmp	r3, #6
 8002580:	d902      	bls.n	8002588 <NVIC_EncodePriority+0x30>
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	3b03      	subs	r3, #3
 8002586:	e000      	b.n	800258a <NVIC_EncodePriority+0x32>
 8002588:	2300      	movs	r3, #0
 800258a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800258c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43da      	mvns	r2, r3
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	401a      	ands	r2, r3
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	fa01 f303 	lsl.w	r3, r1, r3
 80025aa:	43d9      	mvns	r1, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b0:	4313      	orrs	r3, r2
         );
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3724      	adds	r7, #36	; 0x24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
	...

080025c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025d0:	d301      	bcc.n	80025d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025d2:	2301      	movs	r3, #1
 80025d4:	e00f      	b.n	80025f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025d6:	4a0a      	ldr	r2, [pc, #40]	; (8002600 <SysTick_Config+0x40>)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3b01      	subs	r3, #1
 80025dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025de:	210f      	movs	r1, #15
 80025e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025e4:	f7ff ff8e 	bl	8002504 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025e8:	4b05      	ldr	r3, [pc, #20]	; (8002600 <SysTick_Config+0x40>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ee:	4b04      	ldr	r3, [pc, #16]	; (8002600 <SysTick_Config+0x40>)
 80025f0:	2207      	movs	r2, #7
 80025f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	e000e010 	.word	0xe000e010

08002604 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f7ff ff29 	bl	8002464 <__NVIC_SetPriorityGrouping>
}
 8002612:	bf00      	nop
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800261a:	b580      	push	{r7, lr}
 800261c:	b086      	sub	sp, #24
 800261e:	af00      	add	r7, sp, #0
 8002620:	4603      	mov	r3, r0
 8002622:	60b9      	str	r1, [r7, #8]
 8002624:	607a      	str	r2, [r7, #4]
 8002626:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800262c:	f7ff ff3e 	bl	80024ac <__NVIC_GetPriorityGrouping>
 8002630:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	68b9      	ldr	r1, [r7, #8]
 8002636:	6978      	ldr	r0, [r7, #20]
 8002638:	f7ff ff8e 	bl	8002558 <NVIC_EncodePriority>
 800263c:	4602      	mov	r2, r0
 800263e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002642:	4611      	mov	r1, r2
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff ff5d 	bl	8002504 <__NVIC_SetPriority>
}
 800264a:	bf00      	nop
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b082      	sub	sp, #8
 8002656:	af00      	add	r7, sp, #0
 8002658:	4603      	mov	r3, r0
 800265a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800265c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff ff31 	bl	80024c8 <__NVIC_EnableIRQ>
}
 8002666:	bf00      	nop
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7ff ffa2 	bl	80025c0 <SysTick_Config>
 800267c:	4603      	mov	r3, r0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
	...

08002688 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002694:	f7ff f8b2 	bl	80017fc <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e099      	b.n	80027d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2202      	movs	r2, #2
 80026a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 0201 	bic.w	r2, r2, #1
 80026c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026c4:	e00f      	b.n	80026e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026c6:	f7ff f899 	bl	80017fc <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b05      	cmp	r3, #5
 80026d2:	d908      	bls.n	80026e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2220      	movs	r2, #32
 80026d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2203      	movs	r2, #3
 80026de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e078      	b.n	80027d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1e8      	bne.n	80026c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	4b38      	ldr	r3, [pc, #224]	; (80027e0 <HAL_DMA_Init+0x158>)
 8002700:	4013      	ands	r3, r2
 8002702:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002712:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800271e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800272a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	4313      	orrs	r3, r2
 8002736:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	2b04      	cmp	r3, #4
 800273e:	d107      	bne.n	8002750 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	4313      	orrs	r3, r2
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	4313      	orrs	r3, r2
 800274e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f023 0307 	bic.w	r3, r3, #7
 8002766:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	4313      	orrs	r3, r2
 8002770:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	2b04      	cmp	r3, #4
 8002778:	d117      	bne.n	80027aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	4313      	orrs	r3, r2
 8002782:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00e      	beq.n	80027aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 faa5 	bl	8002cdc <DMA_CheckFifoParam>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d008      	beq.n	80027aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2240      	movs	r2, #64	; 0x40
 800279c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80027a6:	2301      	movs	r3, #1
 80027a8:	e016      	b.n	80027d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 fa5c 	bl	8002c70 <DMA_CalcBaseAndBitshift>
 80027b8:	4603      	mov	r3, r0
 80027ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c0:	223f      	movs	r2, #63	; 0x3f
 80027c2:	409a      	lsls	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	e010803f 	.word	0xe010803f

080027e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
 80027f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002802:	2b01      	cmp	r3, #1
 8002804:	d101      	bne.n	800280a <HAL_DMA_Start_IT+0x26>
 8002806:	2302      	movs	r3, #2
 8002808:	e048      	b.n	800289c <HAL_DMA_Start_IT+0xb8>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b01      	cmp	r3, #1
 800281c:	d137      	bne.n	800288e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2202      	movs	r2, #2
 8002822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	68b9      	ldr	r1, [r7, #8]
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 f9ee 	bl	8002c14 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283c:	223f      	movs	r2, #63	; 0x3f
 800283e:	409a      	lsls	r2, r3
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0216 	orr.w	r2, r2, #22
 8002852:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695a      	ldr	r2, [r3, #20]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002862:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	2b00      	cmp	r3, #0
 800286a:	d007      	beq.n	800287c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 0208 	orr.w	r2, r2, #8
 800287a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	e005      	b.n	800289a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002896:	2302      	movs	r3, #2
 8002898:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800289a:	7dfb      	ldrb	r3, [r7, #23]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d004      	beq.n	80028c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2280      	movs	r2, #128	; 0x80
 80028bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e00c      	b.n	80028dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2205      	movs	r2, #5
 80028c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0201 	bic.w	r2, r2, #1
 80028d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80028f0:	2300      	movs	r3, #0
 80028f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80028f4:	4b8e      	ldr	r3, [pc, #568]	; (8002b30 <HAL_DMA_IRQHandler+0x248>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a8e      	ldr	r2, [pc, #568]	; (8002b34 <HAL_DMA_IRQHandler+0x24c>)
 80028fa:	fba2 2303 	umull	r2, r3, r2, r3
 80028fe:	0a9b      	lsrs	r3, r3, #10
 8002900:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002906:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002912:	2208      	movs	r2, #8
 8002914:	409a      	lsls	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4013      	ands	r3, r2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d01a      	beq.n	8002954 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	2b00      	cmp	r3, #0
 800292a:	d013      	beq.n	8002954 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 0204 	bic.w	r2, r2, #4
 800293a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002940:	2208      	movs	r2, #8
 8002942:	409a      	lsls	r2, r3
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294c:	f043 0201 	orr.w	r2, r3, #1
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002958:	2201      	movs	r2, #1
 800295a:	409a      	lsls	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4013      	ands	r3, r2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d012      	beq.n	800298a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00b      	beq.n	800298a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002976:	2201      	movs	r2, #1
 8002978:	409a      	lsls	r2, r3
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002982:	f043 0202 	orr.w	r2, r3, #2
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298e:	2204      	movs	r2, #4
 8002990:	409a      	lsls	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	4013      	ands	r3, r2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d012      	beq.n	80029c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00b      	beq.n	80029c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ac:	2204      	movs	r2, #4
 80029ae:	409a      	lsls	r2, r3
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b8:	f043 0204 	orr.w	r2, r3, #4
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c4:	2210      	movs	r2, #16
 80029c6:	409a      	lsls	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4013      	ands	r3, r2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d043      	beq.n	8002a58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d03c      	beq.n	8002a58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e2:	2210      	movs	r2, #16
 80029e4:	409a      	lsls	r2, r3
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d018      	beq.n	8002a2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d108      	bne.n	8002a18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d024      	beq.n	8002a58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	4798      	blx	r3
 8002a16:	e01f      	b.n	8002a58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d01b      	beq.n	8002a58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	4798      	blx	r3
 8002a28:	e016      	b.n	8002a58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d107      	bne.n	8002a48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0208 	bic.w	r2, r2, #8
 8002a46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d003      	beq.n	8002a58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	409a      	lsls	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4013      	ands	r3, r2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 808f 	beq.w	8002b88 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0310 	and.w	r3, r3, #16
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 8087 	beq.w	8002b88 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7e:	2220      	movs	r2, #32
 8002a80:	409a      	lsls	r2, r3
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b05      	cmp	r3, #5
 8002a90:	d136      	bne.n	8002b00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0216 	bic.w	r2, r2, #22
 8002aa0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695a      	ldr	r2, [r3, #20]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ab0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d103      	bne.n	8002ac2 <HAL_DMA_IRQHandler+0x1da>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d007      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0208 	bic.w	r2, r2, #8
 8002ad0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad6:	223f      	movs	r2, #63	; 0x3f
 8002ad8:	409a      	lsls	r2, r3
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d07e      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	4798      	blx	r3
        }
        return;
 8002afe:	e079      	b.n	8002bf4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d01d      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10d      	bne.n	8002b38 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d031      	beq.n	8002b88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	4798      	blx	r3
 8002b2c:	e02c      	b.n	8002b88 <HAL_DMA_IRQHandler+0x2a0>
 8002b2e:	bf00      	nop
 8002b30:	20000000 	.word	0x20000000
 8002b34:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d023      	beq.n	8002b88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	4798      	blx	r3
 8002b48:	e01e      	b.n	8002b88 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10f      	bne.n	8002b78 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0210 	bic.w	r2, r2, #16
 8002b66:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d032      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d022      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2205      	movs	r2, #5
 8002ba0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0201 	bic.w	r2, r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d307      	bcc.n	8002bd0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f2      	bne.n	8002bb4 <HAL_DMA_IRQHandler+0x2cc>
 8002bce:	e000      	b.n	8002bd2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002bd0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d005      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	4798      	blx	r3
 8002bf2:	e000      	b.n	8002bf6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002bf4:	bf00      	nop
    }
  }
}
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
 8002c20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	2b40      	cmp	r3, #64	; 0x40
 8002c40:	d108      	bne.n	8002c54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c52:	e007      	b.n	8002c64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	60da      	str	r2, [r3, #12]
}
 8002c64:	bf00      	nop
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	3b10      	subs	r3, #16
 8002c80:	4a13      	ldr	r2, [pc, #76]	; (8002cd0 <DMA_CalcBaseAndBitshift+0x60>)
 8002c82:	fba2 2303 	umull	r2, r3, r2, r3
 8002c86:	091b      	lsrs	r3, r3, #4
 8002c88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c8a:	4a12      	ldr	r2, [pc, #72]	; (8002cd4 <DMA_CalcBaseAndBitshift+0x64>)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4413      	add	r3, r2
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	461a      	mov	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	d908      	bls.n	8002cb0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	4b0c      	ldr	r3, [pc, #48]	; (8002cd8 <DMA_CalcBaseAndBitshift+0x68>)
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	1d1a      	adds	r2, r3, #4
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	659a      	str	r2, [r3, #88]	; 0x58
 8002cae:	e006      	b.n	8002cbe <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	4b08      	ldr	r3, [pc, #32]	; (8002cd8 <DMA_CalcBaseAndBitshift+0x68>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	aaaaaaab 	.word	0xaaaaaaab
 8002cd4:	08011294 	.word	0x08011294
 8002cd8:	fffffc00 	.word	0xfffffc00

08002cdc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d11f      	bne.n	8002d36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	d856      	bhi.n	8002daa <DMA_CheckFifoParam+0xce>
 8002cfc:	a201      	add	r2, pc, #4	; (adr r2, 8002d04 <DMA_CheckFifoParam+0x28>)
 8002cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d02:	bf00      	nop
 8002d04:	08002d15 	.word	0x08002d15
 8002d08:	08002d27 	.word	0x08002d27
 8002d0c:	08002d15 	.word	0x08002d15
 8002d10:	08002dab 	.word	0x08002dab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d046      	beq.n	8002dae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d24:	e043      	b.n	8002dae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d2e:	d140      	bne.n	8002db2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d34:	e03d      	b.n	8002db2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d3e:	d121      	bne.n	8002d84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	2b03      	cmp	r3, #3
 8002d44:	d837      	bhi.n	8002db6 <DMA_CheckFifoParam+0xda>
 8002d46:	a201      	add	r2, pc, #4	; (adr r2, 8002d4c <DMA_CheckFifoParam+0x70>)
 8002d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4c:	08002d5d 	.word	0x08002d5d
 8002d50:	08002d63 	.word	0x08002d63
 8002d54:	08002d5d 	.word	0x08002d5d
 8002d58:	08002d75 	.word	0x08002d75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d60:	e030      	b.n	8002dc4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d025      	beq.n	8002dba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d72:	e022      	b.n	8002dba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d7c:	d11f      	bne.n	8002dbe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d82:	e01c      	b.n	8002dbe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d903      	bls.n	8002d92 <DMA_CheckFifoParam+0xb6>
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	d003      	beq.n	8002d98 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d90:	e018      	b.n	8002dc4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	73fb      	strb	r3, [r7, #15]
      break;
 8002d96:	e015      	b.n	8002dc4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00e      	beq.n	8002dc2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	73fb      	strb	r3, [r7, #15]
      break;
 8002da8:	e00b      	b.n	8002dc2 <DMA_CheckFifoParam+0xe6>
      break;
 8002daa:	bf00      	nop
 8002dac:	e00a      	b.n	8002dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8002dae:	bf00      	nop
 8002db0:	e008      	b.n	8002dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8002db2:	bf00      	nop
 8002db4:	e006      	b.n	8002dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8002db6:	bf00      	nop
 8002db8:	e004      	b.n	8002dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8002dba:	bf00      	nop
 8002dbc:	e002      	b.n	8002dc4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002dbe:	bf00      	nop
 8002dc0:	e000      	b.n	8002dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8002dc2:	bf00      	nop
    }
  } 
  
  return status; 
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop

08002dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b089      	sub	sp, #36	; 0x24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002dde:	2300      	movs	r3, #0
 8002de0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002de2:	2300      	movs	r3, #0
 8002de4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002de6:	2300      	movs	r3, #0
 8002de8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002dea:	2300      	movs	r3, #0
 8002dec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002dee:	2300      	movs	r3, #0
 8002df0:	61fb      	str	r3, [r7, #28]
 8002df2:	e175      	b.n	80030e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002df4:	2201      	movs	r2, #1
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	4013      	ands	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	f040 8164 	bne.w	80030da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f003 0303 	and.w	r3, r3, #3
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d005      	beq.n	8002e2a <HAL_GPIO_Init+0x56>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d130      	bne.n	8002e8c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	2203      	movs	r2, #3
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e60:	2201      	movs	r2, #1
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	091b      	lsrs	r3, r3, #4
 8002e76:	f003 0201 	and.w	r2, r3, #1
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 0303 	and.w	r3, r3, #3
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d017      	beq.n	8002ec8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	2203      	movs	r2, #3
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4013      	ands	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f003 0303 	and.w	r3, r3, #3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d123      	bne.n	8002f1c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	08da      	lsrs	r2, r3, #3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3208      	adds	r2, #8
 8002edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	220f      	movs	r2, #15
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	691a      	ldr	r2, [r3, #16]
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	08da      	lsrs	r2, r3, #3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	3208      	adds	r2, #8
 8002f16:	69b9      	ldr	r1, [r7, #24]
 8002f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	2203      	movs	r2, #3
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4013      	ands	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f003 0203 	and.w	r2, r3, #3
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 80be 	beq.w	80030da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f5e:	4b66      	ldr	r3, [pc, #408]	; (80030f8 <HAL_GPIO_Init+0x324>)
 8002f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f62:	4a65      	ldr	r2, [pc, #404]	; (80030f8 <HAL_GPIO_Init+0x324>)
 8002f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f68:	6453      	str	r3, [r2, #68]	; 0x44
 8002f6a:	4b63      	ldr	r3, [pc, #396]	; (80030f8 <HAL_GPIO_Init+0x324>)
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f76:	4a61      	ldr	r2, [pc, #388]	; (80030fc <HAL_GPIO_Init+0x328>)
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	089b      	lsrs	r3, r3, #2
 8002f7c:	3302      	adds	r3, #2
 8002f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	220f      	movs	r2, #15
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43db      	mvns	r3, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4013      	ands	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a58      	ldr	r2, [pc, #352]	; (8003100 <HAL_GPIO_Init+0x32c>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d037      	beq.n	8003012 <HAL_GPIO_Init+0x23e>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a57      	ldr	r2, [pc, #348]	; (8003104 <HAL_GPIO_Init+0x330>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d031      	beq.n	800300e <HAL_GPIO_Init+0x23a>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a56      	ldr	r2, [pc, #344]	; (8003108 <HAL_GPIO_Init+0x334>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d02b      	beq.n	800300a <HAL_GPIO_Init+0x236>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a55      	ldr	r2, [pc, #340]	; (800310c <HAL_GPIO_Init+0x338>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d025      	beq.n	8003006 <HAL_GPIO_Init+0x232>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a54      	ldr	r2, [pc, #336]	; (8003110 <HAL_GPIO_Init+0x33c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d01f      	beq.n	8003002 <HAL_GPIO_Init+0x22e>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a53      	ldr	r2, [pc, #332]	; (8003114 <HAL_GPIO_Init+0x340>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d019      	beq.n	8002ffe <HAL_GPIO_Init+0x22a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a52      	ldr	r2, [pc, #328]	; (8003118 <HAL_GPIO_Init+0x344>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d013      	beq.n	8002ffa <HAL_GPIO_Init+0x226>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a51      	ldr	r2, [pc, #324]	; (800311c <HAL_GPIO_Init+0x348>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00d      	beq.n	8002ff6 <HAL_GPIO_Init+0x222>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a50      	ldr	r2, [pc, #320]	; (8003120 <HAL_GPIO_Init+0x34c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d007      	beq.n	8002ff2 <HAL_GPIO_Init+0x21e>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a4f      	ldr	r2, [pc, #316]	; (8003124 <HAL_GPIO_Init+0x350>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d101      	bne.n	8002fee <HAL_GPIO_Init+0x21a>
 8002fea:	2309      	movs	r3, #9
 8002fec:	e012      	b.n	8003014 <HAL_GPIO_Init+0x240>
 8002fee:	230a      	movs	r3, #10
 8002ff0:	e010      	b.n	8003014 <HAL_GPIO_Init+0x240>
 8002ff2:	2308      	movs	r3, #8
 8002ff4:	e00e      	b.n	8003014 <HAL_GPIO_Init+0x240>
 8002ff6:	2307      	movs	r3, #7
 8002ff8:	e00c      	b.n	8003014 <HAL_GPIO_Init+0x240>
 8002ffa:	2306      	movs	r3, #6
 8002ffc:	e00a      	b.n	8003014 <HAL_GPIO_Init+0x240>
 8002ffe:	2305      	movs	r3, #5
 8003000:	e008      	b.n	8003014 <HAL_GPIO_Init+0x240>
 8003002:	2304      	movs	r3, #4
 8003004:	e006      	b.n	8003014 <HAL_GPIO_Init+0x240>
 8003006:	2303      	movs	r3, #3
 8003008:	e004      	b.n	8003014 <HAL_GPIO_Init+0x240>
 800300a:	2302      	movs	r3, #2
 800300c:	e002      	b.n	8003014 <HAL_GPIO_Init+0x240>
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <HAL_GPIO_Init+0x240>
 8003012:	2300      	movs	r3, #0
 8003014:	69fa      	ldr	r2, [r7, #28]
 8003016:	f002 0203 	and.w	r2, r2, #3
 800301a:	0092      	lsls	r2, r2, #2
 800301c:	4093      	lsls	r3, r2
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4313      	orrs	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003024:	4935      	ldr	r1, [pc, #212]	; (80030fc <HAL_GPIO_Init+0x328>)
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	089b      	lsrs	r3, r3, #2
 800302a:	3302      	adds	r3, #2
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003032:	4b3d      	ldr	r3, [pc, #244]	; (8003128 <HAL_GPIO_Init+0x354>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	43db      	mvns	r3, r3
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4013      	ands	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	4313      	orrs	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003056:	4a34      	ldr	r2, [pc, #208]	; (8003128 <HAL_GPIO_Init+0x354>)
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800305c:	4b32      	ldr	r3, [pc, #200]	; (8003128 <HAL_GPIO_Init+0x354>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	43db      	mvns	r3, r3
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	4013      	ands	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d003      	beq.n	8003080 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	4313      	orrs	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003080:	4a29      	ldr	r2, [pc, #164]	; (8003128 <HAL_GPIO_Init+0x354>)
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003086:	4b28      	ldr	r3, [pc, #160]	; (8003128 <HAL_GPIO_Init+0x354>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	43db      	mvns	r3, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4013      	ands	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030aa:	4a1f      	ldr	r2, [pc, #124]	; (8003128 <HAL_GPIO_Init+0x354>)
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030b0:	4b1d      	ldr	r3, [pc, #116]	; (8003128 <HAL_GPIO_Init+0x354>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	43db      	mvns	r3, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4013      	ands	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030d4:	4a14      	ldr	r2, [pc, #80]	; (8003128 <HAL_GPIO_Init+0x354>)
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	3301      	adds	r3, #1
 80030de:	61fb      	str	r3, [r7, #28]
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	2b0f      	cmp	r3, #15
 80030e4:	f67f ae86 	bls.w	8002df4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80030e8:	bf00      	nop
 80030ea:	bf00      	nop
 80030ec:	3724      	adds	r7, #36	; 0x24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	40023800 	.word	0x40023800
 80030fc:	40013800 	.word	0x40013800
 8003100:	40020000 	.word	0x40020000
 8003104:	40020400 	.word	0x40020400
 8003108:	40020800 	.word	0x40020800
 800310c:	40020c00 	.word	0x40020c00
 8003110:	40021000 	.word	0x40021000
 8003114:	40021400 	.word	0x40021400
 8003118:	40021800 	.word	0x40021800
 800311c:	40021c00 	.word	0x40021c00
 8003120:	40022000 	.word	0x40022000
 8003124:	40022400 	.word	0x40022400
 8003128:	40013c00 	.word	0x40013c00

0800312c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	460b      	mov	r3, r1
 8003136:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	691a      	ldr	r2, [r3, #16]
 800313c:	887b      	ldrh	r3, [r7, #2]
 800313e:	4013      	ands	r3, r2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d002      	beq.n	800314a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003144:	2301      	movs	r3, #1
 8003146:	73fb      	strb	r3, [r7, #15]
 8003148:	e001      	b.n	800314e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800314a:	2300      	movs	r3, #0
 800314c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800314e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	460b      	mov	r3, r1
 8003166:	807b      	strh	r3, [r7, #2]
 8003168:	4613      	mov	r3, r2
 800316a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800316c:	787b      	ldrb	r3, [r7, #1]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003172:	887a      	ldrh	r2, [r7, #2]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003178:	e003      	b.n	8003182 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800317a:	887b      	ldrh	r3, [r7, #2]
 800317c:	041a      	lsls	r2, r3, #16
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	619a      	str	r2, [r3, #24]
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
	...

08003190 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800319a:	4b08      	ldr	r3, [pc, #32]	; (80031bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800319c:	695a      	ldr	r2, [r3, #20]
 800319e:	88fb      	ldrh	r3, [r7, #6]
 80031a0:	4013      	ands	r3, r2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d006      	beq.n	80031b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031a6:	4a05      	ldr	r2, [pc, #20]	; (80031bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031a8:	88fb      	ldrh	r3, [r7, #6]
 80031aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031ac:	88fb      	ldrh	r3, [r7, #6]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 f806 	bl	80031c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80031b4:	bf00      	nop
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40013c00 	.word	0x40013c00

080031c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	4603      	mov	r3, r0
 80031c8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031d8:	b08f      	sub	sp, #60	; 0x3c
 80031da:	af0a      	add	r7, sp, #40	; 0x28
 80031dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e116      	b.n	8003416 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d106      	bne.n	8003208 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f00c f8a4 	bl	800f350 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2203      	movs	r2, #3
 800320c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003218:	2b00      	cmp	r3, #0
 800321a:	d102      	bne.n	8003222 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f004 ffdb 	bl	80081e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	603b      	str	r3, [r7, #0]
 8003232:	687e      	ldr	r6, [r7, #4]
 8003234:	466d      	mov	r5, sp
 8003236:	f106 0410 	add.w	r4, r6, #16
 800323a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800323c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800323e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003240:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003242:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003246:	e885 0003 	stmia.w	r5, {r0, r1}
 800324a:	1d33      	adds	r3, r6, #4
 800324c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800324e:	6838      	ldr	r0, [r7, #0]
 8003250:	f004 febc 	bl	8007fcc <USB_CoreInit>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d005      	beq.n	8003266 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2202      	movs	r2, #2
 800325e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e0d7      	b.n	8003416 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2100      	movs	r1, #0
 800326c:	4618      	mov	r0, r3
 800326e:	f004 ffc9 	bl	8008204 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003272:	2300      	movs	r3, #0
 8003274:	73fb      	strb	r3, [r7, #15]
 8003276:	e04a      	b.n	800330e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003278:	7bfa      	ldrb	r2, [r7, #15]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	4413      	add	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	333d      	adds	r3, #61	; 0x3d
 8003288:	2201      	movs	r2, #1
 800328a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800328c:	7bfa      	ldrb	r2, [r7, #15]
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	4613      	mov	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4413      	add	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	333c      	adds	r3, #60	; 0x3c
 800329c:	7bfa      	ldrb	r2, [r7, #15]
 800329e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032a0:	7bfa      	ldrb	r2, [r7, #15]
 80032a2:	7bfb      	ldrb	r3, [r7, #15]
 80032a4:	b298      	uxth	r0, r3
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	4413      	add	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	3344      	adds	r3, #68	; 0x44
 80032b4:	4602      	mov	r2, r0
 80032b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032b8:	7bfa      	ldrb	r2, [r7, #15]
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	4413      	add	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	3340      	adds	r3, #64	; 0x40
 80032c8:	2200      	movs	r2, #0
 80032ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032cc:	7bfa      	ldrb	r2, [r7, #15]
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	4613      	mov	r3, r2
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	4413      	add	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	3348      	adds	r3, #72	; 0x48
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032e0:	7bfa      	ldrb	r2, [r7, #15]
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	4613      	mov	r3, r2
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	4413      	add	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	334c      	adds	r3, #76	; 0x4c
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032f4:	7bfa      	ldrb	r2, [r7, #15]
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	4613      	mov	r3, r2
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	4413      	add	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	440b      	add	r3, r1
 8003302:	3354      	adds	r3, #84	; 0x54
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003308:	7bfb      	ldrb	r3, [r7, #15]
 800330a:	3301      	adds	r3, #1
 800330c:	73fb      	strb	r3, [r7, #15]
 800330e:	7bfa      	ldrb	r2, [r7, #15]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	429a      	cmp	r2, r3
 8003316:	d3af      	bcc.n	8003278 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003318:	2300      	movs	r3, #0
 800331a:	73fb      	strb	r3, [r7, #15]
 800331c:	e044      	b.n	80033a8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800331e:	7bfa      	ldrb	r2, [r7, #15]
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	4613      	mov	r3, r2
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	4413      	add	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	440b      	add	r3, r1
 800332c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003330:	2200      	movs	r2, #0
 8003332:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003334:	7bfa      	ldrb	r2, [r7, #15]
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	4613      	mov	r3, r2
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	4413      	add	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003346:	7bfa      	ldrb	r2, [r7, #15]
 8003348:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800334a:	7bfa      	ldrb	r2, [r7, #15]
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	4613      	mov	r3, r2
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	4413      	add	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	440b      	add	r3, r1
 8003358:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800335c:	2200      	movs	r2, #0
 800335e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003360:	7bfa      	ldrb	r2, [r7, #15]
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	4613      	mov	r3, r2
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	4413      	add	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003372:	2200      	movs	r2, #0
 8003374:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003376:	7bfa      	ldrb	r2, [r7, #15]
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	4613      	mov	r3, r2
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	4413      	add	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	440b      	add	r3, r1
 8003384:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800338c:	7bfa      	ldrb	r2, [r7, #15]
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	4613      	mov	r3, r2
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	4413      	add	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033a2:	7bfb      	ldrb	r3, [r7, #15]
 80033a4:	3301      	adds	r3, #1
 80033a6:	73fb      	strb	r3, [r7, #15]
 80033a8:	7bfa      	ldrb	r2, [r7, #15]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d3b5      	bcc.n	800331e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	603b      	str	r3, [r7, #0]
 80033b8:	687e      	ldr	r6, [r7, #4]
 80033ba:	466d      	mov	r5, sp
 80033bc:	f106 0410 	add.w	r4, r6, #16
 80033c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80033d0:	1d33      	adds	r3, r6, #4
 80033d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033d4:	6838      	ldr	r0, [r7, #0]
 80033d6:	f004 ff61 	bl	800829c <USB_DevInit>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d005      	beq.n	80033ec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e014      	b.n	8003416 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	2b01      	cmp	r3, #1
 8003402:	d102      	bne.n	800340a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f001 f97b 	bl	8004700 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f006 f8af 	bl	8009572 <USB_DevDisconnect>

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800341e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b082      	sub	sp, #8
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800342c:	2b01      	cmp	r3, #1
 800342e:	d101      	bne.n	8003434 <HAL_PCD_Start+0x16>
 8003430:	2302      	movs	r3, #2
 8003432:	e012      	b.n	800345a <HAL_PCD_Start+0x3c>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f004 febd 	bl	80081c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f006 f870 	bl	8009530 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003462:	b590      	push	{r4, r7, lr}
 8003464:	b08d      	sub	sp, #52	; 0x34
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f006 f92e 	bl	80096da <USB_GetMode>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	f040 84b7 	bne.w	8003df4 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f006 f892 	bl	80095b4 <USB_ReadInterrupts>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 84ad 	beq.w	8003df2 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	0a1b      	lsrs	r3, r3, #8
 80034a2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f006 f87f 	bl	80095b4 <USB_ReadInterrupts>
 80034b6:	4603      	mov	r3, r0
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d107      	bne.n	80034d0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	695a      	ldr	r2, [r3, #20]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f002 0202 	and.w	r2, r2, #2
 80034ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f006 f86d 	bl	80095b4 <USB_ReadInterrupts>
 80034da:	4603      	mov	r3, r0
 80034dc:	f003 0310 	and.w	r3, r3, #16
 80034e0:	2b10      	cmp	r3, #16
 80034e2:	d161      	bne.n	80035a8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	699a      	ldr	r2, [r3, #24]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0210 	bic.w	r2, r2, #16
 80034f2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	f003 020f 	and.w	r2, r3, #15
 8003500:	4613      	mov	r3, r2
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	4413      	add	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	4413      	add	r3, r2
 8003510:	3304      	adds	r3, #4
 8003512:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	0c5b      	lsrs	r3, r3, #17
 8003518:	f003 030f 	and.w	r3, r3, #15
 800351c:	2b02      	cmp	r3, #2
 800351e:	d124      	bne.n	800356a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003526:	4013      	ands	r3, r2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d035      	beq.n	8003598 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	091b      	lsrs	r3, r3, #4
 8003534:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003536:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800353a:	b29b      	uxth	r3, r3
 800353c:	461a      	mov	r2, r3
 800353e:	6a38      	ldr	r0, [r7, #32]
 8003540:	f005 fea4 	bl	800928c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	691a      	ldr	r2, [r3, #16]
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	091b      	lsrs	r3, r3, #4
 800354c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003550:	441a      	add	r2, r3
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	6a1a      	ldr	r2, [r3, #32]
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	091b      	lsrs	r3, r3, #4
 800355e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003562:	441a      	add	r2, r3
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	621a      	str	r2, [r3, #32]
 8003568:	e016      	b.n	8003598 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	0c5b      	lsrs	r3, r3, #17
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	2b06      	cmp	r3, #6
 8003574:	d110      	bne.n	8003598 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800357c:	2208      	movs	r2, #8
 800357e:	4619      	mov	r1, r3
 8003580:	6a38      	ldr	r0, [r7, #32]
 8003582:	f005 fe83 	bl	800928c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	6a1a      	ldr	r2, [r3, #32]
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	091b      	lsrs	r3, r3, #4
 800358e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003592:	441a      	add	r2, r3
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	699a      	ldr	r2, [r3, #24]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 0210 	orr.w	r2, r2, #16
 80035a6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f006 f801 	bl	80095b4 <USB_ReadInterrupts>
 80035b2:	4603      	mov	r3, r0
 80035b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80035bc:	f040 80a7 	bne.w	800370e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f006 f806 	bl	80095da <USB_ReadDevAllOutEpInterrupt>
 80035ce:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80035d0:	e099      	b.n	8003706 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80035d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 808e 	beq.w	80036fa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	4611      	mov	r1, r2
 80035e8:	4618      	mov	r0, r3
 80035ea:	f006 f82a 	bl	8009642 <USB_ReadDevOutEPInterrupt>
 80035ee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00c      	beq.n	8003614 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	015a      	lsls	r2, r3, #5
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	4413      	add	r3, r2
 8003602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003606:	461a      	mov	r2, r3
 8003608:	2301      	movs	r3, #1
 800360a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800360c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 fef0 	bl	80043f4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00c      	beq.n	8003638 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	015a      	lsls	r2, r3, #5
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	4413      	add	r3, r2
 8003626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800362a:	461a      	mov	r2, r3
 800362c:	2308      	movs	r3, #8
 800362e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003630:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 ffc6 	bl	80045c4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	f003 0310 	and.w	r3, r3, #16
 800363e:	2b00      	cmp	r3, #0
 8003640:	d008      	beq.n	8003654 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	015a      	lsls	r2, r3, #5
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	4413      	add	r3, r2
 800364a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800364e:	461a      	mov	r2, r3
 8003650:	2310      	movs	r3, #16
 8003652:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d030      	beq.n	80036c0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003666:	2b80      	cmp	r3, #128	; 0x80
 8003668:	d109      	bne.n	800367e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	69fa      	ldr	r2, [r7, #28]
 8003674:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003678:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800367c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800367e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003680:	4613      	mov	r3, r2
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	4413      	add	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	4413      	add	r3, r2
 8003690:	3304      	adds	r3, #4
 8003692:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	78db      	ldrb	r3, [r3, #3]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d108      	bne.n	80036ae <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	2200      	movs	r2, #0
 80036a0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	4619      	mov	r1, r3
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f00b ff75 	bl	800f598 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	015a      	lsls	r2, r3, #5
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	4413      	add	r3, r2
 80036b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ba:	461a      	mov	r2, r3
 80036bc:	2302      	movs	r3, #2
 80036be:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	f003 0320 	and.w	r3, r3, #32
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d008      	beq.n	80036dc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	015a      	lsls	r2, r3, #5
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	4413      	add	r3, r2
 80036d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036d6:	461a      	mov	r2, r3
 80036d8:	2320      	movs	r3, #32
 80036da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d009      	beq.n	80036fa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	015a      	lsls	r2, r3, #5
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	4413      	add	r3, r2
 80036ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036f2:	461a      	mov	r2, r3
 80036f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036f8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	3301      	adds	r3, #1
 80036fe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003702:	085b      	lsrs	r3, r3, #1
 8003704:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003708:	2b00      	cmp	r3, #0
 800370a:	f47f af62 	bne.w	80035d2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f005 ff4e 	bl	80095b4 <USB_ReadInterrupts>
 8003718:	4603      	mov	r3, r0
 800371a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800371e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003722:	f040 80db 	bne.w	80038dc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f005 ff6f 	bl	800960e <USB_ReadDevAllInEpInterrupt>
 8003730:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003732:	2300      	movs	r3, #0
 8003734:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003736:	e0cd      	b.n	80038d4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 80c2 	beq.w	80038c8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	4611      	mov	r1, r2
 800374e:	4618      	mov	r0, r3
 8003750:	f005 ff95 	bl	800967e <USB_ReadDevInEPInterrupt>
 8003754:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	d057      	beq.n	8003810 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	2201      	movs	r2, #1
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003774:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	43db      	mvns	r3, r3
 800377a:	69f9      	ldr	r1, [r7, #28]
 800377c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003780:	4013      	ands	r3, r2
 8003782:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	4413      	add	r3, r2
 800378c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003790:	461a      	mov	r2, r3
 8003792:	2301      	movs	r3, #1
 8003794:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d132      	bne.n	8003804 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a2:	4613      	mov	r3, r2
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	4413      	add	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	440b      	add	r3, r1
 80037ac:	334c      	adds	r3, #76	; 0x4c
 80037ae:	6819      	ldr	r1, [r3, #0]
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b4:	4613      	mov	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	4413      	add	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4403      	add	r3, r0
 80037be:	3348      	adds	r3, #72	; 0x48
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4419      	add	r1, r3
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037c8:	4613      	mov	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	4413      	add	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4403      	add	r3, r0
 80037d2:	334c      	adds	r3, #76	; 0x4c
 80037d4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d113      	bne.n	8003804 <HAL_PCD_IRQHandler+0x3a2>
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037e0:	4613      	mov	r3, r2
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	4413      	add	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	3354      	adds	r3, #84	; 0x54
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d108      	bne.n	8003804 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6818      	ldr	r0, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037fc:	461a      	mov	r2, r3
 80037fe:	2101      	movs	r1, #1
 8003800:	f005 ff9e 	bl	8009740 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	b2db      	uxtb	r3, r3
 8003808:	4619      	mov	r1, r3
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f00b fe3f 	bl	800f48e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	f003 0308 	and.w	r3, r3, #8
 8003816:	2b00      	cmp	r3, #0
 8003818:	d008      	beq.n	800382c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381c:	015a      	lsls	r2, r3, #5
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	4413      	add	r3, r2
 8003822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003826:	461a      	mov	r2, r3
 8003828:	2308      	movs	r3, #8
 800382a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	f003 0310 	and.w	r3, r3, #16
 8003832:	2b00      	cmp	r3, #0
 8003834:	d008      	beq.n	8003848 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	015a      	lsls	r2, r3, #5
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	4413      	add	r3, r2
 800383e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003842:	461a      	mov	r2, r3
 8003844:	2310      	movs	r3, #16
 8003846:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384e:	2b00      	cmp	r3, #0
 8003850:	d008      	beq.n	8003864 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	015a      	lsls	r2, r3, #5
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	4413      	add	r3, r2
 800385a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800385e:	461a      	mov	r2, r3
 8003860:	2340      	movs	r3, #64	; 0x40
 8003862:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d023      	beq.n	80038b6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800386e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003870:	6a38      	ldr	r0, [r7, #32]
 8003872:	f004 fe71 	bl	8008558 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003878:	4613      	mov	r3, r2
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	4413      	add	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	3338      	adds	r3, #56	; 0x38
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	4413      	add	r3, r2
 8003886:	3304      	adds	r3, #4
 8003888:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	78db      	ldrb	r3, [r3, #3]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d108      	bne.n	80038a4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2200      	movs	r2, #0
 8003896:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	b2db      	uxtb	r3, r3
 800389c:	4619      	mov	r1, r3
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f00b fe8c 	bl	800f5bc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	015a      	lsls	r2, r3, #5
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038b0:	461a      	mov	r2, r3
 80038b2:	2302      	movs	r3, #2
 80038b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80038c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 fd08 	bl	80042d8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	3301      	adds	r3, #1
 80038cc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80038ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d0:	085b      	lsrs	r3, r3, #1
 80038d2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80038d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f47f af2e 	bne.w	8003738 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f005 fe67 	bl	80095b4 <USB_ReadInterrupts>
 80038e6:	4603      	mov	r3, r0
 80038e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038f0:	d122      	bne.n	8003938 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	69fa      	ldr	r2, [r7, #28]
 80038fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003900:	f023 0301 	bic.w	r3, r3, #1
 8003904:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800390c:	2b01      	cmp	r3, #1
 800390e:	d108      	bne.n	8003922 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003918:	2100      	movs	r1, #0
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f00c f806 	bl	800f92c <HAL_PCDEx_LPM_Callback>
 8003920:	e002      	b.n	8003928 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f00b fe2a 	bl	800f57c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695a      	ldr	r2, [r3, #20]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003936:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4618      	mov	r0, r3
 800393e:	f005 fe39 	bl	80095b4 <USB_ReadInterrupts>
 8003942:	4603      	mov	r3, r0
 8003944:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800394c:	d112      	bne.n	8003974 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b01      	cmp	r3, #1
 800395c:	d102      	bne.n	8003964 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f00b fde6 	bl	800f530 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695a      	ldr	r2, [r3, #20]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003972:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4618      	mov	r0, r3
 800397a:	f005 fe1b 	bl	80095b4 <USB_ReadInterrupts>
 800397e:	4603      	mov	r3, r0
 8003980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003984:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003988:	d121      	bne.n	80039ce <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	695a      	ldr	r2, [r3, #20]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003998:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d111      	bne.n	80039c8 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b2:	089b      	lsrs	r3, r3, #2
 80039b4:	f003 020f 	and.w	r2, r3, #15
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80039be:	2101      	movs	r1, #1
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f00b ffb3 	bl	800f92c <HAL_PCDEx_LPM_Callback>
 80039c6:	e002      	b.n	80039ce <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f00b fdb1 	bl	800f530 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f005 fdee 	bl	80095b4 <USB_ReadInterrupts>
 80039d8:	4603      	mov	r3, r0
 80039da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e2:	f040 80b7 	bne.w	8003b54 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	69fa      	ldr	r2, [r7, #28]
 80039f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039f4:	f023 0301 	bic.w	r3, r3, #1
 80039f8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2110      	movs	r1, #16
 8003a00:	4618      	mov	r0, r3
 8003a02:	f004 fda9 	bl	8008558 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a06:	2300      	movs	r3, #0
 8003a08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a0a:	e046      	b.n	8003a9a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0e:	015a      	lsls	r2, r3, #5
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	4413      	add	r3, r2
 8003a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a18:	461a      	mov	r2, r3
 8003a1a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a1e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a30:	0151      	lsls	r1, r2, #5
 8003a32:	69fa      	ldr	r2, [r7, #28]
 8003a34:	440a      	add	r2, r1
 8003a36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a3e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a42:	015a      	lsls	r2, r3, #5
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	4413      	add	r3, r2
 8003a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a52:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a56:	015a      	lsls	r2, r3, #5
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a64:	0151      	lsls	r1, r2, #5
 8003a66:	69fa      	ldr	r2, [r7, #28]
 8003a68:	440a      	add	r2, r1
 8003a6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a72:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a76:	015a      	lsls	r2, r3, #5
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a84:	0151      	lsls	r1, r2, #5
 8003a86:	69fa      	ldr	r2, [r7, #28]
 8003a88:	440a      	add	r2, r1
 8003a8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a92:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a96:	3301      	adds	r3, #1
 8003a98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d3b3      	bcc.n	8003a0c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	69fa      	ldr	r2, [r7, #28]
 8003aae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ab2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003ab6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d016      	beq.n	8003aee <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aca:	69fa      	ldr	r2, [r7, #28]
 8003acc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ad0:	f043 030b 	orr.w	r3, r3, #11
 8003ad4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae0:	69fa      	ldr	r2, [r7, #28]
 8003ae2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ae6:	f043 030b 	orr.w	r3, r3, #11
 8003aea:	6453      	str	r3, [r2, #68]	; 0x44
 8003aec:	e015      	b.n	8003b1a <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003af4:	695a      	ldr	r2, [r3, #20]
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003afc:	4619      	mov	r1, r3
 8003afe:	f242 032b 	movw	r3, #8235	; 0x202b
 8003b02:	4313      	orrs	r3, r2
 8003b04:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	69fa      	ldr	r2, [r7, #28]
 8003b10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b14:	f043 030b 	orr.w	r3, r3, #11
 8003b18:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69fa      	ldr	r2, [r7, #28]
 8003b24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b28:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003b2c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6818      	ldr	r0, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003b3e:	461a      	mov	r2, r3
 8003b40:	f005 fdfe 	bl	8009740 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	695a      	ldr	r2, [r3, #20]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003b52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f005 fd2b 	bl	80095b4 <USB_ReadInterrupts>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b68:	d124      	bne.n	8003bb4 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f005 fdc2 	bl	80096f8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f004 fd6a 	bl	8008652 <USB_GetDevSpeed>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	461a      	mov	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681c      	ldr	r4, [r3, #0]
 8003b8a:	f001 fa7d 	bl	8005088 <HAL_RCC_GetHCLKFreq>
 8003b8e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	461a      	mov	r2, r3
 8003b98:	4620      	mov	r0, r4
 8003b9a:	f004 fa6f 	bl	800807c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f00b fc9d 	bl	800f4de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	695a      	ldr	r2, [r3, #20]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003bb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f005 fcfb 	bl	80095b4 <USB_ReadInterrupts>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d10a      	bne.n	8003bde <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f00b fc7a 	bl	800f4c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	695a      	ldr	r2, [r3, #20]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f002 0208 	and.w	r2, r2, #8
 8003bdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f005 fce6 	bl	80095b4 <USB_ReadInterrupts>
 8003be8:	4603      	mov	r3, r0
 8003bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bee:	2b80      	cmp	r3, #128	; 0x80
 8003bf0:	d122      	bne.n	8003c38 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003bf2:	6a3b      	ldr	r3, [r7, #32]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bfe:	2301      	movs	r3, #1
 8003c00:	627b      	str	r3, [r7, #36]	; 0x24
 8003c02:	e014      	b.n	8003c2e <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c08:	4613      	mov	r3, r2
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	4413      	add	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d105      	bne.n	8003c28 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	4619      	mov	r1, r3
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 fb27 	bl	8004276 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d3e5      	bcc.n	8003c04 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f005 fcb9 	bl	80095b4 <USB_ReadInterrupts>
 8003c42:	4603      	mov	r3, r0
 8003c44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c4c:	d13b      	bne.n	8003cc6 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c4e:	2301      	movs	r3, #1
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
 8003c52:	e02b      	b.n	8003cac <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c68:	4613      	mov	r3, r2
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	4413      	add	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	3340      	adds	r3, #64	; 0x40
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d115      	bne.n	8003ca6 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003c7a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	da12      	bge.n	8003ca6 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003c80:	6879      	ldr	r1, [r7, #4]
 8003c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c84:	4613      	mov	r3, r2
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	4413      	add	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	333f      	adds	r3, #63	; 0x3f
 8003c90:	2201      	movs	r2, #1
 8003c92:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 fae8 	bl	8004276 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	3301      	adds	r3, #1
 8003caa:	627b      	str	r3, [r7, #36]	; 0x24
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d3ce      	bcc.n	8003c54 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	695a      	ldr	r2, [r3, #20]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003cc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f005 fc72 	bl	80095b4 <USB_ReadInterrupts>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cda:	d155      	bne.n	8003d88 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cdc:	2301      	movs	r3, #1
 8003cde:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce0:	e045      	b.n	8003d6e <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	015a      	lsls	r2, r3, #5
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	4413      	add	r3, r2
 8003cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	4413      	add	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	440b      	add	r3, r1
 8003d00:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d12e      	bne.n	8003d68 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003d0a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	da2b      	bge.n	8003d68 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003d1c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d121      	bne.n	8003d68 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d28:	4613      	mov	r3, r2
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	4413      	add	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	440b      	add	r3, r1
 8003d32:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003d36:	2201      	movs	r2, #1
 8003d38:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003d46:	6a3b      	ldr	r3, [r7, #32]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10a      	bne.n	8003d68 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	69fa      	ldr	r2, [r7, #28]
 8003d5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d64:	6053      	str	r3, [r2, #4]
            break;
 8003d66:	e007      	b.n	8003d78 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d3b4      	bcc.n	8003ce2 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	695a      	ldr	r2, [r3, #20]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003d86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f005 fc11 	bl	80095b4 <USB_ReadInterrupts>
 8003d92:	4603      	mov	r3, r0
 8003d94:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d9c:	d10a      	bne.n	8003db4 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f00b fc1e 	bl	800f5e0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	695a      	ldr	r2, [r3, #20]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003db2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f005 fbfb 	bl	80095b4 <USB_ReadInterrupts>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b04      	cmp	r3, #4
 8003dc6:	d115      	bne.n	8003df4 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	f003 0304 	and.w	r3, r3, #4
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d002      	beq.n	8003de0 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f00b fc0e 	bl	800f5fc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6859      	ldr	r1, [r3, #4]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	69ba      	ldr	r2, [r7, #24]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	605a      	str	r2, [r3, #4]
 8003df0:	e000      	b.n	8003df4 <HAL_PCD_IRQHandler+0x992>
      return;
 8003df2:	bf00      	nop
    }
  }
}
 8003df4:	3734      	adds	r7, #52	; 0x34
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd90      	pop	{r4, r7, pc}

08003dfa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b082      	sub	sp, #8
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
 8003e02:	460b      	mov	r3, r1
 8003e04:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_PCD_SetAddress+0x1a>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e013      	b.n	8003e3c <HAL_PCD_SetAddress+0x42>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	78fa      	ldrb	r2, [r7, #3]
 8003e20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	78fa      	ldrb	r2, [r7, #3]
 8003e2a:	4611      	mov	r1, r2
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f005 fb59 	bl	80094e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	4608      	mov	r0, r1
 8003e4e:	4611      	mov	r1, r2
 8003e50:	461a      	mov	r2, r3
 8003e52:	4603      	mov	r3, r0
 8003e54:	70fb      	strb	r3, [r7, #3]
 8003e56:	460b      	mov	r3, r1
 8003e58:	803b      	strh	r3, [r7, #0]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	da0f      	bge.n	8003e8a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e6a:	78fb      	ldrb	r3, [r7, #3]
 8003e6c:	f003 020f 	and.w	r2, r3, #15
 8003e70:	4613      	mov	r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	4413      	add	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	3338      	adds	r3, #56	; 0x38
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	3304      	adds	r3, #4
 8003e80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2201      	movs	r2, #1
 8003e86:	705a      	strb	r2, [r3, #1]
 8003e88:	e00f      	b.n	8003eaa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e8a:	78fb      	ldrb	r3, [r7, #3]
 8003e8c:	f003 020f 	and.w	r2, r3, #15
 8003e90:	4613      	mov	r3, r2
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	4413      	add	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003eaa:	78fb      	ldrb	r3, [r7, #3]
 8003eac:	f003 030f 	and.w	r3, r3, #15
 8003eb0:	b2da      	uxtb	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003eb6:	883a      	ldrh	r2, [r7, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	78ba      	ldrb	r2, [r7, #2]
 8003ec0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	785b      	ldrb	r3, [r3, #1]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d004      	beq.n	8003ed4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ed4:	78bb      	ldrb	r3, [r7, #2]
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d102      	bne.n	8003ee0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d101      	bne.n	8003eee <HAL_PCD_EP_Open+0xaa>
 8003eea:	2302      	movs	r3, #2
 8003eec:	e00e      	b.n	8003f0c <HAL_PCD_EP_Open+0xc8>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68f9      	ldr	r1, [r7, #12]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f004 fbcd 	bl	800869c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003f0a:	7afb      	ldrb	r3, [r7, #11]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	da0f      	bge.n	8003f48 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f28:	78fb      	ldrb	r3, [r7, #3]
 8003f2a:	f003 020f 	and.w	r2, r3, #15
 8003f2e:	4613      	mov	r3, r2
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	4413      	add	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	3338      	adds	r3, #56	; 0x38
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2201      	movs	r2, #1
 8003f44:	705a      	strb	r2, [r3, #1]
 8003f46:	e00f      	b.n	8003f68 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f48:	78fb      	ldrb	r3, [r7, #3]
 8003f4a:	f003 020f 	and.w	r2, r3, #15
 8003f4e:	4613      	mov	r3, r2
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	4413      	add	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	3304      	adds	r3, #4
 8003f60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003f68:	78fb      	ldrb	r3, [r7, #3]
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d101      	bne.n	8003f82 <HAL_PCD_EP_Close+0x6e>
 8003f7e:	2302      	movs	r3, #2
 8003f80:	e00e      	b.n	8003fa0 <HAL_PCD_EP_Close+0x8c>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68f9      	ldr	r1, [r7, #12]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f004 fc0b 	bl	80087ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	607a      	str	r2, [r7, #4]
 8003fb2:	603b      	str	r3, [r7, #0]
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fb8:	7afb      	ldrb	r3, [r7, #11]
 8003fba:	f003 020f 	and.w	r2, r3, #15
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	4413      	add	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	4413      	add	r3, r2
 8003fce:	3304      	adds	r3, #4
 8003fd0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fea:	7afb      	ldrb	r3, [r7, #11]
 8003fec:	f003 030f 	and.w	r3, r3, #15
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d102      	bne.n	8004004 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004004:	7afb      	ldrb	r3, [r7, #11]
 8004006:	f003 030f 	and.w	r3, r3, #15
 800400a:	2b00      	cmp	r3, #0
 800400c:	d109      	bne.n	8004022 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6818      	ldr	r0, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	b2db      	uxtb	r3, r3
 8004018:	461a      	mov	r2, r3
 800401a:	6979      	ldr	r1, [r7, #20]
 800401c:	f004 fef2 	bl	8008e04 <USB_EP0StartXfer>
 8004020:	e008      	b.n	8004034 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6818      	ldr	r0, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	b2db      	uxtb	r3, r3
 800402c:	461a      	mov	r2, r3
 800402e:	6979      	ldr	r1, [r7, #20]
 8004030:	f004 fc98 	bl	8008964 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3718      	adds	r7, #24
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800403e:	b480      	push	{r7}
 8004040:	b083      	sub	sp, #12
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	460b      	mov	r3, r1
 8004048:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800404a:	78fb      	ldrb	r3, [r7, #3]
 800404c:	f003 020f 	and.w	r2, r3, #15
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	4613      	mov	r3, r2
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	4413      	add	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	440b      	add	r3, r1
 800405c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004060:	681b      	ldr	r3, [r3, #0]
}
 8004062:	4618      	mov	r0, r3
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b086      	sub	sp, #24
 8004072:	af00      	add	r7, sp, #0
 8004074:	60f8      	str	r0, [r7, #12]
 8004076:	607a      	str	r2, [r7, #4]
 8004078:	603b      	str	r3, [r7, #0]
 800407a:	460b      	mov	r3, r1
 800407c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800407e:	7afb      	ldrb	r3, [r7, #11]
 8004080:	f003 020f 	and.w	r2, r3, #15
 8004084:	4613      	mov	r3, r2
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	4413      	add	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	3338      	adds	r3, #56	; 0x38
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	4413      	add	r3, r2
 8004092:	3304      	adds	r3, #4
 8004094:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2200      	movs	r2, #0
 80040a6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	2201      	movs	r2, #1
 80040ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040ae:	7afb      	ldrb	r3, [r7, #11]
 80040b0:	f003 030f 	and.w	r3, r3, #15
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d102      	bne.n	80040c8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040c8:	7afb      	ldrb	r3, [r7, #11]
 80040ca:	f003 030f 	and.w	r3, r3, #15
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d109      	bne.n	80040e6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6818      	ldr	r0, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	461a      	mov	r2, r3
 80040de:	6979      	ldr	r1, [r7, #20]
 80040e0:	f004 fe90 	bl	8008e04 <USB_EP0StartXfer>
 80040e4:	e008      	b.n	80040f8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6818      	ldr	r0, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	461a      	mov	r2, r3
 80040f2:	6979      	ldr	r1, [r7, #20]
 80040f4:	f004 fc36 	bl	8008964 <USB_EPStartXfer>
  }

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3718      	adds	r7, #24
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b084      	sub	sp, #16
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	460b      	mov	r3, r1
 800410c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800410e:	78fb      	ldrb	r3, [r7, #3]
 8004110:	f003 020f 	and.w	r2, r3, #15
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	429a      	cmp	r2, r3
 800411a:	d901      	bls.n	8004120 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e050      	b.n	80041c2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004120:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004124:	2b00      	cmp	r3, #0
 8004126:	da0f      	bge.n	8004148 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004128:	78fb      	ldrb	r3, [r7, #3]
 800412a:	f003 020f 	and.w	r2, r3, #15
 800412e:	4613      	mov	r3, r2
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	4413      	add	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	3338      	adds	r3, #56	; 0x38
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	4413      	add	r3, r2
 800413c:	3304      	adds	r3, #4
 800413e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2201      	movs	r2, #1
 8004144:	705a      	strb	r2, [r3, #1]
 8004146:	e00d      	b.n	8004164 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004148:	78fa      	ldrb	r2, [r7, #3]
 800414a:	4613      	mov	r3, r2
 800414c:	00db      	lsls	r3, r3, #3
 800414e:	4413      	add	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	4413      	add	r3, r2
 800415a:	3304      	adds	r3, #4
 800415c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2201      	movs	r2, #1
 8004168:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800416a:	78fb      	ldrb	r3, [r7, #3]
 800416c:	f003 030f 	and.w	r3, r3, #15
 8004170:	b2da      	uxtb	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800417c:	2b01      	cmp	r3, #1
 800417e:	d101      	bne.n	8004184 <HAL_PCD_EP_SetStall+0x82>
 8004180:	2302      	movs	r3, #2
 8004182:	e01e      	b.n	80041c2 <HAL_PCD_EP_SetStall+0xc0>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68f9      	ldr	r1, [r7, #12]
 8004192:	4618      	mov	r0, r3
 8004194:	f005 f8d2 	bl	800933c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004198:	78fb      	ldrb	r3, [r7, #3]
 800419a:	f003 030f 	and.w	r3, r3, #15
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10a      	bne.n	80041b8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6818      	ldr	r0, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	b2d9      	uxtb	r1, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80041b2:	461a      	mov	r2, r3
 80041b4:	f005 fac4 	bl	8009740 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b084      	sub	sp, #16
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
 80041d2:	460b      	mov	r3, r1
 80041d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80041d6:	78fb      	ldrb	r3, [r7, #3]
 80041d8:	f003 020f 	and.w	r2, r3, #15
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d901      	bls.n	80041e8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e042      	b.n	800426e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	da0f      	bge.n	8004210 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041f0:	78fb      	ldrb	r3, [r7, #3]
 80041f2:	f003 020f 	and.w	r2, r3, #15
 80041f6:	4613      	mov	r3, r2
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	4413      	add	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	3338      	adds	r3, #56	; 0x38
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	4413      	add	r3, r2
 8004204:	3304      	adds	r3, #4
 8004206:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2201      	movs	r2, #1
 800420c:	705a      	strb	r2, [r3, #1]
 800420e:	e00f      	b.n	8004230 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004210:	78fb      	ldrb	r3, [r7, #3]
 8004212:	f003 020f 	and.w	r2, r3, #15
 8004216:	4613      	mov	r3, r2
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	4413      	add	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	4413      	add	r3, r2
 8004226:	3304      	adds	r3, #4
 8004228:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004236:	78fb      	ldrb	r3, [r7, #3]
 8004238:	f003 030f 	and.w	r3, r3, #15
 800423c:	b2da      	uxtb	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_PCD_EP_ClrStall+0x86>
 800424c:	2302      	movs	r3, #2
 800424e:	e00e      	b.n	800426e <HAL_PCD_EP_ClrStall+0xa4>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68f9      	ldr	r1, [r7, #12]
 800425e:	4618      	mov	r0, r3
 8004260:	f005 f8da 	bl	8009418 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b084      	sub	sp, #16
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
 800427e:	460b      	mov	r3, r1
 8004280:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004282:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004286:	2b00      	cmp	r3, #0
 8004288:	da0c      	bge.n	80042a4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800428a:	78fb      	ldrb	r3, [r7, #3]
 800428c:	f003 020f 	and.w	r2, r3, #15
 8004290:	4613      	mov	r3, r2
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	4413      	add	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	3338      	adds	r3, #56	; 0x38
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	4413      	add	r3, r2
 800429e:	3304      	adds	r3, #4
 80042a0:	60fb      	str	r3, [r7, #12]
 80042a2:	e00c      	b.n	80042be <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042a4:	78fb      	ldrb	r3, [r7, #3]
 80042a6:	f003 020f 	and.w	r2, r3, #15
 80042aa:	4613      	mov	r3, r2
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	4413      	add	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	4413      	add	r3, r2
 80042ba:	3304      	adds	r3, #4
 80042bc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68f9      	ldr	r1, [r7, #12]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f004 fef9 	bl	80090bc <USB_EPStopXfer>
 80042ca:	4603      	mov	r3, r0
 80042cc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80042ce:	7afb      	ldrb	r3, [r7, #11]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b08a      	sub	sp, #40	; 0x28
 80042dc:	af02      	add	r7, sp, #8
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	4613      	mov	r3, r2
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	4413      	add	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	3338      	adds	r3, #56	; 0x38
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	4413      	add	r3, r2
 80042fc:	3304      	adds	r3, #4
 80042fe:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6a1a      	ldr	r2, [r3, #32]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	429a      	cmp	r2, r3
 800430a:	d901      	bls.n	8004310 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e06c      	b.n	80043ea <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	699a      	ldr	r2, [r3, #24]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6a1b      	ldr	r3, [r3, #32]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	69fa      	ldr	r2, [r7, #28]
 8004322:	429a      	cmp	r2, r3
 8004324:	d902      	bls.n	800432c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	3303      	adds	r3, #3
 8004330:	089b      	lsrs	r3, r3, #2
 8004332:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004334:	e02b      	b.n	800438e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	699a      	ldr	r2, [r3, #24]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	69fa      	ldr	r2, [r7, #28]
 8004348:	429a      	cmp	r2, r3
 800434a:	d902      	bls.n	8004352 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	3303      	adds	r3, #3
 8004356:	089b      	lsrs	r3, r3, #2
 8004358:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6919      	ldr	r1, [r3, #16]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	b2da      	uxtb	r2, r3
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800436a:	b2db      	uxtb	r3, r3
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	4603      	mov	r3, r0
 8004370:	6978      	ldr	r0, [r7, #20]
 8004372:	f004 ff4d 	bl	8009210 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	691a      	ldr	r2, [r3, #16]
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	441a      	add	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6a1a      	ldr	r2, [r3, #32]
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	441a      	add	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	015a      	lsls	r2, r3, #5
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	4413      	add	r3, r2
 8004396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d809      	bhi.n	80043b8 <PCD_WriteEmptyTxFifo+0xe0>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6a1a      	ldr	r2, [r3, #32]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d203      	bcs.n	80043b8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1be      	bne.n	8004336 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	699a      	ldr	r2, [r3, #24]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d811      	bhi.n	80043e8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	2201      	movs	r2, #1
 80043cc:	fa02 f303 	lsl.w	r3, r2, r3
 80043d0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	43db      	mvns	r3, r3
 80043de:	6939      	ldr	r1, [r7, #16]
 80043e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043e4:	4013      	ands	r3, r2
 80043e6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3720      	adds	r7, #32
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
	...

080043f4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b088      	sub	sp, #32
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	333c      	adds	r3, #60	; 0x3c
 800440c:	3304      	adds	r3, #4
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	015a      	lsls	r2, r3, #5
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	4413      	add	r3, r2
 800441a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d17b      	bne.n	8004522 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	f003 0308 	and.w	r3, r3, #8
 8004430:	2b00      	cmp	r3, #0
 8004432:	d015      	beq.n	8004460 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	4a61      	ldr	r2, [pc, #388]	; (80045bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004438:	4293      	cmp	r3, r2
 800443a:	f240 80b9 	bls.w	80045b0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 80b3 	beq.w	80045b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	015a      	lsls	r2, r3, #5
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	4413      	add	r3, r2
 8004452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004456:	461a      	mov	r2, r3
 8004458:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800445c:	6093      	str	r3, [r2, #8]
 800445e:	e0a7      	b.n	80045b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f003 0320 	and.w	r3, r3, #32
 8004466:	2b00      	cmp	r3, #0
 8004468:	d009      	beq.n	800447e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	015a      	lsls	r2, r3, #5
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	4413      	add	r3, r2
 8004472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004476:	461a      	mov	r2, r3
 8004478:	2320      	movs	r3, #32
 800447a:	6093      	str	r3, [r2, #8]
 800447c:	e098      	b.n	80045b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004484:	2b00      	cmp	r3, #0
 8004486:	f040 8093 	bne.w	80045b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	4a4b      	ldr	r2, [pc, #300]	; (80045bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d90f      	bls.n	80044b2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00a      	beq.n	80044b2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a8:	461a      	mov	r2, r3
 80044aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044ae:	6093      	str	r3, [r2, #8]
 80044b0:	e07e      	b.n	80045b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	4613      	mov	r3, r2
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	4413      	add	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	4413      	add	r3, r2
 80044c4:	3304      	adds	r3, #4
 80044c6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	69da      	ldr	r2, [r3, #28]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	0159      	lsls	r1, r3, #5
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	440b      	add	r3, r1
 80044d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044de:	1ad2      	subs	r2, r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d114      	bne.n	8004514 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d109      	bne.n	8004506 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6818      	ldr	r0, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80044fc:	461a      	mov	r2, r3
 80044fe:	2101      	movs	r1, #1
 8004500:	f005 f91e 	bl	8009740 <USB_EP0_OutStart>
 8004504:	e006      	b.n	8004514 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	691a      	ldr	r2, [r3, #16]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	441a      	add	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	b2db      	uxtb	r3, r3
 8004518:	4619      	mov	r1, r3
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f00a ff9c 	bl	800f458 <HAL_PCD_DataOutStageCallback>
 8004520:	e046      	b.n	80045b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	4a26      	ldr	r2, [pc, #152]	; (80045c0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d124      	bne.n	8004574 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00a      	beq.n	800454a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	015a      	lsls	r2, r3, #5
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	4413      	add	r3, r2
 800453c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004540:	461a      	mov	r2, r3
 8004542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004546:	6093      	str	r3, [r2, #8]
 8004548:	e032      	b.n	80045b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	f003 0320 	and.w	r3, r3, #32
 8004550:	2b00      	cmp	r3, #0
 8004552:	d008      	beq.n	8004566 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	4413      	add	r3, r2
 800455c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004560:	461a      	mov	r2, r3
 8004562:	2320      	movs	r3, #32
 8004564:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	b2db      	uxtb	r3, r3
 800456a:	4619      	mov	r1, r3
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f00a ff73 	bl	800f458 <HAL_PCD_DataOutStageCallback>
 8004572:	e01d      	b.n	80045b0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d114      	bne.n	80045a4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	4613      	mov	r3, r2
 8004580:	00db      	lsls	r3, r3, #3
 8004582:	4413      	add	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	440b      	add	r3, r1
 8004588:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d108      	bne.n	80045a4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6818      	ldr	r0, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800459c:	461a      	mov	r2, r3
 800459e:	2100      	movs	r1, #0
 80045a0:	f005 f8ce 	bl	8009740 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	4619      	mov	r1, r3
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f00a ff54 	bl	800f458 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3720      	adds	r7, #32
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	4f54300a 	.word	0x4f54300a
 80045c0:	4f54310a 	.word	0x4f54310a

080045c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	333c      	adds	r3, #60	; 0x3c
 80045dc:	3304      	adds	r3, #4
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	015a      	lsls	r2, r3, #5
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4a15      	ldr	r2, [pc, #84]	; (800464c <PCD_EP_OutSetupPacket_int+0x88>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d90e      	bls.n	8004618 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004600:	2b00      	cmp	r3, #0
 8004602:	d009      	beq.n	8004618 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	4413      	add	r3, r2
 800460c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004610:	461a      	mov	r2, r3
 8004612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004616:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f00a ff0b 	bl	800f434 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	4a0a      	ldr	r2, [pc, #40]	; (800464c <PCD_EP_OutSetupPacket_int+0x88>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d90c      	bls.n	8004640 <PCD_EP_OutSetupPacket_int+0x7c>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d108      	bne.n	8004640 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6818      	ldr	r0, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004638:	461a      	mov	r2, r3
 800463a:	2101      	movs	r1, #1
 800463c:	f005 f880 	bl	8009740 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3718      	adds	r7, #24
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	4f54300a 	.word	0x4f54300a

08004650 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	460b      	mov	r3, r1
 800465a:	70fb      	strb	r3, [r7, #3]
 800465c:	4613      	mov	r3, r2
 800465e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004668:	78fb      	ldrb	r3, [r7, #3]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d107      	bne.n	800467e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800466e:	883b      	ldrh	r3, [r7, #0]
 8004670:	0419      	lsls	r1, r3, #16
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68ba      	ldr	r2, [r7, #8]
 8004678:	430a      	orrs	r2, r1
 800467a:	629a      	str	r2, [r3, #40]	; 0x28
 800467c:	e028      	b.n	80046d0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004684:	0c1b      	lsrs	r3, r3, #16
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	4413      	add	r3, r2
 800468a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800468c:	2300      	movs	r3, #0
 800468e:	73fb      	strb	r3, [r7, #15]
 8004690:	e00d      	b.n	80046ae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	7bfb      	ldrb	r3, [r7, #15]
 8004698:	3340      	adds	r3, #64	; 0x40
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	0c1b      	lsrs	r3, r3, #16
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	4413      	add	r3, r2
 80046a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80046a8:	7bfb      	ldrb	r3, [r7, #15]
 80046aa:	3301      	adds	r3, #1
 80046ac:	73fb      	strb	r3, [r7, #15]
 80046ae:	7bfa      	ldrb	r2, [r7, #15]
 80046b0:	78fb      	ldrb	r3, [r7, #3]
 80046b2:	3b01      	subs	r3, #1
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d3ec      	bcc.n	8004692 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80046b8:	883b      	ldrh	r3, [r7, #0]
 80046ba:	0418      	lsls	r0, r3, #16
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6819      	ldr	r1, [r3, #0]
 80046c0:	78fb      	ldrb	r3, [r7, #3]
 80046c2:	3b01      	subs	r3, #1
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	4302      	orrs	r2, r0
 80046c8:	3340      	adds	r3, #64	; 0x40
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	440b      	add	r3, r1
 80046ce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
 80046e6:	460b      	mov	r3, r1
 80046e8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	887a      	ldrh	r2, [r7, #2]
 80046f0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800472e:	4b05      	ldr	r3, [pc, #20]	; (8004744 <HAL_PCDEx_ActivateLPM+0x44>)
 8004730:	4313      	orrs	r3, r2
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3714      	adds	r7, #20
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	10000003 	.word	0x10000003

08004748 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004750:	2300      	movs	r3, #0
 8004752:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e29b      	b.n	8004c96 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 8087 	beq.w	800487a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800476c:	4b96      	ldr	r3, [pc, #600]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f003 030c 	and.w	r3, r3, #12
 8004774:	2b04      	cmp	r3, #4
 8004776:	d00c      	beq.n	8004792 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004778:	4b93      	ldr	r3, [pc, #588]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f003 030c 	and.w	r3, r3, #12
 8004780:	2b08      	cmp	r3, #8
 8004782:	d112      	bne.n	80047aa <HAL_RCC_OscConfig+0x62>
 8004784:	4b90      	ldr	r3, [pc, #576]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800478c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004790:	d10b      	bne.n	80047aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004792:	4b8d      	ldr	r3, [pc, #564]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d06c      	beq.n	8004878 <HAL_RCC_OscConfig+0x130>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d168      	bne.n	8004878 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e275      	b.n	8004c96 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047b2:	d106      	bne.n	80047c2 <HAL_RCC_OscConfig+0x7a>
 80047b4:	4b84      	ldr	r3, [pc, #528]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a83      	ldr	r2, [pc, #524]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 80047ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047be:	6013      	str	r3, [r2, #0]
 80047c0:	e02e      	b.n	8004820 <HAL_RCC_OscConfig+0xd8>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10c      	bne.n	80047e4 <HAL_RCC_OscConfig+0x9c>
 80047ca:	4b7f      	ldr	r3, [pc, #508]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a7e      	ldr	r2, [pc, #504]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 80047d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047d4:	6013      	str	r3, [r2, #0]
 80047d6:	4b7c      	ldr	r3, [pc, #496]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a7b      	ldr	r2, [pc, #492]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 80047dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047e0:	6013      	str	r3, [r2, #0]
 80047e2:	e01d      	b.n	8004820 <HAL_RCC_OscConfig+0xd8>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047ec:	d10c      	bne.n	8004808 <HAL_RCC_OscConfig+0xc0>
 80047ee:	4b76      	ldr	r3, [pc, #472]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a75      	ldr	r2, [pc, #468]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 80047f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047f8:	6013      	str	r3, [r2, #0]
 80047fa:	4b73      	ldr	r3, [pc, #460]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a72      	ldr	r2, [pc, #456]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 8004800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004804:	6013      	str	r3, [r2, #0]
 8004806:	e00b      	b.n	8004820 <HAL_RCC_OscConfig+0xd8>
 8004808:	4b6f      	ldr	r3, [pc, #444]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a6e      	ldr	r2, [pc, #440]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 800480e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004812:	6013      	str	r3, [r2, #0]
 8004814:	4b6c      	ldr	r3, [pc, #432]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a6b      	ldr	r2, [pc, #428]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 800481a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800481e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d013      	beq.n	8004850 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004828:	f7fc ffe8 	bl	80017fc <HAL_GetTick>
 800482c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800482e:	e008      	b.n	8004842 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004830:	f7fc ffe4 	bl	80017fc <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b64      	cmp	r3, #100	; 0x64
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e229      	b.n	8004c96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004842:	4b61      	ldr	r3, [pc, #388]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0f0      	beq.n	8004830 <HAL_RCC_OscConfig+0xe8>
 800484e:	e014      	b.n	800487a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004850:	f7fc ffd4 	bl	80017fc <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004856:	e008      	b.n	800486a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004858:	f7fc ffd0 	bl	80017fc <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b64      	cmp	r3, #100	; 0x64
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e215      	b.n	8004c96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800486a:	4b57      	ldr	r3, [pc, #348]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1f0      	bne.n	8004858 <HAL_RCC_OscConfig+0x110>
 8004876:	e000      	b.n	800487a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d069      	beq.n	800495a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004886:	4b50      	ldr	r3, [pc, #320]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 030c 	and.w	r3, r3, #12
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00b      	beq.n	80048aa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004892:	4b4d      	ldr	r3, [pc, #308]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f003 030c 	and.w	r3, r3, #12
 800489a:	2b08      	cmp	r3, #8
 800489c:	d11c      	bne.n	80048d8 <HAL_RCC_OscConfig+0x190>
 800489e:	4b4a      	ldr	r3, [pc, #296]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d116      	bne.n	80048d8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048aa:	4b47      	ldr	r3, [pc, #284]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d005      	beq.n	80048c2 <HAL_RCC_OscConfig+0x17a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d001      	beq.n	80048c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e1e9      	b.n	8004c96 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048c2:	4b41      	ldr	r3, [pc, #260]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	493d      	ldr	r1, [pc, #244]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048d6:	e040      	b.n	800495a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d023      	beq.n	8004928 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048e0:	4b39      	ldr	r3, [pc, #228]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a38      	ldr	r2, [pc, #224]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 80048e6:	f043 0301 	orr.w	r3, r3, #1
 80048ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ec:	f7fc ff86 	bl	80017fc <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048f4:	f7fc ff82 	bl	80017fc <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e1c7      	b.n	8004c96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004906:	4b30      	ldr	r3, [pc, #192]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0f0      	beq.n	80048f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004912:	4b2d      	ldr	r3, [pc, #180]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	4929      	ldr	r1, [pc, #164]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 8004922:	4313      	orrs	r3, r2
 8004924:	600b      	str	r3, [r1, #0]
 8004926:	e018      	b.n	800495a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004928:	4b27      	ldr	r3, [pc, #156]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a26      	ldr	r2, [pc, #152]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 800492e:	f023 0301 	bic.w	r3, r3, #1
 8004932:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004934:	f7fc ff62 	bl	80017fc <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800493c:	f7fc ff5e 	bl	80017fc <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e1a3      	b.n	8004c96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800494e:	4b1e      	ldr	r3, [pc, #120]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1f0      	bne.n	800493c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	2b00      	cmp	r3, #0
 8004964:	d038      	beq.n	80049d8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d019      	beq.n	80049a2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800496e:	4b16      	ldr	r3, [pc, #88]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 8004970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004972:	4a15      	ldr	r2, [pc, #84]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 8004974:	f043 0301 	orr.w	r3, r3, #1
 8004978:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497a:	f7fc ff3f 	bl	80017fc <HAL_GetTick>
 800497e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004980:	e008      	b.n	8004994 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004982:	f7fc ff3b 	bl	80017fc <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d901      	bls.n	8004994 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e180      	b.n	8004c96 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004994:	4b0c      	ldr	r3, [pc, #48]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 8004996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d0f0      	beq.n	8004982 <HAL_RCC_OscConfig+0x23a>
 80049a0:	e01a      	b.n	80049d8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049a2:	4b09      	ldr	r3, [pc, #36]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 80049a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a6:	4a08      	ldr	r2, [pc, #32]	; (80049c8 <HAL_RCC_OscConfig+0x280>)
 80049a8:	f023 0301 	bic.w	r3, r3, #1
 80049ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ae:	f7fc ff25 	bl	80017fc <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049b4:	e00a      	b.n	80049cc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049b6:	f7fc ff21 	bl	80017fc <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d903      	bls.n	80049cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e166      	b.n	8004c96 <HAL_RCC_OscConfig+0x54e>
 80049c8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049cc:	4b92      	ldr	r3, [pc, #584]	; (8004c18 <HAL_RCC_OscConfig+0x4d0>)
 80049ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1ee      	bne.n	80049b6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 80a4 	beq.w	8004b2e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049e6:	4b8c      	ldr	r3, [pc, #560]	; (8004c18 <HAL_RCC_OscConfig+0x4d0>)
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10d      	bne.n	8004a0e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80049f2:	4b89      	ldr	r3, [pc, #548]	; (8004c18 <HAL_RCC_OscConfig+0x4d0>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	4a88      	ldr	r2, [pc, #544]	; (8004c18 <HAL_RCC_OscConfig+0x4d0>)
 80049f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049fc:	6413      	str	r3, [r2, #64]	; 0x40
 80049fe:	4b86      	ldr	r3, [pc, #536]	; (8004c18 <HAL_RCC_OscConfig+0x4d0>)
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a06:	60bb      	str	r3, [r7, #8]
 8004a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a0e:	4b83      	ldr	r3, [pc, #524]	; (8004c1c <HAL_RCC_OscConfig+0x4d4>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d118      	bne.n	8004a4c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004a1a:	4b80      	ldr	r3, [pc, #512]	; (8004c1c <HAL_RCC_OscConfig+0x4d4>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a7f      	ldr	r2, [pc, #508]	; (8004c1c <HAL_RCC_OscConfig+0x4d4>)
 8004a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a26:	f7fc fee9 	bl	80017fc <HAL_GetTick>
 8004a2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a2c:	e008      	b.n	8004a40 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a2e:	f7fc fee5 	bl	80017fc <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	2b64      	cmp	r3, #100	; 0x64
 8004a3a:	d901      	bls.n	8004a40 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e12a      	b.n	8004c96 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a40:	4b76      	ldr	r3, [pc, #472]	; (8004c1c <HAL_RCC_OscConfig+0x4d4>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0f0      	beq.n	8004a2e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d106      	bne.n	8004a62 <HAL_RCC_OscConfig+0x31a>
 8004a54:	4b70      	ldr	r3, [pc, #448]	; (8004c18 <HAL_RCC_OscConfig+0x4d0>)
 8004a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a58:	4a6f      	ldr	r2, [pc, #444]	; (8004c18 <HAL_RCC_OscConfig+0x4d0>)
 8004a5a:	f043 0301 	orr.w	r3, r3, #1
 8004a5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a60:	e02d      	b.n	8004abe <HAL_RCC_OscConfig+0x376>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10c      	bne.n	8004a84 <HAL_RCC_OscConfig+0x33c>
 8004a6a:	4b6b      	ldr	r3, [pc, #428]	; (8004c18 <HAL_RCC_OscConfig+0x4d0>)
 8004a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a6e:	4a6a      	ldr	r2, [pc, #424]	; (8004c18 <HAL_RCC_OscConfig+0x4d0>)
 8004a70:	f023 0301 	bic.w	r3, r3, #1
 8004a74:	6713      	str	r3, [r2, #112]	; 0x70
 8004a76:	4b68      	ldr	r3, [pc, #416]	; (8004c18 <HAL_RCC_OscConfig+0x4d0>)
 8004a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7a:	4a67      	ldr	r2, [pc, #412]	; (8004c18 <HAL_RCC_OscConfig+0x4d0>)
 8004a7c:	f023 0304 	bic.w	r3, r3, #4
 8004a80:	6713      	str	r3, [r2, #112]	; 0x70
 8004a82:	e01c      	b.n	8004abe <HAL_RCC_OscConfig+0x376>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	2b05      	cmp	r3, #5
 8004a8a:	d10c      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x35e>
 8004a8c:	4b62      	ldr	r3, [pc, #392]	; (8004c18 <HAL_RCC_OscConfig+0x4d0>)
 8004a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a90:	4a61      	ldr	r2, [pc, #388]	; (8004c18 <HAL_RCC_OscConfig+0x4d0>)
 8004a92:	f043 0304 	orr.w	r3, r3, #4
 8004a96:	6713      	str	r3, [r2, #112]	; 0x70
 8004a98:	4b5f      	ldr	r3, [pc, #380]	; (8004c18 <HAL_RCC_OscConfig+0x4d0>)
 8004a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9c:	4a5e      	ldr	r2, [pc, #376]	; (8004c18 <HAL_RCC_OscConfig+0x4d0>)
 8004a9e:	f043 0301 	orr.w	r3, r3, #1
 8004aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8004aa4:	e00b      	b.n	8004abe <HAL_RCC_OscConfig+0x376>
 8004aa6:	4b5c      	ldr	r3, [pc, #368]	; (8004c18 <HAL_RCC_OscConfig+0x4d0>)
 8004aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aaa:	4a5b      	ldr	r2, [pc, #364]	; (8004c18 <HAL_RCC_OscConfig+0x4d0>)
 8004aac:	f023 0301 	bic.w	r3, r3, #1
 8004ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ab2:	4b59      	ldr	r3, [pc, #356]	; (8004c18 <HAL_RCC_OscConfig+0x4d0>)
 8004ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab6:	4a58      	ldr	r2, [pc, #352]	; (8004c18 <HAL_RCC_OscConfig+0x4d0>)
 8004ab8:	f023 0304 	bic.w	r3, r3, #4
 8004abc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d015      	beq.n	8004af2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac6:	f7fc fe99 	bl	80017fc <HAL_GetTick>
 8004aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004acc:	e00a      	b.n	8004ae4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ace:	f7fc fe95 	bl	80017fc <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d901      	bls.n	8004ae4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e0d8      	b.n	8004c96 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae4:	4b4c      	ldr	r3, [pc, #304]	; (8004c18 <HAL_RCC_OscConfig+0x4d0>)
 8004ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d0ee      	beq.n	8004ace <HAL_RCC_OscConfig+0x386>
 8004af0:	e014      	b.n	8004b1c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af2:	f7fc fe83 	bl	80017fc <HAL_GetTick>
 8004af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004af8:	e00a      	b.n	8004b10 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004afa:	f7fc fe7f 	bl	80017fc <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d901      	bls.n	8004b10 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e0c2      	b.n	8004c96 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b10:	4b41      	ldr	r3, [pc, #260]	; (8004c18 <HAL_RCC_OscConfig+0x4d0>)
 8004b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1ee      	bne.n	8004afa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b1c:	7dfb      	ldrb	r3, [r7, #23]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d105      	bne.n	8004b2e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b22:	4b3d      	ldr	r3, [pc, #244]	; (8004c18 <HAL_RCC_OscConfig+0x4d0>)
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	4a3c      	ldr	r2, [pc, #240]	; (8004c18 <HAL_RCC_OscConfig+0x4d0>)
 8004b28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f000 80ae 	beq.w	8004c94 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b38:	4b37      	ldr	r3, [pc, #220]	; (8004c18 <HAL_RCC_OscConfig+0x4d0>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f003 030c 	and.w	r3, r3, #12
 8004b40:	2b08      	cmp	r3, #8
 8004b42:	d06d      	beq.n	8004c20 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d14b      	bne.n	8004be4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b4c:	4b32      	ldr	r3, [pc, #200]	; (8004c18 <HAL_RCC_OscConfig+0x4d0>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a31      	ldr	r2, [pc, #196]	; (8004c18 <HAL_RCC_OscConfig+0x4d0>)
 8004b52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b58:	f7fc fe50 	bl	80017fc <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b60:	f7fc fe4c 	bl	80017fc <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e091      	b.n	8004c96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b72:	4b29      	ldr	r3, [pc, #164]	; (8004c18 <HAL_RCC_OscConfig+0x4d0>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1f0      	bne.n	8004b60 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	69da      	ldr	r2, [r3, #28]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	431a      	orrs	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	019b      	lsls	r3, r3, #6
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b94:	085b      	lsrs	r3, r3, #1
 8004b96:	3b01      	subs	r3, #1
 8004b98:	041b      	lsls	r3, r3, #16
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba0:	061b      	lsls	r3, r3, #24
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba8:	071b      	lsls	r3, r3, #28
 8004baa:	491b      	ldr	r1, [pc, #108]	; (8004c18 <HAL_RCC_OscConfig+0x4d0>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bb0:	4b19      	ldr	r3, [pc, #100]	; (8004c18 <HAL_RCC_OscConfig+0x4d0>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a18      	ldr	r2, [pc, #96]	; (8004c18 <HAL_RCC_OscConfig+0x4d0>)
 8004bb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bbc:	f7fc fe1e 	bl	80017fc <HAL_GetTick>
 8004bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bc4:	f7fc fe1a 	bl	80017fc <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e05f      	b.n	8004c96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bd6:	4b10      	ldr	r3, [pc, #64]	; (8004c18 <HAL_RCC_OscConfig+0x4d0>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d0f0      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x47c>
 8004be2:	e057      	b.n	8004c94 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004be4:	4b0c      	ldr	r3, [pc, #48]	; (8004c18 <HAL_RCC_OscConfig+0x4d0>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a0b      	ldr	r2, [pc, #44]	; (8004c18 <HAL_RCC_OscConfig+0x4d0>)
 8004bea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf0:	f7fc fe04 	bl	80017fc <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf8:	f7fc fe00 	bl	80017fc <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e045      	b.n	8004c96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c0a:	4b03      	ldr	r3, [pc, #12]	; (8004c18 <HAL_RCC_OscConfig+0x4d0>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1f0      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x4b0>
 8004c16:	e03d      	b.n	8004c94 <HAL_RCC_OscConfig+0x54c>
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004c20:	4b1f      	ldr	r3, [pc, #124]	; (8004ca0 <HAL_RCC_OscConfig+0x558>)
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d030      	beq.n	8004c90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d129      	bne.n	8004c90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d122      	bne.n	8004c90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c50:	4013      	ands	r3, r2
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c56:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d119      	bne.n	8004c90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c66:	085b      	lsrs	r3, r3, #1
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d10f      	bne.n	8004c90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d107      	bne.n	8004c90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d001      	beq.n	8004c94 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e000      	b.n	8004c96 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3718      	adds	r7, #24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	40023800 	.word	0x40023800

08004ca4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e0d0      	b.n	8004e5e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cbc:	4b6a      	ldr	r3, [pc, #424]	; (8004e68 <HAL_RCC_ClockConfig+0x1c4>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 030f 	and.w	r3, r3, #15
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d910      	bls.n	8004cec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cca:	4b67      	ldr	r3, [pc, #412]	; (8004e68 <HAL_RCC_ClockConfig+0x1c4>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f023 020f 	bic.w	r2, r3, #15
 8004cd2:	4965      	ldr	r1, [pc, #404]	; (8004e68 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cda:	4b63      	ldr	r3, [pc, #396]	; (8004e68 <HAL_RCC_ClockConfig+0x1c4>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 030f 	and.w	r3, r3, #15
 8004ce2:	683a      	ldr	r2, [r7, #0]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d001      	beq.n	8004cec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e0b8      	b.n	8004e5e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d020      	beq.n	8004d3a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d005      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d04:	4b59      	ldr	r3, [pc, #356]	; (8004e6c <HAL_RCC_ClockConfig+0x1c8>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	4a58      	ldr	r2, [pc, #352]	; (8004e6c <HAL_RCC_ClockConfig+0x1c8>)
 8004d0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0308 	and.w	r3, r3, #8
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d005      	beq.n	8004d28 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d1c:	4b53      	ldr	r3, [pc, #332]	; (8004e6c <HAL_RCC_ClockConfig+0x1c8>)
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	4a52      	ldr	r2, [pc, #328]	; (8004e6c <HAL_RCC_ClockConfig+0x1c8>)
 8004d22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d28:	4b50      	ldr	r3, [pc, #320]	; (8004e6c <HAL_RCC_ClockConfig+0x1c8>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	494d      	ldr	r1, [pc, #308]	; (8004e6c <HAL_RCC_ClockConfig+0x1c8>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d040      	beq.n	8004dc8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d107      	bne.n	8004d5e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d4e:	4b47      	ldr	r3, [pc, #284]	; (8004e6c <HAL_RCC_ClockConfig+0x1c8>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d115      	bne.n	8004d86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e07f      	b.n	8004e5e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d107      	bne.n	8004d76 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d66:	4b41      	ldr	r3, [pc, #260]	; (8004e6c <HAL_RCC_ClockConfig+0x1c8>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d109      	bne.n	8004d86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e073      	b.n	8004e5e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d76:	4b3d      	ldr	r3, [pc, #244]	; (8004e6c <HAL_RCC_ClockConfig+0x1c8>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e06b      	b.n	8004e5e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d86:	4b39      	ldr	r3, [pc, #228]	; (8004e6c <HAL_RCC_ClockConfig+0x1c8>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f023 0203 	bic.w	r2, r3, #3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	4936      	ldr	r1, [pc, #216]	; (8004e6c <HAL_RCC_ClockConfig+0x1c8>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d98:	f7fc fd30 	bl	80017fc <HAL_GetTick>
 8004d9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d9e:	e00a      	b.n	8004db6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004da0:	f7fc fd2c 	bl	80017fc <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e053      	b.n	8004e5e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004db6:	4b2d      	ldr	r3, [pc, #180]	; (8004e6c <HAL_RCC_ClockConfig+0x1c8>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f003 020c 	and.w	r2, r3, #12
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d1eb      	bne.n	8004da0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004dc8:	4b27      	ldr	r3, [pc, #156]	; (8004e68 <HAL_RCC_ClockConfig+0x1c4>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 030f 	and.w	r3, r3, #15
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d210      	bcs.n	8004df8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dd6:	4b24      	ldr	r3, [pc, #144]	; (8004e68 <HAL_RCC_ClockConfig+0x1c4>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f023 020f 	bic.w	r2, r3, #15
 8004dde:	4922      	ldr	r1, [pc, #136]	; (8004e68 <HAL_RCC_ClockConfig+0x1c4>)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004de6:	4b20      	ldr	r3, [pc, #128]	; (8004e68 <HAL_RCC_ClockConfig+0x1c4>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 030f 	and.w	r3, r3, #15
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d001      	beq.n	8004df8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e032      	b.n	8004e5e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d008      	beq.n	8004e16 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e04:	4b19      	ldr	r3, [pc, #100]	; (8004e6c <HAL_RCC_ClockConfig+0x1c8>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	4916      	ldr	r1, [pc, #88]	; (8004e6c <HAL_RCC_ClockConfig+0x1c8>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0308 	and.w	r3, r3, #8
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d009      	beq.n	8004e36 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e22:	4b12      	ldr	r3, [pc, #72]	; (8004e6c <HAL_RCC_ClockConfig+0x1c8>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	00db      	lsls	r3, r3, #3
 8004e30:	490e      	ldr	r1, [pc, #56]	; (8004e6c <HAL_RCC_ClockConfig+0x1c8>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e36:	f000 f821 	bl	8004e7c <HAL_RCC_GetSysClockFreq>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	4b0b      	ldr	r3, [pc, #44]	; (8004e6c <HAL_RCC_ClockConfig+0x1c8>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	091b      	lsrs	r3, r3, #4
 8004e42:	f003 030f 	and.w	r3, r3, #15
 8004e46:	490a      	ldr	r1, [pc, #40]	; (8004e70 <HAL_RCC_ClockConfig+0x1cc>)
 8004e48:	5ccb      	ldrb	r3, [r1, r3]
 8004e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e4e:	4a09      	ldr	r2, [pc, #36]	; (8004e74 <HAL_RCC_ClockConfig+0x1d0>)
 8004e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e52:	4b09      	ldr	r3, [pc, #36]	; (8004e78 <HAL_RCC_ClockConfig+0x1d4>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7fc fc8c 	bl	8001774 <HAL_InitTick>

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	40023c00 	.word	0x40023c00
 8004e6c:	40023800 	.word	0x40023800
 8004e70:	0801127c 	.word	0x0801127c
 8004e74:	20000000 	.word	0x20000000
 8004e78:	20000004 	.word	0x20000004

08004e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e80:	b094      	sub	sp, #80	; 0x50
 8004e82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004e84:	2300      	movs	r3, #0
 8004e86:	647b      	str	r3, [r7, #68]	; 0x44
 8004e88:	2300      	movs	r3, #0
 8004e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004e90:	2300      	movs	r3, #0
 8004e92:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e94:	4b79      	ldr	r3, [pc, #484]	; (800507c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f003 030c 	and.w	r3, r3, #12
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	d00d      	beq.n	8004ebc <HAL_RCC_GetSysClockFreq+0x40>
 8004ea0:	2b08      	cmp	r3, #8
 8004ea2:	f200 80e1 	bhi.w	8005068 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d002      	beq.n	8004eb0 <HAL_RCC_GetSysClockFreq+0x34>
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	d003      	beq.n	8004eb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004eae:	e0db      	b.n	8005068 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004eb0:	4b73      	ldr	r3, [pc, #460]	; (8005080 <HAL_RCC_GetSysClockFreq+0x204>)
 8004eb2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004eb4:	e0db      	b.n	800506e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004eb6:	4b73      	ldr	r3, [pc, #460]	; (8005084 <HAL_RCC_GetSysClockFreq+0x208>)
 8004eb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004eba:	e0d8      	b.n	800506e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ebc:	4b6f      	ldr	r3, [pc, #444]	; (800507c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ec4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004ec6:	4b6d      	ldr	r3, [pc, #436]	; (800507c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d063      	beq.n	8004f9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ed2:	4b6a      	ldr	r3, [pc, #424]	; (800507c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	099b      	lsrs	r3, r3, #6
 8004ed8:	2200      	movs	r2, #0
 8004eda:	63bb      	str	r3, [r7, #56]	; 0x38
 8004edc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ee4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8004eea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004eee:	4622      	mov	r2, r4
 8004ef0:	462b      	mov	r3, r5
 8004ef2:	f04f 0000 	mov.w	r0, #0
 8004ef6:	f04f 0100 	mov.w	r1, #0
 8004efa:	0159      	lsls	r1, r3, #5
 8004efc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f00:	0150      	lsls	r0, r2, #5
 8004f02:	4602      	mov	r2, r0
 8004f04:	460b      	mov	r3, r1
 8004f06:	4621      	mov	r1, r4
 8004f08:	1a51      	subs	r1, r2, r1
 8004f0a:	6139      	str	r1, [r7, #16]
 8004f0c:	4629      	mov	r1, r5
 8004f0e:	eb63 0301 	sbc.w	r3, r3, r1
 8004f12:	617b      	str	r3, [r7, #20]
 8004f14:	f04f 0200 	mov.w	r2, #0
 8004f18:	f04f 0300 	mov.w	r3, #0
 8004f1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f20:	4659      	mov	r1, fp
 8004f22:	018b      	lsls	r3, r1, #6
 8004f24:	4651      	mov	r1, sl
 8004f26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f2a:	4651      	mov	r1, sl
 8004f2c:	018a      	lsls	r2, r1, #6
 8004f2e:	4651      	mov	r1, sl
 8004f30:	ebb2 0801 	subs.w	r8, r2, r1
 8004f34:	4659      	mov	r1, fp
 8004f36:	eb63 0901 	sbc.w	r9, r3, r1
 8004f3a:	f04f 0200 	mov.w	r2, #0
 8004f3e:	f04f 0300 	mov.w	r3, #0
 8004f42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f4e:	4690      	mov	r8, r2
 8004f50:	4699      	mov	r9, r3
 8004f52:	4623      	mov	r3, r4
 8004f54:	eb18 0303 	adds.w	r3, r8, r3
 8004f58:	60bb      	str	r3, [r7, #8]
 8004f5a:	462b      	mov	r3, r5
 8004f5c:	eb49 0303 	adc.w	r3, r9, r3
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	f04f 0200 	mov.w	r2, #0
 8004f66:	f04f 0300 	mov.w	r3, #0
 8004f6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f6e:	4629      	mov	r1, r5
 8004f70:	024b      	lsls	r3, r1, #9
 8004f72:	4621      	mov	r1, r4
 8004f74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f78:	4621      	mov	r1, r4
 8004f7a:	024a      	lsls	r2, r1, #9
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	4619      	mov	r1, r3
 8004f80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f82:	2200      	movs	r2, #0
 8004f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f8c:	f7fb f9a8 	bl	80002e0 <__aeabi_uldivmod>
 8004f90:	4602      	mov	r2, r0
 8004f92:	460b      	mov	r3, r1
 8004f94:	4613      	mov	r3, r2
 8004f96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f98:	e058      	b.n	800504c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f9a:	4b38      	ldr	r3, [pc, #224]	; (800507c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	099b      	lsrs	r3, r3, #6
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	4611      	mov	r1, r2
 8004fa6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004faa:	623b      	str	r3, [r7, #32]
 8004fac:	2300      	movs	r3, #0
 8004fae:	627b      	str	r3, [r7, #36]	; 0x24
 8004fb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004fb4:	4642      	mov	r2, r8
 8004fb6:	464b      	mov	r3, r9
 8004fb8:	f04f 0000 	mov.w	r0, #0
 8004fbc:	f04f 0100 	mov.w	r1, #0
 8004fc0:	0159      	lsls	r1, r3, #5
 8004fc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fc6:	0150      	lsls	r0, r2, #5
 8004fc8:	4602      	mov	r2, r0
 8004fca:	460b      	mov	r3, r1
 8004fcc:	4641      	mov	r1, r8
 8004fce:	ebb2 0a01 	subs.w	sl, r2, r1
 8004fd2:	4649      	mov	r1, r9
 8004fd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004fd8:	f04f 0200 	mov.w	r2, #0
 8004fdc:	f04f 0300 	mov.w	r3, #0
 8004fe0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004fe4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004fe8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004fec:	ebb2 040a 	subs.w	r4, r2, sl
 8004ff0:	eb63 050b 	sbc.w	r5, r3, fp
 8004ff4:	f04f 0200 	mov.w	r2, #0
 8004ff8:	f04f 0300 	mov.w	r3, #0
 8004ffc:	00eb      	lsls	r3, r5, #3
 8004ffe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005002:	00e2      	lsls	r2, r4, #3
 8005004:	4614      	mov	r4, r2
 8005006:	461d      	mov	r5, r3
 8005008:	4643      	mov	r3, r8
 800500a:	18e3      	adds	r3, r4, r3
 800500c:	603b      	str	r3, [r7, #0]
 800500e:	464b      	mov	r3, r9
 8005010:	eb45 0303 	adc.w	r3, r5, r3
 8005014:	607b      	str	r3, [r7, #4]
 8005016:	f04f 0200 	mov.w	r2, #0
 800501a:	f04f 0300 	mov.w	r3, #0
 800501e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005022:	4629      	mov	r1, r5
 8005024:	028b      	lsls	r3, r1, #10
 8005026:	4621      	mov	r1, r4
 8005028:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800502c:	4621      	mov	r1, r4
 800502e:	028a      	lsls	r2, r1, #10
 8005030:	4610      	mov	r0, r2
 8005032:	4619      	mov	r1, r3
 8005034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005036:	2200      	movs	r2, #0
 8005038:	61bb      	str	r3, [r7, #24]
 800503a:	61fa      	str	r2, [r7, #28]
 800503c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005040:	f7fb f94e 	bl	80002e0 <__aeabi_uldivmod>
 8005044:	4602      	mov	r2, r0
 8005046:	460b      	mov	r3, r1
 8005048:	4613      	mov	r3, r2
 800504a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800504c:	4b0b      	ldr	r3, [pc, #44]	; (800507c <HAL_RCC_GetSysClockFreq+0x200>)
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	0c1b      	lsrs	r3, r3, #16
 8005052:	f003 0303 	and.w	r3, r3, #3
 8005056:	3301      	adds	r3, #1
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800505c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800505e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005060:	fbb2 f3f3 	udiv	r3, r2, r3
 8005064:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005066:	e002      	b.n	800506e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005068:	4b05      	ldr	r3, [pc, #20]	; (8005080 <HAL_RCC_GetSysClockFreq+0x204>)
 800506a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800506c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800506e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005070:	4618      	mov	r0, r3
 8005072:	3750      	adds	r7, #80	; 0x50
 8005074:	46bd      	mov	sp, r7
 8005076:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800507a:	bf00      	nop
 800507c:	40023800 	.word	0x40023800
 8005080:	00f42400 	.word	0x00f42400
 8005084:	007a1200 	.word	0x007a1200

08005088 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005088:	b480      	push	{r7}
 800508a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800508c:	4b03      	ldr	r3, [pc, #12]	; (800509c <HAL_RCC_GetHCLKFreq+0x14>)
 800508e:	681b      	ldr	r3, [r3, #0]
}
 8005090:	4618      	mov	r0, r3
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	20000000 	.word	0x20000000

080050a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80050a4:	f7ff fff0 	bl	8005088 <HAL_RCC_GetHCLKFreq>
 80050a8:	4602      	mov	r2, r0
 80050aa:	4b05      	ldr	r3, [pc, #20]	; (80050c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	0a9b      	lsrs	r3, r3, #10
 80050b0:	f003 0307 	and.w	r3, r3, #7
 80050b4:	4903      	ldr	r1, [pc, #12]	; (80050c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050b6:	5ccb      	ldrb	r3, [r1, r3]
 80050b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050bc:	4618      	mov	r0, r3
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	40023800 	.word	0x40023800
 80050c4:	0801128c 	.word	0x0801128c

080050c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80050cc:	f7ff ffdc 	bl	8005088 <HAL_RCC_GetHCLKFreq>
 80050d0:	4602      	mov	r2, r0
 80050d2:	4b05      	ldr	r3, [pc, #20]	; (80050e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	0b5b      	lsrs	r3, r3, #13
 80050d8:	f003 0307 	and.w	r3, r3, #7
 80050dc:	4903      	ldr	r1, [pc, #12]	; (80050ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80050de:	5ccb      	ldrb	r3, [r1, r3]
 80050e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	40023800 	.word	0x40023800
 80050ec:	0801128c 	.word	0x0801128c

080050f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b088      	sub	sp, #32
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80050f8:	2300      	movs	r3, #0
 80050fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80050fc:	2300      	movs	r3, #0
 80050fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005100:	2300      	movs	r3, #0
 8005102:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005104:	2300      	movs	r3, #0
 8005106:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005108:	2300      	movs	r3, #0
 800510a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b00      	cmp	r3, #0
 8005116:	d012      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005118:	4b69      	ldr	r3, [pc, #420]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	4a68      	ldr	r2, [pc, #416]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800511e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005122:	6093      	str	r3, [r2, #8]
 8005124:	4b66      	ldr	r3, [pc, #408]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800512c:	4964      	ldr	r1, [pc, #400]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800512e:	4313      	orrs	r3, r2
 8005130:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800513a:	2301      	movs	r3, #1
 800513c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d017      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800514a:	4b5d      	ldr	r3, [pc, #372]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800514c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005150:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005158:	4959      	ldr	r1, [pc, #356]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800515a:	4313      	orrs	r3, r2
 800515c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005164:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005168:	d101      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800516a:	2301      	movs	r3, #1
 800516c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005176:	2301      	movs	r3, #1
 8005178:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d017      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005186:	4b4e      	ldr	r3, [pc, #312]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005188:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800518c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005194:	494a      	ldr	r1, [pc, #296]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005196:	4313      	orrs	r3, r2
 8005198:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051a4:	d101      	bne.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80051a6:	2301      	movs	r3, #1
 80051a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80051b2:	2301      	movs	r3, #1
 80051b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80051c2:	2301      	movs	r3, #1
 80051c4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0320 	and.w	r3, r3, #32
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f000 808b 	beq.w	80052ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80051d4:	4b3a      	ldr	r3, [pc, #232]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d8:	4a39      	ldr	r2, [pc, #228]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051de:	6413      	str	r3, [r2, #64]	; 0x40
 80051e0:	4b37      	ldr	r3, [pc, #220]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051e8:	60bb      	str	r3, [r7, #8]
 80051ea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80051ec:	4b35      	ldr	r3, [pc, #212]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a34      	ldr	r2, [pc, #208]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051f8:	f7fc fb00 	bl	80017fc <HAL_GetTick>
 80051fc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80051fe:	e008      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005200:	f7fc fafc 	bl	80017fc <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b64      	cmp	r3, #100	; 0x64
 800520c:	d901      	bls.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e38f      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005212:	4b2c      	ldr	r3, [pc, #176]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800521a:	2b00      	cmp	r3, #0
 800521c:	d0f0      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800521e:	4b28      	ldr	r3, [pc, #160]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005226:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d035      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	429a      	cmp	r2, r3
 800523a:	d02e      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800523c:	4b20      	ldr	r3, [pc, #128]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800523e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005244:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005246:	4b1e      	ldr	r3, [pc, #120]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524a:	4a1d      	ldr	r2, [pc, #116]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800524c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005250:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005252:	4b1b      	ldr	r3, [pc, #108]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005256:	4a1a      	ldr	r2, [pc, #104]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005258:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800525c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800525e:	4a18      	ldr	r2, [pc, #96]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005264:	4b16      	ldr	r3, [pc, #88]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	2b01      	cmp	r3, #1
 800526e:	d114      	bne.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005270:	f7fc fac4 	bl	80017fc <HAL_GetTick>
 8005274:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005276:	e00a      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005278:	f7fc fac0 	bl	80017fc <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	f241 3288 	movw	r2, #5000	; 0x1388
 8005286:	4293      	cmp	r3, r2
 8005288:	d901      	bls.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e351      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800528e:	4b0c      	ldr	r3, [pc, #48]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d0ee      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052a6:	d111      	bne.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80052a8:	4b05      	ldr	r3, [pc, #20]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80052b4:	4b04      	ldr	r3, [pc, #16]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80052b6:	400b      	ands	r3, r1
 80052b8:	4901      	ldr	r1, [pc, #4]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	608b      	str	r3, [r1, #8]
 80052be:	e00b      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80052c0:	40023800 	.word	0x40023800
 80052c4:	40007000 	.word	0x40007000
 80052c8:	0ffffcff 	.word	0x0ffffcff
 80052cc:	4bac      	ldr	r3, [pc, #688]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	4aab      	ldr	r2, [pc, #684]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052d2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80052d6:	6093      	str	r3, [r2, #8]
 80052d8:	4ba9      	ldr	r3, [pc, #676]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052e4:	49a6      	ldr	r1, [pc, #664]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0310 	and.w	r3, r3, #16
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d010      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80052f6:	4ba2      	ldr	r3, [pc, #648]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052fc:	4aa0      	ldr	r2, [pc, #640]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005302:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005306:	4b9e      	ldr	r3, [pc, #632]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005308:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005310:	499b      	ldr	r1, [pc, #620]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005312:	4313      	orrs	r3, r2
 8005314:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00a      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005324:	4b96      	ldr	r3, [pc, #600]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005332:	4993      	ldr	r1, [pc, #588]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005334:	4313      	orrs	r3, r2
 8005336:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00a      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005346:	4b8e      	ldr	r3, [pc, #568]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800534c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005354:	498a      	ldr	r1, [pc, #552]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005356:	4313      	orrs	r3, r2
 8005358:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00a      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005368:	4b85      	ldr	r3, [pc, #532]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800536a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800536e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005376:	4982      	ldr	r1, [pc, #520]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005378:	4313      	orrs	r3, r2
 800537a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00a      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800538a:	4b7d      	ldr	r3, [pc, #500]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800538c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005390:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005398:	4979      	ldr	r1, [pc, #484]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800539a:	4313      	orrs	r3, r2
 800539c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00a      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053ac:	4b74      	ldr	r3, [pc, #464]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b2:	f023 0203 	bic.w	r2, r3, #3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ba:	4971      	ldr	r1, [pc, #452]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00a      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053ce:	4b6c      	ldr	r3, [pc, #432]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d4:	f023 020c 	bic.w	r2, r3, #12
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053dc:	4968      	ldr	r1, [pc, #416]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00a      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053f0:	4b63      	ldr	r3, [pc, #396]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053fe:	4960      	ldr	r1, [pc, #384]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005400:	4313      	orrs	r3, r2
 8005402:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00a      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005412:	4b5b      	ldr	r3, [pc, #364]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005418:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005420:	4957      	ldr	r1, [pc, #348]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005422:	4313      	orrs	r3, r2
 8005424:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00a      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005434:	4b52      	ldr	r3, [pc, #328]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800543a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005442:	494f      	ldr	r1, [pc, #316]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005444:	4313      	orrs	r3, r2
 8005446:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00a      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005456:	4b4a      	ldr	r3, [pc, #296]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800545c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005464:	4946      	ldr	r1, [pc, #280]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005466:	4313      	orrs	r3, r2
 8005468:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00a      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005478:	4b41      	ldr	r3, [pc, #260]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800547a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800547e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005486:	493e      	ldr	r1, [pc, #248]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005488:	4313      	orrs	r3, r2
 800548a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00a      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800549a:	4b39      	ldr	r3, [pc, #228]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800549c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054a8:	4935      	ldr	r1, [pc, #212]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00a      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80054bc:	4b30      	ldr	r3, [pc, #192]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054ca:	492d      	ldr	r1, [pc, #180]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d011      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80054de:	4b28      	ldr	r3, [pc, #160]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054ec:	4924      	ldr	r1, [pc, #144]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054fc:	d101      	bne.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80054fe:	2301      	movs	r3, #1
 8005500:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0308 	and.w	r3, r3, #8
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800550e:	2301      	movs	r3, #1
 8005510:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00a      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800551e:	4b18      	ldr	r3, [pc, #96]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005524:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800552c:	4914      	ldr	r1, [pc, #80]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800552e:	4313      	orrs	r3, r2
 8005530:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00b      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005540:	4b0f      	ldr	r3, [pc, #60]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005546:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005550:	490b      	ldr	r1, [pc, #44]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005552:	4313      	orrs	r3, r2
 8005554:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00f      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005564:	4b06      	ldr	r3, [pc, #24]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800556a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005574:	4902      	ldr	r1, [pc, #8]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005576:	4313      	orrs	r3, r2
 8005578:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800557c:	e002      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800557e:	bf00      	nop
 8005580:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00b      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005590:	4b8a      	ldr	r3, [pc, #552]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005592:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005596:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a0:	4986      	ldr	r1, [pc, #536]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00b      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80055b4:	4b81      	ldr	r3, [pc, #516]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055c4:	497d      	ldr	r1, [pc, #500]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d006      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f000 80d6 	beq.w	800578c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80055e0:	4b76      	ldr	r3, [pc, #472]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a75      	ldr	r2, [pc, #468]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055ec:	f7fc f906 	bl	80017fc <HAL_GetTick>
 80055f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055f2:	e008      	b.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80055f4:	f7fc f902 	bl	80017fc <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	2b64      	cmp	r3, #100	; 0x64
 8005600:	d901      	bls.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e195      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005606:	4b6d      	ldr	r3, [pc, #436]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1f0      	bne.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	2b00      	cmp	r3, #0
 800561c:	d021      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005622:	2b00      	cmp	r3, #0
 8005624:	d11d      	bne.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005626:	4b65      	ldr	r3, [pc, #404]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005628:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800562c:	0c1b      	lsrs	r3, r3, #16
 800562e:	f003 0303 	and.w	r3, r3, #3
 8005632:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005634:	4b61      	ldr	r3, [pc, #388]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005636:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800563a:	0e1b      	lsrs	r3, r3, #24
 800563c:	f003 030f 	and.w	r3, r3, #15
 8005640:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	019a      	lsls	r2, r3, #6
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	041b      	lsls	r3, r3, #16
 800564c:	431a      	orrs	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	061b      	lsls	r3, r3, #24
 8005652:	431a      	orrs	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	071b      	lsls	r3, r3, #28
 800565a:	4958      	ldr	r1, [pc, #352]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800565c:	4313      	orrs	r3, r2
 800565e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d004      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005672:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005676:	d00a      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005680:	2b00      	cmp	r3, #0
 8005682:	d02e      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005688:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800568c:	d129      	bne.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800568e:	4b4b      	ldr	r3, [pc, #300]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005690:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005694:	0c1b      	lsrs	r3, r3, #16
 8005696:	f003 0303 	and.w	r3, r3, #3
 800569a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800569c:	4b47      	ldr	r3, [pc, #284]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800569e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056a2:	0f1b      	lsrs	r3, r3, #28
 80056a4:	f003 0307 	and.w	r3, r3, #7
 80056a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	019a      	lsls	r2, r3, #6
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	041b      	lsls	r3, r3, #16
 80056b4:	431a      	orrs	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	061b      	lsls	r3, r3, #24
 80056bc:	431a      	orrs	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	071b      	lsls	r3, r3, #28
 80056c2:	493e      	ldr	r1, [pc, #248]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80056ca:	4b3c      	ldr	r3, [pc, #240]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056d0:	f023 021f 	bic.w	r2, r3, #31
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d8:	3b01      	subs	r3, #1
 80056da:	4938      	ldr	r1, [pc, #224]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056dc:	4313      	orrs	r3, r2
 80056de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d01d      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80056ee:	4b33      	ldr	r3, [pc, #204]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056f4:	0e1b      	lsrs	r3, r3, #24
 80056f6:	f003 030f 	and.w	r3, r3, #15
 80056fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056fc:	4b2f      	ldr	r3, [pc, #188]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005702:	0f1b      	lsrs	r3, r3, #28
 8005704:	f003 0307 	and.w	r3, r3, #7
 8005708:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	019a      	lsls	r2, r3, #6
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	041b      	lsls	r3, r3, #16
 8005716:	431a      	orrs	r2, r3
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	061b      	lsls	r3, r3, #24
 800571c:	431a      	orrs	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	071b      	lsls	r3, r3, #28
 8005722:	4926      	ldr	r1, [pc, #152]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005724:	4313      	orrs	r3, r2
 8005726:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d011      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	019a      	lsls	r2, r3, #6
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	041b      	lsls	r3, r3, #16
 8005742:	431a      	orrs	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	061b      	lsls	r3, r3, #24
 800574a:	431a      	orrs	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	071b      	lsls	r3, r3, #28
 8005752:	491a      	ldr	r1, [pc, #104]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005754:	4313      	orrs	r3, r2
 8005756:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800575a:	4b18      	ldr	r3, [pc, #96]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a17      	ldr	r2, [pc, #92]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005760:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005764:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005766:	f7fc f849 	bl	80017fc <HAL_GetTick>
 800576a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800576c:	e008      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800576e:	f7fc f845 	bl	80017fc <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b64      	cmp	r3, #100	; 0x64
 800577a:	d901      	bls.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e0d8      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005780:	4b0e      	ldr	r3, [pc, #56]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d0f0      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	2b01      	cmp	r3, #1
 8005790:	f040 80ce 	bne.w	8005930 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005794:	4b09      	ldr	r3, [pc, #36]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a08      	ldr	r2, [pc, #32]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800579a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800579e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057a0:	f7fc f82c 	bl	80017fc <HAL_GetTick>
 80057a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057a6:	e00b      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80057a8:	f7fc f828 	bl	80017fc <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b64      	cmp	r3, #100	; 0x64
 80057b4:	d904      	bls.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e0bb      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80057ba:	bf00      	nop
 80057bc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057c0:	4b5e      	ldr	r3, [pc, #376]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057cc:	d0ec      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d003      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d009      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d02e      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d12a      	bne.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80057f6:	4b51      	ldr	r3, [pc, #324]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057fc:	0c1b      	lsrs	r3, r3, #16
 80057fe:	f003 0303 	and.w	r3, r3, #3
 8005802:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005804:	4b4d      	ldr	r3, [pc, #308]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800580a:	0f1b      	lsrs	r3, r3, #28
 800580c:	f003 0307 	and.w	r3, r3, #7
 8005810:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	019a      	lsls	r2, r3, #6
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	041b      	lsls	r3, r3, #16
 800581c:	431a      	orrs	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	061b      	lsls	r3, r3, #24
 8005824:	431a      	orrs	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	071b      	lsls	r3, r3, #28
 800582a:	4944      	ldr	r1, [pc, #272]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800582c:	4313      	orrs	r3, r2
 800582e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005832:	4b42      	ldr	r3, [pc, #264]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005834:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005838:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005840:	3b01      	subs	r3, #1
 8005842:	021b      	lsls	r3, r3, #8
 8005844:	493d      	ldr	r1, [pc, #244]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005846:	4313      	orrs	r3, r2
 8005848:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d022      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800585c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005860:	d11d      	bne.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005862:	4b36      	ldr	r3, [pc, #216]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005868:	0e1b      	lsrs	r3, r3, #24
 800586a:	f003 030f 	and.w	r3, r3, #15
 800586e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005870:	4b32      	ldr	r3, [pc, #200]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005876:	0f1b      	lsrs	r3, r3, #28
 8005878:	f003 0307 	and.w	r3, r3, #7
 800587c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	019a      	lsls	r2, r3, #6
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	041b      	lsls	r3, r3, #16
 800588a:	431a      	orrs	r2, r3
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	061b      	lsls	r3, r3, #24
 8005890:	431a      	orrs	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	071b      	lsls	r3, r3, #28
 8005896:	4929      	ldr	r1, [pc, #164]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005898:	4313      	orrs	r3, r2
 800589a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0308 	and.w	r3, r3, #8
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d028      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80058aa:	4b24      	ldr	r3, [pc, #144]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b0:	0e1b      	lsrs	r3, r3, #24
 80058b2:	f003 030f 	and.w	r3, r3, #15
 80058b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80058b8:	4b20      	ldr	r3, [pc, #128]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058be:	0c1b      	lsrs	r3, r3, #16
 80058c0:	f003 0303 	and.w	r3, r3, #3
 80058c4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	019a      	lsls	r2, r3, #6
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	041b      	lsls	r3, r3, #16
 80058d0:	431a      	orrs	r2, r3
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	061b      	lsls	r3, r3, #24
 80058d6:	431a      	orrs	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	69db      	ldr	r3, [r3, #28]
 80058dc:	071b      	lsls	r3, r3, #28
 80058de:	4917      	ldr	r1, [pc, #92]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058e0:	4313      	orrs	r3, r2
 80058e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80058e6:	4b15      	ldr	r3, [pc, #84]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f4:	4911      	ldr	r1, [pc, #68]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80058fc:	4b0f      	ldr	r3, [pc, #60]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a0e      	ldr	r2, [pc, #56]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005906:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005908:	f7fb ff78 	bl	80017fc <HAL_GetTick>
 800590c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800590e:	e008      	b.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005910:	f7fb ff74 	bl	80017fc <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	2b64      	cmp	r3, #100	; 0x64
 800591c:	d901      	bls.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e007      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005922:	4b06      	ldr	r3, [pc, #24]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800592a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800592e:	d1ef      	bne.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3720      	adds	r7, #32
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	40023800 	.word	0x40023800

08005940 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e022      	b.n	8005998 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d105      	bne.n	800596a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f7fb fc3b 	bl	80011e0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2203      	movs	r2, #3
 800596e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f814 	bl	80059a0 <HAL_SD_InitCard>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d001      	beq.n	8005982 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e00a      	b.n	8005998 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3708      	adds	r7, #8
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80059a0:	b5b0      	push	{r4, r5, r7, lr}
 80059a2:	b08e      	sub	sp, #56	; 0x38
 80059a4:	af04      	add	r7, sp, #16
 80059a6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80059a8:	2300      	movs	r3, #0
 80059aa:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80059ac:	2300      	movs	r3, #0
 80059ae:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80059b0:	2300      	movs	r3, #0
 80059b2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80059b4:	2300      	movs	r3, #0
 80059b6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80059b8:	2300      	movs	r3, #0
 80059ba:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80059bc:	2376      	movs	r3, #118	; 0x76
 80059be:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681d      	ldr	r5, [r3, #0]
 80059c4:	466c      	mov	r4, sp
 80059c6:	f107 0314 	add.w	r3, r7, #20
 80059ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80059ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80059d2:	f107 0308 	add.w	r3, r7, #8
 80059d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059d8:	4628      	mov	r0, r5
 80059da:	f001 fdc5 	bl	8007568 <SDMMC_Init>
 80059de:	4603      	mov	r3, r0
 80059e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80059e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d001      	beq.n	80059f0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e059      	b.n	8005aa4 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059fe:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f001 fdf9 	bl	80075fc <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a18:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8005a1a:	2002      	movs	r0, #2
 8005a1c:	f7fb fefa 	bl	8001814 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 ff59 	bl	80068d8 <SD_PowerON>
 8005a26:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a28:	6a3b      	ldr	r3, [r7, #32]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00b      	beq.n	8005a46 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	431a      	orrs	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e02e      	b.n	8005aa4 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 fe78 	bl	800673c <SD_InitCard>
 8005a4c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a4e:	6a3b      	ldr	r3, [r7, #32]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00b      	beq.n	8005a6c <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a60:	6a3b      	ldr	r3, [r7, #32]
 8005a62:	431a      	orrs	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e01b      	b.n	8005aa4 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a74:	4618      	mov	r0, r3
 8005a76:	f001 fe53 	bl	8007720 <SDMMC_CmdBlockLength>
 8005a7a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a7c:	6a3b      	ldr	r3, [r7, #32]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00f      	beq.n	8005aa2 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a09      	ldr	r2, [pc, #36]	; (8005aac <HAL_SD_InitCard+0x10c>)
 8005a88:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a8e:	6a3b      	ldr	r3, [r7, #32]
 8005a90:	431a      	orrs	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e000      	b.n	8005aa4 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3728      	adds	r7, #40	; 0x28
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bdb0      	pop	{r4, r5, r7, pc}
 8005aac:	004005ff 	.word	0x004005ff

08005ab0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b08c      	sub	sp, #48	; 0x30
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
 8005abc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d107      	bne.n	8005ad8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005acc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e0c3      	b.n	8005c60 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	f040 80bc 	bne.w	8005c5e <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005aec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	441a      	add	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d907      	bls.n	8005b0a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e0aa      	b.n	8005c60 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2203      	movs	r2, #3
 8005b0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2200      	movs	r2, #0
 8005b18:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8005b28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2e:	4a4e      	ldr	r2, [pc, #312]	; (8005c68 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8005b30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	4a4d      	ldr	r2, [pc, #308]	; (8005c6c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8005b38:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3e:	2200      	movs	r2, #0
 8005b40:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b46:	2200      	movs	r2, #0
 8005b48:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5a:	689a      	ldr	r2, [r3, #8]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	3380      	adds	r3, #128	; 0x80
 8005b70:	4619      	mov	r1, r3
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	025b      	lsls	r3, r3, #9
 8005b78:	089b      	lsrs	r3, r3, #2
 8005b7a:	f7fc fe33 	bl	80027e4 <HAL_DMA_Start_IT>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d017      	beq.n	8005bb4 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8005b92:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a35      	ldr	r2, [pc, #212]	; (8005c70 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8005b9a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e055      	b.n	8005c60 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f042 0208 	orr.w	r2, r2, #8
 8005bc2:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d002      	beq.n	8005bd2 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8005bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bce:	025b      	lsls	r3, r3, #9
 8005bd0:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005bd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bd6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	025b      	lsls	r3, r3, #9
 8005bdc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005bde:	2390      	movs	r3, #144	; 0x90
 8005be0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005be2:	2302      	movs	r3, #2
 8005be4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005be6:	2300      	movs	r3, #0
 8005be8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8005bea:	2301      	movs	r3, #1
 8005bec:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f107 0210 	add.w	r2, r7, #16
 8005bf6:	4611      	mov	r1, r2
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f001 fd65 	bl	80076c8 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d90a      	bls.n	8005c1a <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2282      	movs	r2, #130	; 0x82
 8005c08:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c10:	4618      	mov	r0, r3
 8005c12:	f001 fdc9 	bl	80077a8 <SDMMC_CmdReadMultiBlock>
 8005c16:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005c18:	e009      	b.n	8005c2e <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2281      	movs	r2, #129	; 0x81
 8005c1e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c26:	4618      	mov	r0, r3
 8005c28:	f001 fd9c 	bl	8007764 <SDMMC_CmdReadSingleBlock>
 8005c2c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8005c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d012      	beq.n	8005c5a <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a0d      	ldr	r2, [pc, #52]	; (8005c70 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8005c3a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c42:	431a      	orrs	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e002      	b.n	8005c60 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	e000      	b.n	8005c60 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8005c5e:	2302      	movs	r3, #2
  }
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3730      	adds	r7, #48	; 0x30
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	0800654b 	.word	0x0800654b
 8005c6c:	080065bd 	.word	0x080065bd
 8005c70:	004005ff 	.word	0x004005ff

08005c74 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b08c      	sub	sp, #48	; 0x30
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
 8005c80:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d107      	bne.n	8005c9c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c90:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e0c6      	b.n	8005e2a <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	f040 80bf 	bne.w	8005e28 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005cb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	441a      	add	r2, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d907      	bls.n	8005cce <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e0ad      	b.n	8005e2a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2203      	movs	r2, #3
 8005cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f042 021a 	orr.w	r2, r2, #26
 8005cec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf2:	4a50      	ldr	r2, [pc, #320]	; (8005e34 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8005cf4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cfa:	4a4f      	ldr	r2, [pc, #316]	; (8005e38 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8005cfc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d02:	2200      	movs	r2, #0
 8005d04:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d002      	beq.n	8005d14 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8005d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d10:	025b      	lsls	r3, r3, #9
 8005d12:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d90a      	bls.n	8005d30 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	22a0      	movs	r2, #160	; 0xa0
 8005d1e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d26:	4618      	mov	r0, r3
 8005d28:	f001 fd82 	bl	8007830 <SDMMC_CmdWriteMultiBlock>
 8005d2c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005d2e:	e009      	b.n	8005d44 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2290      	movs	r2, #144	; 0x90
 8005d34:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f001 fd55 	bl	80077ec <SDMMC_CmdWriteSingleBlock>
 8005d42:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d012      	beq.n	8005d70 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a3b      	ldr	r2, [pc, #236]	; (8005e3c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8005d50:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e05c      	b.n	8005e2a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f042 0208 	orr.w	r2, r2, #8
 8005d7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d84:	2240      	movs	r2, #64	; 0x40
 8005d86:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d98:	689a      	ldr	r2, [r3, #8]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005da8:	68b9      	ldr	r1, [r7, #8]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	3380      	adds	r3, #128	; 0x80
 8005db0:	461a      	mov	r2, r3
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	025b      	lsls	r3, r3, #9
 8005db6:	089b      	lsrs	r3, r3, #2
 8005db8:	f7fc fd14 	bl	80027e4 <HAL_DMA_Start_IT>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d01a      	beq.n	8005df8 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f022 021a 	bic.w	r2, r2, #26
 8005dd0:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a19      	ldr	r2, [pc, #100]	; (8005e3c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8005dd8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dde:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e018      	b.n	8005e2a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005df8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dfc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	025b      	lsls	r3, r3, #9
 8005e02:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005e04:	2390      	movs	r3, #144	; 0x90
 8005e06:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8005e10:	2301      	movs	r3, #1
 8005e12:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f107 0210 	add.w	r2, r7, #16
 8005e1c:	4611      	mov	r1, r2
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f001 fc52 	bl	80076c8 <SDMMC_ConfigData>

      return HAL_OK;
 8005e24:	2300      	movs	r3, #0
 8005e26:	e000      	b.n	8005e2a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8005e28:	2302      	movs	r3, #2
  }
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3730      	adds	r7, #48	; 0x30
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	08006521 	.word	0x08006521
 8005e38:	080065bd 	.word	0x080065bd
 8005e3c:	004005ff 	.word	0x004005ff

08005e40 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d008      	beq.n	8005e6e <HAL_SD_IRQHandler+0x2e>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f003 0308 	and.w	r3, r3, #8
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d003      	beq.n	8005e6e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 fdec 	bl	8006a44 <SD_Read_IT>
 8005e6c:	e15a      	b.n	8006124 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 808d 	beq.w	8005f98 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e86:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	4b9a      	ldr	r3, [pc, #616]	; (80060fc <HAL_SD_IRQHandler+0x2bc>)
 8005e94:	400b      	ands	r3, r1
 8005e96:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 0201 	bic.w	r2, r2, #1
 8005ea6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f003 0308 	and.w	r3, r3, #8
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d039      	beq.n	8005f26 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f003 0302 	and.w	r3, r3, #2
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d104      	bne.n	8005ec6 <HAL_SD_IRQHandler+0x86>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f003 0320 	and.w	r3, r3, #32
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d011      	beq.n	8005eea <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f001 fcd2 	bl	8007874 <SDMMC_CmdStopTransfer>
 8005ed0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d008      	beq.n	8005eea <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	431a      	orrs	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 f921 	bl	800612c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f240 523a 	movw	r2, #1338	; 0x53a
 8005ef2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d104      	bne.n	8005f16 <HAL_SD_IRQHandler+0xd6>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f003 0302 	and.w	r3, r3, #2
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d003      	beq.n	8005f1e <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f003 fd3c 	bl	8009994 <HAL_SD_RxCpltCallback>
 8005f1c:	e102      	b.n	8006124 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f003 fd2e 	bl	8009980 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005f24:	e0fe      	b.n	8006124 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f000 80f9 	beq.w	8006124 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f003 0320 	and.w	r3, r3, #32
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d011      	beq.n	8005f60 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f001 fc97 	bl	8007874 <SDMMC_CmdStopTransfer>
 8005f46:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d008      	beq.n	8005f60 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	431a      	orrs	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f8e6 	bl	800612c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f040 80dc 	bne.w	8006124 <HAL_SD_IRQHandler+0x2e4>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f040 80d6 	bne.w	8006124 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f022 0208 	bic.w	r2, r2, #8
 8005f86:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f003 fcf5 	bl	8009980 <HAL_SD_TxCpltCallback>
}
 8005f96:	e0c5      	b.n	8006124 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d008      	beq.n	8005fb8 <HAL_SD_IRQHandler+0x178>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f003 0308 	and.w	r3, r3, #8
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d003      	beq.n	8005fb8 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 fd98 	bl	8006ae6 <SD_Write_IT>
 8005fb6:	e0b5      	b.n	8006124 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fbe:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f000 80ae 	beq.w	8006124 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fce:	f003 0302 	and.w	r3, r3, #2
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d005      	beq.n	8005fe2 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fda:	f043 0202 	orr.w	r2, r3, #2
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe8:	f003 0308 	and.w	r3, r3, #8
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d005      	beq.n	8005ffc <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff4:	f043 0208 	orr.w	r2, r3, #8
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006002:	f003 0320 	and.w	r3, r3, #32
 8006006:	2b00      	cmp	r3, #0
 8006008:	d005      	beq.n	8006016 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600e:	f043 0220 	orr.w	r2, r3, #32
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800601c:	f003 0310 	and.w	r3, r3, #16
 8006020:	2b00      	cmp	r3, #0
 8006022:	d005      	beq.n	8006030 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006028:	f043 0210 	orr.w	r2, r3, #16
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f240 523a 	movw	r2, #1338	; 0x53a
 8006038:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006048:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4618      	mov	r0, r3
 8006050:	f001 fc10 	bl	8007874 <SDMMC_CmdStopTransfer>
 8006054:	4602      	mov	r2, r0
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605a:	431a      	orrs	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f003 0308 	and.w	r3, r3, #8
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00a      	beq.n	8006080 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 f857 	bl	800612c <HAL_SD_ErrorCallback>
}
 800607e:	e051      	b.n	8006124 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006086:	2b00      	cmp	r3, #0
 8006088:	d04c      	beq.n	8006124 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f003 0310 	and.w	r3, r3, #16
 8006090:	2b00      	cmp	r3, #0
 8006092:	d104      	bne.n	800609e <HAL_SD_IRQHandler+0x25e>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f003 0320 	and.w	r3, r3, #32
 800609a:	2b00      	cmp	r3, #0
 800609c:	d011      	beq.n	80060c2 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a2:	4a17      	ldr	r2, [pc, #92]	; (8006100 <HAL_SD_IRQHandler+0x2c0>)
 80060a4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7fc fbfa 	bl	80028a4 <HAL_DMA_Abort_IT>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d036      	beq.n	8006124 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ba:	4618      	mov	r0, r3
 80060bc:	f000 fad0 	bl	8006660 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80060c0:	e030      	b.n	8006124 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d104      	bne.n	80060d6 <HAL_SD_IRQHandler+0x296>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d018      	beq.n	8006108 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060da:	4a0a      	ldr	r2, [pc, #40]	; (8006104 <HAL_SD_IRQHandler+0x2c4>)
 80060dc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7fc fbde 	bl	80028a4 <HAL_DMA_Abort_IT>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d01a      	beq.n	8006124 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f2:	4618      	mov	r0, r3
 80060f4:	f000 faeb 	bl	80066ce <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80060f8:	e014      	b.n	8006124 <HAL_SD_IRQHandler+0x2e4>
 80060fa:	bf00      	nop
 80060fc:	ffff3ec5 	.word	0xffff3ec5
 8006100:	08006661 	.word	0x08006661
 8006104:	080066cf 	.word	0x080066cf
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f003 fc25 	bl	800996c <HAL_SD_AbortCallback>
}
 8006122:	e7ff      	b.n	8006124 <HAL_SD_IRQHandler+0x2e4>
 8006124:	bf00      	nop
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800614e:	0f9b      	lsrs	r3, r3, #30
 8006150:	b2da      	uxtb	r2, r3
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800615a:	0e9b      	lsrs	r3, r3, #26
 800615c:	b2db      	uxtb	r3, r3
 800615e:	f003 030f 	and.w	r3, r3, #15
 8006162:	b2da      	uxtb	r2, r3
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800616c:	0e1b      	lsrs	r3, r3, #24
 800616e:	b2db      	uxtb	r3, r3
 8006170:	f003 0303 	and.w	r3, r3, #3
 8006174:	b2da      	uxtb	r2, r3
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800617e:	0c1b      	lsrs	r3, r3, #16
 8006180:	b2da      	uxtb	r2, r3
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800618a:	0a1b      	lsrs	r3, r3, #8
 800618c:	b2da      	uxtb	r2, r3
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006196:	b2da      	uxtb	r2, r3
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061a0:	0d1b      	lsrs	r3, r3, #20
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061ac:	0c1b      	lsrs	r3, r3, #16
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	f003 030f 	and.w	r3, r3, #15
 80061b4:	b2da      	uxtb	r2, r3
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061be:	0bdb      	lsrs	r3, r3, #15
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	b2da      	uxtb	r2, r3
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061d0:	0b9b      	lsrs	r3, r3, #14
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	b2da      	uxtb	r2, r3
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061e2:	0b5b      	lsrs	r3, r3, #13
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061f4:	0b1b      	lsrs	r3, r3, #12
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	b2da      	uxtb	r2, r3
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	2200      	movs	r2, #0
 8006206:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800620c:	2b00      	cmp	r3, #0
 800620e:	d163      	bne.n	80062d8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006214:	009a      	lsls	r2, r3, #2
 8006216:	f640 73fc 	movw	r3, #4092	; 0xffc
 800621a:	4013      	ands	r3, r2
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006220:	0f92      	lsrs	r2, r2, #30
 8006222:	431a      	orrs	r2, r3
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800622c:	0edb      	lsrs	r3, r3, #27
 800622e:	b2db      	uxtb	r3, r3
 8006230:	f003 0307 	and.w	r3, r3, #7
 8006234:	b2da      	uxtb	r2, r3
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800623e:	0e1b      	lsrs	r3, r3, #24
 8006240:	b2db      	uxtb	r3, r3
 8006242:	f003 0307 	and.w	r3, r3, #7
 8006246:	b2da      	uxtb	r2, r3
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006250:	0d5b      	lsrs	r3, r3, #21
 8006252:	b2db      	uxtb	r3, r3
 8006254:	f003 0307 	and.w	r3, r3, #7
 8006258:	b2da      	uxtb	r2, r3
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006262:	0c9b      	lsrs	r3, r3, #18
 8006264:	b2db      	uxtb	r3, r3
 8006266:	f003 0307 	and.w	r3, r3, #7
 800626a:	b2da      	uxtb	r2, r3
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006274:	0bdb      	lsrs	r3, r3, #15
 8006276:	b2db      	uxtb	r3, r3
 8006278:	f003 0307 	and.w	r3, r3, #7
 800627c:	b2da      	uxtb	r2, r3
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	1c5a      	adds	r2, r3, #1
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	7e1b      	ldrb	r3, [r3, #24]
 8006290:	b2db      	uxtb	r3, r3
 8006292:	f003 0307 	and.w	r3, r3, #7
 8006296:	3302      	adds	r3, #2
 8006298:	2201      	movs	r2, #1
 800629a:	fa02 f303 	lsl.w	r3, r2, r3
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80062a2:	fb03 f202 	mul.w	r2, r3, r2
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	7a1b      	ldrb	r3, [r3, #8]
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	f003 030f 	and.w	r3, r3, #15
 80062b4:	2201      	movs	r2, #1
 80062b6:	409a      	lsls	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80062c4:	0a52      	lsrs	r2, r2, #9
 80062c6:	fb03 f202 	mul.w	r2, r3, r2
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062d4:	661a      	str	r2, [r3, #96]	; 0x60
 80062d6:	e031      	b.n	800633c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d11d      	bne.n	800631c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062e4:	041b      	lsls	r3, r3, #16
 80062e6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062ee:	0c1b      	lsrs	r3, r3, #16
 80062f0:	431a      	orrs	r2, r3
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	3301      	adds	r3, #1
 80062fc:	029a      	lsls	r2, r3, #10
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006310:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	661a      	str	r2, [r3, #96]	; 0x60
 800631a:	e00f      	b.n	800633c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a58      	ldr	r2, [pc, #352]	; (8006484 <HAL_SD_GetCardCSD+0x344>)
 8006322:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006328:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e09d      	b.n	8006478 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006340:	0b9b      	lsrs	r3, r3, #14
 8006342:	b2db      	uxtb	r3, r3
 8006344:	f003 0301 	and.w	r3, r3, #1
 8006348:	b2da      	uxtb	r2, r3
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006352:	09db      	lsrs	r3, r3, #7
 8006354:	b2db      	uxtb	r3, r3
 8006356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800635a:	b2da      	uxtb	r2, r3
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006364:	b2db      	uxtb	r3, r3
 8006366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800636a:	b2da      	uxtb	r2, r3
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006374:	0fdb      	lsrs	r3, r3, #31
 8006376:	b2da      	uxtb	r2, r3
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006380:	0f5b      	lsrs	r3, r3, #29
 8006382:	b2db      	uxtb	r3, r3
 8006384:	f003 0303 	and.w	r3, r3, #3
 8006388:	b2da      	uxtb	r2, r3
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006392:	0e9b      	lsrs	r3, r3, #26
 8006394:	b2db      	uxtb	r3, r3
 8006396:	f003 0307 	and.w	r3, r3, #7
 800639a:	b2da      	uxtb	r2, r3
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a4:	0d9b      	lsrs	r3, r3, #22
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	f003 030f 	and.w	r3, r3, #15
 80063ac:	b2da      	uxtb	r2, r3
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b6:	0d5b      	lsrs	r3, r3, #21
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	b2da      	uxtb	r2, r3
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d2:	0c1b      	lsrs	r3, r3, #16
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	f003 0301 	and.w	r3, r3, #1
 80063da:	b2da      	uxtb	r2, r3
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e6:	0bdb      	lsrs	r3, r3, #15
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	b2da      	uxtb	r2, r3
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063fa:	0b9b      	lsrs	r3, r3, #14
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	b2da      	uxtb	r2, r3
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800640e:	0b5b      	lsrs	r3, r3, #13
 8006410:	b2db      	uxtb	r3, r3
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	b2da      	uxtb	r2, r3
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006422:	0b1b      	lsrs	r3, r3, #12
 8006424:	b2db      	uxtb	r3, r3
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	b2da      	uxtb	r2, r3
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006436:	0a9b      	lsrs	r3, r3, #10
 8006438:	b2db      	uxtb	r3, r3
 800643a:	f003 0303 	and.w	r3, r3, #3
 800643e:	b2da      	uxtb	r2, r3
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800644a:	0a1b      	lsrs	r3, r3, #8
 800644c:	b2db      	uxtb	r3, r3
 800644e:	f003 0303 	and.w	r3, r3, #3
 8006452:	b2da      	uxtb	r2, r3
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800645e:	085b      	lsrs	r3, r3, #1
 8006460:	b2db      	uxtb	r3, r3
 8006462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006466:	b2da      	uxtb	r2, r3
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	2201      	movs	r2, #1
 8006472:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	004005ff 	.word	0x004005ff

08006488 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80064e8:	2300      	movs	r3, #0
 80064ea:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80064ec:	f107 030c 	add.w	r3, r7, #12
 80064f0:	4619      	mov	r1, r3
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fa7e 	bl	80069f4 <SD_SendStatus>
 80064f8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d005      	beq.n	800650c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	431a      	orrs	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	0a5b      	lsrs	r3, r3, #9
 8006510:	f003 030f 	and.w	r3, r3, #15
 8006514:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006516:	693b      	ldr	r3, [r7, #16]
}
 8006518:	4618      	mov	r0, r3
 800651a:	3718      	adds	r7, #24
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800653c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800653e:	bf00      	nop
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr

0800654a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b084      	sub	sp, #16
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006556:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800655c:	2b82      	cmp	r3, #130	; 0x82
 800655e:	d111      	bne.n	8006584 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4618      	mov	r0, r3
 8006566:	f001 f985 	bl	8007874 <SDMMC_CmdStopTransfer>
 800656a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d008      	beq.n	8006584 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	431a      	orrs	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f7ff fdd4 	bl	800612c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f022 0208 	bic.w	r2, r2, #8
 8006592:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f240 523a 	movw	r2, #1338	; 0x53a
 800659c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f003 f9f1 	bl	8009994 <HAL_SD_RxCpltCallback>
#endif
}
 80065b2:	bf00      	nop
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
	...

080065bc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f7fc fb16 	bl	8002bfc <HAL_DMA_GetError>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d03e      	beq.n	8006654 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065dc:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d002      	beq.n	80065f2 <SD_DMAError+0x36>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d12d      	bne.n	800664e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a19      	ldr	r2, [pc, #100]	; (800665c <SD_DMAError+0xa0>)
 80065f8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006608:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006616:	6978      	ldr	r0, [r7, #20]
 8006618:	f7ff ff62 	bl	80064e0 <HAL_SD_GetCardState>
 800661c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	2b06      	cmp	r3, #6
 8006622:	d002      	beq.n	800662a <SD_DMAError+0x6e>
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	2b05      	cmp	r3, #5
 8006628:	d10a      	bne.n	8006640 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4618      	mov	r0, r3
 8006630:	f001 f920 	bl	8007874 <SDMMC_CmdStopTransfer>
 8006634:	4602      	mov	r2, r0
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663a:	431a      	orrs	r2, r3
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	2200      	movs	r2, #0
 800664c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800664e:	6978      	ldr	r0, [r7, #20]
 8006650:	f7ff fd6c 	bl	800612c <HAL_SD_ErrorCallback>
#endif
  }
}
 8006654:	bf00      	nop
 8006656:	3718      	adds	r7, #24
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	004005ff 	.word	0x004005ff

08006660 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f240 523a 	movw	r2, #1338	; 0x53a
 8006676:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f7ff ff31 	bl	80064e0 <HAL_SD_GetCardState>
 800667e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	2b06      	cmp	r3, #6
 8006692:	d002      	beq.n	800669a <SD_DMATxAbort+0x3a>
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	2b05      	cmp	r3, #5
 8006698:	d10a      	bne.n	80066b0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4618      	mov	r0, r3
 80066a0:	f001 f8e8 	bl	8007874 <SDMMC_CmdStopTransfer>
 80066a4:	4602      	mov	r2, r0
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066aa:	431a      	orrs	r2, r3
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d103      	bne.n	80066c0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f003 f957 	bl	800996c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80066be:	e002      	b.n	80066c6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f7ff fd33 	bl	800612c <HAL_SD_ErrorCallback>
}
 80066c6:	bf00      	nop
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b084      	sub	sp, #16
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066da:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f240 523a 	movw	r2, #1338	; 0x53a
 80066e4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f7ff fefa 	bl	80064e0 <HAL_SD_GetCardState>
 80066ec:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	2b06      	cmp	r3, #6
 8006700:	d002      	beq.n	8006708 <SD_DMARxAbort+0x3a>
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	2b05      	cmp	r3, #5
 8006706:	d10a      	bne.n	800671e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4618      	mov	r0, r3
 800670e:	f001 f8b1 	bl	8007874 <SDMMC_CmdStopTransfer>
 8006712:	4602      	mov	r2, r0
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006718:	431a      	orrs	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006722:	2b00      	cmp	r3, #0
 8006724:	d103      	bne.n	800672e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f003 f920 	bl	800996c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800672c:	e002      	b.n	8006734 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800672e:	68f8      	ldr	r0, [r7, #12]
 8006730:	f7ff fcfc 	bl	800612c <HAL_SD_ErrorCallback>
}
 8006734:	bf00      	nop
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800673c:	b5b0      	push	{r4, r5, r7, lr}
 800673e:	b094      	sub	sp, #80	; 0x50
 8006740:	af04      	add	r7, sp, #16
 8006742:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006744:	2301      	movs	r3, #1
 8006746:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4618      	mov	r0, r3
 800674e:	f000 ff63 	bl	8007618 <SDMMC_GetPowerState>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d102      	bne.n	800675e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006758:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800675c:	e0b8      	b.n	80068d0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006762:	2b03      	cmp	r3, #3
 8006764:	d02f      	beq.n	80067c6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4618      	mov	r0, r3
 800676c:	f001 f94a 	bl	8007a04 <SDMMC_CmdSendCID>
 8006770:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006774:	2b00      	cmp	r3, #0
 8006776:	d001      	beq.n	800677c <SD_InitCard+0x40>
    {
      return errorstate;
 8006778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800677a:	e0a9      	b.n	80068d0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2100      	movs	r1, #0
 8006782:	4618      	mov	r0, r3
 8006784:	f000 ff8d 	bl	80076a2 <SDMMC_GetResponse>
 8006788:	4602      	mov	r2, r0
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2104      	movs	r1, #4
 8006794:	4618      	mov	r0, r3
 8006796:	f000 ff84 	bl	80076a2 <SDMMC_GetResponse>
 800679a:	4602      	mov	r2, r0
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2108      	movs	r1, #8
 80067a6:	4618      	mov	r0, r3
 80067a8:	f000 ff7b 	bl	80076a2 <SDMMC_GetResponse>
 80067ac:	4602      	mov	r2, r0
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	210c      	movs	r1, #12
 80067b8:	4618      	mov	r0, r3
 80067ba:	f000 ff72 	bl	80076a2 <SDMMC_GetResponse>
 80067be:	4602      	mov	r2, r0
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ca:	2b03      	cmp	r3, #3
 80067cc:	d00d      	beq.n	80067ea <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f107 020e 	add.w	r2, r7, #14
 80067d6:	4611      	mov	r1, r2
 80067d8:	4618      	mov	r0, r3
 80067da:	f001 f950 	bl	8007a7e <SDMMC_CmdSetRelAdd>
 80067de:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80067e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d001      	beq.n	80067ea <SD_InitCard+0xae>
    {
      return errorstate;
 80067e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067e8:	e072      	b.n	80068d0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ee:	2b03      	cmp	r3, #3
 80067f0:	d036      	beq.n	8006860 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80067f2:	89fb      	ldrh	r3, [r7, #14]
 80067f4:	461a      	mov	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006802:	041b      	lsls	r3, r3, #16
 8006804:	4619      	mov	r1, r3
 8006806:	4610      	mov	r0, r2
 8006808:	f001 f91a 	bl	8007a40 <SDMMC_CmdSendCSD>
 800680c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800680e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006810:	2b00      	cmp	r3, #0
 8006812:	d001      	beq.n	8006818 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006816:	e05b      	b.n	80068d0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2100      	movs	r1, #0
 800681e:	4618      	mov	r0, r3
 8006820:	f000 ff3f 	bl	80076a2 <SDMMC_GetResponse>
 8006824:	4602      	mov	r2, r0
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2104      	movs	r1, #4
 8006830:	4618      	mov	r0, r3
 8006832:	f000 ff36 	bl	80076a2 <SDMMC_GetResponse>
 8006836:	4602      	mov	r2, r0
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2108      	movs	r1, #8
 8006842:	4618      	mov	r0, r3
 8006844:	f000 ff2d 	bl	80076a2 <SDMMC_GetResponse>
 8006848:	4602      	mov	r2, r0
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	210c      	movs	r1, #12
 8006854:	4618      	mov	r0, r3
 8006856:	f000 ff24 	bl	80076a2 <SDMMC_GetResponse>
 800685a:	4602      	mov	r2, r0
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2104      	movs	r1, #4
 8006866:	4618      	mov	r0, r3
 8006868:	f000 ff1b 	bl	80076a2 <SDMMC_GetResponse>
 800686c:	4603      	mov	r3, r0
 800686e:	0d1a      	lsrs	r2, r3, #20
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006874:	f107 0310 	add.w	r3, r7, #16
 8006878:	4619      	mov	r1, r3
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f7ff fc60 	bl	8006140 <HAL_SD_GetCardCSD>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d002      	beq.n	800688c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006886:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800688a:	e021      	b.n	80068d0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6819      	ldr	r1, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006894:	041b      	lsls	r3, r3, #16
 8006896:	2200      	movs	r2, #0
 8006898:	461c      	mov	r4, r3
 800689a:	4615      	mov	r5, r2
 800689c:	4622      	mov	r2, r4
 800689e:	462b      	mov	r3, r5
 80068a0:	4608      	mov	r0, r1
 80068a2:	f001 f809 	bl	80078b8 <SDMMC_CmdSelDesel>
 80068a6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80068a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d001      	beq.n	80068b2 <SD_InitCard+0x176>
  {
    return errorstate;
 80068ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068b0:	e00e      	b.n	80068d0 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681d      	ldr	r5, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	466c      	mov	r4, sp
 80068ba:	f103 0210 	add.w	r2, r3, #16
 80068be:	ca07      	ldmia	r2, {r0, r1, r2}
 80068c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80068c4:	3304      	adds	r3, #4
 80068c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80068c8:	4628      	mov	r0, r5
 80068ca:	f000 fe4d 	bl	8007568 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3740      	adds	r7, #64	; 0x40
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bdb0      	pop	{r4, r5, r7, pc}

080068d8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b086      	sub	sp, #24
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068e0:	2300      	movs	r3, #0
 80068e2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80068e4:	2300      	movs	r3, #0
 80068e6:	617b      	str	r3, [r7, #20]
 80068e8:	2300      	movs	r3, #0
 80068ea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4618      	mov	r0, r3
 80068f2:	f001 f804 	bl	80078fe <SDMMC_CmdGoIdleState>
 80068f6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <SD_PowerON+0x2a>
  {
    return errorstate;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	e072      	b.n	80069e8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4618      	mov	r0, r3
 8006908:	f001 f817 	bl	800793a <SDMMC_CmdOperCond>
 800690c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00d      	beq.n	8006930 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4618      	mov	r0, r3
 8006920:	f000 ffed 	bl	80078fe <SDMMC_CmdGoIdleState>
 8006924:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d004      	beq.n	8006936 <SD_PowerON+0x5e>
    {
      return errorstate;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	e05b      	b.n	80069e8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800693a:	2b01      	cmp	r3, #1
 800693c:	d137      	bne.n	80069ae <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2100      	movs	r1, #0
 8006944:	4618      	mov	r0, r3
 8006946:	f001 f817 	bl	8007978 <SDMMC_CmdAppCommand>
 800694a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d02d      	beq.n	80069ae <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006952:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006956:	e047      	b.n	80069e8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2100      	movs	r1, #0
 800695e:	4618      	mov	r0, r3
 8006960:	f001 f80a 	bl	8007978 <SDMMC_CmdAppCommand>
 8006964:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <SD_PowerON+0x98>
    {
      return errorstate;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	e03b      	b.n	80069e8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	491e      	ldr	r1, [pc, #120]	; (80069f0 <SD_PowerON+0x118>)
 8006976:	4618      	mov	r0, r3
 8006978:	f001 f820 	bl	80079bc <SDMMC_CmdAppOperCommand>
 800697c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d002      	beq.n	800698a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006984:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006988:	e02e      	b.n	80069e8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2100      	movs	r1, #0
 8006990:	4618      	mov	r0, r3
 8006992:	f000 fe86 	bl	80076a2 <SDMMC_GetResponse>
 8006996:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	0fdb      	lsrs	r3, r3, #31
 800699c:	2b01      	cmp	r3, #1
 800699e:	d101      	bne.n	80069a4 <SD_PowerON+0xcc>
 80069a0:	2301      	movs	r3, #1
 80069a2:	e000      	b.n	80069a6 <SD_PowerON+0xce>
 80069a4:	2300      	movs	r3, #0
 80069a6:	613b      	str	r3, [r7, #16]

    count++;
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	3301      	adds	r3, #1
 80069ac:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d802      	bhi.n	80069be <SD_PowerON+0xe6>
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d0cc      	beq.n	8006958 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d902      	bls.n	80069ce <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80069c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069cc:	e00c      	b.n	80069e8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d003      	beq.n	80069e0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	645a      	str	r2, [r3, #68]	; 0x44
 80069de:	e002      	b.n	80069e6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3718      	adds	r7, #24
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	c1100000 	.word	0xc1100000

080069f4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d102      	bne.n	8006a0a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006a04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a08:	e018      	b.n	8006a3c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a12:	041b      	lsls	r3, r3, #16
 8006a14:	4619      	mov	r1, r3
 8006a16:	4610      	mov	r0, r2
 8006a18:	f001 f852 	bl	8007ac0 <SDMMC_CmdSendStatus>
 8006a1c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d001      	beq.n	8006a28 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	e009      	b.n	8006a3c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f000 fe37 	bl	80076a2 <SDMMC_GetResponse>
 8006a34:	4602      	mov	r2, r0
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b086      	sub	sp, #24
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a50:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a56:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d03f      	beq.n	8006ade <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8006a5e:	2300      	movs	r3, #0
 8006a60:	617b      	str	r3, [r7, #20]
 8006a62:	e033      	b.n	8006acc <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f000 fda9 	bl	80075c0 <SDMMC_ReadFIFO>
 8006a6e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	b2da      	uxtb	r2, r3
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	3b01      	subs	r3, #1
 8006a82:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	0a1b      	lsrs	r3, r3, #8
 8006a88:	b2da      	uxtb	r2, r3
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	3301      	adds	r3, #1
 8006a92:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	3b01      	subs	r3, #1
 8006a98:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	0c1b      	lsrs	r3, r3, #16
 8006a9e:	b2da      	uxtb	r2, r3
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	3b01      	subs	r3, #1
 8006aae:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	0e1b      	lsrs	r3, r3, #24
 8006ab4:	b2da      	uxtb	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	3301      	adds	r3, #1
 8006abe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	617b      	str	r3, [r7, #20]
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	2b07      	cmp	r3, #7
 8006ad0:	d9c8      	bls.n	8006a64 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8006ade:	bf00      	nop
 8006ae0:	3718      	adds	r7, #24
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b086      	sub	sp, #24
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d043      	beq.n	8006b88 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006b00:	2300      	movs	r3, #0
 8006b02:	617b      	str	r3, [r7, #20]
 8006b04:	e037      	b.n	8006b76 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	3b01      	subs	r3, #1
 8006b16:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	021a      	lsls	r2, r3, #8
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	3301      	adds	r3, #1
 8006b28:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	3b01      	subs	r3, #1
 8006b2e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	041a      	lsls	r2, r3, #16
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	3b01      	subs	r3, #1
 8006b46:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	061a      	lsls	r2, r3, #24
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	3301      	adds	r3, #1
 8006b58:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f107 0208 	add.w	r2, r7, #8
 8006b68:	4611      	mov	r1, r2
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 fd35 	bl	80075da <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	3301      	adds	r3, #1
 8006b74:	617b      	str	r3, [r7, #20]
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	2b07      	cmp	r3, #7
 8006b7a:	d9c4      	bls.n	8006b06 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	693a      	ldr	r2, [r7, #16]
 8006b86:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8006b88:	bf00      	nop
 8006b8a:	3718      	adds	r7, #24
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d101      	bne.n	8006ba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e040      	b.n	8006c24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d106      	bne.n	8006bb8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f7fa fc20 	bl	80013f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2224      	movs	r2, #36	; 0x24
 8006bbc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f022 0201 	bic.w	r2, r2, #1
 8006bcc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f8b0 	bl	8006d34 <UART_SetConfig>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d101      	bne.n	8006bde <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e022      	b.n	8006c24 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d002      	beq.n	8006bec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 fb08 	bl	80071fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	685a      	ldr	r2, [r3, #4]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	689a      	ldr	r2, [r3, #8]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f042 0201 	orr.w	r2, r2, #1
 8006c1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 fb8f 	bl	8007340 <UART_CheckIdleState>
 8006c22:	4603      	mov	r3, r0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3708      	adds	r7, #8
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b08a      	sub	sp, #40	; 0x28
 8006c30:	af02      	add	r7, sp, #8
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	603b      	str	r3, [r7, #0]
 8006c38:	4613      	mov	r3, r2
 8006c3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c40:	2b20      	cmp	r3, #32
 8006c42:	d171      	bne.n	8006d28 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d002      	beq.n	8006c50 <HAL_UART_Transmit+0x24>
 8006c4a:	88fb      	ldrh	r3, [r7, #6]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d101      	bne.n	8006c54 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e06a      	b.n	8006d2a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2221      	movs	r2, #33	; 0x21
 8006c60:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c62:	f7fa fdcb 	bl	80017fc <HAL_GetTick>
 8006c66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	88fa      	ldrh	r2, [r7, #6]
 8006c6c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	88fa      	ldrh	r2, [r7, #6]
 8006c74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c80:	d108      	bne.n	8006c94 <HAL_UART_Transmit+0x68>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d104      	bne.n	8006c94 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	61bb      	str	r3, [r7, #24]
 8006c92:	e003      	b.n	8006c9c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c9c:	e02c      	b.n	8006cf8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	2180      	movs	r1, #128	; 0x80
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f000 fb96 	bl	80073da <UART_WaitOnFlagUntilTimeout>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d001      	beq.n	8006cb8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	e038      	b.n	8006d2a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10b      	bne.n	8006cd6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	881b      	ldrh	r3, [r3, #0]
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ccc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	3302      	adds	r3, #2
 8006cd2:	61bb      	str	r3, [r7, #24]
 8006cd4:	e007      	b.n	8006ce6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	781a      	ldrb	r2, [r3, #0]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1cc      	bne.n	8006c9e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	9300      	str	r3, [sp, #0]
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	2140      	movs	r1, #64	; 0x40
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f000 fb63 	bl	80073da <UART_WaitOnFlagUntilTimeout>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d001      	beq.n	8006d1e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e005      	b.n	8006d2a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2220      	movs	r2, #32
 8006d22:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006d24:	2300      	movs	r3, #0
 8006d26:	e000      	b.n	8006d2a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006d28:	2302      	movs	r3, #2
  }
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3720      	adds	r7, #32
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
	...

08006d34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b088      	sub	sp, #32
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	689a      	ldr	r2, [r3, #8]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	431a      	orrs	r2, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	431a      	orrs	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	69db      	ldr	r3, [r3, #28]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	4ba6      	ldr	r3, [pc, #664]	; (8006ff8 <UART_SetConfig+0x2c4>)
 8006d60:	4013      	ands	r3, r2
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	6812      	ldr	r2, [r2, #0]
 8006d66:	6979      	ldr	r1, [r7, #20]
 8006d68:	430b      	orrs	r3, r1
 8006d6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	68da      	ldr	r2, [r3, #12]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	699b      	ldr	r3, [r3, #24]
 8006d86:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a1b      	ldr	r3, [r3, #32]
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	430a      	orrs	r2, r1
 8006da4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a94      	ldr	r2, [pc, #592]	; (8006ffc <UART_SetConfig+0x2c8>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d120      	bne.n	8006df2 <UART_SetConfig+0xbe>
 8006db0:	4b93      	ldr	r3, [pc, #588]	; (8007000 <UART_SetConfig+0x2cc>)
 8006db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006db6:	f003 0303 	and.w	r3, r3, #3
 8006dba:	2b03      	cmp	r3, #3
 8006dbc:	d816      	bhi.n	8006dec <UART_SetConfig+0xb8>
 8006dbe:	a201      	add	r2, pc, #4	; (adr r2, 8006dc4 <UART_SetConfig+0x90>)
 8006dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc4:	08006dd5 	.word	0x08006dd5
 8006dc8:	08006de1 	.word	0x08006de1
 8006dcc:	08006ddb 	.word	0x08006ddb
 8006dd0:	08006de7 	.word	0x08006de7
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	77fb      	strb	r3, [r7, #31]
 8006dd8:	e150      	b.n	800707c <UART_SetConfig+0x348>
 8006dda:	2302      	movs	r3, #2
 8006ddc:	77fb      	strb	r3, [r7, #31]
 8006dde:	e14d      	b.n	800707c <UART_SetConfig+0x348>
 8006de0:	2304      	movs	r3, #4
 8006de2:	77fb      	strb	r3, [r7, #31]
 8006de4:	e14a      	b.n	800707c <UART_SetConfig+0x348>
 8006de6:	2308      	movs	r3, #8
 8006de8:	77fb      	strb	r3, [r7, #31]
 8006dea:	e147      	b.n	800707c <UART_SetConfig+0x348>
 8006dec:	2310      	movs	r3, #16
 8006dee:	77fb      	strb	r3, [r7, #31]
 8006df0:	e144      	b.n	800707c <UART_SetConfig+0x348>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a83      	ldr	r2, [pc, #524]	; (8007004 <UART_SetConfig+0x2d0>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d132      	bne.n	8006e62 <UART_SetConfig+0x12e>
 8006dfc:	4b80      	ldr	r3, [pc, #512]	; (8007000 <UART_SetConfig+0x2cc>)
 8006dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e02:	f003 030c 	and.w	r3, r3, #12
 8006e06:	2b0c      	cmp	r3, #12
 8006e08:	d828      	bhi.n	8006e5c <UART_SetConfig+0x128>
 8006e0a:	a201      	add	r2, pc, #4	; (adr r2, 8006e10 <UART_SetConfig+0xdc>)
 8006e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e10:	08006e45 	.word	0x08006e45
 8006e14:	08006e5d 	.word	0x08006e5d
 8006e18:	08006e5d 	.word	0x08006e5d
 8006e1c:	08006e5d 	.word	0x08006e5d
 8006e20:	08006e51 	.word	0x08006e51
 8006e24:	08006e5d 	.word	0x08006e5d
 8006e28:	08006e5d 	.word	0x08006e5d
 8006e2c:	08006e5d 	.word	0x08006e5d
 8006e30:	08006e4b 	.word	0x08006e4b
 8006e34:	08006e5d 	.word	0x08006e5d
 8006e38:	08006e5d 	.word	0x08006e5d
 8006e3c:	08006e5d 	.word	0x08006e5d
 8006e40:	08006e57 	.word	0x08006e57
 8006e44:	2300      	movs	r3, #0
 8006e46:	77fb      	strb	r3, [r7, #31]
 8006e48:	e118      	b.n	800707c <UART_SetConfig+0x348>
 8006e4a:	2302      	movs	r3, #2
 8006e4c:	77fb      	strb	r3, [r7, #31]
 8006e4e:	e115      	b.n	800707c <UART_SetConfig+0x348>
 8006e50:	2304      	movs	r3, #4
 8006e52:	77fb      	strb	r3, [r7, #31]
 8006e54:	e112      	b.n	800707c <UART_SetConfig+0x348>
 8006e56:	2308      	movs	r3, #8
 8006e58:	77fb      	strb	r3, [r7, #31]
 8006e5a:	e10f      	b.n	800707c <UART_SetConfig+0x348>
 8006e5c:	2310      	movs	r3, #16
 8006e5e:	77fb      	strb	r3, [r7, #31]
 8006e60:	e10c      	b.n	800707c <UART_SetConfig+0x348>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a68      	ldr	r2, [pc, #416]	; (8007008 <UART_SetConfig+0x2d4>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d120      	bne.n	8006eae <UART_SetConfig+0x17a>
 8006e6c:	4b64      	ldr	r3, [pc, #400]	; (8007000 <UART_SetConfig+0x2cc>)
 8006e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e72:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e76:	2b30      	cmp	r3, #48	; 0x30
 8006e78:	d013      	beq.n	8006ea2 <UART_SetConfig+0x16e>
 8006e7a:	2b30      	cmp	r3, #48	; 0x30
 8006e7c:	d814      	bhi.n	8006ea8 <UART_SetConfig+0x174>
 8006e7e:	2b20      	cmp	r3, #32
 8006e80:	d009      	beq.n	8006e96 <UART_SetConfig+0x162>
 8006e82:	2b20      	cmp	r3, #32
 8006e84:	d810      	bhi.n	8006ea8 <UART_SetConfig+0x174>
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d002      	beq.n	8006e90 <UART_SetConfig+0x15c>
 8006e8a:	2b10      	cmp	r3, #16
 8006e8c:	d006      	beq.n	8006e9c <UART_SetConfig+0x168>
 8006e8e:	e00b      	b.n	8006ea8 <UART_SetConfig+0x174>
 8006e90:	2300      	movs	r3, #0
 8006e92:	77fb      	strb	r3, [r7, #31]
 8006e94:	e0f2      	b.n	800707c <UART_SetConfig+0x348>
 8006e96:	2302      	movs	r3, #2
 8006e98:	77fb      	strb	r3, [r7, #31]
 8006e9a:	e0ef      	b.n	800707c <UART_SetConfig+0x348>
 8006e9c:	2304      	movs	r3, #4
 8006e9e:	77fb      	strb	r3, [r7, #31]
 8006ea0:	e0ec      	b.n	800707c <UART_SetConfig+0x348>
 8006ea2:	2308      	movs	r3, #8
 8006ea4:	77fb      	strb	r3, [r7, #31]
 8006ea6:	e0e9      	b.n	800707c <UART_SetConfig+0x348>
 8006ea8:	2310      	movs	r3, #16
 8006eaa:	77fb      	strb	r3, [r7, #31]
 8006eac:	e0e6      	b.n	800707c <UART_SetConfig+0x348>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a56      	ldr	r2, [pc, #344]	; (800700c <UART_SetConfig+0x2d8>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d120      	bne.n	8006efa <UART_SetConfig+0x1c6>
 8006eb8:	4b51      	ldr	r3, [pc, #324]	; (8007000 <UART_SetConfig+0x2cc>)
 8006eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ebe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006ec2:	2bc0      	cmp	r3, #192	; 0xc0
 8006ec4:	d013      	beq.n	8006eee <UART_SetConfig+0x1ba>
 8006ec6:	2bc0      	cmp	r3, #192	; 0xc0
 8006ec8:	d814      	bhi.n	8006ef4 <UART_SetConfig+0x1c0>
 8006eca:	2b80      	cmp	r3, #128	; 0x80
 8006ecc:	d009      	beq.n	8006ee2 <UART_SetConfig+0x1ae>
 8006ece:	2b80      	cmp	r3, #128	; 0x80
 8006ed0:	d810      	bhi.n	8006ef4 <UART_SetConfig+0x1c0>
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d002      	beq.n	8006edc <UART_SetConfig+0x1a8>
 8006ed6:	2b40      	cmp	r3, #64	; 0x40
 8006ed8:	d006      	beq.n	8006ee8 <UART_SetConfig+0x1b4>
 8006eda:	e00b      	b.n	8006ef4 <UART_SetConfig+0x1c0>
 8006edc:	2300      	movs	r3, #0
 8006ede:	77fb      	strb	r3, [r7, #31]
 8006ee0:	e0cc      	b.n	800707c <UART_SetConfig+0x348>
 8006ee2:	2302      	movs	r3, #2
 8006ee4:	77fb      	strb	r3, [r7, #31]
 8006ee6:	e0c9      	b.n	800707c <UART_SetConfig+0x348>
 8006ee8:	2304      	movs	r3, #4
 8006eea:	77fb      	strb	r3, [r7, #31]
 8006eec:	e0c6      	b.n	800707c <UART_SetConfig+0x348>
 8006eee:	2308      	movs	r3, #8
 8006ef0:	77fb      	strb	r3, [r7, #31]
 8006ef2:	e0c3      	b.n	800707c <UART_SetConfig+0x348>
 8006ef4:	2310      	movs	r3, #16
 8006ef6:	77fb      	strb	r3, [r7, #31]
 8006ef8:	e0c0      	b.n	800707c <UART_SetConfig+0x348>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a44      	ldr	r2, [pc, #272]	; (8007010 <UART_SetConfig+0x2dc>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d125      	bne.n	8006f50 <UART_SetConfig+0x21c>
 8006f04:	4b3e      	ldr	r3, [pc, #248]	; (8007000 <UART_SetConfig+0x2cc>)
 8006f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f12:	d017      	beq.n	8006f44 <UART_SetConfig+0x210>
 8006f14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f18:	d817      	bhi.n	8006f4a <UART_SetConfig+0x216>
 8006f1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f1e:	d00b      	beq.n	8006f38 <UART_SetConfig+0x204>
 8006f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f24:	d811      	bhi.n	8006f4a <UART_SetConfig+0x216>
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d003      	beq.n	8006f32 <UART_SetConfig+0x1fe>
 8006f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f2e:	d006      	beq.n	8006f3e <UART_SetConfig+0x20a>
 8006f30:	e00b      	b.n	8006f4a <UART_SetConfig+0x216>
 8006f32:	2300      	movs	r3, #0
 8006f34:	77fb      	strb	r3, [r7, #31]
 8006f36:	e0a1      	b.n	800707c <UART_SetConfig+0x348>
 8006f38:	2302      	movs	r3, #2
 8006f3a:	77fb      	strb	r3, [r7, #31]
 8006f3c:	e09e      	b.n	800707c <UART_SetConfig+0x348>
 8006f3e:	2304      	movs	r3, #4
 8006f40:	77fb      	strb	r3, [r7, #31]
 8006f42:	e09b      	b.n	800707c <UART_SetConfig+0x348>
 8006f44:	2308      	movs	r3, #8
 8006f46:	77fb      	strb	r3, [r7, #31]
 8006f48:	e098      	b.n	800707c <UART_SetConfig+0x348>
 8006f4a:	2310      	movs	r3, #16
 8006f4c:	77fb      	strb	r3, [r7, #31]
 8006f4e:	e095      	b.n	800707c <UART_SetConfig+0x348>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a2f      	ldr	r2, [pc, #188]	; (8007014 <UART_SetConfig+0x2e0>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d125      	bne.n	8006fa6 <UART_SetConfig+0x272>
 8006f5a:	4b29      	ldr	r3, [pc, #164]	; (8007000 <UART_SetConfig+0x2cc>)
 8006f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f68:	d017      	beq.n	8006f9a <UART_SetConfig+0x266>
 8006f6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f6e:	d817      	bhi.n	8006fa0 <UART_SetConfig+0x26c>
 8006f70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f74:	d00b      	beq.n	8006f8e <UART_SetConfig+0x25a>
 8006f76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f7a:	d811      	bhi.n	8006fa0 <UART_SetConfig+0x26c>
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d003      	beq.n	8006f88 <UART_SetConfig+0x254>
 8006f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f84:	d006      	beq.n	8006f94 <UART_SetConfig+0x260>
 8006f86:	e00b      	b.n	8006fa0 <UART_SetConfig+0x26c>
 8006f88:	2301      	movs	r3, #1
 8006f8a:	77fb      	strb	r3, [r7, #31]
 8006f8c:	e076      	b.n	800707c <UART_SetConfig+0x348>
 8006f8e:	2302      	movs	r3, #2
 8006f90:	77fb      	strb	r3, [r7, #31]
 8006f92:	e073      	b.n	800707c <UART_SetConfig+0x348>
 8006f94:	2304      	movs	r3, #4
 8006f96:	77fb      	strb	r3, [r7, #31]
 8006f98:	e070      	b.n	800707c <UART_SetConfig+0x348>
 8006f9a:	2308      	movs	r3, #8
 8006f9c:	77fb      	strb	r3, [r7, #31]
 8006f9e:	e06d      	b.n	800707c <UART_SetConfig+0x348>
 8006fa0:	2310      	movs	r3, #16
 8006fa2:	77fb      	strb	r3, [r7, #31]
 8006fa4:	e06a      	b.n	800707c <UART_SetConfig+0x348>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a1b      	ldr	r2, [pc, #108]	; (8007018 <UART_SetConfig+0x2e4>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d138      	bne.n	8007022 <UART_SetConfig+0x2ee>
 8006fb0:	4b13      	ldr	r3, [pc, #76]	; (8007000 <UART_SetConfig+0x2cc>)
 8006fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fb6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006fba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006fbe:	d017      	beq.n	8006ff0 <UART_SetConfig+0x2bc>
 8006fc0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006fc4:	d82a      	bhi.n	800701c <UART_SetConfig+0x2e8>
 8006fc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fca:	d00b      	beq.n	8006fe4 <UART_SetConfig+0x2b0>
 8006fcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fd0:	d824      	bhi.n	800701c <UART_SetConfig+0x2e8>
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d003      	beq.n	8006fde <UART_SetConfig+0x2aa>
 8006fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fda:	d006      	beq.n	8006fea <UART_SetConfig+0x2b6>
 8006fdc:	e01e      	b.n	800701c <UART_SetConfig+0x2e8>
 8006fde:	2300      	movs	r3, #0
 8006fe0:	77fb      	strb	r3, [r7, #31]
 8006fe2:	e04b      	b.n	800707c <UART_SetConfig+0x348>
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	77fb      	strb	r3, [r7, #31]
 8006fe8:	e048      	b.n	800707c <UART_SetConfig+0x348>
 8006fea:	2304      	movs	r3, #4
 8006fec:	77fb      	strb	r3, [r7, #31]
 8006fee:	e045      	b.n	800707c <UART_SetConfig+0x348>
 8006ff0:	2308      	movs	r3, #8
 8006ff2:	77fb      	strb	r3, [r7, #31]
 8006ff4:	e042      	b.n	800707c <UART_SetConfig+0x348>
 8006ff6:	bf00      	nop
 8006ff8:	efff69f3 	.word	0xefff69f3
 8006ffc:	40011000 	.word	0x40011000
 8007000:	40023800 	.word	0x40023800
 8007004:	40004400 	.word	0x40004400
 8007008:	40004800 	.word	0x40004800
 800700c:	40004c00 	.word	0x40004c00
 8007010:	40005000 	.word	0x40005000
 8007014:	40011400 	.word	0x40011400
 8007018:	40007800 	.word	0x40007800
 800701c:	2310      	movs	r3, #16
 800701e:	77fb      	strb	r3, [r7, #31]
 8007020:	e02c      	b.n	800707c <UART_SetConfig+0x348>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a72      	ldr	r2, [pc, #456]	; (80071f0 <UART_SetConfig+0x4bc>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d125      	bne.n	8007078 <UART_SetConfig+0x344>
 800702c:	4b71      	ldr	r3, [pc, #452]	; (80071f4 <UART_SetConfig+0x4c0>)
 800702e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007032:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007036:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800703a:	d017      	beq.n	800706c <UART_SetConfig+0x338>
 800703c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007040:	d817      	bhi.n	8007072 <UART_SetConfig+0x33e>
 8007042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007046:	d00b      	beq.n	8007060 <UART_SetConfig+0x32c>
 8007048:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800704c:	d811      	bhi.n	8007072 <UART_SetConfig+0x33e>
 800704e:	2b00      	cmp	r3, #0
 8007050:	d003      	beq.n	800705a <UART_SetConfig+0x326>
 8007052:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007056:	d006      	beq.n	8007066 <UART_SetConfig+0x332>
 8007058:	e00b      	b.n	8007072 <UART_SetConfig+0x33e>
 800705a:	2300      	movs	r3, #0
 800705c:	77fb      	strb	r3, [r7, #31]
 800705e:	e00d      	b.n	800707c <UART_SetConfig+0x348>
 8007060:	2302      	movs	r3, #2
 8007062:	77fb      	strb	r3, [r7, #31]
 8007064:	e00a      	b.n	800707c <UART_SetConfig+0x348>
 8007066:	2304      	movs	r3, #4
 8007068:	77fb      	strb	r3, [r7, #31]
 800706a:	e007      	b.n	800707c <UART_SetConfig+0x348>
 800706c:	2308      	movs	r3, #8
 800706e:	77fb      	strb	r3, [r7, #31]
 8007070:	e004      	b.n	800707c <UART_SetConfig+0x348>
 8007072:	2310      	movs	r3, #16
 8007074:	77fb      	strb	r3, [r7, #31]
 8007076:	e001      	b.n	800707c <UART_SetConfig+0x348>
 8007078:	2310      	movs	r3, #16
 800707a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	69db      	ldr	r3, [r3, #28]
 8007080:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007084:	d15b      	bne.n	800713e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007086:	7ffb      	ldrb	r3, [r7, #31]
 8007088:	2b08      	cmp	r3, #8
 800708a:	d828      	bhi.n	80070de <UART_SetConfig+0x3aa>
 800708c:	a201      	add	r2, pc, #4	; (adr r2, 8007094 <UART_SetConfig+0x360>)
 800708e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007092:	bf00      	nop
 8007094:	080070b9 	.word	0x080070b9
 8007098:	080070c1 	.word	0x080070c1
 800709c:	080070c9 	.word	0x080070c9
 80070a0:	080070df 	.word	0x080070df
 80070a4:	080070cf 	.word	0x080070cf
 80070a8:	080070df 	.word	0x080070df
 80070ac:	080070df 	.word	0x080070df
 80070b0:	080070df 	.word	0x080070df
 80070b4:	080070d7 	.word	0x080070d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070b8:	f7fd fff2 	bl	80050a0 <HAL_RCC_GetPCLK1Freq>
 80070bc:	61b8      	str	r0, [r7, #24]
        break;
 80070be:	e013      	b.n	80070e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070c0:	f7fe f802 	bl	80050c8 <HAL_RCC_GetPCLK2Freq>
 80070c4:	61b8      	str	r0, [r7, #24]
        break;
 80070c6:	e00f      	b.n	80070e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070c8:	4b4b      	ldr	r3, [pc, #300]	; (80071f8 <UART_SetConfig+0x4c4>)
 80070ca:	61bb      	str	r3, [r7, #24]
        break;
 80070cc:	e00c      	b.n	80070e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070ce:	f7fd fed5 	bl	8004e7c <HAL_RCC_GetSysClockFreq>
 80070d2:	61b8      	str	r0, [r7, #24]
        break;
 80070d4:	e008      	b.n	80070e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070da:	61bb      	str	r3, [r7, #24]
        break;
 80070dc:	e004      	b.n	80070e8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80070de:	2300      	movs	r3, #0
 80070e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	77bb      	strb	r3, [r7, #30]
        break;
 80070e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d074      	beq.n	80071d8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	005a      	lsls	r2, r3, #1
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	085b      	lsrs	r3, r3, #1
 80070f8:	441a      	add	r2, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007102:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	2b0f      	cmp	r3, #15
 8007108:	d916      	bls.n	8007138 <UART_SetConfig+0x404>
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007110:	d212      	bcs.n	8007138 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	b29b      	uxth	r3, r3
 8007116:	f023 030f 	bic.w	r3, r3, #15
 800711a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	085b      	lsrs	r3, r3, #1
 8007120:	b29b      	uxth	r3, r3
 8007122:	f003 0307 	and.w	r3, r3, #7
 8007126:	b29a      	uxth	r2, r3
 8007128:	89fb      	ldrh	r3, [r7, #14]
 800712a:	4313      	orrs	r3, r2
 800712c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	89fa      	ldrh	r2, [r7, #14]
 8007134:	60da      	str	r2, [r3, #12]
 8007136:	e04f      	b.n	80071d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	77bb      	strb	r3, [r7, #30]
 800713c:	e04c      	b.n	80071d8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800713e:	7ffb      	ldrb	r3, [r7, #31]
 8007140:	2b08      	cmp	r3, #8
 8007142:	d828      	bhi.n	8007196 <UART_SetConfig+0x462>
 8007144:	a201      	add	r2, pc, #4	; (adr r2, 800714c <UART_SetConfig+0x418>)
 8007146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800714a:	bf00      	nop
 800714c:	08007171 	.word	0x08007171
 8007150:	08007179 	.word	0x08007179
 8007154:	08007181 	.word	0x08007181
 8007158:	08007197 	.word	0x08007197
 800715c:	08007187 	.word	0x08007187
 8007160:	08007197 	.word	0x08007197
 8007164:	08007197 	.word	0x08007197
 8007168:	08007197 	.word	0x08007197
 800716c:	0800718f 	.word	0x0800718f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007170:	f7fd ff96 	bl	80050a0 <HAL_RCC_GetPCLK1Freq>
 8007174:	61b8      	str	r0, [r7, #24]
        break;
 8007176:	e013      	b.n	80071a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007178:	f7fd ffa6 	bl	80050c8 <HAL_RCC_GetPCLK2Freq>
 800717c:	61b8      	str	r0, [r7, #24]
        break;
 800717e:	e00f      	b.n	80071a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007180:	4b1d      	ldr	r3, [pc, #116]	; (80071f8 <UART_SetConfig+0x4c4>)
 8007182:	61bb      	str	r3, [r7, #24]
        break;
 8007184:	e00c      	b.n	80071a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007186:	f7fd fe79 	bl	8004e7c <HAL_RCC_GetSysClockFreq>
 800718a:	61b8      	str	r0, [r7, #24]
        break;
 800718c:	e008      	b.n	80071a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800718e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007192:	61bb      	str	r3, [r7, #24]
        break;
 8007194:	e004      	b.n	80071a0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007196:	2300      	movs	r3, #0
 8007198:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	77bb      	strb	r3, [r7, #30]
        break;
 800719e:	bf00      	nop
    }

    if (pclk != 0U)
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d018      	beq.n	80071d8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	085a      	lsrs	r2, r3, #1
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	441a      	add	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	2b0f      	cmp	r3, #15
 80071be:	d909      	bls.n	80071d4 <UART_SetConfig+0x4a0>
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071c6:	d205      	bcs.n	80071d4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	60da      	str	r2, [r3, #12]
 80071d2:	e001      	b.n	80071d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80071e4:	7fbb      	ldrb	r3, [r7, #30]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3720      	adds	r7, #32
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	40007c00 	.word	0x40007c00
 80071f4:	40023800 	.word	0x40023800
 80071f8:	00f42400 	.word	0x00f42400

080071fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007208:	f003 0301 	and.w	r3, r3, #1
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00a      	beq.n	8007226 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	430a      	orrs	r2, r1
 8007224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722a:	f003 0302 	and.w	r3, r3, #2
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00a      	beq.n	8007248 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	430a      	orrs	r2, r1
 8007246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724c:	f003 0304 	and.w	r3, r3, #4
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00a      	beq.n	800726a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	430a      	orrs	r2, r1
 8007268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726e:	f003 0308 	and.w	r3, r3, #8
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00a      	beq.n	800728c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	430a      	orrs	r2, r1
 800728a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007290:	f003 0310 	and.w	r3, r3, #16
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00a      	beq.n	80072ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	430a      	orrs	r2, r1
 80072ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b2:	f003 0320 	and.w	r3, r3, #32
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00a      	beq.n	80072d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	430a      	orrs	r2, r1
 80072ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d01a      	beq.n	8007312 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	430a      	orrs	r2, r1
 80072f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072fa:	d10a      	bne.n	8007312 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	430a      	orrs	r2, r1
 8007310:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00a      	beq.n	8007334 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	430a      	orrs	r2, r1
 8007332:	605a      	str	r2, [r3, #4]
  }
}
 8007334:	bf00      	nop
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af02      	add	r7, sp, #8
 8007346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007350:	f7fa fa54 	bl	80017fc <HAL_GetTick>
 8007354:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 0308 	and.w	r3, r3, #8
 8007360:	2b08      	cmp	r3, #8
 8007362:	d10e      	bne.n	8007382 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007364:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f831 	bl	80073da <UART_WaitOnFlagUntilTimeout>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d001      	beq.n	8007382 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800737e:	2303      	movs	r3, #3
 8007380:	e027      	b.n	80073d2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0304 	and.w	r3, r3, #4
 800738c:	2b04      	cmp	r3, #4
 800738e:	d10e      	bne.n	80073ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007390:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 f81b 	bl	80073da <UART_WaitOnFlagUntilTimeout>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d001      	beq.n	80073ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073aa:	2303      	movs	r3, #3
 80073ac:	e011      	b.n	80073d2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2220      	movs	r2, #32
 80073b2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2220      	movs	r2, #32
 80073b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b09c      	sub	sp, #112	; 0x70
 80073de:	af00      	add	r7, sp, #0
 80073e0:	60f8      	str	r0, [r7, #12]
 80073e2:	60b9      	str	r1, [r7, #8]
 80073e4:	603b      	str	r3, [r7, #0]
 80073e6:	4613      	mov	r3, r2
 80073e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073ea:	e0a7      	b.n	800753c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073f2:	f000 80a3 	beq.w	800753c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073f6:	f7fa fa01 	bl	80017fc <HAL_GetTick>
 80073fa:	4602      	mov	r2, r0
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007402:	429a      	cmp	r2, r3
 8007404:	d302      	bcc.n	800740c <UART_WaitOnFlagUntilTimeout+0x32>
 8007406:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007408:	2b00      	cmp	r3, #0
 800740a:	d13f      	bne.n	800748c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007414:	e853 3f00 	ldrex	r3, [r3]
 8007418:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800741a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800741c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007420:	667b      	str	r3, [r7, #100]	; 0x64
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	461a      	mov	r2, r3
 8007428:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800742a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800742c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007430:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007432:	e841 2300 	strex	r3, r2, [r1]
 8007436:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1e6      	bne.n	800740c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	3308      	adds	r3, #8
 8007444:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007448:	e853 3f00 	ldrex	r3, [r3]
 800744c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800744e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007450:	f023 0301 	bic.w	r3, r3, #1
 8007454:	663b      	str	r3, [r7, #96]	; 0x60
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	3308      	adds	r3, #8
 800745c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800745e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007460:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007462:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007464:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007466:	e841 2300 	strex	r3, r2, [r1]
 800746a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800746c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1e5      	bne.n	800743e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2220      	movs	r2, #32
 8007476:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2220      	movs	r2, #32
 800747c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	e068      	b.n	800755e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0304 	and.w	r3, r3, #4
 8007496:	2b00      	cmp	r3, #0
 8007498:	d050      	beq.n	800753c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	69db      	ldr	r3, [r3, #28]
 80074a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074a8:	d148      	bne.n	800753c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074b2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074bc:	e853 3f00 	ldrex	r3, [r3]
 80074c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80074c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	461a      	mov	r2, r3
 80074d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074d2:	637b      	str	r3, [r7, #52]	; 0x34
 80074d4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80074d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074da:	e841 2300 	strex	r3, r2, [r1]
 80074de:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80074e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1e6      	bne.n	80074b4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	3308      	adds	r3, #8
 80074ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	e853 3f00 	ldrex	r3, [r3]
 80074f4:	613b      	str	r3, [r7, #16]
   return(result);
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	f023 0301 	bic.w	r3, r3, #1
 80074fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	3308      	adds	r3, #8
 8007504:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007506:	623a      	str	r2, [r7, #32]
 8007508:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750a:	69f9      	ldr	r1, [r7, #28]
 800750c:	6a3a      	ldr	r2, [r7, #32]
 800750e:	e841 2300 	strex	r3, r2, [r1]
 8007512:	61bb      	str	r3, [r7, #24]
   return(result);
 8007514:	69bb      	ldr	r3, [r7, #24]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d1e5      	bne.n	80074e6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2220      	movs	r2, #32
 800751e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2220      	movs	r2, #32
 8007524:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2220      	movs	r2, #32
 800752c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007538:	2303      	movs	r3, #3
 800753a:	e010      	b.n	800755e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	69da      	ldr	r2, [r3, #28]
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	4013      	ands	r3, r2
 8007546:	68ba      	ldr	r2, [r7, #8]
 8007548:	429a      	cmp	r2, r3
 800754a:	bf0c      	ite	eq
 800754c:	2301      	moveq	r3, #1
 800754e:	2300      	movne	r3, #0
 8007550:	b2db      	uxtb	r3, r3
 8007552:	461a      	mov	r2, r3
 8007554:	79fb      	ldrb	r3, [r7, #7]
 8007556:	429a      	cmp	r2, r3
 8007558:	f43f af48 	beq.w	80073ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3770      	adds	r7, #112	; 0x70
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
	...

08007568 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007568:	b084      	sub	sp, #16
 800756a:	b480      	push	{r7}
 800756c:	b085      	sub	sp, #20
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
 8007572:	f107 001c 	add.w	r0, r7, #28
 8007576:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800757a:	2300      	movs	r3, #0
 800757c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800757e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007580:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007582:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007586:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007588:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800758a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800758c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800758e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007592:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	4313      	orrs	r3, r2
 8007598:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	685a      	ldr	r2, [r3, #4]
 800759e:	4b07      	ldr	r3, [pc, #28]	; (80075bc <SDMMC_Init+0x54>)
 80075a0:	4013      	ands	r3, r2
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	431a      	orrs	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3714      	adds	r7, #20
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	b004      	add	sp, #16
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	ffff8100 	.word	0xffff8100

080075c0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	370c      	adds	r7, #12
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80075da:	b480      	push	{r7}
 80075dc:	b083      	sub	sp, #12
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2203      	movs	r2, #3
 8007608:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 0303 	and.w	r3, r3, #3
}
 8007628:	4618      	mov	r0, r3
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800763e:	2300      	movs	r3, #0
 8007640:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007652:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007658:	431a      	orrs	r2, r3
                       Command->CPSM);
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800765e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	4313      	orrs	r3, r2
 8007664:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	68da      	ldr	r2, [r3, #12]
 800766a:	4b06      	ldr	r3, [pc, #24]	; (8007684 <SDMMC_SendCommand+0x50>)
 800766c:	4013      	ands	r3, r2
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	431a      	orrs	r2, r3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3714      	adds	r7, #20
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr
 8007684:	fffff000 	.word	0xfffff000

08007688 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	b2db      	uxtb	r3, r3
}
 8007696:	4618      	mov	r0, r3
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80076a2:	b480      	push	{r7}
 80076a4:	b085      	sub	sp, #20
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
 80076aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	3314      	adds	r3, #20
 80076b0:	461a      	mov	r2, r3
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	4413      	add	r3, r2
 80076b6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
}  
 80076bc:	4618      	mov	r0, r3
 80076be:	3714      	adds	r7, #20
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80076d2:	2300      	movs	r3, #0
 80076d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	685a      	ldr	r2, [r3, #4]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80076ee:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80076f4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80076fa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	4313      	orrs	r3, r2
 8007700:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007706:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	431a      	orrs	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007712:	2300      	movs	r3, #0

}
 8007714:	4618      	mov	r0, r3
 8007716:	3714      	adds	r7, #20
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b088      	sub	sp, #32
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800772e:	2310      	movs	r3, #16
 8007730:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007732:	2340      	movs	r3, #64	; 0x40
 8007734:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007736:	2300      	movs	r3, #0
 8007738:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800773a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800773e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007740:	f107 0308 	add.w	r3, r7, #8
 8007744:	4619      	mov	r1, r3
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f7ff ff74 	bl	8007634 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800774c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007750:	2110      	movs	r1, #16
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f9d6 	bl	8007b04 <SDMMC_GetCmdResp1>
 8007758:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800775a:	69fb      	ldr	r3, [r7, #28]
}
 800775c:	4618      	mov	r0, r3
 800775e:	3720      	adds	r7, #32
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b088      	sub	sp, #32
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007772:	2311      	movs	r3, #17
 8007774:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007776:	2340      	movs	r3, #64	; 0x40
 8007778:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800777a:	2300      	movs	r3, #0
 800777c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800777e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007782:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007784:	f107 0308 	add.w	r3, r7, #8
 8007788:	4619      	mov	r1, r3
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f7ff ff52 	bl	8007634 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007790:	f241 3288 	movw	r2, #5000	; 0x1388
 8007794:	2111      	movs	r1, #17
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f9b4 	bl	8007b04 <SDMMC_GetCmdResp1>
 800779c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800779e:	69fb      	ldr	r3, [r7, #28]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3720      	adds	r7, #32
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b088      	sub	sp, #32
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80077b6:	2312      	movs	r3, #18
 80077b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80077ba:	2340      	movs	r3, #64	; 0x40
 80077bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80077be:	2300      	movs	r3, #0
 80077c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80077c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077c8:	f107 0308 	add.w	r3, r7, #8
 80077cc:	4619      	mov	r1, r3
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f7ff ff30 	bl	8007634 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80077d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80077d8:	2112      	movs	r1, #18
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f992 	bl	8007b04 <SDMMC_GetCmdResp1>
 80077e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077e2:	69fb      	ldr	r3, [r7, #28]
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3720      	adds	r7, #32
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b088      	sub	sp, #32
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80077fa:	2318      	movs	r3, #24
 80077fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80077fe:	2340      	movs	r3, #64	; 0x40
 8007800:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007802:	2300      	movs	r3, #0
 8007804:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800780a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800780c:	f107 0308 	add.w	r3, r7, #8
 8007810:	4619      	mov	r1, r3
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f7ff ff0e 	bl	8007634 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007818:	f241 3288 	movw	r2, #5000	; 0x1388
 800781c:	2118      	movs	r1, #24
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 f970 	bl	8007b04 <SDMMC_GetCmdResp1>
 8007824:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007826:	69fb      	ldr	r3, [r7, #28]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3720      	adds	r7, #32
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b088      	sub	sp, #32
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800783e:	2319      	movs	r3, #25
 8007840:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007842:	2340      	movs	r3, #64	; 0x40
 8007844:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007846:	2300      	movs	r3, #0
 8007848:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800784a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800784e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007850:	f107 0308 	add.w	r3, r7, #8
 8007854:	4619      	mov	r1, r3
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7ff feec 	bl	8007634 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800785c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007860:	2119      	movs	r1, #25
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f94e 	bl	8007b04 <SDMMC_GetCmdResp1>
 8007868:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800786a:	69fb      	ldr	r3, [r7, #28]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3720      	adds	r7, #32
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b088      	sub	sp, #32
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800787c:	2300      	movs	r3, #0
 800787e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007880:	230c      	movs	r3, #12
 8007882:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007884:	2340      	movs	r3, #64	; 0x40
 8007886:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007888:	2300      	movs	r3, #0
 800788a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800788c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007890:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007892:	f107 0308 	add.w	r3, r7, #8
 8007896:	4619      	mov	r1, r3
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f7ff fecb 	bl	8007634 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800789e:	4a05      	ldr	r2, [pc, #20]	; (80078b4 <SDMMC_CmdStopTransfer+0x40>)
 80078a0:	210c      	movs	r1, #12
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f92e 	bl	8007b04 <SDMMC_GetCmdResp1>
 80078a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078aa:	69fb      	ldr	r3, [r7, #28]
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3720      	adds	r7, #32
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	05f5e100 	.word	0x05f5e100

080078b8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b08a      	sub	sp, #40	; 0x28
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80078c8:	2307      	movs	r3, #7
 80078ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80078cc:	2340      	movs	r3, #64	; 0x40
 80078ce:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80078d0:	2300      	movs	r3, #0
 80078d2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80078d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078d8:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80078da:	f107 0310 	add.w	r3, r7, #16
 80078de:	4619      	mov	r1, r3
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f7ff fea7 	bl	8007634 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80078e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80078ea:	2107      	movs	r1, #7
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f000 f909 	bl	8007b04 <SDMMC_GetCmdResp1>
 80078f2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80078f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3728      	adds	r7, #40	; 0x28
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b088      	sub	sp, #32
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007906:	2300      	movs	r3, #0
 8007908:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800790a:	2300      	movs	r3, #0
 800790c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800790e:	2300      	movs	r3, #0
 8007910:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007912:	2300      	movs	r3, #0
 8007914:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800791a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800791c:	f107 0308 	add.w	r3, r7, #8
 8007920:	4619      	mov	r1, r3
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f7ff fe86 	bl	8007634 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fb23 	bl	8007f74 <SDMMC_GetCmdError>
 800792e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007930:	69fb      	ldr	r3, [r7, #28]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3720      	adds	r7, #32
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b088      	sub	sp, #32
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007942:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007946:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007948:	2308      	movs	r3, #8
 800794a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800794c:	2340      	movs	r3, #64	; 0x40
 800794e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007950:	2300      	movs	r3, #0
 8007952:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007954:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007958:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800795a:	f107 0308 	add.w	r3, r7, #8
 800795e:	4619      	mov	r1, r3
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f7ff fe67 	bl	8007634 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 fab6 	bl	8007ed8 <SDMMC_GetCmdResp7>
 800796c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800796e:	69fb      	ldr	r3, [r7, #28]
}
 8007970:	4618      	mov	r0, r3
 8007972:	3720      	adds	r7, #32
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b088      	sub	sp, #32
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007986:	2337      	movs	r3, #55	; 0x37
 8007988:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800798a:	2340      	movs	r3, #64	; 0x40
 800798c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800798e:	2300      	movs	r3, #0
 8007990:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007996:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007998:	f107 0308 	add.w	r3, r7, #8
 800799c:	4619      	mov	r1, r3
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f7ff fe48 	bl	8007634 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80079a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80079a8:	2137      	movs	r1, #55	; 0x37
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 f8aa 	bl	8007b04 <SDMMC_GetCmdResp1>
 80079b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079b2:	69fb      	ldr	r3, [r7, #28]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3720      	adds	r7, #32
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b088      	sub	sp, #32
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80079c6:	683a      	ldr	r2, [r7, #0]
 80079c8:	4b0d      	ldr	r3, [pc, #52]	; (8007a00 <SDMMC_CmdAppOperCommand+0x44>)
 80079ca:	4313      	orrs	r3, r2
 80079cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80079ce:	2329      	movs	r3, #41	; 0x29
 80079d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80079d2:	2340      	movs	r3, #64	; 0x40
 80079d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80079d6:	2300      	movs	r3, #0
 80079d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079e0:	f107 0308 	add.w	r3, r7, #8
 80079e4:	4619      	mov	r1, r3
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f7ff fe24 	bl	8007634 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 f9bf 	bl	8007d70 <SDMMC_GetCmdResp3>
 80079f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079f4:	69fb      	ldr	r3, [r7, #28]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3720      	adds	r7, #32
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	80100000 	.word	0x80100000

08007a04 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b088      	sub	sp, #32
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007a10:	2302      	movs	r3, #2
 8007a12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007a14:	23c0      	movs	r3, #192	; 0xc0
 8007a16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a22:	f107 0308 	add.w	r3, r7, #8
 8007a26:	4619      	mov	r1, r3
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f7ff fe03 	bl	8007634 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f956 	bl	8007ce0 <SDMMC_GetCmdResp2>
 8007a34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a36:	69fb      	ldr	r3, [r7, #28]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3720      	adds	r7, #32
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b088      	sub	sp, #32
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007a4e:	2309      	movs	r3, #9
 8007a50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007a52:	23c0      	movs	r3, #192	; 0xc0
 8007a54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a56:	2300      	movs	r3, #0
 8007a58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a60:	f107 0308 	add.w	r3, r7, #8
 8007a64:	4619      	mov	r1, r3
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7ff fde4 	bl	8007634 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f937 	bl	8007ce0 <SDMMC_GetCmdResp2>
 8007a72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a74:	69fb      	ldr	r3, [r7, #28]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3720      	adds	r7, #32
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b088      	sub	sp, #32
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
 8007a86:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007a90:	2340      	movs	r3, #64	; 0x40
 8007a92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a94:	2300      	movs	r3, #0
 8007a96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a9e:	f107 0308 	add.w	r3, r7, #8
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f7ff fdc5 	bl	8007634 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007aaa:	683a      	ldr	r2, [r7, #0]
 8007aac:	2103      	movs	r1, #3
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 f99c 	bl	8007dec <SDMMC_GetCmdResp6>
 8007ab4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ab6:	69fb      	ldr	r3, [r7, #28]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3720      	adds	r7, #32
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b088      	sub	sp, #32
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007ace:	230d      	movs	r3, #13
 8007ad0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007ad2:	2340      	movs	r3, #64	; 0x40
 8007ad4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ade:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ae0:	f107 0308 	add.w	r3, r7, #8
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f7ff fda4 	bl	8007634 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8007aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8007af0:	210d      	movs	r1, #13
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 f806 	bl	8007b04 <SDMMC_GetCmdResp1>
 8007af8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007afa:	69fb      	ldr	r3, [r7, #28]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3720      	adds	r7, #32
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b088      	sub	sp, #32
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	607a      	str	r2, [r7, #4]
 8007b10:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007b12:	4b70      	ldr	r3, [pc, #448]	; (8007cd4 <SDMMC_GetCmdResp1+0x1d0>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a70      	ldr	r2, [pc, #448]	; (8007cd8 <SDMMC_GetCmdResp1+0x1d4>)
 8007b18:	fba2 2303 	umull	r2, r3, r2, r3
 8007b1c:	0a5a      	lsrs	r2, r3, #9
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	fb02 f303 	mul.w	r3, r2, r3
 8007b24:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	1e5a      	subs	r2, r3, #1
 8007b2a:	61fa      	str	r2, [r7, #28]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d102      	bne.n	8007b36 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007b30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b34:	e0c9      	b.n	8007cca <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b3a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d0ef      	beq.n	8007b26 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d1ea      	bne.n	8007b26 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b54:	f003 0304 	and.w	r3, r3, #4
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d004      	beq.n	8007b66 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2204      	movs	r2, #4
 8007b60:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007b62:	2304      	movs	r3, #4
 8007b64:	e0b1      	b.n	8007cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b6a:	f003 0301 	and.w	r3, r3, #1
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d004      	beq.n	8007b7c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2201      	movs	r2, #1
 8007b76:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e0a6      	b.n	8007cca <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	22c5      	movs	r2, #197	; 0xc5
 8007b80:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f7ff fd80 	bl	8007688 <SDMMC_GetCommandResponse>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	7afb      	ldrb	r3, [r7, #11]
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d001      	beq.n	8007b96 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007b92:	2301      	movs	r3, #1
 8007b94:	e099      	b.n	8007cca <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007b96:	2100      	movs	r1, #0
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f7ff fd82 	bl	80076a2 <SDMMC_GetResponse>
 8007b9e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007ba0:	697a      	ldr	r2, [r7, #20]
 8007ba2:	4b4e      	ldr	r3, [pc, #312]	; (8007cdc <SDMMC_GetCmdResp1+0x1d8>)
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d101      	bne.n	8007bae <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007baa:	2300      	movs	r3, #0
 8007bac:	e08d      	b.n	8007cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	da02      	bge.n	8007bba <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007bb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007bb8:	e087      	b.n	8007cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d001      	beq.n	8007bc8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007bc4:	2340      	movs	r3, #64	; 0x40
 8007bc6:	e080      	b.n	8007cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d001      	beq.n	8007bd6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007bd2:	2380      	movs	r3, #128	; 0x80
 8007bd4:	e079      	b.n	8007cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d002      	beq.n	8007be6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007be0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007be4:	e071      	b.n	8007cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d002      	beq.n	8007bf6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007bf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bf4:	e069      	b.n	8007cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d002      	beq.n	8007c06 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007c00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c04:	e061      	b.n	8007cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d002      	beq.n	8007c16 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007c10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c14:	e059      	b.n	8007cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d002      	beq.n	8007c26 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c24:	e051      	b.n	8007cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d002      	beq.n	8007c36 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007c30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007c34:	e049      	b.n	8007cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d002      	beq.n	8007c46 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007c40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007c44:	e041      	b.n	8007cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d002      	beq.n	8007c56 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007c50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c54:	e039      	b.n	8007cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d002      	beq.n	8007c66 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007c60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007c64:	e031      	b.n	8007cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d002      	beq.n	8007c76 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007c70:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007c74:	e029      	b.n	8007cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d002      	beq.n	8007c86 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007c80:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007c84:	e021      	b.n	8007cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d002      	beq.n	8007c96 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007c90:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007c94:	e019      	b.n	8007cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d002      	beq.n	8007ca6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007ca0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007ca4:	e011      	b.n	8007cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d002      	beq.n	8007cb6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007cb0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007cb4:	e009      	b.n	8007cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	f003 0308 	and.w	r3, r3, #8
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d002      	beq.n	8007cc6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007cc0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007cc4:	e001      	b.n	8007cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007cc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3720      	adds	r7, #32
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	20000000 	.word	0x20000000
 8007cd8:	10624dd3 	.word	0x10624dd3
 8007cdc:	fdffe008 	.word	0xfdffe008

08007ce0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007ce8:	4b1f      	ldr	r3, [pc, #124]	; (8007d68 <SDMMC_GetCmdResp2+0x88>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a1f      	ldr	r2, [pc, #124]	; (8007d6c <SDMMC_GetCmdResp2+0x8c>)
 8007cee:	fba2 2303 	umull	r2, r3, r2, r3
 8007cf2:	0a5b      	lsrs	r3, r3, #9
 8007cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cf8:	fb02 f303 	mul.w	r3, r2, r3
 8007cfc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	1e5a      	subs	r2, r3, #1
 8007d02:	60fa      	str	r2, [r7, #12]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d102      	bne.n	8007d0e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007d08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d0c:	e026      	b.n	8007d5c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d12:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d0ef      	beq.n	8007cfe <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d1ea      	bne.n	8007cfe <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d2c:	f003 0304 	and.w	r3, r3, #4
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d004      	beq.n	8007d3e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2204      	movs	r2, #4
 8007d38:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007d3a:	2304      	movs	r3, #4
 8007d3c:	e00e      	b.n	8007d5c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d42:	f003 0301 	and.w	r3, r3, #1
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d004      	beq.n	8007d54 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007d50:	2301      	movs	r3, #1
 8007d52:	e003      	b.n	8007d5c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	22c5      	movs	r2, #197	; 0xc5
 8007d58:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3714      	adds	r7, #20
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr
 8007d68:	20000000 	.word	0x20000000
 8007d6c:	10624dd3 	.word	0x10624dd3

08007d70 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d78:	4b1a      	ldr	r3, [pc, #104]	; (8007de4 <SDMMC_GetCmdResp3+0x74>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a1a      	ldr	r2, [pc, #104]	; (8007de8 <SDMMC_GetCmdResp3+0x78>)
 8007d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d82:	0a5b      	lsrs	r3, r3, #9
 8007d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d88:	fb02 f303 	mul.w	r3, r2, r3
 8007d8c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	1e5a      	subs	r2, r3, #1
 8007d92:	60fa      	str	r2, [r7, #12]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d102      	bne.n	8007d9e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007d98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d9c:	e01b      	b.n	8007dd6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007da2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d0ef      	beq.n	8007d8e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d1ea      	bne.n	8007d8e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dbc:	f003 0304 	and.w	r3, r3, #4
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d004      	beq.n	8007dce <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2204      	movs	r2, #4
 8007dc8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007dca:	2304      	movs	r3, #4
 8007dcc:	e003      	b.n	8007dd6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	22c5      	movs	r2, #197	; 0xc5
 8007dd2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3714      	adds	r7, #20
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	20000000 	.word	0x20000000
 8007de8:	10624dd3 	.word	0x10624dd3

08007dec <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b088      	sub	sp, #32
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	460b      	mov	r3, r1
 8007df6:	607a      	str	r2, [r7, #4]
 8007df8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007dfa:	4b35      	ldr	r3, [pc, #212]	; (8007ed0 <SDMMC_GetCmdResp6+0xe4>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a35      	ldr	r2, [pc, #212]	; (8007ed4 <SDMMC_GetCmdResp6+0xe8>)
 8007e00:	fba2 2303 	umull	r2, r3, r2, r3
 8007e04:	0a5b      	lsrs	r3, r3, #9
 8007e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e0a:	fb02 f303 	mul.w	r3, r2, r3
 8007e0e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	1e5a      	subs	r2, r3, #1
 8007e14:	61fa      	str	r2, [r7, #28]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d102      	bne.n	8007e20 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007e1a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e1e:	e052      	b.n	8007ec6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e24:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d0ef      	beq.n	8007e10 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d1ea      	bne.n	8007e10 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e3e:	f003 0304 	and.w	r3, r3, #4
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d004      	beq.n	8007e50 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2204      	movs	r2, #4
 8007e4a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007e4c:	2304      	movs	r3, #4
 8007e4e:	e03a      	b.n	8007ec6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e54:	f003 0301 	and.w	r3, r3, #1
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d004      	beq.n	8007e66 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e62:	2301      	movs	r3, #1
 8007e64:	e02f      	b.n	8007ec6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007e66:	68f8      	ldr	r0, [r7, #12]
 8007e68:	f7ff fc0e 	bl	8007688 <SDMMC_GetCommandResponse>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	461a      	mov	r2, r3
 8007e70:	7afb      	ldrb	r3, [r7, #11]
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d001      	beq.n	8007e7a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e76:	2301      	movs	r3, #1
 8007e78:	e025      	b.n	8007ec6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	22c5      	movs	r2, #197	; 0xc5
 8007e7e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007e80:	2100      	movs	r1, #0
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f7ff fc0d 	bl	80076a2 <SDMMC_GetResponse>
 8007e88:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d106      	bne.n	8007ea2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	0c1b      	lsrs	r3, r3, #16
 8007e98:	b29a      	uxth	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	e011      	b.n	8007ec6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d002      	beq.n	8007eb2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007eac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007eb0:	e009      	b.n	8007ec6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d002      	beq.n	8007ec2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ec0:	e001      	b.n	8007ec6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007ec2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3720      	adds	r7, #32
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	20000000 	.word	0x20000000
 8007ed4:	10624dd3 	.word	0x10624dd3

08007ed8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b085      	sub	sp, #20
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007ee0:	4b22      	ldr	r3, [pc, #136]	; (8007f6c <SDMMC_GetCmdResp7+0x94>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a22      	ldr	r2, [pc, #136]	; (8007f70 <SDMMC_GetCmdResp7+0x98>)
 8007ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8007eea:	0a5b      	lsrs	r3, r3, #9
 8007eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ef0:	fb02 f303 	mul.w	r3, r2, r3
 8007ef4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	1e5a      	subs	r2, r3, #1
 8007efa:	60fa      	str	r2, [r7, #12]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d102      	bne.n	8007f06 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007f00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007f04:	e02c      	b.n	8007f60 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f0a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d0ef      	beq.n	8007ef6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1ea      	bne.n	8007ef6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f24:	f003 0304 	and.w	r3, r3, #4
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d004      	beq.n	8007f36 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2204      	movs	r2, #4
 8007f30:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007f32:	2304      	movs	r3, #4
 8007f34:	e014      	b.n	8007f60 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f3a:	f003 0301 	and.w	r3, r3, #1
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d004      	beq.n	8007f4c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2201      	movs	r2, #1
 8007f46:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e009      	b.n	8007f60 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d002      	beq.n	8007f5e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2240      	movs	r2, #64	; 0x40
 8007f5c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007f5e:	2300      	movs	r3, #0
  
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3714      	adds	r7, #20
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr
 8007f6c:	20000000 	.word	0x20000000
 8007f70:	10624dd3 	.word	0x10624dd3

08007f74 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007f7c:	4b11      	ldr	r3, [pc, #68]	; (8007fc4 <SDMMC_GetCmdError+0x50>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a11      	ldr	r2, [pc, #68]	; (8007fc8 <SDMMC_GetCmdError+0x54>)
 8007f82:	fba2 2303 	umull	r2, r3, r2, r3
 8007f86:	0a5b      	lsrs	r3, r3, #9
 8007f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f8c:	fb02 f303 	mul.w	r3, r2, r3
 8007f90:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	1e5a      	subs	r2, r3, #1
 8007f96:	60fa      	str	r2, [r7, #12]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d102      	bne.n	8007fa2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007f9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007fa0:	e009      	b.n	8007fb6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d0f1      	beq.n	8007f92 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	22c5      	movs	r2, #197	; 0xc5
 8007fb2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3714      	adds	r7, #20
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop
 8007fc4:	20000000 	.word	0x20000000
 8007fc8:	10624dd3 	.word	0x10624dd3

08007fcc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007fcc:	b084      	sub	sp, #16
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b084      	sub	sp, #16
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
 8007fd6:	f107 001c 	add.w	r0, r7, #28
 8007fda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d120      	bne.n	8008026 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	68da      	ldr	r2, [r3, #12]
 8007ff4:	4b20      	ldr	r3, [pc, #128]	; (8008078 <USB_CoreInit+0xac>)
 8007ff6:	4013      	ands	r3, r2
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800800a:	2b01      	cmp	r3, #1
 800800c:	d105      	bne.n	800801a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f001 fbee 	bl	80097fc <USB_CoreReset>
 8008020:	4603      	mov	r3, r0
 8008022:	73fb      	strb	r3, [r7, #15]
 8008024:	e010      	b.n	8008048 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f001 fbe2 	bl	80097fc <USB_CoreReset>
 8008038:	4603      	mov	r3, r0
 800803a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008040:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804a:	2b01      	cmp	r3, #1
 800804c:	d10b      	bne.n	8008066 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	f043 0206 	orr.w	r2, r3, #6
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	f043 0220 	orr.w	r2, r3, #32
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008066:	7bfb      	ldrb	r3, [r7, #15]
}
 8008068:	4618      	mov	r0, r3
 800806a:	3710      	adds	r7, #16
 800806c:	46bd      	mov	sp, r7
 800806e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008072:	b004      	add	sp, #16
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	ffbdffbf 	.word	0xffbdffbf

0800807c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800807c:	b480      	push	{r7}
 800807e:	b087      	sub	sp, #28
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	4613      	mov	r3, r2
 8008088:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800808a:	79fb      	ldrb	r3, [r7, #7]
 800808c:	2b02      	cmp	r3, #2
 800808e:	d165      	bne.n	800815c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	4a41      	ldr	r2, [pc, #260]	; (8008198 <USB_SetTurnaroundTime+0x11c>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d906      	bls.n	80080a6 <USB_SetTurnaroundTime+0x2a>
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	4a40      	ldr	r2, [pc, #256]	; (800819c <USB_SetTurnaroundTime+0x120>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d202      	bcs.n	80080a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80080a0:	230f      	movs	r3, #15
 80080a2:	617b      	str	r3, [r7, #20]
 80080a4:	e062      	b.n	800816c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	4a3c      	ldr	r2, [pc, #240]	; (800819c <USB_SetTurnaroundTime+0x120>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d306      	bcc.n	80080bc <USB_SetTurnaroundTime+0x40>
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	4a3b      	ldr	r2, [pc, #236]	; (80081a0 <USB_SetTurnaroundTime+0x124>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d202      	bcs.n	80080bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80080b6:	230e      	movs	r3, #14
 80080b8:	617b      	str	r3, [r7, #20]
 80080ba:	e057      	b.n	800816c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	4a38      	ldr	r2, [pc, #224]	; (80081a0 <USB_SetTurnaroundTime+0x124>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d306      	bcc.n	80080d2 <USB_SetTurnaroundTime+0x56>
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	4a37      	ldr	r2, [pc, #220]	; (80081a4 <USB_SetTurnaroundTime+0x128>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d202      	bcs.n	80080d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80080cc:	230d      	movs	r3, #13
 80080ce:	617b      	str	r3, [r7, #20]
 80080d0:	e04c      	b.n	800816c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	4a33      	ldr	r2, [pc, #204]	; (80081a4 <USB_SetTurnaroundTime+0x128>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d306      	bcc.n	80080e8 <USB_SetTurnaroundTime+0x6c>
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	4a32      	ldr	r2, [pc, #200]	; (80081a8 <USB_SetTurnaroundTime+0x12c>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d802      	bhi.n	80080e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80080e2:	230c      	movs	r3, #12
 80080e4:	617b      	str	r3, [r7, #20]
 80080e6:	e041      	b.n	800816c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	4a2f      	ldr	r2, [pc, #188]	; (80081a8 <USB_SetTurnaroundTime+0x12c>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d906      	bls.n	80080fe <USB_SetTurnaroundTime+0x82>
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	4a2e      	ldr	r2, [pc, #184]	; (80081ac <USB_SetTurnaroundTime+0x130>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d802      	bhi.n	80080fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80080f8:	230b      	movs	r3, #11
 80080fa:	617b      	str	r3, [r7, #20]
 80080fc:	e036      	b.n	800816c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	4a2a      	ldr	r2, [pc, #168]	; (80081ac <USB_SetTurnaroundTime+0x130>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d906      	bls.n	8008114 <USB_SetTurnaroundTime+0x98>
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	4a29      	ldr	r2, [pc, #164]	; (80081b0 <USB_SetTurnaroundTime+0x134>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d802      	bhi.n	8008114 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800810e:	230a      	movs	r3, #10
 8008110:	617b      	str	r3, [r7, #20]
 8008112:	e02b      	b.n	800816c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	4a26      	ldr	r2, [pc, #152]	; (80081b0 <USB_SetTurnaroundTime+0x134>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d906      	bls.n	800812a <USB_SetTurnaroundTime+0xae>
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	4a25      	ldr	r2, [pc, #148]	; (80081b4 <USB_SetTurnaroundTime+0x138>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d202      	bcs.n	800812a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008124:	2309      	movs	r3, #9
 8008126:	617b      	str	r3, [r7, #20]
 8008128:	e020      	b.n	800816c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	4a21      	ldr	r2, [pc, #132]	; (80081b4 <USB_SetTurnaroundTime+0x138>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d306      	bcc.n	8008140 <USB_SetTurnaroundTime+0xc4>
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	4a20      	ldr	r2, [pc, #128]	; (80081b8 <USB_SetTurnaroundTime+0x13c>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d802      	bhi.n	8008140 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800813a:	2308      	movs	r3, #8
 800813c:	617b      	str	r3, [r7, #20]
 800813e:	e015      	b.n	800816c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	4a1d      	ldr	r2, [pc, #116]	; (80081b8 <USB_SetTurnaroundTime+0x13c>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d906      	bls.n	8008156 <USB_SetTurnaroundTime+0xda>
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	4a1c      	ldr	r2, [pc, #112]	; (80081bc <USB_SetTurnaroundTime+0x140>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d202      	bcs.n	8008156 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008150:	2307      	movs	r3, #7
 8008152:	617b      	str	r3, [r7, #20]
 8008154:	e00a      	b.n	800816c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008156:	2306      	movs	r3, #6
 8008158:	617b      	str	r3, [r7, #20]
 800815a:	e007      	b.n	800816c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800815c:	79fb      	ldrb	r3, [r7, #7]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d102      	bne.n	8008168 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008162:	2309      	movs	r3, #9
 8008164:	617b      	str	r3, [r7, #20]
 8008166:	e001      	b.n	800816c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008168:	2309      	movs	r3, #9
 800816a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	68da      	ldr	r2, [r3, #12]
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	029b      	lsls	r3, r3, #10
 8008180:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008184:	431a      	orrs	r2, r3
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	371c      	adds	r7, #28
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr
 8008198:	00d8acbf 	.word	0x00d8acbf
 800819c:	00e4e1c0 	.word	0x00e4e1c0
 80081a0:	00f42400 	.word	0x00f42400
 80081a4:	01067380 	.word	0x01067380
 80081a8:	011a499f 	.word	0x011a499f
 80081ac:	01312cff 	.word	0x01312cff
 80081b0:	014ca43f 	.word	0x014ca43f
 80081b4:	016e3600 	.word	0x016e3600
 80081b8:	01a6ab1f 	.word	0x01a6ab1f
 80081bc:	01e84800 	.word	0x01e84800

080081c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	f043 0201 	orr.w	r2, r3, #1
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	370c      	adds	r7, #12
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr

080081e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80081e2:	b480      	push	{r7}
 80081e4:	b083      	sub	sp, #12
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	f023 0201 	bic.w	r2, r3, #1
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	370c      	adds	r7, #12
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	460b      	mov	r3, r1
 800820e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008210:	2300      	movs	r3, #0
 8008212:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008220:	78fb      	ldrb	r3, [r7, #3]
 8008222:	2b01      	cmp	r3, #1
 8008224:	d115      	bne.n	8008252 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008232:	2001      	movs	r0, #1
 8008234:	f7f9 faee 	bl	8001814 <HAL_Delay>
      ms++;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	3301      	adds	r3, #1
 800823c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f001 fa4b 	bl	80096da <USB_GetMode>
 8008244:	4603      	mov	r3, r0
 8008246:	2b01      	cmp	r3, #1
 8008248:	d01e      	beq.n	8008288 <USB_SetCurrentMode+0x84>
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2b31      	cmp	r3, #49	; 0x31
 800824e:	d9f0      	bls.n	8008232 <USB_SetCurrentMode+0x2e>
 8008250:	e01a      	b.n	8008288 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008252:	78fb      	ldrb	r3, [r7, #3]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d115      	bne.n	8008284 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	68db      	ldr	r3, [r3, #12]
 800825c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008264:	2001      	movs	r0, #1
 8008266:	f7f9 fad5 	bl	8001814 <HAL_Delay>
      ms++;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	3301      	adds	r3, #1
 800826e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f001 fa32 	bl	80096da <USB_GetMode>
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d005      	beq.n	8008288 <USB_SetCurrentMode+0x84>
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2b31      	cmp	r3, #49	; 0x31
 8008280:	d9f0      	bls.n	8008264 <USB_SetCurrentMode+0x60>
 8008282:	e001      	b.n	8008288 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	e005      	b.n	8008294 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2b32      	cmp	r3, #50	; 0x32
 800828c:	d101      	bne.n	8008292 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e000      	b.n	8008294 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800829c:	b084      	sub	sp, #16
 800829e:	b580      	push	{r7, lr}
 80082a0:	b086      	sub	sp, #24
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
 80082a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80082aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80082ae:	2300      	movs	r3, #0
 80082b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80082b6:	2300      	movs	r3, #0
 80082b8:	613b      	str	r3, [r7, #16]
 80082ba:	e009      	b.n	80082d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	3340      	adds	r3, #64	; 0x40
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	4413      	add	r3, r2
 80082c6:	2200      	movs	r2, #0
 80082c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	3301      	adds	r3, #1
 80082ce:	613b      	str	r3, [r7, #16]
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	2b0e      	cmp	r3, #14
 80082d4:	d9f2      	bls.n	80082bc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80082d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d11c      	bne.n	8008316 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	68fa      	ldr	r2, [r7, #12]
 80082e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082ea:	f043 0302 	orr.w	r3, r3, #2
 80082ee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	601a      	str	r2, [r3, #0]
 8008314:	e005      	b.n	8008322 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008328:	461a      	mov	r2, r3
 800832a:	2300      	movs	r3, #0
 800832c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008334:	4619      	mov	r1, r3
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800833c:	461a      	mov	r2, r3
 800833e:	680b      	ldr	r3, [r1, #0]
 8008340:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008344:	2b01      	cmp	r3, #1
 8008346:	d10c      	bne.n	8008362 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834a:	2b00      	cmp	r3, #0
 800834c:	d104      	bne.n	8008358 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800834e:	2100      	movs	r1, #0
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f965 	bl	8008620 <USB_SetDevSpeed>
 8008356:	e008      	b.n	800836a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008358:	2101      	movs	r1, #1
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 f960 	bl	8008620 <USB_SetDevSpeed>
 8008360:	e003      	b.n	800836a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008362:	2103      	movs	r1, #3
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 f95b 	bl	8008620 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800836a:	2110      	movs	r1, #16
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 f8f3 	bl	8008558 <USB_FlushTxFifo>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d001      	beq.n	800837c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 f91f 	bl	80085c0 <USB_FlushRxFifo>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d001      	beq.n	800838c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008392:	461a      	mov	r2, r3
 8008394:	2300      	movs	r3, #0
 8008396:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800839e:	461a      	mov	r2, r3
 80083a0:	2300      	movs	r3, #0
 80083a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083aa:	461a      	mov	r2, r3
 80083ac:	2300      	movs	r3, #0
 80083ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083b0:	2300      	movs	r3, #0
 80083b2:	613b      	str	r3, [r7, #16]
 80083b4:	e043      	b.n	800843e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	015a      	lsls	r2, r3, #5
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	4413      	add	r3, r2
 80083be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083cc:	d118      	bne.n	8008400 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d10a      	bne.n	80083ea <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	015a      	lsls	r2, r3, #5
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	4413      	add	r3, r2
 80083dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083e0:	461a      	mov	r2, r3
 80083e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80083e6:	6013      	str	r3, [r2, #0]
 80083e8:	e013      	b.n	8008412 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	015a      	lsls	r2, r3, #5
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	4413      	add	r3, r2
 80083f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083f6:	461a      	mov	r2, r3
 80083f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80083fc:	6013      	str	r3, [r2, #0]
 80083fe:	e008      	b.n	8008412 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	015a      	lsls	r2, r3, #5
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	4413      	add	r3, r2
 8008408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800840c:	461a      	mov	r2, r3
 800840e:	2300      	movs	r3, #0
 8008410:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	015a      	lsls	r2, r3, #5
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	4413      	add	r3, r2
 800841a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800841e:	461a      	mov	r2, r3
 8008420:	2300      	movs	r3, #0
 8008422:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	015a      	lsls	r2, r3, #5
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	4413      	add	r3, r2
 800842c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008430:	461a      	mov	r2, r3
 8008432:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008436:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	3301      	adds	r3, #1
 800843c:	613b      	str	r3, [r7, #16]
 800843e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008440:	693a      	ldr	r2, [r7, #16]
 8008442:	429a      	cmp	r2, r3
 8008444:	d3b7      	bcc.n	80083b6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008446:	2300      	movs	r3, #0
 8008448:	613b      	str	r3, [r7, #16]
 800844a:	e043      	b.n	80084d4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	015a      	lsls	r2, r3, #5
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	4413      	add	r3, r2
 8008454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800845e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008462:	d118      	bne.n	8008496 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d10a      	bne.n	8008480 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	015a      	lsls	r2, r3, #5
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	4413      	add	r3, r2
 8008472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008476:	461a      	mov	r2, r3
 8008478:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800847c:	6013      	str	r3, [r2, #0]
 800847e:	e013      	b.n	80084a8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	015a      	lsls	r2, r3, #5
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	4413      	add	r3, r2
 8008488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800848c:	461a      	mov	r2, r3
 800848e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008492:	6013      	str	r3, [r2, #0]
 8008494:	e008      	b.n	80084a8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	015a      	lsls	r2, r3, #5
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	4413      	add	r3, r2
 800849e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084a2:	461a      	mov	r2, r3
 80084a4:	2300      	movs	r3, #0
 80084a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	015a      	lsls	r2, r3, #5
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	4413      	add	r3, r2
 80084b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084b4:	461a      	mov	r2, r3
 80084b6:	2300      	movs	r3, #0
 80084b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	015a      	lsls	r2, r3, #5
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	4413      	add	r3, r2
 80084c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084c6:	461a      	mov	r2, r3
 80084c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80084cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	3301      	adds	r3, #1
 80084d2:	613b      	str	r3, [r7, #16]
 80084d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d6:	693a      	ldr	r2, [r7, #16]
 80084d8:	429a      	cmp	r2, r3
 80084da:	d3b7      	bcc.n	800844c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80084fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80084fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008500:	2b00      	cmp	r3, #0
 8008502:	d105      	bne.n	8008510 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	699b      	ldr	r3, [r3, #24]
 8008508:	f043 0210 	orr.w	r2, r3, #16
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	699a      	ldr	r2, [r3, #24]
 8008514:	4b0e      	ldr	r3, [pc, #56]	; (8008550 <USB_DevInit+0x2b4>)
 8008516:	4313      	orrs	r3, r2
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800851c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800851e:	2b00      	cmp	r3, #0
 8008520:	d005      	beq.n	800852e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	699b      	ldr	r3, [r3, #24]
 8008526:	f043 0208 	orr.w	r2, r3, #8
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800852e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008530:	2b01      	cmp	r3, #1
 8008532:	d105      	bne.n	8008540 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	699a      	ldr	r2, [r3, #24]
 8008538:	4b06      	ldr	r3, [pc, #24]	; (8008554 <USB_DevInit+0x2b8>)
 800853a:	4313      	orrs	r3, r2
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008540:	7dfb      	ldrb	r3, [r7, #23]
}
 8008542:	4618      	mov	r0, r3
 8008544:	3718      	adds	r7, #24
 8008546:	46bd      	mov	sp, r7
 8008548:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800854c:	b004      	add	sp, #16
 800854e:	4770      	bx	lr
 8008550:	803c3800 	.word	0x803c3800
 8008554:	40000004 	.word	0x40000004

08008558 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008562:	2300      	movs	r3, #0
 8008564:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	3301      	adds	r3, #1
 800856a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	4a13      	ldr	r2, [pc, #76]	; (80085bc <USB_FlushTxFifo+0x64>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d901      	bls.n	8008578 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008574:	2303      	movs	r3, #3
 8008576:	e01b      	b.n	80085b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	2b00      	cmp	r3, #0
 800857e:	daf2      	bge.n	8008566 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008580:	2300      	movs	r3, #0
 8008582:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	019b      	lsls	r3, r3, #6
 8008588:	f043 0220 	orr.w	r2, r3, #32
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	3301      	adds	r3, #1
 8008594:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	4a08      	ldr	r2, [pc, #32]	; (80085bc <USB_FlushTxFifo+0x64>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d901      	bls.n	80085a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800859e:	2303      	movs	r3, #3
 80085a0:	e006      	b.n	80085b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	f003 0320 	and.w	r3, r3, #32
 80085aa:	2b20      	cmp	r3, #32
 80085ac:	d0f0      	beq.n	8008590 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80085ae:	2300      	movs	r3, #0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3714      	adds	r7, #20
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	00030d40 	.word	0x00030d40

080085c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80085c8:	2300      	movs	r3, #0
 80085ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	3301      	adds	r3, #1
 80085d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	4a11      	ldr	r2, [pc, #68]	; (800861c <USB_FlushRxFifo+0x5c>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d901      	bls.n	80085de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80085da:	2303      	movs	r3, #3
 80085dc:	e018      	b.n	8008610 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	daf2      	bge.n	80085cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80085e6:	2300      	movs	r3, #0
 80085e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2210      	movs	r2, #16
 80085ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	3301      	adds	r3, #1
 80085f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	4a08      	ldr	r2, [pc, #32]	; (800861c <USB_FlushRxFifo+0x5c>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d901      	bls.n	8008602 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80085fe:	2303      	movs	r3, #3
 8008600:	e006      	b.n	8008610 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	f003 0310 	and.w	r3, r3, #16
 800860a:	2b10      	cmp	r3, #16
 800860c:	d0f0      	beq.n	80085f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	3714      	adds	r7, #20
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr
 800861c:	00030d40 	.word	0x00030d40

08008620 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	460b      	mov	r3, r1
 800862a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	78fb      	ldrb	r3, [r7, #3]
 800863a:	68f9      	ldr	r1, [r7, #12]
 800863c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008640:	4313      	orrs	r3, r2
 8008642:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	3714      	adds	r7, #20
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr

08008652 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008652:	b480      	push	{r7}
 8008654:	b087      	sub	sp, #28
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	f003 0306 	and.w	r3, r3, #6
 800866a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d102      	bne.n	8008678 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008672:	2300      	movs	r3, #0
 8008674:	75fb      	strb	r3, [r7, #23]
 8008676:	e00a      	b.n	800868e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2b02      	cmp	r3, #2
 800867c:	d002      	beq.n	8008684 <USB_GetDevSpeed+0x32>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2b06      	cmp	r3, #6
 8008682:	d102      	bne.n	800868a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008684:	2302      	movs	r3, #2
 8008686:	75fb      	strb	r3, [r7, #23]
 8008688:	e001      	b.n	800868e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800868a:	230f      	movs	r3, #15
 800868c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800868e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008690:	4618      	mov	r0, r3
 8008692:	371c      	adds	r7, #28
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800869c:	b480      	push	{r7}
 800869e:	b085      	sub	sp, #20
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	785b      	ldrb	r3, [r3, #1]
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d139      	bne.n	800872c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086be:	69da      	ldr	r2, [r3, #28]
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	f003 030f 	and.w	r3, r3, #15
 80086c8:	2101      	movs	r1, #1
 80086ca:	fa01 f303 	lsl.w	r3, r1, r3
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	68f9      	ldr	r1, [r7, #12]
 80086d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086d6:	4313      	orrs	r3, r2
 80086d8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	015a      	lsls	r2, r3, #5
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	4413      	add	r3, r2
 80086e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d153      	bne.n	8008798 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	015a      	lsls	r2, r3, #5
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	4413      	add	r3, r2
 80086f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	791b      	ldrb	r3, [r3, #4]
 800870a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800870c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	059b      	lsls	r3, r3, #22
 8008712:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008714:	431a      	orrs	r2, r3
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	0159      	lsls	r1, r3, #5
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	440b      	add	r3, r1
 800871e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008722:	4619      	mov	r1, r3
 8008724:	4b20      	ldr	r3, [pc, #128]	; (80087a8 <USB_ActivateEndpoint+0x10c>)
 8008726:	4313      	orrs	r3, r2
 8008728:	600b      	str	r3, [r1, #0]
 800872a:	e035      	b.n	8008798 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008732:	69da      	ldr	r2, [r3, #28]
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	f003 030f 	and.w	r3, r3, #15
 800873c:	2101      	movs	r1, #1
 800873e:	fa01 f303 	lsl.w	r3, r1, r3
 8008742:	041b      	lsls	r3, r3, #16
 8008744:	68f9      	ldr	r1, [r7, #12]
 8008746:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800874a:	4313      	orrs	r3, r2
 800874c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	015a      	lsls	r2, r3, #5
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	4413      	add	r3, r2
 8008756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008760:	2b00      	cmp	r3, #0
 8008762:	d119      	bne.n	8008798 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	015a      	lsls	r2, r3, #5
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	4413      	add	r3, r2
 800876c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	791b      	ldrb	r3, [r3, #4]
 800877e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008780:	430b      	orrs	r3, r1
 8008782:	431a      	orrs	r2, r3
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	0159      	lsls	r1, r3, #5
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	440b      	add	r3, r1
 800878c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008790:	4619      	mov	r1, r3
 8008792:	4b05      	ldr	r3, [pc, #20]	; (80087a8 <USB_ActivateEndpoint+0x10c>)
 8008794:	4313      	orrs	r3, r2
 8008796:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	3714      	adds	r7, #20
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop
 80087a8:	10008000 	.word	0x10008000

080087ac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	785b      	ldrb	r3, [r3, #1]
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d161      	bne.n	800888c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	015a      	lsls	r2, r3, #5
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	4413      	add	r3, r2
 80087d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087de:	d11f      	bne.n	8008820 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	015a      	lsls	r2, r3, #5
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	4413      	add	r3, r2
 80087e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	68ba      	ldr	r2, [r7, #8]
 80087f0:	0151      	lsls	r1, r2, #5
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	440a      	add	r2, r1
 80087f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80087fe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	015a      	lsls	r2, r3, #5
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	4413      	add	r3, r2
 8008808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	68ba      	ldr	r2, [r7, #8]
 8008810:	0151      	lsls	r1, r2, #5
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	440a      	add	r2, r1
 8008816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800881a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800881e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008826:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	f003 030f 	and.w	r3, r3, #15
 8008830:	2101      	movs	r1, #1
 8008832:	fa01 f303 	lsl.w	r3, r1, r3
 8008836:	b29b      	uxth	r3, r3
 8008838:	43db      	mvns	r3, r3
 800883a:	68f9      	ldr	r1, [r7, #12]
 800883c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008840:	4013      	ands	r3, r2
 8008842:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800884a:	69da      	ldr	r2, [r3, #28]
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	f003 030f 	and.w	r3, r3, #15
 8008854:	2101      	movs	r1, #1
 8008856:	fa01 f303 	lsl.w	r3, r1, r3
 800885a:	b29b      	uxth	r3, r3
 800885c:	43db      	mvns	r3, r3
 800885e:	68f9      	ldr	r1, [r7, #12]
 8008860:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008864:	4013      	ands	r3, r2
 8008866:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	015a      	lsls	r2, r3, #5
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	4413      	add	r3, r2
 8008870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	0159      	lsls	r1, r3, #5
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	440b      	add	r3, r1
 800887e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008882:	4619      	mov	r1, r3
 8008884:	4b35      	ldr	r3, [pc, #212]	; (800895c <USB_DeactivateEndpoint+0x1b0>)
 8008886:	4013      	ands	r3, r2
 8008888:	600b      	str	r3, [r1, #0]
 800888a:	e060      	b.n	800894e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	015a      	lsls	r2, r3, #5
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	4413      	add	r3, r2
 8008894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800889e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088a2:	d11f      	bne.n	80088e4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	015a      	lsls	r2, r3, #5
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	4413      	add	r3, r2
 80088ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	68ba      	ldr	r2, [r7, #8]
 80088b4:	0151      	lsls	r1, r2, #5
 80088b6:	68fa      	ldr	r2, [r7, #12]
 80088b8:	440a      	add	r2, r1
 80088ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80088c2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	015a      	lsls	r2, r3, #5
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	4413      	add	r3, r2
 80088cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	68ba      	ldr	r2, [r7, #8]
 80088d4:	0151      	lsls	r1, r2, #5
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	440a      	add	r2, r1
 80088da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	f003 030f 	and.w	r3, r3, #15
 80088f4:	2101      	movs	r1, #1
 80088f6:	fa01 f303 	lsl.w	r3, r1, r3
 80088fa:	041b      	lsls	r3, r3, #16
 80088fc:	43db      	mvns	r3, r3
 80088fe:	68f9      	ldr	r1, [r7, #12]
 8008900:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008904:	4013      	ands	r3, r2
 8008906:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800890e:	69da      	ldr	r2, [r3, #28]
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	f003 030f 	and.w	r3, r3, #15
 8008918:	2101      	movs	r1, #1
 800891a:	fa01 f303 	lsl.w	r3, r1, r3
 800891e:	041b      	lsls	r3, r3, #16
 8008920:	43db      	mvns	r3, r3
 8008922:	68f9      	ldr	r1, [r7, #12]
 8008924:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008928:	4013      	ands	r3, r2
 800892a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	015a      	lsls	r2, r3, #5
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	4413      	add	r3, r2
 8008934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	0159      	lsls	r1, r3, #5
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	440b      	add	r3, r1
 8008942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008946:	4619      	mov	r1, r3
 8008948:	4b05      	ldr	r3, [pc, #20]	; (8008960 <USB_DeactivateEndpoint+0x1b4>)
 800894a:	4013      	ands	r3, r2
 800894c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800894e:	2300      	movs	r3, #0
}
 8008950:	4618      	mov	r0, r3
 8008952:	3714      	adds	r7, #20
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr
 800895c:	ec337800 	.word	0xec337800
 8008960:	eff37800 	.word	0xeff37800

08008964 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b08a      	sub	sp, #40	; 0x28
 8008968:	af02      	add	r7, sp, #8
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	4613      	mov	r3, r2
 8008970:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	785b      	ldrb	r3, [r3, #1]
 8008980:	2b01      	cmp	r3, #1
 8008982:	f040 8163 	bne.w	8008c4c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	699b      	ldr	r3, [r3, #24]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d132      	bne.n	80089f4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800898e:	69bb      	ldr	r3, [r7, #24]
 8008990:	015a      	lsls	r2, r3, #5
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	4413      	add	r3, r2
 8008996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800899a:	691a      	ldr	r2, [r3, #16]
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	0159      	lsls	r1, r3, #5
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	440b      	add	r3, r1
 80089a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089a8:	4619      	mov	r1, r3
 80089aa:	4ba5      	ldr	r3, [pc, #660]	; (8008c40 <USB_EPStartXfer+0x2dc>)
 80089ac:	4013      	ands	r3, r2
 80089ae:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80089b0:	69bb      	ldr	r3, [r7, #24]
 80089b2:	015a      	lsls	r2, r3, #5
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	4413      	add	r3, r2
 80089b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089bc:	691b      	ldr	r3, [r3, #16]
 80089be:	69ba      	ldr	r2, [r7, #24]
 80089c0:	0151      	lsls	r1, r2, #5
 80089c2:	69fa      	ldr	r2, [r7, #28]
 80089c4:	440a      	add	r2, r1
 80089c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	015a      	lsls	r2, r3, #5
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	4413      	add	r3, r2
 80089d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089dc:	691a      	ldr	r2, [r3, #16]
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	0159      	lsls	r1, r3, #5
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	440b      	add	r3, r1
 80089e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ea:	4619      	mov	r1, r3
 80089ec:	4b95      	ldr	r3, [pc, #596]	; (8008c44 <USB_EPStartXfer+0x2e0>)
 80089ee:	4013      	ands	r3, r2
 80089f0:	610b      	str	r3, [r1, #16]
 80089f2:	e074      	b.n	8008ade <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80089f4:	69bb      	ldr	r3, [r7, #24]
 80089f6:	015a      	lsls	r2, r3, #5
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	4413      	add	r3, r2
 80089fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a00:	691a      	ldr	r2, [r3, #16]
 8008a02:	69bb      	ldr	r3, [r7, #24]
 8008a04:	0159      	lsls	r1, r3, #5
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	440b      	add	r3, r1
 8008a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a0e:	4619      	mov	r1, r3
 8008a10:	4b8c      	ldr	r3, [pc, #560]	; (8008c44 <USB_EPStartXfer+0x2e0>)
 8008a12:	4013      	ands	r3, r2
 8008a14:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	015a      	lsls	r2, r3, #5
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a22:	691a      	ldr	r2, [r3, #16]
 8008a24:	69bb      	ldr	r3, [r7, #24]
 8008a26:	0159      	lsls	r1, r3, #5
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	440b      	add	r3, r1
 8008a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a30:	4619      	mov	r1, r3
 8008a32:	4b83      	ldr	r3, [pc, #524]	; (8008c40 <USB_EPStartXfer+0x2dc>)
 8008a34:	4013      	ands	r3, r2
 8008a36:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	015a      	lsls	r2, r3, #5
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	4413      	add	r3, r2
 8008a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a44:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	6999      	ldr	r1, [r3, #24]
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	440b      	add	r3, r1
 8008a50:	1e59      	subs	r1, r3, #1
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	fbb1 f3f3 	udiv	r3, r1, r3
 8008a5a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008a5c:	4b7a      	ldr	r3, [pc, #488]	; (8008c48 <USB_EPStartXfer+0x2e4>)
 8008a5e:	400b      	ands	r3, r1
 8008a60:	69b9      	ldr	r1, [r7, #24]
 8008a62:	0148      	lsls	r0, r1, #5
 8008a64:	69f9      	ldr	r1, [r7, #28]
 8008a66:	4401      	add	r1, r0
 8008a68:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	015a      	lsls	r2, r3, #5
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	4413      	add	r3, r2
 8008a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a7c:	691a      	ldr	r2, [r3, #16]
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	699b      	ldr	r3, [r3, #24]
 8008a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a86:	69b9      	ldr	r1, [r7, #24]
 8008a88:	0148      	lsls	r0, r1, #5
 8008a8a:	69f9      	ldr	r1, [r7, #28]
 8008a8c:	4401      	add	r1, r0
 8008a8e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008a92:	4313      	orrs	r3, r2
 8008a94:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	791b      	ldrb	r3, [r3, #4]
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d11f      	bne.n	8008ade <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	015a      	lsls	r2, r3, #5
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	69ba      	ldr	r2, [r7, #24]
 8008aae:	0151      	lsls	r1, r2, #5
 8008ab0:	69fa      	ldr	r2, [r7, #28]
 8008ab2:	440a      	add	r2, r1
 8008ab4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ab8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008abc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	015a      	lsls	r2, r3, #5
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aca:	691b      	ldr	r3, [r3, #16]
 8008acc:	69ba      	ldr	r2, [r7, #24]
 8008ace:	0151      	lsls	r1, r2, #5
 8008ad0:	69fa      	ldr	r2, [r7, #28]
 8008ad2:	440a      	add	r2, r1
 8008ad4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ad8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008adc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008ade:	79fb      	ldrb	r3, [r7, #7]
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d14b      	bne.n	8008b7c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	695b      	ldr	r3, [r3, #20]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d009      	beq.n	8008b00 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	015a      	lsls	r2, r3, #5
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	4413      	add	r3, r2
 8008af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008af8:	461a      	mov	r2, r3
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	695b      	ldr	r3, [r3, #20]
 8008afe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	791b      	ldrb	r3, [r3, #4]
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d128      	bne.n	8008b5a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d110      	bne.n	8008b3a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	015a      	lsls	r2, r3, #5
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	4413      	add	r3, r2
 8008b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	69ba      	ldr	r2, [r7, #24]
 8008b28:	0151      	lsls	r1, r2, #5
 8008b2a:	69fa      	ldr	r2, [r7, #28]
 8008b2c:	440a      	add	r2, r1
 8008b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b36:	6013      	str	r3, [r2, #0]
 8008b38:	e00f      	b.n	8008b5a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	015a      	lsls	r2, r3, #5
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	4413      	add	r3, r2
 8008b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	69ba      	ldr	r2, [r7, #24]
 8008b4a:	0151      	lsls	r1, r2, #5
 8008b4c:	69fa      	ldr	r2, [r7, #28]
 8008b4e:	440a      	add	r2, r1
 8008b50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b58:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	015a      	lsls	r2, r3, #5
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	4413      	add	r3, r2
 8008b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	69ba      	ldr	r2, [r7, #24]
 8008b6a:	0151      	lsls	r1, r2, #5
 8008b6c:	69fa      	ldr	r2, [r7, #28]
 8008b6e:	440a      	add	r2, r1
 8008b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b74:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b78:	6013      	str	r3, [r2, #0]
 8008b7a:	e137      	b.n	8008dec <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b7c:	69bb      	ldr	r3, [r7, #24]
 8008b7e:	015a      	lsls	r2, r3, #5
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	4413      	add	r3, r2
 8008b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	69ba      	ldr	r2, [r7, #24]
 8008b8c:	0151      	lsls	r1, r2, #5
 8008b8e:	69fa      	ldr	r2, [r7, #28]
 8008b90:	440a      	add	r2, r1
 8008b92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b9a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	791b      	ldrb	r3, [r3, #4]
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d015      	beq.n	8008bd0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	699b      	ldr	r3, [r3, #24]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	f000 811f 	beq.w	8008dec <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008bae:	69fb      	ldr	r3, [r7, #28]
 8008bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	f003 030f 	and.w	r3, r3, #15
 8008bbe:	2101      	movs	r1, #1
 8008bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8008bc4:	69f9      	ldr	r1, [r7, #28]
 8008bc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	634b      	str	r3, [r1, #52]	; 0x34
 8008bce:	e10d      	b.n	8008dec <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008bd0:	69fb      	ldr	r3, [r7, #28]
 8008bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d110      	bne.n	8008c02 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	015a      	lsls	r2, r3, #5
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	4413      	add	r3, r2
 8008be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	69ba      	ldr	r2, [r7, #24]
 8008bf0:	0151      	lsls	r1, r2, #5
 8008bf2:	69fa      	ldr	r2, [r7, #28]
 8008bf4:	440a      	add	r2, r1
 8008bf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bfa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008bfe:	6013      	str	r3, [r2, #0]
 8008c00:	e00f      	b.n	8008c22 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	015a      	lsls	r2, r3, #5
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	4413      	add	r3, r2
 8008c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	69ba      	ldr	r2, [r7, #24]
 8008c12:	0151      	lsls	r1, r2, #5
 8008c14:	69fa      	ldr	r2, [r7, #28]
 8008c16:	440a      	add	r2, r1
 8008c18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c20:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	6919      	ldr	r1, [r3, #16]
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	781a      	ldrb	r2, [r3, #0]
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	699b      	ldr	r3, [r3, #24]
 8008c2e:	b298      	uxth	r0, r3
 8008c30:	79fb      	ldrb	r3, [r7, #7]
 8008c32:	9300      	str	r3, [sp, #0]
 8008c34:	4603      	mov	r3, r0
 8008c36:	68f8      	ldr	r0, [r7, #12]
 8008c38:	f000 faea 	bl	8009210 <USB_WritePacket>
 8008c3c:	e0d6      	b.n	8008dec <USB_EPStartXfer+0x488>
 8008c3e:	bf00      	nop
 8008c40:	e007ffff 	.word	0xe007ffff
 8008c44:	fff80000 	.word	0xfff80000
 8008c48:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008c4c:	69bb      	ldr	r3, [r7, #24]
 8008c4e:	015a      	lsls	r2, r3, #5
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	4413      	add	r3, r2
 8008c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c58:	691a      	ldr	r2, [r3, #16]
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	0159      	lsls	r1, r3, #5
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	440b      	add	r3, r1
 8008c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c66:	4619      	mov	r1, r3
 8008c68:	4b63      	ldr	r3, [pc, #396]	; (8008df8 <USB_EPStartXfer+0x494>)
 8008c6a:	4013      	ands	r3, r2
 8008c6c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008c6e:	69bb      	ldr	r3, [r7, #24]
 8008c70:	015a      	lsls	r2, r3, #5
 8008c72:	69fb      	ldr	r3, [r7, #28]
 8008c74:	4413      	add	r3, r2
 8008c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c7a:	691a      	ldr	r2, [r3, #16]
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	0159      	lsls	r1, r3, #5
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	440b      	add	r3, r1
 8008c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c88:	4619      	mov	r1, r3
 8008c8a:	4b5c      	ldr	r3, [pc, #368]	; (8008dfc <USB_EPStartXfer+0x498>)
 8008c8c:	4013      	ands	r3, r2
 8008c8e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	699b      	ldr	r3, [r3, #24]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d123      	bne.n	8008ce0 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	015a      	lsls	r2, r3, #5
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ca4:	691a      	ldr	r2, [r3, #16]
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cae:	69b9      	ldr	r1, [r7, #24]
 8008cb0:	0148      	lsls	r0, r1, #5
 8008cb2:	69f9      	ldr	r1, [r7, #28]
 8008cb4:	4401      	add	r1, r0
 8008cb6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	015a      	lsls	r2, r3, #5
 8008cc2:	69fb      	ldr	r3, [r7, #28]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cca:	691b      	ldr	r3, [r3, #16]
 8008ccc:	69ba      	ldr	r2, [r7, #24]
 8008cce:	0151      	lsls	r1, r2, #5
 8008cd0:	69fa      	ldr	r2, [r7, #28]
 8008cd2:	440a      	add	r2, r1
 8008cd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008cdc:	6113      	str	r3, [r2, #16]
 8008cde:	e037      	b.n	8008d50 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	699a      	ldr	r2, [r3, #24]
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	4413      	add	r3, r2
 8008cea:	1e5a      	subs	r2, r3, #1
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cf4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	8afa      	ldrh	r2, [r7, #22]
 8008cfc:	fb03 f202 	mul.w	r2, r3, r2
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	015a      	lsls	r2, r3, #5
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d10:	691a      	ldr	r2, [r3, #16]
 8008d12:	8afb      	ldrh	r3, [r7, #22]
 8008d14:	04d9      	lsls	r1, r3, #19
 8008d16:	4b3a      	ldr	r3, [pc, #232]	; (8008e00 <USB_EPStartXfer+0x49c>)
 8008d18:	400b      	ands	r3, r1
 8008d1a:	69b9      	ldr	r1, [r7, #24]
 8008d1c:	0148      	lsls	r0, r1, #5
 8008d1e:	69f9      	ldr	r1, [r7, #28]
 8008d20:	4401      	add	r1, r0
 8008d22:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008d26:	4313      	orrs	r3, r2
 8008d28:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	015a      	lsls	r2, r3, #5
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	4413      	add	r3, r2
 8008d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d36:	691a      	ldr	r2, [r3, #16]
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	69db      	ldr	r3, [r3, #28]
 8008d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d40:	69b9      	ldr	r1, [r7, #24]
 8008d42:	0148      	lsls	r0, r1, #5
 8008d44:	69f9      	ldr	r1, [r7, #28]
 8008d46:	4401      	add	r1, r0
 8008d48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008d50:	79fb      	ldrb	r3, [r7, #7]
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d10d      	bne.n	8008d72 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	691b      	ldr	r3, [r3, #16]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d009      	beq.n	8008d72 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	6919      	ldr	r1, [r3, #16]
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	015a      	lsls	r2, r3, #5
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	4413      	add	r3, r2
 8008d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d6e:	460a      	mov	r2, r1
 8008d70:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	791b      	ldrb	r3, [r3, #4]
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d128      	bne.n	8008dcc <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d110      	bne.n	8008dac <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	015a      	lsls	r2, r3, #5
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	4413      	add	r3, r2
 8008d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	69ba      	ldr	r2, [r7, #24]
 8008d9a:	0151      	lsls	r1, r2, #5
 8008d9c:	69fa      	ldr	r2, [r7, #28]
 8008d9e:	440a      	add	r2, r1
 8008da0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008da4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008da8:	6013      	str	r3, [r2, #0]
 8008daa:	e00f      	b.n	8008dcc <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008dac:	69bb      	ldr	r3, [r7, #24]
 8008dae:	015a      	lsls	r2, r3, #5
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	4413      	add	r3, r2
 8008db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	69ba      	ldr	r2, [r7, #24]
 8008dbc:	0151      	lsls	r1, r2, #5
 8008dbe:	69fa      	ldr	r2, [r7, #28]
 8008dc0:	440a      	add	r2, r1
 8008dc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008dcc:	69bb      	ldr	r3, [r7, #24]
 8008dce:	015a      	lsls	r2, r3, #5
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	4413      	add	r3, r2
 8008dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	69ba      	ldr	r2, [r7, #24]
 8008ddc:	0151      	lsls	r1, r2, #5
 8008dde:	69fa      	ldr	r2, [r7, #28]
 8008de0:	440a      	add	r2, r1
 8008de2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008de6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008dea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008dec:	2300      	movs	r3, #0
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3720      	adds	r7, #32
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	fff80000 	.word	0xfff80000
 8008dfc:	e007ffff 	.word	0xe007ffff
 8008e00:	1ff80000 	.word	0x1ff80000

08008e04 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b087      	sub	sp, #28
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	4613      	mov	r3, r2
 8008e10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	785b      	ldrb	r3, [r3, #1]
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	f040 80ce 	bne.w	8008fc2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	699b      	ldr	r3, [r3, #24]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d132      	bne.n	8008e94 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	015a      	lsls	r2, r3, #5
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	4413      	add	r3, r2
 8008e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e3a:	691a      	ldr	r2, [r3, #16]
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	0159      	lsls	r1, r3, #5
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	440b      	add	r3, r1
 8008e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e48:	4619      	mov	r1, r3
 8008e4a:	4b9a      	ldr	r3, [pc, #616]	; (80090b4 <USB_EP0StartXfer+0x2b0>)
 8008e4c:	4013      	ands	r3, r2
 8008e4e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	015a      	lsls	r2, r3, #5
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	4413      	add	r3, r2
 8008e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	693a      	ldr	r2, [r7, #16]
 8008e60:	0151      	lsls	r1, r2, #5
 8008e62:	697a      	ldr	r2, [r7, #20]
 8008e64:	440a      	add	r2, r1
 8008e66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	015a      	lsls	r2, r3, #5
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	4413      	add	r3, r2
 8008e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e7c:	691a      	ldr	r2, [r3, #16]
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	0159      	lsls	r1, r3, #5
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	440b      	add	r3, r1
 8008e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	4b8a      	ldr	r3, [pc, #552]	; (80090b8 <USB_EP0StartXfer+0x2b4>)
 8008e8e:	4013      	ands	r3, r2
 8008e90:	610b      	str	r3, [r1, #16]
 8008e92:	e04e      	b.n	8008f32 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	015a      	lsls	r2, r3, #5
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ea0:	691a      	ldr	r2, [r3, #16]
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	0159      	lsls	r1, r3, #5
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	440b      	add	r3, r1
 8008eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eae:	4619      	mov	r1, r3
 8008eb0:	4b81      	ldr	r3, [pc, #516]	; (80090b8 <USB_EP0StartXfer+0x2b4>)
 8008eb2:	4013      	ands	r3, r2
 8008eb4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	015a      	lsls	r2, r3, #5
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ec2:	691a      	ldr	r2, [r3, #16]
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	0159      	lsls	r1, r3, #5
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	440b      	add	r3, r1
 8008ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	4b78      	ldr	r3, [pc, #480]	; (80090b4 <USB_EP0StartXfer+0x2b0>)
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	699a      	ldr	r2, [r3, #24]
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	68db      	ldr	r3, [r3, #12]
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d903      	bls.n	8008eec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	68da      	ldr	r2, [r3, #12]
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	015a      	lsls	r2, r3, #5
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	693a      	ldr	r2, [r7, #16]
 8008efc:	0151      	lsls	r1, r2, #5
 8008efe:	697a      	ldr	r2, [r7, #20]
 8008f00:	440a      	add	r2, r1
 8008f02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	015a      	lsls	r2, r3, #5
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	4413      	add	r3, r2
 8008f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f18:	691a      	ldr	r2, [r3, #16]
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	699b      	ldr	r3, [r3, #24]
 8008f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f22:	6939      	ldr	r1, [r7, #16]
 8008f24:	0148      	lsls	r0, r1, #5
 8008f26:	6979      	ldr	r1, [r7, #20]
 8008f28:	4401      	add	r1, r0
 8008f2a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008f32:	79fb      	ldrb	r3, [r7, #7]
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d11e      	bne.n	8008f76 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	695b      	ldr	r3, [r3, #20]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d009      	beq.n	8008f54 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	015a      	lsls	r2, r3, #5
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	4413      	add	r3, r2
 8008f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	695b      	ldr	r3, [r3, #20]
 8008f52:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	015a      	lsls	r2, r3, #5
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	693a      	ldr	r2, [r7, #16]
 8008f64:	0151      	lsls	r1, r2, #5
 8008f66:	697a      	ldr	r2, [r7, #20]
 8008f68:	440a      	add	r2, r1
 8008f6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f72:	6013      	str	r3, [r2, #0]
 8008f74:	e097      	b.n	80090a6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	015a      	lsls	r2, r3, #5
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	693a      	ldr	r2, [r7, #16]
 8008f86:	0151      	lsls	r1, r2, #5
 8008f88:	697a      	ldr	r2, [r7, #20]
 8008f8a:	440a      	add	r2, r1
 8008f8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f94:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	699b      	ldr	r3, [r3, #24]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f000 8083 	beq.w	80090a6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	f003 030f 	and.w	r3, r3, #15
 8008fb0:	2101      	movs	r1, #1
 8008fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8008fb6:	6979      	ldr	r1, [r7, #20]
 8008fb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	634b      	str	r3, [r1, #52]	; 0x34
 8008fc0:	e071      	b.n	80090a6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	015a      	lsls	r2, r3, #5
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	4413      	add	r3, r2
 8008fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fce:	691a      	ldr	r2, [r3, #16]
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	0159      	lsls	r1, r3, #5
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	440b      	add	r3, r1
 8008fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fdc:	4619      	mov	r1, r3
 8008fde:	4b36      	ldr	r3, [pc, #216]	; (80090b8 <USB_EP0StartXfer+0x2b4>)
 8008fe0:	4013      	ands	r3, r2
 8008fe2:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	015a      	lsls	r2, r3, #5
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	4413      	add	r3, r2
 8008fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ff0:	691a      	ldr	r2, [r3, #16]
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	0159      	lsls	r1, r3, #5
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	440b      	add	r3, r1
 8008ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ffe:	4619      	mov	r1, r3
 8009000:	4b2c      	ldr	r3, [pc, #176]	; (80090b4 <USB_EP0StartXfer+0x2b0>)
 8009002:	4013      	ands	r3, r2
 8009004:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	699b      	ldr	r3, [r3, #24]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d003      	beq.n	8009016 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	68da      	ldr	r2, [r3, #12]
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	68da      	ldr	r2, [r3, #12]
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	015a      	lsls	r2, r3, #5
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	4413      	add	r3, r2
 8009026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800902a:	691b      	ldr	r3, [r3, #16]
 800902c:	693a      	ldr	r2, [r7, #16]
 800902e:	0151      	lsls	r1, r2, #5
 8009030:	697a      	ldr	r2, [r7, #20]
 8009032:	440a      	add	r2, r1
 8009034:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009038:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800903c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	015a      	lsls	r2, r3, #5
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	4413      	add	r3, r2
 8009046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800904a:	691a      	ldr	r2, [r3, #16]
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	69db      	ldr	r3, [r3, #28]
 8009050:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009054:	6939      	ldr	r1, [r7, #16]
 8009056:	0148      	lsls	r0, r1, #5
 8009058:	6979      	ldr	r1, [r7, #20]
 800905a:	4401      	add	r1, r0
 800905c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009060:	4313      	orrs	r3, r2
 8009062:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009064:	79fb      	ldrb	r3, [r7, #7]
 8009066:	2b01      	cmp	r3, #1
 8009068:	d10d      	bne.n	8009086 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	691b      	ldr	r3, [r3, #16]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d009      	beq.n	8009086 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	6919      	ldr	r1, [r3, #16]
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	015a      	lsls	r2, r3, #5
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	4413      	add	r3, r2
 800907e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009082:	460a      	mov	r2, r1
 8009084:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	015a      	lsls	r2, r3, #5
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	4413      	add	r3, r2
 800908e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	693a      	ldr	r2, [r7, #16]
 8009096:	0151      	lsls	r1, r2, #5
 8009098:	697a      	ldr	r2, [r7, #20]
 800909a:	440a      	add	r2, r1
 800909c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80090a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	371c      	adds	r7, #28
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr
 80090b4:	e007ffff 	.word	0xe007ffff
 80090b8:	fff80000 	.word	0xfff80000

080090bc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80090bc:	b480      	push	{r7}
 80090be:	b087      	sub	sp, #28
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80090c6:	2300      	movs	r3, #0
 80090c8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80090ca:	2300      	movs	r3, #0
 80090cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	785b      	ldrb	r3, [r3, #1]
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d14a      	bne.n	8009170 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	015a      	lsls	r2, r3, #5
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	4413      	add	r3, r2
 80090e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090f2:	f040 8086 	bne.w	8009202 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	015a      	lsls	r2, r3, #5
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	4413      	add	r3, r2
 8009100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	683a      	ldr	r2, [r7, #0]
 8009108:	7812      	ldrb	r2, [r2, #0]
 800910a:	0151      	lsls	r1, r2, #5
 800910c:	693a      	ldr	r2, [r7, #16]
 800910e:	440a      	add	r2, r1
 8009110:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009114:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009118:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	015a      	lsls	r2, r3, #5
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	4413      	add	r3, r2
 8009124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	683a      	ldr	r2, [r7, #0]
 800912c:	7812      	ldrb	r2, [r2, #0]
 800912e:	0151      	lsls	r1, r2, #5
 8009130:	693a      	ldr	r2, [r7, #16]
 8009132:	440a      	add	r2, r1
 8009134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009138:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800913c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	3301      	adds	r3, #1
 8009142:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f242 7210 	movw	r2, #10000	; 0x2710
 800914a:	4293      	cmp	r3, r2
 800914c:	d902      	bls.n	8009154 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	75fb      	strb	r3, [r7, #23]
          break;
 8009152:	e056      	b.n	8009202 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	015a      	lsls	r2, r3, #5
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	4413      	add	r3, r2
 800915e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009168:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800916c:	d0e7      	beq.n	800913e <USB_EPStopXfer+0x82>
 800916e:	e048      	b.n	8009202 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	015a      	lsls	r2, r3, #5
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	4413      	add	r3, r2
 800917a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009184:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009188:	d13b      	bne.n	8009202 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	015a      	lsls	r2, r3, #5
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	4413      	add	r3, r2
 8009194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	683a      	ldr	r2, [r7, #0]
 800919c:	7812      	ldrb	r2, [r2, #0]
 800919e:	0151      	lsls	r1, r2, #5
 80091a0:	693a      	ldr	r2, [r7, #16]
 80091a2:	440a      	add	r2, r1
 80091a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80091ac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	015a      	lsls	r2, r3, #5
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	4413      	add	r3, r2
 80091b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	683a      	ldr	r2, [r7, #0]
 80091c0:	7812      	ldrb	r2, [r2, #0]
 80091c2:	0151      	lsls	r1, r2, #5
 80091c4:	693a      	ldr	r2, [r7, #16]
 80091c6:	440a      	add	r2, r1
 80091c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	3301      	adds	r3, #1
 80091d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f242 7210 	movw	r2, #10000	; 0x2710
 80091de:	4293      	cmp	r3, r2
 80091e0:	d902      	bls.n	80091e8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80091e2:	2301      	movs	r3, #1
 80091e4:	75fb      	strb	r3, [r7, #23]
          break;
 80091e6:	e00c      	b.n	8009202 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	015a      	lsls	r2, r3, #5
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	4413      	add	r3, r2
 80091f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009200:	d0e7      	beq.n	80091d2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009202:	7dfb      	ldrb	r3, [r7, #23]
}
 8009204:	4618      	mov	r0, r3
 8009206:	371c      	adds	r7, #28
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009210:	b480      	push	{r7}
 8009212:	b089      	sub	sp, #36	; 0x24
 8009214:	af00      	add	r7, sp, #0
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	60b9      	str	r1, [r7, #8]
 800921a:	4611      	mov	r1, r2
 800921c:	461a      	mov	r2, r3
 800921e:	460b      	mov	r3, r1
 8009220:	71fb      	strb	r3, [r7, #7]
 8009222:	4613      	mov	r3, r2
 8009224:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800922e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009232:	2b00      	cmp	r3, #0
 8009234:	d123      	bne.n	800927e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009236:	88bb      	ldrh	r3, [r7, #4]
 8009238:	3303      	adds	r3, #3
 800923a:	089b      	lsrs	r3, r3, #2
 800923c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800923e:	2300      	movs	r3, #0
 8009240:	61bb      	str	r3, [r7, #24]
 8009242:	e018      	b.n	8009276 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009244:	79fb      	ldrb	r3, [r7, #7]
 8009246:	031a      	lsls	r2, r3, #12
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	4413      	add	r3, r2
 800924c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009250:	461a      	mov	r2, r3
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009258:	69fb      	ldr	r3, [r7, #28]
 800925a:	3301      	adds	r3, #1
 800925c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800925e:	69fb      	ldr	r3, [r7, #28]
 8009260:	3301      	adds	r3, #1
 8009262:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009264:	69fb      	ldr	r3, [r7, #28]
 8009266:	3301      	adds	r3, #1
 8009268:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800926a:	69fb      	ldr	r3, [r7, #28]
 800926c:	3301      	adds	r3, #1
 800926e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009270:	69bb      	ldr	r3, [r7, #24]
 8009272:	3301      	adds	r3, #1
 8009274:	61bb      	str	r3, [r7, #24]
 8009276:	69ba      	ldr	r2, [r7, #24]
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	429a      	cmp	r2, r3
 800927c:	d3e2      	bcc.n	8009244 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800927e:	2300      	movs	r3, #0
}
 8009280:	4618      	mov	r0, r3
 8009282:	3724      	adds	r7, #36	; 0x24
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800928c:	b480      	push	{r7}
 800928e:	b08b      	sub	sp, #44	; 0x2c
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	4613      	mov	r3, r2
 8009298:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80092a2:	88fb      	ldrh	r3, [r7, #6]
 80092a4:	089b      	lsrs	r3, r3, #2
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80092aa:	88fb      	ldrh	r3, [r7, #6]
 80092ac:	f003 0303 	and.w	r3, r3, #3
 80092b0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80092b2:	2300      	movs	r3, #0
 80092b4:	623b      	str	r3, [r7, #32]
 80092b6:	e014      	b.n	80092e2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c2:	601a      	str	r2, [r3, #0]
    pDest++;
 80092c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c6:	3301      	adds	r3, #1
 80092c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80092ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092cc:	3301      	adds	r3, #1
 80092ce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80092d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d2:	3301      	adds	r3, #1
 80092d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80092d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d8:	3301      	adds	r3, #1
 80092da:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80092dc:	6a3b      	ldr	r3, [r7, #32]
 80092de:	3301      	adds	r3, #1
 80092e0:	623b      	str	r3, [r7, #32]
 80092e2:	6a3a      	ldr	r2, [r7, #32]
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d3e6      	bcc.n	80092b8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80092ea:	8bfb      	ldrh	r3, [r7, #30]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d01e      	beq.n	800932e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80092f0:	2300      	movs	r3, #0
 80092f2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80092f4:	69bb      	ldr	r3, [r7, #24]
 80092f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092fa:	461a      	mov	r2, r3
 80092fc:	f107 0310 	add.w	r3, r7, #16
 8009300:	6812      	ldr	r2, [r2, #0]
 8009302:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009304:	693a      	ldr	r2, [r7, #16]
 8009306:	6a3b      	ldr	r3, [r7, #32]
 8009308:	b2db      	uxtb	r3, r3
 800930a:	00db      	lsls	r3, r3, #3
 800930c:	fa22 f303 	lsr.w	r3, r2, r3
 8009310:	b2da      	uxtb	r2, r3
 8009312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009314:	701a      	strb	r2, [r3, #0]
      i++;
 8009316:	6a3b      	ldr	r3, [r7, #32]
 8009318:	3301      	adds	r3, #1
 800931a:	623b      	str	r3, [r7, #32]
      pDest++;
 800931c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931e:	3301      	adds	r3, #1
 8009320:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009322:	8bfb      	ldrh	r3, [r7, #30]
 8009324:	3b01      	subs	r3, #1
 8009326:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009328:	8bfb      	ldrh	r3, [r7, #30]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d1ea      	bne.n	8009304 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800932e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009330:	4618      	mov	r0, r3
 8009332:	372c      	adds	r7, #44	; 0x2c
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800933c:	b480      	push	{r7}
 800933e:	b085      	sub	sp, #20
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	785b      	ldrb	r3, [r3, #1]
 8009354:	2b01      	cmp	r3, #1
 8009356:	d12c      	bne.n	80093b2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	015a      	lsls	r2, r3, #5
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	4413      	add	r3, r2
 8009360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	db12      	blt.n	8009390 <USB_EPSetStall+0x54>
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d00f      	beq.n	8009390 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	015a      	lsls	r2, r3, #5
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	4413      	add	r3, r2
 8009378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	68ba      	ldr	r2, [r7, #8]
 8009380:	0151      	lsls	r1, r2, #5
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	440a      	add	r2, r1
 8009386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800938a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800938e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	015a      	lsls	r2, r3, #5
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	4413      	add	r3, r2
 8009398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	68ba      	ldr	r2, [r7, #8]
 80093a0:	0151      	lsls	r1, r2, #5
 80093a2:	68fa      	ldr	r2, [r7, #12]
 80093a4:	440a      	add	r2, r1
 80093a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80093ae:	6013      	str	r3, [r2, #0]
 80093b0:	e02b      	b.n	800940a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	015a      	lsls	r2, r3, #5
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	4413      	add	r3, r2
 80093ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	db12      	blt.n	80093ea <USB_EPSetStall+0xae>
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d00f      	beq.n	80093ea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	015a      	lsls	r2, r3, #5
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	4413      	add	r3, r2
 80093d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	68ba      	ldr	r2, [r7, #8]
 80093da:	0151      	lsls	r1, r2, #5
 80093dc:	68fa      	ldr	r2, [r7, #12]
 80093de:	440a      	add	r2, r1
 80093e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80093e8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	015a      	lsls	r2, r3, #5
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	4413      	add	r3, r2
 80093f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	68ba      	ldr	r2, [r7, #8]
 80093fa:	0151      	lsls	r1, r2, #5
 80093fc:	68fa      	ldr	r2, [r7, #12]
 80093fe:	440a      	add	r2, r1
 8009400:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009404:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009408:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3714      	adds	r7, #20
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009418:	b480      	push	{r7}
 800941a:	b085      	sub	sp, #20
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	785b      	ldrb	r3, [r3, #1]
 8009430:	2b01      	cmp	r3, #1
 8009432:	d128      	bne.n	8009486 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	015a      	lsls	r2, r3, #5
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	4413      	add	r3, r2
 800943c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	68ba      	ldr	r2, [r7, #8]
 8009444:	0151      	lsls	r1, r2, #5
 8009446:	68fa      	ldr	r2, [r7, #12]
 8009448:	440a      	add	r2, r1
 800944a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800944e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009452:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	791b      	ldrb	r3, [r3, #4]
 8009458:	2b03      	cmp	r3, #3
 800945a:	d003      	beq.n	8009464 <USB_EPClearStall+0x4c>
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	791b      	ldrb	r3, [r3, #4]
 8009460:	2b02      	cmp	r3, #2
 8009462:	d138      	bne.n	80094d6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	015a      	lsls	r2, r3, #5
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	4413      	add	r3, r2
 800946c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	68ba      	ldr	r2, [r7, #8]
 8009474:	0151      	lsls	r1, r2, #5
 8009476:	68fa      	ldr	r2, [r7, #12]
 8009478:	440a      	add	r2, r1
 800947a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800947e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009482:	6013      	str	r3, [r2, #0]
 8009484:	e027      	b.n	80094d6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	015a      	lsls	r2, r3, #5
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	4413      	add	r3, r2
 800948e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	68ba      	ldr	r2, [r7, #8]
 8009496:	0151      	lsls	r1, r2, #5
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	440a      	add	r2, r1
 800949c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80094a4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	791b      	ldrb	r3, [r3, #4]
 80094aa:	2b03      	cmp	r3, #3
 80094ac:	d003      	beq.n	80094b6 <USB_EPClearStall+0x9e>
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	791b      	ldrb	r3, [r3, #4]
 80094b2:	2b02      	cmp	r3, #2
 80094b4:	d10f      	bne.n	80094d6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	015a      	lsls	r2, r3, #5
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	4413      	add	r3, r2
 80094be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	68ba      	ldr	r2, [r7, #8]
 80094c6:	0151      	lsls	r1, r2, #5
 80094c8:	68fa      	ldr	r2, [r7, #12]
 80094ca:	440a      	add	r2, r1
 80094cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094d4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3714      	adds	r7, #20
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	460b      	mov	r3, r1
 80094ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	68fa      	ldr	r2, [r7, #12]
 80094fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009502:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009506:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	78fb      	ldrb	r3, [r7, #3]
 8009512:	011b      	lsls	r3, r3, #4
 8009514:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009518:	68f9      	ldr	r1, [r7, #12]
 800951a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800951e:	4313      	orrs	r3, r2
 8009520:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009522:	2300      	movs	r3, #0
}
 8009524:	4618      	mov	r0, r3
 8009526:	3714      	adds	r7, #20
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009530:	b480      	push	{r7}
 8009532:	b085      	sub	sp, #20
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800954a:	f023 0303 	bic.w	r3, r3, #3
 800954e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	68fa      	ldr	r2, [r7, #12]
 800955a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800955e:	f023 0302 	bic.w	r3, r3, #2
 8009562:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009564:	2300      	movs	r3, #0
}
 8009566:	4618      	mov	r0, r3
 8009568:	3714      	adds	r7, #20
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr

08009572 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009572:	b480      	push	{r7}
 8009574:	b085      	sub	sp, #20
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	68fa      	ldr	r2, [r7, #12]
 8009588:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800958c:	f023 0303 	bic.w	r3, r3, #3
 8009590:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	68fa      	ldr	r2, [r7, #12]
 800959c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095a0:	f043 0302 	orr.w	r3, r3, #2
 80095a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80095a6:	2300      	movs	r3, #0
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3714      	adds	r7, #20
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b085      	sub	sp, #20
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	695b      	ldr	r3, [r3, #20]
 80095c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	699b      	ldr	r3, [r3, #24]
 80095c6:	68fa      	ldr	r2, [r7, #12]
 80095c8:	4013      	ands	r3, r2
 80095ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80095cc:	68fb      	ldr	r3, [r7, #12]
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3714      	adds	r7, #20
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr

080095da <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80095da:	b480      	push	{r7}
 80095dc:	b085      	sub	sp, #20
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ec:	699b      	ldr	r3, [r3, #24]
 80095ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095f6:	69db      	ldr	r3, [r3, #28]
 80095f8:	68ba      	ldr	r2, [r7, #8]
 80095fa:	4013      	ands	r3, r2
 80095fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	0c1b      	lsrs	r3, r3, #16
}
 8009602:	4618      	mov	r0, r3
 8009604:	3714      	adds	r7, #20
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr

0800960e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800960e:	b480      	push	{r7}
 8009610:	b085      	sub	sp, #20
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009620:	699b      	ldr	r3, [r3, #24]
 8009622:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800962a:	69db      	ldr	r3, [r3, #28]
 800962c:	68ba      	ldr	r2, [r7, #8]
 800962e:	4013      	ands	r3, r2
 8009630:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	b29b      	uxth	r3, r3
}
 8009636:	4618      	mov	r0, r3
 8009638:	3714      	adds	r7, #20
 800963a:	46bd      	mov	sp, r7
 800963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009640:	4770      	bx	lr

08009642 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009642:	b480      	push	{r7}
 8009644:	b085      	sub	sp, #20
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
 800964a:	460b      	mov	r3, r1
 800964c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009652:	78fb      	ldrb	r3, [r7, #3]
 8009654:	015a      	lsls	r2, r3, #5
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	4413      	add	r3, r2
 800965a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009668:	695b      	ldr	r3, [r3, #20]
 800966a:	68ba      	ldr	r2, [r7, #8]
 800966c:	4013      	ands	r3, r2
 800966e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009670:	68bb      	ldr	r3, [r7, #8]
}
 8009672:	4618      	mov	r0, r3
 8009674:	3714      	adds	r7, #20
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr

0800967e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800967e:	b480      	push	{r7}
 8009680:	b087      	sub	sp, #28
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
 8009686:	460b      	mov	r3, r1
 8009688:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009694:	691b      	ldr	r3, [r3, #16]
 8009696:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800969e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096a0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80096a2:	78fb      	ldrb	r3, [r7, #3]
 80096a4:	f003 030f 	and.w	r3, r3, #15
 80096a8:	68fa      	ldr	r2, [r7, #12]
 80096aa:	fa22 f303 	lsr.w	r3, r2, r3
 80096ae:	01db      	lsls	r3, r3, #7
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	693a      	ldr	r2, [r7, #16]
 80096b4:	4313      	orrs	r3, r2
 80096b6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80096b8:	78fb      	ldrb	r3, [r7, #3]
 80096ba:	015a      	lsls	r2, r3, #5
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	4413      	add	r3, r2
 80096c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	693a      	ldr	r2, [r7, #16]
 80096c8:	4013      	ands	r3, r2
 80096ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80096cc:	68bb      	ldr	r3, [r7, #8]
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	371c      	adds	r7, #28
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr

080096da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80096da:	b480      	push	{r7}
 80096dc:	b083      	sub	sp, #12
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	695b      	ldr	r3, [r3, #20]
 80096e6:	f003 0301 	and.w	r3, r3, #1
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	370c      	adds	r7, #12
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr
	...

080096f8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800970a:	681a      	ldr	r2, [r3, #0]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009712:	4619      	mov	r1, r3
 8009714:	4b09      	ldr	r3, [pc, #36]	; (800973c <USB_ActivateSetup+0x44>)
 8009716:	4013      	ands	r3, r2
 8009718:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	68fa      	ldr	r2, [r7, #12]
 8009724:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800972c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800972e:	2300      	movs	r3, #0
}
 8009730:	4618      	mov	r0, r3
 8009732:	3714      	adds	r7, #20
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr
 800973c:	fffff800 	.word	0xfffff800

08009740 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009740:	b480      	push	{r7}
 8009742:	b087      	sub	sp, #28
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	460b      	mov	r3, r1
 800974a:	607a      	str	r2, [r7, #4]
 800974c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	333c      	adds	r3, #60	; 0x3c
 8009756:	3304      	adds	r3, #4
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	4a26      	ldr	r2, [pc, #152]	; (80097f8 <USB_EP0_OutStart+0xb8>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d90a      	bls.n	800977a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009770:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009774:	d101      	bne.n	800977a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009776:	2300      	movs	r3, #0
 8009778:	e037      	b.n	80097ea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009780:	461a      	mov	r2, r3
 8009782:	2300      	movs	r3, #0
 8009784:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	697a      	ldr	r2, [r7, #20]
 8009790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009794:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009798:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	697a      	ldr	r2, [r7, #20]
 80097a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097a8:	f043 0318 	orr.w	r3, r3, #24
 80097ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097b4:	691b      	ldr	r3, [r3, #16]
 80097b6:	697a      	ldr	r2, [r7, #20]
 80097b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097bc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80097c0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80097c2:	7afb      	ldrb	r3, [r7, #11]
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d10f      	bne.n	80097e8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ce:	461a      	mov	r2, r3
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	697a      	ldr	r2, [r7, #20]
 80097de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097e2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80097e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80097e8:	2300      	movs	r3, #0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	371c      	adds	r7, #28
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr
 80097f6:	bf00      	nop
 80097f8:	4f54300a 	.word	0x4f54300a

080097fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b085      	sub	sp, #20
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009804:	2300      	movs	r3, #0
 8009806:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	3301      	adds	r3, #1
 800980c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	4a13      	ldr	r2, [pc, #76]	; (8009860 <USB_CoreReset+0x64>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d901      	bls.n	800981a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009816:	2303      	movs	r3, #3
 8009818:	e01b      	b.n	8009852 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	691b      	ldr	r3, [r3, #16]
 800981e:	2b00      	cmp	r3, #0
 8009820:	daf2      	bge.n	8009808 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009822:	2300      	movs	r3, #0
 8009824:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	691b      	ldr	r3, [r3, #16]
 800982a:	f043 0201 	orr.w	r2, r3, #1
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	3301      	adds	r3, #1
 8009836:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	4a09      	ldr	r2, [pc, #36]	; (8009860 <USB_CoreReset+0x64>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d901      	bls.n	8009844 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009840:	2303      	movs	r3, #3
 8009842:	e006      	b.n	8009852 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	691b      	ldr	r3, [r3, #16]
 8009848:	f003 0301 	and.w	r3, r3, #1
 800984c:	2b01      	cmp	r3, #1
 800984e:	d0f0      	beq.n	8009832 <USB_CoreReset+0x36>

  return HAL_OK;
 8009850:	2300      	movs	r3, #0
}
 8009852:	4618      	mov	r0, r3
 8009854:	3714      	adds	r7, #20
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr
 800985e:	bf00      	nop
 8009860:	00030d40 	.word	0x00030d40

08009864 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009868:	4904      	ldr	r1, [pc, #16]	; (800987c <MX_FATFS_Init+0x18>)
 800986a:	4805      	ldr	r0, [pc, #20]	; (8009880 <MX_FATFS_Init+0x1c>)
 800986c:	f005 fa82 	bl	800ed74 <FATFS_LinkDriver>
 8009870:	4603      	mov	r3, r0
 8009872:	461a      	mov	r2, r3
 8009874:	4b03      	ldr	r3, [pc, #12]	; (8009884 <MX_FATFS_Init+0x20>)
 8009876:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009878:	bf00      	nop
 800987a:	bd80      	pop	{r7, pc}
 800987c:	20002ddc 	.word	0x20002ddc
 8009880:	0801129c 	.word	0x0801129c
 8009884:	20002dd8 	.word	0x20002dd8

08009888 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009888:	b480      	push	{r7}
 800988a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800988c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800988e:	4618      	mov	r0, r3
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800989e:	2300      	movs	r3, #0
 80098a0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80098a2:	f000 f888 	bl	80099b6 <BSP_SD_IsDetected>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d001      	beq.n	80098b0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80098ac:	2302      	movs	r3, #2
 80098ae:	e005      	b.n	80098bc <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80098b0:	4804      	ldr	r0, [pc, #16]	; (80098c4 <BSP_SD_Init+0x2c>)
 80098b2:	f7fc f845 	bl	8005940 <HAL_SD_Init>
 80098b6:	4603      	mov	r3, r0
 80098b8:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80098ba:	79fb      	ldrb	r3, [r7, #7]
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3708      	adds	r7, #8
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	200001ac 	.word	0x200001ac

080098c8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b086      	sub	sp, #24
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80098d4:	2300      	movs	r3, #0
 80098d6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	68ba      	ldr	r2, [r7, #8]
 80098dc:	68f9      	ldr	r1, [r7, #12]
 80098de:	4806      	ldr	r0, [pc, #24]	; (80098f8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80098e0:	f7fc f8e6 	bl	8005ab0 <HAL_SD_ReadBlocks_DMA>
 80098e4:	4603      	mov	r3, r0
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d001      	beq.n	80098ee <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80098ea:	2301      	movs	r3, #1
 80098ec:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80098ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3718      	adds	r7, #24
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}
 80098f8:	200001ac 	.word	0x200001ac

080098fc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b086      	sub	sp, #24
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009908:	2300      	movs	r3, #0
 800990a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	68ba      	ldr	r2, [r7, #8]
 8009910:	68f9      	ldr	r1, [r7, #12]
 8009912:	4806      	ldr	r0, [pc, #24]	; (800992c <BSP_SD_WriteBlocks_DMA+0x30>)
 8009914:	f7fc f9ae 	bl	8005c74 <HAL_SD_WriteBlocks_DMA>
 8009918:	4603      	mov	r3, r0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d001      	beq.n	8009922 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800991e:	2301      	movs	r3, #1
 8009920:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009922:	7dfb      	ldrb	r3, [r7, #23]
}
 8009924:	4618      	mov	r0, r3
 8009926:	3718      	adds	r7, #24
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}
 800992c:	200001ac 	.word	0x200001ac

08009930 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009934:	4805      	ldr	r0, [pc, #20]	; (800994c <BSP_SD_GetCardState+0x1c>)
 8009936:	f7fc fdd3 	bl	80064e0 <HAL_SD_GetCardState>
 800993a:	4603      	mov	r3, r0
 800993c:	2b04      	cmp	r3, #4
 800993e:	bf14      	ite	ne
 8009940:	2301      	movne	r3, #1
 8009942:	2300      	moveq	r3, #0
 8009944:	b2db      	uxtb	r3, r3
}
 8009946:	4618      	mov	r0, r3
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	200001ac 	.word	0x200001ac

08009950 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8009958:	6879      	ldr	r1, [r7, #4]
 800995a:	4803      	ldr	r0, [pc, #12]	; (8009968 <BSP_SD_GetCardInfo+0x18>)
 800995c:	f7fc fd94 	bl	8006488 <HAL_SD_GetCardInfo>
}
 8009960:	bf00      	nop
 8009962:	3708      	adds	r7, #8
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	200001ac 	.word	0x200001ac

0800996c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8009974:	f000 f818 	bl	80099a8 <BSP_SD_AbortCallback>
}
 8009978:	bf00      	nop
 800997a:	3708      	adds	r7, #8
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009988:	f000 f9a8 	bl	8009cdc <BSP_SD_WriteCpltCallback>
}
 800998c:	bf00      	nop
 800998e:	3708      	adds	r7, #8
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b082      	sub	sp, #8
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800999c:	f000 f9aa 	bl	8009cf4 <BSP_SD_ReadCpltCallback>
}
 80099a0:	bf00      	nop
 80099a2:	3708      	adds	r7, #8
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80099a8:	b480      	push	{r7}
 80099aa:	af00      	add	r7, sp, #0

}
 80099ac:	bf00      	nop
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr

080099b6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80099b6:	b580      	push	{r7, lr}
 80099b8:	b082      	sub	sp, #8
 80099ba:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80099bc:	2301      	movs	r3, #1
 80099be:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80099c0:	f000 f80c 	bl	80099dc <BSP_PlatformIsDetected>
 80099c4:	4603      	mov	r3, r0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d101      	bne.n	80099ce <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80099ca:	2300      	movs	r3, #0
 80099cc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80099ce:	79fb      	ldrb	r3, [r7, #7]
 80099d0:	b2db      	uxtb	r3, r3
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3708      	adds	r7, #8
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
	...

080099dc <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80099e2:	2301      	movs	r3, #1
 80099e4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 80099e6:	2104      	movs	r1, #4
 80099e8:	4806      	ldr	r0, [pc, #24]	; (8009a04 <BSP_PlatformIsDetected+0x28>)
 80099ea:	f7f9 fb9f 	bl	800312c <HAL_GPIO_ReadPin>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d001      	beq.n	80099f8 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80099f4:	2300      	movs	r3, #0
 80099f6:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80099f8:	79fb      	ldrb	r3, [r7, #7]
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3708      	adds	r7, #8
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop
 8009a04:	40021800 	.word	0x40021800

08009a08 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8009a10:	f7f7 fef4 	bl	80017fc <HAL_GetTick>
 8009a14:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8009a16:	e006      	b.n	8009a26 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009a18:	f7ff ff8a 	bl	8009930 <BSP_SD_GetCardState>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d101      	bne.n	8009a26 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009a22:	2300      	movs	r3, #0
 8009a24:	e009      	b.n	8009a3a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8009a26:	f7f7 fee9 	bl	80017fc <HAL_GetTick>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	1ad3      	subs	r3, r2, r3
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d8f0      	bhi.n	8009a18 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8009a36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3710      	adds	r7, #16
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
	...

08009a44 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009a4e:	4b0b      	ldr	r3, [pc, #44]	; (8009a7c <SD_CheckStatus+0x38>)
 8009a50:	2201      	movs	r2, #1
 8009a52:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009a54:	f7ff ff6c 	bl	8009930 <BSP_SD_GetCardState>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d107      	bne.n	8009a6e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009a5e:	4b07      	ldr	r3, [pc, #28]	; (8009a7c <SD_CheckStatus+0x38>)
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	f023 0301 	bic.w	r3, r3, #1
 8009a68:	b2da      	uxtb	r2, r3
 8009a6a:	4b04      	ldr	r3, [pc, #16]	; (8009a7c <SD_CheckStatus+0x38>)
 8009a6c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009a6e:	4b03      	ldr	r3, [pc, #12]	; (8009a7c <SD_CheckStatus+0x38>)
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	b2db      	uxtb	r3, r3
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3708      	adds	r7, #8
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}
 8009a7c:	20000009 	.word	0x20000009

08009a80 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	4603      	mov	r3, r0
 8009a88:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009a8a:	f7ff ff05 	bl	8009898 <BSP_SD_Init>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d107      	bne.n	8009aa4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8009a94:	79fb      	ldrb	r3, [r7, #7]
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7ff ffd4 	bl	8009a44 <SD_CheckStatus>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	4b04      	ldr	r3, [pc, #16]	; (8009ab4 <SD_initialize+0x34>)
 8009aa2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009aa4:	4b03      	ldr	r3, [pc, #12]	; (8009ab4 <SD_initialize+0x34>)
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	b2db      	uxtb	r3, r3
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3708      	adds	r7, #8
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
 8009ab2:	bf00      	nop
 8009ab4:	20000009 	.word	0x20000009

08009ab8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b082      	sub	sp, #8
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	4603      	mov	r3, r0
 8009ac0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009ac2:	79fb      	ldrb	r3, [r7, #7]
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f7ff ffbd 	bl	8009a44 <SD_CheckStatus>
 8009aca:	4603      	mov	r3, r0
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3708      	adds	r7, #8
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b086      	sub	sp, #24
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	60b9      	str	r1, [r7, #8]
 8009adc:	607a      	str	r2, [r7, #4]
 8009ade:	603b      	str	r3, [r7, #0]
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009ae8:	f247 5030 	movw	r0, #30000	; 0x7530
 8009aec:	f7ff ff8c 	bl	8009a08 <SD_CheckStatusWithTimeout>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	da01      	bge.n	8009afa <SD_read+0x26>
  {
    return res;
 8009af6:	7dfb      	ldrb	r3, [r7, #23]
 8009af8:	e03b      	b.n	8009b72 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8009afa:	683a      	ldr	r2, [r7, #0]
 8009afc:	6879      	ldr	r1, [r7, #4]
 8009afe:	68b8      	ldr	r0, [r7, #8]
 8009b00:	f7ff fee2 	bl	80098c8 <BSP_SD_ReadBlocks_DMA>
 8009b04:	4603      	mov	r3, r0
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d132      	bne.n	8009b70 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8009b0a:	4b1c      	ldr	r3, [pc, #112]	; (8009b7c <SD_read+0xa8>)
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8009b10:	f7f7 fe74 	bl	80017fc <HAL_GetTick>
 8009b14:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009b16:	bf00      	nop
 8009b18:	4b18      	ldr	r3, [pc, #96]	; (8009b7c <SD_read+0xa8>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d108      	bne.n	8009b32 <SD_read+0x5e>
 8009b20:	f7f7 fe6c 	bl	80017fc <HAL_GetTick>
 8009b24:	4602      	mov	r2, r0
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	1ad3      	subs	r3, r2, r3
 8009b2a:	f247 522f 	movw	r2, #29999	; 0x752f
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d9f2      	bls.n	8009b18 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8009b32:	4b12      	ldr	r3, [pc, #72]	; (8009b7c <SD_read+0xa8>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d102      	bne.n	8009b40 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	75fb      	strb	r3, [r7, #23]
 8009b3e:	e017      	b.n	8009b70 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8009b40:	4b0e      	ldr	r3, [pc, #56]	; (8009b7c <SD_read+0xa8>)
 8009b42:	2200      	movs	r2, #0
 8009b44:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009b46:	f7f7 fe59 	bl	80017fc <HAL_GetTick>
 8009b4a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009b4c:	e007      	b.n	8009b5e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009b4e:	f7ff feef 	bl	8009930 <BSP_SD_GetCardState>
 8009b52:	4603      	mov	r3, r0
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d102      	bne.n	8009b5e <SD_read+0x8a>
          {
            res = RES_OK;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8009b5c:	e008      	b.n	8009b70 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009b5e:	f7f7 fe4d 	bl	80017fc <HAL_GetTick>
 8009b62:	4602      	mov	r2, r0
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	1ad3      	subs	r3, r2, r3
 8009b68:	f247 522f 	movw	r2, #29999	; 0x752f
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d9ee      	bls.n	8009b4e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8009b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3718      	adds	r7, #24
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	20003248 	.word	0x20003248

08009b80 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b086      	sub	sp, #24
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	60b9      	str	r1, [r7, #8]
 8009b88:	607a      	str	r2, [r7, #4]
 8009b8a:	603b      	str	r3, [r7, #0]
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009b90:	2301      	movs	r3, #1
 8009b92:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8009b94:	4b24      	ldr	r3, [pc, #144]	; (8009c28 <SD_write+0xa8>)
 8009b96:	2200      	movs	r2, #0
 8009b98:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009b9a:	f247 5030 	movw	r0, #30000	; 0x7530
 8009b9e:	f7ff ff33 	bl	8009a08 <SD_CheckStatusWithTimeout>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	da01      	bge.n	8009bac <SD_write+0x2c>
  {
    return res;
 8009ba8:	7dfb      	ldrb	r3, [r7, #23]
 8009baa:	e038      	b.n	8009c1e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009bac:	683a      	ldr	r2, [r7, #0]
 8009bae:	6879      	ldr	r1, [r7, #4]
 8009bb0:	68b8      	ldr	r0, [r7, #8]
 8009bb2:	f7ff fea3 	bl	80098fc <BSP_SD_WriteBlocks_DMA>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d12f      	bne.n	8009c1c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8009bbc:	f7f7 fe1e 	bl	80017fc <HAL_GetTick>
 8009bc0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009bc2:	bf00      	nop
 8009bc4:	4b18      	ldr	r3, [pc, #96]	; (8009c28 <SD_write+0xa8>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d108      	bne.n	8009bde <SD_write+0x5e>
 8009bcc:	f7f7 fe16 	bl	80017fc <HAL_GetTick>
 8009bd0:	4602      	mov	r2, r0
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	1ad3      	subs	r3, r2, r3
 8009bd6:	f247 522f 	movw	r2, #29999	; 0x752f
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d9f2      	bls.n	8009bc4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8009bde:	4b12      	ldr	r3, [pc, #72]	; (8009c28 <SD_write+0xa8>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d102      	bne.n	8009bec <SD_write+0x6c>
      {
        res = RES_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	75fb      	strb	r3, [r7, #23]
 8009bea:	e017      	b.n	8009c1c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8009bec:	4b0e      	ldr	r3, [pc, #56]	; (8009c28 <SD_write+0xa8>)
 8009bee:	2200      	movs	r2, #0
 8009bf0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009bf2:	f7f7 fe03 	bl	80017fc <HAL_GetTick>
 8009bf6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009bf8:	e007      	b.n	8009c0a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009bfa:	f7ff fe99 	bl	8009930 <BSP_SD_GetCardState>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d102      	bne.n	8009c0a <SD_write+0x8a>
          {
            res = RES_OK;
 8009c04:	2300      	movs	r3, #0
 8009c06:	75fb      	strb	r3, [r7, #23]
            break;
 8009c08:	e008      	b.n	8009c1c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009c0a:	f7f7 fdf7 	bl	80017fc <HAL_GetTick>
 8009c0e:	4602      	mov	r2, r0
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	1ad3      	subs	r3, r2, r3
 8009c14:	f247 522f 	movw	r2, #29999	; 0x752f
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d9ee      	bls.n	8009bfa <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8009c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3718      	adds	r7, #24
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	20003244 	.word	0x20003244

08009c2c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b08c      	sub	sp, #48	; 0x30
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	4603      	mov	r3, r0
 8009c34:	603a      	str	r2, [r7, #0]
 8009c36:	71fb      	strb	r3, [r7, #7]
 8009c38:	460b      	mov	r3, r1
 8009c3a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009c42:	4b25      	ldr	r3, [pc, #148]	; (8009cd8 <SD_ioctl+0xac>)
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	f003 0301 	and.w	r3, r3, #1
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d001      	beq.n	8009c54 <SD_ioctl+0x28>
 8009c50:	2303      	movs	r3, #3
 8009c52:	e03c      	b.n	8009cce <SD_ioctl+0xa2>

  switch (cmd)
 8009c54:	79bb      	ldrb	r3, [r7, #6]
 8009c56:	2b03      	cmp	r3, #3
 8009c58:	d834      	bhi.n	8009cc4 <SD_ioctl+0x98>
 8009c5a:	a201      	add	r2, pc, #4	; (adr r2, 8009c60 <SD_ioctl+0x34>)
 8009c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c60:	08009c71 	.word	0x08009c71
 8009c64:	08009c79 	.word	0x08009c79
 8009c68:	08009c91 	.word	0x08009c91
 8009c6c:	08009cab 	.word	0x08009cab
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009c70:	2300      	movs	r3, #0
 8009c72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009c76:	e028      	b.n	8009cca <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009c78:	f107 030c 	add.w	r3, r7, #12
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f7ff fe67 	bl	8009950 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009c8e:	e01c      	b.n	8009cca <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009c90:	f107 030c 	add.w	r3, r7, #12
 8009c94:	4618      	mov	r0, r3
 8009c96:	f7ff fe5b 	bl	8009950 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c9c:	b29a      	uxth	r2, r3
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009ca8:	e00f      	b.n	8009cca <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009caa:	f107 030c 	add.w	r3, r7, #12
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7ff fe4e 	bl	8009950 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb6:	0a5a      	lsrs	r2, r3, #9
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009cc2:	e002      	b.n	8009cca <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009cc4:	2304      	movs	r3, #4
 8009cc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009cca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3730      	adds	r7, #48	; 0x30
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	20000009 	.word	0x20000009

08009cdc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8009ce0:	4b03      	ldr	r3, [pc, #12]	; (8009cf0 <BSP_SD_WriteCpltCallback+0x14>)
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	601a      	str	r2, [r3, #0]
}
 8009ce6:	bf00      	nop
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr
 8009cf0:	20003244 	.word	0x20003244

08009cf4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8009cf8:	4b03      	ldr	r3, [pc, #12]	; (8009d08 <BSP_SD_ReadCpltCallback+0x14>)
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	601a      	str	r2, [r3, #0]
}
 8009cfe:	bf00      	nop
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr
 8009d08:	20003248 	.word	0x20003248

08009d0c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	460b      	mov	r3, r1
 8009d16:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009d18:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009d1c:	f005 fe86 	bl	800fa2c <malloc>
 8009d20:	4603      	mov	r3, r0
 8009d22:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d109      	bne.n	8009d3e <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	32b0      	adds	r2, #176	; 0xb0
 8009d34:	2100      	movs	r1, #0
 8009d36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009d3a:	2302      	movs	r3, #2
 8009d3c:	e0d4      	b.n	8009ee8 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009d3e:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009d42:	2100      	movs	r1, #0
 8009d44:	68f8      	ldr	r0, [r7, #12]
 8009d46:	f006 f92c 	bl	800ffa2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	32b0      	adds	r2, #176	; 0xb0
 8009d54:	68f9      	ldr	r1, [r7, #12]
 8009d56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	32b0      	adds	r2, #176	; 0xb0
 8009d64:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	7c1b      	ldrb	r3, [r3, #16]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d138      	bne.n	8009de8 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009d76:	4b5e      	ldr	r3, [pc, #376]	; (8009ef0 <USBD_CDC_Init+0x1e4>)
 8009d78:	7819      	ldrb	r1, [r3, #0]
 8009d7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d7e:	2202      	movs	r2, #2
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f005 fcb0 	bl	800f6e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009d86:	4b5a      	ldr	r3, [pc, #360]	; (8009ef0 <USBD_CDC_Init+0x1e4>)
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	f003 020f 	and.w	r2, r3, #15
 8009d8e:	6879      	ldr	r1, [r7, #4]
 8009d90:	4613      	mov	r3, r2
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	4413      	add	r3, r2
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	440b      	add	r3, r1
 8009d9a:	3324      	adds	r3, #36	; 0x24
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009da0:	4b54      	ldr	r3, [pc, #336]	; (8009ef4 <USBD_CDC_Init+0x1e8>)
 8009da2:	7819      	ldrb	r1, [r3, #0]
 8009da4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009da8:	2202      	movs	r2, #2
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f005 fc9b 	bl	800f6e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009db0:	4b50      	ldr	r3, [pc, #320]	; (8009ef4 <USBD_CDC_Init+0x1e8>)
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	f003 020f 	and.w	r2, r3, #15
 8009db8:	6879      	ldr	r1, [r7, #4]
 8009dba:	4613      	mov	r3, r2
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	4413      	add	r3, r2
 8009dc0:	009b      	lsls	r3, r3, #2
 8009dc2:	440b      	add	r3, r1
 8009dc4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009dc8:	2201      	movs	r2, #1
 8009dca:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009dcc:	4b4a      	ldr	r3, [pc, #296]	; (8009ef8 <USBD_CDC_Init+0x1ec>)
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	f003 020f 	and.w	r2, r3, #15
 8009dd4:	6879      	ldr	r1, [r7, #4]
 8009dd6:	4613      	mov	r3, r2
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	4413      	add	r3, r2
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	440b      	add	r3, r1
 8009de0:	3326      	adds	r3, #38	; 0x26
 8009de2:	2210      	movs	r2, #16
 8009de4:	801a      	strh	r2, [r3, #0]
 8009de6:	e035      	b.n	8009e54 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009de8:	4b41      	ldr	r3, [pc, #260]	; (8009ef0 <USBD_CDC_Init+0x1e4>)
 8009dea:	7819      	ldrb	r1, [r3, #0]
 8009dec:	2340      	movs	r3, #64	; 0x40
 8009dee:	2202      	movs	r2, #2
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f005 fc78 	bl	800f6e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009df6:	4b3e      	ldr	r3, [pc, #248]	; (8009ef0 <USBD_CDC_Init+0x1e4>)
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	f003 020f 	and.w	r2, r3, #15
 8009dfe:	6879      	ldr	r1, [r7, #4]
 8009e00:	4613      	mov	r3, r2
 8009e02:	009b      	lsls	r3, r3, #2
 8009e04:	4413      	add	r3, r2
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	440b      	add	r3, r1
 8009e0a:	3324      	adds	r3, #36	; 0x24
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009e10:	4b38      	ldr	r3, [pc, #224]	; (8009ef4 <USBD_CDC_Init+0x1e8>)
 8009e12:	7819      	ldrb	r1, [r3, #0]
 8009e14:	2340      	movs	r3, #64	; 0x40
 8009e16:	2202      	movs	r2, #2
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f005 fc64 	bl	800f6e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009e1e:	4b35      	ldr	r3, [pc, #212]	; (8009ef4 <USBD_CDC_Init+0x1e8>)
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	f003 020f 	and.w	r2, r3, #15
 8009e26:	6879      	ldr	r1, [r7, #4]
 8009e28:	4613      	mov	r3, r2
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	4413      	add	r3, r2
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	440b      	add	r3, r1
 8009e32:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009e36:	2201      	movs	r2, #1
 8009e38:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009e3a:	4b2f      	ldr	r3, [pc, #188]	; (8009ef8 <USBD_CDC_Init+0x1ec>)
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	f003 020f 	and.w	r2, r3, #15
 8009e42:	6879      	ldr	r1, [r7, #4]
 8009e44:	4613      	mov	r3, r2
 8009e46:	009b      	lsls	r3, r3, #2
 8009e48:	4413      	add	r3, r2
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	440b      	add	r3, r1
 8009e4e:	3326      	adds	r3, #38	; 0x26
 8009e50:	2210      	movs	r2, #16
 8009e52:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009e54:	4b28      	ldr	r3, [pc, #160]	; (8009ef8 <USBD_CDC_Init+0x1ec>)
 8009e56:	7819      	ldrb	r1, [r3, #0]
 8009e58:	2308      	movs	r3, #8
 8009e5a:	2203      	movs	r2, #3
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f005 fc42 	bl	800f6e6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009e62:	4b25      	ldr	r3, [pc, #148]	; (8009ef8 <USBD_CDC_Init+0x1ec>)
 8009e64:	781b      	ldrb	r3, [r3, #0]
 8009e66:	f003 020f 	and.w	r2, r3, #15
 8009e6a:	6879      	ldr	r1, [r7, #4]
 8009e6c:	4613      	mov	r3, r2
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	4413      	add	r3, r2
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	440b      	add	r3, r1
 8009e76:	3324      	adds	r3, #36	; 0x24
 8009e78:	2201      	movs	r2, #1
 8009e7a:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	33b0      	adds	r3, #176	; 0xb0
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	4413      	add	r3, r2
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d101      	bne.n	8009eb6 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8009eb2:	2302      	movs	r3, #2
 8009eb4:	e018      	b.n	8009ee8 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	7c1b      	ldrb	r3, [r3, #16]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d10a      	bne.n	8009ed4 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009ebe:	4b0d      	ldr	r3, [pc, #52]	; (8009ef4 <USBD_CDC_Init+0x1e8>)
 8009ec0:	7819      	ldrb	r1, [r3, #0]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ec8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f005 fcf9 	bl	800f8c4 <USBD_LL_PrepareReceive>
 8009ed2:	e008      	b.n	8009ee6 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009ed4:	4b07      	ldr	r3, [pc, #28]	; (8009ef4 <USBD_CDC_Init+0x1e8>)
 8009ed6:	7819      	ldrb	r1, [r3, #0]
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ede:	2340      	movs	r3, #64	; 0x40
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f005 fcef 	bl	800f8c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009ee6:	2300      	movs	r3, #0
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3710      	adds	r7, #16
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}
 8009ef0:	20000093 	.word	0x20000093
 8009ef4:	20000094 	.word	0x20000094
 8009ef8:	20000095 	.word	0x20000095

08009efc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	460b      	mov	r3, r1
 8009f06:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009f08:	4b3a      	ldr	r3, [pc, #232]	; (8009ff4 <USBD_CDC_DeInit+0xf8>)
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f005 fc0f 	bl	800f732 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009f14:	4b37      	ldr	r3, [pc, #220]	; (8009ff4 <USBD_CDC_DeInit+0xf8>)
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	f003 020f 	and.w	r2, r3, #15
 8009f1c:	6879      	ldr	r1, [r7, #4]
 8009f1e:	4613      	mov	r3, r2
 8009f20:	009b      	lsls	r3, r3, #2
 8009f22:	4413      	add	r3, r2
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	440b      	add	r3, r1
 8009f28:	3324      	adds	r3, #36	; 0x24
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009f2e:	4b32      	ldr	r3, [pc, #200]	; (8009ff8 <USBD_CDC_DeInit+0xfc>)
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	4619      	mov	r1, r3
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f005 fbfc 	bl	800f732 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009f3a:	4b2f      	ldr	r3, [pc, #188]	; (8009ff8 <USBD_CDC_DeInit+0xfc>)
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	f003 020f 	and.w	r2, r3, #15
 8009f42:	6879      	ldr	r1, [r7, #4]
 8009f44:	4613      	mov	r3, r2
 8009f46:	009b      	lsls	r3, r3, #2
 8009f48:	4413      	add	r3, r2
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	440b      	add	r3, r1
 8009f4e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009f52:	2200      	movs	r2, #0
 8009f54:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009f56:	4b29      	ldr	r3, [pc, #164]	; (8009ffc <USBD_CDC_DeInit+0x100>)
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f005 fbe8 	bl	800f732 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009f62:	4b26      	ldr	r3, [pc, #152]	; (8009ffc <USBD_CDC_DeInit+0x100>)
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	f003 020f 	and.w	r2, r3, #15
 8009f6a:	6879      	ldr	r1, [r7, #4]
 8009f6c:	4613      	mov	r3, r2
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	4413      	add	r3, r2
 8009f72:	009b      	lsls	r3, r3, #2
 8009f74:	440b      	add	r3, r1
 8009f76:	3324      	adds	r3, #36	; 0x24
 8009f78:	2200      	movs	r2, #0
 8009f7a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009f7c:	4b1f      	ldr	r3, [pc, #124]	; (8009ffc <USBD_CDC_DeInit+0x100>)
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	f003 020f 	and.w	r2, r3, #15
 8009f84:	6879      	ldr	r1, [r7, #4]
 8009f86:	4613      	mov	r3, r2
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	4413      	add	r3, r2
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	440b      	add	r3, r1
 8009f90:	3326      	adds	r3, #38	; 0x26
 8009f92:	2200      	movs	r2, #0
 8009f94:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	32b0      	adds	r2, #176	; 0xb0
 8009fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d01f      	beq.n	8009fe8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	33b0      	adds	r3, #176	; 0xb0
 8009fb2:	009b      	lsls	r3, r3, #2
 8009fb4:	4413      	add	r3, r2
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	32b0      	adds	r2, #176	; 0xb0
 8009fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f005 fd36 	bl	800fa3c <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	32b0      	adds	r2, #176	; 0xb0
 8009fda:	2100      	movs	r1, #0
 8009fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009fe8:	2300      	movs	r3, #0
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3708      	adds	r7, #8
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	20000093 	.word	0x20000093
 8009ff8:	20000094 	.word	0x20000094
 8009ffc:	20000095 	.word	0x20000095

0800a000 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b086      	sub	sp, #24
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	32b0      	adds	r2, #176	; 0xb0
 800a014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a018:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a01a:	2300      	movs	r3, #0
 800a01c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a01e:	2300      	movs	r3, #0
 800a020:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a022:	2300      	movs	r3, #0
 800a024:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d101      	bne.n	800a030 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a02c:	2303      	movs	r3, #3
 800a02e:	e0bf      	b.n	800a1b0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d050      	beq.n	800a0de <USBD_CDC_Setup+0xde>
 800a03c:	2b20      	cmp	r3, #32
 800a03e:	f040 80af 	bne.w	800a1a0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	88db      	ldrh	r3, [r3, #6]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d03a      	beq.n	800a0c0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	b25b      	sxtb	r3, r3
 800a050:	2b00      	cmp	r3, #0
 800a052:	da1b      	bge.n	800a08c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	33b0      	adds	r3, #176	; 0xb0
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	4413      	add	r3, r2
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	683a      	ldr	r2, [r7, #0]
 800a068:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a06a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a06c:	683a      	ldr	r2, [r7, #0]
 800a06e:	88d2      	ldrh	r2, [r2, #6]
 800a070:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	88db      	ldrh	r3, [r3, #6]
 800a076:	2b07      	cmp	r3, #7
 800a078:	bf28      	it	cs
 800a07a:	2307      	movcs	r3, #7
 800a07c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	89fa      	ldrh	r2, [r7, #14]
 800a082:	4619      	mov	r1, r3
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f001 fdad 	bl	800bbe4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a08a:	e090      	b.n	800a1ae <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	785a      	ldrb	r2, [r3, #1]
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	88db      	ldrh	r3, [r3, #6]
 800a09a:	2b3f      	cmp	r3, #63	; 0x3f
 800a09c:	d803      	bhi.n	800a0a6 <USBD_CDC_Setup+0xa6>
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	88db      	ldrh	r3, [r3, #6]
 800a0a2:	b2da      	uxtb	r2, r3
 800a0a4:	e000      	b.n	800a0a8 <USBD_CDC_Setup+0xa8>
 800a0a6:	2240      	movs	r2, #64	; 0x40
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a0ae:	6939      	ldr	r1, [r7, #16]
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f001 fdbf 	bl	800bc3c <USBD_CtlPrepareRx>
      break;
 800a0be:	e076      	b.n	800a1ae <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a0c6:	687a      	ldr	r2, [r7, #4]
 800a0c8:	33b0      	adds	r3, #176	; 0xb0
 800a0ca:	009b      	lsls	r3, r3, #2
 800a0cc:	4413      	add	r3, r2
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	689b      	ldr	r3, [r3, #8]
 800a0d2:	683a      	ldr	r2, [r7, #0]
 800a0d4:	7850      	ldrb	r0, [r2, #1]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	6839      	ldr	r1, [r7, #0]
 800a0da:	4798      	blx	r3
      break;
 800a0dc:	e067      	b.n	800a1ae <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	785b      	ldrb	r3, [r3, #1]
 800a0e2:	2b0b      	cmp	r3, #11
 800a0e4:	d851      	bhi.n	800a18a <USBD_CDC_Setup+0x18a>
 800a0e6:	a201      	add	r2, pc, #4	; (adr r2, 800a0ec <USBD_CDC_Setup+0xec>)
 800a0e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ec:	0800a11d 	.word	0x0800a11d
 800a0f0:	0800a199 	.word	0x0800a199
 800a0f4:	0800a18b 	.word	0x0800a18b
 800a0f8:	0800a18b 	.word	0x0800a18b
 800a0fc:	0800a18b 	.word	0x0800a18b
 800a100:	0800a18b 	.word	0x0800a18b
 800a104:	0800a18b 	.word	0x0800a18b
 800a108:	0800a18b 	.word	0x0800a18b
 800a10c:	0800a18b 	.word	0x0800a18b
 800a110:	0800a18b 	.word	0x0800a18b
 800a114:	0800a147 	.word	0x0800a147
 800a118:	0800a171 	.word	0x0800a171
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a122:	b2db      	uxtb	r3, r3
 800a124:	2b03      	cmp	r3, #3
 800a126:	d107      	bne.n	800a138 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a128:	f107 030a 	add.w	r3, r7, #10
 800a12c:	2202      	movs	r2, #2
 800a12e:	4619      	mov	r1, r3
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f001 fd57 	bl	800bbe4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a136:	e032      	b.n	800a19e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a138:	6839      	ldr	r1, [r7, #0]
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f001 fce1 	bl	800bb02 <USBD_CtlError>
            ret = USBD_FAIL;
 800a140:	2303      	movs	r3, #3
 800a142:	75fb      	strb	r3, [r7, #23]
          break;
 800a144:	e02b      	b.n	800a19e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a14c:	b2db      	uxtb	r3, r3
 800a14e:	2b03      	cmp	r3, #3
 800a150:	d107      	bne.n	800a162 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a152:	f107 030d 	add.w	r3, r7, #13
 800a156:	2201      	movs	r2, #1
 800a158:	4619      	mov	r1, r3
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f001 fd42 	bl	800bbe4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a160:	e01d      	b.n	800a19e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a162:	6839      	ldr	r1, [r7, #0]
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f001 fccc 	bl	800bb02 <USBD_CtlError>
            ret = USBD_FAIL;
 800a16a:	2303      	movs	r3, #3
 800a16c:	75fb      	strb	r3, [r7, #23]
          break;
 800a16e:	e016      	b.n	800a19e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a176:	b2db      	uxtb	r3, r3
 800a178:	2b03      	cmp	r3, #3
 800a17a:	d00f      	beq.n	800a19c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a17c:	6839      	ldr	r1, [r7, #0]
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f001 fcbf 	bl	800bb02 <USBD_CtlError>
            ret = USBD_FAIL;
 800a184:	2303      	movs	r3, #3
 800a186:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a188:	e008      	b.n	800a19c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a18a:	6839      	ldr	r1, [r7, #0]
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f001 fcb8 	bl	800bb02 <USBD_CtlError>
          ret = USBD_FAIL;
 800a192:	2303      	movs	r3, #3
 800a194:	75fb      	strb	r3, [r7, #23]
          break;
 800a196:	e002      	b.n	800a19e <USBD_CDC_Setup+0x19e>
          break;
 800a198:	bf00      	nop
 800a19a:	e008      	b.n	800a1ae <USBD_CDC_Setup+0x1ae>
          break;
 800a19c:	bf00      	nop
      }
      break;
 800a19e:	e006      	b.n	800a1ae <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a1a0:	6839      	ldr	r1, [r7, #0]
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f001 fcad 	bl	800bb02 <USBD_CtlError>
      ret = USBD_FAIL;
 800a1a8:	2303      	movs	r3, #3
 800a1aa:	75fb      	strb	r3, [r7, #23]
      break;
 800a1ac:	bf00      	nop
  }

  return (uint8_t)ret;
 800a1ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3718      	adds	r7, #24
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	32b0      	adds	r2, #176	; 0xb0
 800a1d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d101      	bne.n	800a1e2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a1de:	2303      	movs	r3, #3
 800a1e0:	e065      	b.n	800a2ae <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	32b0      	adds	r2, #176	; 0xb0
 800a1ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a1f2:	78fb      	ldrb	r3, [r7, #3]
 800a1f4:	f003 020f 	and.w	r2, r3, #15
 800a1f8:	6879      	ldr	r1, [r7, #4]
 800a1fa:	4613      	mov	r3, r2
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	4413      	add	r3, r2
 800a200:	009b      	lsls	r3, r3, #2
 800a202:	440b      	add	r3, r1
 800a204:	3318      	adds	r3, #24
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d02f      	beq.n	800a26c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a20c:	78fb      	ldrb	r3, [r7, #3]
 800a20e:	f003 020f 	and.w	r2, r3, #15
 800a212:	6879      	ldr	r1, [r7, #4]
 800a214:	4613      	mov	r3, r2
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	4413      	add	r3, r2
 800a21a:	009b      	lsls	r3, r3, #2
 800a21c:	440b      	add	r3, r1
 800a21e:	3318      	adds	r3, #24
 800a220:	681a      	ldr	r2, [r3, #0]
 800a222:	78fb      	ldrb	r3, [r7, #3]
 800a224:	f003 010f 	and.w	r1, r3, #15
 800a228:	68f8      	ldr	r0, [r7, #12]
 800a22a:	460b      	mov	r3, r1
 800a22c:	00db      	lsls	r3, r3, #3
 800a22e:	440b      	add	r3, r1
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	4403      	add	r3, r0
 800a234:	3348      	adds	r3, #72	; 0x48
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	fbb2 f1f3 	udiv	r1, r2, r3
 800a23c:	fb01 f303 	mul.w	r3, r1, r3
 800a240:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a242:	2b00      	cmp	r3, #0
 800a244:	d112      	bne.n	800a26c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a246:	78fb      	ldrb	r3, [r7, #3]
 800a248:	f003 020f 	and.w	r2, r3, #15
 800a24c:	6879      	ldr	r1, [r7, #4]
 800a24e:	4613      	mov	r3, r2
 800a250:	009b      	lsls	r3, r3, #2
 800a252:	4413      	add	r3, r2
 800a254:	009b      	lsls	r3, r3, #2
 800a256:	440b      	add	r3, r1
 800a258:	3318      	adds	r3, #24
 800a25a:	2200      	movs	r2, #0
 800a25c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a25e:	78f9      	ldrb	r1, [r7, #3]
 800a260:	2300      	movs	r3, #0
 800a262:	2200      	movs	r2, #0
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f005 fb0c 	bl	800f882 <USBD_LL_Transmit>
 800a26a:	e01f      	b.n	800a2ac <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	2200      	movs	r2, #0
 800a270:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	33b0      	adds	r3, #176	; 0xb0
 800a27e:	009b      	lsls	r3, r3, #2
 800a280:	4413      	add	r3, r2
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	691b      	ldr	r3, [r3, #16]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d010      	beq.n	800a2ac <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	33b0      	adds	r3, #176	; 0xb0
 800a294:	009b      	lsls	r3, r3, #2
 800a296:	4413      	add	r3, r2
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	691b      	ldr	r3, [r3, #16]
 800a29c:	68ba      	ldr	r2, [r7, #8]
 800a29e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a2a2:	68ba      	ldr	r2, [r7, #8]
 800a2a4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a2a8:	78fa      	ldrb	r2, [r7, #3]
 800a2aa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a2ac:	2300      	movs	r3, #0
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3710      	adds	r7, #16
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}

0800a2b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	b084      	sub	sp, #16
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
 800a2be:	460b      	mov	r3, r1
 800a2c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	32b0      	adds	r2, #176	; 0xb0
 800a2cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2d0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	32b0      	adds	r2, #176	; 0xb0
 800a2dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d101      	bne.n	800a2e8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a2e4:	2303      	movs	r3, #3
 800a2e6:	e01a      	b.n	800a31e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a2e8:	78fb      	ldrb	r3, [r7, #3]
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f005 fb0a 	bl	800f906 <USBD_LL_GetRxDataSize>
 800a2f2:	4602      	mov	r2, r0
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	33b0      	adds	r3, #176	; 0xb0
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	4413      	add	r3, r2
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	68db      	ldr	r3, [r3, #12]
 800a30c:	68fa      	ldr	r2, [r7, #12]
 800a30e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a312:	68fa      	ldr	r2, [r7, #12]
 800a314:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a318:	4611      	mov	r1, r2
 800a31a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a31c:	2300      	movs	r3, #0
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3710      	adds	r7, #16
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}

0800a326 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a326:	b580      	push	{r7, lr}
 800a328:	b084      	sub	sp, #16
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	32b0      	adds	r2, #176	; 0xb0
 800a338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a33c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d101      	bne.n	800a348 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a344:	2303      	movs	r3, #3
 800a346:	e025      	b.n	800a394 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	33b0      	adds	r3, #176	; 0xb0
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	4413      	add	r3, r2
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d01a      	beq.n	800a392 <USBD_CDC_EP0_RxReady+0x6c>
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a362:	2bff      	cmp	r3, #255	; 0xff
 800a364:	d015      	beq.n	800a392 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	33b0      	adds	r3, #176	; 0xb0
 800a370:	009b      	lsls	r3, r3, #2
 800a372:	4413      	add	r3, r2
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	68fa      	ldr	r2, [r7, #12]
 800a37a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a37e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a380:	68fa      	ldr	r2, [r7, #12]
 800a382:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a386:	b292      	uxth	r2, r2
 800a388:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	22ff      	movs	r2, #255	; 0xff
 800a38e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a392:	2300      	movs	r3, #0
}
 800a394:	4618      	mov	r0, r3
 800a396:	3710      	adds	r7, #16
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b086      	sub	sp, #24
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a3a4:	2182      	movs	r1, #130	; 0x82
 800a3a6:	4818      	ldr	r0, [pc, #96]	; (800a408 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a3a8:	f000 fd49 	bl	800ae3e <USBD_GetEpDesc>
 800a3ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a3ae:	2101      	movs	r1, #1
 800a3b0:	4815      	ldr	r0, [pc, #84]	; (800a408 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a3b2:	f000 fd44 	bl	800ae3e <USBD_GetEpDesc>
 800a3b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a3b8:	2181      	movs	r1, #129	; 0x81
 800a3ba:	4813      	ldr	r0, [pc, #76]	; (800a408 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a3bc:	f000 fd3f 	bl	800ae3e <USBD_GetEpDesc>
 800a3c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d002      	beq.n	800a3ce <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	2210      	movs	r2, #16
 800a3cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d006      	beq.n	800a3e2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3dc:	711a      	strb	r2, [r3, #4]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d006      	beq.n	800a3f6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3f0:	711a      	strb	r2, [r3, #4]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2243      	movs	r2, #67	; 0x43
 800a3fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a3fc:	4b02      	ldr	r3, [pc, #8]	; (800a408 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3718      	adds	r7, #24
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
 800a406:	bf00      	nop
 800a408:	20000050 	.word	0x20000050

0800a40c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b086      	sub	sp, #24
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a414:	2182      	movs	r1, #130	; 0x82
 800a416:	4818      	ldr	r0, [pc, #96]	; (800a478 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a418:	f000 fd11 	bl	800ae3e <USBD_GetEpDesc>
 800a41c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a41e:	2101      	movs	r1, #1
 800a420:	4815      	ldr	r0, [pc, #84]	; (800a478 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a422:	f000 fd0c 	bl	800ae3e <USBD_GetEpDesc>
 800a426:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a428:	2181      	movs	r1, #129	; 0x81
 800a42a:	4813      	ldr	r0, [pc, #76]	; (800a478 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a42c:	f000 fd07 	bl	800ae3e <USBD_GetEpDesc>
 800a430:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d002      	beq.n	800a43e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	2210      	movs	r2, #16
 800a43c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d006      	beq.n	800a452 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	2200      	movs	r2, #0
 800a448:	711a      	strb	r2, [r3, #4]
 800a44a:	2200      	movs	r2, #0
 800a44c:	f042 0202 	orr.w	r2, r2, #2
 800a450:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d006      	beq.n	800a466 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2200      	movs	r2, #0
 800a45c:	711a      	strb	r2, [r3, #4]
 800a45e:	2200      	movs	r2, #0
 800a460:	f042 0202 	orr.w	r2, r2, #2
 800a464:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2243      	movs	r2, #67	; 0x43
 800a46a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a46c:	4b02      	ldr	r3, [pc, #8]	; (800a478 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3718      	adds	r7, #24
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	20000050 	.word	0x20000050

0800a47c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b086      	sub	sp, #24
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a484:	2182      	movs	r1, #130	; 0x82
 800a486:	4818      	ldr	r0, [pc, #96]	; (800a4e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a488:	f000 fcd9 	bl	800ae3e <USBD_GetEpDesc>
 800a48c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a48e:	2101      	movs	r1, #1
 800a490:	4815      	ldr	r0, [pc, #84]	; (800a4e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a492:	f000 fcd4 	bl	800ae3e <USBD_GetEpDesc>
 800a496:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a498:	2181      	movs	r1, #129	; 0x81
 800a49a:	4813      	ldr	r0, [pc, #76]	; (800a4e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a49c:	f000 fccf 	bl	800ae3e <USBD_GetEpDesc>
 800a4a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d002      	beq.n	800a4ae <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	2210      	movs	r2, #16
 800a4ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d006      	beq.n	800a4c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4bc:	711a      	strb	r2, [r3, #4]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d006      	beq.n	800a4d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4d0:	711a      	strb	r2, [r3, #4]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2243      	movs	r2, #67	; 0x43
 800a4da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a4dc:	4b02      	ldr	r3, [pc, #8]	; (800a4e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3718      	adds	r7, #24
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	20000050 	.word	0x20000050

0800a4ec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	220a      	movs	r2, #10
 800a4f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a4fa:	4b03      	ldr	r3, [pc, #12]	; (800a508 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr
 800a508:	2000000c 	.word	0x2000000c

0800a50c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b083      	sub	sp, #12
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d101      	bne.n	800a520 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a51c:	2303      	movs	r3, #3
 800a51e:	e009      	b.n	800a534 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a526:	687a      	ldr	r2, [r7, #4]
 800a528:	33b0      	adds	r3, #176	; 0xb0
 800a52a:	009b      	lsls	r3, r3, #2
 800a52c:	4413      	add	r3, r2
 800a52e:	683a      	ldr	r2, [r7, #0]
 800a530:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a532:	2300      	movs	r3, #0
}
 800a534:	4618      	mov	r0, r3
 800a536:	370c      	adds	r7, #12
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr

0800a540 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a540:	b480      	push	{r7}
 800a542:	b087      	sub	sp, #28
 800a544:	af00      	add	r7, sp, #0
 800a546:	60f8      	str	r0, [r7, #12]
 800a548:	60b9      	str	r1, [r7, #8]
 800a54a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	32b0      	adds	r2, #176	; 0xb0
 800a556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a55a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d101      	bne.n	800a566 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a562:	2303      	movs	r3, #3
 800a564:	e008      	b.n	800a578 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	68ba      	ldr	r2, [r7, #8]
 800a56a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a576:	2300      	movs	r3, #0
}
 800a578:	4618      	mov	r0, r3
 800a57a:	371c      	adds	r7, #28
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a584:	b480      	push	{r7}
 800a586:	b085      	sub	sp, #20
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	32b0      	adds	r2, #176	; 0xb0
 800a598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a59c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d101      	bne.n	800a5a8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a5a4:	2303      	movs	r3, #3
 800a5a6:	e004      	b.n	800a5b2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	683a      	ldr	r2, [r7, #0]
 800a5ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a5b0:	2300      	movs	r3, #0
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3714      	adds	r7, #20
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr
	...

0800a5c0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b084      	sub	sp, #16
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	32b0      	adds	r2, #176	; 0xb0
 800a5d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5d6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d101      	bne.n	800a5e6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a5e2:	2303      	movs	r3, #3
 800a5e4:	e025      	b.n	800a632 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d11f      	bne.n	800a630 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a5f8:	4b10      	ldr	r3, [pc, #64]	; (800a63c <USBD_CDC_TransmitPacket+0x7c>)
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	f003 020f 	and.w	r2, r3, #15
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	4613      	mov	r3, r2
 800a60a:	009b      	lsls	r3, r3, #2
 800a60c:	4413      	add	r3, r2
 800a60e:	009b      	lsls	r3, r3, #2
 800a610:	4403      	add	r3, r0
 800a612:	3318      	adds	r3, #24
 800a614:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a616:	4b09      	ldr	r3, [pc, #36]	; (800a63c <USBD_CDC_TransmitPacket+0x7c>)
 800a618:	7819      	ldrb	r1, [r3, #0]
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f005 f92b 	bl	800f882 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a62c:	2300      	movs	r3, #0
 800a62e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a630:	7bfb      	ldrb	r3, [r7, #15]
}
 800a632:	4618      	mov	r0, r3
 800a634:	3710      	adds	r7, #16
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	20000093 	.word	0x20000093

0800a640 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	32b0      	adds	r2, #176	; 0xb0
 800a652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a656:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	32b0      	adds	r2, #176	; 0xb0
 800a662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d101      	bne.n	800a66e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a66a:	2303      	movs	r3, #3
 800a66c:	e018      	b.n	800a6a0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	7c1b      	ldrb	r3, [r3, #16]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d10a      	bne.n	800a68c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a676:	4b0c      	ldr	r3, [pc, #48]	; (800a6a8 <USBD_CDC_ReceivePacket+0x68>)
 800a678:	7819      	ldrb	r1, [r3, #0]
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a680:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f005 f91d 	bl	800f8c4 <USBD_LL_PrepareReceive>
 800a68a:	e008      	b.n	800a69e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a68c:	4b06      	ldr	r3, [pc, #24]	; (800a6a8 <USBD_CDC_ReceivePacket+0x68>)
 800a68e:	7819      	ldrb	r1, [r3, #0]
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a696:	2340      	movs	r3, #64	; 0x40
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f005 f913 	bl	800f8c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a69e:	2300      	movs	r3, #0
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3710      	adds	r7, #16
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}
 800a6a8:	20000094 	.word	0x20000094

0800a6ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b086      	sub	sp, #24
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	60f8      	str	r0, [r7, #12]
 800a6b4:	60b9      	str	r1, [r7, #8]
 800a6b6:	4613      	mov	r3, r2
 800a6b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d101      	bne.n	800a6c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a6c0:	2303      	movs	r3, #3
 800a6c2:	e01f      	b.n	800a704 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d003      	beq.n	800a6ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	68ba      	ldr	r2, [r7, #8]
 800a6e6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	79fa      	ldrb	r2, [r7, #7]
 800a6f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a6f8:	68f8      	ldr	r0, [r7, #12]
 800a6fa:	f004 ff8d 	bl	800f618 <USBD_LL_Init>
 800a6fe:	4603      	mov	r3, r0
 800a700:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a702:	7dfb      	ldrb	r3, [r7, #23]
}
 800a704:	4618      	mov	r0, r3
 800a706:	3718      	adds	r7, #24
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a716:	2300      	movs	r3, #0
 800a718:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d101      	bne.n	800a724 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a720:	2303      	movs	r3, #3
 800a722:	e025      	b.n	800a770 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	683a      	ldr	r2, [r7, #0]
 800a728:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	32ae      	adds	r2, #174	; 0xae
 800a736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d00f      	beq.n	800a760 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	32ae      	adds	r2, #174	; 0xae
 800a74a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a750:	f107 020e 	add.w	r2, r7, #14
 800a754:	4610      	mov	r0, r2
 800a756:	4798      	blx	r3
 800a758:	4602      	mov	r2, r0
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a766:	1c5a      	adds	r2, r3, #1
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a76e:	2300      	movs	r3, #0
}
 800a770:	4618      	mov	r0, r3
 800a772:	3710      	adds	r7, #16
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b082      	sub	sp, #8
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f004 ff95 	bl	800f6b0 <USBD_LL_Start>
 800a786:	4603      	mov	r3, r0
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3708      	adds	r7, #8
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a790:	b480      	push	{r7}
 800a792:	b083      	sub	sp, #12
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a798:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	370c      	adds	r7, #12
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a4:	4770      	bx	lr

0800a7a6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b084      	sub	sp, #16
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d009      	beq.n	800a7d4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	78fa      	ldrb	r2, [r7, #3]
 800a7ca:	4611      	mov	r1, r2
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	4798      	blx	r3
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a7d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3710      	adds	r7, #16
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}

0800a7de <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7de:	b580      	push	{r7, lr}
 800a7e0:	b084      	sub	sp, #16
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7f4:	685b      	ldr	r3, [r3, #4]
 800a7f6:	78fa      	ldrb	r2, [r7, #3]
 800a7f8:	4611      	mov	r1, r2
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	4798      	blx	r3
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b00      	cmp	r3, #0
 800a802:	d001      	beq.n	800a808 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a804:	2303      	movs	r3, #3
 800a806:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a808:	7bfb      	ldrb	r3, [r7, #15]
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3710      	adds	r7, #16
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}

0800a812 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a812:	b580      	push	{r7, lr}
 800a814:	b084      	sub	sp, #16
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
 800a81a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a822:	6839      	ldr	r1, [r7, #0]
 800a824:	4618      	mov	r0, r3
 800a826:	f001 f932 	bl	800ba8e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2201      	movs	r2, #1
 800a82e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a838:	461a      	mov	r2, r3
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a846:	f003 031f 	and.w	r3, r3, #31
 800a84a:	2b02      	cmp	r3, #2
 800a84c:	d01a      	beq.n	800a884 <USBD_LL_SetupStage+0x72>
 800a84e:	2b02      	cmp	r3, #2
 800a850:	d822      	bhi.n	800a898 <USBD_LL_SetupStage+0x86>
 800a852:	2b00      	cmp	r3, #0
 800a854:	d002      	beq.n	800a85c <USBD_LL_SetupStage+0x4a>
 800a856:	2b01      	cmp	r3, #1
 800a858:	d00a      	beq.n	800a870 <USBD_LL_SetupStage+0x5e>
 800a85a:	e01d      	b.n	800a898 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a862:	4619      	mov	r1, r3
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f000 fb5f 	bl	800af28 <USBD_StdDevReq>
 800a86a:	4603      	mov	r3, r0
 800a86c:	73fb      	strb	r3, [r7, #15]
      break;
 800a86e:	e020      	b.n	800a8b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a876:	4619      	mov	r1, r3
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 fbc7 	bl	800b00c <USBD_StdItfReq>
 800a87e:	4603      	mov	r3, r0
 800a880:	73fb      	strb	r3, [r7, #15]
      break;
 800a882:	e016      	b.n	800a8b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a88a:	4619      	mov	r1, r3
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 fc29 	bl	800b0e4 <USBD_StdEPReq>
 800a892:	4603      	mov	r3, r0
 800a894:	73fb      	strb	r3, [r7, #15]
      break;
 800a896:	e00c      	b.n	800a8b2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a89e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a8a2:	b2db      	uxtb	r3, r3
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f004 ff62 	bl	800f770 <USBD_LL_StallEP>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	73fb      	strb	r3, [r7, #15]
      break;
 800a8b0:	bf00      	nop
  }

  return ret;
 800a8b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3710      	adds	r7, #16
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}

0800a8bc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b086      	sub	sp, #24
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	607a      	str	r2, [r7, #4]
 800a8c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a8ce:	7afb      	ldrb	r3, [r7, #11]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d16e      	bne.n	800a9b2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a8da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a8e2:	2b03      	cmp	r3, #3
 800a8e4:	f040 8098 	bne.w	800aa18 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	689a      	ldr	r2, [r3, #8]
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	68db      	ldr	r3, [r3, #12]
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d913      	bls.n	800a91c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	689a      	ldr	r2, [r3, #8]
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	68db      	ldr	r3, [r3, #12]
 800a8fc:	1ad2      	subs	r2, r2, r3
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	68da      	ldr	r2, [r3, #12]
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	689b      	ldr	r3, [r3, #8]
 800a90a:	4293      	cmp	r3, r2
 800a90c:	bf28      	it	cs
 800a90e:	4613      	movcs	r3, r2
 800a910:	461a      	mov	r2, r3
 800a912:	6879      	ldr	r1, [r7, #4]
 800a914:	68f8      	ldr	r0, [r7, #12]
 800a916:	f001 f9ae 	bl	800bc76 <USBD_CtlContinueRx>
 800a91a:	e07d      	b.n	800aa18 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a922:	f003 031f 	and.w	r3, r3, #31
 800a926:	2b02      	cmp	r3, #2
 800a928:	d014      	beq.n	800a954 <USBD_LL_DataOutStage+0x98>
 800a92a:	2b02      	cmp	r3, #2
 800a92c:	d81d      	bhi.n	800a96a <USBD_LL_DataOutStage+0xae>
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d002      	beq.n	800a938 <USBD_LL_DataOutStage+0x7c>
 800a932:	2b01      	cmp	r3, #1
 800a934:	d003      	beq.n	800a93e <USBD_LL_DataOutStage+0x82>
 800a936:	e018      	b.n	800a96a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a938:	2300      	movs	r3, #0
 800a93a:	75bb      	strb	r3, [r7, #22]
            break;
 800a93c:	e018      	b.n	800a970 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a944:	b2db      	uxtb	r3, r3
 800a946:	4619      	mov	r1, r3
 800a948:	68f8      	ldr	r0, [r7, #12]
 800a94a:	f000 fa5e 	bl	800ae0a <USBD_CoreFindIF>
 800a94e:	4603      	mov	r3, r0
 800a950:	75bb      	strb	r3, [r7, #22]
            break;
 800a952:	e00d      	b.n	800a970 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a95a:	b2db      	uxtb	r3, r3
 800a95c:	4619      	mov	r1, r3
 800a95e:	68f8      	ldr	r0, [r7, #12]
 800a960:	f000 fa60 	bl	800ae24 <USBD_CoreFindEP>
 800a964:	4603      	mov	r3, r0
 800a966:	75bb      	strb	r3, [r7, #22]
            break;
 800a968:	e002      	b.n	800a970 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a96a:	2300      	movs	r3, #0
 800a96c:	75bb      	strb	r3, [r7, #22]
            break;
 800a96e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a970:	7dbb      	ldrb	r3, [r7, #22]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d119      	bne.n	800a9aa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	2b03      	cmp	r3, #3
 800a980:	d113      	bne.n	800a9aa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a982:	7dba      	ldrb	r2, [r7, #22]
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	32ae      	adds	r2, #174	; 0xae
 800a988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a98c:	691b      	ldr	r3, [r3, #16]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d00b      	beq.n	800a9aa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a992:	7dba      	ldrb	r2, [r7, #22]
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a99a:	7dba      	ldrb	r2, [r7, #22]
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	32ae      	adds	r2, #174	; 0xae
 800a9a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9a4:	691b      	ldr	r3, [r3, #16]
 800a9a6:	68f8      	ldr	r0, [r7, #12]
 800a9a8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a9aa:	68f8      	ldr	r0, [r7, #12]
 800a9ac:	f001 f974 	bl	800bc98 <USBD_CtlSendStatus>
 800a9b0:	e032      	b.n	800aa18 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a9b2:	7afb      	ldrb	r3, [r7, #11]
 800a9b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9b8:	b2db      	uxtb	r3, r3
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	68f8      	ldr	r0, [r7, #12]
 800a9be:	f000 fa31 	bl	800ae24 <USBD_CoreFindEP>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a9c6:	7dbb      	ldrb	r3, [r7, #22]
 800a9c8:	2bff      	cmp	r3, #255	; 0xff
 800a9ca:	d025      	beq.n	800aa18 <USBD_LL_DataOutStage+0x15c>
 800a9cc:	7dbb      	ldrb	r3, [r7, #22]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d122      	bne.n	800aa18 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9d8:	b2db      	uxtb	r3, r3
 800a9da:	2b03      	cmp	r3, #3
 800a9dc:	d117      	bne.n	800aa0e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a9de:	7dba      	ldrb	r2, [r7, #22]
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	32ae      	adds	r2, #174	; 0xae
 800a9e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9e8:	699b      	ldr	r3, [r3, #24]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d00f      	beq.n	800aa0e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a9ee:	7dba      	ldrb	r2, [r7, #22]
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a9f6:	7dba      	ldrb	r2, [r7, #22]
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	32ae      	adds	r2, #174	; 0xae
 800a9fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa00:	699b      	ldr	r3, [r3, #24]
 800aa02:	7afa      	ldrb	r2, [r7, #11]
 800aa04:	4611      	mov	r1, r2
 800aa06:	68f8      	ldr	r0, [r7, #12]
 800aa08:	4798      	blx	r3
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800aa0e:	7dfb      	ldrb	r3, [r7, #23]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d001      	beq.n	800aa18 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800aa14:	7dfb      	ldrb	r3, [r7, #23]
 800aa16:	e000      	b.n	800aa1a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800aa18:	2300      	movs	r3, #0
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3718      	adds	r7, #24
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}

0800aa22 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800aa22:	b580      	push	{r7, lr}
 800aa24:	b086      	sub	sp, #24
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	60f8      	str	r0, [r7, #12]
 800aa2a:	460b      	mov	r3, r1
 800aa2c:	607a      	str	r2, [r7, #4]
 800aa2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800aa30:	7afb      	ldrb	r3, [r7, #11]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d16f      	bne.n	800ab16 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	3314      	adds	r3, #20
 800aa3a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aa42:	2b02      	cmp	r3, #2
 800aa44:	d15a      	bne.n	800aafc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	689a      	ldr	r2, [r3, #8]
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	68db      	ldr	r3, [r3, #12]
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d914      	bls.n	800aa7c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	689a      	ldr	r2, [r3, #8]
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	68db      	ldr	r3, [r3, #12]
 800aa5a:	1ad2      	subs	r2, r2, r3
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	689b      	ldr	r3, [r3, #8]
 800aa64:	461a      	mov	r2, r3
 800aa66:	6879      	ldr	r1, [r7, #4]
 800aa68:	68f8      	ldr	r0, [r7, #12]
 800aa6a:	f001 f8d6 	bl	800bc1a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa6e:	2300      	movs	r3, #0
 800aa70:	2200      	movs	r2, #0
 800aa72:	2100      	movs	r1, #0
 800aa74:	68f8      	ldr	r0, [r7, #12]
 800aa76:	f004 ff25 	bl	800f8c4 <USBD_LL_PrepareReceive>
 800aa7a:	e03f      	b.n	800aafc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	68da      	ldr	r2, [r3, #12]
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	689b      	ldr	r3, [r3, #8]
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d11c      	bne.n	800aac2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	685a      	ldr	r2, [r3, #4]
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d316      	bcc.n	800aac2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	685a      	ldr	r2, [r3, #4]
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aa9e:	429a      	cmp	r2, r3
 800aaa0:	d20f      	bcs.n	800aac2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	2100      	movs	r1, #0
 800aaa6:	68f8      	ldr	r0, [r7, #12]
 800aaa8:	f001 f8b7 	bl	800bc1a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	2200      	movs	r2, #0
 800aab0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aab4:	2300      	movs	r3, #0
 800aab6:	2200      	movs	r2, #0
 800aab8:	2100      	movs	r1, #0
 800aaba:	68f8      	ldr	r0, [r7, #12]
 800aabc:	f004 ff02 	bl	800f8c4 <USBD_LL_PrepareReceive>
 800aac0:	e01c      	b.n	800aafc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	2b03      	cmp	r3, #3
 800aacc:	d10f      	bne.n	800aaee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aad4:	68db      	ldr	r3, [r3, #12]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d009      	beq.n	800aaee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2200      	movs	r2, #0
 800aade:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aae8:	68db      	ldr	r3, [r3, #12]
 800aaea:	68f8      	ldr	r0, [r7, #12]
 800aaec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aaee:	2180      	movs	r1, #128	; 0x80
 800aaf0:	68f8      	ldr	r0, [r7, #12]
 800aaf2:	f004 fe3d 	bl	800f770 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800aaf6:	68f8      	ldr	r0, [r7, #12]
 800aaf8:	f001 f8e1 	bl	800bcbe <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d03a      	beq.n	800ab7c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ab06:	68f8      	ldr	r0, [r7, #12]
 800ab08:	f7ff fe42 	bl	800a790 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ab14:	e032      	b.n	800ab7c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ab16:	7afb      	ldrb	r3, [r7, #11]
 800ab18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ab1c:	b2db      	uxtb	r3, r3
 800ab1e:	4619      	mov	r1, r3
 800ab20:	68f8      	ldr	r0, [r7, #12]
 800ab22:	f000 f97f 	bl	800ae24 <USBD_CoreFindEP>
 800ab26:	4603      	mov	r3, r0
 800ab28:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab2a:	7dfb      	ldrb	r3, [r7, #23]
 800ab2c:	2bff      	cmp	r3, #255	; 0xff
 800ab2e:	d025      	beq.n	800ab7c <USBD_LL_DataInStage+0x15a>
 800ab30:	7dfb      	ldrb	r3, [r7, #23]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d122      	bne.n	800ab7c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	2b03      	cmp	r3, #3
 800ab40:	d11c      	bne.n	800ab7c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ab42:	7dfa      	ldrb	r2, [r7, #23]
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	32ae      	adds	r2, #174	; 0xae
 800ab48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab4c:	695b      	ldr	r3, [r3, #20]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d014      	beq.n	800ab7c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ab52:	7dfa      	ldrb	r2, [r7, #23]
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ab5a:	7dfa      	ldrb	r2, [r7, #23]
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	32ae      	adds	r2, #174	; 0xae
 800ab60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab64:	695b      	ldr	r3, [r3, #20]
 800ab66:	7afa      	ldrb	r2, [r7, #11]
 800ab68:	4611      	mov	r1, r2
 800ab6a:	68f8      	ldr	r0, [r7, #12]
 800ab6c:	4798      	blx	r3
 800ab6e:	4603      	mov	r3, r0
 800ab70:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ab72:	7dbb      	ldrb	r3, [r7, #22]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d001      	beq.n	800ab7c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ab78:	7dbb      	ldrb	r3, [r7, #22]
 800ab7a:	e000      	b.n	800ab7e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ab7c:	2300      	movs	r3, #0
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3718      	adds	r7, #24
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}

0800ab86 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ab86:	b580      	push	{r7, lr}
 800ab88:	b084      	sub	sp, #16
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2201      	movs	r2, #1
 800ab96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2200      	movs	r2, #0
 800aba6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2200      	movs	r2, #0
 800abac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2200      	movs	r2, #0
 800abb4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d014      	beq.n	800abec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d00e      	beq.n	800abec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abd4:	685b      	ldr	r3, [r3, #4]
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	6852      	ldr	r2, [r2, #4]
 800abda:	b2d2      	uxtb	r2, r2
 800abdc:	4611      	mov	r1, r2
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	4798      	blx	r3
 800abe2:	4603      	mov	r3, r0
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d001      	beq.n	800abec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800abe8:	2303      	movs	r3, #3
 800abea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800abec:	2340      	movs	r3, #64	; 0x40
 800abee:	2200      	movs	r2, #0
 800abf0:	2100      	movs	r1, #0
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f004 fd77 	bl	800f6e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2201      	movs	r2, #1
 800abfc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2240      	movs	r2, #64	; 0x40
 800ac04:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ac08:	2340      	movs	r3, #64	; 0x40
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	2180      	movs	r1, #128	; 0x80
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f004 fd69 	bl	800f6e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2201      	movs	r2, #1
 800ac18:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2240      	movs	r2, #64	; 0x40
 800ac1e:	621a      	str	r2, [r3, #32]

  return ret;
 800ac20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3710      	adds	r7, #16
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}

0800ac2a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ac2a:	b480      	push	{r7}
 800ac2c:	b083      	sub	sp, #12
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
 800ac32:	460b      	mov	r3, r1
 800ac34:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	78fa      	ldrb	r2, [r7, #3]
 800ac3a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ac3c:	2300      	movs	r3, #0
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	370c      	adds	r7, #12
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr

0800ac4a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ac4a:	b480      	push	{r7}
 800ac4c:	b083      	sub	sp, #12
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac58:	b2da      	uxtb	r2, r3
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2204      	movs	r2, #4
 800ac64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ac68:	2300      	movs	r3, #0
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	370c      	adds	r7, #12
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac74:	4770      	bx	lr

0800ac76 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ac76:	b480      	push	{r7}
 800ac78:	b083      	sub	sp, #12
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac84:	b2db      	uxtb	r3, r3
 800ac86:	2b04      	cmp	r3, #4
 800ac88:	d106      	bne.n	800ac98 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ac90:	b2da      	uxtb	r2, r3
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ac98:	2300      	movs	r3, #0
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	370c      	adds	r7, #12
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca4:	4770      	bx	lr

0800aca6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aca6:	b580      	push	{r7, lr}
 800aca8:	b082      	sub	sp, #8
 800acaa:	af00      	add	r7, sp, #0
 800acac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acb4:	b2db      	uxtb	r3, r3
 800acb6:	2b03      	cmp	r3, #3
 800acb8:	d110      	bne.n	800acdc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d00b      	beq.n	800acdc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acca:	69db      	ldr	r3, [r3, #28]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d005      	beq.n	800acdc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acd6:	69db      	ldr	r3, [r3, #28]
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800acdc:	2300      	movs	r3, #0
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3708      	adds	r7, #8
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}

0800ace6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ace6:	b580      	push	{r7, lr}
 800ace8:	b082      	sub	sp, #8
 800acea:	af00      	add	r7, sp, #0
 800acec:	6078      	str	r0, [r7, #4]
 800acee:	460b      	mov	r3, r1
 800acf0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	32ae      	adds	r2, #174	; 0xae
 800acfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d101      	bne.n	800ad08 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ad04:	2303      	movs	r3, #3
 800ad06:	e01c      	b.n	800ad42 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad0e:	b2db      	uxtb	r3, r3
 800ad10:	2b03      	cmp	r3, #3
 800ad12:	d115      	bne.n	800ad40 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	32ae      	adds	r2, #174	; 0xae
 800ad1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad22:	6a1b      	ldr	r3, [r3, #32]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d00b      	beq.n	800ad40 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	32ae      	adds	r2, #174	; 0xae
 800ad32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad36:	6a1b      	ldr	r3, [r3, #32]
 800ad38:	78fa      	ldrb	r2, [r7, #3]
 800ad3a:	4611      	mov	r1, r2
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ad40:	2300      	movs	r3, #0
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3708      	adds	r7, #8
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}

0800ad4a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ad4a:	b580      	push	{r7, lr}
 800ad4c:	b082      	sub	sp, #8
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	6078      	str	r0, [r7, #4]
 800ad52:	460b      	mov	r3, r1
 800ad54:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	32ae      	adds	r2, #174	; 0xae
 800ad60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d101      	bne.n	800ad6c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ad68:	2303      	movs	r3, #3
 800ad6a:	e01c      	b.n	800ada6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad72:	b2db      	uxtb	r3, r3
 800ad74:	2b03      	cmp	r3, #3
 800ad76:	d115      	bne.n	800ada4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	32ae      	adds	r2, #174	; 0xae
 800ad82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d00b      	beq.n	800ada4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	32ae      	adds	r2, #174	; 0xae
 800ad96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad9c:	78fa      	ldrb	r2, [r7, #3]
 800ad9e:	4611      	mov	r1, r2
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ada4:	2300      	movs	r3, #0
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3708      	adds	r7, #8
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800adae:	b480      	push	{r7}
 800adb0:	b083      	sub	sp, #12
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800adb6:	2300      	movs	r3, #0
}
 800adb8:	4618      	mov	r0, r3
 800adba:	370c      	adds	r7, #12
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr

0800adc4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b084      	sub	sp, #16
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800adcc:	2300      	movs	r3, #0
 800adce:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2201      	movs	r2, #1
 800add4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d00e      	beq.n	800ae00 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	687a      	ldr	r2, [r7, #4]
 800adec:	6852      	ldr	r2, [r2, #4]
 800adee:	b2d2      	uxtb	r2, r2
 800adf0:	4611      	mov	r1, r2
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	4798      	blx	r3
 800adf6:	4603      	mov	r3, r0
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d001      	beq.n	800ae00 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800adfc:	2303      	movs	r3, #3
 800adfe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ae00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3710      	adds	r7, #16
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}

0800ae0a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ae0a:	b480      	push	{r7}
 800ae0c:	b083      	sub	sp, #12
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
 800ae12:	460b      	mov	r3, r1
 800ae14:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ae16:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	370c      	adds	r7, #12
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr

0800ae24 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b083      	sub	sp, #12
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	460b      	mov	r3, r1
 800ae2e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ae30:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	370c      	adds	r7, #12
 800ae36:	46bd      	mov	sp, r7
 800ae38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3c:	4770      	bx	lr

0800ae3e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ae3e:	b580      	push	{r7, lr}
 800ae40:	b086      	sub	sp, #24
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
 800ae46:	460b      	mov	r3, r1
 800ae48:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ae52:	2300      	movs	r3, #0
 800ae54:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	885b      	ldrh	r3, [r3, #2]
 800ae5a:	b29a      	uxth	r2, r3
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d920      	bls.n	800aea8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	b29b      	uxth	r3, r3
 800ae6c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ae6e:	e013      	b.n	800ae98 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ae70:	f107 030a 	add.w	r3, r7, #10
 800ae74:	4619      	mov	r1, r3
 800ae76:	6978      	ldr	r0, [r7, #20]
 800ae78:	f000 f81b 	bl	800aeb2 <USBD_GetNextDesc>
 800ae7c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	785b      	ldrb	r3, [r3, #1]
 800ae82:	2b05      	cmp	r3, #5
 800ae84:	d108      	bne.n	800ae98 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	789b      	ldrb	r3, [r3, #2]
 800ae8e:	78fa      	ldrb	r2, [r7, #3]
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d008      	beq.n	800aea6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ae94:	2300      	movs	r3, #0
 800ae96:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	885b      	ldrh	r3, [r3, #2]
 800ae9c:	b29a      	uxth	r2, r3
 800ae9e:	897b      	ldrh	r3, [r7, #10]
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d8e5      	bhi.n	800ae70 <USBD_GetEpDesc+0x32>
 800aea4:	e000      	b.n	800aea8 <USBD_GetEpDesc+0x6a>
          break;
 800aea6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800aea8:	693b      	ldr	r3, [r7, #16]
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3718      	adds	r7, #24
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800aeb2:	b480      	push	{r7}
 800aeb4:	b085      	sub	sp, #20
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
 800aeba:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	881a      	ldrh	r2, [r3, #0]
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	781b      	ldrb	r3, [r3, #0]
 800aec8:	b29b      	uxth	r3, r3
 800aeca:	4413      	add	r3, r2
 800aecc:	b29a      	uxth	r2, r3
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	781b      	ldrb	r3, [r3, #0]
 800aed6:	461a      	mov	r2, r3
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	4413      	add	r3, r2
 800aedc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800aede:	68fb      	ldr	r3, [r7, #12]
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3714      	adds	r7, #20
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr

0800aeec <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b087      	sub	sp, #28
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	3301      	adds	r3, #1
 800af02:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800af0a:	8a3b      	ldrh	r3, [r7, #16]
 800af0c:	021b      	lsls	r3, r3, #8
 800af0e:	b21a      	sxth	r2, r3
 800af10:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800af14:	4313      	orrs	r3, r2
 800af16:	b21b      	sxth	r3, r3
 800af18:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800af1a:	89fb      	ldrh	r3, [r7, #14]
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	371c      	adds	r7, #28
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af32:	2300      	movs	r3, #0
 800af34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af3e:	2b40      	cmp	r3, #64	; 0x40
 800af40:	d005      	beq.n	800af4e <USBD_StdDevReq+0x26>
 800af42:	2b40      	cmp	r3, #64	; 0x40
 800af44:	d857      	bhi.n	800aff6 <USBD_StdDevReq+0xce>
 800af46:	2b00      	cmp	r3, #0
 800af48:	d00f      	beq.n	800af6a <USBD_StdDevReq+0x42>
 800af4a:	2b20      	cmp	r3, #32
 800af4c:	d153      	bne.n	800aff6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	32ae      	adds	r2, #174	; 0xae
 800af58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af5c:	689b      	ldr	r3, [r3, #8]
 800af5e:	6839      	ldr	r1, [r7, #0]
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	4798      	blx	r3
 800af64:	4603      	mov	r3, r0
 800af66:	73fb      	strb	r3, [r7, #15]
      break;
 800af68:	e04a      	b.n	800b000 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	785b      	ldrb	r3, [r3, #1]
 800af6e:	2b09      	cmp	r3, #9
 800af70:	d83b      	bhi.n	800afea <USBD_StdDevReq+0xc2>
 800af72:	a201      	add	r2, pc, #4	; (adr r2, 800af78 <USBD_StdDevReq+0x50>)
 800af74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af78:	0800afcd 	.word	0x0800afcd
 800af7c:	0800afe1 	.word	0x0800afe1
 800af80:	0800afeb 	.word	0x0800afeb
 800af84:	0800afd7 	.word	0x0800afd7
 800af88:	0800afeb 	.word	0x0800afeb
 800af8c:	0800afab 	.word	0x0800afab
 800af90:	0800afa1 	.word	0x0800afa1
 800af94:	0800afeb 	.word	0x0800afeb
 800af98:	0800afc3 	.word	0x0800afc3
 800af9c:	0800afb5 	.word	0x0800afb5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800afa0:	6839      	ldr	r1, [r7, #0]
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f000 fa3c 	bl	800b420 <USBD_GetDescriptor>
          break;
 800afa8:	e024      	b.n	800aff4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800afaa:	6839      	ldr	r1, [r7, #0]
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f000 fbcb 	bl	800b748 <USBD_SetAddress>
          break;
 800afb2:	e01f      	b.n	800aff4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800afb4:	6839      	ldr	r1, [r7, #0]
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f000 fc0a 	bl	800b7d0 <USBD_SetConfig>
 800afbc:	4603      	mov	r3, r0
 800afbe:	73fb      	strb	r3, [r7, #15]
          break;
 800afc0:	e018      	b.n	800aff4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800afc2:	6839      	ldr	r1, [r7, #0]
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f000 fcad 	bl	800b924 <USBD_GetConfig>
          break;
 800afca:	e013      	b.n	800aff4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800afcc:	6839      	ldr	r1, [r7, #0]
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f000 fcde 	bl	800b990 <USBD_GetStatus>
          break;
 800afd4:	e00e      	b.n	800aff4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800afd6:	6839      	ldr	r1, [r7, #0]
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f000 fd0d 	bl	800b9f8 <USBD_SetFeature>
          break;
 800afde:	e009      	b.n	800aff4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800afe0:	6839      	ldr	r1, [r7, #0]
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f000 fd31 	bl	800ba4a <USBD_ClrFeature>
          break;
 800afe8:	e004      	b.n	800aff4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800afea:	6839      	ldr	r1, [r7, #0]
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f000 fd88 	bl	800bb02 <USBD_CtlError>
          break;
 800aff2:	bf00      	nop
      }
      break;
 800aff4:	e004      	b.n	800b000 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800aff6:	6839      	ldr	r1, [r7, #0]
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 fd82 	bl	800bb02 <USBD_CtlError>
      break;
 800affe:	bf00      	nop
  }

  return ret;
 800b000:	7bfb      	ldrb	r3, [r7, #15]
}
 800b002:	4618      	mov	r0, r3
 800b004:	3710      	adds	r7, #16
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop

0800b00c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b084      	sub	sp, #16
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b016:	2300      	movs	r3, #0
 800b018:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b022:	2b40      	cmp	r3, #64	; 0x40
 800b024:	d005      	beq.n	800b032 <USBD_StdItfReq+0x26>
 800b026:	2b40      	cmp	r3, #64	; 0x40
 800b028:	d852      	bhi.n	800b0d0 <USBD_StdItfReq+0xc4>
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d001      	beq.n	800b032 <USBD_StdItfReq+0x26>
 800b02e:	2b20      	cmp	r3, #32
 800b030:	d14e      	bne.n	800b0d0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b038:	b2db      	uxtb	r3, r3
 800b03a:	3b01      	subs	r3, #1
 800b03c:	2b02      	cmp	r3, #2
 800b03e:	d840      	bhi.n	800b0c2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	889b      	ldrh	r3, [r3, #4]
 800b044:	b2db      	uxtb	r3, r3
 800b046:	2b01      	cmp	r3, #1
 800b048:	d836      	bhi.n	800b0b8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	889b      	ldrh	r3, [r3, #4]
 800b04e:	b2db      	uxtb	r3, r3
 800b050:	4619      	mov	r1, r3
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f7ff fed9 	bl	800ae0a <USBD_CoreFindIF>
 800b058:	4603      	mov	r3, r0
 800b05a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b05c:	7bbb      	ldrb	r3, [r7, #14]
 800b05e:	2bff      	cmp	r3, #255	; 0xff
 800b060:	d01d      	beq.n	800b09e <USBD_StdItfReq+0x92>
 800b062:	7bbb      	ldrb	r3, [r7, #14]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d11a      	bne.n	800b09e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b068:	7bba      	ldrb	r2, [r7, #14]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	32ae      	adds	r2, #174	; 0xae
 800b06e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b072:	689b      	ldr	r3, [r3, #8]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d00f      	beq.n	800b098 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b078:	7bba      	ldrb	r2, [r7, #14]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b080:	7bba      	ldrb	r2, [r7, #14]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	32ae      	adds	r2, #174	; 0xae
 800b086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b08a:	689b      	ldr	r3, [r3, #8]
 800b08c:	6839      	ldr	r1, [r7, #0]
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	4798      	blx	r3
 800b092:	4603      	mov	r3, r0
 800b094:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b096:	e004      	b.n	800b0a2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b098:	2303      	movs	r3, #3
 800b09a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b09c:	e001      	b.n	800b0a2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b09e:	2303      	movs	r3, #3
 800b0a0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	88db      	ldrh	r3, [r3, #6]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d110      	bne.n	800b0cc <USBD_StdItfReq+0xc0>
 800b0aa:	7bfb      	ldrb	r3, [r7, #15]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d10d      	bne.n	800b0cc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f000 fdf1 	bl	800bc98 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b0b6:	e009      	b.n	800b0cc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b0b8:	6839      	ldr	r1, [r7, #0]
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f000 fd21 	bl	800bb02 <USBD_CtlError>
          break;
 800b0c0:	e004      	b.n	800b0cc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b0c2:	6839      	ldr	r1, [r7, #0]
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f000 fd1c 	bl	800bb02 <USBD_CtlError>
          break;
 800b0ca:	e000      	b.n	800b0ce <USBD_StdItfReq+0xc2>
          break;
 800b0cc:	bf00      	nop
      }
      break;
 800b0ce:	e004      	b.n	800b0da <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b0d0:	6839      	ldr	r1, [r7, #0]
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 fd15 	bl	800bb02 <USBD_CtlError>
      break;
 800b0d8:	bf00      	nop
  }

  return ret;
 800b0da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3710      	adds	r7, #16
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b084      	sub	sp, #16
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	889b      	ldrh	r3, [r3, #4]
 800b0f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	781b      	ldrb	r3, [r3, #0]
 800b0fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b100:	2b40      	cmp	r3, #64	; 0x40
 800b102:	d007      	beq.n	800b114 <USBD_StdEPReq+0x30>
 800b104:	2b40      	cmp	r3, #64	; 0x40
 800b106:	f200 817f 	bhi.w	800b408 <USBD_StdEPReq+0x324>
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d02a      	beq.n	800b164 <USBD_StdEPReq+0x80>
 800b10e:	2b20      	cmp	r3, #32
 800b110:	f040 817a 	bne.w	800b408 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b114:	7bbb      	ldrb	r3, [r7, #14]
 800b116:	4619      	mov	r1, r3
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f7ff fe83 	bl	800ae24 <USBD_CoreFindEP>
 800b11e:	4603      	mov	r3, r0
 800b120:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b122:	7b7b      	ldrb	r3, [r7, #13]
 800b124:	2bff      	cmp	r3, #255	; 0xff
 800b126:	f000 8174 	beq.w	800b412 <USBD_StdEPReq+0x32e>
 800b12a:	7b7b      	ldrb	r3, [r7, #13]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	f040 8170 	bne.w	800b412 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b132:	7b7a      	ldrb	r2, [r7, #13]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b13a:	7b7a      	ldrb	r2, [r7, #13]
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	32ae      	adds	r2, #174	; 0xae
 800b140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b144:	689b      	ldr	r3, [r3, #8]
 800b146:	2b00      	cmp	r3, #0
 800b148:	f000 8163 	beq.w	800b412 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b14c:	7b7a      	ldrb	r2, [r7, #13]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	32ae      	adds	r2, #174	; 0xae
 800b152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b156:	689b      	ldr	r3, [r3, #8]
 800b158:	6839      	ldr	r1, [r7, #0]
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	4798      	blx	r3
 800b15e:	4603      	mov	r3, r0
 800b160:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b162:	e156      	b.n	800b412 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	785b      	ldrb	r3, [r3, #1]
 800b168:	2b03      	cmp	r3, #3
 800b16a:	d008      	beq.n	800b17e <USBD_StdEPReq+0x9a>
 800b16c:	2b03      	cmp	r3, #3
 800b16e:	f300 8145 	bgt.w	800b3fc <USBD_StdEPReq+0x318>
 800b172:	2b00      	cmp	r3, #0
 800b174:	f000 809b 	beq.w	800b2ae <USBD_StdEPReq+0x1ca>
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d03c      	beq.n	800b1f6 <USBD_StdEPReq+0x112>
 800b17c:	e13e      	b.n	800b3fc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b184:	b2db      	uxtb	r3, r3
 800b186:	2b02      	cmp	r3, #2
 800b188:	d002      	beq.n	800b190 <USBD_StdEPReq+0xac>
 800b18a:	2b03      	cmp	r3, #3
 800b18c:	d016      	beq.n	800b1bc <USBD_StdEPReq+0xd8>
 800b18e:	e02c      	b.n	800b1ea <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b190:	7bbb      	ldrb	r3, [r7, #14]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d00d      	beq.n	800b1b2 <USBD_StdEPReq+0xce>
 800b196:	7bbb      	ldrb	r3, [r7, #14]
 800b198:	2b80      	cmp	r3, #128	; 0x80
 800b19a:	d00a      	beq.n	800b1b2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b19c:	7bbb      	ldrb	r3, [r7, #14]
 800b19e:	4619      	mov	r1, r3
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f004 fae5 	bl	800f770 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b1a6:	2180      	movs	r1, #128	; 0x80
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f004 fae1 	bl	800f770 <USBD_LL_StallEP>
 800b1ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b1b0:	e020      	b.n	800b1f4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b1b2:	6839      	ldr	r1, [r7, #0]
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 fca4 	bl	800bb02 <USBD_CtlError>
              break;
 800b1ba:	e01b      	b.n	800b1f4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	885b      	ldrh	r3, [r3, #2]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d10e      	bne.n	800b1e2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b1c4:	7bbb      	ldrb	r3, [r7, #14]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d00b      	beq.n	800b1e2 <USBD_StdEPReq+0xfe>
 800b1ca:	7bbb      	ldrb	r3, [r7, #14]
 800b1cc:	2b80      	cmp	r3, #128	; 0x80
 800b1ce:	d008      	beq.n	800b1e2 <USBD_StdEPReq+0xfe>
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	88db      	ldrh	r3, [r3, #6]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d104      	bne.n	800b1e2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b1d8:	7bbb      	ldrb	r3, [r7, #14]
 800b1da:	4619      	mov	r1, r3
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f004 fac7 	bl	800f770 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f000 fd58 	bl	800bc98 <USBD_CtlSendStatus>

              break;
 800b1e8:	e004      	b.n	800b1f4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b1ea:	6839      	ldr	r1, [r7, #0]
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f000 fc88 	bl	800bb02 <USBD_CtlError>
              break;
 800b1f2:	bf00      	nop
          }
          break;
 800b1f4:	e107      	b.n	800b406 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1fc:	b2db      	uxtb	r3, r3
 800b1fe:	2b02      	cmp	r3, #2
 800b200:	d002      	beq.n	800b208 <USBD_StdEPReq+0x124>
 800b202:	2b03      	cmp	r3, #3
 800b204:	d016      	beq.n	800b234 <USBD_StdEPReq+0x150>
 800b206:	e04b      	b.n	800b2a0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b208:	7bbb      	ldrb	r3, [r7, #14]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d00d      	beq.n	800b22a <USBD_StdEPReq+0x146>
 800b20e:	7bbb      	ldrb	r3, [r7, #14]
 800b210:	2b80      	cmp	r3, #128	; 0x80
 800b212:	d00a      	beq.n	800b22a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b214:	7bbb      	ldrb	r3, [r7, #14]
 800b216:	4619      	mov	r1, r3
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f004 faa9 	bl	800f770 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b21e:	2180      	movs	r1, #128	; 0x80
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f004 faa5 	bl	800f770 <USBD_LL_StallEP>
 800b226:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b228:	e040      	b.n	800b2ac <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b22a:	6839      	ldr	r1, [r7, #0]
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f000 fc68 	bl	800bb02 <USBD_CtlError>
              break;
 800b232:	e03b      	b.n	800b2ac <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	885b      	ldrh	r3, [r3, #2]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d136      	bne.n	800b2aa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b23c:	7bbb      	ldrb	r3, [r7, #14]
 800b23e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b242:	2b00      	cmp	r3, #0
 800b244:	d004      	beq.n	800b250 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b246:	7bbb      	ldrb	r3, [r7, #14]
 800b248:	4619      	mov	r1, r3
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f004 faaf 	bl	800f7ae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f000 fd21 	bl	800bc98 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b256:	7bbb      	ldrb	r3, [r7, #14]
 800b258:	4619      	mov	r1, r3
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f7ff fde2 	bl	800ae24 <USBD_CoreFindEP>
 800b260:	4603      	mov	r3, r0
 800b262:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b264:	7b7b      	ldrb	r3, [r7, #13]
 800b266:	2bff      	cmp	r3, #255	; 0xff
 800b268:	d01f      	beq.n	800b2aa <USBD_StdEPReq+0x1c6>
 800b26a:	7b7b      	ldrb	r3, [r7, #13]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d11c      	bne.n	800b2aa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b270:	7b7a      	ldrb	r2, [r7, #13]
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b278:	7b7a      	ldrb	r2, [r7, #13]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	32ae      	adds	r2, #174	; 0xae
 800b27e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b282:	689b      	ldr	r3, [r3, #8]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d010      	beq.n	800b2aa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b288:	7b7a      	ldrb	r2, [r7, #13]
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	32ae      	adds	r2, #174	; 0xae
 800b28e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b292:	689b      	ldr	r3, [r3, #8]
 800b294:	6839      	ldr	r1, [r7, #0]
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	4798      	blx	r3
 800b29a:	4603      	mov	r3, r0
 800b29c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b29e:	e004      	b.n	800b2aa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b2a0:	6839      	ldr	r1, [r7, #0]
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f000 fc2d 	bl	800bb02 <USBD_CtlError>
              break;
 800b2a8:	e000      	b.n	800b2ac <USBD_StdEPReq+0x1c8>
              break;
 800b2aa:	bf00      	nop
          }
          break;
 800b2ac:	e0ab      	b.n	800b406 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2b4:	b2db      	uxtb	r3, r3
 800b2b6:	2b02      	cmp	r3, #2
 800b2b8:	d002      	beq.n	800b2c0 <USBD_StdEPReq+0x1dc>
 800b2ba:	2b03      	cmp	r3, #3
 800b2bc:	d032      	beq.n	800b324 <USBD_StdEPReq+0x240>
 800b2be:	e097      	b.n	800b3f0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b2c0:	7bbb      	ldrb	r3, [r7, #14]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d007      	beq.n	800b2d6 <USBD_StdEPReq+0x1f2>
 800b2c6:	7bbb      	ldrb	r3, [r7, #14]
 800b2c8:	2b80      	cmp	r3, #128	; 0x80
 800b2ca:	d004      	beq.n	800b2d6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b2cc:	6839      	ldr	r1, [r7, #0]
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f000 fc17 	bl	800bb02 <USBD_CtlError>
                break;
 800b2d4:	e091      	b.n	800b3fa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	da0b      	bge.n	800b2f6 <USBD_StdEPReq+0x212>
 800b2de:	7bbb      	ldrb	r3, [r7, #14]
 800b2e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b2e4:	4613      	mov	r3, r2
 800b2e6:	009b      	lsls	r3, r3, #2
 800b2e8:	4413      	add	r3, r2
 800b2ea:	009b      	lsls	r3, r3, #2
 800b2ec:	3310      	adds	r3, #16
 800b2ee:	687a      	ldr	r2, [r7, #4]
 800b2f0:	4413      	add	r3, r2
 800b2f2:	3304      	adds	r3, #4
 800b2f4:	e00b      	b.n	800b30e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b2f6:	7bbb      	ldrb	r3, [r7, #14]
 800b2f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2fc:	4613      	mov	r3, r2
 800b2fe:	009b      	lsls	r3, r3, #2
 800b300:	4413      	add	r3, r2
 800b302:	009b      	lsls	r3, r3, #2
 800b304:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b308:	687a      	ldr	r2, [r7, #4]
 800b30a:	4413      	add	r3, r2
 800b30c:	3304      	adds	r3, #4
 800b30e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	2200      	movs	r2, #0
 800b314:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	2202      	movs	r2, #2
 800b31a:	4619      	mov	r1, r3
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 fc61 	bl	800bbe4 <USBD_CtlSendData>
              break;
 800b322:	e06a      	b.n	800b3fa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b324:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	da11      	bge.n	800b350 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b32c:	7bbb      	ldrb	r3, [r7, #14]
 800b32e:	f003 020f 	and.w	r2, r3, #15
 800b332:	6879      	ldr	r1, [r7, #4]
 800b334:	4613      	mov	r3, r2
 800b336:	009b      	lsls	r3, r3, #2
 800b338:	4413      	add	r3, r2
 800b33a:	009b      	lsls	r3, r3, #2
 800b33c:	440b      	add	r3, r1
 800b33e:	3324      	adds	r3, #36	; 0x24
 800b340:	881b      	ldrh	r3, [r3, #0]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d117      	bne.n	800b376 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b346:	6839      	ldr	r1, [r7, #0]
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f000 fbda 	bl	800bb02 <USBD_CtlError>
                  break;
 800b34e:	e054      	b.n	800b3fa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b350:	7bbb      	ldrb	r3, [r7, #14]
 800b352:	f003 020f 	and.w	r2, r3, #15
 800b356:	6879      	ldr	r1, [r7, #4]
 800b358:	4613      	mov	r3, r2
 800b35a:	009b      	lsls	r3, r3, #2
 800b35c:	4413      	add	r3, r2
 800b35e:	009b      	lsls	r3, r3, #2
 800b360:	440b      	add	r3, r1
 800b362:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b366:	881b      	ldrh	r3, [r3, #0]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d104      	bne.n	800b376 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b36c:	6839      	ldr	r1, [r7, #0]
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f000 fbc7 	bl	800bb02 <USBD_CtlError>
                  break;
 800b374:	e041      	b.n	800b3fa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b376:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	da0b      	bge.n	800b396 <USBD_StdEPReq+0x2b2>
 800b37e:	7bbb      	ldrb	r3, [r7, #14]
 800b380:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b384:	4613      	mov	r3, r2
 800b386:	009b      	lsls	r3, r3, #2
 800b388:	4413      	add	r3, r2
 800b38a:	009b      	lsls	r3, r3, #2
 800b38c:	3310      	adds	r3, #16
 800b38e:	687a      	ldr	r2, [r7, #4]
 800b390:	4413      	add	r3, r2
 800b392:	3304      	adds	r3, #4
 800b394:	e00b      	b.n	800b3ae <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b396:	7bbb      	ldrb	r3, [r7, #14]
 800b398:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b39c:	4613      	mov	r3, r2
 800b39e:	009b      	lsls	r3, r3, #2
 800b3a0:	4413      	add	r3, r2
 800b3a2:	009b      	lsls	r3, r3, #2
 800b3a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b3a8:	687a      	ldr	r2, [r7, #4]
 800b3aa:	4413      	add	r3, r2
 800b3ac:	3304      	adds	r3, #4
 800b3ae:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b3b0:	7bbb      	ldrb	r3, [r7, #14]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d002      	beq.n	800b3bc <USBD_StdEPReq+0x2d8>
 800b3b6:	7bbb      	ldrb	r3, [r7, #14]
 800b3b8:	2b80      	cmp	r3, #128	; 0x80
 800b3ba:	d103      	bne.n	800b3c4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	601a      	str	r2, [r3, #0]
 800b3c2:	e00e      	b.n	800b3e2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b3c4:	7bbb      	ldrb	r3, [r7, #14]
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f004 fa0f 	bl	800f7ec <USBD_LL_IsStallEP>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d003      	beq.n	800b3dc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	601a      	str	r2, [r3, #0]
 800b3da:	e002      	b.n	800b3e2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	2202      	movs	r2, #2
 800b3e6:	4619      	mov	r1, r3
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f000 fbfb 	bl	800bbe4 <USBD_CtlSendData>
              break;
 800b3ee:	e004      	b.n	800b3fa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b3f0:	6839      	ldr	r1, [r7, #0]
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f000 fb85 	bl	800bb02 <USBD_CtlError>
              break;
 800b3f8:	bf00      	nop
          }
          break;
 800b3fa:	e004      	b.n	800b406 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b3fc:	6839      	ldr	r1, [r7, #0]
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f000 fb7f 	bl	800bb02 <USBD_CtlError>
          break;
 800b404:	bf00      	nop
      }
      break;
 800b406:	e005      	b.n	800b414 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b408:	6839      	ldr	r1, [r7, #0]
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f000 fb79 	bl	800bb02 <USBD_CtlError>
      break;
 800b410:	e000      	b.n	800b414 <USBD_StdEPReq+0x330>
      break;
 800b412:	bf00      	nop
  }

  return ret;
 800b414:	7bfb      	ldrb	r3, [r7, #15]
}
 800b416:	4618      	mov	r0, r3
 800b418:	3710      	adds	r7, #16
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
	...

0800b420 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b084      	sub	sp, #16
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b42a:	2300      	movs	r3, #0
 800b42c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b42e:	2300      	movs	r3, #0
 800b430:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b432:	2300      	movs	r3, #0
 800b434:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	885b      	ldrh	r3, [r3, #2]
 800b43a:	0a1b      	lsrs	r3, r3, #8
 800b43c:	b29b      	uxth	r3, r3
 800b43e:	3b01      	subs	r3, #1
 800b440:	2b0e      	cmp	r3, #14
 800b442:	f200 8152 	bhi.w	800b6ea <USBD_GetDescriptor+0x2ca>
 800b446:	a201      	add	r2, pc, #4	; (adr r2, 800b44c <USBD_GetDescriptor+0x2c>)
 800b448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b44c:	0800b4bd 	.word	0x0800b4bd
 800b450:	0800b4d5 	.word	0x0800b4d5
 800b454:	0800b515 	.word	0x0800b515
 800b458:	0800b6eb 	.word	0x0800b6eb
 800b45c:	0800b6eb 	.word	0x0800b6eb
 800b460:	0800b68b 	.word	0x0800b68b
 800b464:	0800b6b7 	.word	0x0800b6b7
 800b468:	0800b6eb 	.word	0x0800b6eb
 800b46c:	0800b6eb 	.word	0x0800b6eb
 800b470:	0800b6eb 	.word	0x0800b6eb
 800b474:	0800b6eb 	.word	0x0800b6eb
 800b478:	0800b6eb 	.word	0x0800b6eb
 800b47c:	0800b6eb 	.word	0x0800b6eb
 800b480:	0800b6eb 	.word	0x0800b6eb
 800b484:	0800b489 	.word	0x0800b489
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b48e:	69db      	ldr	r3, [r3, #28]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d00b      	beq.n	800b4ac <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b49a:	69db      	ldr	r3, [r3, #28]
 800b49c:	687a      	ldr	r2, [r7, #4]
 800b49e:	7c12      	ldrb	r2, [r2, #16]
 800b4a0:	f107 0108 	add.w	r1, r7, #8
 800b4a4:	4610      	mov	r0, r2
 800b4a6:	4798      	blx	r3
 800b4a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b4aa:	e126      	b.n	800b6fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b4ac:	6839      	ldr	r1, [r7, #0]
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f000 fb27 	bl	800bb02 <USBD_CtlError>
        err++;
 800b4b4:	7afb      	ldrb	r3, [r7, #11]
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	72fb      	strb	r3, [r7, #11]
      break;
 800b4ba:	e11e      	b.n	800b6fa <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	7c12      	ldrb	r2, [r2, #16]
 800b4c8:	f107 0108 	add.w	r1, r7, #8
 800b4cc:	4610      	mov	r0, r2
 800b4ce:	4798      	blx	r3
 800b4d0:	60f8      	str	r0, [r7, #12]
      break;
 800b4d2:	e112      	b.n	800b6fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	7c1b      	ldrb	r3, [r3, #16]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d10d      	bne.n	800b4f8 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4e4:	f107 0208 	add.w	r2, r7, #8
 800b4e8:	4610      	mov	r0, r2
 800b4ea:	4798      	blx	r3
 800b4ec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	2202      	movs	r2, #2
 800b4f4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b4f6:	e100      	b.n	800b6fa <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b500:	f107 0208 	add.w	r2, r7, #8
 800b504:	4610      	mov	r0, r2
 800b506:	4798      	blx	r3
 800b508:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	3301      	adds	r3, #1
 800b50e:	2202      	movs	r2, #2
 800b510:	701a      	strb	r2, [r3, #0]
      break;
 800b512:	e0f2      	b.n	800b6fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	885b      	ldrh	r3, [r3, #2]
 800b518:	b2db      	uxtb	r3, r3
 800b51a:	2b05      	cmp	r3, #5
 800b51c:	f200 80ac 	bhi.w	800b678 <USBD_GetDescriptor+0x258>
 800b520:	a201      	add	r2, pc, #4	; (adr r2, 800b528 <USBD_GetDescriptor+0x108>)
 800b522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b526:	bf00      	nop
 800b528:	0800b541 	.word	0x0800b541
 800b52c:	0800b575 	.word	0x0800b575
 800b530:	0800b5a9 	.word	0x0800b5a9
 800b534:	0800b5dd 	.word	0x0800b5dd
 800b538:	0800b611 	.word	0x0800b611
 800b53c:	0800b645 	.word	0x0800b645
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d00b      	beq.n	800b564 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	687a      	ldr	r2, [r7, #4]
 800b556:	7c12      	ldrb	r2, [r2, #16]
 800b558:	f107 0108 	add.w	r1, r7, #8
 800b55c:	4610      	mov	r0, r2
 800b55e:	4798      	blx	r3
 800b560:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b562:	e091      	b.n	800b688 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b564:	6839      	ldr	r1, [r7, #0]
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f000 facb 	bl	800bb02 <USBD_CtlError>
            err++;
 800b56c:	7afb      	ldrb	r3, [r7, #11]
 800b56e:	3301      	adds	r3, #1
 800b570:	72fb      	strb	r3, [r7, #11]
          break;
 800b572:	e089      	b.n	800b688 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b57a:	689b      	ldr	r3, [r3, #8]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d00b      	beq.n	800b598 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b586:	689b      	ldr	r3, [r3, #8]
 800b588:	687a      	ldr	r2, [r7, #4]
 800b58a:	7c12      	ldrb	r2, [r2, #16]
 800b58c:	f107 0108 	add.w	r1, r7, #8
 800b590:	4610      	mov	r0, r2
 800b592:	4798      	blx	r3
 800b594:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b596:	e077      	b.n	800b688 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b598:	6839      	ldr	r1, [r7, #0]
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 fab1 	bl	800bb02 <USBD_CtlError>
            err++;
 800b5a0:	7afb      	ldrb	r3, [r7, #11]
 800b5a2:	3301      	adds	r3, #1
 800b5a4:	72fb      	strb	r3, [r7, #11]
          break;
 800b5a6:	e06f      	b.n	800b688 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5ae:	68db      	ldr	r3, [r3, #12]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d00b      	beq.n	800b5cc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5ba:	68db      	ldr	r3, [r3, #12]
 800b5bc:	687a      	ldr	r2, [r7, #4]
 800b5be:	7c12      	ldrb	r2, [r2, #16]
 800b5c0:	f107 0108 	add.w	r1, r7, #8
 800b5c4:	4610      	mov	r0, r2
 800b5c6:	4798      	blx	r3
 800b5c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5ca:	e05d      	b.n	800b688 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b5cc:	6839      	ldr	r1, [r7, #0]
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f000 fa97 	bl	800bb02 <USBD_CtlError>
            err++;
 800b5d4:	7afb      	ldrb	r3, [r7, #11]
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	72fb      	strb	r3, [r7, #11]
          break;
 800b5da:	e055      	b.n	800b688 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5e2:	691b      	ldr	r3, [r3, #16]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d00b      	beq.n	800b600 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5ee:	691b      	ldr	r3, [r3, #16]
 800b5f0:	687a      	ldr	r2, [r7, #4]
 800b5f2:	7c12      	ldrb	r2, [r2, #16]
 800b5f4:	f107 0108 	add.w	r1, r7, #8
 800b5f8:	4610      	mov	r0, r2
 800b5fa:	4798      	blx	r3
 800b5fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5fe:	e043      	b.n	800b688 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b600:	6839      	ldr	r1, [r7, #0]
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 fa7d 	bl	800bb02 <USBD_CtlError>
            err++;
 800b608:	7afb      	ldrb	r3, [r7, #11]
 800b60a:	3301      	adds	r3, #1
 800b60c:	72fb      	strb	r3, [r7, #11]
          break;
 800b60e:	e03b      	b.n	800b688 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b616:	695b      	ldr	r3, [r3, #20]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d00b      	beq.n	800b634 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b622:	695b      	ldr	r3, [r3, #20]
 800b624:	687a      	ldr	r2, [r7, #4]
 800b626:	7c12      	ldrb	r2, [r2, #16]
 800b628:	f107 0108 	add.w	r1, r7, #8
 800b62c:	4610      	mov	r0, r2
 800b62e:	4798      	blx	r3
 800b630:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b632:	e029      	b.n	800b688 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b634:	6839      	ldr	r1, [r7, #0]
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 fa63 	bl	800bb02 <USBD_CtlError>
            err++;
 800b63c:	7afb      	ldrb	r3, [r7, #11]
 800b63e:	3301      	adds	r3, #1
 800b640:	72fb      	strb	r3, [r7, #11]
          break;
 800b642:	e021      	b.n	800b688 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b64a:	699b      	ldr	r3, [r3, #24]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d00b      	beq.n	800b668 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b656:	699b      	ldr	r3, [r3, #24]
 800b658:	687a      	ldr	r2, [r7, #4]
 800b65a:	7c12      	ldrb	r2, [r2, #16]
 800b65c:	f107 0108 	add.w	r1, r7, #8
 800b660:	4610      	mov	r0, r2
 800b662:	4798      	blx	r3
 800b664:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b666:	e00f      	b.n	800b688 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b668:	6839      	ldr	r1, [r7, #0]
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f000 fa49 	bl	800bb02 <USBD_CtlError>
            err++;
 800b670:	7afb      	ldrb	r3, [r7, #11]
 800b672:	3301      	adds	r3, #1
 800b674:	72fb      	strb	r3, [r7, #11]
          break;
 800b676:	e007      	b.n	800b688 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b678:	6839      	ldr	r1, [r7, #0]
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f000 fa41 	bl	800bb02 <USBD_CtlError>
          err++;
 800b680:	7afb      	ldrb	r3, [r7, #11]
 800b682:	3301      	adds	r3, #1
 800b684:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b686:	bf00      	nop
      }
      break;
 800b688:	e037      	b.n	800b6fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	7c1b      	ldrb	r3, [r3, #16]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d109      	bne.n	800b6a6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b69a:	f107 0208 	add.w	r2, r7, #8
 800b69e:	4610      	mov	r0, r2
 800b6a0:	4798      	blx	r3
 800b6a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b6a4:	e029      	b.n	800b6fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b6a6:	6839      	ldr	r1, [r7, #0]
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f000 fa2a 	bl	800bb02 <USBD_CtlError>
        err++;
 800b6ae:	7afb      	ldrb	r3, [r7, #11]
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	72fb      	strb	r3, [r7, #11]
      break;
 800b6b4:	e021      	b.n	800b6fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	7c1b      	ldrb	r3, [r3, #16]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d10d      	bne.n	800b6da <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6c6:	f107 0208 	add.w	r2, r7, #8
 800b6ca:	4610      	mov	r0, r2
 800b6cc:	4798      	blx	r3
 800b6ce:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	2207      	movs	r2, #7
 800b6d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b6d8:	e00f      	b.n	800b6fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b6da:	6839      	ldr	r1, [r7, #0]
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f000 fa10 	bl	800bb02 <USBD_CtlError>
        err++;
 800b6e2:	7afb      	ldrb	r3, [r7, #11]
 800b6e4:	3301      	adds	r3, #1
 800b6e6:	72fb      	strb	r3, [r7, #11]
      break;
 800b6e8:	e007      	b.n	800b6fa <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b6ea:	6839      	ldr	r1, [r7, #0]
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f000 fa08 	bl	800bb02 <USBD_CtlError>
      err++;
 800b6f2:	7afb      	ldrb	r3, [r7, #11]
 800b6f4:	3301      	adds	r3, #1
 800b6f6:	72fb      	strb	r3, [r7, #11]
      break;
 800b6f8:	bf00      	nop
  }

  if (err != 0U)
 800b6fa:	7afb      	ldrb	r3, [r7, #11]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d11e      	bne.n	800b73e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	88db      	ldrh	r3, [r3, #6]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d016      	beq.n	800b736 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b708:	893b      	ldrh	r3, [r7, #8]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d00e      	beq.n	800b72c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	88da      	ldrh	r2, [r3, #6]
 800b712:	893b      	ldrh	r3, [r7, #8]
 800b714:	4293      	cmp	r3, r2
 800b716:	bf28      	it	cs
 800b718:	4613      	movcs	r3, r2
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b71e:	893b      	ldrh	r3, [r7, #8]
 800b720:	461a      	mov	r2, r3
 800b722:	68f9      	ldr	r1, [r7, #12]
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f000 fa5d 	bl	800bbe4 <USBD_CtlSendData>
 800b72a:	e009      	b.n	800b740 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b72c:	6839      	ldr	r1, [r7, #0]
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f000 f9e7 	bl	800bb02 <USBD_CtlError>
 800b734:	e004      	b.n	800b740 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f000 faae 	bl	800bc98 <USBD_CtlSendStatus>
 800b73c:	e000      	b.n	800b740 <USBD_GetDescriptor+0x320>
    return;
 800b73e:	bf00      	nop
  }
}
 800b740:	3710      	adds	r7, #16
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
 800b746:	bf00      	nop

0800b748 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b084      	sub	sp, #16
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	889b      	ldrh	r3, [r3, #4]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d131      	bne.n	800b7be <USBD_SetAddress+0x76>
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	88db      	ldrh	r3, [r3, #6]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d12d      	bne.n	800b7be <USBD_SetAddress+0x76>
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	885b      	ldrh	r3, [r3, #2]
 800b766:	2b7f      	cmp	r3, #127	; 0x7f
 800b768:	d829      	bhi.n	800b7be <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	885b      	ldrh	r3, [r3, #2]
 800b76e:	b2db      	uxtb	r3, r3
 800b770:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b774:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b77c:	b2db      	uxtb	r3, r3
 800b77e:	2b03      	cmp	r3, #3
 800b780:	d104      	bne.n	800b78c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b782:	6839      	ldr	r1, [r7, #0]
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f000 f9bc 	bl	800bb02 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b78a:	e01d      	b.n	800b7c8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	7bfa      	ldrb	r2, [r7, #15]
 800b790:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b794:	7bfb      	ldrb	r3, [r7, #15]
 800b796:	4619      	mov	r1, r3
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f004 f853 	bl	800f844 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f000 fa7a 	bl	800bc98 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b7a4:	7bfb      	ldrb	r3, [r7, #15]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d004      	beq.n	800b7b4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2202      	movs	r2, #2
 800b7ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7b2:	e009      	b.n	800b7c8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7bc:	e004      	b.n	800b7c8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b7be:	6839      	ldr	r1, [r7, #0]
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f000 f99e 	bl	800bb02 <USBD_CtlError>
  }
}
 800b7c6:	bf00      	nop
 800b7c8:	bf00      	nop
 800b7ca:	3710      	adds	r7, #16
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b084      	sub	sp, #16
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	885b      	ldrh	r3, [r3, #2]
 800b7e2:	b2da      	uxtb	r2, r3
 800b7e4:	4b4e      	ldr	r3, [pc, #312]	; (800b920 <USBD_SetConfig+0x150>)
 800b7e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b7e8:	4b4d      	ldr	r3, [pc, #308]	; (800b920 <USBD_SetConfig+0x150>)
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	2b01      	cmp	r3, #1
 800b7ee:	d905      	bls.n	800b7fc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b7f0:	6839      	ldr	r1, [r7, #0]
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f000 f985 	bl	800bb02 <USBD_CtlError>
    return USBD_FAIL;
 800b7f8:	2303      	movs	r3, #3
 800b7fa:	e08c      	b.n	800b916 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b802:	b2db      	uxtb	r3, r3
 800b804:	2b02      	cmp	r3, #2
 800b806:	d002      	beq.n	800b80e <USBD_SetConfig+0x3e>
 800b808:	2b03      	cmp	r3, #3
 800b80a:	d029      	beq.n	800b860 <USBD_SetConfig+0x90>
 800b80c:	e075      	b.n	800b8fa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b80e:	4b44      	ldr	r3, [pc, #272]	; (800b920 <USBD_SetConfig+0x150>)
 800b810:	781b      	ldrb	r3, [r3, #0]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d020      	beq.n	800b858 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b816:	4b42      	ldr	r3, [pc, #264]	; (800b920 <USBD_SetConfig+0x150>)
 800b818:	781b      	ldrb	r3, [r3, #0]
 800b81a:	461a      	mov	r2, r3
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b820:	4b3f      	ldr	r3, [pc, #252]	; (800b920 <USBD_SetConfig+0x150>)
 800b822:	781b      	ldrb	r3, [r3, #0]
 800b824:	4619      	mov	r1, r3
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f7fe ffbd 	bl	800a7a6 <USBD_SetClassConfig>
 800b82c:	4603      	mov	r3, r0
 800b82e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b830:	7bfb      	ldrb	r3, [r7, #15]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d008      	beq.n	800b848 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b836:	6839      	ldr	r1, [r7, #0]
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f000 f962 	bl	800bb02 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2202      	movs	r2, #2
 800b842:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b846:	e065      	b.n	800b914 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f000 fa25 	bl	800bc98 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2203      	movs	r2, #3
 800b852:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b856:	e05d      	b.n	800b914 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f000 fa1d 	bl	800bc98 <USBD_CtlSendStatus>
      break;
 800b85e:	e059      	b.n	800b914 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b860:	4b2f      	ldr	r3, [pc, #188]	; (800b920 <USBD_SetConfig+0x150>)
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d112      	bne.n	800b88e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2202      	movs	r2, #2
 800b86c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b870:	4b2b      	ldr	r3, [pc, #172]	; (800b920 <USBD_SetConfig+0x150>)
 800b872:	781b      	ldrb	r3, [r3, #0]
 800b874:	461a      	mov	r2, r3
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b87a:	4b29      	ldr	r3, [pc, #164]	; (800b920 <USBD_SetConfig+0x150>)
 800b87c:	781b      	ldrb	r3, [r3, #0]
 800b87e:	4619      	mov	r1, r3
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f7fe ffac 	bl	800a7de <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f000 fa06 	bl	800bc98 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b88c:	e042      	b.n	800b914 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b88e:	4b24      	ldr	r3, [pc, #144]	; (800b920 <USBD_SetConfig+0x150>)
 800b890:	781b      	ldrb	r3, [r3, #0]
 800b892:	461a      	mov	r2, r3
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	429a      	cmp	r2, r3
 800b89a:	d02a      	beq.n	800b8f2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	b2db      	uxtb	r3, r3
 800b8a2:	4619      	mov	r1, r3
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f7fe ff9a 	bl	800a7de <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b8aa:	4b1d      	ldr	r3, [pc, #116]	; (800b920 <USBD_SetConfig+0x150>)
 800b8ac:	781b      	ldrb	r3, [r3, #0]
 800b8ae:	461a      	mov	r2, r3
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b8b4:	4b1a      	ldr	r3, [pc, #104]	; (800b920 <USBD_SetConfig+0x150>)
 800b8b6:	781b      	ldrb	r3, [r3, #0]
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f7fe ff73 	bl	800a7a6 <USBD_SetClassConfig>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b8c4:	7bfb      	ldrb	r3, [r7, #15]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d00f      	beq.n	800b8ea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b8ca:	6839      	ldr	r1, [r7, #0]
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f000 f918 	bl	800bb02 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	b2db      	uxtb	r3, r3
 800b8d8:	4619      	mov	r1, r3
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f7fe ff7f 	bl	800a7de <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2202      	movs	r2, #2
 800b8e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b8e8:	e014      	b.n	800b914 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f000 f9d4 	bl	800bc98 <USBD_CtlSendStatus>
      break;
 800b8f0:	e010      	b.n	800b914 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f000 f9d0 	bl	800bc98 <USBD_CtlSendStatus>
      break;
 800b8f8:	e00c      	b.n	800b914 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b8fa:	6839      	ldr	r1, [r7, #0]
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f000 f900 	bl	800bb02 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b902:	4b07      	ldr	r3, [pc, #28]	; (800b920 <USBD_SetConfig+0x150>)
 800b904:	781b      	ldrb	r3, [r3, #0]
 800b906:	4619      	mov	r1, r3
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f7fe ff68 	bl	800a7de <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b90e:	2303      	movs	r3, #3
 800b910:	73fb      	strb	r3, [r7, #15]
      break;
 800b912:	bf00      	nop
  }

  return ret;
 800b914:	7bfb      	ldrb	r3, [r7, #15]
}
 800b916:	4618      	mov	r0, r3
 800b918:	3710      	adds	r7, #16
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}
 800b91e:	bf00      	nop
 800b920:	2000324c 	.word	0x2000324c

0800b924 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b082      	sub	sp, #8
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
 800b92c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	88db      	ldrh	r3, [r3, #6]
 800b932:	2b01      	cmp	r3, #1
 800b934:	d004      	beq.n	800b940 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b936:	6839      	ldr	r1, [r7, #0]
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f000 f8e2 	bl	800bb02 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b93e:	e023      	b.n	800b988 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b946:	b2db      	uxtb	r3, r3
 800b948:	2b02      	cmp	r3, #2
 800b94a:	dc02      	bgt.n	800b952 <USBD_GetConfig+0x2e>
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	dc03      	bgt.n	800b958 <USBD_GetConfig+0x34>
 800b950:	e015      	b.n	800b97e <USBD_GetConfig+0x5a>
 800b952:	2b03      	cmp	r3, #3
 800b954:	d00b      	beq.n	800b96e <USBD_GetConfig+0x4a>
 800b956:	e012      	b.n	800b97e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2200      	movs	r2, #0
 800b95c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	3308      	adds	r3, #8
 800b962:	2201      	movs	r2, #1
 800b964:	4619      	mov	r1, r3
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f000 f93c 	bl	800bbe4 <USBD_CtlSendData>
        break;
 800b96c:	e00c      	b.n	800b988 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	3304      	adds	r3, #4
 800b972:	2201      	movs	r2, #1
 800b974:	4619      	mov	r1, r3
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f000 f934 	bl	800bbe4 <USBD_CtlSendData>
        break;
 800b97c:	e004      	b.n	800b988 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b97e:	6839      	ldr	r1, [r7, #0]
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f000 f8be 	bl	800bb02 <USBD_CtlError>
        break;
 800b986:	bf00      	nop
}
 800b988:	bf00      	nop
 800b98a:	3708      	adds	r7, #8
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}

0800b990 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b082      	sub	sp, #8
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
 800b998:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9a0:	b2db      	uxtb	r3, r3
 800b9a2:	3b01      	subs	r3, #1
 800b9a4:	2b02      	cmp	r3, #2
 800b9a6:	d81e      	bhi.n	800b9e6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	88db      	ldrh	r3, [r3, #6]
 800b9ac:	2b02      	cmp	r3, #2
 800b9ae:	d004      	beq.n	800b9ba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b9b0:	6839      	ldr	r1, [r7, #0]
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f000 f8a5 	bl	800bb02 <USBD_CtlError>
        break;
 800b9b8:	e01a      	b.n	800b9f0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2201      	movs	r2, #1
 800b9be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d005      	beq.n	800b9d6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	68db      	ldr	r3, [r3, #12]
 800b9ce:	f043 0202 	orr.w	r2, r3, #2
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	330c      	adds	r3, #12
 800b9da:	2202      	movs	r2, #2
 800b9dc:	4619      	mov	r1, r3
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f000 f900 	bl	800bbe4 <USBD_CtlSendData>
      break;
 800b9e4:	e004      	b.n	800b9f0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b9e6:	6839      	ldr	r1, [r7, #0]
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f000 f88a 	bl	800bb02 <USBD_CtlError>
      break;
 800b9ee:	bf00      	nop
  }
}
 800b9f0:	bf00      	nop
 800b9f2:	3708      	adds	r7, #8
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b082      	sub	sp, #8
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	885b      	ldrh	r3, [r3, #2]
 800ba06:	2b01      	cmp	r3, #1
 800ba08:	d107      	bne.n	800ba1a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2201      	movs	r2, #1
 800ba0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f000 f940 	bl	800bc98 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ba18:	e013      	b.n	800ba42 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	885b      	ldrh	r3, [r3, #2]
 800ba1e:	2b02      	cmp	r3, #2
 800ba20:	d10b      	bne.n	800ba3a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	889b      	ldrh	r3, [r3, #4]
 800ba26:	0a1b      	lsrs	r3, r3, #8
 800ba28:	b29b      	uxth	r3, r3
 800ba2a:	b2da      	uxtb	r2, r3
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 f930 	bl	800bc98 <USBD_CtlSendStatus>
}
 800ba38:	e003      	b.n	800ba42 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ba3a:	6839      	ldr	r1, [r7, #0]
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f000 f860 	bl	800bb02 <USBD_CtlError>
}
 800ba42:	bf00      	nop
 800ba44:	3708      	adds	r7, #8
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}

0800ba4a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba4a:	b580      	push	{r7, lr}
 800ba4c:	b082      	sub	sp, #8
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	6078      	str	r0, [r7, #4]
 800ba52:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba5a:	b2db      	uxtb	r3, r3
 800ba5c:	3b01      	subs	r3, #1
 800ba5e:	2b02      	cmp	r3, #2
 800ba60:	d80b      	bhi.n	800ba7a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	885b      	ldrh	r3, [r3, #2]
 800ba66:	2b01      	cmp	r3, #1
 800ba68:	d10c      	bne.n	800ba84 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 f910 	bl	800bc98 <USBD_CtlSendStatus>
      }
      break;
 800ba78:	e004      	b.n	800ba84 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ba7a:	6839      	ldr	r1, [r7, #0]
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f000 f840 	bl	800bb02 <USBD_CtlError>
      break;
 800ba82:	e000      	b.n	800ba86 <USBD_ClrFeature+0x3c>
      break;
 800ba84:	bf00      	nop
  }
}
 800ba86:	bf00      	nop
 800ba88:	3708      	adds	r7, #8
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}

0800ba8e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ba8e:	b580      	push	{r7, lr}
 800ba90:	b084      	sub	sp, #16
 800ba92:	af00      	add	r7, sp, #0
 800ba94:	6078      	str	r0, [r7, #4]
 800ba96:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	781a      	ldrb	r2, [r3, #0]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	3301      	adds	r3, #1
 800baa8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	781a      	ldrb	r2, [r3, #0]
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	3301      	adds	r3, #1
 800bab6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bab8:	68f8      	ldr	r0, [r7, #12]
 800baba:	f7ff fa17 	bl	800aeec <SWAPBYTE>
 800babe:	4603      	mov	r3, r0
 800bac0:	461a      	mov	r2, r3
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	3301      	adds	r3, #1
 800baca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	3301      	adds	r3, #1
 800bad0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bad2:	68f8      	ldr	r0, [r7, #12]
 800bad4:	f7ff fa0a 	bl	800aeec <SWAPBYTE>
 800bad8:	4603      	mov	r3, r0
 800bada:	461a      	mov	r2, r3
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	3301      	adds	r3, #1
 800bae4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	3301      	adds	r3, #1
 800baea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800baec:	68f8      	ldr	r0, [r7, #12]
 800baee:	f7ff f9fd 	bl	800aeec <SWAPBYTE>
 800baf2:	4603      	mov	r3, r0
 800baf4:	461a      	mov	r2, r3
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	80da      	strh	r2, [r3, #6]
}
 800bafa:	bf00      	nop
 800bafc:	3710      	adds	r7, #16
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}

0800bb02 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b082      	sub	sp, #8
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
 800bb0a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb0c:	2180      	movs	r1, #128	; 0x80
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f003 fe2e 	bl	800f770 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bb14:	2100      	movs	r1, #0
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f003 fe2a 	bl	800f770 <USBD_LL_StallEP>
}
 800bb1c:	bf00      	nop
 800bb1e:	3708      	adds	r7, #8
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}

0800bb24 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b086      	sub	sp, #24
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	60f8      	str	r0, [r7, #12]
 800bb2c:	60b9      	str	r1, [r7, #8]
 800bb2e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bb30:	2300      	movs	r3, #0
 800bb32:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d036      	beq.n	800bba8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bb3e:	6938      	ldr	r0, [r7, #16]
 800bb40:	f000 f836 	bl	800bbb0 <USBD_GetLen>
 800bb44:	4603      	mov	r3, r0
 800bb46:	3301      	adds	r3, #1
 800bb48:	b29b      	uxth	r3, r3
 800bb4a:	005b      	lsls	r3, r3, #1
 800bb4c:	b29a      	uxth	r2, r3
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bb52:	7dfb      	ldrb	r3, [r7, #23]
 800bb54:	68ba      	ldr	r2, [r7, #8]
 800bb56:	4413      	add	r3, r2
 800bb58:	687a      	ldr	r2, [r7, #4]
 800bb5a:	7812      	ldrb	r2, [r2, #0]
 800bb5c:	701a      	strb	r2, [r3, #0]
  idx++;
 800bb5e:	7dfb      	ldrb	r3, [r7, #23]
 800bb60:	3301      	adds	r3, #1
 800bb62:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bb64:	7dfb      	ldrb	r3, [r7, #23]
 800bb66:	68ba      	ldr	r2, [r7, #8]
 800bb68:	4413      	add	r3, r2
 800bb6a:	2203      	movs	r2, #3
 800bb6c:	701a      	strb	r2, [r3, #0]
  idx++;
 800bb6e:	7dfb      	ldrb	r3, [r7, #23]
 800bb70:	3301      	adds	r3, #1
 800bb72:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bb74:	e013      	b.n	800bb9e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bb76:	7dfb      	ldrb	r3, [r7, #23]
 800bb78:	68ba      	ldr	r2, [r7, #8]
 800bb7a:	4413      	add	r3, r2
 800bb7c:	693a      	ldr	r2, [r7, #16]
 800bb7e:	7812      	ldrb	r2, [r2, #0]
 800bb80:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	3301      	adds	r3, #1
 800bb86:	613b      	str	r3, [r7, #16]
    idx++;
 800bb88:	7dfb      	ldrb	r3, [r7, #23]
 800bb8a:	3301      	adds	r3, #1
 800bb8c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bb8e:	7dfb      	ldrb	r3, [r7, #23]
 800bb90:	68ba      	ldr	r2, [r7, #8]
 800bb92:	4413      	add	r3, r2
 800bb94:	2200      	movs	r2, #0
 800bb96:	701a      	strb	r2, [r3, #0]
    idx++;
 800bb98:	7dfb      	ldrb	r3, [r7, #23]
 800bb9a:	3301      	adds	r3, #1
 800bb9c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	781b      	ldrb	r3, [r3, #0]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d1e7      	bne.n	800bb76 <USBD_GetString+0x52>
 800bba6:	e000      	b.n	800bbaa <USBD_GetString+0x86>
    return;
 800bba8:	bf00      	nop
  }
}
 800bbaa:	3718      	adds	r7, #24
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}

0800bbb0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b085      	sub	sp, #20
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bbc0:	e005      	b.n	800bbce <USBD_GetLen+0x1e>
  {
    len++;
 800bbc2:	7bfb      	ldrb	r3, [r7, #15]
 800bbc4:	3301      	adds	r3, #1
 800bbc6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	3301      	adds	r3, #1
 800bbcc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d1f5      	bne.n	800bbc2 <USBD_GetLen+0x12>
  }

  return len;
 800bbd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3714      	adds	r7, #20
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe2:	4770      	bx	lr

0800bbe4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b084      	sub	sp, #16
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	60f8      	str	r0, [r7, #12]
 800bbec:	60b9      	str	r1, [r7, #8]
 800bbee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	2202      	movs	r2, #2
 800bbf4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	687a      	ldr	r2, [r7, #4]
 800bbfc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	68ba      	ldr	r2, [r7, #8]
 800bc08:	2100      	movs	r1, #0
 800bc0a:	68f8      	ldr	r0, [r7, #12]
 800bc0c:	f003 fe39 	bl	800f882 <USBD_LL_Transmit>

  return USBD_OK;
 800bc10:	2300      	movs	r3, #0
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3710      	adds	r7, #16
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}

0800bc1a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bc1a:	b580      	push	{r7, lr}
 800bc1c:	b084      	sub	sp, #16
 800bc1e:	af00      	add	r7, sp, #0
 800bc20:	60f8      	str	r0, [r7, #12]
 800bc22:	60b9      	str	r1, [r7, #8]
 800bc24:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	68ba      	ldr	r2, [r7, #8]
 800bc2a:	2100      	movs	r1, #0
 800bc2c:	68f8      	ldr	r0, [r7, #12]
 800bc2e:	f003 fe28 	bl	800f882 <USBD_LL_Transmit>

  return USBD_OK;
 800bc32:	2300      	movs	r3, #0
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3710      	adds	r7, #16
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	60f8      	str	r0, [r7, #12]
 800bc44:	60b9      	str	r1, [r7, #8]
 800bc46:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2203      	movs	r2, #3
 800bc4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	687a      	ldr	r2, [r7, #4]
 800bc5c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	68ba      	ldr	r2, [r7, #8]
 800bc64:	2100      	movs	r1, #0
 800bc66:	68f8      	ldr	r0, [r7, #12]
 800bc68:	f003 fe2c 	bl	800f8c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc6c:	2300      	movs	r3, #0
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3710      	adds	r7, #16
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}

0800bc76 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bc76:	b580      	push	{r7, lr}
 800bc78:	b084      	sub	sp, #16
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	60f8      	str	r0, [r7, #12]
 800bc7e:	60b9      	str	r1, [r7, #8]
 800bc80:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	68ba      	ldr	r2, [r7, #8]
 800bc86:	2100      	movs	r1, #0
 800bc88:	68f8      	ldr	r0, [r7, #12]
 800bc8a:	f003 fe1b 	bl	800f8c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc8e:	2300      	movs	r3, #0
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3710      	adds	r7, #16
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}

0800bc98 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2204      	movs	r2, #4
 800bca4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bca8:	2300      	movs	r3, #0
 800bcaa:	2200      	movs	r2, #0
 800bcac:	2100      	movs	r1, #0
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f003 fde7 	bl	800f882 <USBD_LL_Transmit>

  return USBD_OK;
 800bcb4:	2300      	movs	r3, #0
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3708      	adds	r7, #8
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}

0800bcbe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bcbe:	b580      	push	{r7, lr}
 800bcc0:	b082      	sub	sp, #8
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2205      	movs	r2, #5
 800bcca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bcce:	2300      	movs	r3, #0
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	2100      	movs	r1, #0
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f003 fdf5 	bl	800f8c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bcda:	2300      	movs	r3, #0
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3708      	adds	r7, #8
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}

0800bce4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b084      	sub	sp, #16
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	4603      	mov	r3, r0
 800bcec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bcee:	79fb      	ldrb	r3, [r7, #7]
 800bcf0:	4a08      	ldr	r2, [pc, #32]	; (800bd14 <disk_status+0x30>)
 800bcf2:	009b      	lsls	r3, r3, #2
 800bcf4:	4413      	add	r3, r2
 800bcf6:	685b      	ldr	r3, [r3, #4]
 800bcf8:	685b      	ldr	r3, [r3, #4]
 800bcfa:	79fa      	ldrb	r2, [r7, #7]
 800bcfc:	4905      	ldr	r1, [pc, #20]	; (800bd14 <disk_status+0x30>)
 800bcfe:	440a      	add	r2, r1
 800bd00:	7a12      	ldrb	r2, [r2, #8]
 800bd02:	4610      	mov	r0, r2
 800bd04:	4798      	blx	r3
 800bd06:	4603      	mov	r3, r0
 800bd08:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bd0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3710      	adds	r7, #16
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}
 800bd14:	20003478 	.word	0x20003478

0800bd18 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b084      	sub	sp, #16
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	4603      	mov	r3, r0
 800bd20:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bd22:	2300      	movs	r3, #0
 800bd24:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bd26:	79fb      	ldrb	r3, [r7, #7]
 800bd28:	4a0d      	ldr	r2, [pc, #52]	; (800bd60 <disk_initialize+0x48>)
 800bd2a:	5cd3      	ldrb	r3, [r2, r3]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d111      	bne.n	800bd54 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800bd30:	79fb      	ldrb	r3, [r7, #7]
 800bd32:	4a0b      	ldr	r2, [pc, #44]	; (800bd60 <disk_initialize+0x48>)
 800bd34:	2101      	movs	r1, #1
 800bd36:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bd38:	79fb      	ldrb	r3, [r7, #7]
 800bd3a:	4a09      	ldr	r2, [pc, #36]	; (800bd60 <disk_initialize+0x48>)
 800bd3c:	009b      	lsls	r3, r3, #2
 800bd3e:	4413      	add	r3, r2
 800bd40:	685b      	ldr	r3, [r3, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	79fa      	ldrb	r2, [r7, #7]
 800bd46:	4906      	ldr	r1, [pc, #24]	; (800bd60 <disk_initialize+0x48>)
 800bd48:	440a      	add	r2, r1
 800bd4a:	7a12      	ldrb	r2, [r2, #8]
 800bd4c:	4610      	mov	r0, r2
 800bd4e:	4798      	blx	r3
 800bd50:	4603      	mov	r3, r0
 800bd52:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bd54:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3710      	adds	r7, #16
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}
 800bd5e:	bf00      	nop
 800bd60:	20003478 	.word	0x20003478

0800bd64 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bd64:	b590      	push	{r4, r7, lr}
 800bd66:	b087      	sub	sp, #28
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	60b9      	str	r1, [r7, #8]
 800bd6c:	607a      	str	r2, [r7, #4]
 800bd6e:	603b      	str	r3, [r7, #0]
 800bd70:	4603      	mov	r3, r0
 800bd72:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bd74:	7bfb      	ldrb	r3, [r7, #15]
 800bd76:	4a0a      	ldr	r2, [pc, #40]	; (800bda0 <disk_read+0x3c>)
 800bd78:	009b      	lsls	r3, r3, #2
 800bd7a:	4413      	add	r3, r2
 800bd7c:	685b      	ldr	r3, [r3, #4]
 800bd7e:	689c      	ldr	r4, [r3, #8]
 800bd80:	7bfb      	ldrb	r3, [r7, #15]
 800bd82:	4a07      	ldr	r2, [pc, #28]	; (800bda0 <disk_read+0x3c>)
 800bd84:	4413      	add	r3, r2
 800bd86:	7a18      	ldrb	r0, [r3, #8]
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	687a      	ldr	r2, [r7, #4]
 800bd8c:	68b9      	ldr	r1, [r7, #8]
 800bd8e:	47a0      	blx	r4
 800bd90:	4603      	mov	r3, r0
 800bd92:	75fb      	strb	r3, [r7, #23]
  return res;
 800bd94:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	371c      	adds	r7, #28
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd90      	pop	{r4, r7, pc}
 800bd9e:	bf00      	nop
 800bda0:	20003478 	.word	0x20003478

0800bda4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bda4:	b590      	push	{r4, r7, lr}
 800bda6:	b087      	sub	sp, #28
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	60b9      	str	r1, [r7, #8]
 800bdac:	607a      	str	r2, [r7, #4]
 800bdae:	603b      	str	r3, [r7, #0]
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bdb4:	7bfb      	ldrb	r3, [r7, #15]
 800bdb6:	4a0a      	ldr	r2, [pc, #40]	; (800bde0 <disk_write+0x3c>)
 800bdb8:	009b      	lsls	r3, r3, #2
 800bdba:	4413      	add	r3, r2
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	68dc      	ldr	r4, [r3, #12]
 800bdc0:	7bfb      	ldrb	r3, [r7, #15]
 800bdc2:	4a07      	ldr	r2, [pc, #28]	; (800bde0 <disk_write+0x3c>)
 800bdc4:	4413      	add	r3, r2
 800bdc6:	7a18      	ldrb	r0, [r3, #8]
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	687a      	ldr	r2, [r7, #4]
 800bdcc:	68b9      	ldr	r1, [r7, #8]
 800bdce:	47a0      	blx	r4
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	75fb      	strb	r3, [r7, #23]
  return res;
 800bdd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	371c      	adds	r7, #28
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd90      	pop	{r4, r7, pc}
 800bdde:	bf00      	nop
 800bde0:	20003478 	.word	0x20003478

0800bde4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b084      	sub	sp, #16
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	4603      	mov	r3, r0
 800bdec:	603a      	str	r2, [r7, #0]
 800bdee:	71fb      	strb	r3, [r7, #7]
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bdf4:	79fb      	ldrb	r3, [r7, #7]
 800bdf6:	4a09      	ldr	r2, [pc, #36]	; (800be1c <disk_ioctl+0x38>)
 800bdf8:	009b      	lsls	r3, r3, #2
 800bdfa:	4413      	add	r3, r2
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	691b      	ldr	r3, [r3, #16]
 800be00:	79fa      	ldrb	r2, [r7, #7]
 800be02:	4906      	ldr	r1, [pc, #24]	; (800be1c <disk_ioctl+0x38>)
 800be04:	440a      	add	r2, r1
 800be06:	7a10      	ldrb	r0, [r2, #8]
 800be08:	79b9      	ldrb	r1, [r7, #6]
 800be0a:	683a      	ldr	r2, [r7, #0]
 800be0c:	4798      	blx	r3
 800be0e:	4603      	mov	r3, r0
 800be10:	73fb      	strb	r3, [r7, #15]
  return res;
 800be12:	7bfb      	ldrb	r3, [r7, #15]
}
 800be14:	4618      	mov	r0, r3
 800be16:	3710      	adds	r7, #16
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}
 800be1c:	20003478 	.word	0x20003478

0800be20 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800be20:	b480      	push	{r7}
 800be22:	b085      	sub	sp, #20
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	3301      	adds	r3, #1
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800be30:	89fb      	ldrh	r3, [r7, #14]
 800be32:	021b      	lsls	r3, r3, #8
 800be34:	b21a      	sxth	r2, r3
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	781b      	ldrb	r3, [r3, #0]
 800be3a:	b21b      	sxth	r3, r3
 800be3c:	4313      	orrs	r3, r2
 800be3e:	b21b      	sxth	r3, r3
 800be40:	81fb      	strh	r3, [r7, #14]
	return rv;
 800be42:	89fb      	ldrh	r3, [r7, #14]
}
 800be44:	4618      	mov	r0, r3
 800be46:	3714      	adds	r7, #20
 800be48:	46bd      	mov	sp, r7
 800be4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4e:	4770      	bx	lr

0800be50 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800be50:	b480      	push	{r7}
 800be52:	b085      	sub	sp, #20
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	3303      	adds	r3, #3
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	021b      	lsls	r3, r3, #8
 800be64:	687a      	ldr	r2, [r7, #4]
 800be66:	3202      	adds	r2, #2
 800be68:	7812      	ldrb	r2, [r2, #0]
 800be6a:	4313      	orrs	r3, r2
 800be6c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	021b      	lsls	r3, r3, #8
 800be72:	687a      	ldr	r2, [r7, #4]
 800be74:	3201      	adds	r2, #1
 800be76:	7812      	ldrb	r2, [r2, #0]
 800be78:	4313      	orrs	r3, r2
 800be7a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	021b      	lsls	r3, r3, #8
 800be80:	687a      	ldr	r2, [r7, #4]
 800be82:	7812      	ldrb	r2, [r2, #0]
 800be84:	4313      	orrs	r3, r2
 800be86:	60fb      	str	r3, [r7, #12]
	return rv;
 800be88:	68fb      	ldr	r3, [r7, #12]
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3714      	adds	r7, #20
 800be8e:	46bd      	mov	sp, r7
 800be90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be94:	4770      	bx	lr

0800be96 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800be96:	b480      	push	{r7}
 800be98:	b083      	sub	sp, #12
 800be9a:	af00      	add	r7, sp, #0
 800be9c:	6078      	str	r0, [r7, #4]
 800be9e:	460b      	mov	r3, r1
 800bea0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	1c5a      	adds	r2, r3, #1
 800bea6:	607a      	str	r2, [r7, #4]
 800bea8:	887a      	ldrh	r2, [r7, #2]
 800beaa:	b2d2      	uxtb	r2, r2
 800beac:	701a      	strb	r2, [r3, #0]
 800beae:	887b      	ldrh	r3, [r7, #2]
 800beb0:	0a1b      	lsrs	r3, r3, #8
 800beb2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	1c5a      	adds	r2, r3, #1
 800beb8:	607a      	str	r2, [r7, #4]
 800beba:	887a      	ldrh	r2, [r7, #2]
 800bebc:	b2d2      	uxtb	r2, r2
 800bebe:	701a      	strb	r2, [r3, #0]
}
 800bec0:	bf00      	nop
 800bec2:	370c      	adds	r7, #12
 800bec4:	46bd      	mov	sp, r7
 800bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beca:	4770      	bx	lr

0800becc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800becc:	b480      	push	{r7}
 800bece:	b083      	sub	sp, #12
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
 800bed4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	1c5a      	adds	r2, r3, #1
 800beda:	607a      	str	r2, [r7, #4]
 800bedc:	683a      	ldr	r2, [r7, #0]
 800bede:	b2d2      	uxtb	r2, r2
 800bee0:	701a      	strb	r2, [r3, #0]
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	0a1b      	lsrs	r3, r3, #8
 800bee6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	1c5a      	adds	r2, r3, #1
 800beec:	607a      	str	r2, [r7, #4]
 800beee:	683a      	ldr	r2, [r7, #0]
 800bef0:	b2d2      	uxtb	r2, r2
 800bef2:	701a      	strb	r2, [r3, #0]
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	0a1b      	lsrs	r3, r3, #8
 800bef8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	1c5a      	adds	r2, r3, #1
 800befe:	607a      	str	r2, [r7, #4]
 800bf00:	683a      	ldr	r2, [r7, #0]
 800bf02:	b2d2      	uxtb	r2, r2
 800bf04:	701a      	strb	r2, [r3, #0]
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	0a1b      	lsrs	r3, r3, #8
 800bf0a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	1c5a      	adds	r2, r3, #1
 800bf10:	607a      	str	r2, [r7, #4]
 800bf12:	683a      	ldr	r2, [r7, #0]
 800bf14:	b2d2      	uxtb	r2, r2
 800bf16:	701a      	strb	r2, [r3, #0]
}
 800bf18:	bf00      	nop
 800bf1a:	370c      	adds	r7, #12
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf22:	4770      	bx	lr

0800bf24 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bf24:	b480      	push	{r7}
 800bf26:	b087      	sub	sp, #28
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	60f8      	str	r0, [r7, #12]
 800bf2c:	60b9      	str	r1, [r7, #8]
 800bf2e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d00d      	beq.n	800bf5a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800bf3e:	693a      	ldr	r2, [r7, #16]
 800bf40:	1c53      	adds	r3, r2, #1
 800bf42:	613b      	str	r3, [r7, #16]
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	1c59      	adds	r1, r3, #1
 800bf48:	6179      	str	r1, [r7, #20]
 800bf4a:	7812      	ldrb	r2, [r2, #0]
 800bf4c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	3b01      	subs	r3, #1
 800bf52:	607b      	str	r3, [r7, #4]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d1f1      	bne.n	800bf3e <mem_cpy+0x1a>
	}
}
 800bf5a:	bf00      	nop
 800bf5c:	371c      	adds	r7, #28
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf64:	4770      	bx	lr

0800bf66 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bf66:	b480      	push	{r7}
 800bf68:	b087      	sub	sp, #28
 800bf6a:	af00      	add	r7, sp, #0
 800bf6c:	60f8      	str	r0, [r7, #12]
 800bf6e:	60b9      	str	r1, [r7, #8]
 800bf70:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	1c5a      	adds	r2, r3, #1
 800bf7a:	617a      	str	r2, [r7, #20]
 800bf7c:	68ba      	ldr	r2, [r7, #8]
 800bf7e:	b2d2      	uxtb	r2, r2
 800bf80:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	3b01      	subs	r3, #1
 800bf86:	607b      	str	r3, [r7, #4]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d1f3      	bne.n	800bf76 <mem_set+0x10>
}
 800bf8e:	bf00      	nop
 800bf90:	bf00      	nop
 800bf92:	371c      	adds	r7, #28
 800bf94:	46bd      	mov	sp, r7
 800bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9a:	4770      	bx	lr

0800bf9c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bf9c:	b480      	push	{r7}
 800bf9e:	b089      	sub	sp, #36	; 0x24
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	60f8      	str	r0, [r7, #12]
 800bfa4:	60b9      	str	r1, [r7, #8]
 800bfa6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	61fb      	str	r3, [r7, #28]
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bfb4:	69fb      	ldr	r3, [r7, #28]
 800bfb6:	1c5a      	adds	r2, r3, #1
 800bfb8:	61fa      	str	r2, [r7, #28]
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	4619      	mov	r1, r3
 800bfbe:	69bb      	ldr	r3, [r7, #24]
 800bfc0:	1c5a      	adds	r2, r3, #1
 800bfc2:	61ba      	str	r2, [r7, #24]
 800bfc4:	781b      	ldrb	r3, [r3, #0]
 800bfc6:	1acb      	subs	r3, r1, r3
 800bfc8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	3b01      	subs	r3, #1
 800bfce:	607b      	str	r3, [r7, #4]
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d002      	beq.n	800bfdc <mem_cmp+0x40>
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d0eb      	beq.n	800bfb4 <mem_cmp+0x18>

	return r;
 800bfdc:	697b      	ldr	r3, [r7, #20]
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3724      	adds	r7, #36	; 0x24
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe8:	4770      	bx	lr

0800bfea <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bfea:	b480      	push	{r7}
 800bfec:	b083      	sub	sp, #12
 800bfee:	af00      	add	r7, sp, #0
 800bff0:	6078      	str	r0, [r7, #4]
 800bff2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bff4:	e002      	b.n	800bffc <chk_chr+0x12>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	3301      	adds	r3, #1
 800bffa:	607b      	str	r3, [r7, #4]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	781b      	ldrb	r3, [r3, #0]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d005      	beq.n	800c010 <chk_chr+0x26>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	781b      	ldrb	r3, [r3, #0]
 800c008:	461a      	mov	r2, r3
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d1f2      	bne.n	800bff6 <chk_chr+0xc>
	return *str;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	781b      	ldrb	r3, [r3, #0]
}
 800c014:	4618      	mov	r0, r3
 800c016:	370c      	adds	r7, #12
 800c018:	46bd      	mov	sp, r7
 800c01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01e:	4770      	bx	lr

0800c020 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c020:	b480      	push	{r7}
 800c022:	b085      	sub	sp, #20
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c02a:	2300      	movs	r3, #0
 800c02c:	60bb      	str	r3, [r7, #8]
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	60fb      	str	r3, [r7, #12]
 800c032:	e029      	b.n	800c088 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c034:	4a27      	ldr	r2, [pc, #156]	; (800c0d4 <chk_lock+0xb4>)
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	011b      	lsls	r3, r3, #4
 800c03a:	4413      	add	r3, r2
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d01d      	beq.n	800c07e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c042:	4a24      	ldr	r2, [pc, #144]	; (800c0d4 <chk_lock+0xb4>)
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	011b      	lsls	r3, r3, #4
 800c048:	4413      	add	r3, r2
 800c04a:	681a      	ldr	r2, [r3, #0]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	429a      	cmp	r2, r3
 800c052:	d116      	bne.n	800c082 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c054:	4a1f      	ldr	r2, [pc, #124]	; (800c0d4 <chk_lock+0xb4>)
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	011b      	lsls	r3, r3, #4
 800c05a:	4413      	add	r3, r2
 800c05c:	3304      	adds	r3, #4
 800c05e:	681a      	ldr	r2, [r3, #0]
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c064:	429a      	cmp	r2, r3
 800c066:	d10c      	bne.n	800c082 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c068:	4a1a      	ldr	r2, [pc, #104]	; (800c0d4 <chk_lock+0xb4>)
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	011b      	lsls	r3, r3, #4
 800c06e:	4413      	add	r3, r2
 800c070:	3308      	adds	r3, #8
 800c072:	681a      	ldr	r2, [r3, #0]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c078:	429a      	cmp	r2, r3
 800c07a:	d102      	bne.n	800c082 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c07c:	e007      	b.n	800c08e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c07e:	2301      	movs	r3, #1
 800c080:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	3301      	adds	r3, #1
 800c086:	60fb      	str	r3, [r7, #12]
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	2b01      	cmp	r3, #1
 800c08c:	d9d2      	bls.n	800c034 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	2b02      	cmp	r3, #2
 800c092:	d109      	bne.n	800c0a8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d102      	bne.n	800c0a0 <chk_lock+0x80>
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	2b02      	cmp	r3, #2
 800c09e:	d101      	bne.n	800c0a4 <chk_lock+0x84>
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	e010      	b.n	800c0c6 <chk_lock+0xa6>
 800c0a4:	2312      	movs	r3, #18
 800c0a6:	e00e      	b.n	800c0c6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d108      	bne.n	800c0c0 <chk_lock+0xa0>
 800c0ae:	4a09      	ldr	r2, [pc, #36]	; (800c0d4 <chk_lock+0xb4>)
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	011b      	lsls	r3, r3, #4
 800c0b4:	4413      	add	r3, r2
 800c0b6:	330c      	adds	r3, #12
 800c0b8:	881b      	ldrh	r3, [r3, #0]
 800c0ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0be:	d101      	bne.n	800c0c4 <chk_lock+0xa4>
 800c0c0:	2310      	movs	r3, #16
 800c0c2:	e000      	b.n	800c0c6 <chk_lock+0xa6>
 800c0c4:	2300      	movs	r3, #0
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3714      	adds	r7, #20
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d0:	4770      	bx	lr
 800c0d2:	bf00      	nop
 800c0d4:	20003258 	.word	0x20003258

0800c0d8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c0d8:	b480      	push	{r7}
 800c0da:	b083      	sub	sp, #12
 800c0dc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	607b      	str	r3, [r7, #4]
 800c0e2:	e002      	b.n	800c0ea <enq_lock+0x12>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	3301      	adds	r3, #1
 800c0e8:	607b      	str	r3, [r7, #4]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	d806      	bhi.n	800c0fe <enq_lock+0x26>
 800c0f0:	4a09      	ldr	r2, [pc, #36]	; (800c118 <enq_lock+0x40>)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	011b      	lsls	r3, r3, #4
 800c0f6:	4413      	add	r3, r2
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d1f2      	bne.n	800c0e4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2b02      	cmp	r3, #2
 800c102:	bf14      	ite	ne
 800c104:	2301      	movne	r3, #1
 800c106:	2300      	moveq	r3, #0
 800c108:	b2db      	uxtb	r3, r3
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	370c      	adds	r7, #12
 800c10e:	46bd      	mov	sp, r7
 800c110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c114:	4770      	bx	lr
 800c116:	bf00      	nop
 800c118:	20003258 	.word	0x20003258

0800c11c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b085      	sub	sp, #20
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c126:	2300      	movs	r3, #0
 800c128:	60fb      	str	r3, [r7, #12]
 800c12a:	e01f      	b.n	800c16c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c12c:	4a41      	ldr	r2, [pc, #260]	; (800c234 <inc_lock+0x118>)
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	011b      	lsls	r3, r3, #4
 800c132:	4413      	add	r3, r2
 800c134:	681a      	ldr	r2, [r3, #0]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d113      	bne.n	800c166 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c13e:	4a3d      	ldr	r2, [pc, #244]	; (800c234 <inc_lock+0x118>)
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	011b      	lsls	r3, r3, #4
 800c144:	4413      	add	r3, r2
 800c146:	3304      	adds	r3, #4
 800c148:	681a      	ldr	r2, [r3, #0]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c14e:	429a      	cmp	r2, r3
 800c150:	d109      	bne.n	800c166 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c152:	4a38      	ldr	r2, [pc, #224]	; (800c234 <inc_lock+0x118>)
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	011b      	lsls	r3, r3, #4
 800c158:	4413      	add	r3, r2
 800c15a:	3308      	adds	r3, #8
 800c15c:	681a      	ldr	r2, [r3, #0]
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c162:	429a      	cmp	r2, r3
 800c164:	d006      	beq.n	800c174 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	3301      	adds	r3, #1
 800c16a:	60fb      	str	r3, [r7, #12]
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	2b01      	cmp	r3, #1
 800c170:	d9dc      	bls.n	800c12c <inc_lock+0x10>
 800c172:	e000      	b.n	800c176 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c174:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	2b02      	cmp	r3, #2
 800c17a:	d132      	bne.n	800c1e2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c17c:	2300      	movs	r3, #0
 800c17e:	60fb      	str	r3, [r7, #12]
 800c180:	e002      	b.n	800c188 <inc_lock+0x6c>
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	3301      	adds	r3, #1
 800c186:	60fb      	str	r3, [r7, #12]
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	2b01      	cmp	r3, #1
 800c18c:	d806      	bhi.n	800c19c <inc_lock+0x80>
 800c18e:	4a29      	ldr	r2, [pc, #164]	; (800c234 <inc_lock+0x118>)
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	011b      	lsls	r3, r3, #4
 800c194:	4413      	add	r3, r2
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d1f2      	bne.n	800c182 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	2b02      	cmp	r3, #2
 800c1a0:	d101      	bne.n	800c1a6 <inc_lock+0x8a>
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	e040      	b.n	800c228 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681a      	ldr	r2, [r3, #0]
 800c1aa:	4922      	ldr	r1, [pc, #136]	; (800c234 <inc_lock+0x118>)
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	011b      	lsls	r3, r3, #4
 800c1b0:	440b      	add	r3, r1
 800c1b2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	689a      	ldr	r2, [r3, #8]
 800c1b8:	491e      	ldr	r1, [pc, #120]	; (800c234 <inc_lock+0x118>)
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	011b      	lsls	r3, r3, #4
 800c1be:	440b      	add	r3, r1
 800c1c0:	3304      	adds	r3, #4
 800c1c2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	695a      	ldr	r2, [r3, #20]
 800c1c8:	491a      	ldr	r1, [pc, #104]	; (800c234 <inc_lock+0x118>)
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	011b      	lsls	r3, r3, #4
 800c1ce:	440b      	add	r3, r1
 800c1d0:	3308      	adds	r3, #8
 800c1d2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c1d4:	4a17      	ldr	r2, [pc, #92]	; (800c234 <inc_lock+0x118>)
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	011b      	lsls	r3, r3, #4
 800c1da:	4413      	add	r3, r2
 800c1dc:	330c      	adds	r3, #12
 800c1de:	2200      	movs	r2, #0
 800c1e0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d009      	beq.n	800c1fc <inc_lock+0xe0>
 800c1e8:	4a12      	ldr	r2, [pc, #72]	; (800c234 <inc_lock+0x118>)
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	011b      	lsls	r3, r3, #4
 800c1ee:	4413      	add	r3, r2
 800c1f0:	330c      	adds	r3, #12
 800c1f2:	881b      	ldrh	r3, [r3, #0]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d001      	beq.n	800c1fc <inc_lock+0xe0>
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	e015      	b.n	800c228 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d108      	bne.n	800c214 <inc_lock+0xf8>
 800c202:	4a0c      	ldr	r2, [pc, #48]	; (800c234 <inc_lock+0x118>)
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	011b      	lsls	r3, r3, #4
 800c208:	4413      	add	r3, r2
 800c20a:	330c      	adds	r3, #12
 800c20c:	881b      	ldrh	r3, [r3, #0]
 800c20e:	3301      	adds	r3, #1
 800c210:	b29a      	uxth	r2, r3
 800c212:	e001      	b.n	800c218 <inc_lock+0xfc>
 800c214:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c218:	4906      	ldr	r1, [pc, #24]	; (800c234 <inc_lock+0x118>)
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	011b      	lsls	r3, r3, #4
 800c21e:	440b      	add	r3, r1
 800c220:	330c      	adds	r3, #12
 800c222:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	3301      	adds	r3, #1
}
 800c228:	4618      	mov	r0, r3
 800c22a:	3714      	adds	r7, #20
 800c22c:	46bd      	mov	sp, r7
 800c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c232:	4770      	bx	lr
 800c234:	20003258 	.word	0x20003258

0800c238 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c238:	b480      	push	{r7}
 800c23a:	b085      	sub	sp, #20
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	3b01      	subs	r3, #1
 800c244:	607b      	str	r3, [r7, #4]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2b01      	cmp	r3, #1
 800c24a:	d825      	bhi.n	800c298 <dec_lock+0x60>
		n = Files[i].ctr;
 800c24c:	4a17      	ldr	r2, [pc, #92]	; (800c2ac <dec_lock+0x74>)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	011b      	lsls	r3, r3, #4
 800c252:	4413      	add	r3, r2
 800c254:	330c      	adds	r3, #12
 800c256:	881b      	ldrh	r3, [r3, #0]
 800c258:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c25a:	89fb      	ldrh	r3, [r7, #14]
 800c25c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c260:	d101      	bne.n	800c266 <dec_lock+0x2e>
 800c262:	2300      	movs	r3, #0
 800c264:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c266:	89fb      	ldrh	r3, [r7, #14]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d002      	beq.n	800c272 <dec_lock+0x3a>
 800c26c:	89fb      	ldrh	r3, [r7, #14]
 800c26e:	3b01      	subs	r3, #1
 800c270:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c272:	4a0e      	ldr	r2, [pc, #56]	; (800c2ac <dec_lock+0x74>)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	011b      	lsls	r3, r3, #4
 800c278:	4413      	add	r3, r2
 800c27a:	330c      	adds	r3, #12
 800c27c:	89fa      	ldrh	r2, [r7, #14]
 800c27e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c280:	89fb      	ldrh	r3, [r7, #14]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d105      	bne.n	800c292 <dec_lock+0x5a>
 800c286:	4a09      	ldr	r2, [pc, #36]	; (800c2ac <dec_lock+0x74>)
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	011b      	lsls	r3, r3, #4
 800c28c:	4413      	add	r3, r2
 800c28e:	2200      	movs	r2, #0
 800c290:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c292:	2300      	movs	r3, #0
 800c294:	737b      	strb	r3, [r7, #13]
 800c296:	e001      	b.n	800c29c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c298:	2302      	movs	r3, #2
 800c29a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c29c:	7b7b      	ldrb	r3, [r7, #13]
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3714      	adds	r7, #20
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a8:	4770      	bx	lr
 800c2aa:	bf00      	nop
 800c2ac:	20003258 	.word	0x20003258

0800c2b0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b085      	sub	sp, #20
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	60fb      	str	r3, [r7, #12]
 800c2bc:	e010      	b.n	800c2e0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c2be:	4a0d      	ldr	r2, [pc, #52]	; (800c2f4 <clear_lock+0x44>)
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	011b      	lsls	r3, r3, #4
 800c2c4:	4413      	add	r3, r2
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	687a      	ldr	r2, [r7, #4]
 800c2ca:	429a      	cmp	r2, r3
 800c2cc:	d105      	bne.n	800c2da <clear_lock+0x2a>
 800c2ce:	4a09      	ldr	r2, [pc, #36]	; (800c2f4 <clear_lock+0x44>)
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	011b      	lsls	r3, r3, #4
 800c2d4:	4413      	add	r3, r2
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	3301      	adds	r3, #1
 800c2de:	60fb      	str	r3, [r7, #12]
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	2b01      	cmp	r3, #1
 800c2e4:	d9eb      	bls.n	800c2be <clear_lock+0xe>
	}
}
 800c2e6:	bf00      	nop
 800c2e8:	bf00      	nop
 800c2ea:	3714      	adds	r7, #20
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f2:	4770      	bx	lr
 800c2f4:	20003258 	.word	0x20003258

0800c2f8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b086      	sub	sp, #24
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c300:	2300      	movs	r3, #0
 800c302:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	78db      	ldrb	r3, [r3, #3]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d034      	beq.n	800c376 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c310:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	7858      	ldrb	r0, [r3, #1]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c31c:	2301      	movs	r3, #1
 800c31e:	697a      	ldr	r2, [r7, #20]
 800c320:	f7ff fd40 	bl	800bda4 <disk_write>
 800c324:	4603      	mov	r3, r0
 800c326:	2b00      	cmp	r3, #0
 800c328:	d002      	beq.n	800c330 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c32a:	2301      	movs	r3, #1
 800c32c:	73fb      	strb	r3, [r7, #15]
 800c32e:	e022      	b.n	800c376 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2200      	movs	r2, #0
 800c334:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c33a:	697a      	ldr	r2, [r7, #20]
 800c33c:	1ad2      	subs	r2, r2, r3
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	69db      	ldr	r3, [r3, #28]
 800c342:	429a      	cmp	r2, r3
 800c344:	d217      	bcs.n	800c376 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	789b      	ldrb	r3, [r3, #2]
 800c34a:	613b      	str	r3, [r7, #16]
 800c34c:	e010      	b.n	800c370 <sync_window+0x78>
					wsect += fs->fsize;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	69db      	ldr	r3, [r3, #28]
 800c352:	697a      	ldr	r2, [r7, #20]
 800c354:	4413      	add	r3, r2
 800c356:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	7858      	ldrb	r0, [r3, #1]
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c362:	2301      	movs	r3, #1
 800c364:	697a      	ldr	r2, [r7, #20]
 800c366:	f7ff fd1d 	bl	800bda4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	3b01      	subs	r3, #1
 800c36e:	613b      	str	r3, [r7, #16]
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	2b01      	cmp	r3, #1
 800c374:	d8eb      	bhi.n	800c34e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c376:	7bfb      	ldrb	r3, [r7, #15]
}
 800c378:	4618      	mov	r0, r3
 800c37a:	3718      	adds	r7, #24
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}

0800c380 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b084      	sub	sp, #16
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
 800c388:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c38a:	2300      	movs	r3, #0
 800c38c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c392:	683a      	ldr	r2, [r7, #0]
 800c394:	429a      	cmp	r2, r3
 800c396:	d01b      	beq.n	800c3d0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f7ff ffad 	bl	800c2f8 <sync_window>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c3a2:	7bfb      	ldrb	r3, [r7, #15]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d113      	bne.n	800c3d0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	7858      	ldrb	r0, [r3, #1]
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	683a      	ldr	r2, [r7, #0]
 800c3b6:	f7ff fcd5 	bl	800bd64 <disk_read>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d004      	beq.n	800c3ca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c3c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c3c4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	683a      	ldr	r2, [r7, #0]
 800c3ce:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800c3d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3710      	adds	r7, #16
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}
	...

0800c3dc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b084      	sub	sp, #16
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f7ff ff87 	bl	800c2f8 <sync_window>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c3ee:	7bfb      	ldrb	r3, [r7, #15]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d158      	bne.n	800c4a6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	781b      	ldrb	r3, [r3, #0]
 800c3f8:	2b03      	cmp	r3, #3
 800c3fa:	d148      	bne.n	800c48e <sync_fs+0xb2>
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	791b      	ldrb	r3, [r3, #4]
 800c400:	2b01      	cmp	r3, #1
 800c402:	d144      	bne.n	800c48e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	3334      	adds	r3, #52	; 0x34
 800c408:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c40c:	2100      	movs	r1, #0
 800c40e:	4618      	mov	r0, r3
 800c410:	f7ff fda9 	bl	800bf66 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	3334      	adds	r3, #52	; 0x34
 800c418:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c41c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c420:	4618      	mov	r0, r3
 800c422:	f7ff fd38 	bl	800be96 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	3334      	adds	r3, #52	; 0x34
 800c42a:	4921      	ldr	r1, [pc, #132]	; (800c4b0 <sync_fs+0xd4>)
 800c42c:	4618      	mov	r0, r3
 800c42e:	f7ff fd4d 	bl	800becc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	3334      	adds	r3, #52	; 0x34
 800c436:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c43a:	491e      	ldr	r1, [pc, #120]	; (800c4b4 <sync_fs+0xd8>)
 800c43c:	4618      	mov	r0, r3
 800c43e:	f7ff fd45 	bl	800becc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	3334      	adds	r3, #52	; 0x34
 800c446:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	695b      	ldr	r3, [r3, #20]
 800c44e:	4619      	mov	r1, r3
 800c450:	4610      	mov	r0, r2
 800c452:	f7ff fd3b 	bl	800becc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	3334      	adds	r3, #52	; 0x34
 800c45a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	691b      	ldr	r3, [r3, #16]
 800c462:	4619      	mov	r1, r3
 800c464:	4610      	mov	r0, r2
 800c466:	f7ff fd31 	bl	800becc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6a1b      	ldr	r3, [r3, #32]
 800c46e:	1c5a      	adds	r2, r3, #1
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	7858      	ldrb	r0, [r3, #1]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c482:	2301      	movs	r3, #1
 800c484:	f7ff fc8e 	bl	800bda4 <disk_write>
			fs->fsi_flag = 0;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2200      	movs	r2, #0
 800c48c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	785b      	ldrb	r3, [r3, #1]
 800c492:	2200      	movs	r2, #0
 800c494:	2100      	movs	r1, #0
 800c496:	4618      	mov	r0, r3
 800c498:	f7ff fca4 	bl	800bde4 <disk_ioctl>
 800c49c:	4603      	mov	r3, r0
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d001      	beq.n	800c4a6 <sync_fs+0xca>
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c4a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3710      	adds	r7, #16
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}
 800c4b0:	41615252 	.word	0x41615252
 800c4b4:	61417272 	.word	0x61417272

0800c4b8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c4b8:	b480      	push	{r7}
 800c4ba:	b083      	sub	sp, #12
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	3b02      	subs	r3, #2
 800c4c6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	699b      	ldr	r3, [r3, #24]
 800c4cc:	3b02      	subs	r3, #2
 800c4ce:	683a      	ldr	r2, [r7, #0]
 800c4d0:	429a      	cmp	r2, r3
 800c4d2:	d301      	bcc.n	800c4d8 <clust2sect+0x20>
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	e008      	b.n	800c4ea <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	895b      	ldrh	r3, [r3, #10]
 800c4dc:	461a      	mov	r2, r3
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	fb03 f202 	mul.w	r2, r3, r2
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e8:	4413      	add	r3, r2
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	370c      	adds	r7, #12
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f4:	4770      	bx	lr

0800c4f6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c4f6:	b580      	push	{r7, lr}
 800c4f8:	b086      	sub	sp, #24
 800c4fa:	af00      	add	r7, sp, #0
 800c4fc:	6078      	str	r0, [r7, #4]
 800c4fe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	2b01      	cmp	r3, #1
 800c50a:	d904      	bls.n	800c516 <get_fat+0x20>
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	699b      	ldr	r3, [r3, #24]
 800c510:	683a      	ldr	r2, [r7, #0]
 800c512:	429a      	cmp	r2, r3
 800c514:	d302      	bcc.n	800c51c <get_fat+0x26>
		val = 1;	/* Internal error */
 800c516:	2301      	movs	r3, #1
 800c518:	617b      	str	r3, [r7, #20]
 800c51a:	e08f      	b.n	800c63c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c51c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c520:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	781b      	ldrb	r3, [r3, #0]
 800c526:	2b03      	cmp	r3, #3
 800c528:	d062      	beq.n	800c5f0 <get_fat+0xfa>
 800c52a:	2b03      	cmp	r3, #3
 800c52c:	dc7c      	bgt.n	800c628 <get_fat+0x132>
 800c52e:	2b01      	cmp	r3, #1
 800c530:	d002      	beq.n	800c538 <get_fat+0x42>
 800c532:	2b02      	cmp	r3, #2
 800c534:	d042      	beq.n	800c5bc <get_fat+0xc6>
 800c536:	e077      	b.n	800c628 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	60fb      	str	r3, [r7, #12]
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	085b      	lsrs	r3, r3, #1
 800c540:	68fa      	ldr	r2, [r7, #12]
 800c542:	4413      	add	r3, r2
 800c544:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c546:	693b      	ldr	r3, [r7, #16]
 800c548:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	0a5b      	lsrs	r3, r3, #9
 800c54e:	4413      	add	r3, r2
 800c550:	4619      	mov	r1, r3
 800c552:	6938      	ldr	r0, [r7, #16]
 800c554:	f7ff ff14 	bl	800c380 <move_window>
 800c558:	4603      	mov	r3, r0
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d167      	bne.n	800c62e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	1c5a      	adds	r2, r3, #1
 800c562:	60fa      	str	r2, [r7, #12]
 800c564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c568:	693a      	ldr	r2, [r7, #16]
 800c56a:	4413      	add	r3, r2
 800c56c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c570:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c572:	693b      	ldr	r3, [r7, #16]
 800c574:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	0a5b      	lsrs	r3, r3, #9
 800c57a:	4413      	add	r3, r2
 800c57c:	4619      	mov	r1, r3
 800c57e:	6938      	ldr	r0, [r7, #16]
 800c580:	f7ff fefe 	bl	800c380 <move_window>
 800c584:	4603      	mov	r3, r0
 800c586:	2b00      	cmp	r3, #0
 800c588:	d153      	bne.n	800c632 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c590:	693a      	ldr	r2, [r7, #16]
 800c592:	4413      	add	r3, r2
 800c594:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c598:	021b      	lsls	r3, r3, #8
 800c59a:	461a      	mov	r2, r3
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	4313      	orrs	r3, r2
 800c5a0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	f003 0301 	and.w	r3, r3, #1
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d002      	beq.n	800c5b2 <get_fat+0xbc>
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	091b      	lsrs	r3, r3, #4
 800c5b0:	e002      	b.n	800c5b8 <get_fat+0xc2>
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c5b8:	617b      	str	r3, [r7, #20]
			break;
 800c5ba:	e03f      	b.n	800c63c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	0a1b      	lsrs	r3, r3, #8
 800c5c4:	4413      	add	r3, r2
 800c5c6:	4619      	mov	r1, r3
 800c5c8:	6938      	ldr	r0, [r7, #16]
 800c5ca:	f7ff fed9 	bl	800c380 <move_window>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d130      	bne.n	800c636 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	005b      	lsls	r3, r3, #1
 800c5de:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c5e2:	4413      	add	r3, r2
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f7ff fc1b 	bl	800be20 <ld_word>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	617b      	str	r3, [r7, #20]
			break;
 800c5ee:	e025      	b.n	800c63c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	09db      	lsrs	r3, r3, #7
 800c5f8:	4413      	add	r3, r2
 800c5fa:	4619      	mov	r1, r3
 800c5fc:	6938      	ldr	r0, [r7, #16]
 800c5fe:	f7ff febf 	bl	800c380 <move_window>
 800c602:	4603      	mov	r3, r0
 800c604:	2b00      	cmp	r3, #0
 800c606:	d118      	bne.n	800c63a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	009b      	lsls	r3, r3, #2
 800c612:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c616:	4413      	add	r3, r2
 800c618:	4618      	mov	r0, r3
 800c61a:	f7ff fc19 	bl	800be50 <ld_dword>
 800c61e:	4603      	mov	r3, r0
 800c620:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c624:	617b      	str	r3, [r7, #20]
			break;
 800c626:	e009      	b.n	800c63c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c628:	2301      	movs	r3, #1
 800c62a:	617b      	str	r3, [r7, #20]
 800c62c:	e006      	b.n	800c63c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c62e:	bf00      	nop
 800c630:	e004      	b.n	800c63c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c632:	bf00      	nop
 800c634:	e002      	b.n	800c63c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c636:	bf00      	nop
 800c638:	e000      	b.n	800c63c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c63a:	bf00      	nop
		}
	}

	return val;
 800c63c:	697b      	ldr	r3, [r7, #20]
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3718      	adds	r7, #24
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}

0800c646 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c646:	b590      	push	{r4, r7, lr}
 800c648:	b089      	sub	sp, #36	; 0x24
 800c64a:	af00      	add	r7, sp, #0
 800c64c:	60f8      	str	r0, [r7, #12]
 800c64e:	60b9      	str	r1, [r7, #8]
 800c650:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c652:	2302      	movs	r3, #2
 800c654:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	2b01      	cmp	r3, #1
 800c65a:	f240 80d9 	bls.w	800c810 <put_fat+0x1ca>
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	699b      	ldr	r3, [r3, #24]
 800c662:	68ba      	ldr	r2, [r7, #8]
 800c664:	429a      	cmp	r2, r3
 800c666:	f080 80d3 	bcs.w	800c810 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	781b      	ldrb	r3, [r3, #0]
 800c66e:	2b03      	cmp	r3, #3
 800c670:	f000 8096 	beq.w	800c7a0 <put_fat+0x15a>
 800c674:	2b03      	cmp	r3, #3
 800c676:	f300 80cb 	bgt.w	800c810 <put_fat+0x1ca>
 800c67a:	2b01      	cmp	r3, #1
 800c67c:	d002      	beq.n	800c684 <put_fat+0x3e>
 800c67e:	2b02      	cmp	r3, #2
 800c680:	d06e      	beq.n	800c760 <put_fat+0x11a>
 800c682:	e0c5      	b.n	800c810 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	61bb      	str	r3, [r7, #24]
 800c688:	69bb      	ldr	r3, [r7, #24]
 800c68a:	085b      	lsrs	r3, r3, #1
 800c68c:	69ba      	ldr	r2, [r7, #24]
 800c68e:	4413      	add	r3, r2
 800c690:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c696:	69bb      	ldr	r3, [r7, #24]
 800c698:	0a5b      	lsrs	r3, r3, #9
 800c69a:	4413      	add	r3, r2
 800c69c:	4619      	mov	r1, r3
 800c69e:	68f8      	ldr	r0, [r7, #12]
 800c6a0:	f7ff fe6e 	bl	800c380 <move_window>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c6a8:	7ffb      	ldrb	r3, [r7, #31]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	f040 80a9 	bne.w	800c802 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c6b6:	69bb      	ldr	r3, [r7, #24]
 800c6b8:	1c59      	adds	r1, r3, #1
 800c6ba:	61b9      	str	r1, [r7, #24]
 800c6bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6c0:	4413      	add	r3, r2
 800c6c2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	f003 0301 	and.w	r3, r3, #1
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d00d      	beq.n	800c6ea <put_fat+0xa4>
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	781b      	ldrb	r3, [r3, #0]
 800c6d2:	b25b      	sxtb	r3, r3
 800c6d4:	f003 030f 	and.w	r3, r3, #15
 800c6d8:	b25a      	sxtb	r2, r3
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	b2db      	uxtb	r3, r3
 800c6de:	011b      	lsls	r3, r3, #4
 800c6e0:	b25b      	sxtb	r3, r3
 800c6e2:	4313      	orrs	r3, r2
 800c6e4:	b25b      	sxtb	r3, r3
 800c6e6:	b2db      	uxtb	r3, r3
 800c6e8:	e001      	b.n	800c6ee <put_fat+0xa8>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	b2db      	uxtb	r3, r3
 800c6ee:	697a      	ldr	r2, [r7, #20]
 800c6f0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	2201      	movs	r2, #1
 800c6f6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c6fc:	69bb      	ldr	r3, [r7, #24]
 800c6fe:	0a5b      	lsrs	r3, r3, #9
 800c700:	4413      	add	r3, r2
 800c702:	4619      	mov	r1, r3
 800c704:	68f8      	ldr	r0, [r7, #12]
 800c706:	f7ff fe3b 	bl	800c380 <move_window>
 800c70a:	4603      	mov	r3, r0
 800c70c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c70e:	7ffb      	ldrb	r3, [r7, #31]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d178      	bne.n	800c806 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c71a:	69bb      	ldr	r3, [r7, #24]
 800c71c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c720:	4413      	add	r3, r2
 800c722:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	f003 0301 	and.w	r3, r3, #1
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d003      	beq.n	800c736 <put_fat+0xf0>
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	091b      	lsrs	r3, r3, #4
 800c732:	b2db      	uxtb	r3, r3
 800c734:	e00e      	b.n	800c754 <put_fat+0x10e>
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	781b      	ldrb	r3, [r3, #0]
 800c73a:	b25b      	sxtb	r3, r3
 800c73c:	f023 030f 	bic.w	r3, r3, #15
 800c740:	b25a      	sxtb	r2, r3
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	0a1b      	lsrs	r3, r3, #8
 800c746:	b25b      	sxtb	r3, r3
 800c748:	f003 030f 	and.w	r3, r3, #15
 800c74c:	b25b      	sxtb	r3, r3
 800c74e:	4313      	orrs	r3, r2
 800c750:	b25b      	sxtb	r3, r3
 800c752:	b2db      	uxtb	r3, r3
 800c754:	697a      	ldr	r2, [r7, #20]
 800c756:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	2201      	movs	r2, #1
 800c75c:	70da      	strb	r2, [r3, #3]
			break;
 800c75e:	e057      	b.n	800c810 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	0a1b      	lsrs	r3, r3, #8
 800c768:	4413      	add	r3, r2
 800c76a:	4619      	mov	r1, r3
 800c76c:	68f8      	ldr	r0, [r7, #12]
 800c76e:	f7ff fe07 	bl	800c380 <move_window>
 800c772:	4603      	mov	r3, r0
 800c774:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c776:	7ffb      	ldrb	r3, [r7, #31]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d146      	bne.n	800c80a <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	005b      	lsls	r3, r3, #1
 800c786:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c78a:	4413      	add	r3, r2
 800c78c:	687a      	ldr	r2, [r7, #4]
 800c78e:	b292      	uxth	r2, r2
 800c790:	4611      	mov	r1, r2
 800c792:	4618      	mov	r0, r3
 800c794:	f7ff fb7f 	bl	800be96 <st_word>
			fs->wflag = 1;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	2201      	movs	r2, #1
 800c79c:	70da      	strb	r2, [r3, #3]
			break;
 800c79e:	e037      	b.n	800c810 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	09db      	lsrs	r3, r3, #7
 800c7a8:	4413      	add	r3, r2
 800c7aa:	4619      	mov	r1, r3
 800c7ac:	68f8      	ldr	r0, [r7, #12]
 800c7ae:	f7ff fde7 	bl	800c380 <move_window>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c7b6:	7ffb      	ldrb	r3, [r7, #31]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d128      	bne.n	800c80e <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	009b      	lsls	r3, r3, #2
 800c7cc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c7d0:	4413      	add	r3, r2
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7ff fb3c 	bl	800be50 <ld_dword>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c7de:	4323      	orrs	r3, r4
 800c7e0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	009b      	lsls	r3, r3, #2
 800c7ec:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c7f0:	4413      	add	r3, r2
 800c7f2:	6879      	ldr	r1, [r7, #4]
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f7ff fb69 	bl	800becc <st_dword>
			fs->wflag = 1;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	2201      	movs	r2, #1
 800c7fe:	70da      	strb	r2, [r3, #3]
			break;
 800c800:	e006      	b.n	800c810 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c802:	bf00      	nop
 800c804:	e004      	b.n	800c810 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c806:	bf00      	nop
 800c808:	e002      	b.n	800c810 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c80a:	bf00      	nop
 800c80c:	e000      	b.n	800c810 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c80e:	bf00      	nop
		}
	}
	return res;
 800c810:	7ffb      	ldrb	r3, [r7, #31]
}
 800c812:	4618      	mov	r0, r3
 800c814:	3724      	adds	r7, #36	; 0x24
 800c816:	46bd      	mov	sp, r7
 800c818:	bd90      	pop	{r4, r7, pc}

0800c81a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c81a:	b580      	push	{r7, lr}
 800c81c:	b088      	sub	sp, #32
 800c81e:	af00      	add	r7, sp, #0
 800c820:	60f8      	str	r0, [r7, #12]
 800c822:	60b9      	str	r1, [r7, #8]
 800c824:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c826:	2300      	movs	r3, #0
 800c828:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	2b01      	cmp	r3, #1
 800c834:	d904      	bls.n	800c840 <remove_chain+0x26>
 800c836:	69bb      	ldr	r3, [r7, #24]
 800c838:	699b      	ldr	r3, [r3, #24]
 800c83a:	68ba      	ldr	r2, [r7, #8]
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d301      	bcc.n	800c844 <remove_chain+0x2a>
 800c840:	2302      	movs	r3, #2
 800c842:	e04b      	b.n	800c8dc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d00c      	beq.n	800c864 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c84a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c84e:	6879      	ldr	r1, [r7, #4]
 800c850:	69b8      	ldr	r0, [r7, #24]
 800c852:	f7ff fef8 	bl	800c646 <put_fat>
 800c856:	4603      	mov	r3, r0
 800c858:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c85a:	7ffb      	ldrb	r3, [r7, #31]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d001      	beq.n	800c864 <remove_chain+0x4a>
 800c860:	7ffb      	ldrb	r3, [r7, #31]
 800c862:	e03b      	b.n	800c8dc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c864:	68b9      	ldr	r1, [r7, #8]
 800c866:	68f8      	ldr	r0, [r7, #12]
 800c868:	f7ff fe45 	bl	800c4f6 <get_fat>
 800c86c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d031      	beq.n	800c8d8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	2b01      	cmp	r3, #1
 800c878:	d101      	bne.n	800c87e <remove_chain+0x64>
 800c87a:	2302      	movs	r3, #2
 800c87c:	e02e      	b.n	800c8dc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c884:	d101      	bne.n	800c88a <remove_chain+0x70>
 800c886:	2301      	movs	r3, #1
 800c888:	e028      	b.n	800c8dc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c88a:	2200      	movs	r2, #0
 800c88c:	68b9      	ldr	r1, [r7, #8]
 800c88e:	69b8      	ldr	r0, [r7, #24]
 800c890:	f7ff fed9 	bl	800c646 <put_fat>
 800c894:	4603      	mov	r3, r0
 800c896:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c898:	7ffb      	ldrb	r3, [r7, #31]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d001      	beq.n	800c8a2 <remove_chain+0x88>
 800c89e:	7ffb      	ldrb	r3, [r7, #31]
 800c8a0:	e01c      	b.n	800c8dc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c8a2:	69bb      	ldr	r3, [r7, #24]
 800c8a4:	695a      	ldr	r2, [r3, #20]
 800c8a6:	69bb      	ldr	r3, [r7, #24]
 800c8a8:	699b      	ldr	r3, [r3, #24]
 800c8aa:	3b02      	subs	r3, #2
 800c8ac:	429a      	cmp	r2, r3
 800c8ae:	d20b      	bcs.n	800c8c8 <remove_chain+0xae>
			fs->free_clst++;
 800c8b0:	69bb      	ldr	r3, [r7, #24]
 800c8b2:	695b      	ldr	r3, [r3, #20]
 800c8b4:	1c5a      	adds	r2, r3, #1
 800c8b6:	69bb      	ldr	r3, [r7, #24]
 800c8b8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800c8ba:	69bb      	ldr	r3, [r7, #24]
 800c8bc:	791b      	ldrb	r3, [r3, #4]
 800c8be:	f043 0301 	orr.w	r3, r3, #1
 800c8c2:	b2da      	uxtb	r2, r3
 800c8c4:	69bb      	ldr	r3, [r7, #24]
 800c8c6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c8cc:	69bb      	ldr	r3, [r7, #24]
 800c8ce:	699b      	ldr	r3, [r3, #24]
 800c8d0:	68ba      	ldr	r2, [r7, #8]
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	d3c6      	bcc.n	800c864 <remove_chain+0x4a>
 800c8d6:	e000      	b.n	800c8da <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c8d8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c8da:	2300      	movs	r3, #0
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3720      	adds	r7, #32
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b088      	sub	sp, #32
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d10d      	bne.n	800c916 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	691b      	ldr	r3, [r3, #16]
 800c8fe:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c900:	69bb      	ldr	r3, [r7, #24]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d004      	beq.n	800c910 <create_chain+0x2c>
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	699b      	ldr	r3, [r3, #24]
 800c90a:	69ba      	ldr	r2, [r7, #24]
 800c90c:	429a      	cmp	r2, r3
 800c90e:	d31b      	bcc.n	800c948 <create_chain+0x64>
 800c910:	2301      	movs	r3, #1
 800c912:	61bb      	str	r3, [r7, #24]
 800c914:	e018      	b.n	800c948 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c916:	6839      	ldr	r1, [r7, #0]
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f7ff fdec 	bl	800c4f6 <get_fat>
 800c91e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	2b01      	cmp	r3, #1
 800c924:	d801      	bhi.n	800c92a <create_chain+0x46>
 800c926:	2301      	movs	r3, #1
 800c928:	e070      	b.n	800ca0c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c930:	d101      	bne.n	800c936 <create_chain+0x52>
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	e06a      	b.n	800ca0c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	699b      	ldr	r3, [r3, #24]
 800c93a:	68fa      	ldr	r2, [r7, #12]
 800c93c:	429a      	cmp	r2, r3
 800c93e:	d201      	bcs.n	800c944 <create_chain+0x60>
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	e063      	b.n	800ca0c <create_chain+0x128>
		scl = clst;
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c948:	69bb      	ldr	r3, [r7, #24]
 800c94a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c94c:	69fb      	ldr	r3, [r7, #28]
 800c94e:	3301      	adds	r3, #1
 800c950:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	699b      	ldr	r3, [r3, #24]
 800c956:	69fa      	ldr	r2, [r7, #28]
 800c958:	429a      	cmp	r2, r3
 800c95a:	d307      	bcc.n	800c96c <create_chain+0x88>
				ncl = 2;
 800c95c:	2302      	movs	r3, #2
 800c95e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c960:	69fa      	ldr	r2, [r7, #28]
 800c962:	69bb      	ldr	r3, [r7, #24]
 800c964:	429a      	cmp	r2, r3
 800c966:	d901      	bls.n	800c96c <create_chain+0x88>
 800c968:	2300      	movs	r3, #0
 800c96a:	e04f      	b.n	800ca0c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c96c:	69f9      	ldr	r1, [r7, #28]
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f7ff fdc1 	bl	800c4f6 <get_fat>
 800c974:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d00e      	beq.n	800c99a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	2b01      	cmp	r3, #1
 800c980:	d003      	beq.n	800c98a <create_chain+0xa6>
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c988:	d101      	bne.n	800c98e <create_chain+0xaa>
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	e03e      	b.n	800ca0c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c98e:	69fa      	ldr	r2, [r7, #28]
 800c990:	69bb      	ldr	r3, [r7, #24]
 800c992:	429a      	cmp	r2, r3
 800c994:	d1da      	bne.n	800c94c <create_chain+0x68>
 800c996:	2300      	movs	r3, #0
 800c998:	e038      	b.n	800ca0c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c99a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c99c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c9a0:	69f9      	ldr	r1, [r7, #28]
 800c9a2:	6938      	ldr	r0, [r7, #16]
 800c9a4:	f7ff fe4f 	bl	800c646 <put_fat>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c9ac:	7dfb      	ldrb	r3, [r7, #23]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d109      	bne.n	800c9c6 <create_chain+0xe2>
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d006      	beq.n	800c9c6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c9b8:	69fa      	ldr	r2, [r7, #28]
 800c9ba:	6839      	ldr	r1, [r7, #0]
 800c9bc:	6938      	ldr	r0, [r7, #16]
 800c9be:	f7ff fe42 	bl	800c646 <put_fat>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c9c6:	7dfb      	ldrb	r3, [r7, #23]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d116      	bne.n	800c9fa <create_chain+0x116>
		fs->last_clst = ncl;
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	69fa      	ldr	r2, [r7, #28]
 800c9d0:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c9d2:	693b      	ldr	r3, [r7, #16]
 800c9d4:	695a      	ldr	r2, [r3, #20]
 800c9d6:	693b      	ldr	r3, [r7, #16]
 800c9d8:	699b      	ldr	r3, [r3, #24]
 800c9da:	3b02      	subs	r3, #2
 800c9dc:	429a      	cmp	r2, r3
 800c9de:	d804      	bhi.n	800c9ea <create_chain+0x106>
 800c9e0:	693b      	ldr	r3, [r7, #16]
 800c9e2:	695b      	ldr	r3, [r3, #20]
 800c9e4:	1e5a      	subs	r2, r3, #1
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	791b      	ldrb	r3, [r3, #4]
 800c9ee:	f043 0301 	orr.w	r3, r3, #1
 800c9f2:	b2da      	uxtb	r2, r3
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	711a      	strb	r2, [r3, #4]
 800c9f8:	e007      	b.n	800ca0a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c9fa:	7dfb      	ldrb	r3, [r7, #23]
 800c9fc:	2b01      	cmp	r3, #1
 800c9fe:	d102      	bne.n	800ca06 <create_chain+0x122>
 800ca00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca04:	e000      	b.n	800ca08 <create_chain+0x124>
 800ca06:	2301      	movs	r3, #1
 800ca08:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ca0a:	69fb      	ldr	r3, [r7, #28]
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	3720      	adds	r7, #32
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}

0800ca14 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ca14:	b480      	push	{r7}
 800ca16:	b087      	sub	sp, #28
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
 800ca1c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca28:	3304      	adds	r3, #4
 800ca2a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	0a5b      	lsrs	r3, r3, #9
 800ca30:	68fa      	ldr	r2, [r7, #12]
 800ca32:	8952      	ldrh	r2, [r2, #10]
 800ca34:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca38:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	1d1a      	adds	r2, r3, #4
 800ca3e:	613a      	str	r2, [r7, #16]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d101      	bne.n	800ca4e <clmt_clust+0x3a>
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	e010      	b.n	800ca70 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ca4e:	697a      	ldr	r2, [r7, #20]
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	429a      	cmp	r2, r3
 800ca54:	d307      	bcc.n	800ca66 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ca56:	697a      	ldr	r2, [r7, #20]
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	1ad3      	subs	r3, r2, r3
 800ca5c:	617b      	str	r3, [r7, #20]
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	3304      	adds	r3, #4
 800ca62:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ca64:	e7e9      	b.n	800ca3a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ca66:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ca68:	693b      	ldr	r3, [r7, #16]
 800ca6a:	681a      	ldr	r2, [r3, #0]
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	4413      	add	r3, r2
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	371c      	adds	r7, #28
 800ca74:	46bd      	mov	sp, r7
 800ca76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7a:	4770      	bx	lr

0800ca7c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b086      	sub	sp, #24
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
 800ca84:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ca92:	d204      	bcs.n	800ca9e <dir_sdi+0x22>
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	f003 031f 	and.w	r3, r3, #31
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d001      	beq.n	800caa2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ca9e:	2302      	movs	r3, #2
 800caa0:	e063      	b.n	800cb6a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	683a      	ldr	r2, [r7, #0]
 800caa6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	689b      	ldr	r3, [r3, #8]
 800caac:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d106      	bne.n	800cac2 <dir_sdi+0x46>
 800cab4:	693b      	ldr	r3, [r7, #16]
 800cab6:	781b      	ldrb	r3, [r3, #0]
 800cab8:	2b02      	cmp	r3, #2
 800caba:	d902      	bls.n	800cac2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800cabc:	693b      	ldr	r3, [r7, #16]
 800cabe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cac0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d10c      	bne.n	800cae2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	095b      	lsrs	r3, r3, #5
 800cacc:	693a      	ldr	r2, [r7, #16]
 800cace:	8912      	ldrh	r2, [r2, #8]
 800cad0:	4293      	cmp	r3, r2
 800cad2:	d301      	bcc.n	800cad8 <dir_sdi+0x5c>
 800cad4:	2302      	movs	r3, #2
 800cad6:	e048      	b.n	800cb6a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800cad8:	693b      	ldr	r3, [r7, #16]
 800cada:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	61da      	str	r2, [r3, #28]
 800cae0:	e029      	b.n	800cb36 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cae2:	693b      	ldr	r3, [r7, #16]
 800cae4:	895b      	ldrh	r3, [r3, #10]
 800cae6:	025b      	lsls	r3, r3, #9
 800cae8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800caea:	e019      	b.n	800cb20 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	6979      	ldr	r1, [r7, #20]
 800caf0:	4618      	mov	r0, r3
 800caf2:	f7ff fd00 	bl	800c4f6 <get_fat>
 800caf6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cafe:	d101      	bne.n	800cb04 <dir_sdi+0x88>
 800cb00:	2301      	movs	r3, #1
 800cb02:	e032      	b.n	800cb6a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	2b01      	cmp	r3, #1
 800cb08:	d904      	bls.n	800cb14 <dir_sdi+0x98>
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	699b      	ldr	r3, [r3, #24]
 800cb0e:	697a      	ldr	r2, [r7, #20]
 800cb10:	429a      	cmp	r2, r3
 800cb12:	d301      	bcc.n	800cb18 <dir_sdi+0x9c>
 800cb14:	2302      	movs	r3, #2
 800cb16:	e028      	b.n	800cb6a <dir_sdi+0xee>
			ofs -= csz;
 800cb18:	683a      	ldr	r2, [r7, #0]
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	1ad3      	subs	r3, r2, r3
 800cb1e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cb20:	683a      	ldr	r2, [r7, #0]
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	429a      	cmp	r2, r3
 800cb26:	d2e1      	bcs.n	800caec <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800cb28:	6979      	ldr	r1, [r7, #20]
 800cb2a:	6938      	ldr	r0, [r7, #16]
 800cb2c:	f7ff fcc4 	bl	800c4b8 <clust2sect>
 800cb30:	4602      	mov	r2, r0
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	697a      	ldr	r2, [r7, #20]
 800cb3a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	69db      	ldr	r3, [r3, #28]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d101      	bne.n	800cb48 <dir_sdi+0xcc>
 800cb44:	2302      	movs	r3, #2
 800cb46:	e010      	b.n	800cb6a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	69da      	ldr	r2, [r3, #28]
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	0a5b      	lsrs	r3, r3, #9
 800cb50:	441a      	add	r2, r3
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cb56:	693b      	ldr	r3, [r7, #16]
 800cb58:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb62:	441a      	add	r2, r3
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cb68:	2300      	movs	r3, #0
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3718      	adds	r7, #24
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}

0800cb72 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800cb72:	b580      	push	{r7, lr}
 800cb74:	b086      	sub	sp, #24
 800cb76:	af00      	add	r7, sp, #0
 800cb78:	6078      	str	r0, [r7, #4]
 800cb7a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	695b      	ldr	r3, [r3, #20]
 800cb86:	3320      	adds	r3, #32
 800cb88:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	69db      	ldr	r3, [r3, #28]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d003      	beq.n	800cb9a <dir_next+0x28>
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cb98:	d301      	bcc.n	800cb9e <dir_next+0x2c>
 800cb9a:	2304      	movs	r3, #4
 800cb9c:	e0aa      	b.n	800ccf4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	f040 8098 	bne.w	800ccda <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	69db      	ldr	r3, [r3, #28]
 800cbae:	1c5a      	adds	r2, r3, #1
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	699b      	ldr	r3, [r3, #24]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d10b      	bne.n	800cbd4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	095b      	lsrs	r3, r3, #5
 800cbc0:	68fa      	ldr	r2, [r7, #12]
 800cbc2:	8912      	ldrh	r2, [r2, #8]
 800cbc4:	4293      	cmp	r3, r2
 800cbc6:	f0c0 8088 	bcc.w	800ccda <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2200      	movs	r2, #0
 800cbce:	61da      	str	r2, [r3, #28]
 800cbd0:	2304      	movs	r3, #4
 800cbd2:	e08f      	b.n	800ccf4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800cbd4:	68bb      	ldr	r3, [r7, #8]
 800cbd6:	0a5b      	lsrs	r3, r3, #9
 800cbd8:	68fa      	ldr	r2, [r7, #12]
 800cbda:	8952      	ldrh	r2, [r2, #10]
 800cbdc:	3a01      	subs	r2, #1
 800cbde:	4013      	ands	r3, r2
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d17a      	bne.n	800ccda <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800cbe4:	687a      	ldr	r2, [r7, #4]
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	699b      	ldr	r3, [r3, #24]
 800cbea:	4619      	mov	r1, r3
 800cbec:	4610      	mov	r0, r2
 800cbee:	f7ff fc82 	bl	800c4f6 <get_fat>
 800cbf2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800cbf4:	697b      	ldr	r3, [r7, #20]
 800cbf6:	2b01      	cmp	r3, #1
 800cbf8:	d801      	bhi.n	800cbfe <dir_next+0x8c>
 800cbfa:	2302      	movs	r3, #2
 800cbfc:	e07a      	b.n	800ccf4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800cbfe:	697b      	ldr	r3, [r7, #20]
 800cc00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc04:	d101      	bne.n	800cc0a <dir_next+0x98>
 800cc06:	2301      	movs	r3, #1
 800cc08:	e074      	b.n	800ccf4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	699b      	ldr	r3, [r3, #24]
 800cc0e:	697a      	ldr	r2, [r7, #20]
 800cc10:	429a      	cmp	r2, r3
 800cc12:	d358      	bcc.n	800ccc6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d104      	bne.n	800cc24 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	61da      	str	r2, [r3, #28]
 800cc20:	2304      	movs	r3, #4
 800cc22:	e067      	b.n	800ccf4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800cc24:	687a      	ldr	r2, [r7, #4]
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	699b      	ldr	r3, [r3, #24]
 800cc2a:	4619      	mov	r1, r3
 800cc2c:	4610      	mov	r0, r2
 800cc2e:	f7ff fe59 	bl	800c8e4 <create_chain>
 800cc32:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d101      	bne.n	800cc3e <dir_next+0xcc>
 800cc3a:	2307      	movs	r3, #7
 800cc3c:	e05a      	b.n	800ccf4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	2b01      	cmp	r3, #1
 800cc42:	d101      	bne.n	800cc48 <dir_next+0xd6>
 800cc44:	2302      	movs	r3, #2
 800cc46:	e055      	b.n	800ccf4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cc48:	697b      	ldr	r3, [r7, #20]
 800cc4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc4e:	d101      	bne.n	800cc54 <dir_next+0xe2>
 800cc50:	2301      	movs	r3, #1
 800cc52:	e04f      	b.n	800ccf4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800cc54:	68f8      	ldr	r0, [r7, #12]
 800cc56:	f7ff fb4f 	bl	800c2f8 <sync_window>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d001      	beq.n	800cc64 <dir_next+0xf2>
 800cc60:	2301      	movs	r3, #1
 800cc62:	e047      	b.n	800ccf4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	3334      	adds	r3, #52	; 0x34
 800cc68:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc6c:	2100      	movs	r1, #0
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f7ff f979 	bl	800bf66 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cc74:	2300      	movs	r3, #0
 800cc76:	613b      	str	r3, [r7, #16]
 800cc78:	6979      	ldr	r1, [r7, #20]
 800cc7a:	68f8      	ldr	r0, [r7, #12]
 800cc7c:	f7ff fc1c 	bl	800c4b8 <clust2sect>
 800cc80:	4602      	mov	r2, r0
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	631a      	str	r2, [r3, #48]	; 0x30
 800cc86:	e012      	b.n	800ccae <dir_next+0x13c>
						fs->wflag = 1;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	2201      	movs	r2, #1
 800cc8c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800cc8e:	68f8      	ldr	r0, [r7, #12]
 800cc90:	f7ff fb32 	bl	800c2f8 <sync_window>
 800cc94:	4603      	mov	r3, r0
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d001      	beq.n	800cc9e <dir_next+0x12c>
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	e02a      	b.n	800ccf4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	3301      	adds	r3, #1
 800cca2:	613b      	str	r3, [r7, #16]
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cca8:	1c5a      	adds	r2, r3, #1
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	631a      	str	r2, [r3, #48]	; 0x30
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	895b      	ldrh	r3, [r3, #10]
 800ccb2:	461a      	mov	r2, r3
 800ccb4:	693b      	ldr	r3, [r7, #16]
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	d3e6      	bcc.n	800cc88 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	1ad2      	subs	r2, r2, r3
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	697a      	ldr	r2, [r7, #20]
 800ccca:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800cccc:	6979      	ldr	r1, [r7, #20]
 800ccce:	68f8      	ldr	r0, [r7, #12]
 800ccd0:	f7ff fbf2 	bl	800c4b8 <clust2sect>
 800ccd4:	4602      	mov	r2, r0
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	68ba      	ldr	r2, [r7, #8]
 800ccde:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccec:	441a      	add	r2, r3
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ccf2:	2300      	movs	r3, #0
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3718      	adds	r7, #24
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}

0800ccfc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b086      	sub	sp, #24
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
 800cd04:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800cd0c:	2100      	movs	r1, #0
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f7ff feb4 	bl	800ca7c <dir_sdi>
 800cd14:	4603      	mov	r3, r0
 800cd16:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cd18:	7dfb      	ldrb	r3, [r7, #23]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d12b      	bne.n	800cd76 <dir_alloc+0x7a>
		n = 0;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	69db      	ldr	r3, [r3, #28]
 800cd26:	4619      	mov	r1, r3
 800cd28:	68f8      	ldr	r0, [r7, #12]
 800cd2a:	f7ff fb29 	bl	800c380 <move_window>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cd32:	7dfb      	ldrb	r3, [r7, #23]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d11d      	bne.n	800cd74 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6a1b      	ldr	r3, [r3, #32]
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	2be5      	cmp	r3, #229	; 0xe5
 800cd40:	d004      	beq.n	800cd4c <dir_alloc+0x50>
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6a1b      	ldr	r3, [r3, #32]
 800cd46:	781b      	ldrb	r3, [r3, #0]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d107      	bne.n	800cd5c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	3301      	adds	r3, #1
 800cd50:	613b      	str	r3, [r7, #16]
 800cd52:	693a      	ldr	r2, [r7, #16]
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	429a      	cmp	r2, r3
 800cd58:	d102      	bne.n	800cd60 <dir_alloc+0x64>
 800cd5a:	e00c      	b.n	800cd76 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800cd60:	2101      	movs	r1, #1
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f7ff ff05 	bl	800cb72 <dir_next>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cd6c:	7dfb      	ldrb	r3, [r7, #23]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d0d7      	beq.n	800cd22 <dir_alloc+0x26>
 800cd72:	e000      	b.n	800cd76 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800cd74:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cd76:	7dfb      	ldrb	r3, [r7, #23]
 800cd78:	2b04      	cmp	r3, #4
 800cd7a:	d101      	bne.n	800cd80 <dir_alloc+0x84>
 800cd7c:	2307      	movs	r3, #7
 800cd7e:	75fb      	strb	r3, [r7, #23]
	return res;
 800cd80:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	3718      	adds	r7, #24
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}

0800cd8a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800cd8a:	b580      	push	{r7, lr}
 800cd8c:	b084      	sub	sp, #16
 800cd8e:	af00      	add	r7, sp, #0
 800cd90:	6078      	str	r0, [r7, #4]
 800cd92:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	331a      	adds	r3, #26
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f7ff f841 	bl	800be20 <ld_word>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	781b      	ldrb	r3, [r3, #0]
 800cda6:	2b03      	cmp	r3, #3
 800cda8:	d109      	bne.n	800cdbe <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	3314      	adds	r3, #20
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f7ff f836 	bl	800be20 <ld_word>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	041b      	lsls	r3, r3, #16
 800cdb8:	68fa      	ldr	r2, [r7, #12]
 800cdba:	4313      	orrs	r3, r2
 800cdbc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3710      	adds	r7, #16
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}

0800cdc8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b084      	sub	sp, #16
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	60f8      	str	r0, [r7, #12]
 800cdd0:	60b9      	str	r1, [r7, #8]
 800cdd2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	331a      	adds	r3, #26
 800cdd8:	687a      	ldr	r2, [r7, #4]
 800cdda:	b292      	uxth	r2, r2
 800cddc:	4611      	mov	r1, r2
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7ff f859 	bl	800be96 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	2b03      	cmp	r3, #3
 800cdea:	d109      	bne.n	800ce00 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	f103 0214 	add.w	r2, r3, #20
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	0c1b      	lsrs	r3, r3, #16
 800cdf6:	b29b      	uxth	r3, r3
 800cdf8:	4619      	mov	r1, r3
 800cdfa:	4610      	mov	r0, r2
 800cdfc:	f7ff f84b 	bl	800be96 <st_word>
	}
}
 800ce00:	bf00      	nop
 800ce02:	3710      	adds	r7, #16
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}

0800ce08 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ce08:	b590      	push	{r4, r7, lr}
 800ce0a:	b087      	sub	sp, #28
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
 800ce10:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	331a      	adds	r3, #26
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7ff f802 	bl	800be20 <ld_word>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d001      	beq.n	800ce26 <cmp_lfn+0x1e>
 800ce22:	2300      	movs	r3, #0
 800ce24:	e059      	b.n	800ceda <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	781b      	ldrb	r3, [r3, #0]
 800ce2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce2e:	1e5a      	subs	r2, r3, #1
 800ce30:	4613      	mov	r3, r2
 800ce32:	005b      	lsls	r3, r3, #1
 800ce34:	4413      	add	r3, r2
 800ce36:	009b      	lsls	r3, r3, #2
 800ce38:	4413      	add	r3, r2
 800ce3a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	81fb      	strh	r3, [r7, #14]
 800ce40:	2300      	movs	r3, #0
 800ce42:	613b      	str	r3, [r7, #16]
 800ce44:	e033      	b.n	800ceae <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ce46:	4a27      	ldr	r2, [pc, #156]	; (800cee4 <cmp_lfn+0xdc>)
 800ce48:	693b      	ldr	r3, [r7, #16]
 800ce4a:	4413      	add	r3, r2
 800ce4c:	781b      	ldrb	r3, [r3, #0]
 800ce4e:	461a      	mov	r2, r3
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	4413      	add	r3, r2
 800ce54:	4618      	mov	r0, r3
 800ce56:	f7fe ffe3 	bl	800be20 <ld_word>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ce5e:	89fb      	ldrh	r3, [r7, #14]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d01a      	beq.n	800ce9a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	2bfe      	cmp	r3, #254	; 0xfe
 800ce68:	d812      	bhi.n	800ce90 <cmp_lfn+0x88>
 800ce6a:	89bb      	ldrh	r3, [r7, #12]
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f001 ffcd 	bl	800ee0c <ff_wtoupper>
 800ce72:	4603      	mov	r3, r0
 800ce74:	461c      	mov	r4, r3
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	1c5a      	adds	r2, r3, #1
 800ce7a:	617a      	str	r2, [r7, #20]
 800ce7c:	005b      	lsls	r3, r3, #1
 800ce7e:	687a      	ldr	r2, [r7, #4]
 800ce80:	4413      	add	r3, r2
 800ce82:	881b      	ldrh	r3, [r3, #0]
 800ce84:	4618      	mov	r0, r3
 800ce86:	f001 ffc1 	bl	800ee0c <ff_wtoupper>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	429c      	cmp	r4, r3
 800ce8e:	d001      	beq.n	800ce94 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800ce90:	2300      	movs	r3, #0
 800ce92:	e022      	b.n	800ceda <cmp_lfn+0xd2>
			}
			wc = uc;
 800ce94:	89bb      	ldrh	r3, [r7, #12]
 800ce96:	81fb      	strh	r3, [r7, #14]
 800ce98:	e006      	b.n	800cea8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ce9a:	89bb      	ldrh	r3, [r7, #12]
 800ce9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cea0:	4293      	cmp	r3, r2
 800cea2:	d001      	beq.n	800cea8 <cmp_lfn+0xa0>
 800cea4:	2300      	movs	r3, #0
 800cea6:	e018      	b.n	800ceda <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cea8:	693b      	ldr	r3, [r7, #16]
 800ceaa:	3301      	adds	r3, #1
 800ceac:	613b      	str	r3, [r7, #16]
 800ceae:	693b      	ldr	r3, [r7, #16]
 800ceb0:	2b0c      	cmp	r3, #12
 800ceb2:	d9c8      	bls.n	800ce46 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	781b      	ldrb	r3, [r3, #0]
 800ceb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d00b      	beq.n	800ced8 <cmp_lfn+0xd0>
 800cec0:	89fb      	ldrh	r3, [r7, #14]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d008      	beq.n	800ced8 <cmp_lfn+0xd0>
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	005b      	lsls	r3, r3, #1
 800ceca:	687a      	ldr	r2, [r7, #4]
 800cecc:	4413      	add	r3, r2
 800cece:	881b      	ldrh	r3, [r3, #0]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d001      	beq.n	800ced8 <cmp_lfn+0xd0>
 800ced4:	2300      	movs	r3, #0
 800ced6:	e000      	b.n	800ceda <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800ced8:	2301      	movs	r3, #1
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	371c      	adds	r7, #28
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd90      	pop	{r4, r7, pc}
 800cee2:	bf00      	nop
 800cee4:	08011330 	.word	0x08011330

0800cee8 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b086      	sub	sp, #24
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
 800cef0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	331a      	adds	r3, #26
 800cef6:	4618      	mov	r0, r3
 800cef8:	f7fe ff92 	bl	800be20 <ld_word>
 800cefc:	4603      	mov	r3, r0
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d001      	beq.n	800cf06 <pick_lfn+0x1e>
 800cf02:	2300      	movs	r3, #0
 800cf04:	e04d      	b.n	800cfa2 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	781b      	ldrb	r3, [r3, #0]
 800cf0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf0e:	1e5a      	subs	r2, r3, #1
 800cf10:	4613      	mov	r3, r2
 800cf12:	005b      	lsls	r3, r3, #1
 800cf14:	4413      	add	r3, r2
 800cf16:	009b      	lsls	r3, r3, #2
 800cf18:	4413      	add	r3, r2
 800cf1a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	81fb      	strh	r3, [r7, #14]
 800cf20:	2300      	movs	r3, #0
 800cf22:	613b      	str	r3, [r7, #16]
 800cf24:	e028      	b.n	800cf78 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800cf26:	4a21      	ldr	r2, [pc, #132]	; (800cfac <pick_lfn+0xc4>)
 800cf28:	693b      	ldr	r3, [r7, #16]
 800cf2a:	4413      	add	r3, r2
 800cf2c:	781b      	ldrb	r3, [r3, #0]
 800cf2e:	461a      	mov	r2, r3
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	4413      	add	r3, r2
 800cf34:	4618      	mov	r0, r3
 800cf36:	f7fe ff73 	bl	800be20 <ld_word>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800cf3e:	89fb      	ldrh	r3, [r7, #14]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d00f      	beq.n	800cf64 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800cf44:	697b      	ldr	r3, [r7, #20]
 800cf46:	2bfe      	cmp	r3, #254	; 0xfe
 800cf48:	d901      	bls.n	800cf4e <pick_lfn+0x66>
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	e029      	b.n	800cfa2 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800cf4e:	89bb      	ldrh	r3, [r7, #12]
 800cf50:	81fb      	strh	r3, [r7, #14]
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	1c5a      	adds	r2, r3, #1
 800cf56:	617a      	str	r2, [r7, #20]
 800cf58:	005b      	lsls	r3, r3, #1
 800cf5a:	687a      	ldr	r2, [r7, #4]
 800cf5c:	4413      	add	r3, r2
 800cf5e:	89fa      	ldrh	r2, [r7, #14]
 800cf60:	801a      	strh	r2, [r3, #0]
 800cf62:	e006      	b.n	800cf72 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800cf64:	89bb      	ldrh	r3, [r7, #12]
 800cf66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf6a:	4293      	cmp	r3, r2
 800cf6c:	d001      	beq.n	800cf72 <pick_lfn+0x8a>
 800cf6e:	2300      	movs	r3, #0
 800cf70:	e017      	b.n	800cfa2 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cf72:	693b      	ldr	r3, [r7, #16]
 800cf74:	3301      	adds	r3, #1
 800cf76:	613b      	str	r3, [r7, #16]
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	2b0c      	cmp	r3, #12
 800cf7c:	d9d3      	bls.n	800cf26 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	781b      	ldrb	r3, [r3, #0]
 800cf82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d00a      	beq.n	800cfa0 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800cf8a:	697b      	ldr	r3, [r7, #20]
 800cf8c:	2bfe      	cmp	r3, #254	; 0xfe
 800cf8e:	d901      	bls.n	800cf94 <pick_lfn+0xac>
 800cf90:	2300      	movs	r3, #0
 800cf92:	e006      	b.n	800cfa2 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	005b      	lsls	r3, r3, #1
 800cf98:	687a      	ldr	r2, [r7, #4]
 800cf9a:	4413      	add	r3, r2
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800cfa0:	2301      	movs	r3, #1
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3718      	adds	r7, #24
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
 800cfaa:	bf00      	nop
 800cfac:	08011330 	.word	0x08011330

0800cfb0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b088      	sub	sp, #32
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	60f8      	str	r0, [r7, #12]
 800cfb8:	60b9      	str	r1, [r7, #8]
 800cfba:	4611      	mov	r1, r2
 800cfbc:	461a      	mov	r2, r3
 800cfbe:	460b      	mov	r3, r1
 800cfc0:	71fb      	strb	r3, [r7, #7]
 800cfc2:	4613      	mov	r3, r2
 800cfc4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800cfc6:	68bb      	ldr	r3, [r7, #8]
 800cfc8:	330d      	adds	r3, #13
 800cfca:	79ba      	ldrb	r2, [r7, #6]
 800cfcc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	330b      	adds	r3, #11
 800cfd2:	220f      	movs	r2, #15
 800cfd4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	330c      	adds	r3, #12
 800cfda:	2200      	movs	r2, #0
 800cfdc:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	331a      	adds	r3, #26
 800cfe2:	2100      	movs	r1, #0
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f7fe ff56 	bl	800be96 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800cfea:	79fb      	ldrb	r3, [r7, #7]
 800cfec:	1e5a      	subs	r2, r3, #1
 800cfee:	4613      	mov	r3, r2
 800cff0:	005b      	lsls	r3, r3, #1
 800cff2:	4413      	add	r3, r2
 800cff4:	009b      	lsls	r3, r3, #2
 800cff6:	4413      	add	r3, r2
 800cff8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800cffa:	2300      	movs	r3, #0
 800cffc:	82fb      	strh	r3, [r7, #22]
 800cffe:	2300      	movs	r3, #0
 800d000:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d002:	8afb      	ldrh	r3, [r7, #22]
 800d004:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d008:	4293      	cmp	r3, r2
 800d00a:	d007      	beq.n	800d01c <put_lfn+0x6c>
 800d00c:	69fb      	ldr	r3, [r7, #28]
 800d00e:	1c5a      	adds	r2, r3, #1
 800d010:	61fa      	str	r2, [r7, #28]
 800d012:	005b      	lsls	r3, r3, #1
 800d014:	68fa      	ldr	r2, [r7, #12]
 800d016:	4413      	add	r3, r2
 800d018:	881b      	ldrh	r3, [r3, #0]
 800d01a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d01c:	4a17      	ldr	r2, [pc, #92]	; (800d07c <put_lfn+0xcc>)
 800d01e:	69bb      	ldr	r3, [r7, #24]
 800d020:	4413      	add	r3, r2
 800d022:	781b      	ldrb	r3, [r3, #0]
 800d024:	461a      	mov	r2, r3
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	4413      	add	r3, r2
 800d02a:	8afa      	ldrh	r2, [r7, #22]
 800d02c:	4611      	mov	r1, r2
 800d02e:	4618      	mov	r0, r3
 800d030:	f7fe ff31 	bl	800be96 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d034:	8afb      	ldrh	r3, [r7, #22]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d102      	bne.n	800d040 <put_lfn+0x90>
 800d03a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d03e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d040:	69bb      	ldr	r3, [r7, #24]
 800d042:	3301      	adds	r3, #1
 800d044:	61bb      	str	r3, [r7, #24]
 800d046:	69bb      	ldr	r3, [r7, #24]
 800d048:	2b0c      	cmp	r3, #12
 800d04a:	d9da      	bls.n	800d002 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d04c:	8afb      	ldrh	r3, [r7, #22]
 800d04e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d052:	4293      	cmp	r3, r2
 800d054:	d006      	beq.n	800d064 <put_lfn+0xb4>
 800d056:	69fb      	ldr	r3, [r7, #28]
 800d058:	005b      	lsls	r3, r3, #1
 800d05a:	68fa      	ldr	r2, [r7, #12]
 800d05c:	4413      	add	r3, r2
 800d05e:	881b      	ldrh	r3, [r3, #0]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d103      	bne.n	800d06c <put_lfn+0xbc>
 800d064:	79fb      	ldrb	r3, [r7, #7]
 800d066:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d06a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	79fa      	ldrb	r2, [r7, #7]
 800d070:	701a      	strb	r2, [r3, #0]
}
 800d072:	bf00      	nop
 800d074:	3720      	adds	r7, #32
 800d076:	46bd      	mov	sp, r7
 800d078:	bd80      	pop	{r7, pc}
 800d07a:	bf00      	nop
 800d07c:	08011330 	.word	0x08011330

0800d080 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b08c      	sub	sp, #48	; 0x30
 800d084:	af00      	add	r7, sp, #0
 800d086:	60f8      	str	r0, [r7, #12]
 800d088:	60b9      	str	r1, [r7, #8]
 800d08a:	607a      	str	r2, [r7, #4]
 800d08c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d08e:	220b      	movs	r2, #11
 800d090:	68b9      	ldr	r1, [r7, #8]
 800d092:	68f8      	ldr	r0, [r7, #12]
 800d094:	f7fe ff46 	bl	800bf24 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	2b05      	cmp	r3, #5
 800d09c:	d929      	bls.n	800d0f2 <gen_numname+0x72>
		sr = seq;
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d0a2:	e020      	b.n	800d0e6 <gen_numname+0x66>
			wc = *lfn++;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	1c9a      	adds	r2, r3, #2
 800d0a8:	607a      	str	r2, [r7, #4]
 800d0aa:	881b      	ldrh	r3, [r3, #0]
 800d0ac:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800d0b2:	e015      	b.n	800d0e0 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800d0b4:	69fb      	ldr	r3, [r7, #28]
 800d0b6:	005a      	lsls	r2, r3, #1
 800d0b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d0ba:	f003 0301 	and.w	r3, r3, #1
 800d0be:	4413      	add	r3, r2
 800d0c0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d0c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d0c4:	085b      	lsrs	r3, r3, #1
 800d0c6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d0c8:	69fb      	ldr	r3, [r7, #28]
 800d0ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d003      	beq.n	800d0da <gen_numname+0x5a>
 800d0d2:	69fa      	ldr	r2, [r7, #28]
 800d0d4:	4b30      	ldr	r3, [pc, #192]	; (800d198 <gen_numname+0x118>)
 800d0d6:	4053      	eors	r3, r2
 800d0d8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0dc:	3301      	adds	r3, #1
 800d0de:	62bb      	str	r3, [r7, #40]	; 0x28
 800d0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e2:	2b0f      	cmp	r3, #15
 800d0e4:	d9e6      	bls.n	800d0b4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	881b      	ldrh	r3, [r3, #0]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d1da      	bne.n	800d0a4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d0ee:	69fb      	ldr	r3, [r7, #28]
 800d0f0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d0f2:	2307      	movs	r3, #7
 800d0f4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	b2db      	uxtb	r3, r3
 800d0fa:	f003 030f 	and.w	r3, r3, #15
 800d0fe:	b2db      	uxtb	r3, r3
 800d100:	3330      	adds	r3, #48	; 0x30
 800d102:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800d106:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d10a:	2b39      	cmp	r3, #57	; 0x39
 800d10c:	d904      	bls.n	800d118 <gen_numname+0x98>
 800d10e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d112:	3307      	adds	r3, #7
 800d114:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800d118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d11a:	1e5a      	subs	r2, r3, #1
 800d11c:	62ba      	str	r2, [r7, #40]	; 0x28
 800d11e:	3330      	adds	r3, #48	; 0x30
 800d120:	443b      	add	r3, r7
 800d122:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d126:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	091b      	lsrs	r3, r3, #4
 800d12e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d1df      	bne.n	800d0f6 <gen_numname+0x76>
	ns[i] = '~';
 800d136:	f107 0214 	add.w	r2, r7, #20
 800d13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d13c:	4413      	add	r3, r2
 800d13e:	227e      	movs	r2, #126	; 0x7e
 800d140:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d142:	2300      	movs	r3, #0
 800d144:	627b      	str	r3, [r7, #36]	; 0x24
 800d146:	e002      	b.n	800d14e <gen_numname+0xce>
 800d148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d14a:	3301      	adds	r3, #1
 800d14c:	627b      	str	r3, [r7, #36]	; 0x24
 800d14e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d152:	429a      	cmp	r2, r3
 800d154:	d205      	bcs.n	800d162 <gen_numname+0xe2>
 800d156:	68fa      	ldr	r2, [r7, #12]
 800d158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d15a:	4413      	add	r3, r2
 800d15c:	781b      	ldrb	r3, [r3, #0]
 800d15e:	2b20      	cmp	r3, #32
 800d160:	d1f2      	bne.n	800d148 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d164:	2b07      	cmp	r3, #7
 800d166:	d807      	bhi.n	800d178 <gen_numname+0xf8>
 800d168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d16a:	1c5a      	adds	r2, r3, #1
 800d16c:	62ba      	str	r2, [r7, #40]	; 0x28
 800d16e:	3330      	adds	r3, #48	; 0x30
 800d170:	443b      	add	r3, r7
 800d172:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d176:	e000      	b.n	800d17a <gen_numname+0xfa>
 800d178:	2120      	movs	r1, #32
 800d17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d17c:	1c5a      	adds	r2, r3, #1
 800d17e:	627a      	str	r2, [r7, #36]	; 0x24
 800d180:	68fa      	ldr	r2, [r7, #12]
 800d182:	4413      	add	r3, r2
 800d184:	460a      	mov	r2, r1
 800d186:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d18a:	2b07      	cmp	r3, #7
 800d18c:	d9e9      	bls.n	800d162 <gen_numname+0xe2>
}
 800d18e:	bf00      	nop
 800d190:	bf00      	nop
 800d192:	3730      	adds	r7, #48	; 0x30
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}
 800d198:	00011021 	.word	0x00011021

0800d19c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d19c:	b480      	push	{r7}
 800d19e:	b085      	sub	sp, #20
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d1a8:	230b      	movs	r3, #11
 800d1aa:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d1ac:	7bfb      	ldrb	r3, [r7, #15]
 800d1ae:	b2da      	uxtb	r2, r3
 800d1b0:	0852      	lsrs	r2, r2, #1
 800d1b2:	01db      	lsls	r3, r3, #7
 800d1b4:	4313      	orrs	r3, r2
 800d1b6:	b2da      	uxtb	r2, r3
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	1c59      	adds	r1, r3, #1
 800d1bc:	6079      	str	r1, [r7, #4]
 800d1be:	781b      	ldrb	r3, [r3, #0]
 800d1c0:	4413      	add	r3, r2
 800d1c2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	3b01      	subs	r3, #1
 800d1c8:	60bb      	str	r3, [r7, #8]
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d1ed      	bne.n	800d1ac <sum_sfn+0x10>
	return sum;
 800d1d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3714      	adds	r7, #20
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1dc:	4770      	bx	lr

0800d1de <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800d1de:	b580      	push	{r7, lr}
 800d1e0:	b086      	sub	sp, #24
 800d1e2:	af00      	add	r7, sp, #0
 800d1e4:	6078      	str	r0, [r7, #4]
 800d1e6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800d1e8:	2304      	movs	r3, #4
 800d1ea:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800d1f2:	23ff      	movs	r3, #255	; 0xff
 800d1f4:	757b      	strb	r3, [r7, #21]
 800d1f6:	23ff      	movs	r3, #255	; 0xff
 800d1f8:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800d1fa:	e081      	b.n	800d300 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	69db      	ldr	r3, [r3, #28]
 800d200:	4619      	mov	r1, r3
 800d202:	6938      	ldr	r0, [r7, #16]
 800d204:	f7ff f8bc 	bl	800c380 <move_window>
 800d208:	4603      	mov	r3, r0
 800d20a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d20c:	7dfb      	ldrb	r3, [r7, #23]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d17c      	bne.n	800d30c <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6a1b      	ldr	r3, [r3, #32]
 800d216:	781b      	ldrb	r3, [r3, #0]
 800d218:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800d21a:	7dbb      	ldrb	r3, [r7, #22]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d102      	bne.n	800d226 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800d220:	2304      	movs	r3, #4
 800d222:	75fb      	strb	r3, [r7, #23]
 800d224:	e077      	b.n	800d316 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6a1b      	ldr	r3, [r3, #32]
 800d22a:	330b      	adds	r3, #11
 800d22c:	781b      	ldrb	r3, [r3, #0]
 800d22e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d232:	73fb      	strb	r3, [r7, #15]
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	7bfa      	ldrb	r2, [r7, #15]
 800d238:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800d23a:	7dbb      	ldrb	r3, [r7, #22]
 800d23c:	2be5      	cmp	r3, #229	; 0xe5
 800d23e:	d00e      	beq.n	800d25e <dir_read+0x80>
 800d240:	7dbb      	ldrb	r3, [r7, #22]
 800d242:	2b2e      	cmp	r3, #46	; 0x2e
 800d244:	d00b      	beq.n	800d25e <dir_read+0x80>
 800d246:	7bfb      	ldrb	r3, [r7, #15]
 800d248:	f023 0320 	bic.w	r3, r3, #32
 800d24c:	2b08      	cmp	r3, #8
 800d24e:	bf0c      	ite	eq
 800d250:	2301      	moveq	r3, #1
 800d252:	2300      	movne	r3, #0
 800d254:	b2db      	uxtb	r3, r3
 800d256:	461a      	mov	r2, r3
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	4293      	cmp	r3, r2
 800d25c:	d002      	beq.n	800d264 <dir_read+0x86>
				ord = 0xFF;
 800d25e:	23ff      	movs	r3, #255	; 0xff
 800d260:	757b      	strb	r3, [r7, #21]
 800d262:	e044      	b.n	800d2ee <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800d264:	7bfb      	ldrb	r3, [r7, #15]
 800d266:	2b0f      	cmp	r3, #15
 800d268:	d12f      	bne.n	800d2ca <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800d26a:	7dbb      	ldrb	r3, [r7, #22]
 800d26c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d270:	2b00      	cmp	r3, #0
 800d272:	d00d      	beq.n	800d290 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6a1b      	ldr	r3, [r3, #32]
 800d278:	7b5b      	ldrb	r3, [r3, #13]
 800d27a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800d27c:	7dbb      	ldrb	r3, [r7, #22]
 800d27e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d282:	75bb      	strb	r3, [r7, #22]
 800d284:	7dbb      	ldrb	r3, [r7, #22]
 800d286:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	695a      	ldr	r2, [r3, #20]
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d290:	7dba      	ldrb	r2, [r7, #22]
 800d292:	7d7b      	ldrb	r3, [r7, #21]
 800d294:	429a      	cmp	r2, r3
 800d296:	d115      	bne.n	800d2c4 <dir_read+0xe6>
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6a1b      	ldr	r3, [r3, #32]
 800d29c:	330d      	adds	r3, #13
 800d29e:	781b      	ldrb	r3, [r3, #0]
 800d2a0:	7d3a      	ldrb	r2, [r7, #20]
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d10e      	bne.n	800d2c4 <dir_read+0xe6>
 800d2a6:	693b      	ldr	r3, [r7, #16]
 800d2a8:	68da      	ldr	r2, [r3, #12]
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6a1b      	ldr	r3, [r3, #32]
 800d2ae:	4619      	mov	r1, r3
 800d2b0:	4610      	mov	r0, r2
 800d2b2:	f7ff fe19 	bl	800cee8 <pick_lfn>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d003      	beq.n	800d2c4 <dir_read+0xe6>
 800d2bc:	7d7b      	ldrb	r3, [r7, #21]
 800d2be:	3b01      	subs	r3, #1
 800d2c0:	b2db      	uxtb	r3, r3
 800d2c2:	e000      	b.n	800d2c6 <dir_read+0xe8>
 800d2c4:	23ff      	movs	r3, #255	; 0xff
 800d2c6:	757b      	strb	r3, [r7, #21]
 800d2c8:	e011      	b.n	800d2ee <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800d2ca:	7d7b      	ldrb	r3, [r7, #21]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d109      	bne.n	800d2e4 <dir_read+0x106>
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6a1b      	ldr	r3, [r3, #32]
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	f7ff ff61 	bl	800d19c <sum_sfn>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	461a      	mov	r2, r3
 800d2de:	7d3b      	ldrb	r3, [r7, #20]
 800d2e0:	4293      	cmp	r3, r2
 800d2e2:	d015      	beq.n	800d310 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d2ea:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800d2ec:	e010      	b.n	800d310 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800d2ee:	2100      	movs	r1, #0
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	f7ff fc3e 	bl	800cb72 <dir_next>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d2fa:	7dfb      	ldrb	r3, [r7, #23]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d109      	bne.n	800d314 <dir_read+0x136>
	while (dp->sect) {
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	69db      	ldr	r3, [r3, #28]
 800d304:	2b00      	cmp	r3, #0
 800d306:	f47f af79 	bne.w	800d1fc <dir_read+0x1e>
 800d30a:	e004      	b.n	800d316 <dir_read+0x138>
		if (res != FR_OK) break;
 800d30c:	bf00      	nop
 800d30e:	e002      	b.n	800d316 <dir_read+0x138>
					break;
 800d310:	bf00      	nop
 800d312:	e000      	b.n	800d316 <dir_read+0x138>
		if (res != FR_OK) break;
 800d314:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d316:	7dfb      	ldrb	r3, [r7, #23]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d002      	beq.n	800d322 <dir_read+0x144>
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2200      	movs	r2, #0
 800d320:	61da      	str	r2, [r3, #28]
	return res;
 800d322:	7dfb      	ldrb	r3, [r7, #23]
}
 800d324:	4618      	mov	r0, r3
 800d326:	3718      	adds	r7, #24
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b086      	sub	sp, #24
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d33a:	2100      	movs	r1, #0
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f7ff fb9d 	bl	800ca7c <dir_sdi>
 800d342:	4603      	mov	r3, r0
 800d344:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d346:	7dfb      	ldrb	r3, [r7, #23]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d001      	beq.n	800d350 <dir_find+0x24>
 800d34c:	7dfb      	ldrb	r3, [r7, #23]
 800d34e:	e0a9      	b.n	800d4a4 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d350:	23ff      	movs	r3, #255	; 0xff
 800d352:	753b      	strb	r3, [r7, #20]
 800d354:	7d3b      	ldrb	r3, [r7, #20]
 800d356:	757b      	strb	r3, [r7, #21]
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d35e:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	69db      	ldr	r3, [r3, #28]
 800d364:	4619      	mov	r1, r3
 800d366:	6938      	ldr	r0, [r7, #16]
 800d368:	f7ff f80a 	bl	800c380 <move_window>
 800d36c:	4603      	mov	r3, r0
 800d36e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d370:	7dfb      	ldrb	r3, [r7, #23]
 800d372:	2b00      	cmp	r3, #0
 800d374:	f040 8090 	bne.w	800d498 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	6a1b      	ldr	r3, [r3, #32]
 800d37c:	781b      	ldrb	r3, [r3, #0]
 800d37e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d380:	7dbb      	ldrb	r3, [r7, #22]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d102      	bne.n	800d38c <dir_find+0x60>
 800d386:	2304      	movs	r3, #4
 800d388:	75fb      	strb	r3, [r7, #23]
 800d38a:	e08a      	b.n	800d4a2 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6a1b      	ldr	r3, [r3, #32]
 800d390:	330b      	adds	r3, #11
 800d392:	781b      	ldrb	r3, [r3, #0]
 800d394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d398:	73fb      	strb	r3, [r7, #15]
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	7bfa      	ldrb	r2, [r7, #15]
 800d39e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d3a0:	7dbb      	ldrb	r3, [r7, #22]
 800d3a2:	2be5      	cmp	r3, #229	; 0xe5
 800d3a4:	d007      	beq.n	800d3b6 <dir_find+0x8a>
 800d3a6:	7bfb      	ldrb	r3, [r7, #15]
 800d3a8:	f003 0308 	and.w	r3, r3, #8
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d009      	beq.n	800d3c4 <dir_find+0x98>
 800d3b0:	7bfb      	ldrb	r3, [r7, #15]
 800d3b2:	2b0f      	cmp	r3, #15
 800d3b4:	d006      	beq.n	800d3c4 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d3b6:	23ff      	movs	r3, #255	; 0xff
 800d3b8:	757b      	strb	r3, [r7, #21]
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d3c0:	631a      	str	r2, [r3, #48]	; 0x30
 800d3c2:	e05e      	b.n	800d482 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d3c4:	7bfb      	ldrb	r3, [r7, #15]
 800d3c6:	2b0f      	cmp	r3, #15
 800d3c8:	d136      	bne.n	800d438 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d3d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d154      	bne.n	800d482 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d3d8:	7dbb      	ldrb	r3, [r7, #22]
 800d3da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d00d      	beq.n	800d3fe <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6a1b      	ldr	r3, [r3, #32]
 800d3e6:	7b5b      	ldrb	r3, [r3, #13]
 800d3e8:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d3ea:	7dbb      	ldrb	r3, [r7, #22]
 800d3ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d3f0:	75bb      	strb	r3, [r7, #22]
 800d3f2:	7dbb      	ldrb	r3, [r7, #22]
 800d3f4:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	695a      	ldr	r2, [r3, #20]
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d3fe:	7dba      	ldrb	r2, [r7, #22]
 800d400:	7d7b      	ldrb	r3, [r7, #21]
 800d402:	429a      	cmp	r2, r3
 800d404:	d115      	bne.n	800d432 <dir_find+0x106>
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6a1b      	ldr	r3, [r3, #32]
 800d40a:	330d      	adds	r3, #13
 800d40c:	781b      	ldrb	r3, [r3, #0]
 800d40e:	7d3a      	ldrb	r2, [r7, #20]
 800d410:	429a      	cmp	r2, r3
 800d412:	d10e      	bne.n	800d432 <dir_find+0x106>
 800d414:	693b      	ldr	r3, [r7, #16]
 800d416:	68da      	ldr	r2, [r3, #12]
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6a1b      	ldr	r3, [r3, #32]
 800d41c:	4619      	mov	r1, r3
 800d41e:	4610      	mov	r0, r2
 800d420:	f7ff fcf2 	bl	800ce08 <cmp_lfn>
 800d424:	4603      	mov	r3, r0
 800d426:	2b00      	cmp	r3, #0
 800d428:	d003      	beq.n	800d432 <dir_find+0x106>
 800d42a:	7d7b      	ldrb	r3, [r7, #21]
 800d42c:	3b01      	subs	r3, #1
 800d42e:	b2db      	uxtb	r3, r3
 800d430:	e000      	b.n	800d434 <dir_find+0x108>
 800d432:	23ff      	movs	r3, #255	; 0xff
 800d434:	757b      	strb	r3, [r7, #21]
 800d436:	e024      	b.n	800d482 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d438:	7d7b      	ldrb	r3, [r7, #21]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d109      	bne.n	800d452 <dir_find+0x126>
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6a1b      	ldr	r3, [r3, #32]
 800d442:	4618      	mov	r0, r3
 800d444:	f7ff feaa 	bl	800d19c <sum_sfn>
 800d448:	4603      	mov	r3, r0
 800d44a:	461a      	mov	r2, r3
 800d44c:	7d3b      	ldrb	r3, [r7, #20]
 800d44e:	4293      	cmp	r3, r2
 800d450:	d024      	beq.n	800d49c <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d458:	f003 0301 	and.w	r3, r3, #1
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d10a      	bne.n	800d476 <dir_find+0x14a>
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6a18      	ldr	r0, [r3, #32]
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	3324      	adds	r3, #36	; 0x24
 800d468:	220b      	movs	r2, #11
 800d46a:	4619      	mov	r1, r3
 800d46c:	f7fe fd96 	bl	800bf9c <mem_cmp>
 800d470:	4603      	mov	r3, r0
 800d472:	2b00      	cmp	r3, #0
 800d474:	d014      	beq.n	800d4a0 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d476:	23ff      	movs	r3, #255	; 0xff
 800d478:	757b      	strb	r3, [r7, #21]
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d480:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d482:	2100      	movs	r1, #0
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f7ff fb74 	bl	800cb72 <dir_next>
 800d48a:	4603      	mov	r3, r0
 800d48c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d48e:	7dfb      	ldrb	r3, [r7, #23]
 800d490:	2b00      	cmp	r3, #0
 800d492:	f43f af65 	beq.w	800d360 <dir_find+0x34>
 800d496:	e004      	b.n	800d4a2 <dir_find+0x176>
		if (res != FR_OK) break;
 800d498:	bf00      	nop
 800d49a:	e002      	b.n	800d4a2 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d49c:	bf00      	nop
 800d49e:	e000      	b.n	800d4a2 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d4a0:	bf00      	nop

	return res;
 800d4a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	3718      	adds	r7, #24
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}

0800d4ac <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b08c      	sub	sp, #48	; 0x30
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d4c0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d001      	beq.n	800d4cc <dir_register+0x20>
 800d4c8:	2306      	movs	r3, #6
 800d4ca:	e0e0      	b.n	800d68e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	627b      	str	r3, [r7, #36]	; 0x24
 800d4d0:	e002      	b.n	800d4d8 <dir_register+0x2c>
 800d4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d4:	3301      	adds	r3, #1
 800d4d6:	627b      	str	r3, [r7, #36]	; 0x24
 800d4d8:	69fb      	ldr	r3, [r7, #28]
 800d4da:	68da      	ldr	r2, [r3, #12]
 800d4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4de:	005b      	lsls	r3, r3, #1
 800d4e0:	4413      	add	r3, r2
 800d4e2:	881b      	ldrh	r3, [r3, #0]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d1f4      	bne.n	800d4d2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800d4ee:	f107 030c 	add.w	r3, r7, #12
 800d4f2:	220c      	movs	r2, #12
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f7fe fd15 	bl	800bf24 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d4fa:	7dfb      	ldrb	r3, [r7, #23]
 800d4fc:	f003 0301 	and.w	r3, r3, #1
 800d500:	2b00      	cmp	r3, #0
 800d502:	d032      	beq.n	800d56a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2240      	movs	r2, #64	; 0x40
 800d508:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800d50c:	2301      	movs	r3, #1
 800d50e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d510:	e016      	b.n	800d540 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800d518:	69fb      	ldr	r3, [r7, #28]
 800d51a:	68da      	ldr	r2, [r3, #12]
 800d51c:	f107 010c 	add.w	r1, r7, #12
 800d520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d522:	f7ff fdad 	bl	800d080 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f7ff ff00 	bl	800d32c <dir_find>
 800d52c:	4603      	mov	r3, r0
 800d52e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800d532:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d536:	2b00      	cmp	r3, #0
 800d538:	d106      	bne.n	800d548 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800d53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d53c:	3301      	adds	r3, #1
 800d53e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d542:	2b63      	cmp	r3, #99	; 0x63
 800d544:	d9e5      	bls.n	800d512 <dir_register+0x66>
 800d546:	e000      	b.n	800d54a <dir_register+0x9e>
			if (res != FR_OK) break;
 800d548:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d54c:	2b64      	cmp	r3, #100	; 0x64
 800d54e:	d101      	bne.n	800d554 <dir_register+0xa8>
 800d550:	2307      	movs	r3, #7
 800d552:	e09c      	b.n	800d68e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d554:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d558:	2b04      	cmp	r3, #4
 800d55a:	d002      	beq.n	800d562 <dir_register+0xb6>
 800d55c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d560:	e095      	b.n	800d68e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d562:	7dfa      	ldrb	r2, [r7, #23]
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d56a:	7dfb      	ldrb	r3, [r7, #23]
 800d56c:	f003 0302 	and.w	r3, r3, #2
 800d570:	2b00      	cmp	r3, #0
 800d572:	d007      	beq.n	800d584 <dir_register+0xd8>
 800d574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d576:	330c      	adds	r3, #12
 800d578:	4a47      	ldr	r2, [pc, #284]	; (800d698 <dir_register+0x1ec>)
 800d57a:	fba2 2303 	umull	r2, r3, r2, r3
 800d57e:	089b      	lsrs	r3, r3, #2
 800d580:	3301      	adds	r3, #1
 800d582:	e000      	b.n	800d586 <dir_register+0xda>
 800d584:	2301      	movs	r3, #1
 800d586:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d588:	6a39      	ldr	r1, [r7, #32]
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f7ff fbb6 	bl	800ccfc <dir_alloc>
 800d590:	4603      	mov	r3, r0
 800d592:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d148      	bne.n	800d630 <dir_register+0x184>
 800d59e:	6a3b      	ldr	r3, [r7, #32]
 800d5a0:	3b01      	subs	r3, #1
 800d5a2:	623b      	str	r3, [r7, #32]
 800d5a4:	6a3b      	ldr	r3, [r7, #32]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d042      	beq.n	800d630 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	695a      	ldr	r2, [r3, #20]
 800d5ae:	6a3b      	ldr	r3, [r7, #32]
 800d5b0:	015b      	lsls	r3, r3, #5
 800d5b2:	1ad3      	subs	r3, r2, r3
 800d5b4:	4619      	mov	r1, r3
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f7ff fa60 	bl	800ca7c <dir_sdi>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d5c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d132      	bne.n	800d630 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	3324      	adds	r3, #36	; 0x24
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f7ff fde4 	bl	800d19c <sum_sfn>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	69db      	ldr	r3, [r3, #28]
 800d5dc:	4619      	mov	r1, r3
 800d5de:	69f8      	ldr	r0, [r7, #28]
 800d5e0:	f7fe fece 	bl	800c380 <move_window>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800d5ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d11d      	bne.n	800d62e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d5f2:	69fb      	ldr	r3, [r7, #28]
 800d5f4:	68d8      	ldr	r0, [r3, #12]
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6a19      	ldr	r1, [r3, #32]
 800d5fa:	6a3b      	ldr	r3, [r7, #32]
 800d5fc:	b2da      	uxtb	r2, r3
 800d5fe:	7efb      	ldrb	r3, [r7, #27]
 800d600:	f7ff fcd6 	bl	800cfb0 <put_lfn>
				fs->wflag = 1;
 800d604:	69fb      	ldr	r3, [r7, #28]
 800d606:	2201      	movs	r2, #1
 800d608:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d60a:	2100      	movs	r1, #0
 800d60c:	6878      	ldr	r0, [r7, #4]
 800d60e:	f7ff fab0 	bl	800cb72 <dir_next>
 800d612:	4603      	mov	r3, r0
 800d614:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800d618:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d107      	bne.n	800d630 <dir_register+0x184>
 800d620:	6a3b      	ldr	r3, [r7, #32]
 800d622:	3b01      	subs	r3, #1
 800d624:	623b      	str	r3, [r7, #32]
 800d626:	6a3b      	ldr	r3, [r7, #32]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d1d5      	bne.n	800d5d8 <dir_register+0x12c>
 800d62c:	e000      	b.n	800d630 <dir_register+0x184>
				if (res != FR_OK) break;
 800d62e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d630:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d634:	2b00      	cmp	r3, #0
 800d636:	d128      	bne.n	800d68a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	69db      	ldr	r3, [r3, #28]
 800d63c:	4619      	mov	r1, r3
 800d63e:	69f8      	ldr	r0, [r7, #28]
 800d640:	f7fe fe9e 	bl	800c380 <move_window>
 800d644:	4603      	mov	r3, r0
 800d646:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d64a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d11b      	bne.n	800d68a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6a1b      	ldr	r3, [r3, #32]
 800d656:	2220      	movs	r2, #32
 800d658:	2100      	movs	r1, #0
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7fe fc83 	bl	800bf66 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6a18      	ldr	r0, [r3, #32]
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	3324      	adds	r3, #36	; 0x24
 800d668:	220b      	movs	r2, #11
 800d66a:	4619      	mov	r1, r3
 800d66c:	f7fe fc5a 	bl	800bf24 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6a1b      	ldr	r3, [r3, #32]
 800d67a:	330c      	adds	r3, #12
 800d67c:	f002 0218 	and.w	r2, r2, #24
 800d680:	b2d2      	uxtb	r2, r2
 800d682:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d684:	69fb      	ldr	r3, [r7, #28]
 800d686:	2201      	movs	r2, #1
 800d688:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d68a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3730      	adds	r7, #48	; 0x30
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}
 800d696:	bf00      	nop
 800d698:	4ec4ec4f 	.word	0x4ec4ec4f

0800d69c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b088      	sub	sp, #32
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	69db      	ldr	r3, [r3, #28]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	f000 80c9 	beq.w	800d84e <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d6c4:	d032      	beq.n	800d72c <get_fileinfo+0x90>
			i = j = 0;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	61bb      	str	r3, [r7, #24]
 800d6ca:	69bb      	ldr	r3, [r7, #24]
 800d6cc:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d6ce:	e01b      	b.n	800d708 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800d6d0:	89fb      	ldrh	r3, [r7, #14]
 800d6d2:	2100      	movs	r1, #0
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f001 fb5d 	bl	800ed94 <ff_convert>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800d6de:	89fb      	ldrh	r3, [r7, #14]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d102      	bne.n	800d6ea <get_fileinfo+0x4e>
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	61fb      	str	r3, [r7, #28]
 800d6e8:	e01a      	b.n	800d720 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800d6ea:	69fb      	ldr	r3, [r7, #28]
 800d6ec:	2bfe      	cmp	r3, #254	; 0xfe
 800d6ee:	d902      	bls.n	800d6f6 <get_fileinfo+0x5a>
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	61fb      	str	r3, [r7, #28]
 800d6f4:	e014      	b.n	800d720 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800d6f6:	69fb      	ldr	r3, [r7, #28]
 800d6f8:	1c5a      	adds	r2, r3, #1
 800d6fa:	61fa      	str	r2, [r7, #28]
 800d6fc:	89fa      	ldrh	r2, [r7, #14]
 800d6fe:	b2d1      	uxtb	r1, r2
 800d700:	683a      	ldr	r2, [r7, #0]
 800d702:	4413      	add	r3, r2
 800d704:	460a      	mov	r2, r1
 800d706:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	68da      	ldr	r2, [r3, #12]
 800d70c:	69bb      	ldr	r3, [r7, #24]
 800d70e:	1c59      	adds	r1, r3, #1
 800d710:	61b9      	str	r1, [r7, #24]
 800d712:	005b      	lsls	r3, r3, #1
 800d714:	4413      	add	r3, r2
 800d716:	881b      	ldrh	r3, [r3, #0]
 800d718:	81fb      	strh	r3, [r7, #14]
 800d71a:	89fb      	ldrh	r3, [r7, #14]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d1d7      	bne.n	800d6d0 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800d720:	683a      	ldr	r2, [r7, #0]
 800d722:	69fb      	ldr	r3, [r7, #28]
 800d724:	4413      	add	r3, r2
 800d726:	3316      	adds	r3, #22
 800d728:	2200      	movs	r2, #0
 800d72a:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800d72c:	2300      	movs	r3, #0
 800d72e:	61bb      	str	r3, [r7, #24]
 800d730:	69bb      	ldr	r3, [r7, #24]
 800d732:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800d734:	683a      	ldr	r2, [r7, #0]
 800d736:	69fb      	ldr	r3, [r7, #28]
 800d738:	4413      	add	r3, r2
 800d73a:	3316      	adds	r3, #22
 800d73c:	781b      	ldrb	r3, [r3, #0]
 800d73e:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800d740:	e04c      	b.n	800d7dc <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6a1a      	ldr	r2, [r3, #32]
 800d746:	69fb      	ldr	r3, [r7, #28]
 800d748:	1c59      	adds	r1, r3, #1
 800d74a:	61f9      	str	r1, [r7, #28]
 800d74c:	4413      	add	r3, r2
 800d74e:	781b      	ldrb	r3, [r3, #0]
 800d750:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800d752:	7dfb      	ldrb	r3, [r7, #23]
 800d754:	2b20      	cmp	r3, #32
 800d756:	d100      	bne.n	800d75a <get_fileinfo+0xbe>
 800d758:	e040      	b.n	800d7dc <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800d75a:	7dfb      	ldrb	r3, [r7, #23]
 800d75c:	2b05      	cmp	r3, #5
 800d75e:	d101      	bne.n	800d764 <get_fileinfo+0xc8>
 800d760:	23e5      	movs	r3, #229	; 0xe5
 800d762:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800d764:	69fb      	ldr	r3, [r7, #28]
 800d766:	2b09      	cmp	r3, #9
 800d768:	d10f      	bne.n	800d78a <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800d76a:	89bb      	ldrh	r3, [r7, #12]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d105      	bne.n	800d77c <get_fileinfo+0xe0>
 800d770:	683a      	ldr	r2, [r7, #0]
 800d772:	69bb      	ldr	r3, [r7, #24]
 800d774:	4413      	add	r3, r2
 800d776:	3316      	adds	r3, #22
 800d778:	222e      	movs	r2, #46	; 0x2e
 800d77a:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800d77c:	69bb      	ldr	r3, [r7, #24]
 800d77e:	1c5a      	adds	r2, r3, #1
 800d780:	61ba      	str	r2, [r7, #24]
 800d782:	683a      	ldr	r2, [r7, #0]
 800d784:	4413      	add	r3, r2
 800d786:	222e      	movs	r2, #46	; 0x2e
 800d788:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800d78a:	683a      	ldr	r2, [r7, #0]
 800d78c:	69bb      	ldr	r3, [r7, #24]
 800d78e:	4413      	add	r3, r2
 800d790:	3309      	adds	r3, #9
 800d792:	7dfa      	ldrb	r2, [r7, #23]
 800d794:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800d796:	89bb      	ldrh	r3, [r7, #12]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d11c      	bne.n	800d7d6 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800d79c:	7dfb      	ldrb	r3, [r7, #23]
 800d79e:	2b40      	cmp	r3, #64	; 0x40
 800d7a0:	d913      	bls.n	800d7ca <get_fileinfo+0x12e>
 800d7a2:	7dfb      	ldrb	r3, [r7, #23]
 800d7a4:	2b5a      	cmp	r3, #90	; 0x5a
 800d7a6:	d810      	bhi.n	800d7ca <get_fileinfo+0x12e>
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	6a1b      	ldr	r3, [r3, #32]
 800d7ac:	330c      	adds	r3, #12
 800d7ae:	781b      	ldrb	r3, [r3, #0]
 800d7b0:	461a      	mov	r2, r3
 800d7b2:	69fb      	ldr	r3, [r7, #28]
 800d7b4:	2b08      	cmp	r3, #8
 800d7b6:	d901      	bls.n	800d7bc <get_fileinfo+0x120>
 800d7b8:	2310      	movs	r3, #16
 800d7ba:	e000      	b.n	800d7be <get_fileinfo+0x122>
 800d7bc:	2308      	movs	r3, #8
 800d7be:	4013      	ands	r3, r2
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d002      	beq.n	800d7ca <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800d7c4:	7dfb      	ldrb	r3, [r7, #23]
 800d7c6:	3320      	adds	r3, #32
 800d7c8:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800d7ca:	683a      	ldr	r2, [r7, #0]
 800d7cc:	69bb      	ldr	r3, [r7, #24]
 800d7ce:	4413      	add	r3, r2
 800d7d0:	3316      	adds	r3, #22
 800d7d2:	7dfa      	ldrb	r2, [r7, #23]
 800d7d4:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800d7d6:	69bb      	ldr	r3, [r7, #24]
 800d7d8:	3301      	adds	r3, #1
 800d7da:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800d7dc:	69fb      	ldr	r3, [r7, #28]
 800d7de:	2b0a      	cmp	r3, #10
 800d7e0:	d9af      	bls.n	800d742 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800d7e2:	89bb      	ldrh	r3, [r7, #12]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d10d      	bne.n	800d804 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800d7e8:	683a      	ldr	r2, [r7, #0]
 800d7ea:	69bb      	ldr	r3, [r7, #24]
 800d7ec:	4413      	add	r3, r2
 800d7ee:	3316      	adds	r3, #22
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	6a1b      	ldr	r3, [r3, #32]
 800d7f8:	330c      	adds	r3, #12
 800d7fa:	781b      	ldrb	r3, [r3, #0]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d101      	bne.n	800d804 <get_fileinfo+0x168>
 800d800:	2300      	movs	r3, #0
 800d802:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800d804:	683a      	ldr	r2, [r7, #0]
 800d806:	69bb      	ldr	r3, [r7, #24]
 800d808:	4413      	add	r3, r2
 800d80a:	3309      	adds	r3, #9
 800d80c:	2200      	movs	r2, #0
 800d80e:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6a1b      	ldr	r3, [r3, #32]
 800d814:	7ada      	ldrb	r2, [r3, #11]
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	6a1b      	ldr	r3, [r3, #32]
 800d81e:	331c      	adds	r3, #28
 800d820:	4618      	mov	r0, r3
 800d822:	f7fe fb15 	bl	800be50 <ld_dword>
 800d826:	4602      	mov	r2, r0
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	6a1b      	ldr	r3, [r3, #32]
 800d830:	3316      	adds	r3, #22
 800d832:	4618      	mov	r0, r3
 800d834:	f7fe fb0c 	bl	800be50 <ld_dword>
 800d838:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	b29a      	uxth	r2, r3
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	80da      	strh	r2, [r3, #6]
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	0c1b      	lsrs	r3, r3, #16
 800d846:	b29a      	uxth	r2, r3
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	809a      	strh	r2, [r3, #4]
 800d84c:	e000      	b.n	800d850 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d84e:	bf00      	nop
}
 800d850:	3720      	adds	r7, #32
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}
	...

0800d858 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b08a      	sub	sp, #40	; 0x28
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	613b      	str	r3, [r7, #16]
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	68db      	ldr	r3, [r3, #12]
 800d86e:	60fb      	str	r3, [r7, #12]
 800d870:	2300      	movs	r3, #0
 800d872:	617b      	str	r3, [r7, #20]
 800d874:	697b      	ldr	r3, [r7, #20]
 800d876:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d878:	69bb      	ldr	r3, [r7, #24]
 800d87a:	1c5a      	adds	r2, r3, #1
 800d87c:	61ba      	str	r2, [r7, #24]
 800d87e:	693a      	ldr	r2, [r7, #16]
 800d880:	4413      	add	r3, r2
 800d882:	781b      	ldrb	r3, [r3, #0]
 800d884:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d886:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d888:	2b1f      	cmp	r3, #31
 800d88a:	d940      	bls.n	800d90e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d88c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d88e:	2b2f      	cmp	r3, #47	; 0x2f
 800d890:	d006      	beq.n	800d8a0 <create_name+0x48>
 800d892:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d894:	2b5c      	cmp	r3, #92	; 0x5c
 800d896:	d110      	bne.n	800d8ba <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d898:	e002      	b.n	800d8a0 <create_name+0x48>
 800d89a:	69bb      	ldr	r3, [r7, #24]
 800d89c:	3301      	adds	r3, #1
 800d89e:	61bb      	str	r3, [r7, #24]
 800d8a0:	693a      	ldr	r2, [r7, #16]
 800d8a2:	69bb      	ldr	r3, [r7, #24]
 800d8a4:	4413      	add	r3, r2
 800d8a6:	781b      	ldrb	r3, [r3, #0]
 800d8a8:	2b2f      	cmp	r3, #47	; 0x2f
 800d8aa:	d0f6      	beq.n	800d89a <create_name+0x42>
 800d8ac:	693a      	ldr	r2, [r7, #16]
 800d8ae:	69bb      	ldr	r3, [r7, #24]
 800d8b0:	4413      	add	r3, r2
 800d8b2:	781b      	ldrb	r3, [r3, #0]
 800d8b4:	2b5c      	cmp	r3, #92	; 0x5c
 800d8b6:	d0f0      	beq.n	800d89a <create_name+0x42>
			break;
 800d8b8:	e02a      	b.n	800d910 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	2bfe      	cmp	r3, #254	; 0xfe
 800d8be:	d901      	bls.n	800d8c4 <create_name+0x6c>
 800d8c0:	2306      	movs	r3, #6
 800d8c2:	e17d      	b.n	800dbc0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d8c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8c6:	b2db      	uxtb	r3, r3
 800d8c8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d8ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8cc:	2101      	movs	r1, #1
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f001 fa60 	bl	800ed94 <ff_convert>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d8d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d101      	bne.n	800d8e2 <create_name+0x8a>
 800d8de:	2306      	movs	r3, #6
 800d8e0:	e16e      	b.n	800dbc0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d8e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8e4:	2b7f      	cmp	r3, #127	; 0x7f
 800d8e6:	d809      	bhi.n	800d8fc <create_name+0xa4>
 800d8e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8ea:	4619      	mov	r1, r3
 800d8ec:	488d      	ldr	r0, [pc, #564]	; (800db24 <create_name+0x2cc>)
 800d8ee:	f7fe fb7c 	bl	800bfea <chk_chr>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d001      	beq.n	800d8fc <create_name+0xa4>
 800d8f8:	2306      	movs	r3, #6
 800d8fa:	e161      	b.n	800dbc0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800d8fc:	697b      	ldr	r3, [r7, #20]
 800d8fe:	1c5a      	adds	r2, r3, #1
 800d900:	617a      	str	r2, [r7, #20]
 800d902:	005b      	lsls	r3, r3, #1
 800d904:	68fa      	ldr	r2, [r7, #12]
 800d906:	4413      	add	r3, r2
 800d908:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d90a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d90c:	e7b4      	b.n	800d878 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d90e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d910:	693a      	ldr	r2, [r7, #16]
 800d912:	69bb      	ldr	r3, [r7, #24]
 800d914:	441a      	add	r2, r3
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d91a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d91c:	2b1f      	cmp	r3, #31
 800d91e:	d801      	bhi.n	800d924 <create_name+0xcc>
 800d920:	2304      	movs	r3, #4
 800d922:	e000      	b.n	800d926 <create_name+0xce>
 800d924:	2300      	movs	r3, #0
 800d926:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d92a:	e011      	b.n	800d950 <create_name+0xf8>
		w = lfn[di - 1];
 800d92c:	697a      	ldr	r2, [r7, #20]
 800d92e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d932:	4413      	add	r3, r2
 800d934:	005b      	lsls	r3, r3, #1
 800d936:	68fa      	ldr	r2, [r7, #12]
 800d938:	4413      	add	r3, r2
 800d93a:	881b      	ldrh	r3, [r3, #0]
 800d93c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800d93e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d940:	2b20      	cmp	r3, #32
 800d942:	d002      	beq.n	800d94a <create_name+0xf2>
 800d944:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d946:	2b2e      	cmp	r3, #46	; 0x2e
 800d948:	d106      	bne.n	800d958 <create_name+0x100>
		di--;
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	3b01      	subs	r3, #1
 800d94e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d1ea      	bne.n	800d92c <create_name+0xd4>
 800d956:	e000      	b.n	800d95a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800d958:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	005b      	lsls	r3, r3, #1
 800d95e:	68fa      	ldr	r2, [r7, #12]
 800d960:	4413      	add	r3, r2
 800d962:	2200      	movs	r2, #0
 800d964:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d101      	bne.n	800d970 <create_name+0x118>
 800d96c:	2306      	movs	r3, #6
 800d96e:	e127      	b.n	800dbc0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	3324      	adds	r3, #36	; 0x24
 800d974:	220b      	movs	r2, #11
 800d976:	2120      	movs	r1, #32
 800d978:	4618      	mov	r0, r3
 800d97a:	f7fe faf4 	bl	800bf66 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d97e:	2300      	movs	r3, #0
 800d980:	61bb      	str	r3, [r7, #24]
 800d982:	e002      	b.n	800d98a <create_name+0x132>
 800d984:	69bb      	ldr	r3, [r7, #24]
 800d986:	3301      	adds	r3, #1
 800d988:	61bb      	str	r3, [r7, #24]
 800d98a:	69bb      	ldr	r3, [r7, #24]
 800d98c:	005b      	lsls	r3, r3, #1
 800d98e:	68fa      	ldr	r2, [r7, #12]
 800d990:	4413      	add	r3, r2
 800d992:	881b      	ldrh	r3, [r3, #0]
 800d994:	2b20      	cmp	r3, #32
 800d996:	d0f5      	beq.n	800d984 <create_name+0x12c>
 800d998:	69bb      	ldr	r3, [r7, #24]
 800d99a:	005b      	lsls	r3, r3, #1
 800d99c:	68fa      	ldr	r2, [r7, #12]
 800d99e:	4413      	add	r3, r2
 800d9a0:	881b      	ldrh	r3, [r3, #0]
 800d9a2:	2b2e      	cmp	r3, #46	; 0x2e
 800d9a4:	d0ee      	beq.n	800d984 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d9a6:	69bb      	ldr	r3, [r7, #24]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d009      	beq.n	800d9c0 <create_name+0x168>
 800d9ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9b0:	f043 0303 	orr.w	r3, r3, #3
 800d9b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d9b8:	e002      	b.n	800d9c0 <create_name+0x168>
 800d9ba:	697b      	ldr	r3, [r7, #20]
 800d9bc:	3b01      	subs	r3, #1
 800d9be:	617b      	str	r3, [r7, #20]
 800d9c0:	697b      	ldr	r3, [r7, #20]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d009      	beq.n	800d9da <create_name+0x182>
 800d9c6:	697a      	ldr	r2, [r7, #20]
 800d9c8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d9cc:	4413      	add	r3, r2
 800d9ce:	005b      	lsls	r3, r3, #1
 800d9d0:	68fa      	ldr	r2, [r7, #12]
 800d9d2:	4413      	add	r3, r2
 800d9d4:	881b      	ldrh	r3, [r3, #0]
 800d9d6:	2b2e      	cmp	r3, #46	; 0x2e
 800d9d8:	d1ef      	bne.n	800d9ba <create_name+0x162>

	i = b = 0; ni = 8;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	623b      	str	r3, [r7, #32]
 800d9e4:	2308      	movs	r3, #8
 800d9e6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d9e8:	69bb      	ldr	r3, [r7, #24]
 800d9ea:	1c5a      	adds	r2, r3, #1
 800d9ec:	61ba      	str	r2, [r7, #24]
 800d9ee:	005b      	lsls	r3, r3, #1
 800d9f0:	68fa      	ldr	r2, [r7, #12]
 800d9f2:	4413      	add	r3, r2
 800d9f4:	881b      	ldrh	r3, [r3, #0]
 800d9f6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d9f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	f000 8090 	beq.w	800db20 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800da00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da02:	2b20      	cmp	r3, #32
 800da04:	d006      	beq.n	800da14 <create_name+0x1bc>
 800da06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da08:	2b2e      	cmp	r3, #46	; 0x2e
 800da0a:	d10a      	bne.n	800da22 <create_name+0x1ca>
 800da0c:	69ba      	ldr	r2, [r7, #24]
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	429a      	cmp	r2, r3
 800da12:	d006      	beq.n	800da22 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800da14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da18:	f043 0303 	orr.w	r3, r3, #3
 800da1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800da20:	e07d      	b.n	800db1e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800da22:	6a3a      	ldr	r2, [r7, #32]
 800da24:	69fb      	ldr	r3, [r7, #28]
 800da26:	429a      	cmp	r2, r3
 800da28:	d203      	bcs.n	800da32 <create_name+0x1da>
 800da2a:	69ba      	ldr	r2, [r7, #24]
 800da2c:	697b      	ldr	r3, [r7, #20]
 800da2e:	429a      	cmp	r2, r3
 800da30:	d123      	bne.n	800da7a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800da32:	69fb      	ldr	r3, [r7, #28]
 800da34:	2b0b      	cmp	r3, #11
 800da36:	d106      	bne.n	800da46 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800da38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da3c:	f043 0303 	orr.w	r3, r3, #3
 800da40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800da44:	e075      	b.n	800db32 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800da46:	69ba      	ldr	r2, [r7, #24]
 800da48:	697b      	ldr	r3, [r7, #20]
 800da4a:	429a      	cmp	r2, r3
 800da4c:	d005      	beq.n	800da5a <create_name+0x202>
 800da4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da52:	f043 0303 	orr.w	r3, r3, #3
 800da56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800da5a:	69ba      	ldr	r2, [r7, #24]
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	429a      	cmp	r2, r3
 800da60:	d866      	bhi.n	800db30 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800da62:	697b      	ldr	r3, [r7, #20]
 800da64:	61bb      	str	r3, [r7, #24]
 800da66:	2308      	movs	r3, #8
 800da68:	623b      	str	r3, [r7, #32]
 800da6a:	230b      	movs	r3, #11
 800da6c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800da6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da72:	009b      	lsls	r3, r3, #2
 800da74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800da78:	e051      	b.n	800db1e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800da7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da7c:	2b7f      	cmp	r3, #127	; 0x7f
 800da7e:	d914      	bls.n	800daaa <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800da80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da82:	2100      	movs	r1, #0
 800da84:	4618      	mov	r0, r3
 800da86:	f001 f985 	bl	800ed94 <ff_convert>
 800da8a:	4603      	mov	r3, r0
 800da8c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800da8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da90:	2b00      	cmp	r3, #0
 800da92:	d004      	beq.n	800da9e <create_name+0x246>
 800da94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da96:	3b80      	subs	r3, #128	; 0x80
 800da98:	4a23      	ldr	r2, [pc, #140]	; (800db28 <create_name+0x2d0>)
 800da9a:	5cd3      	ldrb	r3, [r2, r3]
 800da9c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800da9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800daa2:	f043 0302 	orr.w	r3, r3, #2
 800daa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800daaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800daac:	2b00      	cmp	r3, #0
 800daae:	d007      	beq.n	800dac0 <create_name+0x268>
 800dab0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dab2:	4619      	mov	r1, r3
 800dab4:	481d      	ldr	r0, [pc, #116]	; (800db2c <create_name+0x2d4>)
 800dab6:	f7fe fa98 	bl	800bfea <chk_chr>
 800daba:	4603      	mov	r3, r0
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d008      	beq.n	800dad2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800dac0:	235f      	movs	r3, #95	; 0x5f
 800dac2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800dac4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dac8:	f043 0303 	orr.w	r3, r3, #3
 800dacc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dad0:	e01b      	b.n	800db0a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800dad2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dad4:	2b40      	cmp	r3, #64	; 0x40
 800dad6:	d909      	bls.n	800daec <create_name+0x294>
 800dad8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dada:	2b5a      	cmp	r3, #90	; 0x5a
 800dadc:	d806      	bhi.n	800daec <create_name+0x294>
					b |= 2;
 800dade:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dae2:	f043 0302 	orr.w	r3, r3, #2
 800dae6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800daea:	e00e      	b.n	800db0a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800daec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800daee:	2b60      	cmp	r3, #96	; 0x60
 800daf0:	d90b      	bls.n	800db0a <create_name+0x2b2>
 800daf2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800daf4:	2b7a      	cmp	r3, #122	; 0x7a
 800daf6:	d808      	bhi.n	800db0a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800daf8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dafc:	f043 0301 	orr.w	r3, r3, #1
 800db00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800db04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db06:	3b20      	subs	r3, #32
 800db08:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800db0a:	6a3b      	ldr	r3, [r7, #32]
 800db0c:	1c5a      	adds	r2, r3, #1
 800db0e:	623a      	str	r2, [r7, #32]
 800db10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800db12:	b2d1      	uxtb	r1, r2
 800db14:	687a      	ldr	r2, [r7, #4]
 800db16:	4413      	add	r3, r2
 800db18:	460a      	mov	r2, r1
 800db1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800db1e:	e763      	b.n	800d9e8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800db20:	bf00      	nop
 800db22:	e006      	b.n	800db32 <create_name+0x2da>
 800db24:	080111ec 	.word	0x080111ec
 800db28:	080112b0 	.word	0x080112b0
 800db2c:	080111f8 	.word	0x080111f8
			if (si > di) break;			/* No extension */
 800db30:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800db38:	2be5      	cmp	r3, #229	; 0xe5
 800db3a:	d103      	bne.n	800db44 <create_name+0x2ec>
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2205      	movs	r2, #5
 800db40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800db44:	69fb      	ldr	r3, [r7, #28]
 800db46:	2b08      	cmp	r3, #8
 800db48:	d104      	bne.n	800db54 <create_name+0x2fc>
 800db4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db4e:	009b      	lsls	r3, r3, #2
 800db50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800db54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db58:	f003 030c 	and.w	r3, r3, #12
 800db5c:	2b0c      	cmp	r3, #12
 800db5e:	d005      	beq.n	800db6c <create_name+0x314>
 800db60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db64:	f003 0303 	and.w	r3, r3, #3
 800db68:	2b03      	cmp	r3, #3
 800db6a:	d105      	bne.n	800db78 <create_name+0x320>
 800db6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db70:	f043 0302 	orr.w	r3, r3, #2
 800db74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800db78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db7c:	f003 0302 	and.w	r3, r3, #2
 800db80:	2b00      	cmp	r3, #0
 800db82:	d117      	bne.n	800dbb4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800db84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db88:	f003 0303 	and.w	r3, r3, #3
 800db8c:	2b01      	cmp	r3, #1
 800db8e:	d105      	bne.n	800db9c <create_name+0x344>
 800db90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db94:	f043 0310 	orr.w	r3, r3, #16
 800db98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800db9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dba0:	f003 030c 	and.w	r3, r3, #12
 800dba4:	2b04      	cmp	r3, #4
 800dba6:	d105      	bne.n	800dbb4 <create_name+0x35c>
 800dba8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbac:	f043 0308 	orr.w	r3, r3, #8
 800dbb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800dbba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800dbbe:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3728      	adds	r7, #40	; 0x28
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}

0800dbc8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b086      	sub	sp, #24
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
 800dbd0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800dbd6:	693b      	ldr	r3, [r7, #16]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800dbdc:	e002      	b.n	800dbe4 <follow_path+0x1c>
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	3301      	adds	r3, #1
 800dbe2:	603b      	str	r3, [r7, #0]
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	781b      	ldrb	r3, [r3, #0]
 800dbe8:	2b2f      	cmp	r3, #47	; 0x2f
 800dbea:	d0f8      	beq.n	800dbde <follow_path+0x16>
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	781b      	ldrb	r3, [r3, #0]
 800dbf0:	2b5c      	cmp	r3, #92	; 0x5c
 800dbf2:	d0f4      	beq.n	800dbde <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800dbf4:	693b      	ldr	r3, [r7, #16]
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	781b      	ldrb	r3, [r3, #0]
 800dbfe:	2b1f      	cmp	r3, #31
 800dc00:	d80a      	bhi.n	800dc18 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	2280      	movs	r2, #128	; 0x80
 800dc06:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800dc0a:	2100      	movs	r1, #0
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f7fe ff35 	bl	800ca7c <dir_sdi>
 800dc12:	4603      	mov	r3, r0
 800dc14:	75fb      	strb	r3, [r7, #23]
 800dc16:	e043      	b.n	800dca0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dc18:	463b      	mov	r3, r7
 800dc1a:	4619      	mov	r1, r3
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f7ff fe1b 	bl	800d858 <create_name>
 800dc22:	4603      	mov	r3, r0
 800dc24:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dc26:	7dfb      	ldrb	r3, [r7, #23]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d134      	bne.n	800dc96 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f7ff fb7d 	bl	800d32c <dir_find>
 800dc32:	4603      	mov	r3, r0
 800dc34:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dc3c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800dc3e:	7dfb      	ldrb	r3, [r7, #23]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d00a      	beq.n	800dc5a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800dc44:	7dfb      	ldrb	r3, [r7, #23]
 800dc46:	2b04      	cmp	r3, #4
 800dc48:	d127      	bne.n	800dc9a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800dc4a:	7afb      	ldrb	r3, [r7, #11]
 800dc4c:	f003 0304 	and.w	r3, r3, #4
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d122      	bne.n	800dc9a <follow_path+0xd2>
 800dc54:	2305      	movs	r3, #5
 800dc56:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800dc58:	e01f      	b.n	800dc9a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dc5a:	7afb      	ldrb	r3, [r7, #11]
 800dc5c:	f003 0304 	and.w	r3, r3, #4
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d11c      	bne.n	800dc9e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800dc64:	693b      	ldr	r3, [r7, #16]
 800dc66:	799b      	ldrb	r3, [r3, #6]
 800dc68:	f003 0310 	and.w	r3, r3, #16
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d102      	bne.n	800dc76 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800dc70:	2305      	movs	r3, #5
 800dc72:	75fb      	strb	r3, [r7, #23]
 800dc74:	e014      	b.n	800dca0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	695b      	ldr	r3, [r3, #20]
 800dc80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc84:	4413      	add	r3, r2
 800dc86:	4619      	mov	r1, r3
 800dc88:	68f8      	ldr	r0, [r7, #12]
 800dc8a:	f7ff f87e 	bl	800cd8a <ld_clust>
 800dc8e:	4602      	mov	r2, r0
 800dc90:	693b      	ldr	r3, [r7, #16]
 800dc92:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dc94:	e7c0      	b.n	800dc18 <follow_path+0x50>
			if (res != FR_OK) break;
 800dc96:	bf00      	nop
 800dc98:	e002      	b.n	800dca0 <follow_path+0xd8>
				break;
 800dc9a:	bf00      	nop
 800dc9c:	e000      	b.n	800dca0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dc9e:	bf00      	nop
			}
		}
	}

	return res;
 800dca0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	3718      	adds	r7, #24
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}

0800dcaa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800dcaa:	b480      	push	{r7}
 800dcac:	b087      	sub	sp, #28
 800dcae:	af00      	add	r7, sp, #0
 800dcb0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800dcb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dcb6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d031      	beq.n	800dd24 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	617b      	str	r3, [r7, #20]
 800dcc6:	e002      	b.n	800dcce <get_ldnumber+0x24>
 800dcc8:	697b      	ldr	r3, [r7, #20]
 800dcca:	3301      	adds	r3, #1
 800dccc:	617b      	str	r3, [r7, #20]
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	781b      	ldrb	r3, [r3, #0]
 800dcd2:	2b1f      	cmp	r3, #31
 800dcd4:	d903      	bls.n	800dcde <get_ldnumber+0x34>
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	781b      	ldrb	r3, [r3, #0]
 800dcda:	2b3a      	cmp	r3, #58	; 0x3a
 800dcdc:	d1f4      	bne.n	800dcc8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	781b      	ldrb	r3, [r3, #0]
 800dce2:	2b3a      	cmp	r3, #58	; 0x3a
 800dce4:	d11c      	bne.n	800dd20 <get_ldnumber+0x76>
			tp = *path;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	1c5a      	adds	r2, r3, #1
 800dcf0:	60fa      	str	r2, [r7, #12]
 800dcf2:	781b      	ldrb	r3, [r3, #0]
 800dcf4:	3b30      	subs	r3, #48	; 0x30
 800dcf6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800dcf8:	68bb      	ldr	r3, [r7, #8]
 800dcfa:	2b09      	cmp	r3, #9
 800dcfc:	d80e      	bhi.n	800dd1c <get_ldnumber+0x72>
 800dcfe:	68fa      	ldr	r2, [r7, #12]
 800dd00:	697b      	ldr	r3, [r7, #20]
 800dd02:	429a      	cmp	r2, r3
 800dd04:	d10a      	bne.n	800dd1c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d107      	bne.n	800dd1c <get_ldnumber+0x72>
					vol = (int)i;
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800dd10:	697b      	ldr	r3, [r7, #20]
 800dd12:	3301      	adds	r3, #1
 800dd14:	617b      	str	r3, [r7, #20]
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	697a      	ldr	r2, [r7, #20]
 800dd1a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800dd1c:	693b      	ldr	r3, [r7, #16]
 800dd1e:	e002      	b.n	800dd26 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800dd20:	2300      	movs	r3, #0
 800dd22:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800dd24:	693b      	ldr	r3, [r7, #16]
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	371c      	adds	r7, #28
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd30:	4770      	bx	lr
	...

0800dd34 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b082      	sub	sp, #8
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
 800dd3c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2200      	movs	r2, #0
 800dd42:	70da      	strb	r2, [r3, #3]
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dd4a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800dd4c:	6839      	ldr	r1, [r7, #0]
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	f7fe fb16 	bl	800c380 <move_window>
 800dd54:	4603      	mov	r3, r0
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d001      	beq.n	800dd5e <check_fs+0x2a>
 800dd5a:	2304      	movs	r3, #4
 800dd5c:	e038      	b.n	800ddd0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	3334      	adds	r3, #52	; 0x34
 800dd62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dd66:	4618      	mov	r0, r3
 800dd68:	f7fe f85a 	bl	800be20 <ld_word>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	461a      	mov	r2, r3
 800dd70:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800dd74:	429a      	cmp	r2, r3
 800dd76:	d001      	beq.n	800dd7c <check_fs+0x48>
 800dd78:	2303      	movs	r3, #3
 800dd7a:	e029      	b.n	800ddd0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dd82:	2be9      	cmp	r3, #233	; 0xe9
 800dd84:	d009      	beq.n	800dd9a <check_fs+0x66>
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dd8c:	2beb      	cmp	r3, #235	; 0xeb
 800dd8e:	d11e      	bne.n	800ddce <check_fs+0x9a>
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800dd96:	2b90      	cmp	r3, #144	; 0x90
 800dd98:	d119      	bne.n	800ddce <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	3334      	adds	r3, #52	; 0x34
 800dd9e:	3336      	adds	r3, #54	; 0x36
 800dda0:	4618      	mov	r0, r3
 800dda2:	f7fe f855 	bl	800be50 <ld_dword>
 800dda6:	4603      	mov	r3, r0
 800dda8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ddac:	4a0a      	ldr	r2, [pc, #40]	; (800ddd8 <check_fs+0xa4>)
 800ddae:	4293      	cmp	r3, r2
 800ddb0:	d101      	bne.n	800ddb6 <check_fs+0x82>
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	e00c      	b.n	800ddd0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	3334      	adds	r3, #52	; 0x34
 800ddba:	3352      	adds	r3, #82	; 0x52
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	f7fe f847 	bl	800be50 <ld_dword>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	4a05      	ldr	r2, [pc, #20]	; (800dddc <check_fs+0xa8>)
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d101      	bne.n	800ddce <check_fs+0x9a>
 800ddca:	2300      	movs	r3, #0
 800ddcc:	e000      	b.n	800ddd0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ddce:	2302      	movs	r3, #2
}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	3708      	adds	r7, #8
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}
 800ddd8:	00544146 	.word	0x00544146
 800dddc:	33544146 	.word	0x33544146

0800dde0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b096      	sub	sp, #88	; 0x58
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	60f8      	str	r0, [r7, #12]
 800dde8:	60b9      	str	r1, [r7, #8]
 800ddea:	4613      	mov	r3, r2
 800ddec:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ddf4:	68f8      	ldr	r0, [r7, #12]
 800ddf6:	f7ff ff58 	bl	800dcaa <get_ldnumber>
 800ddfa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ddfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	da01      	bge.n	800de06 <find_volume+0x26>
 800de02:	230b      	movs	r3, #11
 800de04:	e230      	b.n	800e268 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800de06:	4aa1      	ldr	r2, [pc, #644]	; (800e08c <find_volume+0x2ac>)
 800de08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de0e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800de10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de12:	2b00      	cmp	r3, #0
 800de14:	d101      	bne.n	800de1a <find_volume+0x3a>
 800de16:	230c      	movs	r3, #12
 800de18:	e226      	b.n	800e268 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de1e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800de20:	79fb      	ldrb	r3, [r7, #7]
 800de22:	f023 0301 	bic.w	r3, r3, #1
 800de26:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800de28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de2a:	781b      	ldrb	r3, [r3, #0]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d01a      	beq.n	800de66 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800de30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de32:	785b      	ldrb	r3, [r3, #1]
 800de34:	4618      	mov	r0, r3
 800de36:	f7fd ff55 	bl	800bce4 <disk_status>
 800de3a:	4603      	mov	r3, r0
 800de3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800de40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800de44:	f003 0301 	and.w	r3, r3, #1
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d10c      	bne.n	800de66 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800de4c:	79fb      	ldrb	r3, [r7, #7]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d007      	beq.n	800de62 <find_volume+0x82>
 800de52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800de56:	f003 0304 	and.w	r3, r3, #4
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d001      	beq.n	800de62 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800de5e:	230a      	movs	r3, #10
 800de60:	e202      	b.n	800e268 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800de62:	2300      	movs	r3, #0
 800de64:	e200      	b.n	800e268 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800de66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de68:	2200      	movs	r2, #0
 800de6a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800de6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de6e:	b2da      	uxtb	r2, r3
 800de70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de72:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800de74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de76:	785b      	ldrb	r3, [r3, #1]
 800de78:	4618      	mov	r0, r3
 800de7a:	f7fd ff4d 	bl	800bd18 <disk_initialize>
 800de7e:	4603      	mov	r3, r0
 800de80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800de84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800de88:	f003 0301 	and.w	r3, r3, #1
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d001      	beq.n	800de94 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800de90:	2303      	movs	r3, #3
 800de92:	e1e9      	b.n	800e268 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800de94:	79fb      	ldrb	r3, [r7, #7]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d007      	beq.n	800deaa <find_volume+0xca>
 800de9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800de9e:	f003 0304 	and.w	r3, r3, #4
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d001      	beq.n	800deaa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800dea6:	230a      	movs	r3, #10
 800dea8:	e1de      	b.n	800e268 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800deaa:	2300      	movs	r3, #0
 800deac:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800deae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800deb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800deb2:	f7ff ff3f 	bl	800dd34 <check_fs>
 800deb6:	4603      	mov	r3, r0
 800deb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800debc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dec0:	2b02      	cmp	r3, #2
 800dec2:	d149      	bne.n	800df58 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dec4:	2300      	movs	r3, #0
 800dec6:	643b      	str	r3, [r7, #64]	; 0x40
 800dec8:	e01e      	b.n	800df08 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800deca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800decc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ded0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ded2:	011b      	lsls	r3, r3, #4
 800ded4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ded8:	4413      	add	r3, r2
 800deda:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800dedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dede:	3304      	adds	r3, #4
 800dee0:	781b      	ldrb	r3, [r3, #0]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d006      	beq.n	800def4 <find_volume+0x114>
 800dee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dee8:	3308      	adds	r3, #8
 800deea:	4618      	mov	r0, r3
 800deec:	f7fd ffb0 	bl	800be50 <ld_dword>
 800def0:	4602      	mov	r2, r0
 800def2:	e000      	b.n	800def6 <find_volume+0x116>
 800def4:	2200      	movs	r2, #0
 800def6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800def8:	009b      	lsls	r3, r3, #2
 800defa:	3358      	adds	r3, #88	; 0x58
 800defc:	443b      	add	r3, r7
 800defe:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800df02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df04:	3301      	adds	r3, #1
 800df06:	643b      	str	r3, [r7, #64]	; 0x40
 800df08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df0a:	2b03      	cmp	r3, #3
 800df0c:	d9dd      	bls.n	800deca <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800df0e:	2300      	movs	r3, #0
 800df10:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800df12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df14:	2b00      	cmp	r3, #0
 800df16:	d002      	beq.n	800df1e <find_volume+0x13e>
 800df18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df1a:	3b01      	subs	r3, #1
 800df1c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800df1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df20:	009b      	lsls	r3, r3, #2
 800df22:	3358      	adds	r3, #88	; 0x58
 800df24:	443b      	add	r3, r7
 800df26:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800df2a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800df2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d005      	beq.n	800df3e <find_volume+0x15e>
 800df32:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800df34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800df36:	f7ff fefd 	bl	800dd34 <check_fs>
 800df3a:	4603      	mov	r3, r0
 800df3c:	e000      	b.n	800df40 <find_volume+0x160>
 800df3e:	2303      	movs	r3, #3
 800df40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800df44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800df48:	2b01      	cmp	r3, #1
 800df4a:	d905      	bls.n	800df58 <find_volume+0x178>
 800df4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df4e:	3301      	adds	r3, #1
 800df50:	643b      	str	r3, [r7, #64]	; 0x40
 800df52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df54:	2b03      	cmp	r3, #3
 800df56:	d9e2      	bls.n	800df1e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800df58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800df5c:	2b04      	cmp	r3, #4
 800df5e:	d101      	bne.n	800df64 <find_volume+0x184>
 800df60:	2301      	movs	r3, #1
 800df62:	e181      	b.n	800e268 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800df64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800df68:	2b01      	cmp	r3, #1
 800df6a:	d901      	bls.n	800df70 <find_volume+0x190>
 800df6c:	230d      	movs	r3, #13
 800df6e:	e17b      	b.n	800e268 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800df70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df72:	3334      	adds	r3, #52	; 0x34
 800df74:	330b      	adds	r3, #11
 800df76:	4618      	mov	r0, r3
 800df78:	f7fd ff52 	bl	800be20 <ld_word>
 800df7c:	4603      	mov	r3, r0
 800df7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df82:	d001      	beq.n	800df88 <find_volume+0x1a8>
 800df84:	230d      	movs	r3, #13
 800df86:	e16f      	b.n	800e268 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800df88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df8a:	3334      	adds	r3, #52	; 0x34
 800df8c:	3316      	adds	r3, #22
 800df8e:	4618      	mov	r0, r3
 800df90:	f7fd ff46 	bl	800be20 <ld_word>
 800df94:	4603      	mov	r3, r0
 800df96:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800df98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d106      	bne.n	800dfac <find_volume+0x1cc>
 800df9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfa0:	3334      	adds	r3, #52	; 0x34
 800dfa2:	3324      	adds	r3, #36	; 0x24
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	f7fd ff53 	bl	800be50 <ld_dword>
 800dfaa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800dfac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dfb0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800dfb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfb4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800dfb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfba:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800dfbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfbe:	789b      	ldrb	r3, [r3, #2]
 800dfc0:	2b01      	cmp	r3, #1
 800dfc2:	d005      	beq.n	800dfd0 <find_volume+0x1f0>
 800dfc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc6:	789b      	ldrb	r3, [r3, #2]
 800dfc8:	2b02      	cmp	r3, #2
 800dfca:	d001      	beq.n	800dfd0 <find_volume+0x1f0>
 800dfcc:	230d      	movs	r3, #13
 800dfce:	e14b      	b.n	800e268 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800dfd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfd2:	789b      	ldrb	r3, [r3, #2]
 800dfd4:	461a      	mov	r2, r3
 800dfd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfd8:	fb02 f303 	mul.w	r3, r2, r3
 800dfdc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800dfde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfe0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dfe4:	b29a      	uxth	r2, r3
 800dfe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfe8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800dfea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfec:	895b      	ldrh	r3, [r3, #10]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d008      	beq.n	800e004 <find_volume+0x224>
 800dff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dff4:	895b      	ldrh	r3, [r3, #10]
 800dff6:	461a      	mov	r2, r3
 800dff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dffa:	895b      	ldrh	r3, [r3, #10]
 800dffc:	3b01      	subs	r3, #1
 800dffe:	4013      	ands	r3, r2
 800e000:	2b00      	cmp	r3, #0
 800e002:	d001      	beq.n	800e008 <find_volume+0x228>
 800e004:	230d      	movs	r3, #13
 800e006:	e12f      	b.n	800e268 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e00a:	3334      	adds	r3, #52	; 0x34
 800e00c:	3311      	adds	r3, #17
 800e00e:	4618      	mov	r0, r3
 800e010:	f7fd ff06 	bl	800be20 <ld_word>
 800e014:	4603      	mov	r3, r0
 800e016:	461a      	mov	r2, r3
 800e018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e01a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e01e:	891b      	ldrh	r3, [r3, #8]
 800e020:	f003 030f 	and.w	r3, r3, #15
 800e024:	b29b      	uxth	r3, r3
 800e026:	2b00      	cmp	r3, #0
 800e028:	d001      	beq.n	800e02e <find_volume+0x24e>
 800e02a:	230d      	movs	r3, #13
 800e02c:	e11c      	b.n	800e268 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e030:	3334      	adds	r3, #52	; 0x34
 800e032:	3313      	adds	r3, #19
 800e034:	4618      	mov	r0, r3
 800e036:	f7fd fef3 	bl	800be20 <ld_word>
 800e03a:	4603      	mov	r3, r0
 800e03c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e03e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e040:	2b00      	cmp	r3, #0
 800e042:	d106      	bne.n	800e052 <find_volume+0x272>
 800e044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e046:	3334      	adds	r3, #52	; 0x34
 800e048:	3320      	adds	r3, #32
 800e04a:	4618      	mov	r0, r3
 800e04c:	f7fd ff00 	bl	800be50 <ld_dword>
 800e050:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e054:	3334      	adds	r3, #52	; 0x34
 800e056:	330e      	adds	r3, #14
 800e058:	4618      	mov	r0, r3
 800e05a:	f7fd fee1 	bl	800be20 <ld_word>
 800e05e:	4603      	mov	r3, r0
 800e060:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e062:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e064:	2b00      	cmp	r3, #0
 800e066:	d101      	bne.n	800e06c <find_volume+0x28c>
 800e068:	230d      	movs	r3, #13
 800e06a:	e0fd      	b.n	800e268 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e06c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e06e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e070:	4413      	add	r3, r2
 800e072:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e074:	8912      	ldrh	r2, [r2, #8]
 800e076:	0912      	lsrs	r2, r2, #4
 800e078:	b292      	uxth	r2, r2
 800e07a:	4413      	add	r3, r2
 800e07c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e07e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e082:	429a      	cmp	r2, r3
 800e084:	d204      	bcs.n	800e090 <find_volume+0x2b0>
 800e086:	230d      	movs	r3, #13
 800e088:	e0ee      	b.n	800e268 <find_volume+0x488>
 800e08a:	bf00      	nop
 800e08c:	20003250 	.word	0x20003250
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e090:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e094:	1ad3      	subs	r3, r2, r3
 800e096:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e098:	8952      	ldrh	r2, [r2, #10]
 800e09a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e09e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d101      	bne.n	800e0aa <find_volume+0x2ca>
 800e0a6:	230d      	movs	r3, #13
 800e0a8:	e0de      	b.n	800e268 <find_volume+0x488>
		fmt = FS_FAT32;
 800e0aa:	2303      	movs	r3, #3
 800e0ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e0b6:	4293      	cmp	r3, r2
 800e0b8:	d802      	bhi.n	800e0c0 <find_volume+0x2e0>
 800e0ba:	2302      	movs	r3, #2
 800e0bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e0c6:	4293      	cmp	r3, r2
 800e0c8:	d802      	bhi.n	800e0d0 <find_volume+0x2f0>
 800e0ca:	2301      	movs	r3, #1
 800e0cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d2:	1c9a      	adds	r2, r3, #2
 800e0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0d6:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800e0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e0dc:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e0de:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e0e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0e2:	441a      	add	r2, r3
 800e0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0e6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800e0e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ec:	441a      	add	r2, r3
 800e0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0f0:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800e0f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e0f6:	2b03      	cmp	r3, #3
 800e0f8:	d11e      	bne.n	800e138 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0fc:	3334      	adds	r3, #52	; 0x34
 800e0fe:	332a      	adds	r3, #42	; 0x2a
 800e100:	4618      	mov	r0, r3
 800e102:	f7fd fe8d 	bl	800be20 <ld_word>
 800e106:	4603      	mov	r3, r0
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d001      	beq.n	800e110 <find_volume+0x330>
 800e10c:	230d      	movs	r3, #13
 800e10e:	e0ab      	b.n	800e268 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e112:	891b      	ldrh	r3, [r3, #8]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d001      	beq.n	800e11c <find_volume+0x33c>
 800e118:	230d      	movs	r3, #13
 800e11a:	e0a5      	b.n	800e268 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e11e:	3334      	adds	r3, #52	; 0x34
 800e120:	332c      	adds	r3, #44	; 0x2c
 800e122:	4618      	mov	r0, r3
 800e124:	f7fd fe94 	bl	800be50 <ld_dword>
 800e128:	4602      	mov	r2, r0
 800e12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e12c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e130:	699b      	ldr	r3, [r3, #24]
 800e132:	009b      	lsls	r3, r3, #2
 800e134:	647b      	str	r3, [r7, #68]	; 0x44
 800e136:	e01f      	b.n	800e178 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e13a:	891b      	ldrh	r3, [r3, #8]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d101      	bne.n	800e144 <find_volume+0x364>
 800e140:	230d      	movs	r3, #13
 800e142:	e091      	b.n	800e268 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e146:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e14a:	441a      	add	r2, r3
 800e14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e14e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e150:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e154:	2b02      	cmp	r3, #2
 800e156:	d103      	bne.n	800e160 <find_volume+0x380>
 800e158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e15a:	699b      	ldr	r3, [r3, #24]
 800e15c:	005b      	lsls	r3, r3, #1
 800e15e:	e00a      	b.n	800e176 <find_volume+0x396>
 800e160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e162:	699a      	ldr	r2, [r3, #24]
 800e164:	4613      	mov	r3, r2
 800e166:	005b      	lsls	r3, r3, #1
 800e168:	4413      	add	r3, r2
 800e16a:	085a      	lsrs	r2, r3, #1
 800e16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e16e:	699b      	ldr	r3, [r3, #24]
 800e170:	f003 0301 	and.w	r3, r3, #1
 800e174:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e176:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e17a:	69da      	ldr	r2, [r3, #28]
 800e17c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e17e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e182:	0a5b      	lsrs	r3, r3, #9
 800e184:	429a      	cmp	r2, r3
 800e186:	d201      	bcs.n	800e18c <find_volume+0x3ac>
 800e188:	230d      	movs	r3, #13
 800e18a:	e06d      	b.n	800e268 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e18e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e192:	615a      	str	r2, [r3, #20]
 800e194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e196:	695a      	ldr	r2, [r3, #20]
 800e198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e19a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800e19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e19e:	2280      	movs	r2, #128	; 0x80
 800e1a0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e1a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e1a6:	2b03      	cmp	r3, #3
 800e1a8:	d149      	bne.n	800e23e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ac:	3334      	adds	r3, #52	; 0x34
 800e1ae:	3330      	adds	r3, #48	; 0x30
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	f7fd fe35 	bl	800be20 <ld_word>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	2b01      	cmp	r3, #1
 800e1ba:	d140      	bne.n	800e23e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e1bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1be:	3301      	adds	r3, #1
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e1c4:	f7fe f8dc 	bl	800c380 <move_window>
 800e1c8:	4603      	mov	r3, r0
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d137      	bne.n	800e23e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1d6:	3334      	adds	r3, #52	; 0x34
 800e1d8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f7fd fe1f 	bl	800be20 <ld_word>
 800e1e2:	4603      	mov	r3, r0
 800e1e4:	461a      	mov	r2, r3
 800e1e6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e1ea:	429a      	cmp	r2, r3
 800e1ec:	d127      	bne.n	800e23e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1f0:	3334      	adds	r3, #52	; 0x34
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f7fd fe2c 	bl	800be50 <ld_dword>
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	4a1d      	ldr	r2, [pc, #116]	; (800e270 <find_volume+0x490>)
 800e1fc:	4293      	cmp	r3, r2
 800e1fe:	d11e      	bne.n	800e23e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e202:	3334      	adds	r3, #52	; 0x34
 800e204:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e208:	4618      	mov	r0, r3
 800e20a:	f7fd fe21 	bl	800be50 <ld_dword>
 800e20e:	4603      	mov	r3, r0
 800e210:	4a18      	ldr	r2, [pc, #96]	; (800e274 <find_volume+0x494>)
 800e212:	4293      	cmp	r3, r2
 800e214:	d113      	bne.n	800e23e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e218:	3334      	adds	r3, #52	; 0x34
 800e21a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e21e:	4618      	mov	r0, r3
 800e220:	f7fd fe16 	bl	800be50 <ld_dword>
 800e224:	4602      	mov	r2, r0
 800e226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e228:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e22a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e22c:	3334      	adds	r3, #52	; 0x34
 800e22e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e232:	4618      	mov	r0, r3
 800e234:	f7fd fe0c 	bl	800be50 <ld_dword>
 800e238:	4602      	mov	r2, r0
 800e23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e23c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e240:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e244:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e246:	4b0c      	ldr	r3, [pc, #48]	; (800e278 <find_volume+0x498>)
 800e248:	881b      	ldrh	r3, [r3, #0]
 800e24a:	3301      	adds	r3, #1
 800e24c:	b29a      	uxth	r2, r3
 800e24e:	4b0a      	ldr	r3, [pc, #40]	; (800e278 <find_volume+0x498>)
 800e250:	801a      	strh	r2, [r3, #0]
 800e252:	4b09      	ldr	r3, [pc, #36]	; (800e278 <find_volume+0x498>)
 800e254:	881a      	ldrh	r2, [r3, #0]
 800e256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e258:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800e25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e25c:	4a07      	ldr	r2, [pc, #28]	; (800e27c <find_volume+0x49c>)
 800e25e:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e260:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e262:	f7fe f825 	bl	800c2b0 <clear_lock>
#endif
	return FR_OK;
 800e266:	2300      	movs	r3, #0
}
 800e268:	4618      	mov	r0, r3
 800e26a:	3758      	adds	r7, #88	; 0x58
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bd80      	pop	{r7, pc}
 800e270:	41615252 	.word	0x41615252
 800e274:	61417272 	.word	0x61417272
 800e278:	20003254 	.word	0x20003254
 800e27c:	20003278 	.word	0x20003278

0800e280 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b084      	sub	sp, #16
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
 800e288:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e28a:	2309      	movs	r3, #9
 800e28c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d01c      	beq.n	800e2ce <validate+0x4e>
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d018      	beq.n	800e2ce <validate+0x4e>
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	781b      	ldrb	r3, [r3, #0]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d013      	beq.n	800e2ce <validate+0x4e>
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	889a      	ldrh	r2, [r3, #4]
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	88db      	ldrh	r3, [r3, #6]
 800e2b0:	429a      	cmp	r2, r3
 800e2b2:	d10c      	bne.n	800e2ce <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	785b      	ldrb	r3, [r3, #1]
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	f7fd fd12 	bl	800bce4 <disk_status>
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	f003 0301 	and.w	r3, r3, #1
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d101      	bne.n	800e2ce <validate+0x4e>
			res = FR_OK;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e2ce:	7bfb      	ldrb	r3, [r7, #15]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d102      	bne.n	800e2da <validate+0x5a>
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	e000      	b.n	800e2dc <validate+0x5c>
 800e2da:	2300      	movs	r3, #0
 800e2dc:	683a      	ldr	r2, [r7, #0]
 800e2de:	6013      	str	r3, [r2, #0]
	return res;
 800e2e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	3710      	adds	r7, #16
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	bd80      	pop	{r7, pc}
	...

0800e2ec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b088      	sub	sp, #32
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	60f8      	str	r0, [r7, #12]
 800e2f4:	60b9      	str	r1, [r7, #8]
 800e2f6:	4613      	mov	r3, r2
 800e2f8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e2fa:	68bb      	ldr	r3, [r7, #8]
 800e2fc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e2fe:	f107 0310 	add.w	r3, r7, #16
 800e302:	4618      	mov	r0, r3
 800e304:	f7ff fcd1 	bl	800dcaa <get_ldnumber>
 800e308:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e30a:	69fb      	ldr	r3, [r7, #28]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	da01      	bge.n	800e314 <f_mount+0x28>
 800e310:	230b      	movs	r3, #11
 800e312:	e02b      	b.n	800e36c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e314:	4a17      	ldr	r2, [pc, #92]	; (800e374 <f_mount+0x88>)
 800e316:	69fb      	ldr	r3, [r7, #28]
 800e318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e31c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e31e:	69bb      	ldr	r3, [r7, #24]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d005      	beq.n	800e330 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e324:	69b8      	ldr	r0, [r7, #24]
 800e326:	f7fd ffc3 	bl	800c2b0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e32a:	69bb      	ldr	r3, [r7, #24]
 800e32c:	2200      	movs	r2, #0
 800e32e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d002      	beq.n	800e33c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	2200      	movs	r2, #0
 800e33a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e33c:	68fa      	ldr	r2, [r7, #12]
 800e33e:	490d      	ldr	r1, [pc, #52]	; (800e374 <f_mount+0x88>)
 800e340:	69fb      	ldr	r3, [r7, #28]
 800e342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d002      	beq.n	800e352 <f_mount+0x66>
 800e34c:	79fb      	ldrb	r3, [r7, #7]
 800e34e:	2b01      	cmp	r3, #1
 800e350:	d001      	beq.n	800e356 <f_mount+0x6a>
 800e352:	2300      	movs	r3, #0
 800e354:	e00a      	b.n	800e36c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e356:	f107 010c 	add.w	r1, r7, #12
 800e35a:	f107 0308 	add.w	r3, r7, #8
 800e35e:	2200      	movs	r2, #0
 800e360:	4618      	mov	r0, r3
 800e362:	f7ff fd3d 	bl	800dde0 <find_volume>
 800e366:	4603      	mov	r3, r0
 800e368:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e36a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e36c:	4618      	mov	r0, r3
 800e36e:	3720      	adds	r7, #32
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}
 800e374:	20003250 	.word	0x20003250

0800e378 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b09a      	sub	sp, #104	; 0x68
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	60f8      	str	r0, [r7, #12]
 800e380:	60b9      	str	r1, [r7, #8]
 800e382:	4613      	mov	r3, r2
 800e384:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d101      	bne.n	800e390 <f_open+0x18>
 800e38c:	2309      	movs	r3, #9
 800e38e:	e1ad      	b.n	800e6ec <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e390:	79fb      	ldrb	r3, [r7, #7]
 800e392:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e396:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e398:	79fa      	ldrb	r2, [r7, #7]
 800e39a:	f107 0114 	add.w	r1, r7, #20
 800e39e:	f107 0308 	add.w	r3, r7, #8
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f7ff fd1c 	bl	800dde0 <find_volume>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800e3ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	f040 8191 	bne.w	800e6da <f_open+0x362>
		dj.obj.fs = fs;
 800e3b8:	697b      	ldr	r3, [r7, #20]
 800e3ba:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e3bc:	68ba      	ldr	r2, [r7, #8]
 800e3be:	f107 0318 	add.w	r3, r7, #24
 800e3c2:	4611      	mov	r1, r2
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f7ff fbff 	bl	800dbc8 <follow_path>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e3d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d11a      	bne.n	800e40e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e3d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e3dc:	b25b      	sxtb	r3, r3
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	da03      	bge.n	800e3ea <f_open+0x72>
				res = FR_INVALID_NAME;
 800e3e2:	2306      	movs	r3, #6
 800e3e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e3e8:	e011      	b.n	800e40e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e3ea:	79fb      	ldrb	r3, [r7, #7]
 800e3ec:	f023 0301 	bic.w	r3, r3, #1
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	bf14      	ite	ne
 800e3f4:	2301      	movne	r3, #1
 800e3f6:	2300      	moveq	r3, #0
 800e3f8:	b2db      	uxtb	r3, r3
 800e3fa:	461a      	mov	r2, r3
 800e3fc:	f107 0318 	add.w	r3, r7, #24
 800e400:	4611      	mov	r1, r2
 800e402:	4618      	mov	r0, r3
 800e404:	f7fd fe0c 	bl	800c020 <chk_lock>
 800e408:	4603      	mov	r3, r0
 800e40a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e40e:	79fb      	ldrb	r3, [r7, #7]
 800e410:	f003 031c 	and.w	r3, r3, #28
 800e414:	2b00      	cmp	r3, #0
 800e416:	d07f      	beq.n	800e518 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e418:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d017      	beq.n	800e450 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e420:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e424:	2b04      	cmp	r3, #4
 800e426:	d10e      	bne.n	800e446 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e428:	f7fd fe56 	bl	800c0d8 <enq_lock>
 800e42c:	4603      	mov	r3, r0
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d006      	beq.n	800e440 <f_open+0xc8>
 800e432:	f107 0318 	add.w	r3, r7, #24
 800e436:	4618      	mov	r0, r3
 800e438:	f7ff f838 	bl	800d4ac <dir_register>
 800e43c:	4603      	mov	r3, r0
 800e43e:	e000      	b.n	800e442 <f_open+0xca>
 800e440:	2312      	movs	r3, #18
 800e442:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e446:	79fb      	ldrb	r3, [r7, #7]
 800e448:	f043 0308 	orr.w	r3, r3, #8
 800e44c:	71fb      	strb	r3, [r7, #7]
 800e44e:	e010      	b.n	800e472 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e450:	7fbb      	ldrb	r3, [r7, #30]
 800e452:	f003 0311 	and.w	r3, r3, #17
 800e456:	2b00      	cmp	r3, #0
 800e458:	d003      	beq.n	800e462 <f_open+0xea>
					res = FR_DENIED;
 800e45a:	2307      	movs	r3, #7
 800e45c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e460:	e007      	b.n	800e472 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e462:	79fb      	ldrb	r3, [r7, #7]
 800e464:	f003 0304 	and.w	r3, r3, #4
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d002      	beq.n	800e472 <f_open+0xfa>
 800e46c:	2308      	movs	r3, #8
 800e46e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e472:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e476:	2b00      	cmp	r3, #0
 800e478:	d168      	bne.n	800e54c <f_open+0x1d4>
 800e47a:	79fb      	ldrb	r3, [r7, #7]
 800e47c:	f003 0308 	and.w	r3, r3, #8
 800e480:	2b00      	cmp	r3, #0
 800e482:	d063      	beq.n	800e54c <f_open+0x1d4>
				dw = GET_FATTIME();
 800e484:	f7fb fa00 	bl	8009888 <get_fattime>
 800e488:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e48c:	330e      	adds	r3, #14
 800e48e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e490:	4618      	mov	r0, r3
 800e492:	f7fd fd1b 	bl	800becc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e498:	3316      	adds	r3, #22
 800e49a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e49c:	4618      	mov	r0, r3
 800e49e:	f7fd fd15 	bl	800becc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4a4:	330b      	adds	r3, #11
 800e4a6:	2220      	movs	r2, #32
 800e4a8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e4aa:	697b      	ldr	r3, [r7, #20]
 800e4ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e4ae:	4611      	mov	r1, r2
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	f7fe fc6a 	bl	800cd8a <ld_clust>
 800e4b6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e4b8:	697b      	ldr	r3, [r7, #20]
 800e4ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e4bc:	2200      	movs	r2, #0
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f7fe fc82 	bl	800cdc8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4c6:	331c      	adds	r3, #28
 800e4c8:	2100      	movs	r1, #0
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f7fd fcfe 	bl	800becc <st_dword>
					fs->wflag = 1;
 800e4d0:	697b      	ldr	r3, [r7, #20]
 800e4d2:	2201      	movs	r2, #1
 800e4d4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e4d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d037      	beq.n	800e54c <f_open+0x1d4>
						dw = fs->winsect;
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4e0:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800e4e2:	f107 0318 	add.w	r3, r7, #24
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f7fe f995 	bl	800c81a <remove_chain>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800e4f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d126      	bne.n	800e54c <f_open+0x1d4>
							res = move_window(fs, dw);
 800e4fe:	697b      	ldr	r3, [r7, #20]
 800e500:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e502:	4618      	mov	r0, r3
 800e504:	f7fd ff3c 	bl	800c380 <move_window>
 800e508:	4603      	mov	r3, r0
 800e50a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e50e:	697b      	ldr	r3, [r7, #20]
 800e510:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e512:	3a01      	subs	r2, #1
 800e514:	611a      	str	r2, [r3, #16]
 800e516:	e019      	b.n	800e54c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e518:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d115      	bne.n	800e54c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e520:	7fbb      	ldrb	r3, [r7, #30]
 800e522:	f003 0310 	and.w	r3, r3, #16
 800e526:	2b00      	cmp	r3, #0
 800e528:	d003      	beq.n	800e532 <f_open+0x1ba>
					res = FR_NO_FILE;
 800e52a:	2304      	movs	r3, #4
 800e52c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e530:	e00c      	b.n	800e54c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e532:	79fb      	ldrb	r3, [r7, #7]
 800e534:	f003 0302 	and.w	r3, r3, #2
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d007      	beq.n	800e54c <f_open+0x1d4>
 800e53c:	7fbb      	ldrb	r3, [r7, #30]
 800e53e:	f003 0301 	and.w	r3, r3, #1
 800e542:	2b00      	cmp	r3, #0
 800e544:	d002      	beq.n	800e54c <f_open+0x1d4>
						res = FR_DENIED;
 800e546:	2307      	movs	r3, #7
 800e548:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800e54c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e550:	2b00      	cmp	r3, #0
 800e552:	d128      	bne.n	800e5a6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e554:	79fb      	ldrb	r3, [r7, #7]
 800e556:	f003 0308 	and.w	r3, r3, #8
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d003      	beq.n	800e566 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e55e:	79fb      	ldrb	r3, [r7, #7]
 800e560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e564:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e566:	697b      	ldr	r3, [r7, #20]
 800e568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e56e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e574:	79fb      	ldrb	r3, [r7, #7]
 800e576:	f023 0301 	bic.w	r3, r3, #1
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	bf14      	ite	ne
 800e57e:	2301      	movne	r3, #1
 800e580:	2300      	moveq	r3, #0
 800e582:	b2db      	uxtb	r3, r3
 800e584:	461a      	mov	r2, r3
 800e586:	f107 0318 	add.w	r3, r7, #24
 800e58a:	4611      	mov	r1, r2
 800e58c:	4618      	mov	r0, r3
 800e58e:	f7fd fdc5 	bl	800c11c <inc_lock>
 800e592:	4602      	mov	r2, r0
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	691b      	ldr	r3, [r3, #16]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d102      	bne.n	800e5a6 <f_open+0x22e>
 800e5a0:	2302      	movs	r3, #2
 800e5a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e5a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	f040 8095 	bne.w	800e6da <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e5b0:	697b      	ldr	r3, [r7, #20]
 800e5b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e5b4:	4611      	mov	r1, r2
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f7fe fbe7 	bl	800cd8a <ld_clust>
 800e5bc:	4602      	mov	r2, r0
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5c4:	331c      	adds	r3, #28
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	f7fd fc42 	bl	800be50 <ld_dword>
 800e5cc:	4602      	mov	r2, r0
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e5d8:	697a      	ldr	r2, [r7, #20]
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e5de:	697b      	ldr	r3, [r7, #20]
 800e5e0:	88da      	ldrh	r2, [r3, #6]
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	79fa      	ldrb	r2, [r7, #7]
 800e5ea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	3330      	adds	r3, #48	; 0x30
 800e602:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e606:	2100      	movs	r1, #0
 800e608:	4618      	mov	r0, r3
 800e60a:	f7fd fcac 	bl	800bf66 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e60e:	79fb      	ldrb	r3, [r7, #7]
 800e610:	f003 0320 	and.w	r3, r3, #32
 800e614:	2b00      	cmp	r3, #0
 800e616:	d060      	beq.n	800e6da <f_open+0x362>
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	68db      	ldr	r3, [r3, #12]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d05c      	beq.n	800e6da <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	68da      	ldr	r2, [r3, #12]
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e628:	697b      	ldr	r3, [r7, #20]
 800e62a:	895b      	ldrh	r3, [r3, #10]
 800e62c:	025b      	lsls	r3, r3, #9
 800e62e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	689b      	ldr	r3, [r3, #8]
 800e634:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	68db      	ldr	r3, [r3, #12]
 800e63a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e63c:	e016      	b.n	800e66c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e642:	4618      	mov	r0, r3
 800e644:	f7fd ff57 	bl	800c4f6 <get_fat>
 800e648:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800e64a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e64c:	2b01      	cmp	r3, #1
 800e64e:	d802      	bhi.n	800e656 <f_open+0x2de>
 800e650:	2302      	movs	r3, #2
 800e652:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e656:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e658:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e65c:	d102      	bne.n	800e664 <f_open+0x2ec>
 800e65e:	2301      	movs	r3, #1
 800e660:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e664:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e668:	1ad3      	subs	r3, r2, r3
 800e66a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e66c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e670:	2b00      	cmp	r3, #0
 800e672:	d103      	bne.n	800e67c <f_open+0x304>
 800e674:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e678:	429a      	cmp	r2, r3
 800e67a:	d8e0      	bhi.n	800e63e <f_open+0x2c6>
				}
				fp->clust = clst;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e680:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e682:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e686:	2b00      	cmp	r3, #0
 800e688:	d127      	bne.n	800e6da <f_open+0x362>
 800e68a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e68c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e690:	2b00      	cmp	r3, #0
 800e692:	d022      	beq.n	800e6da <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e694:	697b      	ldr	r3, [r7, #20]
 800e696:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e698:	4618      	mov	r0, r3
 800e69a:	f7fd ff0d 	bl	800c4b8 <clust2sect>
 800e69e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e6a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d103      	bne.n	800e6ae <f_open+0x336>
						res = FR_INT_ERR;
 800e6a6:	2302      	movs	r3, #2
 800e6a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e6ac:	e015      	b.n	800e6da <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e6ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e6b0:	0a5a      	lsrs	r2, r3, #9
 800e6b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6b4:	441a      	add	r2, r3
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e6ba:	697b      	ldr	r3, [r7, #20]
 800e6bc:	7858      	ldrb	r0, [r3, #1]
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	6a1a      	ldr	r2, [r3, #32]
 800e6c8:	2301      	movs	r3, #1
 800e6ca:	f7fd fb4b 	bl	800bd64 <disk_read>
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d002      	beq.n	800e6da <f_open+0x362>
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e6da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d002      	beq.n	800e6e8 <f_open+0x370>
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e6e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	3768      	adds	r7, #104	; 0x68
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bd80      	pop	{r7, pc}

0800e6f4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b08c      	sub	sp, #48	; 0x30
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	60f8      	str	r0, [r7, #12]
 800e6fc:	60b9      	str	r1, [r7, #8]
 800e6fe:	607a      	str	r2, [r7, #4]
 800e700:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e702:	68bb      	ldr	r3, [r7, #8]
 800e704:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	2200      	movs	r2, #0
 800e70a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	f107 0210 	add.w	r2, r7, #16
 800e712:	4611      	mov	r1, r2
 800e714:	4618      	mov	r0, r3
 800e716:	f7ff fdb3 	bl	800e280 <validate>
 800e71a:	4603      	mov	r3, r0
 800e71c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e720:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e724:	2b00      	cmp	r3, #0
 800e726:	d107      	bne.n	800e738 <f_write+0x44>
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	7d5b      	ldrb	r3, [r3, #21]
 800e72c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e730:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e734:	2b00      	cmp	r3, #0
 800e736:	d002      	beq.n	800e73e <f_write+0x4a>
 800e738:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e73c:	e14b      	b.n	800e9d6 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	7d1b      	ldrb	r3, [r3, #20]
 800e742:	f003 0302 	and.w	r3, r3, #2
 800e746:	2b00      	cmp	r3, #0
 800e748:	d101      	bne.n	800e74e <f_write+0x5a>
 800e74a:	2307      	movs	r3, #7
 800e74c:	e143      	b.n	800e9d6 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	699a      	ldr	r2, [r3, #24]
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	441a      	add	r2, r3
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	699b      	ldr	r3, [r3, #24]
 800e75a:	429a      	cmp	r2, r3
 800e75c:	f080 812d 	bcs.w	800e9ba <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	699b      	ldr	r3, [r3, #24]
 800e764:	43db      	mvns	r3, r3
 800e766:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e768:	e127      	b.n	800e9ba <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	699b      	ldr	r3, [r3, #24]
 800e76e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e772:	2b00      	cmp	r3, #0
 800e774:	f040 80e3 	bne.w	800e93e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	699b      	ldr	r3, [r3, #24]
 800e77c:	0a5b      	lsrs	r3, r3, #9
 800e77e:	693a      	ldr	r2, [r7, #16]
 800e780:	8952      	ldrh	r2, [r2, #10]
 800e782:	3a01      	subs	r2, #1
 800e784:	4013      	ands	r3, r2
 800e786:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e788:	69bb      	ldr	r3, [r7, #24]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d143      	bne.n	800e816 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	699b      	ldr	r3, [r3, #24]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d10c      	bne.n	800e7b0 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	689b      	ldr	r3, [r3, #8]
 800e79a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d11a      	bne.n	800e7d8 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	2100      	movs	r1, #0
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f7fe f89c 	bl	800c8e4 <create_chain>
 800e7ac:	62b8      	str	r0, [r7, #40]	; 0x28
 800e7ae:	e013      	b.n	800e7d8 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d007      	beq.n	800e7c8 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	699b      	ldr	r3, [r3, #24]
 800e7bc:	4619      	mov	r1, r3
 800e7be:	68f8      	ldr	r0, [r7, #12]
 800e7c0:	f7fe f928 	bl	800ca14 <clmt_clust>
 800e7c4:	62b8      	str	r0, [r7, #40]	; 0x28
 800e7c6:	e007      	b.n	800e7d8 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e7c8:	68fa      	ldr	r2, [r7, #12]
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	69db      	ldr	r3, [r3, #28]
 800e7ce:	4619      	mov	r1, r3
 800e7d0:	4610      	mov	r0, r2
 800e7d2:	f7fe f887 	bl	800c8e4 <create_chain>
 800e7d6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	f000 80f2 	beq.w	800e9c4 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e2:	2b01      	cmp	r3, #1
 800e7e4:	d104      	bne.n	800e7f0 <f_write+0xfc>
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	2202      	movs	r2, #2
 800e7ea:	755a      	strb	r2, [r3, #21]
 800e7ec:	2302      	movs	r3, #2
 800e7ee:	e0f2      	b.n	800e9d6 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e7f6:	d104      	bne.n	800e802 <f_write+0x10e>
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	2201      	movs	r2, #1
 800e7fc:	755a      	strb	r2, [r3, #21]
 800e7fe:	2301      	movs	r3, #1
 800e800:	e0e9      	b.n	800e9d6 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e806:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	689b      	ldr	r3, [r3, #8]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d102      	bne.n	800e816 <f_write+0x122>
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e814:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	7d1b      	ldrb	r3, [r3, #20]
 800e81a:	b25b      	sxtb	r3, r3
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	da18      	bge.n	800e852 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e820:	693b      	ldr	r3, [r7, #16]
 800e822:	7858      	ldrb	r0, [r3, #1]
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	6a1a      	ldr	r2, [r3, #32]
 800e82e:	2301      	movs	r3, #1
 800e830:	f7fd fab8 	bl	800bda4 <disk_write>
 800e834:	4603      	mov	r3, r0
 800e836:	2b00      	cmp	r3, #0
 800e838:	d004      	beq.n	800e844 <f_write+0x150>
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	2201      	movs	r2, #1
 800e83e:	755a      	strb	r2, [r3, #21]
 800e840:	2301      	movs	r3, #1
 800e842:	e0c8      	b.n	800e9d6 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	7d1b      	ldrb	r3, [r3, #20]
 800e848:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e84c:	b2da      	uxtb	r2, r3
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e852:	693a      	ldr	r2, [r7, #16]
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	69db      	ldr	r3, [r3, #28]
 800e858:	4619      	mov	r1, r3
 800e85a:	4610      	mov	r0, r2
 800e85c:	f7fd fe2c 	bl	800c4b8 <clust2sect>
 800e860:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d104      	bne.n	800e872 <f_write+0x17e>
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	2202      	movs	r2, #2
 800e86c:	755a      	strb	r2, [r3, #21]
 800e86e:	2302      	movs	r3, #2
 800e870:	e0b1      	b.n	800e9d6 <f_write+0x2e2>
			sect += csect;
 800e872:	697a      	ldr	r2, [r7, #20]
 800e874:	69bb      	ldr	r3, [r7, #24]
 800e876:	4413      	add	r3, r2
 800e878:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	0a5b      	lsrs	r3, r3, #9
 800e87e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e880:	6a3b      	ldr	r3, [r7, #32]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d03c      	beq.n	800e900 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e886:	69ba      	ldr	r2, [r7, #24]
 800e888:	6a3b      	ldr	r3, [r7, #32]
 800e88a:	4413      	add	r3, r2
 800e88c:	693a      	ldr	r2, [r7, #16]
 800e88e:	8952      	ldrh	r2, [r2, #10]
 800e890:	4293      	cmp	r3, r2
 800e892:	d905      	bls.n	800e8a0 <f_write+0x1ac>
					cc = fs->csize - csect;
 800e894:	693b      	ldr	r3, [r7, #16]
 800e896:	895b      	ldrh	r3, [r3, #10]
 800e898:	461a      	mov	r2, r3
 800e89a:	69bb      	ldr	r3, [r7, #24]
 800e89c:	1ad3      	subs	r3, r2, r3
 800e89e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e8a0:	693b      	ldr	r3, [r7, #16]
 800e8a2:	7858      	ldrb	r0, [r3, #1]
 800e8a4:	6a3b      	ldr	r3, [r7, #32]
 800e8a6:	697a      	ldr	r2, [r7, #20]
 800e8a8:	69f9      	ldr	r1, [r7, #28]
 800e8aa:	f7fd fa7b 	bl	800bda4 <disk_write>
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d004      	beq.n	800e8be <f_write+0x1ca>
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	2201      	movs	r2, #1
 800e8b8:	755a      	strb	r2, [r3, #21]
 800e8ba:	2301      	movs	r3, #1
 800e8bc:	e08b      	b.n	800e9d6 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	6a1a      	ldr	r2, [r3, #32]
 800e8c2:	697b      	ldr	r3, [r7, #20]
 800e8c4:	1ad3      	subs	r3, r2, r3
 800e8c6:	6a3a      	ldr	r2, [r7, #32]
 800e8c8:	429a      	cmp	r2, r3
 800e8ca:	d915      	bls.n	800e8f8 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	6a1a      	ldr	r2, [r3, #32]
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	1ad3      	subs	r3, r2, r3
 800e8da:	025b      	lsls	r3, r3, #9
 800e8dc:	69fa      	ldr	r2, [r7, #28]
 800e8de:	4413      	add	r3, r2
 800e8e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e8e4:	4619      	mov	r1, r3
 800e8e6:	f7fd fb1d 	bl	800bf24 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	7d1b      	ldrb	r3, [r3, #20]
 800e8ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e8f2:	b2da      	uxtb	r2, r3
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e8f8:	6a3b      	ldr	r3, [r7, #32]
 800e8fa:	025b      	lsls	r3, r3, #9
 800e8fc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800e8fe:	e03f      	b.n	800e980 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	6a1b      	ldr	r3, [r3, #32]
 800e904:	697a      	ldr	r2, [r7, #20]
 800e906:	429a      	cmp	r2, r3
 800e908:	d016      	beq.n	800e938 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	699a      	ldr	r2, [r3, #24]
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e912:	429a      	cmp	r2, r3
 800e914:	d210      	bcs.n	800e938 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e916:	693b      	ldr	r3, [r7, #16]
 800e918:	7858      	ldrb	r0, [r3, #1]
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e920:	2301      	movs	r3, #1
 800e922:	697a      	ldr	r2, [r7, #20]
 800e924:	f7fd fa1e 	bl	800bd64 <disk_read>
 800e928:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d004      	beq.n	800e938 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	2201      	movs	r2, #1
 800e932:	755a      	strb	r2, [r3, #21]
 800e934:	2301      	movs	r3, #1
 800e936:	e04e      	b.n	800e9d6 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	697a      	ldr	r2, [r7, #20]
 800e93c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	699b      	ldr	r3, [r3, #24]
 800e942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e946:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e94a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e94c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	429a      	cmp	r2, r3
 800e952:	d901      	bls.n	800e958 <f_write+0x264>
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	699b      	ldr	r3, [r3, #24]
 800e962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e966:	4413      	add	r3, r2
 800e968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e96a:	69f9      	ldr	r1, [r7, #28]
 800e96c:	4618      	mov	r0, r3
 800e96e:	f7fd fad9 	bl	800bf24 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	7d1b      	ldrb	r3, [r3, #20]
 800e976:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e97a:	b2da      	uxtb	r2, r3
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e980:	69fa      	ldr	r2, [r7, #28]
 800e982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e984:	4413      	add	r3, r2
 800e986:	61fb      	str	r3, [r7, #28]
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	699a      	ldr	r2, [r3, #24]
 800e98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e98e:	441a      	add	r2, r3
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	619a      	str	r2, [r3, #24]
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	68da      	ldr	r2, [r3, #12]
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	699b      	ldr	r3, [r3, #24]
 800e99c:	429a      	cmp	r2, r3
 800e99e:	bf38      	it	cc
 800e9a0:	461a      	movcc	r2, r3
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	60da      	str	r2, [r3, #12]
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	681a      	ldr	r2, [r3, #0]
 800e9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ac:	441a      	add	r2, r3
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	601a      	str	r2, [r3, #0]
 800e9b2:	687a      	ldr	r2, [r7, #4]
 800e9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b6:	1ad3      	subs	r3, r2, r3
 800e9b8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	f47f aed4 	bne.w	800e76a <f_write+0x76>
 800e9c2:	e000      	b.n	800e9c6 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e9c4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	7d1b      	ldrb	r3, [r3, #20]
 800e9ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9ce:	b2da      	uxtb	r2, r3
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e9d4:	2300      	movs	r3, #0
}
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	3730      	adds	r7, #48	; 0x30
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	bd80      	pop	{r7, pc}

0800e9de <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e9de:	b580      	push	{r7, lr}
 800e9e0:	b086      	sub	sp, #24
 800e9e2:	af00      	add	r7, sp, #0
 800e9e4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f107 0208 	add.w	r2, r7, #8
 800e9ec:	4611      	mov	r1, r2
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f7ff fc46 	bl	800e280 <validate>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e9f8:	7dfb      	ldrb	r3, [r7, #23]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d168      	bne.n	800ead0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	7d1b      	ldrb	r3, [r3, #20]
 800ea02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d062      	beq.n	800ead0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	7d1b      	ldrb	r3, [r3, #20]
 800ea0e:	b25b      	sxtb	r3, r3
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	da15      	bge.n	800ea40 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ea14:	68bb      	ldr	r3, [r7, #8]
 800ea16:	7858      	ldrb	r0, [r3, #1]
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	6a1a      	ldr	r2, [r3, #32]
 800ea22:	2301      	movs	r3, #1
 800ea24:	f7fd f9be 	bl	800bda4 <disk_write>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d001      	beq.n	800ea32 <f_sync+0x54>
 800ea2e:	2301      	movs	r3, #1
 800ea30:	e04f      	b.n	800ead2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	7d1b      	ldrb	r3, [r3, #20]
 800ea36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea3a:	b2da      	uxtb	r2, r3
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ea40:	f7fa ff22 	bl	8009888 <get_fattime>
 800ea44:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ea46:	68ba      	ldr	r2, [r7, #8]
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea4c:	4619      	mov	r1, r3
 800ea4e:	4610      	mov	r0, r2
 800ea50:	f7fd fc96 	bl	800c380 <move_window>
 800ea54:	4603      	mov	r3, r0
 800ea56:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ea58:	7dfb      	ldrb	r3, [r7, #23]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d138      	bne.n	800ead0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea62:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	330b      	adds	r3, #11
 800ea68:	781a      	ldrb	r2, [r3, #0]
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	330b      	adds	r3, #11
 800ea6e:	f042 0220 	orr.w	r2, r2, #32
 800ea72:	b2d2      	uxtb	r2, r2
 800ea74:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	6818      	ldr	r0, [r3, #0]
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	689b      	ldr	r3, [r3, #8]
 800ea7e:	461a      	mov	r2, r3
 800ea80:	68f9      	ldr	r1, [r7, #12]
 800ea82:	f7fe f9a1 	bl	800cdc8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	f103 021c 	add.w	r2, r3, #28
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	68db      	ldr	r3, [r3, #12]
 800ea90:	4619      	mov	r1, r3
 800ea92:	4610      	mov	r0, r2
 800ea94:	f7fd fa1a 	bl	800becc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	3316      	adds	r3, #22
 800ea9c:	6939      	ldr	r1, [r7, #16]
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	f7fd fa14 	bl	800becc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	3312      	adds	r3, #18
 800eaa8:	2100      	movs	r1, #0
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f7fd f9f3 	bl	800be96 <st_word>
					fs->wflag = 1;
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	2201      	movs	r2, #1
 800eab4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800eab6:	68bb      	ldr	r3, [r7, #8]
 800eab8:	4618      	mov	r0, r3
 800eaba:	f7fd fc8f 	bl	800c3dc <sync_fs>
 800eabe:	4603      	mov	r3, r0
 800eac0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	7d1b      	ldrb	r3, [r3, #20]
 800eac6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eaca:	b2da      	uxtb	r2, r3
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ead0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ead2:	4618      	mov	r0, r3
 800ead4:	3718      	adds	r7, #24
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd80      	pop	{r7, pc}

0800eada <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800eada:	b580      	push	{r7, lr}
 800eadc:	b084      	sub	sp, #16
 800eade:	af00      	add	r7, sp, #0
 800eae0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800eae2:	6878      	ldr	r0, [r7, #4]
 800eae4:	f7ff ff7b 	bl	800e9de <f_sync>
 800eae8:	4603      	mov	r3, r0
 800eaea:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800eaec:	7bfb      	ldrb	r3, [r7, #15]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d118      	bne.n	800eb24 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	f107 0208 	add.w	r2, r7, #8
 800eaf8:	4611      	mov	r1, r2
 800eafa:	4618      	mov	r0, r3
 800eafc:	f7ff fbc0 	bl	800e280 <validate>
 800eb00:	4603      	mov	r3, r0
 800eb02:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800eb04:	7bfb      	ldrb	r3, [r7, #15]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d10c      	bne.n	800eb24 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	691b      	ldr	r3, [r3, #16]
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f7fd fb92 	bl	800c238 <dec_lock>
 800eb14:	4603      	mov	r3, r0
 800eb16:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800eb18:	7bfb      	ldrb	r3, [r7, #15]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d102      	bne.n	800eb24 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	2200      	movs	r2, #0
 800eb22:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800eb24:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb26:	4618      	mov	r0, r3
 800eb28:	3710      	adds	r7, #16
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	bd80      	pop	{r7, pc}

0800eb2e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800eb2e:	b580      	push	{r7, lr}
 800eb30:	b086      	sub	sp, #24
 800eb32:	af00      	add	r7, sp, #0
 800eb34:	6078      	str	r0, [r7, #4]
 800eb36:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d101      	bne.n	800eb42 <f_opendir+0x14>
 800eb3e:	2309      	movs	r3, #9
 800eb40:	e064      	b.n	800ec0c <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800eb46:	f107 010c 	add.w	r1, r7, #12
 800eb4a:	463b      	mov	r3, r7
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	4618      	mov	r0, r3
 800eb50:	f7ff f946 	bl	800dde0 <find_volume>
 800eb54:	4603      	mov	r3, r0
 800eb56:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800eb58:	7dfb      	ldrb	r3, [r7, #23]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d14f      	bne.n	800ebfe <f_opendir+0xd0>
		obj->fs = fs;
 800eb5e:	68fa      	ldr	r2, [r7, #12]
 800eb60:	693b      	ldr	r3, [r7, #16]
 800eb62:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800eb64:	683b      	ldr	r3, [r7, #0]
 800eb66:	4619      	mov	r1, r3
 800eb68:	6878      	ldr	r0, [r7, #4]
 800eb6a:	f7ff f82d 	bl	800dbc8 <follow_path>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800eb72:	7dfb      	ldrb	r3, [r7, #23]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d13d      	bne.n	800ebf4 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800eb7e:	b25b      	sxtb	r3, r3
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	db12      	blt.n	800ebaa <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800eb84:	693b      	ldr	r3, [r7, #16]
 800eb86:	799b      	ldrb	r3, [r3, #6]
 800eb88:	f003 0310 	and.w	r3, r3, #16
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d00a      	beq.n	800eba6 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800eb90:	68fa      	ldr	r2, [r7, #12]
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	6a1b      	ldr	r3, [r3, #32]
 800eb96:	4619      	mov	r1, r3
 800eb98:	4610      	mov	r0, r2
 800eb9a:	f7fe f8f6 	bl	800cd8a <ld_clust>
 800eb9e:	4602      	mov	r2, r0
 800eba0:	693b      	ldr	r3, [r7, #16]
 800eba2:	609a      	str	r2, [r3, #8]
 800eba4:	e001      	b.n	800ebaa <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800eba6:	2305      	movs	r3, #5
 800eba8:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800ebaa:	7dfb      	ldrb	r3, [r7, #23]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d121      	bne.n	800ebf4 <f_opendir+0xc6>
				obj->id = fs->id;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	88da      	ldrh	r2, [r3, #6]
 800ebb4:	693b      	ldr	r3, [r7, #16]
 800ebb6:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800ebb8:	2100      	movs	r1, #0
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f7fd ff5e 	bl	800ca7c <dir_sdi>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800ebc4:	7dfb      	ldrb	r3, [r7, #23]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d114      	bne.n	800ebf4 <f_opendir+0xc6>
					if (obj->sclust) {
 800ebca:	693b      	ldr	r3, [r7, #16]
 800ebcc:	689b      	ldr	r3, [r3, #8]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d00d      	beq.n	800ebee <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800ebd2:	2100      	movs	r1, #0
 800ebd4:	6878      	ldr	r0, [r7, #4]
 800ebd6:	f7fd faa1 	bl	800c11c <inc_lock>
 800ebda:	4602      	mov	r2, r0
 800ebdc:	693b      	ldr	r3, [r7, #16]
 800ebde:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800ebe0:	693b      	ldr	r3, [r7, #16]
 800ebe2:	691b      	ldr	r3, [r3, #16]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d105      	bne.n	800ebf4 <f_opendir+0xc6>
 800ebe8:	2312      	movs	r3, #18
 800ebea:	75fb      	strb	r3, [r7, #23]
 800ebec:	e002      	b.n	800ebf4 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800ebee:	693b      	ldr	r3, [r7, #16]
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800ebf4:	7dfb      	ldrb	r3, [r7, #23]
 800ebf6:	2b04      	cmp	r3, #4
 800ebf8:	d101      	bne.n	800ebfe <f_opendir+0xd0>
 800ebfa:	2305      	movs	r3, #5
 800ebfc:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800ebfe:	7dfb      	ldrb	r3, [r7, #23]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d002      	beq.n	800ec0a <f_opendir+0xdc>
 800ec04:	693b      	ldr	r3, [r7, #16]
 800ec06:	2200      	movs	r2, #0
 800ec08:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ec0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	3718      	adds	r7, #24
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bd80      	pop	{r7, pc}

0800ec14 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b084      	sub	sp, #16
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	f107 0208 	add.w	r2, r7, #8
 800ec22:	4611      	mov	r1, r2
 800ec24:	4618      	mov	r0, r3
 800ec26:	f7ff fb2b 	bl	800e280 <validate>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ec2e:	7bfb      	ldrb	r3, [r7, #15]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d110      	bne.n	800ec56 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	691b      	ldr	r3, [r3, #16]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d006      	beq.n	800ec4a <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	691b      	ldr	r3, [r3, #16]
 800ec40:	4618      	mov	r0, r3
 800ec42:	f7fd faf9 	bl	800c238 <dec_lock>
 800ec46:	4603      	mov	r3, r0
 800ec48:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800ec4a:	7bfb      	ldrb	r3, [r7, #15]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d102      	bne.n	800ec56 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	2200      	movs	r2, #0
 800ec54:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800ec56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec58:	4618      	mov	r0, r3
 800ec5a:	3710      	adds	r7, #16
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}

0800ec60 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b084      	sub	sp, #16
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
 800ec68:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	f107 0208 	add.w	r2, r7, #8
 800ec70:	4611      	mov	r1, r2
 800ec72:	4618      	mov	r0, r3
 800ec74:	f7ff fb04 	bl	800e280 <validate>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ec7c:	7bfb      	ldrb	r3, [r7, #15]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d126      	bne.n	800ecd0 <f_readdir+0x70>
		if (!fno) {
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d106      	bne.n	800ec96 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800ec88:	2100      	movs	r1, #0
 800ec8a:	6878      	ldr	r0, [r7, #4]
 800ec8c:	f7fd fef6 	bl	800ca7c <dir_sdi>
 800ec90:	4603      	mov	r3, r0
 800ec92:	73fb      	strb	r3, [r7, #15]
 800ec94:	e01c      	b.n	800ecd0 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800ec96:	2100      	movs	r1, #0
 800ec98:	6878      	ldr	r0, [r7, #4]
 800ec9a:	f7fe faa0 	bl	800d1de <dir_read>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800eca2:	7bfb      	ldrb	r3, [r7, #15]
 800eca4:	2b04      	cmp	r3, #4
 800eca6:	d101      	bne.n	800ecac <f_readdir+0x4c>
 800eca8:	2300      	movs	r3, #0
 800ecaa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800ecac:	7bfb      	ldrb	r3, [r7, #15]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d10e      	bne.n	800ecd0 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800ecb2:	6839      	ldr	r1, [r7, #0]
 800ecb4:	6878      	ldr	r0, [r7, #4]
 800ecb6:	f7fe fcf1 	bl	800d69c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800ecba:	2100      	movs	r1, #0
 800ecbc:	6878      	ldr	r0, [r7, #4]
 800ecbe:	f7fd ff58 	bl	800cb72 <dir_next>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800ecc6:	7bfb      	ldrb	r3, [r7, #15]
 800ecc8:	2b04      	cmp	r3, #4
 800ecca:	d101      	bne.n	800ecd0 <f_readdir+0x70>
 800eccc:	2300      	movs	r3, #0
 800ecce:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800ecd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	3710      	adds	r7, #16
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}
	...

0800ecdc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ecdc:	b480      	push	{r7}
 800ecde:	b087      	sub	sp, #28
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	60f8      	str	r0, [r7, #12]
 800ece4:	60b9      	str	r1, [r7, #8]
 800ece6:	4613      	mov	r3, r2
 800ece8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ecea:	2301      	movs	r3, #1
 800ecec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ecee:	2300      	movs	r3, #0
 800ecf0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ecf2:	4b1f      	ldr	r3, [pc, #124]	; (800ed70 <FATFS_LinkDriverEx+0x94>)
 800ecf4:	7a5b      	ldrb	r3, [r3, #9]
 800ecf6:	b2db      	uxtb	r3, r3
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d131      	bne.n	800ed60 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ecfc:	4b1c      	ldr	r3, [pc, #112]	; (800ed70 <FATFS_LinkDriverEx+0x94>)
 800ecfe:	7a5b      	ldrb	r3, [r3, #9]
 800ed00:	b2db      	uxtb	r3, r3
 800ed02:	461a      	mov	r2, r3
 800ed04:	4b1a      	ldr	r3, [pc, #104]	; (800ed70 <FATFS_LinkDriverEx+0x94>)
 800ed06:	2100      	movs	r1, #0
 800ed08:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ed0a:	4b19      	ldr	r3, [pc, #100]	; (800ed70 <FATFS_LinkDriverEx+0x94>)
 800ed0c:	7a5b      	ldrb	r3, [r3, #9]
 800ed0e:	b2db      	uxtb	r3, r3
 800ed10:	4a17      	ldr	r2, [pc, #92]	; (800ed70 <FATFS_LinkDriverEx+0x94>)
 800ed12:	009b      	lsls	r3, r3, #2
 800ed14:	4413      	add	r3, r2
 800ed16:	68fa      	ldr	r2, [r7, #12]
 800ed18:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ed1a:	4b15      	ldr	r3, [pc, #84]	; (800ed70 <FATFS_LinkDriverEx+0x94>)
 800ed1c:	7a5b      	ldrb	r3, [r3, #9]
 800ed1e:	b2db      	uxtb	r3, r3
 800ed20:	461a      	mov	r2, r3
 800ed22:	4b13      	ldr	r3, [pc, #76]	; (800ed70 <FATFS_LinkDriverEx+0x94>)
 800ed24:	4413      	add	r3, r2
 800ed26:	79fa      	ldrb	r2, [r7, #7]
 800ed28:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ed2a:	4b11      	ldr	r3, [pc, #68]	; (800ed70 <FATFS_LinkDriverEx+0x94>)
 800ed2c:	7a5b      	ldrb	r3, [r3, #9]
 800ed2e:	b2db      	uxtb	r3, r3
 800ed30:	1c5a      	adds	r2, r3, #1
 800ed32:	b2d1      	uxtb	r1, r2
 800ed34:	4a0e      	ldr	r2, [pc, #56]	; (800ed70 <FATFS_LinkDriverEx+0x94>)
 800ed36:	7251      	strb	r1, [r2, #9]
 800ed38:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ed3a:	7dbb      	ldrb	r3, [r7, #22]
 800ed3c:	3330      	adds	r3, #48	; 0x30
 800ed3e:	b2da      	uxtb	r2, r3
 800ed40:	68bb      	ldr	r3, [r7, #8]
 800ed42:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	3301      	adds	r3, #1
 800ed48:	223a      	movs	r2, #58	; 0x3a
 800ed4a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	3302      	adds	r3, #2
 800ed50:	222f      	movs	r2, #47	; 0x2f
 800ed52:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ed54:	68bb      	ldr	r3, [r7, #8]
 800ed56:	3303      	adds	r3, #3
 800ed58:	2200      	movs	r2, #0
 800ed5a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ed60:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed62:	4618      	mov	r0, r3
 800ed64:	371c      	adds	r7, #28
 800ed66:	46bd      	mov	sp, r7
 800ed68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6c:	4770      	bx	lr
 800ed6e:	bf00      	nop
 800ed70:	20003478 	.word	0x20003478

0800ed74 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b082      	sub	sp, #8
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
 800ed7c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ed7e:	2200      	movs	r2, #0
 800ed80:	6839      	ldr	r1, [r7, #0]
 800ed82:	6878      	ldr	r0, [r7, #4]
 800ed84:	f7ff ffaa 	bl	800ecdc <FATFS_LinkDriverEx>
 800ed88:	4603      	mov	r3, r0
}
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	3708      	adds	r7, #8
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}
	...

0800ed94 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ed94:	b480      	push	{r7}
 800ed96:	b085      	sub	sp, #20
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	6039      	str	r1, [r7, #0]
 800ed9e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800eda0:	88fb      	ldrh	r3, [r7, #6]
 800eda2:	2b7f      	cmp	r3, #127	; 0x7f
 800eda4:	d802      	bhi.n	800edac <ff_convert+0x18>
		c = chr;
 800eda6:	88fb      	ldrh	r3, [r7, #6]
 800eda8:	81fb      	strh	r3, [r7, #14]
 800edaa:	e025      	b.n	800edf8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d00b      	beq.n	800edca <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800edb2:	88fb      	ldrh	r3, [r7, #6]
 800edb4:	2bff      	cmp	r3, #255	; 0xff
 800edb6:	d805      	bhi.n	800edc4 <ff_convert+0x30>
 800edb8:	88fb      	ldrh	r3, [r7, #6]
 800edba:	3b80      	subs	r3, #128	; 0x80
 800edbc:	4a12      	ldr	r2, [pc, #72]	; (800ee08 <ff_convert+0x74>)
 800edbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800edc2:	e000      	b.n	800edc6 <ff_convert+0x32>
 800edc4:	2300      	movs	r3, #0
 800edc6:	81fb      	strh	r3, [r7, #14]
 800edc8:	e016      	b.n	800edf8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800edca:	2300      	movs	r3, #0
 800edcc:	81fb      	strh	r3, [r7, #14]
 800edce:	e009      	b.n	800ede4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800edd0:	89fb      	ldrh	r3, [r7, #14]
 800edd2:	4a0d      	ldr	r2, [pc, #52]	; (800ee08 <ff_convert+0x74>)
 800edd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800edd8:	88fa      	ldrh	r2, [r7, #6]
 800edda:	429a      	cmp	r2, r3
 800eddc:	d006      	beq.n	800edec <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800edde:	89fb      	ldrh	r3, [r7, #14]
 800ede0:	3301      	adds	r3, #1
 800ede2:	81fb      	strh	r3, [r7, #14]
 800ede4:	89fb      	ldrh	r3, [r7, #14]
 800ede6:	2b7f      	cmp	r3, #127	; 0x7f
 800ede8:	d9f2      	bls.n	800edd0 <ff_convert+0x3c>
 800edea:	e000      	b.n	800edee <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800edec:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800edee:	89fb      	ldrh	r3, [r7, #14]
 800edf0:	3380      	adds	r3, #128	; 0x80
 800edf2:	b29b      	uxth	r3, r3
 800edf4:	b2db      	uxtb	r3, r3
 800edf6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800edf8:	89fb      	ldrh	r3, [r7, #14]
}
 800edfa:	4618      	mov	r0, r3
 800edfc:	3714      	adds	r7, #20
 800edfe:	46bd      	mov	sp, r7
 800ee00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee04:	4770      	bx	lr
 800ee06:	bf00      	nop
 800ee08:	08011340 	.word	0x08011340

0800ee0c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ee0c:	b480      	push	{r7}
 800ee0e:	b087      	sub	sp, #28
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	4603      	mov	r3, r0
 800ee14:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ee16:	88fb      	ldrh	r3, [r7, #6]
 800ee18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee1c:	d201      	bcs.n	800ee22 <ff_wtoupper+0x16>
 800ee1e:	4b3e      	ldr	r3, [pc, #248]	; (800ef18 <ff_wtoupper+0x10c>)
 800ee20:	e000      	b.n	800ee24 <ff_wtoupper+0x18>
 800ee22:	4b3e      	ldr	r3, [pc, #248]	; (800ef1c <ff_wtoupper+0x110>)
 800ee24:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ee26:	697b      	ldr	r3, [r7, #20]
 800ee28:	1c9a      	adds	r2, r3, #2
 800ee2a:	617a      	str	r2, [r7, #20]
 800ee2c:	881b      	ldrh	r3, [r3, #0]
 800ee2e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ee30:	8a7b      	ldrh	r3, [r7, #18]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d068      	beq.n	800ef08 <ff_wtoupper+0xfc>
 800ee36:	88fa      	ldrh	r2, [r7, #6]
 800ee38:	8a7b      	ldrh	r3, [r7, #18]
 800ee3a:	429a      	cmp	r2, r3
 800ee3c:	d364      	bcc.n	800ef08 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ee3e:	697b      	ldr	r3, [r7, #20]
 800ee40:	1c9a      	adds	r2, r3, #2
 800ee42:	617a      	str	r2, [r7, #20]
 800ee44:	881b      	ldrh	r3, [r3, #0]
 800ee46:	823b      	strh	r3, [r7, #16]
 800ee48:	8a3b      	ldrh	r3, [r7, #16]
 800ee4a:	0a1b      	lsrs	r3, r3, #8
 800ee4c:	81fb      	strh	r3, [r7, #14]
 800ee4e:	8a3b      	ldrh	r3, [r7, #16]
 800ee50:	b2db      	uxtb	r3, r3
 800ee52:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ee54:	88fa      	ldrh	r2, [r7, #6]
 800ee56:	8a79      	ldrh	r1, [r7, #18]
 800ee58:	8a3b      	ldrh	r3, [r7, #16]
 800ee5a:	440b      	add	r3, r1
 800ee5c:	429a      	cmp	r2, r3
 800ee5e:	da49      	bge.n	800eef4 <ff_wtoupper+0xe8>
			switch (cmd) {
 800ee60:	89fb      	ldrh	r3, [r7, #14]
 800ee62:	2b08      	cmp	r3, #8
 800ee64:	d84f      	bhi.n	800ef06 <ff_wtoupper+0xfa>
 800ee66:	a201      	add	r2, pc, #4	; (adr r2, 800ee6c <ff_wtoupper+0x60>)
 800ee68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee6c:	0800ee91 	.word	0x0800ee91
 800ee70:	0800eea3 	.word	0x0800eea3
 800ee74:	0800eeb9 	.word	0x0800eeb9
 800ee78:	0800eec1 	.word	0x0800eec1
 800ee7c:	0800eec9 	.word	0x0800eec9
 800ee80:	0800eed1 	.word	0x0800eed1
 800ee84:	0800eed9 	.word	0x0800eed9
 800ee88:	0800eee1 	.word	0x0800eee1
 800ee8c:	0800eee9 	.word	0x0800eee9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ee90:	88fa      	ldrh	r2, [r7, #6]
 800ee92:	8a7b      	ldrh	r3, [r7, #18]
 800ee94:	1ad3      	subs	r3, r2, r3
 800ee96:	005b      	lsls	r3, r3, #1
 800ee98:	697a      	ldr	r2, [r7, #20]
 800ee9a:	4413      	add	r3, r2
 800ee9c:	881b      	ldrh	r3, [r3, #0]
 800ee9e:	80fb      	strh	r3, [r7, #6]
 800eea0:	e027      	b.n	800eef2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800eea2:	88fa      	ldrh	r2, [r7, #6]
 800eea4:	8a7b      	ldrh	r3, [r7, #18]
 800eea6:	1ad3      	subs	r3, r2, r3
 800eea8:	b29b      	uxth	r3, r3
 800eeaa:	f003 0301 	and.w	r3, r3, #1
 800eeae:	b29b      	uxth	r3, r3
 800eeb0:	88fa      	ldrh	r2, [r7, #6]
 800eeb2:	1ad3      	subs	r3, r2, r3
 800eeb4:	80fb      	strh	r3, [r7, #6]
 800eeb6:	e01c      	b.n	800eef2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800eeb8:	88fb      	ldrh	r3, [r7, #6]
 800eeba:	3b10      	subs	r3, #16
 800eebc:	80fb      	strh	r3, [r7, #6]
 800eebe:	e018      	b.n	800eef2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800eec0:	88fb      	ldrh	r3, [r7, #6]
 800eec2:	3b20      	subs	r3, #32
 800eec4:	80fb      	strh	r3, [r7, #6]
 800eec6:	e014      	b.n	800eef2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800eec8:	88fb      	ldrh	r3, [r7, #6]
 800eeca:	3b30      	subs	r3, #48	; 0x30
 800eecc:	80fb      	strh	r3, [r7, #6]
 800eece:	e010      	b.n	800eef2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800eed0:	88fb      	ldrh	r3, [r7, #6]
 800eed2:	3b1a      	subs	r3, #26
 800eed4:	80fb      	strh	r3, [r7, #6]
 800eed6:	e00c      	b.n	800eef2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800eed8:	88fb      	ldrh	r3, [r7, #6]
 800eeda:	3308      	adds	r3, #8
 800eedc:	80fb      	strh	r3, [r7, #6]
 800eede:	e008      	b.n	800eef2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800eee0:	88fb      	ldrh	r3, [r7, #6]
 800eee2:	3b50      	subs	r3, #80	; 0x50
 800eee4:	80fb      	strh	r3, [r7, #6]
 800eee6:	e004      	b.n	800eef2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800eee8:	88fb      	ldrh	r3, [r7, #6]
 800eeea:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800eeee:	80fb      	strh	r3, [r7, #6]
 800eef0:	bf00      	nop
			}
			break;
 800eef2:	e008      	b.n	800ef06 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800eef4:	89fb      	ldrh	r3, [r7, #14]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d195      	bne.n	800ee26 <ff_wtoupper+0x1a>
 800eefa:	8a3b      	ldrh	r3, [r7, #16]
 800eefc:	005b      	lsls	r3, r3, #1
 800eefe:	697a      	ldr	r2, [r7, #20]
 800ef00:	4413      	add	r3, r2
 800ef02:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ef04:	e78f      	b.n	800ee26 <ff_wtoupper+0x1a>
			break;
 800ef06:	bf00      	nop
	}

	return chr;
 800ef08:	88fb      	ldrh	r3, [r7, #6]
}
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	371c      	adds	r7, #28
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef14:	4770      	bx	lr
 800ef16:	bf00      	nop
 800ef18:	08011440 	.word	0x08011440
 800ef1c:	08011634 	.word	0x08011634

0800ef20 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ef24:	2200      	movs	r2, #0
 800ef26:	4912      	ldr	r1, [pc, #72]	; (800ef70 <MX_USB_DEVICE_Init+0x50>)
 800ef28:	4812      	ldr	r0, [pc, #72]	; (800ef74 <MX_USB_DEVICE_Init+0x54>)
 800ef2a:	f7fb fbbf 	bl	800a6ac <USBD_Init>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d001      	beq.n	800ef38 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ef34:	f7f2 f8d2 	bl	80010dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ef38:	490f      	ldr	r1, [pc, #60]	; (800ef78 <MX_USB_DEVICE_Init+0x58>)
 800ef3a:	480e      	ldr	r0, [pc, #56]	; (800ef74 <MX_USB_DEVICE_Init+0x54>)
 800ef3c:	f7fb fbe6 	bl	800a70c <USBD_RegisterClass>
 800ef40:	4603      	mov	r3, r0
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d001      	beq.n	800ef4a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ef46:	f7f2 f8c9 	bl	80010dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ef4a:	490c      	ldr	r1, [pc, #48]	; (800ef7c <MX_USB_DEVICE_Init+0x5c>)
 800ef4c:	4809      	ldr	r0, [pc, #36]	; (800ef74 <MX_USB_DEVICE_Init+0x54>)
 800ef4e:	f7fb fadd 	bl	800a50c <USBD_CDC_RegisterInterface>
 800ef52:	4603      	mov	r3, r0
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d001      	beq.n	800ef5c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ef58:	f7f2 f8c0 	bl	80010dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ef5c:	4805      	ldr	r0, [pc, #20]	; (800ef74 <MX_USB_DEVICE_Init+0x54>)
 800ef5e:	f7fb fc0b 	bl	800a778 <USBD_Start>
 800ef62:	4603      	mov	r3, r0
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d001      	beq.n	800ef6c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ef68:	f7f2 f8b8 	bl	80010dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ef6c:	bf00      	nop
 800ef6e:	bd80      	pop	{r7, pc}
 800ef70:	200000ac 	.word	0x200000ac
 800ef74:	20003484 	.word	0x20003484
 800ef78:	20000018 	.word	0x20000018
 800ef7c:	20000098 	.word	0x20000098

0800ef80 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ef84:	2200      	movs	r2, #0
 800ef86:	4905      	ldr	r1, [pc, #20]	; (800ef9c <CDC_Init_FS+0x1c>)
 800ef88:	4805      	ldr	r0, [pc, #20]	; (800efa0 <CDC_Init_FS+0x20>)
 800ef8a:	f7fb fad9 	bl	800a540 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ef8e:	4905      	ldr	r1, [pc, #20]	; (800efa4 <CDC_Init_FS+0x24>)
 800ef90:	4803      	ldr	r0, [pc, #12]	; (800efa0 <CDC_Init_FS+0x20>)
 800ef92:	f7fb faf7 	bl	800a584 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ef96:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ef98:	4618      	mov	r0, r3
 800ef9a:	bd80      	pop	{r7, pc}
 800ef9c:	20003f60 	.word	0x20003f60
 800efa0:	20003484 	.word	0x20003484
 800efa4:	20003760 	.word	0x20003760

0800efa8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800efa8:	b480      	push	{r7}
 800efaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800efac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800efae:	4618      	mov	r0, r3
 800efb0:	46bd      	mov	sp, r7
 800efb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb6:	4770      	bx	lr

0800efb8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800efb8:	b480      	push	{r7}
 800efba:	b083      	sub	sp, #12
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	4603      	mov	r3, r0
 800efc0:	6039      	str	r1, [r7, #0]
 800efc2:	71fb      	strb	r3, [r7, #7]
 800efc4:	4613      	mov	r3, r2
 800efc6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800efc8:	79fb      	ldrb	r3, [r7, #7]
 800efca:	2b23      	cmp	r3, #35	; 0x23
 800efcc:	d84a      	bhi.n	800f064 <CDC_Control_FS+0xac>
 800efce:	a201      	add	r2, pc, #4	; (adr r2, 800efd4 <CDC_Control_FS+0x1c>)
 800efd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efd4:	0800f065 	.word	0x0800f065
 800efd8:	0800f065 	.word	0x0800f065
 800efdc:	0800f065 	.word	0x0800f065
 800efe0:	0800f065 	.word	0x0800f065
 800efe4:	0800f065 	.word	0x0800f065
 800efe8:	0800f065 	.word	0x0800f065
 800efec:	0800f065 	.word	0x0800f065
 800eff0:	0800f065 	.word	0x0800f065
 800eff4:	0800f065 	.word	0x0800f065
 800eff8:	0800f065 	.word	0x0800f065
 800effc:	0800f065 	.word	0x0800f065
 800f000:	0800f065 	.word	0x0800f065
 800f004:	0800f065 	.word	0x0800f065
 800f008:	0800f065 	.word	0x0800f065
 800f00c:	0800f065 	.word	0x0800f065
 800f010:	0800f065 	.word	0x0800f065
 800f014:	0800f065 	.word	0x0800f065
 800f018:	0800f065 	.word	0x0800f065
 800f01c:	0800f065 	.word	0x0800f065
 800f020:	0800f065 	.word	0x0800f065
 800f024:	0800f065 	.word	0x0800f065
 800f028:	0800f065 	.word	0x0800f065
 800f02c:	0800f065 	.word	0x0800f065
 800f030:	0800f065 	.word	0x0800f065
 800f034:	0800f065 	.word	0x0800f065
 800f038:	0800f065 	.word	0x0800f065
 800f03c:	0800f065 	.word	0x0800f065
 800f040:	0800f065 	.word	0x0800f065
 800f044:	0800f065 	.word	0x0800f065
 800f048:	0800f065 	.word	0x0800f065
 800f04c:	0800f065 	.word	0x0800f065
 800f050:	0800f065 	.word	0x0800f065
 800f054:	0800f065 	.word	0x0800f065
 800f058:	0800f065 	.word	0x0800f065
 800f05c:	0800f065 	.word	0x0800f065
 800f060:	0800f065 	.word	0x0800f065
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f064:	bf00      	nop
  }

  return (USBD_OK);
 800f066:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f068:	4618      	mov	r0, r3
 800f06a:	370c      	adds	r7, #12
 800f06c:	46bd      	mov	sp, r7
 800f06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f072:	4770      	bx	lr

0800f074 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b082      	sub	sp, #8
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
 800f07c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f07e:	6879      	ldr	r1, [r7, #4]
 800f080:	4805      	ldr	r0, [pc, #20]	; (800f098 <CDC_Receive_FS+0x24>)
 800f082:	f7fb fa7f 	bl	800a584 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f086:	4804      	ldr	r0, [pc, #16]	; (800f098 <CDC_Receive_FS+0x24>)
 800f088:	f7fb fada 	bl	800a640 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f08c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f08e:	4618      	mov	r0, r3
 800f090:	3708      	adds	r7, #8
 800f092:	46bd      	mov	sp, r7
 800f094:	bd80      	pop	{r7, pc}
 800f096:	bf00      	nop
 800f098:	20003484 	.word	0x20003484

0800f09c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b084      	sub	sp, #16
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
 800f0a4:	460b      	mov	r3, r1
 800f0a6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f0ac:	4b0d      	ldr	r3, [pc, #52]	; (800f0e4 <CDC_Transmit_FS+0x48>)
 800f0ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f0b2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f0b4:	68bb      	ldr	r3, [r7, #8]
 800f0b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d001      	beq.n	800f0c2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f0be:	2301      	movs	r3, #1
 800f0c0:	e00b      	b.n	800f0da <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f0c2:	887b      	ldrh	r3, [r7, #2]
 800f0c4:	461a      	mov	r2, r3
 800f0c6:	6879      	ldr	r1, [r7, #4]
 800f0c8:	4806      	ldr	r0, [pc, #24]	; (800f0e4 <CDC_Transmit_FS+0x48>)
 800f0ca:	f7fb fa39 	bl	800a540 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f0ce:	4805      	ldr	r0, [pc, #20]	; (800f0e4 <CDC_Transmit_FS+0x48>)
 800f0d0:	f7fb fa76 	bl	800a5c0 <USBD_CDC_TransmitPacket>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f0d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0da:	4618      	mov	r0, r3
 800f0dc:	3710      	adds	r7, #16
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	bd80      	pop	{r7, pc}
 800f0e2:	bf00      	nop
 800f0e4:	20003484 	.word	0x20003484

0800f0e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f0e8:	b480      	push	{r7}
 800f0ea:	b087      	sub	sp, #28
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	60f8      	str	r0, [r7, #12]
 800f0f0:	60b9      	str	r1, [r7, #8]
 800f0f2:	4613      	mov	r3, r2
 800f0f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f0fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f0fe:	4618      	mov	r0, r3
 800f100:	371c      	adds	r7, #28
 800f102:	46bd      	mov	sp, r7
 800f104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f108:	4770      	bx	lr
	...

0800f10c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f10c:	b480      	push	{r7}
 800f10e:	b083      	sub	sp, #12
 800f110:	af00      	add	r7, sp, #0
 800f112:	4603      	mov	r3, r0
 800f114:	6039      	str	r1, [r7, #0]
 800f116:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	2212      	movs	r2, #18
 800f11c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f11e:	4b03      	ldr	r3, [pc, #12]	; (800f12c <USBD_FS_DeviceDescriptor+0x20>)
}
 800f120:	4618      	mov	r0, r3
 800f122:	370c      	adds	r7, #12
 800f124:	46bd      	mov	sp, r7
 800f126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12a:	4770      	bx	lr
 800f12c:	200000cc 	.word	0x200000cc

0800f130 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f130:	b480      	push	{r7}
 800f132:	b083      	sub	sp, #12
 800f134:	af00      	add	r7, sp, #0
 800f136:	4603      	mov	r3, r0
 800f138:	6039      	str	r1, [r7, #0]
 800f13a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f13c:	683b      	ldr	r3, [r7, #0]
 800f13e:	2204      	movs	r2, #4
 800f140:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f142:	4b03      	ldr	r3, [pc, #12]	; (800f150 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f144:	4618      	mov	r0, r3
 800f146:	370c      	adds	r7, #12
 800f148:	46bd      	mov	sp, r7
 800f14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14e:	4770      	bx	lr
 800f150:	200000ec 	.word	0x200000ec

0800f154 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b082      	sub	sp, #8
 800f158:	af00      	add	r7, sp, #0
 800f15a:	4603      	mov	r3, r0
 800f15c:	6039      	str	r1, [r7, #0]
 800f15e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f160:	79fb      	ldrb	r3, [r7, #7]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d105      	bne.n	800f172 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f166:	683a      	ldr	r2, [r7, #0]
 800f168:	4907      	ldr	r1, [pc, #28]	; (800f188 <USBD_FS_ProductStrDescriptor+0x34>)
 800f16a:	4808      	ldr	r0, [pc, #32]	; (800f18c <USBD_FS_ProductStrDescriptor+0x38>)
 800f16c:	f7fc fcda 	bl	800bb24 <USBD_GetString>
 800f170:	e004      	b.n	800f17c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f172:	683a      	ldr	r2, [r7, #0]
 800f174:	4904      	ldr	r1, [pc, #16]	; (800f188 <USBD_FS_ProductStrDescriptor+0x34>)
 800f176:	4805      	ldr	r0, [pc, #20]	; (800f18c <USBD_FS_ProductStrDescriptor+0x38>)
 800f178:	f7fc fcd4 	bl	800bb24 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f17c:	4b02      	ldr	r3, [pc, #8]	; (800f188 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f17e:	4618      	mov	r0, r3
 800f180:	3708      	adds	r7, #8
 800f182:	46bd      	mov	sp, r7
 800f184:	bd80      	pop	{r7, pc}
 800f186:	bf00      	nop
 800f188:	20004760 	.word	0x20004760
 800f18c:	08011234 	.word	0x08011234

0800f190 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b082      	sub	sp, #8
 800f194:	af00      	add	r7, sp, #0
 800f196:	4603      	mov	r3, r0
 800f198:	6039      	str	r1, [r7, #0]
 800f19a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f19c:	683a      	ldr	r2, [r7, #0]
 800f19e:	4904      	ldr	r1, [pc, #16]	; (800f1b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f1a0:	4804      	ldr	r0, [pc, #16]	; (800f1b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f1a2:	f7fc fcbf 	bl	800bb24 <USBD_GetString>
  return USBD_StrDesc;
 800f1a6:	4b02      	ldr	r3, [pc, #8]	; (800f1b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	3708      	adds	r7, #8
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	bd80      	pop	{r7, pc}
 800f1b0:	20004760 	.word	0x20004760
 800f1b4:	0801124c 	.word	0x0801124c

0800f1b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b082      	sub	sp, #8
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	4603      	mov	r3, r0
 800f1c0:	6039      	str	r1, [r7, #0]
 800f1c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f1c4:	683b      	ldr	r3, [r7, #0]
 800f1c6:	221a      	movs	r2, #26
 800f1c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f1ca:	f000 f855 	bl	800f278 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f1ce:	4b02      	ldr	r3, [pc, #8]	; (800f1d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	3708      	adds	r7, #8
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}
 800f1d8:	200000f0 	.word	0x200000f0

0800f1dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b082      	sub	sp, #8
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	6039      	str	r1, [r7, #0]
 800f1e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f1e8:	79fb      	ldrb	r3, [r7, #7]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d105      	bne.n	800f1fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f1ee:	683a      	ldr	r2, [r7, #0]
 800f1f0:	4907      	ldr	r1, [pc, #28]	; (800f210 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f1f2:	4808      	ldr	r0, [pc, #32]	; (800f214 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f1f4:	f7fc fc96 	bl	800bb24 <USBD_GetString>
 800f1f8:	e004      	b.n	800f204 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f1fa:	683a      	ldr	r2, [r7, #0]
 800f1fc:	4904      	ldr	r1, [pc, #16]	; (800f210 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f1fe:	4805      	ldr	r0, [pc, #20]	; (800f214 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f200:	f7fc fc90 	bl	800bb24 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f204:	4b02      	ldr	r3, [pc, #8]	; (800f210 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f206:	4618      	mov	r0, r3
 800f208:	3708      	adds	r7, #8
 800f20a:	46bd      	mov	sp, r7
 800f20c:	bd80      	pop	{r7, pc}
 800f20e:	bf00      	nop
 800f210:	20004760 	.word	0x20004760
 800f214:	08011260 	.word	0x08011260

0800f218 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b082      	sub	sp, #8
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	4603      	mov	r3, r0
 800f220:	6039      	str	r1, [r7, #0]
 800f222:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f224:	79fb      	ldrb	r3, [r7, #7]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d105      	bne.n	800f236 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f22a:	683a      	ldr	r2, [r7, #0]
 800f22c:	4907      	ldr	r1, [pc, #28]	; (800f24c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f22e:	4808      	ldr	r0, [pc, #32]	; (800f250 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f230:	f7fc fc78 	bl	800bb24 <USBD_GetString>
 800f234:	e004      	b.n	800f240 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f236:	683a      	ldr	r2, [r7, #0]
 800f238:	4904      	ldr	r1, [pc, #16]	; (800f24c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f23a:	4805      	ldr	r0, [pc, #20]	; (800f250 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f23c:	f7fc fc72 	bl	800bb24 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f240:	4b02      	ldr	r3, [pc, #8]	; (800f24c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f242:	4618      	mov	r0, r3
 800f244:	3708      	adds	r7, #8
 800f246:	46bd      	mov	sp, r7
 800f248:	bd80      	pop	{r7, pc}
 800f24a:	bf00      	nop
 800f24c:	20004760 	.word	0x20004760
 800f250:	0801126c 	.word	0x0801126c

0800f254 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f254:	b480      	push	{r7}
 800f256:	b083      	sub	sp, #12
 800f258:	af00      	add	r7, sp, #0
 800f25a:	4603      	mov	r3, r0
 800f25c:	6039      	str	r1, [r7, #0]
 800f25e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	220c      	movs	r2, #12
 800f264:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800f266:	4b03      	ldr	r3, [pc, #12]	; (800f274 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800f268:	4618      	mov	r0, r3
 800f26a:	370c      	adds	r7, #12
 800f26c:	46bd      	mov	sp, r7
 800f26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f272:	4770      	bx	lr
 800f274:	200000e0 	.word	0x200000e0

0800f278 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b084      	sub	sp, #16
 800f27c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f27e:	4b0f      	ldr	r3, [pc, #60]	; (800f2bc <Get_SerialNum+0x44>)
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f284:	4b0e      	ldr	r3, [pc, #56]	; (800f2c0 <Get_SerialNum+0x48>)
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f28a:	4b0e      	ldr	r3, [pc, #56]	; (800f2c4 <Get_SerialNum+0x4c>)
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f290:	68fa      	ldr	r2, [r7, #12]
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	4413      	add	r3, r2
 800f296:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d009      	beq.n	800f2b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f29e:	2208      	movs	r2, #8
 800f2a0:	4909      	ldr	r1, [pc, #36]	; (800f2c8 <Get_SerialNum+0x50>)
 800f2a2:	68f8      	ldr	r0, [r7, #12]
 800f2a4:	f000 f814 	bl	800f2d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f2a8:	2204      	movs	r2, #4
 800f2aa:	4908      	ldr	r1, [pc, #32]	; (800f2cc <Get_SerialNum+0x54>)
 800f2ac:	68b8      	ldr	r0, [r7, #8]
 800f2ae:	f000 f80f 	bl	800f2d0 <IntToUnicode>
  }
}
 800f2b2:	bf00      	nop
 800f2b4:	3710      	adds	r7, #16
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}
 800f2ba:	bf00      	nop
 800f2bc:	1ff0f420 	.word	0x1ff0f420
 800f2c0:	1ff0f424 	.word	0x1ff0f424
 800f2c4:	1ff0f428 	.word	0x1ff0f428
 800f2c8:	200000f2 	.word	0x200000f2
 800f2cc:	20000102 	.word	0x20000102

0800f2d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f2d0:	b480      	push	{r7}
 800f2d2:	b087      	sub	sp, #28
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	60f8      	str	r0, [r7, #12]
 800f2d8:	60b9      	str	r1, [r7, #8]
 800f2da:	4613      	mov	r3, r2
 800f2dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	75fb      	strb	r3, [r7, #23]
 800f2e6:	e027      	b.n	800f338 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	0f1b      	lsrs	r3, r3, #28
 800f2ec:	2b09      	cmp	r3, #9
 800f2ee:	d80b      	bhi.n	800f308 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	0f1b      	lsrs	r3, r3, #28
 800f2f4:	b2da      	uxtb	r2, r3
 800f2f6:	7dfb      	ldrb	r3, [r7, #23]
 800f2f8:	005b      	lsls	r3, r3, #1
 800f2fa:	4619      	mov	r1, r3
 800f2fc:	68bb      	ldr	r3, [r7, #8]
 800f2fe:	440b      	add	r3, r1
 800f300:	3230      	adds	r2, #48	; 0x30
 800f302:	b2d2      	uxtb	r2, r2
 800f304:	701a      	strb	r2, [r3, #0]
 800f306:	e00a      	b.n	800f31e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	0f1b      	lsrs	r3, r3, #28
 800f30c:	b2da      	uxtb	r2, r3
 800f30e:	7dfb      	ldrb	r3, [r7, #23]
 800f310:	005b      	lsls	r3, r3, #1
 800f312:	4619      	mov	r1, r3
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	440b      	add	r3, r1
 800f318:	3237      	adds	r2, #55	; 0x37
 800f31a:	b2d2      	uxtb	r2, r2
 800f31c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	011b      	lsls	r3, r3, #4
 800f322:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f324:	7dfb      	ldrb	r3, [r7, #23]
 800f326:	005b      	lsls	r3, r3, #1
 800f328:	3301      	adds	r3, #1
 800f32a:	68ba      	ldr	r2, [r7, #8]
 800f32c:	4413      	add	r3, r2
 800f32e:	2200      	movs	r2, #0
 800f330:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f332:	7dfb      	ldrb	r3, [r7, #23]
 800f334:	3301      	adds	r3, #1
 800f336:	75fb      	strb	r3, [r7, #23]
 800f338:	7dfa      	ldrb	r2, [r7, #23]
 800f33a:	79fb      	ldrb	r3, [r7, #7]
 800f33c:	429a      	cmp	r2, r3
 800f33e:	d3d3      	bcc.n	800f2e8 <IntToUnicode+0x18>
  }
}
 800f340:	bf00      	nop
 800f342:	bf00      	nop
 800f344:	371c      	adds	r7, #28
 800f346:	46bd      	mov	sp, r7
 800f348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34c:	4770      	bx	lr
	...

0800f350 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b0ae      	sub	sp, #184	; 0xb8
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f358:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f35c:	2200      	movs	r2, #0
 800f35e:	601a      	str	r2, [r3, #0]
 800f360:	605a      	str	r2, [r3, #4]
 800f362:	609a      	str	r2, [r3, #8]
 800f364:	60da      	str	r2, [r3, #12]
 800f366:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f368:	f107 0314 	add.w	r3, r7, #20
 800f36c:	2290      	movs	r2, #144	; 0x90
 800f36e:	2100      	movs	r1, #0
 800f370:	4618      	mov	r0, r3
 800f372:	f000 fe16 	bl	800ffa2 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f37e:	d151      	bne.n	800f424 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800f380:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f384:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800f386:	2300      	movs	r3, #0
 800f388:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f38c:	f107 0314 	add.w	r3, r7, #20
 800f390:	4618      	mov	r0, r3
 800f392:	f7f5 fead 	bl	80050f0 <HAL_RCCEx_PeriphCLKConfig>
 800f396:	4603      	mov	r3, r0
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d001      	beq.n	800f3a0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800f39c:	f7f1 fe9e 	bl	80010dc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f3a0:	4b22      	ldr	r3, [pc, #136]	; (800f42c <HAL_PCD_MspInit+0xdc>)
 800f3a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3a4:	4a21      	ldr	r2, [pc, #132]	; (800f42c <HAL_PCD_MspInit+0xdc>)
 800f3a6:	f043 0301 	orr.w	r3, r3, #1
 800f3aa:	6313      	str	r3, [r2, #48]	; 0x30
 800f3ac:	4b1f      	ldr	r3, [pc, #124]	; (800f42c <HAL_PCD_MspInit+0xdc>)
 800f3ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3b0:	f003 0301 	and.w	r3, r3, #1
 800f3b4:	613b      	str	r3, [r7, #16]
 800f3b6:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f3b8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f3bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f3c0:	2302      	movs	r3, #2
 800f3c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f3cc:	2303      	movs	r3, #3
 800f3ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f3d2:	230a      	movs	r3, #10
 800f3d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f3d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f3dc:	4619      	mov	r1, r3
 800f3de:	4814      	ldr	r0, [pc, #80]	; (800f430 <HAL_PCD_MspInit+0xe0>)
 800f3e0:	f7f3 fcf8 	bl	8002dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f3e4:	4b11      	ldr	r3, [pc, #68]	; (800f42c <HAL_PCD_MspInit+0xdc>)
 800f3e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3e8:	4a10      	ldr	r2, [pc, #64]	; (800f42c <HAL_PCD_MspInit+0xdc>)
 800f3ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3ee:	6353      	str	r3, [r2, #52]	; 0x34
 800f3f0:	4b0e      	ldr	r3, [pc, #56]	; (800f42c <HAL_PCD_MspInit+0xdc>)
 800f3f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f3f8:	60fb      	str	r3, [r7, #12]
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	4b0b      	ldr	r3, [pc, #44]	; (800f42c <HAL_PCD_MspInit+0xdc>)
 800f3fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f400:	4a0a      	ldr	r2, [pc, #40]	; (800f42c <HAL_PCD_MspInit+0xdc>)
 800f402:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f406:	6453      	str	r3, [r2, #68]	; 0x44
 800f408:	4b08      	ldr	r3, [pc, #32]	; (800f42c <HAL_PCD_MspInit+0xdc>)
 800f40a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f40c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f410:	60bb      	str	r3, [r7, #8]
 800f412:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f414:	2200      	movs	r2, #0
 800f416:	2100      	movs	r1, #0
 800f418:	2043      	movs	r0, #67	; 0x43
 800f41a:	f7f3 f8fe 	bl	800261a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f41e:	2043      	movs	r0, #67	; 0x43
 800f420:	f7f3 f917 	bl	8002652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f424:	bf00      	nop
 800f426:	37b8      	adds	r7, #184	; 0xb8
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd80      	pop	{r7, pc}
 800f42c:	40023800 	.word	0x40023800
 800f430:	40020000 	.word	0x40020000

0800f434 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f434:	b580      	push	{r7, lr}
 800f436:	b082      	sub	sp, #8
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f448:	4619      	mov	r1, r3
 800f44a:	4610      	mov	r0, r2
 800f44c:	f7fb f9e1 	bl	800a812 <USBD_LL_SetupStage>
}
 800f450:	bf00      	nop
 800f452:	3708      	adds	r7, #8
 800f454:	46bd      	mov	sp, r7
 800f456:	bd80      	pop	{r7, pc}

0800f458 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b082      	sub	sp, #8
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
 800f460:	460b      	mov	r3, r1
 800f462:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800f46a:	78fa      	ldrb	r2, [r7, #3]
 800f46c:	6879      	ldr	r1, [r7, #4]
 800f46e:	4613      	mov	r3, r2
 800f470:	00db      	lsls	r3, r3, #3
 800f472:	4413      	add	r3, r2
 800f474:	009b      	lsls	r3, r3, #2
 800f476:	440b      	add	r3, r1
 800f478:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f47c:	681a      	ldr	r2, [r3, #0]
 800f47e:	78fb      	ldrb	r3, [r7, #3]
 800f480:	4619      	mov	r1, r3
 800f482:	f7fb fa1b 	bl	800a8bc <USBD_LL_DataOutStage>
}
 800f486:	bf00      	nop
 800f488:	3708      	adds	r7, #8
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}

0800f48e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f48e:	b580      	push	{r7, lr}
 800f490:	b082      	sub	sp, #8
 800f492:	af00      	add	r7, sp, #0
 800f494:	6078      	str	r0, [r7, #4]
 800f496:	460b      	mov	r3, r1
 800f498:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800f4a0:	78fa      	ldrb	r2, [r7, #3]
 800f4a2:	6879      	ldr	r1, [r7, #4]
 800f4a4:	4613      	mov	r3, r2
 800f4a6:	00db      	lsls	r3, r3, #3
 800f4a8:	4413      	add	r3, r2
 800f4aa:	009b      	lsls	r3, r3, #2
 800f4ac:	440b      	add	r3, r1
 800f4ae:	334c      	adds	r3, #76	; 0x4c
 800f4b0:	681a      	ldr	r2, [r3, #0]
 800f4b2:	78fb      	ldrb	r3, [r7, #3]
 800f4b4:	4619      	mov	r1, r3
 800f4b6:	f7fb fab4 	bl	800aa22 <USBD_LL_DataInStage>
}
 800f4ba:	bf00      	nop
 800f4bc:	3708      	adds	r7, #8
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}

0800f4c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4c2:	b580      	push	{r7, lr}
 800f4c4:	b082      	sub	sp, #8
 800f4c6:	af00      	add	r7, sp, #0
 800f4c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f7fb fbe8 	bl	800aca6 <USBD_LL_SOF>
}
 800f4d6:	bf00      	nop
 800f4d8:	3708      	adds	r7, #8
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	bd80      	pop	{r7, pc}

0800f4de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4de:	b580      	push	{r7, lr}
 800f4e0:	b084      	sub	sp, #16
 800f4e2:	af00      	add	r7, sp, #0
 800f4e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f4e6:	2301      	movs	r3, #1
 800f4e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	68db      	ldr	r3, [r3, #12]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d102      	bne.n	800f4f8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	73fb      	strb	r3, [r7, #15]
 800f4f6:	e008      	b.n	800f50a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	68db      	ldr	r3, [r3, #12]
 800f4fc:	2b02      	cmp	r3, #2
 800f4fe:	d102      	bne.n	800f506 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f500:	2301      	movs	r3, #1
 800f502:	73fb      	strb	r3, [r7, #15]
 800f504:	e001      	b.n	800f50a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f506:	f7f1 fde9 	bl	80010dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f510:	7bfa      	ldrb	r2, [r7, #15]
 800f512:	4611      	mov	r1, r2
 800f514:	4618      	mov	r0, r3
 800f516:	f7fb fb88 	bl	800ac2a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f520:	4618      	mov	r0, r3
 800f522:	f7fb fb30 	bl	800ab86 <USBD_LL_Reset>
}
 800f526:	bf00      	nop
 800f528:	3710      	adds	r7, #16
 800f52a:	46bd      	mov	sp, r7
 800f52c:	bd80      	pop	{r7, pc}
	...

0800f530 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b082      	sub	sp, #8
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f53e:	4618      	mov	r0, r3
 800f540:	f7fb fb83 	bl	800ac4a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	687a      	ldr	r2, [r7, #4]
 800f550:	6812      	ldr	r2, [r2, #0]
 800f552:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f556:	f043 0301 	orr.w	r3, r3, #1
 800f55a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	6a1b      	ldr	r3, [r3, #32]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d005      	beq.n	800f570 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f564:	4b04      	ldr	r3, [pc, #16]	; (800f578 <HAL_PCD_SuspendCallback+0x48>)
 800f566:	691b      	ldr	r3, [r3, #16]
 800f568:	4a03      	ldr	r2, [pc, #12]	; (800f578 <HAL_PCD_SuspendCallback+0x48>)
 800f56a:	f043 0306 	orr.w	r3, r3, #6
 800f56e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f570:	bf00      	nop
 800f572:	3708      	adds	r7, #8
 800f574:	46bd      	mov	sp, r7
 800f576:	bd80      	pop	{r7, pc}
 800f578:	e000ed00 	.word	0xe000ed00

0800f57c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b082      	sub	sp, #8
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f58a:	4618      	mov	r0, r3
 800f58c:	f7fb fb73 	bl	800ac76 <USBD_LL_Resume>
}
 800f590:	bf00      	nop
 800f592:	3708      	adds	r7, #8
 800f594:	46bd      	mov	sp, r7
 800f596:	bd80      	pop	{r7, pc}

0800f598 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b082      	sub	sp, #8
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
 800f5a0:	460b      	mov	r3, r1
 800f5a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f5aa:	78fa      	ldrb	r2, [r7, #3]
 800f5ac:	4611      	mov	r1, r2
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f7fb fbcb 	bl	800ad4a <USBD_LL_IsoOUTIncomplete>
}
 800f5b4:	bf00      	nop
 800f5b6:	3708      	adds	r7, #8
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	bd80      	pop	{r7, pc}

0800f5bc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b082      	sub	sp, #8
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
 800f5c4:	460b      	mov	r3, r1
 800f5c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f5ce:	78fa      	ldrb	r2, [r7, #3]
 800f5d0:	4611      	mov	r1, r2
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	f7fb fb87 	bl	800ace6 <USBD_LL_IsoINIncomplete>
}
 800f5d8:	bf00      	nop
 800f5da:	3708      	adds	r7, #8
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	bd80      	pop	{r7, pc}

0800f5e0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b082      	sub	sp, #8
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	f7fb fbdd 	bl	800adae <USBD_LL_DevConnected>
}
 800f5f4:	bf00      	nop
 800f5f6:	3708      	adds	r7, #8
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	bd80      	pop	{r7, pc}

0800f5fc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b082      	sub	sp, #8
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f60a:	4618      	mov	r0, r3
 800f60c:	f7fb fbda 	bl	800adc4 <USBD_LL_DevDisconnected>
}
 800f610:	bf00      	nop
 800f612:	3708      	adds	r7, #8
 800f614:	46bd      	mov	sp, r7
 800f616:	bd80      	pop	{r7, pc}

0800f618 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b082      	sub	sp, #8
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	781b      	ldrb	r3, [r3, #0]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d13c      	bne.n	800f6a2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f628:	4a20      	ldr	r2, [pc, #128]	; (800f6ac <USBD_LL_Init+0x94>)
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	4a1e      	ldr	r2, [pc, #120]	; (800f6ac <USBD_LL_Init+0x94>)
 800f634:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f638:	4b1c      	ldr	r3, [pc, #112]	; (800f6ac <USBD_LL_Init+0x94>)
 800f63a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f63e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800f640:	4b1a      	ldr	r3, [pc, #104]	; (800f6ac <USBD_LL_Init+0x94>)
 800f642:	2206      	movs	r2, #6
 800f644:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f646:	4b19      	ldr	r3, [pc, #100]	; (800f6ac <USBD_LL_Init+0x94>)
 800f648:	2202      	movs	r2, #2
 800f64a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f64c:	4b17      	ldr	r3, [pc, #92]	; (800f6ac <USBD_LL_Init+0x94>)
 800f64e:	2200      	movs	r2, #0
 800f650:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f652:	4b16      	ldr	r3, [pc, #88]	; (800f6ac <USBD_LL_Init+0x94>)
 800f654:	2202      	movs	r2, #2
 800f656:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f658:	4b14      	ldr	r3, [pc, #80]	; (800f6ac <USBD_LL_Init+0x94>)
 800f65a:	2200      	movs	r2, #0
 800f65c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f65e:	4b13      	ldr	r3, [pc, #76]	; (800f6ac <USBD_LL_Init+0x94>)
 800f660:	2200      	movs	r2, #0
 800f662:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f664:	4b11      	ldr	r3, [pc, #68]	; (800f6ac <USBD_LL_Init+0x94>)
 800f666:	2200      	movs	r2, #0
 800f668:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f66a:	4b10      	ldr	r3, [pc, #64]	; (800f6ac <USBD_LL_Init+0x94>)
 800f66c:	2200      	movs	r2, #0
 800f66e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f670:	4b0e      	ldr	r3, [pc, #56]	; (800f6ac <USBD_LL_Init+0x94>)
 800f672:	2200      	movs	r2, #0
 800f674:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f676:	480d      	ldr	r0, [pc, #52]	; (800f6ac <USBD_LL_Init+0x94>)
 800f678:	f7f3 fdad 	bl	80031d6 <HAL_PCD_Init>
 800f67c:	4603      	mov	r3, r0
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d001      	beq.n	800f686 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f682:	f7f1 fd2b 	bl	80010dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f686:	2180      	movs	r1, #128	; 0x80
 800f688:	4808      	ldr	r0, [pc, #32]	; (800f6ac <USBD_LL_Init+0x94>)
 800f68a:	f7f5 f828 	bl	80046de <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f68e:	2240      	movs	r2, #64	; 0x40
 800f690:	2100      	movs	r1, #0
 800f692:	4806      	ldr	r0, [pc, #24]	; (800f6ac <USBD_LL_Init+0x94>)
 800f694:	f7f4 ffdc 	bl	8004650 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f698:	2280      	movs	r2, #128	; 0x80
 800f69a:	2101      	movs	r1, #1
 800f69c:	4803      	ldr	r0, [pc, #12]	; (800f6ac <USBD_LL_Init+0x94>)
 800f69e:	f7f4 ffd7 	bl	8004650 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f6a2:	2300      	movs	r3, #0
}
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	3708      	adds	r7, #8
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}
 800f6ac:	20004960 	.word	0x20004960

0800f6b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b084      	sub	sp, #16
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6bc:	2300      	movs	r3, #0
 800f6be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f7f3 fea9 	bl	800341e <HAL_PCD_Start>
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f6d0:	7bfb      	ldrb	r3, [r7, #15]
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	f000 f97e 	bl	800f9d4 <USBD_Get_USB_Status>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f6dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	3710      	adds	r7, #16
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}

0800f6e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f6e6:	b580      	push	{r7, lr}
 800f6e8:	b084      	sub	sp, #16
 800f6ea:	af00      	add	r7, sp, #0
 800f6ec:	6078      	str	r0, [r7, #4]
 800f6ee:	4608      	mov	r0, r1
 800f6f0:	4611      	mov	r1, r2
 800f6f2:	461a      	mov	r2, r3
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	70fb      	strb	r3, [r7, #3]
 800f6f8:	460b      	mov	r3, r1
 800f6fa:	70bb      	strb	r3, [r7, #2]
 800f6fc:	4613      	mov	r3, r2
 800f6fe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f700:	2300      	movs	r3, #0
 800f702:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f704:	2300      	movs	r3, #0
 800f706:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f70e:	78bb      	ldrb	r3, [r7, #2]
 800f710:	883a      	ldrh	r2, [r7, #0]
 800f712:	78f9      	ldrb	r1, [r7, #3]
 800f714:	f7f4 fb96 	bl	8003e44 <HAL_PCD_EP_Open>
 800f718:	4603      	mov	r3, r0
 800f71a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f71c:	7bfb      	ldrb	r3, [r7, #15]
 800f71e:	4618      	mov	r0, r3
 800f720:	f000 f958 	bl	800f9d4 <USBD_Get_USB_Status>
 800f724:	4603      	mov	r3, r0
 800f726:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f728:	7bbb      	ldrb	r3, [r7, #14]
}
 800f72a:	4618      	mov	r0, r3
 800f72c:	3710      	adds	r7, #16
 800f72e:	46bd      	mov	sp, r7
 800f730:	bd80      	pop	{r7, pc}

0800f732 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f732:	b580      	push	{r7, lr}
 800f734:	b084      	sub	sp, #16
 800f736:	af00      	add	r7, sp, #0
 800f738:	6078      	str	r0, [r7, #4]
 800f73a:	460b      	mov	r3, r1
 800f73c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f73e:	2300      	movs	r3, #0
 800f740:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f742:	2300      	movs	r3, #0
 800f744:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f74c:	78fa      	ldrb	r2, [r7, #3]
 800f74e:	4611      	mov	r1, r2
 800f750:	4618      	mov	r0, r3
 800f752:	f7f4 fbdf 	bl	8003f14 <HAL_PCD_EP_Close>
 800f756:	4603      	mov	r3, r0
 800f758:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f75a:	7bfb      	ldrb	r3, [r7, #15]
 800f75c:	4618      	mov	r0, r3
 800f75e:	f000 f939 	bl	800f9d4 <USBD_Get_USB_Status>
 800f762:	4603      	mov	r3, r0
 800f764:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f766:	7bbb      	ldrb	r3, [r7, #14]
}
 800f768:	4618      	mov	r0, r3
 800f76a:	3710      	adds	r7, #16
 800f76c:	46bd      	mov	sp, r7
 800f76e:	bd80      	pop	{r7, pc}

0800f770 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b084      	sub	sp, #16
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
 800f778:	460b      	mov	r3, r1
 800f77a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f77c:	2300      	movs	r3, #0
 800f77e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f780:	2300      	movs	r3, #0
 800f782:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f78a:	78fa      	ldrb	r2, [r7, #3]
 800f78c:	4611      	mov	r1, r2
 800f78e:	4618      	mov	r0, r3
 800f790:	f7f4 fcb7 	bl	8004102 <HAL_PCD_EP_SetStall>
 800f794:	4603      	mov	r3, r0
 800f796:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f798:	7bfb      	ldrb	r3, [r7, #15]
 800f79a:	4618      	mov	r0, r3
 800f79c:	f000 f91a 	bl	800f9d4 <USBD_Get_USB_Status>
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f7a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	3710      	adds	r7, #16
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	bd80      	pop	{r7, pc}

0800f7ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f7ae:	b580      	push	{r7, lr}
 800f7b0:	b084      	sub	sp, #16
 800f7b2:	af00      	add	r7, sp, #0
 800f7b4:	6078      	str	r0, [r7, #4]
 800f7b6:	460b      	mov	r3, r1
 800f7b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f7be:	2300      	movs	r3, #0
 800f7c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f7c8:	78fa      	ldrb	r2, [r7, #3]
 800f7ca:	4611      	mov	r1, r2
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	f7f4 fcfc 	bl	80041ca <HAL_PCD_EP_ClrStall>
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f7d6:	7bfb      	ldrb	r3, [r7, #15]
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f000 f8fb 	bl	800f9d4 <USBD_Get_USB_Status>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f7e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	3710      	adds	r7, #16
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	bd80      	pop	{r7, pc}

0800f7ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f7ec:	b480      	push	{r7}
 800f7ee:	b085      	sub	sp, #20
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
 800f7f4:	460b      	mov	r3, r1
 800f7f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f7fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f800:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f804:	2b00      	cmp	r3, #0
 800f806:	da0b      	bge.n	800f820 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f808:	78fb      	ldrb	r3, [r7, #3]
 800f80a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f80e:	68f9      	ldr	r1, [r7, #12]
 800f810:	4613      	mov	r3, r2
 800f812:	00db      	lsls	r3, r3, #3
 800f814:	4413      	add	r3, r2
 800f816:	009b      	lsls	r3, r3, #2
 800f818:	440b      	add	r3, r1
 800f81a:	333e      	adds	r3, #62	; 0x3e
 800f81c:	781b      	ldrb	r3, [r3, #0]
 800f81e:	e00b      	b.n	800f838 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f820:	78fb      	ldrb	r3, [r7, #3]
 800f822:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f826:	68f9      	ldr	r1, [r7, #12]
 800f828:	4613      	mov	r3, r2
 800f82a:	00db      	lsls	r3, r3, #3
 800f82c:	4413      	add	r3, r2
 800f82e:	009b      	lsls	r3, r3, #2
 800f830:	440b      	add	r3, r1
 800f832:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f836:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f838:	4618      	mov	r0, r3
 800f83a:	3714      	adds	r7, #20
 800f83c:	46bd      	mov	sp, r7
 800f83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f842:	4770      	bx	lr

0800f844 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b084      	sub	sp, #16
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
 800f84c:	460b      	mov	r3, r1
 800f84e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f850:	2300      	movs	r3, #0
 800f852:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f854:	2300      	movs	r3, #0
 800f856:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f85e:	78fa      	ldrb	r2, [r7, #3]
 800f860:	4611      	mov	r1, r2
 800f862:	4618      	mov	r0, r3
 800f864:	f7f4 fac9 	bl	8003dfa <HAL_PCD_SetAddress>
 800f868:	4603      	mov	r3, r0
 800f86a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f86c:	7bfb      	ldrb	r3, [r7, #15]
 800f86e:	4618      	mov	r0, r3
 800f870:	f000 f8b0 	bl	800f9d4 <USBD_Get_USB_Status>
 800f874:	4603      	mov	r3, r0
 800f876:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f878:	7bbb      	ldrb	r3, [r7, #14]
}
 800f87a:	4618      	mov	r0, r3
 800f87c:	3710      	adds	r7, #16
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}

0800f882 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f882:	b580      	push	{r7, lr}
 800f884:	b086      	sub	sp, #24
 800f886:	af00      	add	r7, sp, #0
 800f888:	60f8      	str	r0, [r7, #12]
 800f88a:	607a      	str	r2, [r7, #4]
 800f88c:	603b      	str	r3, [r7, #0]
 800f88e:	460b      	mov	r3, r1
 800f890:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f892:	2300      	movs	r3, #0
 800f894:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f896:	2300      	movs	r3, #0
 800f898:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f8a0:	7af9      	ldrb	r1, [r7, #11]
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	687a      	ldr	r2, [r7, #4]
 800f8a6:	f7f4 fbe2 	bl	800406e <HAL_PCD_EP_Transmit>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f8ae:	7dfb      	ldrb	r3, [r7, #23]
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	f000 f88f 	bl	800f9d4 <USBD_Get_USB_Status>
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f8ba:	7dbb      	ldrb	r3, [r7, #22]
}
 800f8bc:	4618      	mov	r0, r3
 800f8be:	3718      	adds	r7, #24
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	bd80      	pop	{r7, pc}

0800f8c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b086      	sub	sp, #24
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	60f8      	str	r0, [r7, #12]
 800f8cc:	607a      	str	r2, [r7, #4]
 800f8ce:	603b      	str	r3, [r7, #0]
 800f8d0:	460b      	mov	r3, r1
 800f8d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f8d8:	2300      	movs	r3, #0
 800f8da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f8e2:	7af9      	ldrb	r1, [r7, #11]
 800f8e4:	683b      	ldr	r3, [r7, #0]
 800f8e6:	687a      	ldr	r2, [r7, #4]
 800f8e8:	f7f4 fb5e 	bl	8003fa8 <HAL_PCD_EP_Receive>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f8f0:	7dfb      	ldrb	r3, [r7, #23]
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	f000 f86e 	bl	800f9d4 <USBD_Get_USB_Status>
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f8fc:	7dbb      	ldrb	r3, [r7, #22]
}
 800f8fe:	4618      	mov	r0, r3
 800f900:	3718      	adds	r7, #24
 800f902:	46bd      	mov	sp, r7
 800f904:	bd80      	pop	{r7, pc}

0800f906 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f906:	b580      	push	{r7, lr}
 800f908:	b082      	sub	sp, #8
 800f90a:	af00      	add	r7, sp, #0
 800f90c:	6078      	str	r0, [r7, #4]
 800f90e:	460b      	mov	r3, r1
 800f910:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f918:	78fa      	ldrb	r2, [r7, #3]
 800f91a:	4611      	mov	r1, r2
 800f91c:	4618      	mov	r0, r3
 800f91e:	f7f4 fb8e 	bl	800403e <HAL_PCD_EP_GetRxCount>
 800f922:	4603      	mov	r3, r0
}
 800f924:	4618      	mov	r0, r3
 800f926:	3708      	adds	r7, #8
 800f928:	46bd      	mov	sp, r7
 800f92a:	bd80      	pop	{r7, pc}

0800f92c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b082      	sub	sp, #8
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
 800f934:	460b      	mov	r3, r1
 800f936:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800f938:	78fb      	ldrb	r3, [r7, #3]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d002      	beq.n	800f944 <HAL_PCDEx_LPM_Callback+0x18>
 800f93e:	2b01      	cmp	r3, #1
 800f940:	d01f      	beq.n	800f982 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800f942:	e03b      	b.n	800f9bc <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	6a1b      	ldr	r3, [r3, #32]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d007      	beq.n	800f95c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800f94c:	f000 f83c 	bl	800f9c8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f950:	4b1c      	ldr	r3, [pc, #112]	; (800f9c4 <HAL_PCDEx_LPM_Callback+0x98>)
 800f952:	691b      	ldr	r3, [r3, #16]
 800f954:	4a1b      	ldr	r2, [pc, #108]	; (800f9c4 <HAL_PCDEx_LPM_Callback+0x98>)
 800f956:	f023 0306 	bic.w	r3, r3, #6
 800f95a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	687a      	ldr	r2, [r7, #4]
 800f968:	6812      	ldr	r2, [r2, #0]
 800f96a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f96e:	f023 0301 	bic.w	r3, r3, #1
 800f972:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f97a:	4618      	mov	r0, r3
 800f97c:	f7fb f97b 	bl	800ac76 <USBD_LL_Resume>
    break;
 800f980:	e01c      	b.n	800f9bc <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	687a      	ldr	r2, [r7, #4]
 800f98e:	6812      	ldr	r2, [r2, #0]
 800f990:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f994:	f043 0301 	orr.w	r3, r3, #1
 800f998:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	f7fb f952 	bl	800ac4a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	6a1b      	ldr	r3, [r3, #32]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d005      	beq.n	800f9ba <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f9ae:	4b05      	ldr	r3, [pc, #20]	; (800f9c4 <HAL_PCDEx_LPM_Callback+0x98>)
 800f9b0:	691b      	ldr	r3, [r3, #16]
 800f9b2:	4a04      	ldr	r2, [pc, #16]	; (800f9c4 <HAL_PCDEx_LPM_Callback+0x98>)
 800f9b4:	f043 0306 	orr.w	r3, r3, #6
 800f9b8:	6113      	str	r3, [r2, #16]
    break;
 800f9ba:	bf00      	nop
}
 800f9bc:	bf00      	nop
 800f9be:	3708      	adds	r7, #8
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}
 800f9c4:	e000ed00 	.word	0xe000ed00

0800f9c8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800f9cc:	f7f1 f88c 	bl	8000ae8 <SystemClock_Config>
}
 800f9d0:	bf00      	nop
 800f9d2:	bd80      	pop	{r7, pc}

0800f9d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f9d4:	b480      	push	{r7}
 800f9d6:	b085      	sub	sp, #20
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	4603      	mov	r3, r0
 800f9dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9de:	2300      	movs	r3, #0
 800f9e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f9e2:	79fb      	ldrb	r3, [r7, #7]
 800f9e4:	2b03      	cmp	r3, #3
 800f9e6:	d817      	bhi.n	800fa18 <USBD_Get_USB_Status+0x44>
 800f9e8:	a201      	add	r2, pc, #4	; (adr r2, 800f9f0 <USBD_Get_USB_Status+0x1c>)
 800f9ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9ee:	bf00      	nop
 800f9f0:	0800fa01 	.word	0x0800fa01
 800f9f4:	0800fa07 	.word	0x0800fa07
 800f9f8:	0800fa0d 	.word	0x0800fa0d
 800f9fc:	0800fa13 	.word	0x0800fa13
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fa00:	2300      	movs	r3, #0
 800fa02:	73fb      	strb	r3, [r7, #15]
    break;
 800fa04:	e00b      	b.n	800fa1e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fa06:	2303      	movs	r3, #3
 800fa08:	73fb      	strb	r3, [r7, #15]
    break;
 800fa0a:	e008      	b.n	800fa1e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fa0c:	2301      	movs	r3, #1
 800fa0e:	73fb      	strb	r3, [r7, #15]
    break;
 800fa10:	e005      	b.n	800fa1e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fa12:	2303      	movs	r3, #3
 800fa14:	73fb      	strb	r3, [r7, #15]
    break;
 800fa16:	e002      	b.n	800fa1e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fa18:	2303      	movs	r3, #3
 800fa1a:	73fb      	strb	r3, [r7, #15]
    break;
 800fa1c:	bf00      	nop
  }
  return usb_status;
 800fa1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa20:	4618      	mov	r0, r3
 800fa22:	3714      	adds	r7, #20
 800fa24:	46bd      	mov	sp, r7
 800fa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2a:	4770      	bx	lr

0800fa2c <malloc>:
 800fa2c:	4b02      	ldr	r3, [pc, #8]	; (800fa38 <malloc+0xc>)
 800fa2e:	4601      	mov	r1, r0
 800fa30:	6818      	ldr	r0, [r3, #0]
 800fa32:	f000 b82b 	b.w	800fa8c <_malloc_r>
 800fa36:	bf00      	nop
 800fa38:	20000164 	.word	0x20000164

0800fa3c <free>:
 800fa3c:	4b02      	ldr	r3, [pc, #8]	; (800fa48 <free+0xc>)
 800fa3e:	4601      	mov	r1, r0
 800fa40:	6818      	ldr	r0, [r3, #0]
 800fa42:	f000 baf5 	b.w	8010030 <_free_r>
 800fa46:	bf00      	nop
 800fa48:	20000164 	.word	0x20000164

0800fa4c <sbrk_aligned>:
 800fa4c:	b570      	push	{r4, r5, r6, lr}
 800fa4e:	4e0e      	ldr	r6, [pc, #56]	; (800fa88 <sbrk_aligned+0x3c>)
 800fa50:	460c      	mov	r4, r1
 800fa52:	6831      	ldr	r1, [r6, #0]
 800fa54:	4605      	mov	r5, r0
 800fa56:	b911      	cbnz	r1, 800fa5e <sbrk_aligned+0x12>
 800fa58:	f000 faac 	bl	800ffb4 <_sbrk_r>
 800fa5c:	6030      	str	r0, [r6, #0]
 800fa5e:	4621      	mov	r1, r4
 800fa60:	4628      	mov	r0, r5
 800fa62:	f000 faa7 	bl	800ffb4 <_sbrk_r>
 800fa66:	1c43      	adds	r3, r0, #1
 800fa68:	d00a      	beq.n	800fa80 <sbrk_aligned+0x34>
 800fa6a:	1cc4      	adds	r4, r0, #3
 800fa6c:	f024 0403 	bic.w	r4, r4, #3
 800fa70:	42a0      	cmp	r0, r4
 800fa72:	d007      	beq.n	800fa84 <sbrk_aligned+0x38>
 800fa74:	1a21      	subs	r1, r4, r0
 800fa76:	4628      	mov	r0, r5
 800fa78:	f000 fa9c 	bl	800ffb4 <_sbrk_r>
 800fa7c:	3001      	adds	r0, #1
 800fa7e:	d101      	bne.n	800fa84 <sbrk_aligned+0x38>
 800fa80:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fa84:	4620      	mov	r0, r4
 800fa86:	bd70      	pop	{r4, r5, r6, pc}
 800fa88:	20004e6c 	.word	0x20004e6c

0800fa8c <_malloc_r>:
 800fa8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa90:	1ccd      	adds	r5, r1, #3
 800fa92:	f025 0503 	bic.w	r5, r5, #3
 800fa96:	3508      	adds	r5, #8
 800fa98:	2d0c      	cmp	r5, #12
 800fa9a:	bf38      	it	cc
 800fa9c:	250c      	movcc	r5, #12
 800fa9e:	2d00      	cmp	r5, #0
 800faa0:	4607      	mov	r7, r0
 800faa2:	db01      	blt.n	800faa8 <_malloc_r+0x1c>
 800faa4:	42a9      	cmp	r1, r5
 800faa6:	d905      	bls.n	800fab4 <_malloc_r+0x28>
 800faa8:	230c      	movs	r3, #12
 800faaa:	603b      	str	r3, [r7, #0]
 800faac:	2600      	movs	r6, #0
 800faae:	4630      	mov	r0, r6
 800fab0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fab4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800fb88 <_malloc_r+0xfc>
 800fab8:	f000 f89c 	bl	800fbf4 <__malloc_lock>
 800fabc:	f8d8 3000 	ldr.w	r3, [r8]
 800fac0:	461c      	mov	r4, r3
 800fac2:	bb5c      	cbnz	r4, 800fb1c <_malloc_r+0x90>
 800fac4:	4629      	mov	r1, r5
 800fac6:	4638      	mov	r0, r7
 800fac8:	f7ff ffc0 	bl	800fa4c <sbrk_aligned>
 800facc:	1c43      	adds	r3, r0, #1
 800face:	4604      	mov	r4, r0
 800fad0:	d155      	bne.n	800fb7e <_malloc_r+0xf2>
 800fad2:	f8d8 4000 	ldr.w	r4, [r8]
 800fad6:	4626      	mov	r6, r4
 800fad8:	2e00      	cmp	r6, #0
 800fada:	d145      	bne.n	800fb68 <_malloc_r+0xdc>
 800fadc:	2c00      	cmp	r4, #0
 800fade:	d048      	beq.n	800fb72 <_malloc_r+0xe6>
 800fae0:	6823      	ldr	r3, [r4, #0]
 800fae2:	4631      	mov	r1, r6
 800fae4:	4638      	mov	r0, r7
 800fae6:	eb04 0903 	add.w	r9, r4, r3
 800faea:	f000 fa63 	bl	800ffb4 <_sbrk_r>
 800faee:	4581      	cmp	r9, r0
 800faf0:	d13f      	bne.n	800fb72 <_malloc_r+0xe6>
 800faf2:	6821      	ldr	r1, [r4, #0]
 800faf4:	1a6d      	subs	r5, r5, r1
 800faf6:	4629      	mov	r1, r5
 800faf8:	4638      	mov	r0, r7
 800fafa:	f7ff ffa7 	bl	800fa4c <sbrk_aligned>
 800fafe:	3001      	adds	r0, #1
 800fb00:	d037      	beq.n	800fb72 <_malloc_r+0xe6>
 800fb02:	6823      	ldr	r3, [r4, #0]
 800fb04:	442b      	add	r3, r5
 800fb06:	6023      	str	r3, [r4, #0]
 800fb08:	f8d8 3000 	ldr.w	r3, [r8]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d038      	beq.n	800fb82 <_malloc_r+0xf6>
 800fb10:	685a      	ldr	r2, [r3, #4]
 800fb12:	42a2      	cmp	r2, r4
 800fb14:	d12b      	bne.n	800fb6e <_malloc_r+0xe2>
 800fb16:	2200      	movs	r2, #0
 800fb18:	605a      	str	r2, [r3, #4]
 800fb1a:	e00f      	b.n	800fb3c <_malloc_r+0xb0>
 800fb1c:	6822      	ldr	r2, [r4, #0]
 800fb1e:	1b52      	subs	r2, r2, r5
 800fb20:	d41f      	bmi.n	800fb62 <_malloc_r+0xd6>
 800fb22:	2a0b      	cmp	r2, #11
 800fb24:	d917      	bls.n	800fb56 <_malloc_r+0xca>
 800fb26:	1961      	adds	r1, r4, r5
 800fb28:	42a3      	cmp	r3, r4
 800fb2a:	6025      	str	r5, [r4, #0]
 800fb2c:	bf18      	it	ne
 800fb2e:	6059      	strne	r1, [r3, #4]
 800fb30:	6863      	ldr	r3, [r4, #4]
 800fb32:	bf08      	it	eq
 800fb34:	f8c8 1000 	streq.w	r1, [r8]
 800fb38:	5162      	str	r2, [r4, r5]
 800fb3a:	604b      	str	r3, [r1, #4]
 800fb3c:	4638      	mov	r0, r7
 800fb3e:	f104 060b 	add.w	r6, r4, #11
 800fb42:	f000 f85d 	bl	800fc00 <__malloc_unlock>
 800fb46:	f026 0607 	bic.w	r6, r6, #7
 800fb4a:	1d23      	adds	r3, r4, #4
 800fb4c:	1af2      	subs	r2, r6, r3
 800fb4e:	d0ae      	beq.n	800faae <_malloc_r+0x22>
 800fb50:	1b9b      	subs	r3, r3, r6
 800fb52:	50a3      	str	r3, [r4, r2]
 800fb54:	e7ab      	b.n	800faae <_malloc_r+0x22>
 800fb56:	42a3      	cmp	r3, r4
 800fb58:	6862      	ldr	r2, [r4, #4]
 800fb5a:	d1dd      	bne.n	800fb18 <_malloc_r+0x8c>
 800fb5c:	f8c8 2000 	str.w	r2, [r8]
 800fb60:	e7ec      	b.n	800fb3c <_malloc_r+0xb0>
 800fb62:	4623      	mov	r3, r4
 800fb64:	6864      	ldr	r4, [r4, #4]
 800fb66:	e7ac      	b.n	800fac2 <_malloc_r+0x36>
 800fb68:	4634      	mov	r4, r6
 800fb6a:	6876      	ldr	r6, [r6, #4]
 800fb6c:	e7b4      	b.n	800fad8 <_malloc_r+0x4c>
 800fb6e:	4613      	mov	r3, r2
 800fb70:	e7cc      	b.n	800fb0c <_malloc_r+0x80>
 800fb72:	230c      	movs	r3, #12
 800fb74:	603b      	str	r3, [r7, #0]
 800fb76:	4638      	mov	r0, r7
 800fb78:	f000 f842 	bl	800fc00 <__malloc_unlock>
 800fb7c:	e797      	b.n	800faae <_malloc_r+0x22>
 800fb7e:	6025      	str	r5, [r4, #0]
 800fb80:	e7dc      	b.n	800fb3c <_malloc_r+0xb0>
 800fb82:	605b      	str	r3, [r3, #4]
 800fb84:	deff      	udf	#255	; 0xff
 800fb86:	bf00      	nop
 800fb88:	20004e68 	.word	0x20004e68

0800fb8c <sniprintf>:
 800fb8c:	b40c      	push	{r2, r3}
 800fb8e:	b530      	push	{r4, r5, lr}
 800fb90:	4b17      	ldr	r3, [pc, #92]	; (800fbf0 <sniprintf+0x64>)
 800fb92:	1e0c      	subs	r4, r1, #0
 800fb94:	681d      	ldr	r5, [r3, #0]
 800fb96:	b09d      	sub	sp, #116	; 0x74
 800fb98:	da08      	bge.n	800fbac <sniprintf+0x20>
 800fb9a:	238b      	movs	r3, #139	; 0x8b
 800fb9c:	602b      	str	r3, [r5, #0]
 800fb9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fba2:	b01d      	add	sp, #116	; 0x74
 800fba4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fba8:	b002      	add	sp, #8
 800fbaa:	4770      	bx	lr
 800fbac:	f44f 7302 	mov.w	r3, #520	; 0x208
 800fbb0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fbb4:	bf14      	ite	ne
 800fbb6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800fbba:	4623      	moveq	r3, r4
 800fbbc:	9304      	str	r3, [sp, #16]
 800fbbe:	9307      	str	r3, [sp, #28]
 800fbc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fbc4:	9002      	str	r0, [sp, #8]
 800fbc6:	9006      	str	r0, [sp, #24]
 800fbc8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fbcc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800fbce:	ab21      	add	r3, sp, #132	; 0x84
 800fbd0:	a902      	add	r1, sp, #8
 800fbd2:	4628      	mov	r0, r5
 800fbd4:	9301      	str	r3, [sp, #4]
 800fbd6:	f000 fad1 	bl	801017c <_svfiprintf_r>
 800fbda:	1c43      	adds	r3, r0, #1
 800fbdc:	bfbc      	itt	lt
 800fbde:	238b      	movlt	r3, #139	; 0x8b
 800fbe0:	602b      	strlt	r3, [r5, #0]
 800fbe2:	2c00      	cmp	r4, #0
 800fbe4:	d0dd      	beq.n	800fba2 <sniprintf+0x16>
 800fbe6:	9b02      	ldr	r3, [sp, #8]
 800fbe8:	2200      	movs	r2, #0
 800fbea:	701a      	strb	r2, [r3, #0]
 800fbec:	e7d9      	b.n	800fba2 <sniprintf+0x16>
 800fbee:	bf00      	nop
 800fbf0:	20000164 	.word	0x20000164

0800fbf4 <__malloc_lock>:
 800fbf4:	4801      	ldr	r0, [pc, #4]	; (800fbfc <__malloc_lock+0x8>)
 800fbf6:	f000 ba18 	b.w	801002a <__retarget_lock_acquire_recursive>
 800fbfa:	bf00      	nop
 800fbfc:	20004fac 	.word	0x20004fac

0800fc00 <__malloc_unlock>:
 800fc00:	4801      	ldr	r0, [pc, #4]	; (800fc08 <__malloc_unlock+0x8>)
 800fc02:	f000 ba13 	b.w	801002c <__retarget_lock_release_recursive>
 800fc06:	bf00      	nop
 800fc08:	20004fac 	.word	0x20004fac

0800fc0c <std>:
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	b510      	push	{r4, lr}
 800fc10:	4604      	mov	r4, r0
 800fc12:	e9c0 3300 	strd	r3, r3, [r0]
 800fc16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fc1a:	6083      	str	r3, [r0, #8]
 800fc1c:	8181      	strh	r1, [r0, #12]
 800fc1e:	6643      	str	r3, [r0, #100]	; 0x64
 800fc20:	81c2      	strh	r2, [r0, #14]
 800fc22:	6183      	str	r3, [r0, #24]
 800fc24:	4619      	mov	r1, r3
 800fc26:	2208      	movs	r2, #8
 800fc28:	305c      	adds	r0, #92	; 0x5c
 800fc2a:	f000 f9ba 	bl	800ffa2 <memset>
 800fc2e:	4b0d      	ldr	r3, [pc, #52]	; (800fc64 <std+0x58>)
 800fc30:	6263      	str	r3, [r4, #36]	; 0x24
 800fc32:	4b0d      	ldr	r3, [pc, #52]	; (800fc68 <std+0x5c>)
 800fc34:	62a3      	str	r3, [r4, #40]	; 0x28
 800fc36:	4b0d      	ldr	r3, [pc, #52]	; (800fc6c <std+0x60>)
 800fc38:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fc3a:	4b0d      	ldr	r3, [pc, #52]	; (800fc70 <std+0x64>)
 800fc3c:	6323      	str	r3, [r4, #48]	; 0x30
 800fc3e:	4b0d      	ldr	r3, [pc, #52]	; (800fc74 <std+0x68>)
 800fc40:	6224      	str	r4, [r4, #32]
 800fc42:	429c      	cmp	r4, r3
 800fc44:	d006      	beq.n	800fc54 <std+0x48>
 800fc46:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800fc4a:	4294      	cmp	r4, r2
 800fc4c:	d002      	beq.n	800fc54 <std+0x48>
 800fc4e:	33d0      	adds	r3, #208	; 0xd0
 800fc50:	429c      	cmp	r4, r3
 800fc52:	d105      	bne.n	800fc60 <std+0x54>
 800fc54:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fc58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc5c:	f000 b9e4 	b.w	8010028 <__retarget_lock_init_recursive>
 800fc60:	bd10      	pop	{r4, pc}
 800fc62:	bf00      	nop
 800fc64:	08010a7d 	.word	0x08010a7d
 800fc68:	08010a9f 	.word	0x08010a9f
 800fc6c:	08010ad7 	.word	0x08010ad7
 800fc70:	08010afb 	.word	0x08010afb
 800fc74:	20004e70 	.word	0x20004e70

0800fc78 <stdio_exit_handler>:
 800fc78:	4a02      	ldr	r2, [pc, #8]	; (800fc84 <stdio_exit_handler+0xc>)
 800fc7a:	4903      	ldr	r1, [pc, #12]	; (800fc88 <stdio_exit_handler+0x10>)
 800fc7c:	4803      	ldr	r0, [pc, #12]	; (800fc8c <stdio_exit_handler+0x14>)
 800fc7e:	f000 b8f5 	b.w	800fe6c <_fwalk_sglue>
 800fc82:	bf00      	nop
 800fc84:	2000010c 	.word	0x2000010c
 800fc88:	08010a2d 	.word	0x08010a2d
 800fc8c:	20000118 	.word	0x20000118

0800fc90 <cleanup_stdio>:
 800fc90:	6841      	ldr	r1, [r0, #4]
 800fc92:	4b0c      	ldr	r3, [pc, #48]	; (800fcc4 <cleanup_stdio+0x34>)
 800fc94:	4299      	cmp	r1, r3
 800fc96:	b510      	push	{r4, lr}
 800fc98:	4604      	mov	r4, r0
 800fc9a:	d001      	beq.n	800fca0 <cleanup_stdio+0x10>
 800fc9c:	f000 fec6 	bl	8010a2c <_fflush_r>
 800fca0:	68a1      	ldr	r1, [r4, #8]
 800fca2:	4b09      	ldr	r3, [pc, #36]	; (800fcc8 <cleanup_stdio+0x38>)
 800fca4:	4299      	cmp	r1, r3
 800fca6:	d002      	beq.n	800fcae <cleanup_stdio+0x1e>
 800fca8:	4620      	mov	r0, r4
 800fcaa:	f000 febf 	bl	8010a2c <_fflush_r>
 800fcae:	68e1      	ldr	r1, [r4, #12]
 800fcb0:	4b06      	ldr	r3, [pc, #24]	; (800fccc <cleanup_stdio+0x3c>)
 800fcb2:	4299      	cmp	r1, r3
 800fcb4:	d004      	beq.n	800fcc0 <cleanup_stdio+0x30>
 800fcb6:	4620      	mov	r0, r4
 800fcb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fcbc:	f000 beb6 	b.w	8010a2c <_fflush_r>
 800fcc0:	bd10      	pop	{r4, pc}
 800fcc2:	bf00      	nop
 800fcc4:	20004e70 	.word	0x20004e70
 800fcc8:	20004ed8 	.word	0x20004ed8
 800fccc:	20004f40 	.word	0x20004f40

0800fcd0 <global_stdio_init.part.0>:
 800fcd0:	b510      	push	{r4, lr}
 800fcd2:	4b0b      	ldr	r3, [pc, #44]	; (800fd00 <global_stdio_init.part.0+0x30>)
 800fcd4:	4c0b      	ldr	r4, [pc, #44]	; (800fd04 <global_stdio_init.part.0+0x34>)
 800fcd6:	4a0c      	ldr	r2, [pc, #48]	; (800fd08 <global_stdio_init.part.0+0x38>)
 800fcd8:	601a      	str	r2, [r3, #0]
 800fcda:	4620      	mov	r0, r4
 800fcdc:	2200      	movs	r2, #0
 800fcde:	2104      	movs	r1, #4
 800fce0:	f7ff ff94 	bl	800fc0c <std>
 800fce4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800fce8:	2201      	movs	r2, #1
 800fcea:	2109      	movs	r1, #9
 800fcec:	f7ff ff8e 	bl	800fc0c <std>
 800fcf0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800fcf4:	2202      	movs	r2, #2
 800fcf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fcfa:	2112      	movs	r1, #18
 800fcfc:	f7ff bf86 	b.w	800fc0c <std>
 800fd00:	20004fa8 	.word	0x20004fa8
 800fd04:	20004e70 	.word	0x20004e70
 800fd08:	0800fc79 	.word	0x0800fc79

0800fd0c <__sfp_lock_acquire>:
 800fd0c:	4801      	ldr	r0, [pc, #4]	; (800fd14 <__sfp_lock_acquire+0x8>)
 800fd0e:	f000 b98c 	b.w	801002a <__retarget_lock_acquire_recursive>
 800fd12:	bf00      	nop
 800fd14:	20004fad 	.word	0x20004fad

0800fd18 <__sfp_lock_release>:
 800fd18:	4801      	ldr	r0, [pc, #4]	; (800fd20 <__sfp_lock_release+0x8>)
 800fd1a:	f000 b987 	b.w	801002c <__retarget_lock_release_recursive>
 800fd1e:	bf00      	nop
 800fd20:	20004fad 	.word	0x20004fad

0800fd24 <__sinit>:
 800fd24:	b510      	push	{r4, lr}
 800fd26:	4604      	mov	r4, r0
 800fd28:	f7ff fff0 	bl	800fd0c <__sfp_lock_acquire>
 800fd2c:	6a23      	ldr	r3, [r4, #32]
 800fd2e:	b11b      	cbz	r3, 800fd38 <__sinit+0x14>
 800fd30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd34:	f7ff bff0 	b.w	800fd18 <__sfp_lock_release>
 800fd38:	4b04      	ldr	r3, [pc, #16]	; (800fd4c <__sinit+0x28>)
 800fd3a:	6223      	str	r3, [r4, #32]
 800fd3c:	4b04      	ldr	r3, [pc, #16]	; (800fd50 <__sinit+0x2c>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d1f5      	bne.n	800fd30 <__sinit+0xc>
 800fd44:	f7ff ffc4 	bl	800fcd0 <global_stdio_init.part.0>
 800fd48:	e7f2      	b.n	800fd30 <__sinit+0xc>
 800fd4a:	bf00      	nop
 800fd4c:	0800fc91 	.word	0x0800fc91
 800fd50:	20004fa8 	.word	0x20004fa8

0800fd54 <_strtol_l.constprop.0>:
 800fd54:	2b01      	cmp	r3, #1
 800fd56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd5a:	d001      	beq.n	800fd60 <_strtol_l.constprop.0+0xc>
 800fd5c:	2b24      	cmp	r3, #36	; 0x24
 800fd5e:	d906      	bls.n	800fd6e <_strtol_l.constprop.0+0x1a>
 800fd60:	f000 f938 	bl	800ffd4 <__errno>
 800fd64:	2316      	movs	r3, #22
 800fd66:	6003      	str	r3, [r0, #0]
 800fd68:	2000      	movs	r0, #0
 800fd6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd6e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800fe54 <_strtol_l.constprop.0+0x100>
 800fd72:	460d      	mov	r5, r1
 800fd74:	462e      	mov	r6, r5
 800fd76:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fd7a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800fd7e:	f017 0708 	ands.w	r7, r7, #8
 800fd82:	d1f7      	bne.n	800fd74 <_strtol_l.constprop.0+0x20>
 800fd84:	2c2d      	cmp	r4, #45	; 0x2d
 800fd86:	d132      	bne.n	800fdee <_strtol_l.constprop.0+0x9a>
 800fd88:	782c      	ldrb	r4, [r5, #0]
 800fd8a:	2701      	movs	r7, #1
 800fd8c:	1cb5      	adds	r5, r6, #2
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d05b      	beq.n	800fe4a <_strtol_l.constprop.0+0xf6>
 800fd92:	2b10      	cmp	r3, #16
 800fd94:	d109      	bne.n	800fdaa <_strtol_l.constprop.0+0x56>
 800fd96:	2c30      	cmp	r4, #48	; 0x30
 800fd98:	d107      	bne.n	800fdaa <_strtol_l.constprop.0+0x56>
 800fd9a:	782c      	ldrb	r4, [r5, #0]
 800fd9c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800fda0:	2c58      	cmp	r4, #88	; 0x58
 800fda2:	d14d      	bne.n	800fe40 <_strtol_l.constprop.0+0xec>
 800fda4:	786c      	ldrb	r4, [r5, #1]
 800fda6:	2310      	movs	r3, #16
 800fda8:	3502      	adds	r5, #2
 800fdaa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800fdae:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800fdb2:	f04f 0e00 	mov.w	lr, #0
 800fdb6:	fbb8 f9f3 	udiv	r9, r8, r3
 800fdba:	4676      	mov	r6, lr
 800fdbc:	fb03 8a19 	mls	sl, r3, r9, r8
 800fdc0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800fdc4:	f1bc 0f09 	cmp.w	ip, #9
 800fdc8:	d816      	bhi.n	800fdf8 <_strtol_l.constprop.0+0xa4>
 800fdca:	4664      	mov	r4, ip
 800fdcc:	42a3      	cmp	r3, r4
 800fdce:	dd24      	ble.n	800fe1a <_strtol_l.constprop.0+0xc6>
 800fdd0:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800fdd4:	d008      	beq.n	800fde8 <_strtol_l.constprop.0+0x94>
 800fdd6:	45b1      	cmp	r9, r6
 800fdd8:	d31c      	bcc.n	800fe14 <_strtol_l.constprop.0+0xc0>
 800fdda:	d101      	bne.n	800fde0 <_strtol_l.constprop.0+0x8c>
 800fddc:	45a2      	cmp	sl, r4
 800fdde:	db19      	blt.n	800fe14 <_strtol_l.constprop.0+0xc0>
 800fde0:	fb06 4603 	mla	r6, r6, r3, r4
 800fde4:	f04f 0e01 	mov.w	lr, #1
 800fde8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fdec:	e7e8      	b.n	800fdc0 <_strtol_l.constprop.0+0x6c>
 800fdee:	2c2b      	cmp	r4, #43	; 0x2b
 800fdf0:	bf04      	itt	eq
 800fdf2:	782c      	ldrbeq	r4, [r5, #0]
 800fdf4:	1cb5      	addeq	r5, r6, #2
 800fdf6:	e7ca      	b.n	800fd8e <_strtol_l.constprop.0+0x3a>
 800fdf8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800fdfc:	f1bc 0f19 	cmp.w	ip, #25
 800fe00:	d801      	bhi.n	800fe06 <_strtol_l.constprop.0+0xb2>
 800fe02:	3c37      	subs	r4, #55	; 0x37
 800fe04:	e7e2      	b.n	800fdcc <_strtol_l.constprop.0+0x78>
 800fe06:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800fe0a:	f1bc 0f19 	cmp.w	ip, #25
 800fe0e:	d804      	bhi.n	800fe1a <_strtol_l.constprop.0+0xc6>
 800fe10:	3c57      	subs	r4, #87	; 0x57
 800fe12:	e7db      	b.n	800fdcc <_strtol_l.constprop.0+0x78>
 800fe14:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800fe18:	e7e6      	b.n	800fde8 <_strtol_l.constprop.0+0x94>
 800fe1a:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800fe1e:	d105      	bne.n	800fe2c <_strtol_l.constprop.0+0xd8>
 800fe20:	2322      	movs	r3, #34	; 0x22
 800fe22:	6003      	str	r3, [r0, #0]
 800fe24:	4646      	mov	r6, r8
 800fe26:	b942      	cbnz	r2, 800fe3a <_strtol_l.constprop.0+0xe6>
 800fe28:	4630      	mov	r0, r6
 800fe2a:	e79e      	b.n	800fd6a <_strtol_l.constprop.0+0x16>
 800fe2c:	b107      	cbz	r7, 800fe30 <_strtol_l.constprop.0+0xdc>
 800fe2e:	4276      	negs	r6, r6
 800fe30:	2a00      	cmp	r2, #0
 800fe32:	d0f9      	beq.n	800fe28 <_strtol_l.constprop.0+0xd4>
 800fe34:	f1be 0f00 	cmp.w	lr, #0
 800fe38:	d000      	beq.n	800fe3c <_strtol_l.constprop.0+0xe8>
 800fe3a:	1e69      	subs	r1, r5, #1
 800fe3c:	6011      	str	r1, [r2, #0]
 800fe3e:	e7f3      	b.n	800fe28 <_strtol_l.constprop.0+0xd4>
 800fe40:	2430      	movs	r4, #48	; 0x30
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d1b1      	bne.n	800fdaa <_strtol_l.constprop.0+0x56>
 800fe46:	2308      	movs	r3, #8
 800fe48:	e7af      	b.n	800fdaa <_strtol_l.constprop.0+0x56>
 800fe4a:	2c30      	cmp	r4, #48	; 0x30
 800fe4c:	d0a5      	beq.n	800fd9a <_strtol_l.constprop.0+0x46>
 800fe4e:	230a      	movs	r3, #10
 800fe50:	e7ab      	b.n	800fdaa <_strtol_l.constprop.0+0x56>
 800fe52:	bf00      	nop
 800fe54:	080116f1 	.word	0x080116f1

0800fe58 <strtol>:
 800fe58:	4613      	mov	r3, r2
 800fe5a:	460a      	mov	r2, r1
 800fe5c:	4601      	mov	r1, r0
 800fe5e:	4802      	ldr	r0, [pc, #8]	; (800fe68 <strtol+0x10>)
 800fe60:	6800      	ldr	r0, [r0, #0]
 800fe62:	f7ff bf77 	b.w	800fd54 <_strtol_l.constprop.0>
 800fe66:	bf00      	nop
 800fe68:	20000164 	.word	0x20000164

0800fe6c <_fwalk_sglue>:
 800fe6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe70:	4607      	mov	r7, r0
 800fe72:	4688      	mov	r8, r1
 800fe74:	4614      	mov	r4, r2
 800fe76:	2600      	movs	r6, #0
 800fe78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fe7c:	f1b9 0901 	subs.w	r9, r9, #1
 800fe80:	d505      	bpl.n	800fe8e <_fwalk_sglue+0x22>
 800fe82:	6824      	ldr	r4, [r4, #0]
 800fe84:	2c00      	cmp	r4, #0
 800fe86:	d1f7      	bne.n	800fe78 <_fwalk_sglue+0xc>
 800fe88:	4630      	mov	r0, r6
 800fe8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe8e:	89ab      	ldrh	r3, [r5, #12]
 800fe90:	2b01      	cmp	r3, #1
 800fe92:	d907      	bls.n	800fea4 <_fwalk_sglue+0x38>
 800fe94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fe98:	3301      	adds	r3, #1
 800fe9a:	d003      	beq.n	800fea4 <_fwalk_sglue+0x38>
 800fe9c:	4629      	mov	r1, r5
 800fe9e:	4638      	mov	r0, r7
 800fea0:	47c0      	blx	r8
 800fea2:	4306      	orrs	r6, r0
 800fea4:	3568      	adds	r5, #104	; 0x68
 800fea6:	e7e9      	b.n	800fe7c <_fwalk_sglue+0x10>

0800fea8 <iprintf>:
 800fea8:	b40f      	push	{r0, r1, r2, r3}
 800feaa:	b507      	push	{r0, r1, r2, lr}
 800feac:	4906      	ldr	r1, [pc, #24]	; (800fec8 <iprintf+0x20>)
 800feae:	ab04      	add	r3, sp, #16
 800feb0:	6808      	ldr	r0, [r1, #0]
 800feb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800feb6:	6881      	ldr	r1, [r0, #8]
 800feb8:	9301      	str	r3, [sp, #4]
 800feba:	f000 fa87 	bl	80103cc <_vfiprintf_r>
 800febe:	b003      	add	sp, #12
 800fec0:	f85d eb04 	ldr.w	lr, [sp], #4
 800fec4:	b004      	add	sp, #16
 800fec6:	4770      	bx	lr
 800fec8:	20000164 	.word	0x20000164

0800fecc <_puts_r>:
 800fecc:	6a03      	ldr	r3, [r0, #32]
 800fece:	b570      	push	{r4, r5, r6, lr}
 800fed0:	6884      	ldr	r4, [r0, #8]
 800fed2:	4605      	mov	r5, r0
 800fed4:	460e      	mov	r6, r1
 800fed6:	b90b      	cbnz	r3, 800fedc <_puts_r+0x10>
 800fed8:	f7ff ff24 	bl	800fd24 <__sinit>
 800fedc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fede:	07db      	lsls	r3, r3, #31
 800fee0:	d405      	bmi.n	800feee <_puts_r+0x22>
 800fee2:	89a3      	ldrh	r3, [r4, #12]
 800fee4:	0598      	lsls	r0, r3, #22
 800fee6:	d402      	bmi.n	800feee <_puts_r+0x22>
 800fee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800feea:	f000 f89e 	bl	801002a <__retarget_lock_acquire_recursive>
 800feee:	89a3      	ldrh	r3, [r4, #12]
 800fef0:	0719      	lsls	r1, r3, #28
 800fef2:	d513      	bpl.n	800ff1c <_puts_r+0x50>
 800fef4:	6923      	ldr	r3, [r4, #16]
 800fef6:	b18b      	cbz	r3, 800ff1c <_puts_r+0x50>
 800fef8:	3e01      	subs	r6, #1
 800fefa:	68a3      	ldr	r3, [r4, #8]
 800fefc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ff00:	3b01      	subs	r3, #1
 800ff02:	60a3      	str	r3, [r4, #8]
 800ff04:	b9e9      	cbnz	r1, 800ff42 <_puts_r+0x76>
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	da2e      	bge.n	800ff68 <_puts_r+0x9c>
 800ff0a:	4622      	mov	r2, r4
 800ff0c:	210a      	movs	r1, #10
 800ff0e:	4628      	mov	r0, r5
 800ff10:	f000 fe26 	bl	8010b60 <__swbuf_r>
 800ff14:	3001      	adds	r0, #1
 800ff16:	d007      	beq.n	800ff28 <_puts_r+0x5c>
 800ff18:	250a      	movs	r5, #10
 800ff1a:	e007      	b.n	800ff2c <_puts_r+0x60>
 800ff1c:	4621      	mov	r1, r4
 800ff1e:	4628      	mov	r0, r5
 800ff20:	f000 fe5c 	bl	8010bdc <__swsetup_r>
 800ff24:	2800      	cmp	r0, #0
 800ff26:	d0e7      	beq.n	800fef8 <_puts_r+0x2c>
 800ff28:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ff2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ff2e:	07da      	lsls	r2, r3, #31
 800ff30:	d405      	bmi.n	800ff3e <_puts_r+0x72>
 800ff32:	89a3      	ldrh	r3, [r4, #12]
 800ff34:	059b      	lsls	r3, r3, #22
 800ff36:	d402      	bmi.n	800ff3e <_puts_r+0x72>
 800ff38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff3a:	f000 f877 	bl	801002c <__retarget_lock_release_recursive>
 800ff3e:	4628      	mov	r0, r5
 800ff40:	bd70      	pop	{r4, r5, r6, pc}
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	da04      	bge.n	800ff50 <_puts_r+0x84>
 800ff46:	69a2      	ldr	r2, [r4, #24]
 800ff48:	429a      	cmp	r2, r3
 800ff4a:	dc06      	bgt.n	800ff5a <_puts_r+0x8e>
 800ff4c:	290a      	cmp	r1, #10
 800ff4e:	d004      	beq.n	800ff5a <_puts_r+0x8e>
 800ff50:	6823      	ldr	r3, [r4, #0]
 800ff52:	1c5a      	adds	r2, r3, #1
 800ff54:	6022      	str	r2, [r4, #0]
 800ff56:	7019      	strb	r1, [r3, #0]
 800ff58:	e7cf      	b.n	800fefa <_puts_r+0x2e>
 800ff5a:	4622      	mov	r2, r4
 800ff5c:	4628      	mov	r0, r5
 800ff5e:	f000 fdff 	bl	8010b60 <__swbuf_r>
 800ff62:	3001      	adds	r0, #1
 800ff64:	d1c9      	bne.n	800fefa <_puts_r+0x2e>
 800ff66:	e7df      	b.n	800ff28 <_puts_r+0x5c>
 800ff68:	6823      	ldr	r3, [r4, #0]
 800ff6a:	250a      	movs	r5, #10
 800ff6c:	1c5a      	adds	r2, r3, #1
 800ff6e:	6022      	str	r2, [r4, #0]
 800ff70:	701d      	strb	r5, [r3, #0]
 800ff72:	e7db      	b.n	800ff2c <_puts_r+0x60>

0800ff74 <puts>:
 800ff74:	4b02      	ldr	r3, [pc, #8]	; (800ff80 <puts+0xc>)
 800ff76:	4601      	mov	r1, r0
 800ff78:	6818      	ldr	r0, [r3, #0]
 800ff7a:	f7ff bfa7 	b.w	800fecc <_puts_r>
 800ff7e:	bf00      	nop
 800ff80:	20000164 	.word	0x20000164

0800ff84 <strcat>:
 800ff84:	b510      	push	{r4, lr}
 800ff86:	4602      	mov	r2, r0
 800ff88:	7814      	ldrb	r4, [r2, #0]
 800ff8a:	4613      	mov	r3, r2
 800ff8c:	3201      	adds	r2, #1
 800ff8e:	2c00      	cmp	r4, #0
 800ff90:	d1fa      	bne.n	800ff88 <strcat+0x4>
 800ff92:	3b01      	subs	r3, #1
 800ff94:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ff98:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ff9c:	2a00      	cmp	r2, #0
 800ff9e:	d1f9      	bne.n	800ff94 <strcat+0x10>
 800ffa0:	bd10      	pop	{r4, pc}

0800ffa2 <memset>:
 800ffa2:	4402      	add	r2, r0
 800ffa4:	4603      	mov	r3, r0
 800ffa6:	4293      	cmp	r3, r2
 800ffa8:	d100      	bne.n	800ffac <memset+0xa>
 800ffaa:	4770      	bx	lr
 800ffac:	f803 1b01 	strb.w	r1, [r3], #1
 800ffb0:	e7f9      	b.n	800ffa6 <memset+0x4>
	...

0800ffb4 <_sbrk_r>:
 800ffb4:	b538      	push	{r3, r4, r5, lr}
 800ffb6:	4d06      	ldr	r5, [pc, #24]	; (800ffd0 <_sbrk_r+0x1c>)
 800ffb8:	2300      	movs	r3, #0
 800ffba:	4604      	mov	r4, r0
 800ffbc:	4608      	mov	r0, r1
 800ffbe:	602b      	str	r3, [r5, #0]
 800ffc0:	f7f1 fb5a 	bl	8001678 <_sbrk>
 800ffc4:	1c43      	adds	r3, r0, #1
 800ffc6:	d102      	bne.n	800ffce <_sbrk_r+0x1a>
 800ffc8:	682b      	ldr	r3, [r5, #0]
 800ffca:	b103      	cbz	r3, 800ffce <_sbrk_r+0x1a>
 800ffcc:	6023      	str	r3, [r4, #0]
 800ffce:	bd38      	pop	{r3, r4, r5, pc}
 800ffd0:	20004fb0 	.word	0x20004fb0

0800ffd4 <__errno>:
 800ffd4:	4b01      	ldr	r3, [pc, #4]	; (800ffdc <__errno+0x8>)
 800ffd6:	6818      	ldr	r0, [r3, #0]
 800ffd8:	4770      	bx	lr
 800ffda:	bf00      	nop
 800ffdc:	20000164 	.word	0x20000164

0800ffe0 <__libc_init_array>:
 800ffe0:	b570      	push	{r4, r5, r6, lr}
 800ffe2:	4d0d      	ldr	r5, [pc, #52]	; (8010018 <__libc_init_array+0x38>)
 800ffe4:	4c0d      	ldr	r4, [pc, #52]	; (801001c <__libc_init_array+0x3c>)
 800ffe6:	1b64      	subs	r4, r4, r5
 800ffe8:	10a4      	asrs	r4, r4, #2
 800ffea:	2600      	movs	r6, #0
 800ffec:	42a6      	cmp	r6, r4
 800ffee:	d109      	bne.n	8010004 <__libc_init_array+0x24>
 800fff0:	4d0b      	ldr	r5, [pc, #44]	; (8010020 <__libc_init_array+0x40>)
 800fff2:	4c0c      	ldr	r4, [pc, #48]	; (8010024 <__libc_init_array+0x44>)
 800fff4:	f000 ff44 	bl	8010e80 <_init>
 800fff8:	1b64      	subs	r4, r4, r5
 800fffa:	10a4      	asrs	r4, r4, #2
 800fffc:	2600      	movs	r6, #0
 800fffe:	42a6      	cmp	r6, r4
 8010000:	d105      	bne.n	801000e <__libc_init_array+0x2e>
 8010002:	bd70      	pop	{r4, r5, r6, pc}
 8010004:	f855 3b04 	ldr.w	r3, [r5], #4
 8010008:	4798      	blx	r3
 801000a:	3601      	adds	r6, #1
 801000c:	e7ee      	b.n	800ffec <__libc_init_array+0xc>
 801000e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010012:	4798      	blx	r3
 8010014:	3601      	adds	r6, #1
 8010016:	e7f2      	b.n	800fffe <__libc_init_array+0x1e>
 8010018:	0801182c 	.word	0x0801182c
 801001c:	0801182c 	.word	0x0801182c
 8010020:	0801182c 	.word	0x0801182c
 8010024:	08011830 	.word	0x08011830

08010028 <__retarget_lock_init_recursive>:
 8010028:	4770      	bx	lr

0801002a <__retarget_lock_acquire_recursive>:
 801002a:	4770      	bx	lr

0801002c <__retarget_lock_release_recursive>:
 801002c:	4770      	bx	lr
	...

08010030 <_free_r>:
 8010030:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010032:	2900      	cmp	r1, #0
 8010034:	d044      	beq.n	80100c0 <_free_r+0x90>
 8010036:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801003a:	9001      	str	r0, [sp, #4]
 801003c:	2b00      	cmp	r3, #0
 801003e:	f1a1 0404 	sub.w	r4, r1, #4
 8010042:	bfb8      	it	lt
 8010044:	18e4      	addlt	r4, r4, r3
 8010046:	f7ff fdd5 	bl	800fbf4 <__malloc_lock>
 801004a:	4a1e      	ldr	r2, [pc, #120]	; (80100c4 <_free_r+0x94>)
 801004c:	9801      	ldr	r0, [sp, #4]
 801004e:	6813      	ldr	r3, [r2, #0]
 8010050:	b933      	cbnz	r3, 8010060 <_free_r+0x30>
 8010052:	6063      	str	r3, [r4, #4]
 8010054:	6014      	str	r4, [r2, #0]
 8010056:	b003      	add	sp, #12
 8010058:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801005c:	f7ff bdd0 	b.w	800fc00 <__malloc_unlock>
 8010060:	42a3      	cmp	r3, r4
 8010062:	d908      	bls.n	8010076 <_free_r+0x46>
 8010064:	6825      	ldr	r5, [r4, #0]
 8010066:	1961      	adds	r1, r4, r5
 8010068:	428b      	cmp	r3, r1
 801006a:	bf01      	itttt	eq
 801006c:	6819      	ldreq	r1, [r3, #0]
 801006e:	685b      	ldreq	r3, [r3, #4]
 8010070:	1949      	addeq	r1, r1, r5
 8010072:	6021      	streq	r1, [r4, #0]
 8010074:	e7ed      	b.n	8010052 <_free_r+0x22>
 8010076:	461a      	mov	r2, r3
 8010078:	685b      	ldr	r3, [r3, #4]
 801007a:	b10b      	cbz	r3, 8010080 <_free_r+0x50>
 801007c:	42a3      	cmp	r3, r4
 801007e:	d9fa      	bls.n	8010076 <_free_r+0x46>
 8010080:	6811      	ldr	r1, [r2, #0]
 8010082:	1855      	adds	r5, r2, r1
 8010084:	42a5      	cmp	r5, r4
 8010086:	d10b      	bne.n	80100a0 <_free_r+0x70>
 8010088:	6824      	ldr	r4, [r4, #0]
 801008a:	4421      	add	r1, r4
 801008c:	1854      	adds	r4, r2, r1
 801008e:	42a3      	cmp	r3, r4
 8010090:	6011      	str	r1, [r2, #0]
 8010092:	d1e0      	bne.n	8010056 <_free_r+0x26>
 8010094:	681c      	ldr	r4, [r3, #0]
 8010096:	685b      	ldr	r3, [r3, #4]
 8010098:	6053      	str	r3, [r2, #4]
 801009a:	440c      	add	r4, r1
 801009c:	6014      	str	r4, [r2, #0]
 801009e:	e7da      	b.n	8010056 <_free_r+0x26>
 80100a0:	d902      	bls.n	80100a8 <_free_r+0x78>
 80100a2:	230c      	movs	r3, #12
 80100a4:	6003      	str	r3, [r0, #0]
 80100a6:	e7d6      	b.n	8010056 <_free_r+0x26>
 80100a8:	6825      	ldr	r5, [r4, #0]
 80100aa:	1961      	adds	r1, r4, r5
 80100ac:	428b      	cmp	r3, r1
 80100ae:	bf04      	itt	eq
 80100b0:	6819      	ldreq	r1, [r3, #0]
 80100b2:	685b      	ldreq	r3, [r3, #4]
 80100b4:	6063      	str	r3, [r4, #4]
 80100b6:	bf04      	itt	eq
 80100b8:	1949      	addeq	r1, r1, r5
 80100ba:	6021      	streq	r1, [r4, #0]
 80100bc:	6054      	str	r4, [r2, #4]
 80100be:	e7ca      	b.n	8010056 <_free_r+0x26>
 80100c0:	b003      	add	sp, #12
 80100c2:	bd30      	pop	{r4, r5, pc}
 80100c4:	20004e68 	.word	0x20004e68

080100c8 <__ssputs_r>:
 80100c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100cc:	688e      	ldr	r6, [r1, #8]
 80100ce:	461f      	mov	r7, r3
 80100d0:	42be      	cmp	r6, r7
 80100d2:	680b      	ldr	r3, [r1, #0]
 80100d4:	4682      	mov	sl, r0
 80100d6:	460c      	mov	r4, r1
 80100d8:	4690      	mov	r8, r2
 80100da:	d82c      	bhi.n	8010136 <__ssputs_r+0x6e>
 80100dc:	898a      	ldrh	r2, [r1, #12]
 80100de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80100e2:	d026      	beq.n	8010132 <__ssputs_r+0x6a>
 80100e4:	6965      	ldr	r5, [r4, #20]
 80100e6:	6909      	ldr	r1, [r1, #16]
 80100e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80100ec:	eba3 0901 	sub.w	r9, r3, r1
 80100f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80100f4:	1c7b      	adds	r3, r7, #1
 80100f6:	444b      	add	r3, r9
 80100f8:	106d      	asrs	r5, r5, #1
 80100fa:	429d      	cmp	r5, r3
 80100fc:	bf38      	it	cc
 80100fe:	461d      	movcc	r5, r3
 8010100:	0553      	lsls	r3, r2, #21
 8010102:	d527      	bpl.n	8010154 <__ssputs_r+0x8c>
 8010104:	4629      	mov	r1, r5
 8010106:	f7ff fcc1 	bl	800fa8c <_malloc_r>
 801010a:	4606      	mov	r6, r0
 801010c:	b360      	cbz	r0, 8010168 <__ssputs_r+0xa0>
 801010e:	6921      	ldr	r1, [r4, #16]
 8010110:	464a      	mov	r2, r9
 8010112:	f000 fe9f 	bl	8010e54 <memcpy>
 8010116:	89a3      	ldrh	r3, [r4, #12]
 8010118:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801011c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010120:	81a3      	strh	r3, [r4, #12]
 8010122:	6126      	str	r6, [r4, #16]
 8010124:	6165      	str	r5, [r4, #20]
 8010126:	444e      	add	r6, r9
 8010128:	eba5 0509 	sub.w	r5, r5, r9
 801012c:	6026      	str	r6, [r4, #0]
 801012e:	60a5      	str	r5, [r4, #8]
 8010130:	463e      	mov	r6, r7
 8010132:	42be      	cmp	r6, r7
 8010134:	d900      	bls.n	8010138 <__ssputs_r+0x70>
 8010136:	463e      	mov	r6, r7
 8010138:	6820      	ldr	r0, [r4, #0]
 801013a:	4632      	mov	r2, r6
 801013c:	4641      	mov	r1, r8
 801013e:	f000 fe07 	bl	8010d50 <memmove>
 8010142:	68a3      	ldr	r3, [r4, #8]
 8010144:	1b9b      	subs	r3, r3, r6
 8010146:	60a3      	str	r3, [r4, #8]
 8010148:	6823      	ldr	r3, [r4, #0]
 801014a:	4433      	add	r3, r6
 801014c:	6023      	str	r3, [r4, #0]
 801014e:	2000      	movs	r0, #0
 8010150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010154:	462a      	mov	r2, r5
 8010156:	f000 fcd4 	bl	8010b02 <_realloc_r>
 801015a:	4606      	mov	r6, r0
 801015c:	2800      	cmp	r0, #0
 801015e:	d1e0      	bne.n	8010122 <__ssputs_r+0x5a>
 8010160:	6921      	ldr	r1, [r4, #16]
 8010162:	4650      	mov	r0, sl
 8010164:	f7ff ff64 	bl	8010030 <_free_r>
 8010168:	230c      	movs	r3, #12
 801016a:	f8ca 3000 	str.w	r3, [sl]
 801016e:	89a3      	ldrh	r3, [r4, #12]
 8010170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010174:	81a3      	strh	r3, [r4, #12]
 8010176:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801017a:	e7e9      	b.n	8010150 <__ssputs_r+0x88>

0801017c <_svfiprintf_r>:
 801017c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010180:	4698      	mov	r8, r3
 8010182:	898b      	ldrh	r3, [r1, #12]
 8010184:	061b      	lsls	r3, r3, #24
 8010186:	b09d      	sub	sp, #116	; 0x74
 8010188:	4607      	mov	r7, r0
 801018a:	460d      	mov	r5, r1
 801018c:	4614      	mov	r4, r2
 801018e:	d50e      	bpl.n	80101ae <_svfiprintf_r+0x32>
 8010190:	690b      	ldr	r3, [r1, #16]
 8010192:	b963      	cbnz	r3, 80101ae <_svfiprintf_r+0x32>
 8010194:	2140      	movs	r1, #64	; 0x40
 8010196:	f7ff fc79 	bl	800fa8c <_malloc_r>
 801019a:	6028      	str	r0, [r5, #0]
 801019c:	6128      	str	r0, [r5, #16]
 801019e:	b920      	cbnz	r0, 80101aa <_svfiprintf_r+0x2e>
 80101a0:	230c      	movs	r3, #12
 80101a2:	603b      	str	r3, [r7, #0]
 80101a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80101a8:	e0d0      	b.n	801034c <_svfiprintf_r+0x1d0>
 80101aa:	2340      	movs	r3, #64	; 0x40
 80101ac:	616b      	str	r3, [r5, #20]
 80101ae:	2300      	movs	r3, #0
 80101b0:	9309      	str	r3, [sp, #36]	; 0x24
 80101b2:	2320      	movs	r3, #32
 80101b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80101b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80101bc:	2330      	movs	r3, #48	; 0x30
 80101be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010364 <_svfiprintf_r+0x1e8>
 80101c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80101c6:	f04f 0901 	mov.w	r9, #1
 80101ca:	4623      	mov	r3, r4
 80101cc:	469a      	mov	sl, r3
 80101ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101d2:	b10a      	cbz	r2, 80101d8 <_svfiprintf_r+0x5c>
 80101d4:	2a25      	cmp	r2, #37	; 0x25
 80101d6:	d1f9      	bne.n	80101cc <_svfiprintf_r+0x50>
 80101d8:	ebba 0b04 	subs.w	fp, sl, r4
 80101dc:	d00b      	beq.n	80101f6 <_svfiprintf_r+0x7a>
 80101de:	465b      	mov	r3, fp
 80101e0:	4622      	mov	r2, r4
 80101e2:	4629      	mov	r1, r5
 80101e4:	4638      	mov	r0, r7
 80101e6:	f7ff ff6f 	bl	80100c8 <__ssputs_r>
 80101ea:	3001      	adds	r0, #1
 80101ec:	f000 80a9 	beq.w	8010342 <_svfiprintf_r+0x1c6>
 80101f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80101f2:	445a      	add	r2, fp
 80101f4:	9209      	str	r2, [sp, #36]	; 0x24
 80101f6:	f89a 3000 	ldrb.w	r3, [sl]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	f000 80a1 	beq.w	8010342 <_svfiprintf_r+0x1c6>
 8010200:	2300      	movs	r3, #0
 8010202:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010206:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801020a:	f10a 0a01 	add.w	sl, sl, #1
 801020e:	9304      	str	r3, [sp, #16]
 8010210:	9307      	str	r3, [sp, #28]
 8010212:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010216:	931a      	str	r3, [sp, #104]	; 0x68
 8010218:	4654      	mov	r4, sl
 801021a:	2205      	movs	r2, #5
 801021c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010220:	4850      	ldr	r0, [pc, #320]	; (8010364 <_svfiprintf_r+0x1e8>)
 8010222:	f7f0 f80d 	bl	8000240 <memchr>
 8010226:	9a04      	ldr	r2, [sp, #16]
 8010228:	b9d8      	cbnz	r0, 8010262 <_svfiprintf_r+0xe6>
 801022a:	06d0      	lsls	r0, r2, #27
 801022c:	bf44      	itt	mi
 801022e:	2320      	movmi	r3, #32
 8010230:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010234:	0711      	lsls	r1, r2, #28
 8010236:	bf44      	itt	mi
 8010238:	232b      	movmi	r3, #43	; 0x2b
 801023a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801023e:	f89a 3000 	ldrb.w	r3, [sl]
 8010242:	2b2a      	cmp	r3, #42	; 0x2a
 8010244:	d015      	beq.n	8010272 <_svfiprintf_r+0xf6>
 8010246:	9a07      	ldr	r2, [sp, #28]
 8010248:	4654      	mov	r4, sl
 801024a:	2000      	movs	r0, #0
 801024c:	f04f 0c0a 	mov.w	ip, #10
 8010250:	4621      	mov	r1, r4
 8010252:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010256:	3b30      	subs	r3, #48	; 0x30
 8010258:	2b09      	cmp	r3, #9
 801025a:	d94d      	bls.n	80102f8 <_svfiprintf_r+0x17c>
 801025c:	b1b0      	cbz	r0, 801028c <_svfiprintf_r+0x110>
 801025e:	9207      	str	r2, [sp, #28]
 8010260:	e014      	b.n	801028c <_svfiprintf_r+0x110>
 8010262:	eba0 0308 	sub.w	r3, r0, r8
 8010266:	fa09 f303 	lsl.w	r3, r9, r3
 801026a:	4313      	orrs	r3, r2
 801026c:	9304      	str	r3, [sp, #16]
 801026e:	46a2      	mov	sl, r4
 8010270:	e7d2      	b.n	8010218 <_svfiprintf_r+0x9c>
 8010272:	9b03      	ldr	r3, [sp, #12]
 8010274:	1d19      	adds	r1, r3, #4
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	9103      	str	r1, [sp, #12]
 801027a:	2b00      	cmp	r3, #0
 801027c:	bfbb      	ittet	lt
 801027e:	425b      	neglt	r3, r3
 8010280:	f042 0202 	orrlt.w	r2, r2, #2
 8010284:	9307      	strge	r3, [sp, #28]
 8010286:	9307      	strlt	r3, [sp, #28]
 8010288:	bfb8      	it	lt
 801028a:	9204      	strlt	r2, [sp, #16]
 801028c:	7823      	ldrb	r3, [r4, #0]
 801028e:	2b2e      	cmp	r3, #46	; 0x2e
 8010290:	d10c      	bne.n	80102ac <_svfiprintf_r+0x130>
 8010292:	7863      	ldrb	r3, [r4, #1]
 8010294:	2b2a      	cmp	r3, #42	; 0x2a
 8010296:	d134      	bne.n	8010302 <_svfiprintf_r+0x186>
 8010298:	9b03      	ldr	r3, [sp, #12]
 801029a:	1d1a      	adds	r2, r3, #4
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	9203      	str	r2, [sp, #12]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	bfb8      	it	lt
 80102a4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80102a8:	3402      	adds	r4, #2
 80102aa:	9305      	str	r3, [sp, #20]
 80102ac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010374 <_svfiprintf_r+0x1f8>
 80102b0:	7821      	ldrb	r1, [r4, #0]
 80102b2:	2203      	movs	r2, #3
 80102b4:	4650      	mov	r0, sl
 80102b6:	f7ef ffc3 	bl	8000240 <memchr>
 80102ba:	b138      	cbz	r0, 80102cc <_svfiprintf_r+0x150>
 80102bc:	9b04      	ldr	r3, [sp, #16]
 80102be:	eba0 000a 	sub.w	r0, r0, sl
 80102c2:	2240      	movs	r2, #64	; 0x40
 80102c4:	4082      	lsls	r2, r0
 80102c6:	4313      	orrs	r3, r2
 80102c8:	3401      	adds	r4, #1
 80102ca:	9304      	str	r3, [sp, #16]
 80102cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102d0:	4825      	ldr	r0, [pc, #148]	; (8010368 <_svfiprintf_r+0x1ec>)
 80102d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80102d6:	2206      	movs	r2, #6
 80102d8:	f7ef ffb2 	bl	8000240 <memchr>
 80102dc:	2800      	cmp	r0, #0
 80102de:	d038      	beq.n	8010352 <_svfiprintf_r+0x1d6>
 80102e0:	4b22      	ldr	r3, [pc, #136]	; (801036c <_svfiprintf_r+0x1f0>)
 80102e2:	bb1b      	cbnz	r3, 801032c <_svfiprintf_r+0x1b0>
 80102e4:	9b03      	ldr	r3, [sp, #12]
 80102e6:	3307      	adds	r3, #7
 80102e8:	f023 0307 	bic.w	r3, r3, #7
 80102ec:	3308      	adds	r3, #8
 80102ee:	9303      	str	r3, [sp, #12]
 80102f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102f2:	4433      	add	r3, r6
 80102f4:	9309      	str	r3, [sp, #36]	; 0x24
 80102f6:	e768      	b.n	80101ca <_svfiprintf_r+0x4e>
 80102f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80102fc:	460c      	mov	r4, r1
 80102fe:	2001      	movs	r0, #1
 8010300:	e7a6      	b.n	8010250 <_svfiprintf_r+0xd4>
 8010302:	2300      	movs	r3, #0
 8010304:	3401      	adds	r4, #1
 8010306:	9305      	str	r3, [sp, #20]
 8010308:	4619      	mov	r1, r3
 801030a:	f04f 0c0a 	mov.w	ip, #10
 801030e:	4620      	mov	r0, r4
 8010310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010314:	3a30      	subs	r2, #48	; 0x30
 8010316:	2a09      	cmp	r2, #9
 8010318:	d903      	bls.n	8010322 <_svfiprintf_r+0x1a6>
 801031a:	2b00      	cmp	r3, #0
 801031c:	d0c6      	beq.n	80102ac <_svfiprintf_r+0x130>
 801031e:	9105      	str	r1, [sp, #20]
 8010320:	e7c4      	b.n	80102ac <_svfiprintf_r+0x130>
 8010322:	fb0c 2101 	mla	r1, ip, r1, r2
 8010326:	4604      	mov	r4, r0
 8010328:	2301      	movs	r3, #1
 801032a:	e7f0      	b.n	801030e <_svfiprintf_r+0x192>
 801032c:	ab03      	add	r3, sp, #12
 801032e:	9300      	str	r3, [sp, #0]
 8010330:	462a      	mov	r2, r5
 8010332:	4b0f      	ldr	r3, [pc, #60]	; (8010370 <_svfiprintf_r+0x1f4>)
 8010334:	a904      	add	r1, sp, #16
 8010336:	4638      	mov	r0, r7
 8010338:	f3af 8000 	nop.w
 801033c:	1c42      	adds	r2, r0, #1
 801033e:	4606      	mov	r6, r0
 8010340:	d1d6      	bne.n	80102f0 <_svfiprintf_r+0x174>
 8010342:	89ab      	ldrh	r3, [r5, #12]
 8010344:	065b      	lsls	r3, r3, #25
 8010346:	f53f af2d 	bmi.w	80101a4 <_svfiprintf_r+0x28>
 801034a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801034c:	b01d      	add	sp, #116	; 0x74
 801034e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010352:	ab03      	add	r3, sp, #12
 8010354:	9300      	str	r3, [sp, #0]
 8010356:	462a      	mov	r2, r5
 8010358:	4b05      	ldr	r3, [pc, #20]	; (8010370 <_svfiprintf_r+0x1f4>)
 801035a:	a904      	add	r1, sp, #16
 801035c:	4638      	mov	r0, r7
 801035e:	f000 f9bd 	bl	80106dc <_printf_i>
 8010362:	e7eb      	b.n	801033c <_svfiprintf_r+0x1c0>
 8010364:	080117f1 	.word	0x080117f1
 8010368:	080117fb 	.word	0x080117fb
 801036c:	00000000 	.word	0x00000000
 8010370:	080100c9 	.word	0x080100c9
 8010374:	080117f7 	.word	0x080117f7

08010378 <__sfputc_r>:
 8010378:	6893      	ldr	r3, [r2, #8]
 801037a:	3b01      	subs	r3, #1
 801037c:	2b00      	cmp	r3, #0
 801037e:	b410      	push	{r4}
 8010380:	6093      	str	r3, [r2, #8]
 8010382:	da08      	bge.n	8010396 <__sfputc_r+0x1e>
 8010384:	6994      	ldr	r4, [r2, #24]
 8010386:	42a3      	cmp	r3, r4
 8010388:	db01      	blt.n	801038e <__sfputc_r+0x16>
 801038a:	290a      	cmp	r1, #10
 801038c:	d103      	bne.n	8010396 <__sfputc_r+0x1e>
 801038e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010392:	f000 bbe5 	b.w	8010b60 <__swbuf_r>
 8010396:	6813      	ldr	r3, [r2, #0]
 8010398:	1c58      	adds	r0, r3, #1
 801039a:	6010      	str	r0, [r2, #0]
 801039c:	7019      	strb	r1, [r3, #0]
 801039e:	4608      	mov	r0, r1
 80103a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80103a4:	4770      	bx	lr

080103a6 <__sfputs_r>:
 80103a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103a8:	4606      	mov	r6, r0
 80103aa:	460f      	mov	r7, r1
 80103ac:	4614      	mov	r4, r2
 80103ae:	18d5      	adds	r5, r2, r3
 80103b0:	42ac      	cmp	r4, r5
 80103b2:	d101      	bne.n	80103b8 <__sfputs_r+0x12>
 80103b4:	2000      	movs	r0, #0
 80103b6:	e007      	b.n	80103c8 <__sfputs_r+0x22>
 80103b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103bc:	463a      	mov	r2, r7
 80103be:	4630      	mov	r0, r6
 80103c0:	f7ff ffda 	bl	8010378 <__sfputc_r>
 80103c4:	1c43      	adds	r3, r0, #1
 80103c6:	d1f3      	bne.n	80103b0 <__sfputs_r+0xa>
 80103c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080103cc <_vfiprintf_r>:
 80103cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103d0:	460d      	mov	r5, r1
 80103d2:	b09d      	sub	sp, #116	; 0x74
 80103d4:	4614      	mov	r4, r2
 80103d6:	4698      	mov	r8, r3
 80103d8:	4606      	mov	r6, r0
 80103da:	b118      	cbz	r0, 80103e4 <_vfiprintf_r+0x18>
 80103dc:	6a03      	ldr	r3, [r0, #32]
 80103de:	b90b      	cbnz	r3, 80103e4 <_vfiprintf_r+0x18>
 80103e0:	f7ff fca0 	bl	800fd24 <__sinit>
 80103e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80103e6:	07d9      	lsls	r1, r3, #31
 80103e8:	d405      	bmi.n	80103f6 <_vfiprintf_r+0x2a>
 80103ea:	89ab      	ldrh	r3, [r5, #12]
 80103ec:	059a      	lsls	r2, r3, #22
 80103ee:	d402      	bmi.n	80103f6 <_vfiprintf_r+0x2a>
 80103f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80103f2:	f7ff fe1a 	bl	801002a <__retarget_lock_acquire_recursive>
 80103f6:	89ab      	ldrh	r3, [r5, #12]
 80103f8:	071b      	lsls	r3, r3, #28
 80103fa:	d501      	bpl.n	8010400 <_vfiprintf_r+0x34>
 80103fc:	692b      	ldr	r3, [r5, #16]
 80103fe:	b99b      	cbnz	r3, 8010428 <_vfiprintf_r+0x5c>
 8010400:	4629      	mov	r1, r5
 8010402:	4630      	mov	r0, r6
 8010404:	f000 fbea 	bl	8010bdc <__swsetup_r>
 8010408:	b170      	cbz	r0, 8010428 <_vfiprintf_r+0x5c>
 801040a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801040c:	07dc      	lsls	r4, r3, #31
 801040e:	d504      	bpl.n	801041a <_vfiprintf_r+0x4e>
 8010410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010414:	b01d      	add	sp, #116	; 0x74
 8010416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801041a:	89ab      	ldrh	r3, [r5, #12]
 801041c:	0598      	lsls	r0, r3, #22
 801041e:	d4f7      	bmi.n	8010410 <_vfiprintf_r+0x44>
 8010420:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010422:	f7ff fe03 	bl	801002c <__retarget_lock_release_recursive>
 8010426:	e7f3      	b.n	8010410 <_vfiprintf_r+0x44>
 8010428:	2300      	movs	r3, #0
 801042a:	9309      	str	r3, [sp, #36]	; 0x24
 801042c:	2320      	movs	r3, #32
 801042e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010432:	f8cd 800c 	str.w	r8, [sp, #12]
 8010436:	2330      	movs	r3, #48	; 0x30
 8010438:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80105ec <_vfiprintf_r+0x220>
 801043c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010440:	f04f 0901 	mov.w	r9, #1
 8010444:	4623      	mov	r3, r4
 8010446:	469a      	mov	sl, r3
 8010448:	f813 2b01 	ldrb.w	r2, [r3], #1
 801044c:	b10a      	cbz	r2, 8010452 <_vfiprintf_r+0x86>
 801044e:	2a25      	cmp	r2, #37	; 0x25
 8010450:	d1f9      	bne.n	8010446 <_vfiprintf_r+0x7a>
 8010452:	ebba 0b04 	subs.w	fp, sl, r4
 8010456:	d00b      	beq.n	8010470 <_vfiprintf_r+0xa4>
 8010458:	465b      	mov	r3, fp
 801045a:	4622      	mov	r2, r4
 801045c:	4629      	mov	r1, r5
 801045e:	4630      	mov	r0, r6
 8010460:	f7ff ffa1 	bl	80103a6 <__sfputs_r>
 8010464:	3001      	adds	r0, #1
 8010466:	f000 80a9 	beq.w	80105bc <_vfiprintf_r+0x1f0>
 801046a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801046c:	445a      	add	r2, fp
 801046e:	9209      	str	r2, [sp, #36]	; 0x24
 8010470:	f89a 3000 	ldrb.w	r3, [sl]
 8010474:	2b00      	cmp	r3, #0
 8010476:	f000 80a1 	beq.w	80105bc <_vfiprintf_r+0x1f0>
 801047a:	2300      	movs	r3, #0
 801047c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010480:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010484:	f10a 0a01 	add.w	sl, sl, #1
 8010488:	9304      	str	r3, [sp, #16]
 801048a:	9307      	str	r3, [sp, #28]
 801048c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010490:	931a      	str	r3, [sp, #104]	; 0x68
 8010492:	4654      	mov	r4, sl
 8010494:	2205      	movs	r2, #5
 8010496:	f814 1b01 	ldrb.w	r1, [r4], #1
 801049a:	4854      	ldr	r0, [pc, #336]	; (80105ec <_vfiprintf_r+0x220>)
 801049c:	f7ef fed0 	bl	8000240 <memchr>
 80104a0:	9a04      	ldr	r2, [sp, #16]
 80104a2:	b9d8      	cbnz	r0, 80104dc <_vfiprintf_r+0x110>
 80104a4:	06d1      	lsls	r1, r2, #27
 80104a6:	bf44      	itt	mi
 80104a8:	2320      	movmi	r3, #32
 80104aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80104ae:	0713      	lsls	r3, r2, #28
 80104b0:	bf44      	itt	mi
 80104b2:	232b      	movmi	r3, #43	; 0x2b
 80104b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80104b8:	f89a 3000 	ldrb.w	r3, [sl]
 80104bc:	2b2a      	cmp	r3, #42	; 0x2a
 80104be:	d015      	beq.n	80104ec <_vfiprintf_r+0x120>
 80104c0:	9a07      	ldr	r2, [sp, #28]
 80104c2:	4654      	mov	r4, sl
 80104c4:	2000      	movs	r0, #0
 80104c6:	f04f 0c0a 	mov.w	ip, #10
 80104ca:	4621      	mov	r1, r4
 80104cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80104d0:	3b30      	subs	r3, #48	; 0x30
 80104d2:	2b09      	cmp	r3, #9
 80104d4:	d94d      	bls.n	8010572 <_vfiprintf_r+0x1a6>
 80104d6:	b1b0      	cbz	r0, 8010506 <_vfiprintf_r+0x13a>
 80104d8:	9207      	str	r2, [sp, #28]
 80104da:	e014      	b.n	8010506 <_vfiprintf_r+0x13a>
 80104dc:	eba0 0308 	sub.w	r3, r0, r8
 80104e0:	fa09 f303 	lsl.w	r3, r9, r3
 80104e4:	4313      	orrs	r3, r2
 80104e6:	9304      	str	r3, [sp, #16]
 80104e8:	46a2      	mov	sl, r4
 80104ea:	e7d2      	b.n	8010492 <_vfiprintf_r+0xc6>
 80104ec:	9b03      	ldr	r3, [sp, #12]
 80104ee:	1d19      	adds	r1, r3, #4
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	9103      	str	r1, [sp, #12]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	bfbb      	ittet	lt
 80104f8:	425b      	neglt	r3, r3
 80104fa:	f042 0202 	orrlt.w	r2, r2, #2
 80104fe:	9307      	strge	r3, [sp, #28]
 8010500:	9307      	strlt	r3, [sp, #28]
 8010502:	bfb8      	it	lt
 8010504:	9204      	strlt	r2, [sp, #16]
 8010506:	7823      	ldrb	r3, [r4, #0]
 8010508:	2b2e      	cmp	r3, #46	; 0x2e
 801050a:	d10c      	bne.n	8010526 <_vfiprintf_r+0x15a>
 801050c:	7863      	ldrb	r3, [r4, #1]
 801050e:	2b2a      	cmp	r3, #42	; 0x2a
 8010510:	d134      	bne.n	801057c <_vfiprintf_r+0x1b0>
 8010512:	9b03      	ldr	r3, [sp, #12]
 8010514:	1d1a      	adds	r2, r3, #4
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	9203      	str	r2, [sp, #12]
 801051a:	2b00      	cmp	r3, #0
 801051c:	bfb8      	it	lt
 801051e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010522:	3402      	adds	r4, #2
 8010524:	9305      	str	r3, [sp, #20]
 8010526:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80105fc <_vfiprintf_r+0x230>
 801052a:	7821      	ldrb	r1, [r4, #0]
 801052c:	2203      	movs	r2, #3
 801052e:	4650      	mov	r0, sl
 8010530:	f7ef fe86 	bl	8000240 <memchr>
 8010534:	b138      	cbz	r0, 8010546 <_vfiprintf_r+0x17a>
 8010536:	9b04      	ldr	r3, [sp, #16]
 8010538:	eba0 000a 	sub.w	r0, r0, sl
 801053c:	2240      	movs	r2, #64	; 0x40
 801053e:	4082      	lsls	r2, r0
 8010540:	4313      	orrs	r3, r2
 8010542:	3401      	adds	r4, #1
 8010544:	9304      	str	r3, [sp, #16]
 8010546:	f814 1b01 	ldrb.w	r1, [r4], #1
 801054a:	4829      	ldr	r0, [pc, #164]	; (80105f0 <_vfiprintf_r+0x224>)
 801054c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010550:	2206      	movs	r2, #6
 8010552:	f7ef fe75 	bl	8000240 <memchr>
 8010556:	2800      	cmp	r0, #0
 8010558:	d03f      	beq.n	80105da <_vfiprintf_r+0x20e>
 801055a:	4b26      	ldr	r3, [pc, #152]	; (80105f4 <_vfiprintf_r+0x228>)
 801055c:	bb1b      	cbnz	r3, 80105a6 <_vfiprintf_r+0x1da>
 801055e:	9b03      	ldr	r3, [sp, #12]
 8010560:	3307      	adds	r3, #7
 8010562:	f023 0307 	bic.w	r3, r3, #7
 8010566:	3308      	adds	r3, #8
 8010568:	9303      	str	r3, [sp, #12]
 801056a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801056c:	443b      	add	r3, r7
 801056e:	9309      	str	r3, [sp, #36]	; 0x24
 8010570:	e768      	b.n	8010444 <_vfiprintf_r+0x78>
 8010572:	fb0c 3202 	mla	r2, ip, r2, r3
 8010576:	460c      	mov	r4, r1
 8010578:	2001      	movs	r0, #1
 801057a:	e7a6      	b.n	80104ca <_vfiprintf_r+0xfe>
 801057c:	2300      	movs	r3, #0
 801057e:	3401      	adds	r4, #1
 8010580:	9305      	str	r3, [sp, #20]
 8010582:	4619      	mov	r1, r3
 8010584:	f04f 0c0a 	mov.w	ip, #10
 8010588:	4620      	mov	r0, r4
 801058a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801058e:	3a30      	subs	r2, #48	; 0x30
 8010590:	2a09      	cmp	r2, #9
 8010592:	d903      	bls.n	801059c <_vfiprintf_r+0x1d0>
 8010594:	2b00      	cmp	r3, #0
 8010596:	d0c6      	beq.n	8010526 <_vfiprintf_r+0x15a>
 8010598:	9105      	str	r1, [sp, #20]
 801059a:	e7c4      	b.n	8010526 <_vfiprintf_r+0x15a>
 801059c:	fb0c 2101 	mla	r1, ip, r1, r2
 80105a0:	4604      	mov	r4, r0
 80105a2:	2301      	movs	r3, #1
 80105a4:	e7f0      	b.n	8010588 <_vfiprintf_r+0x1bc>
 80105a6:	ab03      	add	r3, sp, #12
 80105a8:	9300      	str	r3, [sp, #0]
 80105aa:	462a      	mov	r2, r5
 80105ac:	4b12      	ldr	r3, [pc, #72]	; (80105f8 <_vfiprintf_r+0x22c>)
 80105ae:	a904      	add	r1, sp, #16
 80105b0:	4630      	mov	r0, r6
 80105b2:	f3af 8000 	nop.w
 80105b6:	4607      	mov	r7, r0
 80105b8:	1c78      	adds	r0, r7, #1
 80105ba:	d1d6      	bne.n	801056a <_vfiprintf_r+0x19e>
 80105bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80105be:	07d9      	lsls	r1, r3, #31
 80105c0:	d405      	bmi.n	80105ce <_vfiprintf_r+0x202>
 80105c2:	89ab      	ldrh	r3, [r5, #12]
 80105c4:	059a      	lsls	r2, r3, #22
 80105c6:	d402      	bmi.n	80105ce <_vfiprintf_r+0x202>
 80105c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80105ca:	f7ff fd2f 	bl	801002c <__retarget_lock_release_recursive>
 80105ce:	89ab      	ldrh	r3, [r5, #12]
 80105d0:	065b      	lsls	r3, r3, #25
 80105d2:	f53f af1d 	bmi.w	8010410 <_vfiprintf_r+0x44>
 80105d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80105d8:	e71c      	b.n	8010414 <_vfiprintf_r+0x48>
 80105da:	ab03      	add	r3, sp, #12
 80105dc:	9300      	str	r3, [sp, #0]
 80105de:	462a      	mov	r2, r5
 80105e0:	4b05      	ldr	r3, [pc, #20]	; (80105f8 <_vfiprintf_r+0x22c>)
 80105e2:	a904      	add	r1, sp, #16
 80105e4:	4630      	mov	r0, r6
 80105e6:	f000 f879 	bl	80106dc <_printf_i>
 80105ea:	e7e4      	b.n	80105b6 <_vfiprintf_r+0x1ea>
 80105ec:	080117f1 	.word	0x080117f1
 80105f0:	080117fb 	.word	0x080117fb
 80105f4:	00000000 	.word	0x00000000
 80105f8:	080103a7 	.word	0x080103a7
 80105fc:	080117f7 	.word	0x080117f7

08010600 <_printf_common>:
 8010600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010604:	4616      	mov	r6, r2
 8010606:	4699      	mov	r9, r3
 8010608:	688a      	ldr	r2, [r1, #8]
 801060a:	690b      	ldr	r3, [r1, #16]
 801060c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010610:	4293      	cmp	r3, r2
 8010612:	bfb8      	it	lt
 8010614:	4613      	movlt	r3, r2
 8010616:	6033      	str	r3, [r6, #0]
 8010618:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801061c:	4607      	mov	r7, r0
 801061e:	460c      	mov	r4, r1
 8010620:	b10a      	cbz	r2, 8010626 <_printf_common+0x26>
 8010622:	3301      	adds	r3, #1
 8010624:	6033      	str	r3, [r6, #0]
 8010626:	6823      	ldr	r3, [r4, #0]
 8010628:	0699      	lsls	r1, r3, #26
 801062a:	bf42      	ittt	mi
 801062c:	6833      	ldrmi	r3, [r6, #0]
 801062e:	3302      	addmi	r3, #2
 8010630:	6033      	strmi	r3, [r6, #0]
 8010632:	6825      	ldr	r5, [r4, #0]
 8010634:	f015 0506 	ands.w	r5, r5, #6
 8010638:	d106      	bne.n	8010648 <_printf_common+0x48>
 801063a:	f104 0a19 	add.w	sl, r4, #25
 801063e:	68e3      	ldr	r3, [r4, #12]
 8010640:	6832      	ldr	r2, [r6, #0]
 8010642:	1a9b      	subs	r3, r3, r2
 8010644:	42ab      	cmp	r3, r5
 8010646:	dc26      	bgt.n	8010696 <_printf_common+0x96>
 8010648:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801064c:	1e13      	subs	r3, r2, #0
 801064e:	6822      	ldr	r2, [r4, #0]
 8010650:	bf18      	it	ne
 8010652:	2301      	movne	r3, #1
 8010654:	0692      	lsls	r2, r2, #26
 8010656:	d42b      	bmi.n	80106b0 <_printf_common+0xb0>
 8010658:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801065c:	4649      	mov	r1, r9
 801065e:	4638      	mov	r0, r7
 8010660:	47c0      	blx	r8
 8010662:	3001      	adds	r0, #1
 8010664:	d01e      	beq.n	80106a4 <_printf_common+0xa4>
 8010666:	6823      	ldr	r3, [r4, #0]
 8010668:	6922      	ldr	r2, [r4, #16]
 801066a:	f003 0306 	and.w	r3, r3, #6
 801066e:	2b04      	cmp	r3, #4
 8010670:	bf02      	ittt	eq
 8010672:	68e5      	ldreq	r5, [r4, #12]
 8010674:	6833      	ldreq	r3, [r6, #0]
 8010676:	1aed      	subeq	r5, r5, r3
 8010678:	68a3      	ldr	r3, [r4, #8]
 801067a:	bf0c      	ite	eq
 801067c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010680:	2500      	movne	r5, #0
 8010682:	4293      	cmp	r3, r2
 8010684:	bfc4      	itt	gt
 8010686:	1a9b      	subgt	r3, r3, r2
 8010688:	18ed      	addgt	r5, r5, r3
 801068a:	2600      	movs	r6, #0
 801068c:	341a      	adds	r4, #26
 801068e:	42b5      	cmp	r5, r6
 8010690:	d11a      	bne.n	80106c8 <_printf_common+0xc8>
 8010692:	2000      	movs	r0, #0
 8010694:	e008      	b.n	80106a8 <_printf_common+0xa8>
 8010696:	2301      	movs	r3, #1
 8010698:	4652      	mov	r2, sl
 801069a:	4649      	mov	r1, r9
 801069c:	4638      	mov	r0, r7
 801069e:	47c0      	blx	r8
 80106a0:	3001      	adds	r0, #1
 80106a2:	d103      	bne.n	80106ac <_printf_common+0xac>
 80106a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80106a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106ac:	3501      	adds	r5, #1
 80106ae:	e7c6      	b.n	801063e <_printf_common+0x3e>
 80106b0:	18e1      	adds	r1, r4, r3
 80106b2:	1c5a      	adds	r2, r3, #1
 80106b4:	2030      	movs	r0, #48	; 0x30
 80106b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80106ba:	4422      	add	r2, r4
 80106bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80106c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80106c4:	3302      	adds	r3, #2
 80106c6:	e7c7      	b.n	8010658 <_printf_common+0x58>
 80106c8:	2301      	movs	r3, #1
 80106ca:	4622      	mov	r2, r4
 80106cc:	4649      	mov	r1, r9
 80106ce:	4638      	mov	r0, r7
 80106d0:	47c0      	blx	r8
 80106d2:	3001      	adds	r0, #1
 80106d4:	d0e6      	beq.n	80106a4 <_printf_common+0xa4>
 80106d6:	3601      	adds	r6, #1
 80106d8:	e7d9      	b.n	801068e <_printf_common+0x8e>
	...

080106dc <_printf_i>:
 80106dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80106e0:	7e0f      	ldrb	r7, [r1, #24]
 80106e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80106e4:	2f78      	cmp	r7, #120	; 0x78
 80106e6:	4691      	mov	r9, r2
 80106e8:	4680      	mov	r8, r0
 80106ea:	460c      	mov	r4, r1
 80106ec:	469a      	mov	sl, r3
 80106ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80106f2:	d807      	bhi.n	8010704 <_printf_i+0x28>
 80106f4:	2f62      	cmp	r7, #98	; 0x62
 80106f6:	d80a      	bhi.n	801070e <_printf_i+0x32>
 80106f8:	2f00      	cmp	r7, #0
 80106fa:	f000 80d4 	beq.w	80108a6 <_printf_i+0x1ca>
 80106fe:	2f58      	cmp	r7, #88	; 0x58
 8010700:	f000 80c0 	beq.w	8010884 <_printf_i+0x1a8>
 8010704:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010708:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801070c:	e03a      	b.n	8010784 <_printf_i+0xa8>
 801070e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010712:	2b15      	cmp	r3, #21
 8010714:	d8f6      	bhi.n	8010704 <_printf_i+0x28>
 8010716:	a101      	add	r1, pc, #4	; (adr r1, 801071c <_printf_i+0x40>)
 8010718:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801071c:	08010775 	.word	0x08010775
 8010720:	08010789 	.word	0x08010789
 8010724:	08010705 	.word	0x08010705
 8010728:	08010705 	.word	0x08010705
 801072c:	08010705 	.word	0x08010705
 8010730:	08010705 	.word	0x08010705
 8010734:	08010789 	.word	0x08010789
 8010738:	08010705 	.word	0x08010705
 801073c:	08010705 	.word	0x08010705
 8010740:	08010705 	.word	0x08010705
 8010744:	08010705 	.word	0x08010705
 8010748:	0801088d 	.word	0x0801088d
 801074c:	080107b5 	.word	0x080107b5
 8010750:	08010847 	.word	0x08010847
 8010754:	08010705 	.word	0x08010705
 8010758:	08010705 	.word	0x08010705
 801075c:	080108af 	.word	0x080108af
 8010760:	08010705 	.word	0x08010705
 8010764:	080107b5 	.word	0x080107b5
 8010768:	08010705 	.word	0x08010705
 801076c:	08010705 	.word	0x08010705
 8010770:	0801084f 	.word	0x0801084f
 8010774:	682b      	ldr	r3, [r5, #0]
 8010776:	1d1a      	adds	r2, r3, #4
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	602a      	str	r2, [r5, #0]
 801077c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010780:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010784:	2301      	movs	r3, #1
 8010786:	e09f      	b.n	80108c8 <_printf_i+0x1ec>
 8010788:	6820      	ldr	r0, [r4, #0]
 801078a:	682b      	ldr	r3, [r5, #0]
 801078c:	0607      	lsls	r7, r0, #24
 801078e:	f103 0104 	add.w	r1, r3, #4
 8010792:	6029      	str	r1, [r5, #0]
 8010794:	d501      	bpl.n	801079a <_printf_i+0xbe>
 8010796:	681e      	ldr	r6, [r3, #0]
 8010798:	e003      	b.n	80107a2 <_printf_i+0xc6>
 801079a:	0646      	lsls	r6, r0, #25
 801079c:	d5fb      	bpl.n	8010796 <_printf_i+0xba>
 801079e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80107a2:	2e00      	cmp	r6, #0
 80107a4:	da03      	bge.n	80107ae <_printf_i+0xd2>
 80107a6:	232d      	movs	r3, #45	; 0x2d
 80107a8:	4276      	negs	r6, r6
 80107aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80107ae:	485a      	ldr	r0, [pc, #360]	; (8010918 <_printf_i+0x23c>)
 80107b0:	230a      	movs	r3, #10
 80107b2:	e012      	b.n	80107da <_printf_i+0xfe>
 80107b4:	682b      	ldr	r3, [r5, #0]
 80107b6:	6820      	ldr	r0, [r4, #0]
 80107b8:	1d19      	adds	r1, r3, #4
 80107ba:	6029      	str	r1, [r5, #0]
 80107bc:	0605      	lsls	r5, r0, #24
 80107be:	d501      	bpl.n	80107c4 <_printf_i+0xe8>
 80107c0:	681e      	ldr	r6, [r3, #0]
 80107c2:	e002      	b.n	80107ca <_printf_i+0xee>
 80107c4:	0641      	lsls	r1, r0, #25
 80107c6:	d5fb      	bpl.n	80107c0 <_printf_i+0xe4>
 80107c8:	881e      	ldrh	r6, [r3, #0]
 80107ca:	4853      	ldr	r0, [pc, #332]	; (8010918 <_printf_i+0x23c>)
 80107cc:	2f6f      	cmp	r7, #111	; 0x6f
 80107ce:	bf0c      	ite	eq
 80107d0:	2308      	moveq	r3, #8
 80107d2:	230a      	movne	r3, #10
 80107d4:	2100      	movs	r1, #0
 80107d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80107da:	6865      	ldr	r5, [r4, #4]
 80107dc:	60a5      	str	r5, [r4, #8]
 80107de:	2d00      	cmp	r5, #0
 80107e0:	bfa2      	ittt	ge
 80107e2:	6821      	ldrge	r1, [r4, #0]
 80107e4:	f021 0104 	bicge.w	r1, r1, #4
 80107e8:	6021      	strge	r1, [r4, #0]
 80107ea:	b90e      	cbnz	r6, 80107f0 <_printf_i+0x114>
 80107ec:	2d00      	cmp	r5, #0
 80107ee:	d04b      	beq.n	8010888 <_printf_i+0x1ac>
 80107f0:	4615      	mov	r5, r2
 80107f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80107f6:	fb03 6711 	mls	r7, r3, r1, r6
 80107fa:	5dc7      	ldrb	r7, [r0, r7]
 80107fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010800:	4637      	mov	r7, r6
 8010802:	42bb      	cmp	r3, r7
 8010804:	460e      	mov	r6, r1
 8010806:	d9f4      	bls.n	80107f2 <_printf_i+0x116>
 8010808:	2b08      	cmp	r3, #8
 801080a:	d10b      	bne.n	8010824 <_printf_i+0x148>
 801080c:	6823      	ldr	r3, [r4, #0]
 801080e:	07de      	lsls	r6, r3, #31
 8010810:	d508      	bpl.n	8010824 <_printf_i+0x148>
 8010812:	6923      	ldr	r3, [r4, #16]
 8010814:	6861      	ldr	r1, [r4, #4]
 8010816:	4299      	cmp	r1, r3
 8010818:	bfde      	ittt	le
 801081a:	2330      	movle	r3, #48	; 0x30
 801081c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010820:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010824:	1b52      	subs	r2, r2, r5
 8010826:	6122      	str	r2, [r4, #16]
 8010828:	f8cd a000 	str.w	sl, [sp]
 801082c:	464b      	mov	r3, r9
 801082e:	aa03      	add	r2, sp, #12
 8010830:	4621      	mov	r1, r4
 8010832:	4640      	mov	r0, r8
 8010834:	f7ff fee4 	bl	8010600 <_printf_common>
 8010838:	3001      	adds	r0, #1
 801083a:	d14a      	bne.n	80108d2 <_printf_i+0x1f6>
 801083c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010840:	b004      	add	sp, #16
 8010842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010846:	6823      	ldr	r3, [r4, #0]
 8010848:	f043 0320 	orr.w	r3, r3, #32
 801084c:	6023      	str	r3, [r4, #0]
 801084e:	4833      	ldr	r0, [pc, #204]	; (801091c <_printf_i+0x240>)
 8010850:	2778      	movs	r7, #120	; 0x78
 8010852:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010856:	6823      	ldr	r3, [r4, #0]
 8010858:	6829      	ldr	r1, [r5, #0]
 801085a:	061f      	lsls	r7, r3, #24
 801085c:	f851 6b04 	ldr.w	r6, [r1], #4
 8010860:	d402      	bmi.n	8010868 <_printf_i+0x18c>
 8010862:	065f      	lsls	r7, r3, #25
 8010864:	bf48      	it	mi
 8010866:	b2b6      	uxthmi	r6, r6
 8010868:	07df      	lsls	r7, r3, #31
 801086a:	bf48      	it	mi
 801086c:	f043 0320 	orrmi.w	r3, r3, #32
 8010870:	6029      	str	r1, [r5, #0]
 8010872:	bf48      	it	mi
 8010874:	6023      	strmi	r3, [r4, #0]
 8010876:	b91e      	cbnz	r6, 8010880 <_printf_i+0x1a4>
 8010878:	6823      	ldr	r3, [r4, #0]
 801087a:	f023 0320 	bic.w	r3, r3, #32
 801087e:	6023      	str	r3, [r4, #0]
 8010880:	2310      	movs	r3, #16
 8010882:	e7a7      	b.n	80107d4 <_printf_i+0xf8>
 8010884:	4824      	ldr	r0, [pc, #144]	; (8010918 <_printf_i+0x23c>)
 8010886:	e7e4      	b.n	8010852 <_printf_i+0x176>
 8010888:	4615      	mov	r5, r2
 801088a:	e7bd      	b.n	8010808 <_printf_i+0x12c>
 801088c:	682b      	ldr	r3, [r5, #0]
 801088e:	6826      	ldr	r6, [r4, #0]
 8010890:	6961      	ldr	r1, [r4, #20]
 8010892:	1d18      	adds	r0, r3, #4
 8010894:	6028      	str	r0, [r5, #0]
 8010896:	0635      	lsls	r5, r6, #24
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	d501      	bpl.n	80108a0 <_printf_i+0x1c4>
 801089c:	6019      	str	r1, [r3, #0]
 801089e:	e002      	b.n	80108a6 <_printf_i+0x1ca>
 80108a0:	0670      	lsls	r0, r6, #25
 80108a2:	d5fb      	bpl.n	801089c <_printf_i+0x1c0>
 80108a4:	8019      	strh	r1, [r3, #0]
 80108a6:	2300      	movs	r3, #0
 80108a8:	6123      	str	r3, [r4, #16]
 80108aa:	4615      	mov	r5, r2
 80108ac:	e7bc      	b.n	8010828 <_printf_i+0x14c>
 80108ae:	682b      	ldr	r3, [r5, #0]
 80108b0:	1d1a      	adds	r2, r3, #4
 80108b2:	602a      	str	r2, [r5, #0]
 80108b4:	681d      	ldr	r5, [r3, #0]
 80108b6:	6862      	ldr	r2, [r4, #4]
 80108b8:	2100      	movs	r1, #0
 80108ba:	4628      	mov	r0, r5
 80108bc:	f7ef fcc0 	bl	8000240 <memchr>
 80108c0:	b108      	cbz	r0, 80108c6 <_printf_i+0x1ea>
 80108c2:	1b40      	subs	r0, r0, r5
 80108c4:	6060      	str	r0, [r4, #4]
 80108c6:	6863      	ldr	r3, [r4, #4]
 80108c8:	6123      	str	r3, [r4, #16]
 80108ca:	2300      	movs	r3, #0
 80108cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80108d0:	e7aa      	b.n	8010828 <_printf_i+0x14c>
 80108d2:	6923      	ldr	r3, [r4, #16]
 80108d4:	462a      	mov	r2, r5
 80108d6:	4649      	mov	r1, r9
 80108d8:	4640      	mov	r0, r8
 80108da:	47d0      	blx	sl
 80108dc:	3001      	adds	r0, #1
 80108de:	d0ad      	beq.n	801083c <_printf_i+0x160>
 80108e0:	6823      	ldr	r3, [r4, #0]
 80108e2:	079b      	lsls	r3, r3, #30
 80108e4:	d413      	bmi.n	801090e <_printf_i+0x232>
 80108e6:	68e0      	ldr	r0, [r4, #12]
 80108e8:	9b03      	ldr	r3, [sp, #12]
 80108ea:	4298      	cmp	r0, r3
 80108ec:	bfb8      	it	lt
 80108ee:	4618      	movlt	r0, r3
 80108f0:	e7a6      	b.n	8010840 <_printf_i+0x164>
 80108f2:	2301      	movs	r3, #1
 80108f4:	4632      	mov	r2, r6
 80108f6:	4649      	mov	r1, r9
 80108f8:	4640      	mov	r0, r8
 80108fa:	47d0      	blx	sl
 80108fc:	3001      	adds	r0, #1
 80108fe:	d09d      	beq.n	801083c <_printf_i+0x160>
 8010900:	3501      	adds	r5, #1
 8010902:	68e3      	ldr	r3, [r4, #12]
 8010904:	9903      	ldr	r1, [sp, #12]
 8010906:	1a5b      	subs	r3, r3, r1
 8010908:	42ab      	cmp	r3, r5
 801090a:	dcf2      	bgt.n	80108f2 <_printf_i+0x216>
 801090c:	e7eb      	b.n	80108e6 <_printf_i+0x20a>
 801090e:	2500      	movs	r5, #0
 8010910:	f104 0619 	add.w	r6, r4, #25
 8010914:	e7f5      	b.n	8010902 <_printf_i+0x226>
 8010916:	bf00      	nop
 8010918:	08011802 	.word	0x08011802
 801091c:	08011813 	.word	0x08011813

08010920 <__sflush_r>:
 8010920:	898a      	ldrh	r2, [r1, #12]
 8010922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010926:	4605      	mov	r5, r0
 8010928:	0710      	lsls	r0, r2, #28
 801092a:	460c      	mov	r4, r1
 801092c:	d458      	bmi.n	80109e0 <__sflush_r+0xc0>
 801092e:	684b      	ldr	r3, [r1, #4]
 8010930:	2b00      	cmp	r3, #0
 8010932:	dc05      	bgt.n	8010940 <__sflush_r+0x20>
 8010934:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010936:	2b00      	cmp	r3, #0
 8010938:	dc02      	bgt.n	8010940 <__sflush_r+0x20>
 801093a:	2000      	movs	r0, #0
 801093c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010940:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010942:	2e00      	cmp	r6, #0
 8010944:	d0f9      	beq.n	801093a <__sflush_r+0x1a>
 8010946:	2300      	movs	r3, #0
 8010948:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801094c:	682f      	ldr	r7, [r5, #0]
 801094e:	6a21      	ldr	r1, [r4, #32]
 8010950:	602b      	str	r3, [r5, #0]
 8010952:	d032      	beq.n	80109ba <__sflush_r+0x9a>
 8010954:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010956:	89a3      	ldrh	r3, [r4, #12]
 8010958:	075a      	lsls	r2, r3, #29
 801095a:	d505      	bpl.n	8010968 <__sflush_r+0x48>
 801095c:	6863      	ldr	r3, [r4, #4]
 801095e:	1ac0      	subs	r0, r0, r3
 8010960:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010962:	b10b      	cbz	r3, 8010968 <__sflush_r+0x48>
 8010964:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010966:	1ac0      	subs	r0, r0, r3
 8010968:	2300      	movs	r3, #0
 801096a:	4602      	mov	r2, r0
 801096c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801096e:	6a21      	ldr	r1, [r4, #32]
 8010970:	4628      	mov	r0, r5
 8010972:	47b0      	blx	r6
 8010974:	1c43      	adds	r3, r0, #1
 8010976:	89a3      	ldrh	r3, [r4, #12]
 8010978:	d106      	bne.n	8010988 <__sflush_r+0x68>
 801097a:	6829      	ldr	r1, [r5, #0]
 801097c:	291d      	cmp	r1, #29
 801097e:	d82b      	bhi.n	80109d8 <__sflush_r+0xb8>
 8010980:	4a29      	ldr	r2, [pc, #164]	; (8010a28 <__sflush_r+0x108>)
 8010982:	410a      	asrs	r2, r1
 8010984:	07d6      	lsls	r6, r2, #31
 8010986:	d427      	bmi.n	80109d8 <__sflush_r+0xb8>
 8010988:	2200      	movs	r2, #0
 801098a:	6062      	str	r2, [r4, #4]
 801098c:	04d9      	lsls	r1, r3, #19
 801098e:	6922      	ldr	r2, [r4, #16]
 8010990:	6022      	str	r2, [r4, #0]
 8010992:	d504      	bpl.n	801099e <__sflush_r+0x7e>
 8010994:	1c42      	adds	r2, r0, #1
 8010996:	d101      	bne.n	801099c <__sflush_r+0x7c>
 8010998:	682b      	ldr	r3, [r5, #0]
 801099a:	b903      	cbnz	r3, 801099e <__sflush_r+0x7e>
 801099c:	6560      	str	r0, [r4, #84]	; 0x54
 801099e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80109a0:	602f      	str	r7, [r5, #0]
 80109a2:	2900      	cmp	r1, #0
 80109a4:	d0c9      	beq.n	801093a <__sflush_r+0x1a>
 80109a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80109aa:	4299      	cmp	r1, r3
 80109ac:	d002      	beq.n	80109b4 <__sflush_r+0x94>
 80109ae:	4628      	mov	r0, r5
 80109b0:	f7ff fb3e 	bl	8010030 <_free_r>
 80109b4:	2000      	movs	r0, #0
 80109b6:	6360      	str	r0, [r4, #52]	; 0x34
 80109b8:	e7c0      	b.n	801093c <__sflush_r+0x1c>
 80109ba:	2301      	movs	r3, #1
 80109bc:	4628      	mov	r0, r5
 80109be:	47b0      	blx	r6
 80109c0:	1c41      	adds	r1, r0, #1
 80109c2:	d1c8      	bne.n	8010956 <__sflush_r+0x36>
 80109c4:	682b      	ldr	r3, [r5, #0]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d0c5      	beq.n	8010956 <__sflush_r+0x36>
 80109ca:	2b1d      	cmp	r3, #29
 80109cc:	d001      	beq.n	80109d2 <__sflush_r+0xb2>
 80109ce:	2b16      	cmp	r3, #22
 80109d0:	d101      	bne.n	80109d6 <__sflush_r+0xb6>
 80109d2:	602f      	str	r7, [r5, #0]
 80109d4:	e7b1      	b.n	801093a <__sflush_r+0x1a>
 80109d6:	89a3      	ldrh	r3, [r4, #12]
 80109d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109dc:	81a3      	strh	r3, [r4, #12]
 80109de:	e7ad      	b.n	801093c <__sflush_r+0x1c>
 80109e0:	690f      	ldr	r7, [r1, #16]
 80109e2:	2f00      	cmp	r7, #0
 80109e4:	d0a9      	beq.n	801093a <__sflush_r+0x1a>
 80109e6:	0793      	lsls	r3, r2, #30
 80109e8:	680e      	ldr	r6, [r1, #0]
 80109ea:	bf08      	it	eq
 80109ec:	694b      	ldreq	r3, [r1, #20]
 80109ee:	600f      	str	r7, [r1, #0]
 80109f0:	bf18      	it	ne
 80109f2:	2300      	movne	r3, #0
 80109f4:	eba6 0807 	sub.w	r8, r6, r7
 80109f8:	608b      	str	r3, [r1, #8]
 80109fa:	f1b8 0f00 	cmp.w	r8, #0
 80109fe:	dd9c      	ble.n	801093a <__sflush_r+0x1a>
 8010a00:	6a21      	ldr	r1, [r4, #32]
 8010a02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010a04:	4643      	mov	r3, r8
 8010a06:	463a      	mov	r2, r7
 8010a08:	4628      	mov	r0, r5
 8010a0a:	47b0      	blx	r6
 8010a0c:	2800      	cmp	r0, #0
 8010a0e:	dc06      	bgt.n	8010a1e <__sflush_r+0xfe>
 8010a10:	89a3      	ldrh	r3, [r4, #12]
 8010a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a16:	81a3      	strh	r3, [r4, #12]
 8010a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010a1c:	e78e      	b.n	801093c <__sflush_r+0x1c>
 8010a1e:	4407      	add	r7, r0
 8010a20:	eba8 0800 	sub.w	r8, r8, r0
 8010a24:	e7e9      	b.n	80109fa <__sflush_r+0xda>
 8010a26:	bf00      	nop
 8010a28:	dfbffffe 	.word	0xdfbffffe

08010a2c <_fflush_r>:
 8010a2c:	b538      	push	{r3, r4, r5, lr}
 8010a2e:	690b      	ldr	r3, [r1, #16]
 8010a30:	4605      	mov	r5, r0
 8010a32:	460c      	mov	r4, r1
 8010a34:	b913      	cbnz	r3, 8010a3c <_fflush_r+0x10>
 8010a36:	2500      	movs	r5, #0
 8010a38:	4628      	mov	r0, r5
 8010a3a:	bd38      	pop	{r3, r4, r5, pc}
 8010a3c:	b118      	cbz	r0, 8010a46 <_fflush_r+0x1a>
 8010a3e:	6a03      	ldr	r3, [r0, #32]
 8010a40:	b90b      	cbnz	r3, 8010a46 <_fflush_r+0x1a>
 8010a42:	f7ff f96f 	bl	800fd24 <__sinit>
 8010a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d0f3      	beq.n	8010a36 <_fflush_r+0xa>
 8010a4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010a50:	07d0      	lsls	r0, r2, #31
 8010a52:	d404      	bmi.n	8010a5e <_fflush_r+0x32>
 8010a54:	0599      	lsls	r1, r3, #22
 8010a56:	d402      	bmi.n	8010a5e <_fflush_r+0x32>
 8010a58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a5a:	f7ff fae6 	bl	801002a <__retarget_lock_acquire_recursive>
 8010a5e:	4628      	mov	r0, r5
 8010a60:	4621      	mov	r1, r4
 8010a62:	f7ff ff5d 	bl	8010920 <__sflush_r>
 8010a66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010a68:	07da      	lsls	r2, r3, #31
 8010a6a:	4605      	mov	r5, r0
 8010a6c:	d4e4      	bmi.n	8010a38 <_fflush_r+0xc>
 8010a6e:	89a3      	ldrh	r3, [r4, #12]
 8010a70:	059b      	lsls	r3, r3, #22
 8010a72:	d4e1      	bmi.n	8010a38 <_fflush_r+0xc>
 8010a74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a76:	f7ff fad9 	bl	801002c <__retarget_lock_release_recursive>
 8010a7a:	e7dd      	b.n	8010a38 <_fflush_r+0xc>

08010a7c <__sread>:
 8010a7c:	b510      	push	{r4, lr}
 8010a7e:	460c      	mov	r4, r1
 8010a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a84:	f000 f9c2 	bl	8010e0c <_read_r>
 8010a88:	2800      	cmp	r0, #0
 8010a8a:	bfab      	itete	ge
 8010a8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010a8e:	89a3      	ldrhlt	r3, [r4, #12]
 8010a90:	181b      	addge	r3, r3, r0
 8010a92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010a96:	bfac      	ite	ge
 8010a98:	6563      	strge	r3, [r4, #84]	; 0x54
 8010a9a:	81a3      	strhlt	r3, [r4, #12]
 8010a9c:	bd10      	pop	{r4, pc}

08010a9e <__swrite>:
 8010a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010aa2:	461f      	mov	r7, r3
 8010aa4:	898b      	ldrh	r3, [r1, #12]
 8010aa6:	05db      	lsls	r3, r3, #23
 8010aa8:	4605      	mov	r5, r0
 8010aaa:	460c      	mov	r4, r1
 8010aac:	4616      	mov	r6, r2
 8010aae:	d505      	bpl.n	8010abc <__swrite+0x1e>
 8010ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ab4:	2302      	movs	r3, #2
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	f000 f996 	bl	8010de8 <_lseek_r>
 8010abc:	89a3      	ldrh	r3, [r4, #12]
 8010abe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010ac2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010ac6:	81a3      	strh	r3, [r4, #12]
 8010ac8:	4632      	mov	r2, r6
 8010aca:	463b      	mov	r3, r7
 8010acc:	4628      	mov	r0, r5
 8010ace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ad2:	f000 b9ad 	b.w	8010e30 <_write_r>

08010ad6 <__sseek>:
 8010ad6:	b510      	push	{r4, lr}
 8010ad8:	460c      	mov	r4, r1
 8010ada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ade:	f000 f983 	bl	8010de8 <_lseek_r>
 8010ae2:	1c43      	adds	r3, r0, #1
 8010ae4:	89a3      	ldrh	r3, [r4, #12]
 8010ae6:	bf15      	itete	ne
 8010ae8:	6560      	strne	r0, [r4, #84]	; 0x54
 8010aea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010aee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010af2:	81a3      	strheq	r3, [r4, #12]
 8010af4:	bf18      	it	ne
 8010af6:	81a3      	strhne	r3, [r4, #12]
 8010af8:	bd10      	pop	{r4, pc}

08010afa <__sclose>:
 8010afa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010afe:	f000 b941 	b.w	8010d84 <_close_r>

08010b02 <_realloc_r>:
 8010b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b06:	4680      	mov	r8, r0
 8010b08:	4614      	mov	r4, r2
 8010b0a:	460e      	mov	r6, r1
 8010b0c:	b921      	cbnz	r1, 8010b18 <_realloc_r+0x16>
 8010b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b12:	4611      	mov	r1, r2
 8010b14:	f7fe bfba 	b.w	800fa8c <_malloc_r>
 8010b18:	b92a      	cbnz	r2, 8010b26 <_realloc_r+0x24>
 8010b1a:	f7ff fa89 	bl	8010030 <_free_r>
 8010b1e:	4625      	mov	r5, r4
 8010b20:	4628      	mov	r0, r5
 8010b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b26:	f000 f9a3 	bl	8010e70 <_malloc_usable_size_r>
 8010b2a:	4284      	cmp	r4, r0
 8010b2c:	4607      	mov	r7, r0
 8010b2e:	d802      	bhi.n	8010b36 <_realloc_r+0x34>
 8010b30:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010b34:	d812      	bhi.n	8010b5c <_realloc_r+0x5a>
 8010b36:	4621      	mov	r1, r4
 8010b38:	4640      	mov	r0, r8
 8010b3a:	f7fe ffa7 	bl	800fa8c <_malloc_r>
 8010b3e:	4605      	mov	r5, r0
 8010b40:	2800      	cmp	r0, #0
 8010b42:	d0ed      	beq.n	8010b20 <_realloc_r+0x1e>
 8010b44:	42bc      	cmp	r4, r7
 8010b46:	4622      	mov	r2, r4
 8010b48:	4631      	mov	r1, r6
 8010b4a:	bf28      	it	cs
 8010b4c:	463a      	movcs	r2, r7
 8010b4e:	f000 f981 	bl	8010e54 <memcpy>
 8010b52:	4631      	mov	r1, r6
 8010b54:	4640      	mov	r0, r8
 8010b56:	f7ff fa6b 	bl	8010030 <_free_r>
 8010b5a:	e7e1      	b.n	8010b20 <_realloc_r+0x1e>
 8010b5c:	4635      	mov	r5, r6
 8010b5e:	e7df      	b.n	8010b20 <_realloc_r+0x1e>

08010b60 <__swbuf_r>:
 8010b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b62:	460e      	mov	r6, r1
 8010b64:	4614      	mov	r4, r2
 8010b66:	4605      	mov	r5, r0
 8010b68:	b118      	cbz	r0, 8010b72 <__swbuf_r+0x12>
 8010b6a:	6a03      	ldr	r3, [r0, #32]
 8010b6c:	b90b      	cbnz	r3, 8010b72 <__swbuf_r+0x12>
 8010b6e:	f7ff f8d9 	bl	800fd24 <__sinit>
 8010b72:	69a3      	ldr	r3, [r4, #24]
 8010b74:	60a3      	str	r3, [r4, #8]
 8010b76:	89a3      	ldrh	r3, [r4, #12]
 8010b78:	071a      	lsls	r2, r3, #28
 8010b7a:	d525      	bpl.n	8010bc8 <__swbuf_r+0x68>
 8010b7c:	6923      	ldr	r3, [r4, #16]
 8010b7e:	b31b      	cbz	r3, 8010bc8 <__swbuf_r+0x68>
 8010b80:	6823      	ldr	r3, [r4, #0]
 8010b82:	6922      	ldr	r2, [r4, #16]
 8010b84:	1a98      	subs	r0, r3, r2
 8010b86:	6963      	ldr	r3, [r4, #20]
 8010b88:	b2f6      	uxtb	r6, r6
 8010b8a:	4283      	cmp	r3, r0
 8010b8c:	4637      	mov	r7, r6
 8010b8e:	dc04      	bgt.n	8010b9a <__swbuf_r+0x3a>
 8010b90:	4621      	mov	r1, r4
 8010b92:	4628      	mov	r0, r5
 8010b94:	f7ff ff4a 	bl	8010a2c <_fflush_r>
 8010b98:	b9e0      	cbnz	r0, 8010bd4 <__swbuf_r+0x74>
 8010b9a:	68a3      	ldr	r3, [r4, #8]
 8010b9c:	3b01      	subs	r3, #1
 8010b9e:	60a3      	str	r3, [r4, #8]
 8010ba0:	6823      	ldr	r3, [r4, #0]
 8010ba2:	1c5a      	adds	r2, r3, #1
 8010ba4:	6022      	str	r2, [r4, #0]
 8010ba6:	701e      	strb	r6, [r3, #0]
 8010ba8:	6962      	ldr	r2, [r4, #20]
 8010baa:	1c43      	adds	r3, r0, #1
 8010bac:	429a      	cmp	r2, r3
 8010bae:	d004      	beq.n	8010bba <__swbuf_r+0x5a>
 8010bb0:	89a3      	ldrh	r3, [r4, #12]
 8010bb2:	07db      	lsls	r3, r3, #31
 8010bb4:	d506      	bpl.n	8010bc4 <__swbuf_r+0x64>
 8010bb6:	2e0a      	cmp	r6, #10
 8010bb8:	d104      	bne.n	8010bc4 <__swbuf_r+0x64>
 8010bba:	4621      	mov	r1, r4
 8010bbc:	4628      	mov	r0, r5
 8010bbe:	f7ff ff35 	bl	8010a2c <_fflush_r>
 8010bc2:	b938      	cbnz	r0, 8010bd4 <__swbuf_r+0x74>
 8010bc4:	4638      	mov	r0, r7
 8010bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bc8:	4621      	mov	r1, r4
 8010bca:	4628      	mov	r0, r5
 8010bcc:	f000 f806 	bl	8010bdc <__swsetup_r>
 8010bd0:	2800      	cmp	r0, #0
 8010bd2:	d0d5      	beq.n	8010b80 <__swbuf_r+0x20>
 8010bd4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010bd8:	e7f4      	b.n	8010bc4 <__swbuf_r+0x64>
	...

08010bdc <__swsetup_r>:
 8010bdc:	b538      	push	{r3, r4, r5, lr}
 8010bde:	4b2a      	ldr	r3, [pc, #168]	; (8010c88 <__swsetup_r+0xac>)
 8010be0:	4605      	mov	r5, r0
 8010be2:	6818      	ldr	r0, [r3, #0]
 8010be4:	460c      	mov	r4, r1
 8010be6:	b118      	cbz	r0, 8010bf0 <__swsetup_r+0x14>
 8010be8:	6a03      	ldr	r3, [r0, #32]
 8010bea:	b90b      	cbnz	r3, 8010bf0 <__swsetup_r+0x14>
 8010bec:	f7ff f89a 	bl	800fd24 <__sinit>
 8010bf0:	89a3      	ldrh	r3, [r4, #12]
 8010bf2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010bf6:	0718      	lsls	r0, r3, #28
 8010bf8:	d422      	bmi.n	8010c40 <__swsetup_r+0x64>
 8010bfa:	06d9      	lsls	r1, r3, #27
 8010bfc:	d407      	bmi.n	8010c0e <__swsetup_r+0x32>
 8010bfe:	2309      	movs	r3, #9
 8010c00:	602b      	str	r3, [r5, #0]
 8010c02:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010c06:	81a3      	strh	r3, [r4, #12]
 8010c08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010c0c:	e034      	b.n	8010c78 <__swsetup_r+0x9c>
 8010c0e:	0758      	lsls	r0, r3, #29
 8010c10:	d512      	bpl.n	8010c38 <__swsetup_r+0x5c>
 8010c12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010c14:	b141      	cbz	r1, 8010c28 <__swsetup_r+0x4c>
 8010c16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010c1a:	4299      	cmp	r1, r3
 8010c1c:	d002      	beq.n	8010c24 <__swsetup_r+0x48>
 8010c1e:	4628      	mov	r0, r5
 8010c20:	f7ff fa06 	bl	8010030 <_free_r>
 8010c24:	2300      	movs	r3, #0
 8010c26:	6363      	str	r3, [r4, #52]	; 0x34
 8010c28:	89a3      	ldrh	r3, [r4, #12]
 8010c2a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010c2e:	81a3      	strh	r3, [r4, #12]
 8010c30:	2300      	movs	r3, #0
 8010c32:	6063      	str	r3, [r4, #4]
 8010c34:	6923      	ldr	r3, [r4, #16]
 8010c36:	6023      	str	r3, [r4, #0]
 8010c38:	89a3      	ldrh	r3, [r4, #12]
 8010c3a:	f043 0308 	orr.w	r3, r3, #8
 8010c3e:	81a3      	strh	r3, [r4, #12]
 8010c40:	6923      	ldr	r3, [r4, #16]
 8010c42:	b94b      	cbnz	r3, 8010c58 <__swsetup_r+0x7c>
 8010c44:	89a3      	ldrh	r3, [r4, #12]
 8010c46:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010c4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010c4e:	d003      	beq.n	8010c58 <__swsetup_r+0x7c>
 8010c50:	4621      	mov	r1, r4
 8010c52:	4628      	mov	r0, r5
 8010c54:	f000 f840 	bl	8010cd8 <__smakebuf_r>
 8010c58:	89a0      	ldrh	r0, [r4, #12]
 8010c5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010c5e:	f010 0301 	ands.w	r3, r0, #1
 8010c62:	d00a      	beq.n	8010c7a <__swsetup_r+0x9e>
 8010c64:	2300      	movs	r3, #0
 8010c66:	60a3      	str	r3, [r4, #8]
 8010c68:	6963      	ldr	r3, [r4, #20]
 8010c6a:	425b      	negs	r3, r3
 8010c6c:	61a3      	str	r3, [r4, #24]
 8010c6e:	6923      	ldr	r3, [r4, #16]
 8010c70:	b943      	cbnz	r3, 8010c84 <__swsetup_r+0xa8>
 8010c72:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010c76:	d1c4      	bne.n	8010c02 <__swsetup_r+0x26>
 8010c78:	bd38      	pop	{r3, r4, r5, pc}
 8010c7a:	0781      	lsls	r1, r0, #30
 8010c7c:	bf58      	it	pl
 8010c7e:	6963      	ldrpl	r3, [r4, #20]
 8010c80:	60a3      	str	r3, [r4, #8]
 8010c82:	e7f4      	b.n	8010c6e <__swsetup_r+0x92>
 8010c84:	2000      	movs	r0, #0
 8010c86:	e7f7      	b.n	8010c78 <__swsetup_r+0x9c>
 8010c88:	20000164 	.word	0x20000164

08010c8c <__swhatbuf_r>:
 8010c8c:	b570      	push	{r4, r5, r6, lr}
 8010c8e:	460c      	mov	r4, r1
 8010c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c94:	2900      	cmp	r1, #0
 8010c96:	b096      	sub	sp, #88	; 0x58
 8010c98:	4615      	mov	r5, r2
 8010c9a:	461e      	mov	r6, r3
 8010c9c:	da0d      	bge.n	8010cba <__swhatbuf_r+0x2e>
 8010c9e:	89a3      	ldrh	r3, [r4, #12]
 8010ca0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010ca4:	f04f 0100 	mov.w	r1, #0
 8010ca8:	bf0c      	ite	eq
 8010caa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010cae:	2340      	movne	r3, #64	; 0x40
 8010cb0:	2000      	movs	r0, #0
 8010cb2:	6031      	str	r1, [r6, #0]
 8010cb4:	602b      	str	r3, [r5, #0]
 8010cb6:	b016      	add	sp, #88	; 0x58
 8010cb8:	bd70      	pop	{r4, r5, r6, pc}
 8010cba:	466a      	mov	r2, sp
 8010cbc:	f000 f872 	bl	8010da4 <_fstat_r>
 8010cc0:	2800      	cmp	r0, #0
 8010cc2:	dbec      	blt.n	8010c9e <__swhatbuf_r+0x12>
 8010cc4:	9901      	ldr	r1, [sp, #4]
 8010cc6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010cca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010cce:	4259      	negs	r1, r3
 8010cd0:	4159      	adcs	r1, r3
 8010cd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010cd6:	e7eb      	b.n	8010cb0 <__swhatbuf_r+0x24>

08010cd8 <__smakebuf_r>:
 8010cd8:	898b      	ldrh	r3, [r1, #12]
 8010cda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010cdc:	079d      	lsls	r5, r3, #30
 8010cde:	4606      	mov	r6, r0
 8010ce0:	460c      	mov	r4, r1
 8010ce2:	d507      	bpl.n	8010cf4 <__smakebuf_r+0x1c>
 8010ce4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010ce8:	6023      	str	r3, [r4, #0]
 8010cea:	6123      	str	r3, [r4, #16]
 8010cec:	2301      	movs	r3, #1
 8010cee:	6163      	str	r3, [r4, #20]
 8010cf0:	b002      	add	sp, #8
 8010cf2:	bd70      	pop	{r4, r5, r6, pc}
 8010cf4:	ab01      	add	r3, sp, #4
 8010cf6:	466a      	mov	r2, sp
 8010cf8:	f7ff ffc8 	bl	8010c8c <__swhatbuf_r>
 8010cfc:	9900      	ldr	r1, [sp, #0]
 8010cfe:	4605      	mov	r5, r0
 8010d00:	4630      	mov	r0, r6
 8010d02:	f7fe fec3 	bl	800fa8c <_malloc_r>
 8010d06:	b948      	cbnz	r0, 8010d1c <__smakebuf_r+0x44>
 8010d08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d0c:	059a      	lsls	r2, r3, #22
 8010d0e:	d4ef      	bmi.n	8010cf0 <__smakebuf_r+0x18>
 8010d10:	f023 0303 	bic.w	r3, r3, #3
 8010d14:	f043 0302 	orr.w	r3, r3, #2
 8010d18:	81a3      	strh	r3, [r4, #12]
 8010d1a:	e7e3      	b.n	8010ce4 <__smakebuf_r+0xc>
 8010d1c:	89a3      	ldrh	r3, [r4, #12]
 8010d1e:	6020      	str	r0, [r4, #0]
 8010d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d24:	81a3      	strh	r3, [r4, #12]
 8010d26:	9b00      	ldr	r3, [sp, #0]
 8010d28:	6163      	str	r3, [r4, #20]
 8010d2a:	9b01      	ldr	r3, [sp, #4]
 8010d2c:	6120      	str	r0, [r4, #16]
 8010d2e:	b15b      	cbz	r3, 8010d48 <__smakebuf_r+0x70>
 8010d30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010d34:	4630      	mov	r0, r6
 8010d36:	f000 f847 	bl	8010dc8 <_isatty_r>
 8010d3a:	b128      	cbz	r0, 8010d48 <__smakebuf_r+0x70>
 8010d3c:	89a3      	ldrh	r3, [r4, #12]
 8010d3e:	f023 0303 	bic.w	r3, r3, #3
 8010d42:	f043 0301 	orr.w	r3, r3, #1
 8010d46:	81a3      	strh	r3, [r4, #12]
 8010d48:	89a3      	ldrh	r3, [r4, #12]
 8010d4a:	431d      	orrs	r5, r3
 8010d4c:	81a5      	strh	r5, [r4, #12]
 8010d4e:	e7cf      	b.n	8010cf0 <__smakebuf_r+0x18>

08010d50 <memmove>:
 8010d50:	4288      	cmp	r0, r1
 8010d52:	b510      	push	{r4, lr}
 8010d54:	eb01 0402 	add.w	r4, r1, r2
 8010d58:	d902      	bls.n	8010d60 <memmove+0x10>
 8010d5a:	4284      	cmp	r4, r0
 8010d5c:	4623      	mov	r3, r4
 8010d5e:	d807      	bhi.n	8010d70 <memmove+0x20>
 8010d60:	1e43      	subs	r3, r0, #1
 8010d62:	42a1      	cmp	r1, r4
 8010d64:	d008      	beq.n	8010d78 <memmove+0x28>
 8010d66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010d6e:	e7f8      	b.n	8010d62 <memmove+0x12>
 8010d70:	4402      	add	r2, r0
 8010d72:	4601      	mov	r1, r0
 8010d74:	428a      	cmp	r2, r1
 8010d76:	d100      	bne.n	8010d7a <memmove+0x2a>
 8010d78:	bd10      	pop	{r4, pc}
 8010d7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010d7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010d82:	e7f7      	b.n	8010d74 <memmove+0x24>

08010d84 <_close_r>:
 8010d84:	b538      	push	{r3, r4, r5, lr}
 8010d86:	4d06      	ldr	r5, [pc, #24]	; (8010da0 <_close_r+0x1c>)
 8010d88:	2300      	movs	r3, #0
 8010d8a:	4604      	mov	r4, r0
 8010d8c:	4608      	mov	r0, r1
 8010d8e:	602b      	str	r3, [r5, #0]
 8010d90:	f7f0 fc3d 	bl	800160e <_close>
 8010d94:	1c43      	adds	r3, r0, #1
 8010d96:	d102      	bne.n	8010d9e <_close_r+0x1a>
 8010d98:	682b      	ldr	r3, [r5, #0]
 8010d9a:	b103      	cbz	r3, 8010d9e <_close_r+0x1a>
 8010d9c:	6023      	str	r3, [r4, #0]
 8010d9e:	bd38      	pop	{r3, r4, r5, pc}
 8010da0:	20004fb0 	.word	0x20004fb0

08010da4 <_fstat_r>:
 8010da4:	b538      	push	{r3, r4, r5, lr}
 8010da6:	4d07      	ldr	r5, [pc, #28]	; (8010dc4 <_fstat_r+0x20>)
 8010da8:	2300      	movs	r3, #0
 8010daa:	4604      	mov	r4, r0
 8010dac:	4608      	mov	r0, r1
 8010dae:	4611      	mov	r1, r2
 8010db0:	602b      	str	r3, [r5, #0]
 8010db2:	f7f0 fc38 	bl	8001626 <_fstat>
 8010db6:	1c43      	adds	r3, r0, #1
 8010db8:	d102      	bne.n	8010dc0 <_fstat_r+0x1c>
 8010dba:	682b      	ldr	r3, [r5, #0]
 8010dbc:	b103      	cbz	r3, 8010dc0 <_fstat_r+0x1c>
 8010dbe:	6023      	str	r3, [r4, #0]
 8010dc0:	bd38      	pop	{r3, r4, r5, pc}
 8010dc2:	bf00      	nop
 8010dc4:	20004fb0 	.word	0x20004fb0

08010dc8 <_isatty_r>:
 8010dc8:	b538      	push	{r3, r4, r5, lr}
 8010dca:	4d06      	ldr	r5, [pc, #24]	; (8010de4 <_isatty_r+0x1c>)
 8010dcc:	2300      	movs	r3, #0
 8010dce:	4604      	mov	r4, r0
 8010dd0:	4608      	mov	r0, r1
 8010dd2:	602b      	str	r3, [r5, #0]
 8010dd4:	f7f0 fc37 	bl	8001646 <_isatty>
 8010dd8:	1c43      	adds	r3, r0, #1
 8010dda:	d102      	bne.n	8010de2 <_isatty_r+0x1a>
 8010ddc:	682b      	ldr	r3, [r5, #0]
 8010dde:	b103      	cbz	r3, 8010de2 <_isatty_r+0x1a>
 8010de0:	6023      	str	r3, [r4, #0]
 8010de2:	bd38      	pop	{r3, r4, r5, pc}
 8010de4:	20004fb0 	.word	0x20004fb0

08010de8 <_lseek_r>:
 8010de8:	b538      	push	{r3, r4, r5, lr}
 8010dea:	4d07      	ldr	r5, [pc, #28]	; (8010e08 <_lseek_r+0x20>)
 8010dec:	4604      	mov	r4, r0
 8010dee:	4608      	mov	r0, r1
 8010df0:	4611      	mov	r1, r2
 8010df2:	2200      	movs	r2, #0
 8010df4:	602a      	str	r2, [r5, #0]
 8010df6:	461a      	mov	r2, r3
 8010df8:	f7f0 fc30 	bl	800165c <_lseek>
 8010dfc:	1c43      	adds	r3, r0, #1
 8010dfe:	d102      	bne.n	8010e06 <_lseek_r+0x1e>
 8010e00:	682b      	ldr	r3, [r5, #0]
 8010e02:	b103      	cbz	r3, 8010e06 <_lseek_r+0x1e>
 8010e04:	6023      	str	r3, [r4, #0]
 8010e06:	bd38      	pop	{r3, r4, r5, pc}
 8010e08:	20004fb0 	.word	0x20004fb0

08010e0c <_read_r>:
 8010e0c:	b538      	push	{r3, r4, r5, lr}
 8010e0e:	4d07      	ldr	r5, [pc, #28]	; (8010e2c <_read_r+0x20>)
 8010e10:	4604      	mov	r4, r0
 8010e12:	4608      	mov	r0, r1
 8010e14:	4611      	mov	r1, r2
 8010e16:	2200      	movs	r2, #0
 8010e18:	602a      	str	r2, [r5, #0]
 8010e1a:	461a      	mov	r2, r3
 8010e1c:	f7f0 fbbe 	bl	800159c <_read>
 8010e20:	1c43      	adds	r3, r0, #1
 8010e22:	d102      	bne.n	8010e2a <_read_r+0x1e>
 8010e24:	682b      	ldr	r3, [r5, #0]
 8010e26:	b103      	cbz	r3, 8010e2a <_read_r+0x1e>
 8010e28:	6023      	str	r3, [r4, #0]
 8010e2a:	bd38      	pop	{r3, r4, r5, pc}
 8010e2c:	20004fb0 	.word	0x20004fb0

08010e30 <_write_r>:
 8010e30:	b538      	push	{r3, r4, r5, lr}
 8010e32:	4d07      	ldr	r5, [pc, #28]	; (8010e50 <_write_r+0x20>)
 8010e34:	4604      	mov	r4, r0
 8010e36:	4608      	mov	r0, r1
 8010e38:	4611      	mov	r1, r2
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	602a      	str	r2, [r5, #0]
 8010e3e:	461a      	mov	r2, r3
 8010e40:	f7f0 fbc9 	bl	80015d6 <_write>
 8010e44:	1c43      	adds	r3, r0, #1
 8010e46:	d102      	bne.n	8010e4e <_write_r+0x1e>
 8010e48:	682b      	ldr	r3, [r5, #0]
 8010e4a:	b103      	cbz	r3, 8010e4e <_write_r+0x1e>
 8010e4c:	6023      	str	r3, [r4, #0]
 8010e4e:	bd38      	pop	{r3, r4, r5, pc}
 8010e50:	20004fb0 	.word	0x20004fb0

08010e54 <memcpy>:
 8010e54:	440a      	add	r2, r1
 8010e56:	4291      	cmp	r1, r2
 8010e58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010e5c:	d100      	bne.n	8010e60 <memcpy+0xc>
 8010e5e:	4770      	bx	lr
 8010e60:	b510      	push	{r4, lr}
 8010e62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010e66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010e6a:	4291      	cmp	r1, r2
 8010e6c:	d1f9      	bne.n	8010e62 <memcpy+0xe>
 8010e6e:	bd10      	pop	{r4, pc}

08010e70 <_malloc_usable_size_r>:
 8010e70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e74:	1f18      	subs	r0, r3, #4
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	bfbc      	itt	lt
 8010e7a:	580b      	ldrlt	r3, [r1, r0]
 8010e7c:	18c0      	addlt	r0, r0, r3
 8010e7e:	4770      	bx	lr

08010e80 <_init>:
 8010e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e82:	bf00      	nop
 8010e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e86:	bc08      	pop	{r3}
 8010e88:	469e      	mov	lr, r3
 8010e8a:	4770      	bx	lr

08010e8c <_fini>:
 8010e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e8e:	bf00      	nop
 8010e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e92:	bc08      	pop	{r3}
 8010e94:	469e      	mov	lr, r3
 8010e96:	4770      	bx	lr
