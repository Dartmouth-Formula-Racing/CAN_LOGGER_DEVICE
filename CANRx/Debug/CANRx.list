
CANRx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000119b8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000858  08011bb8  08011bb8  00021bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012410  08012410  0003016c  2**0
                  CONTENTS
  4 .ARM          00000008  08012410  08012410  00022410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012418  08012418  0003016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012418  08012418  00022418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801241c  0801241c  0002241c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  08012420  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031fc  2000016c  0801258c  0003016c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003368  0801258c  00033368  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003016c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003019a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022ed2  00000000  00000000  000301dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000051b1  00000000  00000000  000530af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c20  00000000  00000000  00058260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001574  00000000  00000000  00059e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e8b5  00000000  00000000  0005b3f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000266b8  00000000  00000000  00089ca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00102055  00000000  00000000  000b0361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007e08  00000000  00000000  001b23b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  001ba1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000016c 	.word	0x2000016c
 800021c:	00000000 	.word	0x00000000
 8000220:	08011ba0 	.word	0x08011ba0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000170 	.word	0x20000170
 800023c:	08011ba0 	.word	0x08011ba0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005de:	b0d7      	sub	sp, #348	; 0x15c
 80005e0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f001 fae0 	bl	8001ba6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 facb 	bl	8000b80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 fc23 	bl	8000e34 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ee:	f000 fbfb 	bl	8000de8 <MX_DMA_Init>
  MX_CAN1_Init();
 80005f2:	f000 fb2d 	bl	8000c50 <MX_CAN1_Init>
  MX_SDMMC1_SD_Init();
 80005f6:	f000 fba1 	bl	8000d3c <MX_SDMMC1_SD_Init>
  MX_USART3_UART_Init();
 80005fa:	f000 fbc5 	bl	8000d88 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80005fe:	f00a f8fd 	bl	800a7fc <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000602:	f00f fbb9 	bl	800fd78 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000606:	f000 fb59 	bl	8000cbc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  DS1307_Init(&hi2c1);
 800060a:	48b8      	ldr	r0, [pc, #736]	; (80008ec <main+0x310>)
 800060c:	f001 f9dc 	bl	80019c8 <DS1307_Init>
		RESET_STATE,
		POWER_OFF
	} state_t;

	//Starting state is PERIPHERAL_INIT
	state_t state = TURN_ON;
 8000610:	2300      	movs	r3, #0
 8000612:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	uint32_t byteswritten; /* File write/read counts */
#ifdef VERBOSE_DEBUGGING
	uint32_t buffer_emptyings = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	uint32_t total_size = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		switch (state) {
 8000622:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8000626:	2b0c      	cmp	r3, #12
 8000628:	f200 8276 	bhi.w	8000b18 <main+0x53c>
 800062c:	a201      	add	r2, pc, #4	; (adr r2, 8000634 <main+0x58>)
 800062e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000632:	bf00      	nop
 8000634:	08000669 	.word	0x08000669
 8000638:	0800069f 	.word	0x0800069f
 800063c:	0800072d 	.word	0x0800072d
 8000640:	080008c3 	.word	0x080008c3
 8000644:	08000b2b 	.word	0x08000b2b
 8000648:	08000b2b 	.word	0x08000b2b
 800064c:	08000985 	.word	0x08000985
 8000650:	08000b2b 	.word	0x08000b2b
 8000654:	080009e5 	.word	0x080009e5
 8000658:	08000b2b 	.word	0x08000b2b
 800065c:	08000a13 	.word	0x08000a13
 8000660:	08000aa1 	.word	0x08000aa1
 8000664:	08000b03 	.word	0x08000b03
		 * Transition out:
		 * 	If power switch is set to on position -> PERIFPHERAL_INIT
		 * 	else (power switch is set to off) -> POWER_OFF
		 */
		case TURN_ON:
			MX_DMA_Init();
 8000668:	f000 fbbe 	bl	8000de8 <MX_DMA_Init>
			MX_SDMMC1_SD_Init();
 800066c:	f000 fb66 	bl	8000d3c <MX_SDMMC1_SD_Init>
			MX_FATFS_Init();
 8000670:	f00a f8c4 	bl	800a7fc <MX_FATFS_Init>
			POWER_STATE = HAL_GPIO_ReadPin(PowerSwitch_GPIO_Port, PowerSwitch_Pin);
 8000674:	2102      	movs	r1, #2
 8000676:	489e      	ldr	r0, [pc, #632]	; (80008f0 <main+0x314>)
 8000678:	f002 ffa6 	bl	80035c8 <HAL_GPIO_ReadPin>
 800067c:	4603      	mov	r3, r0
 800067e:	461a      	mov	r2, r3
 8000680:	4b9c      	ldr	r3, [pc, #624]	; (80008f4 <main+0x318>)
 8000682:	701a      	strb	r2, [r3, #0]
			state = POWER_STATE ? PERIPHERAL_INIT : POWER_OFF;
 8000684:	4b9b      	ldr	r3, [pc, #620]	; (80008f4 <main+0x318>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <main+0xb4>
 800068c:	2301      	movs	r3, #1
 800068e:	e000      	b.n	8000692 <main+0xb6>
 8000690:	230c      	movs	r3, #12
 8000692:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
			NEW_LOG_FLAG = 0;
 8000696:	4b98      	ldr	r3, [pc, #608]	; (80008f8 <main+0x31c>)
 8000698:	2200      	movs	r2, #0
 800069a:	701a      	strb	r2, [r3, #0]
			break;
 800069c:	e24a      	b.n	8000b34 <main+0x558>
		 * Transition out:
		 * 	Always -> CREATE_LOG_FILE
		 */
		case PERIPHERAL_INIT:
			// Reset both buffers
			curr_data_buffer_loc = data_buffer[0];
 800069e:	4b97      	ldr	r3, [pc, #604]	; (80008fc <main+0x320>)
 80006a0:	4a97      	ldr	r2, [pc, #604]	; (8000900 <main+0x324>)
 80006a2:	601a      	str	r2, [r3, #0]
			data_buffer[0][0] = '\00';
 80006a4:	4b96      	ldr	r3, [pc, #600]	; (8000900 <main+0x324>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
			data_buffer[1][0] = '\00';
 80006aa:	4b95      	ldr	r3, [pc, #596]	; (8000900 <main+0x324>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	f883 2640 	strb.w	r2, [r3, #1600]	; 0x640
			buffer_fill_level[0] = 0;
 80006b2:	4b94      	ldr	r3, [pc, #592]	; (8000904 <main+0x328>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	701a      	strb	r2, [r3, #0]
			buffer_fill_level[1] = 0;
 80006b8:	4b92      	ldr	r3, [pc, #584]	; (8000904 <main+0x328>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	705a      	strb	r2, [r3, #1]
			current_buffer = 0;
 80006be:	4b92      	ldr	r3, [pc, #584]	; (8000908 <main+0x32c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	701a      	strb	r2, [r3, #0]

			// Turn Red LED on (Green turns off)
#ifdef VERBOSE_DEBUGGING
			printf("Initializing Peripherals...\r\n");
 80006c4:	4891      	ldr	r0, [pc, #580]	; (800090c <main+0x330>)
 80006c6:	f010 faf5 	bl	8010cb4 <puts>
#endif
			HAL_GPIO_WritePin(StatusSignal_GPIO_Port, StatusSignal_Pin, GPIO_PIN_RESET); //Red LED
 80006ca:	2200      	movs	r2, #0
 80006cc:	2101      	movs	r1, #1
 80006ce:	4888      	ldr	r0, [pc, #544]	; (80008f0 <main+0x314>)
 80006d0:	f002 ff92 	bl	80035f8 <HAL_GPIO_WritePin>

			// Initializing CAN
			if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80006d4:	488e      	ldr	r0, [pc, #568]	; (8000910 <main+0x334>)
 80006d6:	f001 fccf 	bl	8002078 <HAL_CAN_Start>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d004      	beq.n	80006ea <main+0x10e>
#ifdef VERBOSE_DEBUGGING
				printf("CAN could not start.\r\n");
 80006e0:	488c      	ldr	r0, [pc, #560]	; (8000914 <main+0x338>)
 80006e2:	f010 fae7 	bl	8010cb4 <puts>
#endif
				Error_Handler();
 80006e6:	f000 fd9f 	bl	8001228 <Error_Handler>
			}
			if (CAN_Filter_Config() != HAL_OK) {
 80006ea:	f000 fd15 	bl	8001118 <CAN_Filter_Config>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d004      	beq.n	80006fe <main+0x122>
#ifdef VERBOSE_DEBUGGING
				printf("CAN filter failed to set.\r\n");
 80006f4:	4888      	ldr	r0, [pc, #544]	; (8000918 <main+0x33c>)
 80006f6:	f010 fadd 	bl	8010cb4 <puts>
#endif
				Error_Handler();
 80006fa:	f000 fd95 	bl	8001228 <Error_Handler>
			}
#ifdef VERBOSE_DEBUGGING
			printf("CAN initialization succeeded...\r\n");
 80006fe:	4887      	ldr	r0, [pc, #540]	; (800091c <main+0x340>)
 8000700:	f010 fad8 	bl	8010cb4 <puts>
#endif

			// Mount and Format SD Card
			if (f_mount(&SDFatFS, SDPath, 0) != FR_OK) {
 8000704:	2200      	movs	r2, #0
 8000706:	4986      	ldr	r1, [pc, #536]	; (8000920 <main+0x344>)
 8000708:	4886      	ldr	r0, [pc, #536]	; (8000924 <main+0x348>)
 800070a:	f00e fcb1 	bl	800f070 <f_mount>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d004      	beq.n	800071e <main+0x142>
#ifdef VERBOSE_DEBUGGING
				printf("Mounting failed!\r\n");
 8000714:	4884      	ldr	r0, [pc, #528]	; (8000928 <main+0x34c>)
 8000716:	f010 facd 	bl	8010cb4 <puts>
#endif
				Error_Handler();
 800071a:	f000 fd85 	bl	8001228 <Error_Handler>
			}
#ifdef VERBOSE_DEBUGGING
			printf("SD initialization succeeded...\r\n");
 800071e:	4883      	ldr	r0, [pc, #524]	; (800092c <main+0x350>)
 8000720:	f010 fac8 	bl	8010cb4 <puts>
#endif

			state = CREATE_LOG_FILE;
 8000724:	2302      	movs	r3, #2
 8000726:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
			break;
 800072a:	e203      	b.n	8000b34 <main+0x558>
		 * Transition out:
		 * 	Always -> STANDBY
		 */
		case CREATE_LOG_FILE:
#ifdef VERBOSE_DEBUGGING
			printf("Creating new log file...\r\n");
 800072c:	4880      	ldr	r0, [pc, #512]	; (8000930 <main+0x354>)
 800072e:	f010 fac1 	bl	8010cb4 <puts>
#endif

			// Update current date/time info
			curr_date = DS1307_GetDate();
 8000732:	f001 f9bb 	bl	8001aac <DS1307_GetDate>
 8000736:	4603      	mov	r3, r0
 8000738:	461a      	mov	r2, r3
 800073a:	4b7e      	ldr	r3, [pc, #504]	; (8000934 <main+0x358>)
 800073c:	701a      	strb	r2, [r3, #0]
			curr_month = DS1307_GetMonth();
 800073e:	f001 f9c1 	bl	8001ac4 <DS1307_GetMonth>
 8000742:	4603      	mov	r3, r0
 8000744:	461a      	mov	r2, r3
 8000746:	4b7c      	ldr	r3, [pc, #496]	; (8000938 <main+0x35c>)
 8000748:	701a      	strb	r2, [r3, #0]
			curr_year = DS1307_GetYear();
 800074a:	f001 f9c7 	bl	8001adc <DS1307_GetYear>
 800074e:	4603      	mov	r3, r0
 8000750:	b2da      	uxtb	r2, r3
 8000752:	4b7a      	ldr	r3, [pc, #488]	; (800093c <main+0x360>)
 8000754:	701a      	strb	r2, [r3, #0]
			curr_hour = DS1307_GetHour();
 8000756:	f001 f9e3 	bl	8001b20 <DS1307_GetHour>
 800075a:	4603      	mov	r3, r0
 800075c:	461a      	mov	r2, r3
 800075e:	4b78      	ldr	r3, [pc, #480]	; (8000940 <main+0x364>)
 8000760:	701a      	strb	r2, [r3, #0]
			curr_minute = DS1307_GetMinute();
 8000762:	f001 f9ec 	bl	8001b3e <DS1307_GetMinute>
 8000766:	4603      	mov	r3, r0
 8000768:	461a      	mov	r2, r3
 800076a:	4b76      	ldr	r3, [pc, #472]	; (8000944 <main+0x368>)
 800076c:	701a      	strb	r2, [r3, #0]
			curr_second = DS1307_GetSecond();
 800076e:	f001 f9f2 	bl	8001b56 <DS1307_GetSecond>
 8000772:	4603      	mov	r3, r0
 8000774:	461a      	mov	r2, r3
 8000776:	4b74      	ldr	r3, [pc, #464]	; (8000948 <main+0x36c>)
 8000778:	701a      	strb	r2, [r3, #0]
			starting_tick = HAL_GetTick();
 800077a:	f001 fa65 	bl	8001c48 <HAL_GetTick>
 800077e:	4603      	mov	r3, r0
 8000780:	4a72      	ldr	r2, [pc, #456]	; (800094c <main+0x370>)
 8000782:	6013      	str	r3, [r2, #0]
#ifdef VERBOSE_DEBUGGING
			printf("%02d/%02d/20%02d %02d:%02d:%02d\r\n",
 8000784:	4b6c      	ldr	r3, [pc, #432]	; (8000938 <main+0x35c>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	4618      	mov	r0, r3
 800078a:	4b6a      	ldr	r3, [pc, #424]	; (8000934 <main+0x358>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	461c      	mov	r4, r3
 8000790:	4b6a      	ldr	r3, [pc, #424]	; (800093c <main+0x360>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	461d      	mov	r5, r3
 8000796:	4b6a      	ldr	r3, [pc, #424]	; (8000940 <main+0x364>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	461a      	mov	r2, r3
 800079c:	4b69      	ldr	r3, [pc, #420]	; (8000944 <main+0x368>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	4619      	mov	r1, r3
 80007a2:	4b69      	ldr	r3, [pc, #420]	; (8000948 <main+0x36c>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	9302      	str	r3, [sp, #8]
 80007a8:	9101      	str	r1, [sp, #4]
 80007aa:	9200      	str	r2, [sp, #0]
 80007ac:	462b      	mov	r3, r5
 80007ae:	4622      	mov	r2, r4
 80007b0:	4601      	mov	r1, r0
 80007b2:	4867      	ldr	r0, [pc, #412]	; (8000950 <main+0x374>)
 80007b4:	f010 fa18 	bl	8010be8 <iprintf>
					curr_month, curr_date, curr_year, curr_hour, curr_minute, curr_second);
#endif
			if (f_stat(data_directory, &fno) != FR_OK) {
 80007b8:	4b66      	ldr	r3, [pc, #408]	; (8000954 <main+0x378>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4966      	ldr	r1, [pc, #408]	; (8000958 <main+0x37c>)
 80007be:	4618      	mov	r0, r3
 80007c0:	f00f f877 	bl	800f8b2 <f_stat>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d00c      	beq.n	80007e4 <main+0x208>
				if (f_mkdir(data_directory) != FR_OK) {
 80007ca:	4b62      	ldr	r3, [pc, #392]	; (8000954 <main+0x378>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f00f f8a8 	bl	800f924 <f_mkdir>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d004      	beq.n	80007e4 <main+0x208>
#ifdef VERBOSE_DEBUGGING
					printf("Data directory not present and failed to create it.");
 80007da:	4860      	ldr	r0, [pc, #384]	; (800095c <main+0x380>)
 80007dc:	f010 fa04 	bl	8010be8 <iprintf>
#endif
					Error_Handler();
 80007e0:	f000 fd22 	bl	8001228 <Error_Handler>
				}
			}

			// Creating new filename
			TCHAR filename[FILENAME_MAX_BYTES];
			snprintf(filename, FILENAME_MAX_BYTES, "%s/%02d-%02d-20%02d_(%02dh-%02dm-%02ds).log",
 80007e4:	4b5b      	ldr	r3, [pc, #364]	; (8000954 <main+0x378>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a53      	ldr	r2, [pc, #332]	; (8000938 <main+0x35c>)
 80007ea:	7812      	ldrb	r2, [r2, #0]
 80007ec:	4611      	mov	r1, r2
 80007ee:	4a51      	ldr	r2, [pc, #324]	; (8000934 <main+0x358>)
 80007f0:	7812      	ldrb	r2, [r2, #0]
 80007f2:	4614      	mov	r4, r2
 80007f4:	4a51      	ldr	r2, [pc, #324]	; (800093c <main+0x360>)
 80007f6:	7812      	ldrb	r2, [r2, #0]
 80007f8:	4615      	mov	r5, r2
 80007fa:	4a51      	ldr	r2, [pc, #324]	; (8000940 <main+0x364>)
 80007fc:	7812      	ldrb	r2, [r2, #0]
 80007fe:	4616      	mov	r6, r2
 8000800:	4a50      	ldr	r2, [pc, #320]	; (8000944 <main+0x368>)
 8000802:	7812      	ldrb	r2, [r2, #0]
 8000804:	607a      	str	r2, [r7, #4]
 8000806:	4a50      	ldr	r2, [pc, #320]	; (8000948 <main+0x36c>)
 8000808:	7812      	ldrb	r2, [r2, #0]
 800080a:	f107 000c 	add.w	r0, r7, #12
 800080e:	9205      	str	r2, [sp, #20]
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	9204      	str	r2, [sp, #16]
 8000814:	9603      	str	r6, [sp, #12]
 8000816:	9502      	str	r5, [sp, #8]
 8000818:	9401      	str	r4, [sp, #4]
 800081a:	9100      	str	r1, [sp, #0]
 800081c:	4a50      	ldr	r2, [pc, #320]	; (8000960 <main+0x384>)
 800081e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000822:	f010 f8df 	bl	80109e4 <sniprintf>
					data_directory,
					curr_month, curr_date, curr_year,
					curr_hour, curr_minute, curr_second);

#ifdef VERBOSE_DEBUGGING
			printf("New log name: %s \r\n", filename);
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	4619      	mov	r1, r3
 800082c:	484d      	ldr	r0, [pc, #308]	; (8000964 <main+0x388>)
 800082e:	f010 f9db 	bl	8010be8 <iprintf>
#endif

			// Open file for writing (Create)
			if (f_open(&SDFile, filename, FA_CREATE_ALWAYS | FA_WRITE)
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	220a      	movs	r2, #10
 8000838:	4619      	mov	r1, r3
 800083a:	484b      	ldr	r0, [pc, #300]	; (8000968 <main+0x38c>)
 800083c:	f00e fc5e 	bl	800f0fc <f_open>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d007      	beq.n	8000856 <main+0x27a>
					!= FR_OK) {
#ifdef VERBOSE_DEBUGGING
				printf("Failed to create new log file: %s ...!\r\n", filename);
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	4619      	mov	r1, r3
 800084c:	4847      	ldr	r0, [pc, #284]	; (800096c <main+0x390>)
 800084e:	f010 f9cb 	bl	8010be8 <iprintf>
#endif
				Error_Handler();
 8000852:	f000 fce9 	bl	8001228 <Error_Handler>
			}
#ifdef VERBOSE_DEBUGGING
			printf("Successfully created new log file: %s ...\r\n", filename);
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	4619      	mov	r1, r3
 800085c:	4844      	ldr	r0, [pc, #272]	; (8000970 <main+0x394>)
 800085e:	f010 f9c3 	bl	8010be8 <iprintf>
#endif

			// Starting CANRx interrupts
			if (HAL_CAN_ActivateNotification(&hcan1,
 8000862:	2102      	movs	r1, #2
 8000864:	482a      	ldr	r0, [pc, #168]	; (8000910 <main+0x334>)
 8000866:	f001 fdce 	bl	8002406 <HAL_CAN_ActivateNotification>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d004      	beq.n	800087a <main+0x29e>
					CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
				/* Notification Error */
#ifdef VERBOSE_DEBUGGING
				printf("Failed to activate CAN\r\n");
 8000870:	4840      	ldr	r0, [pc, #256]	; (8000974 <main+0x398>)
 8000872:	f010 fa1f 	bl	8010cb4 <puts>
#endif
				Error_Handler();
 8000876:	f000 fcd7 	bl	8001228 <Error_Handler>
			}

			// Turn Green LED on (turns Red LED off)
#ifdef VERBOSE_DEBUGGING
			printf("Ready to receive messages!\r\n");
 800087a:	483f      	ldr	r0, [pc, #252]	; (8000978 <main+0x39c>)
 800087c:	f010 fa1a 	bl	8010cb4 <puts>
#endif

			HAL_GPIO_WritePin(StatusSignal_GPIO_Port, StatusSignal_Pin, GPIO_PIN_SET); // Successful LED
 8000880:	2201      	movs	r2, #1
 8000882:	2101      	movs	r1, #1
 8000884:	481a      	ldr	r0, [pc, #104]	; (80008f0 <main+0x314>)
 8000886:	f002 feb7 	bl	80035f8 <HAL_GPIO_WritePin>

			// purge FIFO in case there are old messages
			while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 800088a:	e00f      	b.n	80008ac <main+0x2d0>
				CAN_RxHeaderTypeDef RxHeader;
				uint8_t rcvd_msg[8];
				if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_msg) != HAL_OK) {
 800088c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000890:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8000894:	2100      	movs	r1, #0
 8000896:	481e      	ldr	r0, [pc, #120]	; (8000910 <main+0x334>)
 8000898:	f001 fc7b 	bl	8002192 <HAL_CAN_GetRxMessage>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d004      	beq.n	80008ac <main+0x2d0>
#ifdef VERBOSE_DEBUGGING
						printf("Failed to get CAN message\r\n");
 80008a2:	4836      	ldr	r0, [pc, #216]	; (800097c <main+0x3a0>)
 80008a4:	f010 fa06 	bl	8010cb4 <puts>
#endif
						Error_Handler();
 80008a8:	f000 fcbe 	bl	8001228 <Error_Handler>
			while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 80008ac:	2100      	movs	r1, #0
 80008ae:	4818      	ldr	r0, [pc, #96]	; (8000910 <main+0x334>)
 80008b0:	f001 fd81 	bl	80023b6 <HAL_CAN_GetRxFifoFillLevel>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d1e8      	bne.n	800088c <main+0x2b0>
					}
			}

			state = STANDBY;
 80008ba:	2303      	movs	r3, #3
 80008bc:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
			break;
 80008c0:	e138      	b.n	8000b34 <main+0x558>
		 * 	If power switch is set to off position or the new file button is clicked -> RESET_STATE
		 * 	Else if the current buffer is filled -> SD_CARD_WRITE
		 * 	Else -> STANDBY
		 */
		case STANDBY:
			if (!POWER_STATE || NEW_LOG_FLAG) //Power switch is off or new log file
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <main+0x318>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d003      	beq.n	80008d2 <main+0x2f6>
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <main+0x31c>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d003      	beq.n	80008da <main+0x2fe>
				state = RESET_STATE;
 80008d2:	230b      	movs	r3, #11
 80008d4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
			else if (is_buffer_filled) //Buffer is filled
				state = SD_CARD_WRITE;
			break;
 80008d8:	e129      	b.n	8000b2e <main+0x552>
			else if (is_buffer_filled) //Buffer is filled
 80008da:	4b29      	ldr	r3, [pc, #164]	; (8000980 <main+0x3a4>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	f000 8125 	beq.w	8000b2e <main+0x552>
				state = SD_CARD_WRITE;
 80008e4:	2306      	movs	r3, #6
 80008e6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
			break;
 80008ea:	e120      	b.n	8000b2e <main+0x552>
 80008ec:	200001b0 	.word	0x200001b0
 80008f0:	40021800 	.word	0x40021800
 80008f4:	200004e8 	.word	0x200004e8
 80008f8:	200004e9 	.word	0x200004e9
 80008fc:	2000116c 	.word	0x2000116c
 8000900:	200004ec 	.word	0x200004ec
 8000904:	20001170 	.word	0x20001170
 8000908:	20001172 	.word	0x20001172
 800090c:	08011bc4 	.word	0x08011bc4
 8000910:	20000188 	.word	0x20000188
 8000914:	08011be4 	.word	0x08011be4
 8000918:	08011bfc 	.word	0x08011bfc
 800091c:	08011c18 	.word	0x08011c18
 8000920:	20001190 	.word	0x20001190
 8000924:	20001194 	.word	0x20001194
 8000928:	08011c3c 	.word	0x08011c3c
 800092c:	08011c50 	.word	0x08011c50
 8000930:	08011c70 	.word	0x08011c70
 8000934:	20001174 	.word	0x20001174
 8000938:	20001175 	.word	0x20001175
 800093c:	20001176 	.word	0x20001176
 8000940:	20001177 	.word	0x20001177
 8000944:	20001178 	.word	0x20001178
 8000948:	20001179 	.word	0x20001179
 800094c:	2000117c 	.word	0x2000117c
 8000950:	08011c8c 	.word	0x08011c8c
 8000954:	20000000 	.word	0x20000000
 8000958:	200003d0 	.word	0x200003d0
 800095c:	08011cb0 	.word	0x08011cb0
 8000960:	08011ce4 	.word	0x08011ce4
 8000964:	08011d10 	.word	0x08011d10
 8000968:	200013c8 	.word	0x200013c8
 800096c:	08011d24 	.word	0x08011d24
 8000970:	08011d50 	.word	0x08011d50
 8000974:	08011d7c 	.word	0x08011d7c
 8000978:	08011d94 	.word	0x08011d94
 800097c:	08011db0 	.word	0x08011db0
 8000980:	20001173 	.word	0x20001173
		 *
		 * Transition out:
		 *	Always -> USB_TRANSMIT
		 */
		case SD_CARD_WRITE:
			if (f_write(&SDFile, data_buffer[!current_buffer], BUFFER_TOTAL_SIZE, (void*) &byteswritten) != FR_OK || byteswritten == 0) {
 8000984:	4b6c      	ldr	r3, [pc, #432]	; (8000b38 <main+0x55c>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	bf0c      	ite	eq
 800098c:	2301      	moveq	r3, #1
 800098e:	2300      	movne	r3, #0
 8000990:	b2db      	uxtb	r3, r3
 8000992:	461a      	mov	r2, r3
 8000994:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8000998:	fb02 f303 	mul.w	r3, r2, r3
 800099c:	4a67      	ldr	r2, [pc, #412]	; (8000b3c <main+0x560>)
 800099e:	1899      	adds	r1, r3, r2
 80009a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80009a4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80009a8:	4865      	ldr	r0, [pc, #404]	; (8000b40 <main+0x564>)
 80009aa:	f00e fd65 	bl	800f478 <f_write>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d103      	bne.n	80009bc <main+0x3e0>
 80009b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d104      	bne.n	80009c6 <main+0x3ea>
#ifdef VERBOSE_DEBUGGING
				printf("Writing Failed!\r\n");
 80009bc:	4861      	ldr	r0, [pc, #388]	; (8000b44 <main+0x568>)
 80009be:	f010 f979 	bl	8010cb4 <puts>
#endif
				Error_Handler();
 80009c2:	f000 fc31 	bl	8001228 <Error_Handler>
			}
			if (f_sync(&SDFile) != FR_OK) {
 80009c6:	485e      	ldr	r0, [pc, #376]	; (8000b40 <main+0x564>)
 80009c8:	f00e fecb 	bl	800f762 <f_sync>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d004      	beq.n	80009dc <main+0x400>
#ifdef VERBOSE_DEBUGGING
				printf("Sync Failed!\r\n");
 80009d2:	485d      	ldr	r0, [pc, #372]	; (8000b48 <main+0x56c>)
 80009d4:	f010 f96e 	bl	8010cb4 <puts>
#endif
				Error_Handler();
 80009d8:	f000 fc26 	bl	8001228 <Error_Handler>
			}

			state = USB_TRANSMIT;
 80009dc:	2308      	movs	r3, #8
 80009de:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
			break;
 80009e2:	e0a7      	b.n	8000b34 <main+0x558>
		 *
		 * Transition out:
		 *	Always -> RESET_BUFFER
		 */
		case USB_TRANSMIT:
			CDC_Transmit_FS(data_buffer[!current_buffer], BUFFER_TOTAL_SIZE);
 80009e4:	4b54      	ldr	r3, [pc, #336]	; (8000b38 <main+0x55c>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	bf0c      	ite	eq
 80009ec:	2301      	moveq	r3, #1
 80009ee:	2300      	movne	r3, #0
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	461a      	mov	r2, r3
 80009f4:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 80009f8:	fb02 f303 	mul.w	r3, r2, r3
 80009fc:	4a4f      	ldr	r2, [pc, #316]	; (8000b3c <main+0x560>)
 80009fe:	4413      	add	r3, r2
 8000a00:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8000a04:	4618      	mov	r0, r3
 8000a06:	f00f fa75 	bl	800fef4 <CDC_Transmit_FS>
			state = RESET_BUFFER;
 8000a0a:	230a      	movs	r3, #10
 8000a0c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
			break;
 8000a10:	e090      	b.n	8000b34 <main+0x558>
		 *	Always -> STANDBY
		 */
		case RESET_BUFFER:
			// bookkeeping information (just for debugging)
#ifdef VERBOSE_DEBUGGING
			buffer_emptyings++;
 8000a12:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000a16:	3301      	adds	r3, #1
 8000a18:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
			total_size += byteswritten;
 8000a1c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000a20:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8000a24:	4413      	add	r3, r2
 8000a26:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			printf("emptied buffer %d\r\n", !current_buffer);
 8000a2a:	4b43      	ldr	r3, [pc, #268]	; (8000b38 <main+0x55c>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	bf0c      	ite	eq
 8000a32:	2301      	moveq	r3, #1
 8000a34:	2300      	movne	r3, #0
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4844      	ldr	r0, [pc, #272]	; (8000b4c <main+0x570>)
 8000a3c:	f010 f8d4 	bl	8010be8 <iprintf>
			printf("buffers emptied: %ld\r\n", buffer_emptyings);
 8000a40:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8000a44:	4842      	ldr	r0, [pc, #264]	; (8000b50 <main+0x574>)
 8000a46:	f010 f8cf 	bl	8010be8 <iprintf>
			printf("Wrote buffer sizeof: %ld\r\n", byteswritten);
 8000a4a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4840      	ldr	r0, [pc, #256]	; (8000b54 <main+0x578>)
 8000a52:	f010 f8c9 	bl	8010be8 <iprintf>
#endif
			// Reset buffer that was just sent to SD and USB
			data_buffer[!current_buffer][0] = '\00';
 8000a56:	4b38      	ldr	r3, [pc, #224]	; (8000b38 <main+0x55c>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	bf0c      	ite	eq
 8000a5e:	2301      	moveq	r3, #1
 8000a60:	2300      	movne	r3, #0
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	4619      	mov	r1, r3
 8000a66:	4a35      	ldr	r2, [pc, #212]	; (8000b3c <main+0x560>)
 8000a68:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8000a6c:	fb01 f303 	mul.w	r3, r1, r3
 8000a70:	4413      	add	r3, r2
 8000a72:	2200      	movs	r2, #0
 8000a74:	701a      	strb	r2, [r3, #0]
			buffer_fill_level[!current_buffer] = 0;
 8000a76:	4b30      	ldr	r3, [pc, #192]	; (8000b38 <main+0x55c>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	bf0c      	ite	eq
 8000a7e:	2301      	moveq	r3, #1
 8000a80:	2300      	movne	r3, #0
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b34      	ldr	r3, [pc, #208]	; (8000b58 <main+0x57c>)
 8000a88:	2100      	movs	r1, #0
 8000a8a:	5499      	strb	r1, [r3, r2]
			is_buffer_filled = 0;
 8000a8c:	4b33      	ldr	r3, [pc, #204]	; (8000b5c <main+0x580>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	701a      	strb	r2, [r3, #0]

			byteswritten = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

			state = STANDBY;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
			break;
 8000a9e:	e049      	b.n	8000b34 <main+0x558>
		 *	If power switch is in off position -> POWER_OFF
		 *	Else (button was pressed) -> TURN_ON
		 */
		case RESET_STATE:
			// Turn off CAN interrupt
			HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000aa0:	2102      	movs	r1, #2
 8000aa2:	482f      	ldr	r0, [pc, #188]	; (8000b60 <main+0x584>)
 8000aa4:	f001 fcd5 	bl	8002452 <HAL_CAN_DeactivateNotification>
			HAL_CAN_Stop(&hcan1);
 8000aa8:	482d      	ldr	r0, [pc, #180]	; (8000b60 <main+0x584>)
 8000aaa:	f001 fb29 	bl	8002100 <HAL_CAN_Stop>

			// Turn Red LED on (Green LED turns off)
			HAL_GPIO_WritePin(StatusSignal_GPIO_Port, StatusSignal_Pin, GPIO_PIN_RESET); //Red LED
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	482c      	ldr	r0, [pc, #176]	; (8000b64 <main+0x588>)
 8000ab4:	f002 fda0 	bl	80035f8 <HAL_GPIO_WritePin>

#ifdef VERBOSE_DEBUGGING
			// Debugging information
			printf("total sizeof: %ld\r\n", total_size);
 8000ab8:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8000abc:	482a      	ldr	r0, [pc, #168]	; (8000b68 <main+0x58c>)
 8000abe:	f010 f893 	bl	8010be8 <iprintf>
			total_size = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			buffer_emptyings = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
			printf("Unmounting SD Card!\r\n");
 8000ace:	4827      	ldr	r0, [pc, #156]	; (8000b6c <main+0x590>)
 8000ad0:	f010 f8f0 	bl	8010cb4 <puts>
#endif
			f_close(&SDFile);
 8000ad4:	481a      	ldr	r0, [pc, #104]	; (8000b40 <main+0x564>)
 8000ad6:	f00e fec2 	bl	800f85e <f_close>
			f_mount(0, (TCHAR const*) NULL, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2100      	movs	r1, #0
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f00e fac6 	bl	800f070 <f_mount>

			if (!POWER_STATE) {
 8000ae4:	4b22      	ldr	r3, [pc, #136]	; (8000b70 <main+0x594>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d106      	bne.n	8000afa <main+0x51e>
				state = POWER_OFF;
 8000aec:	230c      	movs	r3, #12
 8000aee:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
#ifdef VERBOSE_DEBUGGING
				printf("Turning off!\r\n");
 8000af2:	4820      	ldr	r0, [pc, #128]	; (8000b74 <main+0x598>)
 8000af4:	f010 f8de 	bl	8010cb4 <puts>
#endif
			}
			else {
				state = TURN_ON; // button was pressed
			}
			break;
 8000af8:	e01c      	b.n	8000b34 <main+0x558>
				state = TURN_ON; // button was pressed
 8000afa:	2300      	movs	r3, #0
 8000afc:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
			break;
 8000b00:	e018      	b.n	8000b34 <main+0x558>
		 * Transition out:
		 *	If power switch is in the on position -> TURN_ON
		 *	Else -> POWER_OFF
		 */
		case POWER_OFF:
			if (POWER_STATE) {
 8000b02:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <main+0x594>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d013      	beq.n	8000b32 <main+0x556>
				state = TURN_ON;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

#ifdef VERBOSE_DEBUGGING
				printf("\r\nTurning back on!\r\n");
 8000b10:	4819      	ldr	r0, [pc, #100]	; (8000b78 <main+0x59c>)
 8000b12:	f010 f8cf 	bl	8010cb4 <puts>
#endif
			}
			break;
 8000b16:	e00c      	b.n	8000b32 <main+0x556>

		default:
			HAL_GPIO_WritePin(StatusSignal_GPIO_Port, StatusSignal_Pin,
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	4811      	ldr	r0, [pc, #68]	; (8000b64 <main+0x588>)
 8000b1e:	f002 fd6b 	bl	80035f8 <HAL_GPIO_WritePin>
								GPIO_PIN_RESET); // Red LED

#ifdef VERBOSE_DEBUGGING
			printf("CAN logger in unknown state!\r\n");
 8000b22:	4816      	ldr	r0, [pc, #88]	; (8000b7c <main+0x5a0>)
 8000b24:	f010 f8c6 	bl	8010cb4 <puts>
#endif
			break;
 8000b28:	e004      	b.n	8000b34 <main+0x558>
			break;
 8000b2a:	bf00      	nop
 8000b2c:	e579      	b.n	8000622 <main+0x46>
			break;
 8000b2e:	bf00      	nop
 8000b30:	e577      	b.n	8000622 <main+0x46>
			break;
 8000b32:	bf00      	nop
		switch (state) {
 8000b34:	e575      	b.n	8000622 <main+0x46>
 8000b36:	bf00      	nop
 8000b38:	20001172 	.word	0x20001172
 8000b3c:	200004ec 	.word	0x200004ec
 8000b40:	200013c8 	.word	0x200013c8
 8000b44:	08011dcc 	.word	0x08011dcc
 8000b48:	08011de0 	.word	0x08011de0
 8000b4c:	08011df0 	.word	0x08011df0
 8000b50:	08011e04 	.word	0x08011e04
 8000b54:	08011e1c 	.word	0x08011e1c
 8000b58:	20001170 	.word	0x20001170
 8000b5c:	20001173 	.word	0x20001173
 8000b60:	20000188 	.word	0x20000188
 8000b64:	40021800 	.word	0x40021800
 8000b68:	08011e38 	.word	0x08011e38
 8000b6c:	08011e4c 	.word	0x08011e4c
 8000b70:	200004e8 	.word	0x200004e8
 8000b74:	08011e64 	.word	0x08011e64
 8000b78:	08011e74 	.word	0x08011e74
 8000b7c:	08011e88 	.word	0x08011e88

08000b80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b094      	sub	sp, #80	; 0x50
 8000b84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b86:	f107 031c 	add.w	r3, r7, #28
 8000b8a:	2234      	movs	r2, #52	; 0x34
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f010 f898 	bl	8010cc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b94:	f107 0308 	add.w	r3, r7, #8
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba4:	4b28      	ldr	r3, [pc, #160]	; (8000c48 <SystemClock_Config+0xc8>)
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba8:	4a27      	ldr	r2, [pc, #156]	; (8000c48 <SystemClock_Config+0xc8>)
 8000baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bae:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb0:	4b25      	ldr	r3, [pc, #148]	; (8000c48 <SystemClock_Config+0xc8>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bbc:	4b23      	ldr	r3, [pc, #140]	; (8000c4c <SystemClock_Config+0xcc>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bc4:	4a21      	ldr	r2, [pc, #132]	; (8000c4c <SystemClock_Config+0xcc>)
 8000bc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bca:	6013      	str	r3, [r2, #0]
 8000bcc:	4b1f      	ldr	r3, [pc, #124]	; (8000c4c <SystemClock_Config+0xcc>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000be0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be2:	2302      	movs	r3, #2
 8000be4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000be6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bec:	2304      	movs	r3, #4
 8000bee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000bf0:	2360      	movs	r3, #96	; 0x60
 8000bf2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bf8:	2304      	movs	r3, #4
 8000bfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c00:	f107 031c 	add.w	r3, r7, #28
 8000c04:	4618      	mov	r0, r3
 8000c06:	f004 fd6b 	bl	80056e0 <HAL_RCC_OscConfig>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c10:	f000 fb0a 	bl	8001228 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c14:	230f      	movs	r3, #15
 8000c16:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c24:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c2a:	f107 0308 	add.w	r3, r7, #8
 8000c2e:	2101      	movs	r1, #1
 8000c30:	4618      	mov	r0, r3
 8000c32:	f005 f803 	bl	8005c3c <HAL_RCC_ClockConfig>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c3c:	f000 faf4 	bl	8001228 <Error_Handler>
  }
}
 8000c40:	bf00      	nop
 8000c42:	3750      	adds	r7, #80	; 0x50
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40007000 	.word	0x40007000

08000c50 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000c54:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <MX_CAN1_Init+0x64>)
 8000c56:	4a18      	ldr	r2, [pc, #96]	; (8000cb8 <MX_CAN1_Init+0x68>)
 8000c58:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000c5a:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <MX_CAN1_Init+0x64>)
 8000c5c:	2203      	movs	r2, #3
 8000c5e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000c60:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <MX_CAN1_Init+0x64>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <MX_CAN1_Init+0x64>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <MX_CAN1_Init+0x64>)
 8000c6e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000c72:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <MX_CAN1_Init+0x64>)
 8000c76:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000c7a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000c7c:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <MX_CAN1_Init+0x64>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_CAN1_Init+0x64>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000c88:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <MX_CAN1_Init+0x64>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_CAN1_Init+0x64>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000c94:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <MX_CAN1_Init+0x64>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <MX_CAN1_Init+0x64>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ca0:	4804      	ldr	r0, [pc, #16]	; (8000cb4 <MX_CAN1_Init+0x64>)
 8000ca2:	f001 f801 	bl	8001ca8 <HAL_CAN_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000cac:	f000 fabc 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000188 	.word	0x20000188
 8000cb8:	40006400 	.word	0x40006400

08000cbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cc0:	4b1b      	ldr	r3, [pc, #108]	; (8000d30 <MX_I2C1_Init+0x74>)
 8000cc2:	4a1c      	ldr	r2, [pc, #112]	; (8000d34 <MX_I2C1_Init+0x78>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 8000cc6:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <MX_I2C1_Init+0x74>)
 8000cc8:	4a1b      	ldr	r2, [pc, #108]	; (8000d38 <MX_I2C1_Init+0x7c>)
 8000cca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ccc:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <MX_I2C1_Init+0x74>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cd2:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <MX_I2C1_Init+0x74>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cd8:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <MX_I2C1_Init+0x74>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cde:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <MX_I2C1_Init+0x74>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ce4:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <MX_I2C1_Init+0x74>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cea:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <MX_I2C1_Init+0x74>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <MX_I2C1_Init+0x74>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cf6:	480e      	ldr	r0, [pc, #56]	; (8000d30 <MX_I2C1_Init+0x74>)
 8000cf8:	f002 fcbc 	bl	8003674 <HAL_I2C_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d02:	f000 fa91 	bl	8001228 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d06:	2100      	movs	r1, #0
 8000d08:	4809      	ldr	r0, [pc, #36]	; (8000d30 <MX_I2C1_Init+0x74>)
 8000d0a:	f003 f999 	bl	8004040 <HAL_I2CEx_ConfigAnalogFilter>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d14:	f000 fa88 	bl	8001228 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4805      	ldr	r0, [pc, #20]	; (8000d30 <MX_I2C1_Init+0x74>)
 8000d1c:	f003 f9db 	bl	80040d6 <HAL_I2CEx_ConfigDigitalFilter>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d26:	f000 fa7f 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	200001b0 	.word	0x200001b0
 8000d34:	40005400 	.word	0x40005400
 8000d38:	00506682 	.word	0x00506682

08000d3c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000d40:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <MX_SDMMC1_SD_Init+0x44>)
 8000d42:	4a10      	ldr	r2, [pc, #64]	; (8000d84 <MX_SDMMC1_SD_Init+0x48>)
 8000d44:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <MX_SDMMC1_SD_Init+0x44>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <MX_SDMMC1_SD_Init+0x44>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <MX_SDMMC1_SD_Init+0x44>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <MX_SDMMC1_SD_Init+0x44>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8000d5e:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <MX_SDMMC1_SD_Init+0x44>)
 8000d60:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d64:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <MX_SDMMC1_SD_Init+0x44>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
	if (HAL_SD_Init(&hsd1) != HAL_OK) {
 8000d6c:	4804      	ldr	r0, [pc, #16]	; (8000d80 <MX_SDMMC1_SD_Init+0x44>)
 8000d6e:	f005 fdb3 	bl	80068d8 <HAL_SD_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_SDMMC1_SD_Init+0x40>
		Error_Handler();
 8000d78:	f000 fa56 	bl	8001228 <Error_Handler>
	}
  /* USER CODE END SDMMC1_Init 2 */

}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000204 	.word	0x20000204
 8000d84:	40012c00 	.word	0x40012c00

08000d88 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d8c:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <MX_USART3_UART_Init+0x58>)
 8000d8e:	4a15      	ldr	r2, [pc, #84]	; (8000de4 <MX_USART3_UART_Init+0x5c>)
 8000d90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d92:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <MX_USART3_UART_Init+0x58>)
 8000d94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9a:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <MX_USART3_UART_Init+0x58>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <MX_USART3_UART_Init+0x58>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <MX_USART3_UART_Init+0x58>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <MX_USART3_UART_Init+0x58>)
 8000dae:	220c      	movs	r2, #12
 8000db0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db2:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <MX_USART3_UART_Init+0x58>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db8:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <MX_USART3_UART_Init+0x58>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dbe:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <MX_USART3_UART_Init+0x58>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <MX_USART3_UART_Init+0x58>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dca:	4805      	ldr	r0, [pc, #20]	; (8000de0 <MX_USART3_UART_Init+0x58>)
 8000dcc:	f006 feac 	bl	8007b28 <HAL_UART_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000dd6:	f000 fa27 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000348 	.word	0x20000348
 8000de4:	40004800 	.word	0x40004800

08000de8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <MX_DMA_Init+0x48>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a0f      	ldr	r2, [pc, #60]	; (8000e30 <MX_DMA_Init+0x48>)
 8000df4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b0d      	ldr	r3, [pc, #52]	; (8000e30 <MX_DMA_Init+0x48>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2100      	movs	r1, #0
 8000e0a:	203b      	movs	r0, #59	; 0x3b
 8000e0c:	f001 fe53 	bl	8002ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000e10:	203b      	movs	r0, #59	; 0x3b
 8000e12:	f001 fe6c 	bl	8002aee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2100      	movs	r1, #0
 8000e1a:	2045      	movs	r0, #69	; 0x45
 8000e1c:	f001 fe4b 	bl	8002ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000e20:	2045      	movs	r0, #69	; 0x45
 8000e22:	f001 fe64 	bl	8002aee <HAL_NVIC_EnableIRQ>

}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40023800 	.word	0x40023800

08000e34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08e      	sub	sp, #56	; 0x38
 8000e38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
 8000e48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4a:	4b74      	ldr	r3, [pc, #464]	; (800101c <MX_GPIO_Init+0x1e8>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a73      	ldr	r2, [pc, #460]	; (800101c <MX_GPIO_Init+0x1e8>)
 8000e50:	f043 0304 	orr.w	r3, r3, #4
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b71      	ldr	r3, [pc, #452]	; (800101c <MX_GPIO_Init+0x1e8>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0304 	and.w	r3, r3, #4
 8000e5e:	623b      	str	r3, [r7, #32]
 8000e60:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e62:	4b6e      	ldr	r3, [pc, #440]	; (800101c <MX_GPIO_Init+0x1e8>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a6d      	ldr	r2, [pc, #436]	; (800101c <MX_GPIO_Init+0x1e8>)
 8000e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b6b      	ldr	r3, [pc, #428]	; (800101c <MX_GPIO_Init+0x1e8>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e76:	61fb      	str	r3, [r7, #28]
 8000e78:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e7a:	4b68      	ldr	r3, [pc, #416]	; (800101c <MX_GPIO_Init+0x1e8>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a67      	ldr	r2, [pc, #412]	; (800101c <MX_GPIO_Init+0x1e8>)
 8000e80:	f043 0320 	orr.w	r3, r3, #32
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b65      	ldr	r3, [pc, #404]	; (800101c <MX_GPIO_Init+0x1e8>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0320 	and.w	r3, r3, #32
 8000e8e:	61bb      	str	r3, [r7, #24]
 8000e90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e92:	4b62      	ldr	r3, [pc, #392]	; (800101c <MX_GPIO_Init+0x1e8>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a61      	ldr	r2, [pc, #388]	; (800101c <MX_GPIO_Init+0x1e8>)
 8000e98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b5f      	ldr	r3, [pc, #380]	; (800101c <MX_GPIO_Init+0x1e8>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eaa:	4b5c      	ldr	r3, [pc, #368]	; (800101c <MX_GPIO_Init+0x1e8>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a5b      	ldr	r2, [pc, #364]	; (800101c <MX_GPIO_Init+0x1e8>)
 8000eb0:	f043 0310 	orr.w	r3, r3, #16
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b59      	ldr	r3, [pc, #356]	; (800101c <MX_GPIO_Init+0x1e8>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0310 	and.w	r3, r3, #16
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec2:	4b56      	ldr	r3, [pc, #344]	; (800101c <MX_GPIO_Init+0x1e8>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a55      	ldr	r2, [pc, #340]	; (800101c <MX_GPIO_Init+0x1e8>)
 8000ec8:	f043 0308 	orr.w	r3, r3, #8
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b53      	ldr	r3, [pc, #332]	; (800101c <MX_GPIO_Init+0x1e8>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0308 	and.w	r3, r3, #8
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	4b50      	ldr	r3, [pc, #320]	; (800101c <MX_GPIO_Init+0x1e8>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a4f      	ldr	r2, [pc, #316]	; (800101c <MX_GPIO_Init+0x1e8>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b4d      	ldr	r3, [pc, #308]	; (800101c <MX_GPIO_Init+0x1e8>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef2:	4b4a      	ldr	r3, [pc, #296]	; (800101c <MX_GPIO_Init+0x1e8>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a49      	ldr	r2, [pc, #292]	; (800101c <MX_GPIO_Init+0x1e8>)
 8000ef8:	f043 0302 	orr.w	r3, r3, #2
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b47      	ldr	r3, [pc, #284]	; (800101c <MX_GPIO_Init+0x1e8>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PokManualReset_GPIO_Port, PokManualReset_Pin, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f10:	4843      	ldr	r0, [pc, #268]	; (8001020 <MX_GPIO_Init+0x1ec>)
 8000f12:	f002 fb71 	bl	80035f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, StatusSignal_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2141      	movs	r1, #65	; 0x41
 8000f1a:	4842      	ldr	r0, [pc, #264]	; (8001024 <MX_GPIO_Init+0x1f0>)
 8000f1c:	f002 fb6c 	bl	80035f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PokRESET_Pin */
  GPIO_InitStruct.Pin = PokRESET_Pin;
 8000f20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f26:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000f2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PokRESET_GPIO_Port, &GPIO_InitStruct);
 8000f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f34:	4619      	mov	r1, r3
 8000f36:	483a      	ldr	r0, [pc, #232]	; (8001020 <MX_GPIO_Init+0x1ec>)
 8000f38:	f002 f99a 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : PokManualReset_Pin */
  GPIO_InitStruct.Pin = PokManualReset_Pin;
 8000f3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f42:	2301      	movs	r3, #1
 8000f44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PokManualReset_GPIO_Port, &GPIO_InitStruct);
 8000f4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f52:	4619      	mov	r1, r3
 8000f54:	4832      	ldr	r0, [pc, #200]	; (8001020 <MX_GPIO_Init+0x1ec>)
 8000f56:	f002 f98b 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pins : StatusSignal_Pin USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = StatusSignal_Pin|USB_PowerSwitchOn_Pin;
 8000f5a:	2341      	movs	r3, #65	; 0x41
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6e:	4619      	mov	r1, r3
 8000f70:	482c      	ldr	r0, [pc, #176]	; (8001024 <MX_GPIO_Init+0x1f0>)
 8000f72:	f002 f97d 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : PowerSwitch_Pin */
  GPIO_InitStruct.Pin = PowerSwitch_Pin;
 8000f76:	2302      	movs	r3, #2
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f7a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PowerSwitch_GPIO_Port, &GPIO_InitStruct);
 8000f84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4826      	ldr	r0, [pc, #152]	; (8001024 <MX_GPIO_Init+0x1f0>)
 8000f8c:	f002 f970 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000fa2:	2306      	movs	r3, #6
 8000fa4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000faa:	4619      	mov	r1, r3
 8000fac:	481e      	ldr	r0, [pc, #120]	; (8001028 <MX_GPIO_Init+0x1f4>)
 8000fae:	f002 f95f 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CD_Pin USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = SD_CD_Pin|USB_OverCurrent_Pin;
 8000fb2:	2384      	movs	r3, #132	; 0x84
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4817      	ldr	r0, [pc, #92]	; (8001024 <MX_GPIO_Init+0x1f0>)
 8000fc6:	f002 f953 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : NewLogBtn_Pin */
  GPIO_InitStruct.Pin = NewLogBtn_Pin;
 8000fca:	2308      	movs	r3, #8
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NewLogBtn_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4811      	ldr	r0, [pc, #68]	; (8001024 <MX_GPIO_Init+0x1f0>)
 8000fe0:	f002 f946 	bl	8003270 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2007      	movs	r0, #7
 8000fea:	f001 fd64 	bl	8002ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000fee:	2007      	movs	r0, #7
 8000ff0:	f001 fd7d 	bl	8002aee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	2009      	movs	r0, #9
 8000ffa:	f001 fd5c 	bl	8002ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000ffe:	2009      	movs	r0, #9
 8001000:	f001 fd75 	bl	8002aee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001004:	2200      	movs	r2, #0
 8001006:	2100      	movs	r1, #0
 8001008:	2028      	movs	r0, #40	; 0x28
 800100a:	f001 fd54 	bl	8002ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800100e:	2028      	movs	r0, #40	; 0x28
 8001010:	f001 fd6d 	bl	8002aee <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001014:	bf00      	nop
 8001016:	3738      	adds	r7, #56	; 0x38
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40023800 	.word	0x40023800
 8001020:	40021400 	.word	0x40021400
 8001024:	40021800 	.word	0x40021800
 8001028:	40021000 	.word	0x40021000

0800102c <Append_uint32_t_to_uint8_t_pointer_and_move_pointer>:

/* USER CODE BEGIN 4 */
void Append_uint32_t_to_uint8_t_pointer_and_move_pointer(uint32_t data, uint8_t **arr_ptr) {
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
	*((*arr_ptr)++) = (data >> 24) & 0xFF;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	0e18      	lsrs	r0, r3, #24
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	1c59      	adds	r1, r3, #1
 8001040:	683a      	ldr	r2, [r7, #0]
 8001042:	6011      	str	r1, [r2, #0]
 8001044:	b2c2      	uxtb	r2, r0
 8001046:	701a      	strb	r2, [r3, #0]
	*((*arr_ptr)++) = (data >> 16) & 0xFF;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	0c18      	lsrs	r0, r3, #16
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	1c59      	adds	r1, r3, #1
 8001052:	683a      	ldr	r2, [r7, #0]
 8001054:	6011      	str	r1, [r2, #0]
 8001056:	b2c2      	uxtb	r2, r0
 8001058:	701a      	strb	r2, [r3, #0]
	*((*arr_ptr)++) = (data >> 8) & 0xFF;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	0a18      	lsrs	r0, r3, #8
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	1c59      	adds	r1, r3, #1
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	6011      	str	r1, [r2, #0]
 8001068:	b2c2      	uxtb	r2, r0
 800106a:	701a      	strb	r2, [r3, #0]
	*((*arr_ptr)++) = (data) & 0xFF;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	1c59      	adds	r1, r3, #1
 8001072:	683a      	ldr	r2, [r7, #0]
 8001074:	6011      	str	r1, [r2, #0]
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	701a      	strb	r2, [r3, #0]
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <Get_and_Append_CAN_Message_to_Buffer>:

void Get_and_Append_CAN_Message_to_Buffer() {
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	; 0x28
 800108c:	af00      	add	r7, sp, #0
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rcvd_msg[SIZE_OF_CAN_RCVD_MSG];

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_msg)
 800108e:	463b      	mov	r3, r7
 8001090:	f107 0208 	add.w	r2, r7, #8
 8001094:	2100      	movs	r1, #0
 8001096:	481b      	ldr	r0, [pc, #108]	; (8001104 <Get_and_Append_CAN_Message_to_Buffer+0x7c>)
 8001098:	f001 f87b 	bl	8002192 <HAL_CAN_GetRxMessage>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d004      	beq.n	80010ac <Get_and_Append_CAN_Message_to_Buffer+0x24>
			!= HAL_OK){
#ifdef VERBOSE_DEBUGGING
		printf("Failed to get CAN message\r\n");
 80010a2:	4819      	ldr	r0, [pc, #100]	; (8001108 <Get_and_Append_CAN_Message_to_Buffer+0x80>)
 80010a4:	f00f fe06 	bl	8010cb4 <puts>
#endif
		Error_Handler();
 80010a8:	f000 f8be 	bl	8001228 <Error_Handler>
	}

	// timestamp
	Append_uint32_t_to_uint8_t_pointer_and_move_pointer(HAL_GetTick(), &curr_data_buffer_loc);
 80010ac:	f000 fdcc 	bl	8001c48 <HAL_GetTick>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4916      	ldr	r1, [pc, #88]	; (800110c <Get_and_Append_CAN_Message_to_Buffer+0x84>)
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ffb9 	bl	800102c <Append_uint32_t_to_uint8_t_pointer_and_move_pointer>

	// identifier
	Append_uint32_t_to_uint8_t_pointer_and_move_pointer(RxHeader.ExtId, &curr_data_buffer_loc);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4913      	ldr	r1, [pc, #76]	; (800110c <Get_and_Append_CAN_Message_to_Buffer+0x84>)
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff ffb4 	bl	800102c <Append_uint32_t_to_uint8_t_pointer_and_move_pointer>


	// data
	for (int msg_byte_idx = 0; msg_byte_idx < SIZE_OF_CAN_RCVD_MSG; msg_byte_idx++) {
 80010c4:	2300      	movs	r3, #0
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
 80010c8:	e00c      	b.n	80010e4 <Get_and_Append_CAN_Message_to_Buffer+0x5c>
		*(curr_data_buffer_loc++) = rcvd_msg[msg_byte_idx];
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <Get_and_Append_CAN_Message_to_Buffer+0x84>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	1c5a      	adds	r2, r3, #1
 80010d0:	490e      	ldr	r1, [pc, #56]	; (800110c <Get_and_Append_CAN_Message_to_Buffer+0x84>)
 80010d2:	600a      	str	r2, [r1, #0]
 80010d4:	4639      	mov	r1, r7
 80010d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010d8:	440a      	add	r2, r1
 80010da:	7812      	ldrb	r2, [r2, #0]
 80010dc:	701a      	strb	r2, [r3, #0]
	for (int msg_byte_idx = 0; msg_byte_idx < SIZE_OF_CAN_RCVD_MSG; msg_byte_idx++) {
 80010de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e0:	3301      	adds	r3, #1
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
 80010e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e6:	2b07      	cmp	r3, #7
 80010e8:	ddef      	ble.n	80010ca <Get_and_Append_CAN_Message_to_Buffer+0x42>
	}

	buffer_fill_level[current_buffer]++;
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <Get_and_Append_CAN_Message_to_Buffer+0x88>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	4a09      	ldr	r2, [pc, #36]	; (8001114 <Get_and_Append_CAN_Message_to_Buffer+0x8c>)
 80010f0:	5cd2      	ldrb	r2, [r2, r3]
 80010f2:	3201      	adds	r2, #1
 80010f4:	b2d1      	uxtb	r1, r2
 80010f6:	4a07      	ldr	r2, [pc, #28]	; (8001114 <Get_and_Append_CAN_Message_to_Buffer+0x8c>)
 80010f8:	54d1      	strb	r1, [r2, r3]
}
 80010fa:	bf00      	nop
 80010fc:	3728      	adds	r7, #40	; 0x28
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000188 	.word	0x20000188
 8001108:	08011db0 	.word	0x08011db0
 800110c:	2000116c 	.word	0x2000116c
 8001110:	20001172 	.word	0x20001172
 8001114:	20001170 	.word	0x20001170

08001118 <CAN_Filter_Config>:

HAL_StatusTypeDef CAN_Filter_Config(void) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b08c      	sub	sp, #48	; 0x30
 800111c:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filter;

	uint32_t filter_mask = 0x00000000;
 800111e:	2300      	movs	r3, #0
 8001120:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t filter_id = 0x000A0000;
 8001122:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 8001126:	62bb      	str	r3, [r7, #40]	; 0x28

	filter.FilterIdHigh = ((filter_id << 5) | (filter_id >> (32 - 5))) & 0xFFFF; // STID[10:0] & EXTID[17:13]
 8001128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800112a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800112e:	b29b      	uxth	r3, r3
 8001130:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = (filter_id >> (11 - 3)) & 0xFFF8; // EXID[12:5] & 3 Reserved bits
 8001132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001134:	0a1a      	lsrs	r2, r3, #8
 8001136:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800113a:	4013      	ands	r3, r2
 800113c:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = ((filter_mask << 5) | (filter_mask >> (32 - 5)))
 800113e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001140:	ea4f 63f3 	mov.w	r3, r3, ror #27
			& 0xFFFF;
 8001144:	b29b      	uxth	r3, r3
	filter.FilterMaskIdHigh = ((filter_mask << 5) | (filter_mask >> (32 - 5)))
 8001146:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = (filter_mask >> (11 - 3)) & 0xFFF8;
 8001148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800114a:	0a1a      	lsrs	r2, r3, #8
 800114c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001150:	4013      	ands	r3, r2
 8001152:	60fb      	str	r3, [r7, #12]

	filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001154:	2300      	movs	r3, #0
 8001156:	613b      	str	r3, [r7, #16]
	filter.FilterBank = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 800115c:	2300      	movs	r3, #0
 800115e:	61bb      	str	r3, [r7, #24]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001160:	2301      	movs	r3, #1
 8001162:	61fb      	str	r3, [r7, #28]
	filter.FilterActivation = ENABLE;
 8001164:	2301      	movs	r3, #1
 8001166:	623b      	str	r3, [r7, #32]

	return HAL_CAN_ConfigFilter(&hcan1, &filter);
 8001168:	463b      	mov	r3, r7
 800116a:	4619      	mov	r1, r3
 800116c:	4803      	ldr	r0, [pc, #12]	; (800117c <CAN_Filter_Config+0x64>)
 800116e:	f000 fe97 	bl	8001ea0 <HAL_CAN_ConfigFilter>
 8001172:	4603      	mov	r3, r0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3730      	adds	r7, #48	; 0x30
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000188 	.word	0x20000188

08001180 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	if (buffer_fill_level[0] == CAN_MESSAGES_TO_BUFFER
 8001188:	4b18      	ldr	r3, [pc, #96]	; (80011ec <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b64      	cmp	r3, #100	; 0x64
 800118e:	d108      	bne.n	80011a2 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
			&& buffer_fill_level[1] == CAN_MESSAGES_TO_BUFFER)
 8001190:	4b16      	ldr	r3, [pc, #88]	; (80011ec <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8001192:	785b      	ldrb	r3, [r3, #1]
 8001194:	2b64      	cmp	r3, #100	; 0x64
 8001196:	d104      	bne.n	80011a2 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
#ifdef VERBOSE_DEBUGGING
		printf("Buffers are full\r\n");
 8001198:	4815      	ldr	r0, [pc, #84]	; (80011f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 800119a:	f00f fd8b 	bl	8010cb4 <puts>
#endif
		Error_Handler();
 800119e:	f000 f843 	bl	8001228 <Error_Handler>
	}

	Get_and_Append_CAN_Message_to_Buffer();
 80011a2:	f7ff ff71 	bl	8001088 <Get_and_Append_CAN_Message_to_Buffer>

	if (buffer_fill_level[current_buffer] == CAN_MESSAGES_TO_BUFFER) {
 80011a6:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 80011ae:	5c9b      	ldrb	r3, [r3, r2]
 80011b0:	2b64      	cmp	r3, #100	; 0x64
 80011b2:	d117      	bne.n	80011e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>
		is_buffer_filled = 1;
 80011b4:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	701a      	strb	r2, [r3, #0]
		current_buffer = !current_buffer;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	bf0c      	ite	eq
 80011c2:	2301      	moveq	r3, #1
 80011c4:	2300      	movne	r3, #0
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80011cc:	701a      	strb	r2, [r3, #0]
		curr_data_buffer_loc = data_buffer[current_buffer];
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	461a      	mov	r2, r3
 80011d4:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 80011d8:	fb02 f303 	mul.w	r3, r2, r3
 80011dc:	4a07      	ldr	r2, [pc, #28]	; (80011fc <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80011de:	4413      	add	r3, r2
 80011e0:	4a07      	ldr	r2, [pc, #28]	; (8001200 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80011e2:	6013      	str	r3, [r2, #0]
	}
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20001170 	.word	0x20001170
 80011f0:	08011ea8 	.word	0x08011ea8
 80011f4:	20001172 	.word	0x20001172
 80011f8:	20001173 	.word	0x20001173
 80011fc:	200004ec 	.word	0x200004ec
 8001200:	2000116c 	.word	0x2000116c

08001204 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 800120c:	1d39      	adds	r1, r7, #4
 800120e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001212:	2201      	movs	r2, #1
 8001214:	4803      	ldr	r0, [pc, #12]	; (8001224 <__io_putchar+0x20>)
 8001216:	f006 fcd5 	bl	8007bc4 <HAL_UART_Transmit>

	return ch;
 800121a:	687b      	ldr	r3, [r7, #4]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000348 	.word	0x20000348

08001228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800122c:	b672      	cpsid	i
}
 800122e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
#ifdef VERBOSE_DEBUGGING
	printf("\r\nError Handler Reached\r\n");
 8001230:	4804      	ldr	r0, [pc, #16]	; (8001244 <Error_Handler+0x1c>)
 8001232:	f00f fd3f 	bl	8010cb4 <puts>
#endif
	HAL_GPIO_WritePin(StatusSignal_GPIO_Port, StatusSignal_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	2101      	movs	r1, #1
 800123a:	4803      	ldr	r0, [pc, #12]	; (8001248 <Error_Handler+0x20>)
 800123c:	f002 f9dc 	bl	80035f8 <HAL_GPIO_WritePin>

	while (1) {
 8001240:	e7fe      	b.n	8001240 <Error_Handler+0x18>
 8001242:	bf00      	nop
 8001244:	08011ebc 	.word	0x08011ebc
 8001248:	40021800 	.word	0x40021800

0800124c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001252:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <HAL_MspInit+0x44>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	4a0e      	ldr	r2, [pc, #56]	; (8001290 <HAL_MspInit+0x44>)
 8001258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125c:	6413      	str	r3, [r2, #64]	; 0x40
 800125e:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <HAL_MspInit+0x44>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <HAL_MspInit+0x44>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	4a08      	ldr	r2, [pc, #32]	; (8001290 <HAL_MspInit+0x44>)
 8001270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001274:	6453      	str	r3, [r2, #68]	; 0x44
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <HAL_MspInit+0x44>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127e:	603b      	str	r3, [r7, #0]
 8001280:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	40023800 	.word	0x40023800

08001294 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08a      	sub	sp, #40	; 0x28
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a1b      	ldr	r2, [pc, #108]	; (8001320 <HAL_CAN_MspInit+0x8c>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d12f      	bne.n	8001316 <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80012b6:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <HAL_CAN_MspInit+0x90>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	4a1a      	ldr	r2, [pc, #104]	; (8001324 <HAL_CAN_MspInit+0x90>)
 80012bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012c0:	6413      	str	r3, [r2, #64]	; 0x40
 80012c2:	4b18      	ldr	r3, [pc, #96]	; (8001324 <HAL_CAN_MspInit+0x90>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ce:	4b15      	ldr	r3, [pc, #84]	; (8001324 <HAL_CAN_MspInit+0x90>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a14      	ldr	r2, [pc, #80]	; (8001324 <HAL_CAN_MspInit+0x90>)
 80012d4:	f043 0308 	orr.w	r3, r3, #8
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b12      	ldr	r3, [pc, #72]	; (8001324 <HAL_CAN_MspInit+0x90>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012e6:	2303      	movs	r3, #3
 80012e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f2:	2303      	movs	r3, #3
 80012f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80012f6:	2309      	movs	r3, #9
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	4619      	mov	r1, r3
 8001300:	4809      	ldr	r0, [pc, #36]	; (8001328 <HAL_CAN_MspInit+0x94>)
 8001302:	f001 ffb5 	bl	8003270 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	2100      	movs	r1, #0
 800130a:	2014      	movs	r0, #20
 800130c:	f001 fbd3 	bl	8002ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001310:	2014      	movs	r0, #20
 8001312:	f001 fbec 	bl	8002aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001316:	bf00      	nop
 8001318:	3728      	adds	r7, #40	; 0x28
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40006400 	.word	0x40006400
 8001324:	40023800 	.word	0x40023800
 8001328:	40020c00 	.word	0x40020c00

0800132c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b0ae      	sub	sp, #184	; 0xb8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	2290      	movs	r2, #144	; 0x90
 800134a:	2100      	movs	r1, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f00f fcb9 	bl	8010cc4 <memset>
  if(hi2c->Instance==I2C1)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a22      	ldr	r2, [pc, #136]	; (80013e0 <HAL_I2C_MspInit+0xb4>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d13c      	bne.n	80013d6 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800135c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001360:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001362:	2300      	movs	r3, #0
 8001364:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4618      	mov	r0, r3
 800136c:	f004 fe8c 	bl	8006088 <HAL_RCCEx_PeriphCLKConfig>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001376:	f7ff ff57 	bl	8001228 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137a:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <HAL_I2C_MspInit+0xb8>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a19      	ldr	r2, [pc, #100]	; (80013e4 <HAL_I2C_MspInit+0xb8>)
 8001380:	f043 0302 	orr.w	r3, r3, #2
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <HAL_I2C_MspInit+0xb8>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001392:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001396:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800139a:	2312      	movs	r3, #18
 800139c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013ac:	2304      	movs	r3, #4
 80013ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013b6:	4619      	mov	r1, r3
 80013b8:	480b      	ldr	r0, [pc, #44]	; (80013e8 <HAL_I2C_MspInit+0xbc>)
 80013ba:	f001 ff59 	bl	8003270 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <HAL_I2C_MspInit+0xb8>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	4a08      	ldr	r2, [pc, #32]	; (80013e4 <HAL_I2C_MspInit+0xb8>)
 80013c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013c8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_I2C_MspInit+0xb8>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013d6:	bf00      	nop
 80013d8:	37b8      	adds	r7, #184	; 0xb8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40005400 	.word	0x40005400
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40020400 	.word	0x40020400

080013ec <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b0ae      	sub	sp, #184	; 0xb8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2290      	movs	r2, #144	; 0x90
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f00f fc59 	bl	8010cc4 <memset>
  if(hsd->Instance==SDMMC1)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a73      	ldr	r2, [pc, #460]	; (80015e4 <HAL_SD_MspInit+0x1f8>)
 8001418:	4293      	cmp	r3, r2
 800141a:	f040 80de 	bne.w	80015da <HAL_SD_MspInit+0x1ee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 800141e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001422:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 8001424:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001428:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	4618      	mov	r0, r3
 8001432:	f004 fe29 	bl	8006088 <HAL_RCCEx_PeriphCLKConfig>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 800143c:	f7ff fef4 	bl	8001228 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001440:	4b69      	ldr	r3, [pc, #420]	; (80015e8 <HAL_SD_MspInit+0x1fc>)
 8001442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001444:	4a68      	ldr	r2, [pc, #416]	; (80015e8 <HAL_SD_MspInit+0x1fc>)
 8001446:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800144a:	6453      	str	r3, [r2, #68]	; 0x44
 800144c:	4b66      	ldr	r3, [pc, #408]	; (80015e8 <HAL_SD_MspInit+0x1fc>)
 800144e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001454:	613b      	str	r3, [r7, #16]
 8001456:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001458:	4b63      	ldr	r3, [pc, #396]	; (80015e8 <HAL_SD_MspInit+0x1fc>)
 800145a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145c:	4a62      	ldr	r2, [pc, #392]	; (80015e8 <HAL_SD_MspInit+0x1fc>)
 800145e:	f043 0304 	orr.w	r3, r3, #4
 8001462:	6313      	str	r3, [r2, #48]	; 0x30
 8001464:	4b60      	ldr	r3, [pc, #384]	; (80015e8 <HAL_SD_MspInit+0x1fc>)
 8001466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001470:	4b5d      	ldr	r3, [pc, #372]	; (80015e8 <HAL_SD_MspInit+0x1fc>)
 8001472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001474:	4a5c      	ldr	r2, [pc, #368]	; (80015e8 <HAL_SD_MspInit+0x1fc>)
 8001476:	f043 0308 	orr.w	r3, r3, #8
 800147a:	6313      	str	r3, [r2, #48]	; 0x30
 800147c:	4b5a      	ldr	r3, [pc, #360]	; (80015e8 <HAL_SD_MspInit+0x1fc>)
 800147e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001480:	f003 0308 	and.w	r3, r3, #8
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8001488:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800148c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001490:	2302      	movs	r3, #2
 8001492:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149c:	2303      	movs	r3, #3
 800149e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80014a2:	230c      	movs	r3, #12
 80014a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014ac:	4619      	mov	r1, r3
 80014ae:	484f      	ldr	r0, [pc, #316]	; (80015ec <HAL_SD_MspInit+0x200>)
 80014b0:	f001 fede 	bl	8003270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014b4:	2304      	movs	r3, #4
 80014b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c6:	2303      	movs	r3, #3
 80014c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80014cc:	230c      	movs	r3, #12
 80014ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014d2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014d6:	4619      	mov	r1, r3
 80014d8:	4845      	ldr	r0, [pc, #276]	; (80015f0 <HAL_SD_MspInit+0x204>)
 80014da:	f001 fec9 	bl	8003270 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 80014de:	4b45      	ldr	r3, [pc, #276]	; (80015f4 <HAL_SD_MspInit+0x208>)
 80014e0:	4a45      	ldr	r2, [pc, #276]	; (80015f8 <HAL_SD_MspInit+0x20c>)
 80014e2:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80014e4:	4b43      	ldr	r3, [pc, #268]	; (80015f4 <HAL_SD_MspInit+0x208>)
 80014e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014ea:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014ec:	4b41      	ldr	r3, [pc, #260]	; (80015f4 <HAL_SD_MspInit+0x208>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014f2:	4b40      	ldr	r3, [pc, #256]	; (80015f4 <HAL_SD_MspInit+0x208>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014f8:	4b3e      	ldr	r3, [pc, #248]	; (80015f4 <HAL_SD_MspInit+0x208>)
 80014fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014fe:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001500:	4b3c      	ldr	r3, [pc, #240]	; (80015f4 <HAL_SD_MspInit+0x208>)
 8001502:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001506:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001508:	4b3a      	ldr	r3, [pc, #232]	; (80015f4 <HAL_SD_MspInit+0x208>)
 800150a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800150e:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001510:	4b38      	ldr	r3, [pc, #224]	; (80015f4 <HAL_SD_MspInit+0x208>)
 8001512:	2220      	movs	r2, #32
 8001514:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001516:	4b37      	ldr	r3, [pc, #220]	; (80015f4 <HAL_SD_MspInit+0x208>)
 8001518:	2200      	movs	r2, #0
 800151a:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800151c:	4b35      	ldr	r3, [pc, #212]	; (80015f4 <HAL_SD_MspInit+0x208>)
 800151e:	2204      	movs	r2, #4
 8001520:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001522:	4b34      	ldr	r3, [pc, #208]	; (80015f4 <HAL_SD_MspInit+0x208>)
 8001524:	2203      	movs	r2, #3
 8001526:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001528:	4b32      	ldr	r3, [pc, #200]	; (80015f4 <HAL_SD_MspInit+0x208>)
 800152a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800152e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001530:	4b30      	ldr	r3, [pc, #192]	; (80015f4 <HAL_SD_MspInit+0x208>)
 8001532:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001536:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8001538:	482e      	ldr	r0, [pc, #184]	; (80015f4 <HAL_SD_MspInit+0x208>)
 800153a:	f001 faf3 	bl	8002b24 <HAL_DMA_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <HAL_SD_MspInit+0x15c>
    {
      Error_Handler();
 8001544:	f7ff fe70 	bl	8001228 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a2a      	ldr	r2, [pc, #168]	; (80015f4 <HAL_SD_MspInit+0x208>)
 800154c:	641a      	str	r2, [r3, #64]	; 0x40
 800154e:	4a29      	ldr	r2, [pc, #164]	; (80015f4 <HAL_SD_MspInit+0x208>)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8001554:	4b29      	ldr	r3, [pc, #164]	; (80015fc <HAL_SD_MspInit+0x210>)
 8001556:	4a2a      	ldr	r2, [pc, #168]	; (8001600 <HAL_SD_MspInit+0x214>)
 8001558:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800155a:	4b28      	ldr	r3, [pc, #160]	; (80015fc <HAL_SD_MspInit+0x210>)
 800155c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001560:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001562:	4b26      	ldr	r3, [pc, #152]	; (80015fc <HAL_SD_MspInit+0x210>)
 8001564:	2240      	movs	r2, #64	; 0x40
 8001566:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001568:	4b24      	ldr	r3, [pc, #144]	; (80015fc <HAL_SD_MspInit+0x210>)
 800156a:	2200      	movs	r2, #0
 800156c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800156e:	4b23      	ldr	r3, [pc, #140]	; (80015fc <HAL_SD_MspInit+0x210>)
 8001570:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001574:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001576:	4b21      	ldr	r3, [pc, #132]	; (80015fc <HAL_SD_MspInit+0x210>)
 8001578:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800157c:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800157e:	4b1f      	ldr	r3, [pc, #124]	; (80015fc <HAL_SD_MspInit+0x210>)
 8001580:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001584:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8001586:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <HAL_SD_MspInit+0x210>)
 8001588:	2220      	movs	r2, #32
 800158a:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800158c:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <HAL_SD_MspInit+0x210>)
 800158e:	2200      	movs	r2, #0
 8001590:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001592:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <HAL_SD_MspInit+0x210>)
 8001594:	2204      	movs	r2, #4
 8001596:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001598:	4b18      	ldr	r3, [pc, #96]	; (80015fc <HAL_SD_MspInit+0x210>)
 800159a:	2203      	movs	r2, #3
 800159c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800159e:	4b17      	ldr	r3, [pc, #92]	; (80015fc <HAL_SD_MspInit+0x210>)
 80015a0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80015a4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <HAL_SD_MspInit+0x210>)
 80015a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80015ac:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80015ae:	4813      	ldr	r0, [pc, #76]	; (80015fc <HAL_SD_MspInit+0x210>)
 80015b0:	f001 fab8 	bl	8002b24 <HAL_DMA_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_SD_MspInit+0x1d2>
    {
      Error_Handler();
 80015ba:	f7ff fe35 	bl	8001228 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a0e      	ldr	r2, [pc, #56]	; (80015fc <HAL_SD_MspInit+0x210>)
 80015c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80015c4:	4a0d      	ldr	r2, [pc, #52]	; (80015fc <HAL_SD_MspInit+0x210>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2100      	movs	r1, #0
 80015ce:	2031      	movs	r0, #49	; 0x31
 80015d0:	f001 fa71 	bl	8002ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80015d4:	2031      	movs	r0, #49	; 0x31
 80015d6:	f001 fa8a 	bl	8002aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80015da:	bf00      	nop
 80015dc:	37b8      	adds	r7, #184	; 0xb8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40012c00 	.word	0x40012c00
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40020800 	.word	0x40020800
 80015f0:	40020c00 	.word	0x40020c00
 80015f4:	20000288 	.word	0x20000288
 80015f8:	40026458 	.word	0x40026458
 80015fc:	200002e8 	.word	0x200002e8
 8001600:	400264a0 	.word	0x400264a0

08001604 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b0ae      	sub	sp, #184	; 0xb8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	2290      	movs	r2, #144	; 0x90
 8001622:	2100      	movs	r1, #0
 8001624:	4618      	mov	r0, r3
 8001626:	f00f fb4d 	bl	8010cc4 <memset>
  if(huart->Instance==USART3)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a22      	ldr	r2, [pc, #136]	; (80016b8 <HAL_UART_MspInit+0xb4>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d13c      	bne.n	80016ae <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001634:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001638:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800163a:	2300      	movs	r3, #0
 800163c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	4618      	mov	r0, r3
 8001644:	f004 fd20 	bl	8006088 <HAL_RCCEx_PeriphCLKConfig>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800164e:	f7ff fdeb 	bl	8001228 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001652:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <HAL_UART_MspInit+0xb8>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	4a19      	ldr	r2, [pc, #100]	; (80016bc <HAL_UART_MspInit+0xb8>)
 8001658:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800165c:	6413      	str	r3, [r2, #64]	; 0x40
 800165e:	4b17      	ldr	r3, [pc, #92]	; (80016bc <HAL_UART_MspInit+0xb8>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800166a:	4b14      	ldr	r3, [pc, #80]	; (80016bc <HAL_UART_MspInit+0xb8>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a13      	ldr	r2, [pc, #76]	; (80016bc <HAL_UART_MspInit+0xb8>)
 8001670:	f043 0308 	orr.w	r3, r3, #8
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <HAL_UART_MspInit+0xb8>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0308 	and.w	r3, r3, #8
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001682:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001686:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001696:	2303      	movs	r3, #3
 8001698:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800169c:	2307      	movs	r3, #7
 800169e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016a2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016a6:	4619      	mov	r1, r3
 80016a8:	4805      	ldr	r0, [pc, #20]	; (80016c0 <HAL_UART_MspInit+0xbc>)
 80016aa:	f001 fde1 	bl	8003270 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016ae:	bf00      	nop
 80016b0:	37b8      	adds	r7, #184	; 0xb8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40004800 	.word	0x40004800
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020c00 	.word	0x40020c00

080016c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <NMI_Handler+0x4>

080016ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ce:	e7fe      	b.n	80016ce <HardFault_Handler+0x4>

080016d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <MemManage_Handler+0x4>

080016d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016da:	e7fe      	b.n	80016da <BusFault_Handler+0x4>

080016dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <UsageFault_Handler+0x4>

080016e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001710:	f000 fa86 	bl	8001c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}

08001718 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	POWER_STATE = HAL_GPIO_ReadPin(PowerSwitch_GPIO_Port, PowerSwitch_Pin);
 800171c:	2102      	movs	r1, #2
 800171e:	4806      	ldr	r0, [pc, #24]	; (8001738 <EXTI1_IRQHandler+0x20>)
 8001720:	f001 ff52 	bl	80035c8 <HAL_GPIO_ReadPin>
 8001724:	4603      	mov	r3, r0
 8001726:	461a      	mov	r2, r3
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <EXTI1_IRQHandler+0x24>)
 800172a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PowerSwitch_Pin);
 800172c:	2002      	movs	r0, #2
 800172e:	f001 ff7d 	bl	800362c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40021800 	.word	0x40021800
 800173c:	200004e8 	.word	0x200004e8

08001740 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	NEW_LOG_FLAG = 1;
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <EXTI3_IRQHandler+0x14>)
 8001746:	2201      	movs	r2, #1
 8001748:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NewLogBtn_Pin);
 800174a:	2008      	movs	r0, #8
 800174c:	f001 ff6e 	bl	800362c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	200004e9 	.word	0x200004e9

08001758 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <CAN1_RX0_IRQHandler+0x10>)
 800175e:	f000 fe9f 	bl	80024a0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000188 	.word	0x20000188

0800176c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if (POWER_STATE == 0) {
 8001770:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <EXTI15_10_IRQHandler+0x40>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d112      	bne.n	800179e <EXTI15_10_IRQHandler+0x32>
		if (HAL_GPIO_ReadPin(PokRESET_GPIO_Port, PokRESET_Pin) == GPIO_PIN_SET) {
 8001778:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800177c:	480c      	ldr	r0, [pc, #48]	; (80017b0 <EXTI15_10_IRQHandler+0x44>)
 800177e:	f001 ff23 	bl	80035c8 <HAL_GPIO_ReadPin>
 8001782:	4603      	mov	r3, r0
 8001784:	2b01      	cmp	r3, #1
 8001786:	d105      	bne.n	8001794 <EXTI15_10_IRQHandler+0x28>
			HAL_GPIO_WritePin(StatusSignal_GPIO_Port, StatusSignal_Pin, GPIO_PIN_SET);
 8001788:	2201      	movs	r2, #1
 800178a:	2101      	movs	r1, #1
 800178c:	4809      	ldr	r0, [pc, #36]	; (80017b4 <EXTI15_10_IRQHandler+0x48>)
 800178e:	f001 ff33 	bl	80035f8 <HAL_GPIO_WritePin>
 8001792:	e004      	b.n	800179e <EXTI15_10_IRQHandler+0x32>
		}
		else {
			HAL_GPIO_WritePin(StatusSignal_GPIO_Port, StatusSignal_Pin, GPIO_PIN_RESET);
 8001794:	2200      	movs	r2, #0
 8001796:	2101      	movs	r1, #1
 8001798:	4806      	ldr	r0, [pc, #24]	; (80017b4 <EXTI15_10_IRQHandler+0x48>)
 800179a:	f001 ff2d 	bl	80035f8 <HAL_GPIO_WritePin>
		}
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PokRESET_Pin);
 800179e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80017a2:	f001 ff43 	bl	800362c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200004e8 	.word	0x200004e8
 80017b0:	40021400 	.word	0x40021400
 80017b4:	40021800 	.word	0x40021800

080017b8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80017bc:	4802      	ldr	r0, [pc, #8]	; (80017c8 <SDMMC1_IRQHandler+0x10>)
 80017be:	f005 fb0b 	bl	8006dd8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000204 	.word	0x20000204

080017cc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 80017d0:	4802      	ldr	r0, [pc, #8]	; (80017dc <DMA2_Stream3_IRQHandler+0x10>)
 80017d2:	f001 fad7 	bl	8002d84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000288 	.word	0x20000288

080017e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80017e4:	4802      	ldr	r0, [pc, #8]	; (80017f0 <OTG_FS_IRQHandler+0x10>)
 80017e6:	f002 fe08 	bl	80043fa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20002d14 	.word	0x20002d14

080017f4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 80017f8:	4802      	ldr	r0, [pc, #8]	; (8001804 <DMA2_Stream6_IRQHandler+0x10>)
 80017fa:	f001 fac3 	bl	8002d84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200002e8 	.word	0x200002e8

08001808 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
 8001818:	e00a      	b.n	8001830 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800181a:	f3af 8000 	nop.w
 800181e:	4601      	mov	r1, r0
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	1c5a      	adds	r2, r3, #1
 8001824:	60ba      	str	r2, [r7, #8]
 8001826:	b2ca      	uxtb	r2, r1
 8001828:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	3301      	adds	r3, #1
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	697a      	ldr	r2, [r7, #20]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	429a      	cmp	r2, r3
 8001836:	dbf0      	blt.n	800181a <_read+0x12>
  }

  return len;
 8001838:	687b      	ldr	r3, [r7, #4]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b086      	sub	sp, #24
 8001846:	af00      	add	r7, sp, #0
 8001848:	60f8      	str	r0, [r7, #12]
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	e009      	b.n	8001868 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	1c5a      	adds	r2, r3, #1
 8001858:	60ba      	str	r2, [r7, #8]
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fcd1 	bl	8001204 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	3301      	adds	r3, #1
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	429a      	cmp	r2, r3
 800186e:	dbf1      	blt.n	8001854 <_write+0x12>
  }
  return len;
 8001870:	687b      	ldr	r3, [r7, #4]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <_close>:

int _close(int file)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001882:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001886:	4618      	mov	r0, r3
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018a2:	605a      	str	r2, [r3, #4]
  return 0;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <_isatty>:

int _isatty(int file)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018ba:	2301      	movs	r3, #1
}
 80018bc:	4618      	mov	r0, r3
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018ec:	4a14      	ldr	r2, [pc, #80]	; (8001940 <_sbrk+0x5c>)
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <_sbrk+0x60>)
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018f8:	4b13      	ldr	r3, [pc, #76]	; (8001948 <_sbrk+0x64>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d102      	bne.n	8001906 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001900:	4b11      	ldr	r3, [pc, #68]	; (8001948 <_sbrk+0x64>)
 8001902:	4a12      	ldr	r2, [pc, #72]	; (800194c <_sbrk+0x68>)
 8001904:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <_sbrk+0x64>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4413      	add	r3, r2
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	429a      	cmp	r2, r3
 8001912:	d207      	bcs.n	8001924 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001914:	f00f f9ee 	bl	8010cf4 <__errno>
 8001918:	4603      	mov	r3, r0
 800191a:	220c      	movs	r2, #12
 800191c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800191e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001922:	e009      	b.n	8001938 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001924:	4b08      	ldr	r3, [pc, #32]	; (8001948 <_sbrk+0x64>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800192a:	4b07      	ldr	r3, [pc, #28]	; (8001948 <_sbrk+0x64>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	4a05      	ldr	r2, [pc, #20]	; (8001948 <_sbrk+0x64>)
 8001934:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001936:	68fb      	ldr	r3, [r7, #12]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20080000 	.word	0x20080000
 8001944:	00000400 	.word	0x00000400
 8001948:	20001180 	.word	0x20001180
 800194c:	20003368 	.word	0x20003368

08001950 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <SystemInit+0x20>)
 8001956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800195a:	4a05      	ldr	r2, [pc, #20]	; (8001970 <SystemInit+0x20>)
 800195c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001960:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001974:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001978:	480d      	ldr	r0, [pc, #52]	; (80019b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800197a:	490e      	ldr	r1, [pc, #56]	; (80019b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800197c:	4a0e      	ldr	r2, [pc, #56]	; (80019b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800197e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001980:	e002      	b.n	8001988 <LoopCopyDataInit>

08001982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001986:	3304      	adds	r3, #4

08001988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800198a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800198c:	d3f9      	bcc.n	8001982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800198e:	4a0b      	ldr	r2, [pc, #44]	; (80019bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001990:	4c0b      	ldr	r4, [pc, #44]	; (80019c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001994:	e001      	b.n	800199a <LoopFillZerobss>

08001996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001998:	3204      	adds	r2, #4

0800199a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800199a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800199c:	d3fb      	bcc.n	8001996 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800199e:	f7ff ffd7 	bl	8001950 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019a2:	f00f f9ad 	bl	8010d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019a6:	f7fe fe19 	bl	80005dc <main>
  bx  lr    
 80019aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019ac:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80019b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b4:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 80019b8:	08012420 	.word	0x08012420
  ldr r2, =_sbss
 80019bc:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 80019c0:	20003368 	.word	0x20003368

080019c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019c4:	e7fe      	b.n	80019c4 <ADC_IRQHandler>
	...

080019c8 <DS1307_Init>:
	
/**
 * @brief Initializes the DS1307 module. Sets clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS1307_Init(I2C_HandleTypeDef *hi2c) {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
	_ds1307_ui2c = hi2c;
 80019d0:	4a04      	ldr	r2, [pc, #16]	; (80019e4 <DS1307_Init+0x1c>)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6013      	str	r3, [r2, #0]
	DS1307_SetClockHalt(0);
 80019d6:	2000      	movs	r0, #0
 80019d8:	f000 f806 	bl	80019e8 <DS1307_SetClockHalt>
}
 80019dc:	bf00      	nop
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20001184 	.word	0x20001184

080019e8 <DS1307_SetClockHalt>:

/**
 * @brief Sets clock halt bit.
 * @param halt Clock halt bit to set, 0 or 1. 0 to start timing, 0 to stop.
 */
void DS1307_SetClockHalt(uint8_t halt) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = (halt ? 1 << 7 : 0);
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <DS1307_SetClockHalt+0x14>
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	e000      	b.n	80019fe <DS1307_SetClockHalt+0x16>
 80019fc:	2300      	movs	r3, #0
 80019fe:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
 8001a00:	2000      	movs	r0, #0
 8001a02:	f000 f831 	bl	8001a68 <DS1307_GetRegByte>
 8001a06:	4603      	mov	r3, r0
 8001a08:	b25b      	sxtb	r3, r3
 8001a0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a0e:	b25a      	sxtb	r2, r3
 8001a10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	b25b      	sxtb	r3, r3
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f000 f805 	bl	8001a2c <DS1307_SetRegByte>
}
 8001a22:	bf00      	nop
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
	...

08001a2c <DS1307_SetRegByte>:
/**
 * @brief Sets the byte in the designated DS1307 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af02      	add	r7, sp, #8
 8001a32:	4603      	mov	r3, r0
 8001a34:	460a      	mov	r2, r1
 8001a36:	71fb      	strb	r3, [r7, #7]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	733b      	strb	r3, [r7, #12]
 8001a40:	79bb      	ldrb	r3, [r7, #6]
 8001a42:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 8001a44:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <DS1307_SetRegByte+0x38>)
 8001a46:	6818      	ldr	r0, [r3, #0]
 8001a48:	f107 020c 	add.w	r2, r7, #12
 8001a4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	2302      	movs	r3, #2
 8001a54:	21d0      	movs	r1, #208	; 0xd0
 8001a56:	f001 fe9d 	bl	8003794 <HAL_I2C_Master_Transmit>
}
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20001184 	.word	0x20001184

08001a68 <DS1307_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 8001a72:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <DS1307_GetRegByte+0x40>)
 8001a74:	6818      	ldr	r0, [r3, #0]
 8001a76:	1dfa      	adds	r2, r7, #7
 8001a78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	2301      	movs	r3, #1
 8001a80:	21d0      	movs	r1, #208	; 0xd0
 8001a82:	f001 fe87 	bl	8003794 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 8001a86:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <DS1307_GetRegByte+0x40>)
 8001a88:	6818      	ldr	r0, [r3, #0]
 8001a8a:	f107 020f 	add.w	r2, r7, #15
 8001a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	2301      	movs	r3, #1
 8001a96:	21d0      	movs	r1, #208	; 0xd0
 8001a98:	f001 ff70 	bl	800397c <HAL_I2C_Master_Receive>
	return val;
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20001184 	.word	0x20001184

08001aac <DS1307_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS1307_GetDate(void) {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DATE));
 8001ab0:	2004      	movs	r0, #4
 8001ab2:	f7ff ffd9 	bl	8001a68 <DS1307_GetRegByte>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f000 f85b 	bl	8001b74 <DS1307_DecodeBCD>
 8001abe:	4603      	mov	r3, r0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <DS1307_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS1307_GetMonth(void) {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MONTH));
 8001ac8:	2005      	movs	r0, #5
 8001aca:	f7ff ffcd 	bl	8001a68 <DS1307_GetRegByte>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f000 f84f 	bl	8001b74 <DS1307_DecodeBCD>
 8001ad6:	4603      	mov	r3, r0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	bd80      	pop	{r7, pc}

08001adc <DS1307_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2099.
 */
uint16_t DS1307_GetYear(void) {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
	uint16_t cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 8001ae2:	2010      	movs	r0, #16
 8001ae4:	f7ff ffc0 	bl	8001a68 <DS1307_GetRegByte>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	461a      	mov	r2, r3
 8001aee:	0092      	lsls	r2, r2, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	461a      	mov	r2, r3
 8001af4:	0091      	lsls	r1, r2, #2
 8001af6:	461a      	mov	r2, r3
 8001af8:	460b      	mov	r3, r1
 8001afa:	4413      	add	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	80fb      	strh	r3, [r7, #6]
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 8001b00:	2006      	movs	r0, #6
 8001b02:	f7ff ffb1 	bl	8001a68 <DS1307_GetRegByte>
 8001b06:	4603      	mov	r3, r0
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f000 f833 	bl	8001b74 <DS1307_DecodeBCD>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	88fb      	ldrh	r3, [r7, #6]
 8001b14:	4413      	add	r3, r2
 8001b16:	b29b      	uxth	r3, r3
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <DS1307_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS1307_GetHour(void) {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 8001b24:	2002      	movs	r0, #2
 8001b26:	f7ff ff9f 	bl	8001a68 <DS1307_GetRegByte>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	4618      	mov	r0, r3
 8001b34:	f000 f81e 	bl	8001b74 <DS1307_DecodeBCD>
 8001b38:	4603      	mov	r3, r0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <DS1307_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS1307_GetMinute(void) {
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
 8001b42:	2001      	movs	r0, #1
 8001b44:	f7ff ff90 	bl	8001a68 <DS1307_GetRegByte>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 f812 	bl	8001b74 <DS1307_DecodeBCD>
 8001b50:	4603      	mov	r3, r0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <DS1307_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS1307_GetSecond(void) {
 8001b56:	b580      	push	{r7, lr}
 8001b58:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f);
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f7ff ff84 	bl	8001a68 <DS1307_GetRegByte>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f000 f803 	bl	8001b74 <DS1307_DecodeBCD>
 8001b6e:	4603      	mov	r3, r0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <DS1307_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS1307_DecodeBCD(uint8_t bin) {
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	091b      	lsrs	r3, r3, #4
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	461a      	mov	r2, r3
 8001b86:	0092      	lsls	r2, r2, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	f003 030f 	and.w	r3, r3, #15
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	4413      	add	r3, r2
 8001b98:	b2db      	uxtb	r3, r3
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001baa:	2003      	movs	r0, #3
 8001bac:	f000 ff78 	bl	8002aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	f000 f805 	bl	8001bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb6:	f7ff fb49 	bl	800124c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bc8:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_InitTick+0x54>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <HAL_InitTick+0x58>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 ff93 	bl	8002b0a <HAL_SYSTICK_Config>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e00e      	b.n	8001c0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b0f      	cmp	r3, #15
 8001bf2:	d80a      	bhi.n	8001c0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bfc:	f000 ff5b 	bl	8002ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c00:	4a06      	ldr	r2, [pc, #24]	; (8001c1c <HAL_InitTick+0x5c>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	e000      	b.n	8001c0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000004 	.word	0x20000004
 8001c18:	2000000c 	.word	0x2000000c
 8001c1c:	20000008 	.word	0x20000008

08001c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_IncTick+0x20>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_IncTick+0x24>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4413      	add	r3, r2
 8001c30:	4a04      	ldr	r2, [pc, #16]	; (8001c44 <HAL_IncTick+0x24>)
 8001c32:	6013      	str	r3, [r2, #0]
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	2000000c 	.word	0x2000000c
 8001c44:	20001188 	.word	0x20001188

08001c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c4c:	4b03      	ldr	r3, [pc, #12]	; (8001c5c <HAL_GetTick+0x14>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20001188 	.word	0x20001188

08001c60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c68:	f7ff ffee 	bl	8001c48 <HAL_GetTick>
 8001c6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c78:	d005      	beq.n	8001c86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <HAL_Delay+0x44>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4413      	add	r3, r2
 8001c84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c86:	bf00      	nop
 8001c88:	f7ff ffde 	bl	8001c48 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d8f7      	bhi.n	8001c88 <HAL_Delay+0x28>
  {
  }
}
 8001c98:	bf00      	nop
 8001c9a:	bf00      	nop
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	2000000c 	.word	0x2000000c

08001ca8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e0ed      	b.n	8001e96 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d102      	bne.n	8001ccc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff fae4 	bl	8001294 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f042 0201 	orr.w	r2, r2, #1
 8001cda:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cdc:	f7ff ffb4 	bl	8001c48 <HAL_GetTick>
 8001ce0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ce2:	e012      	b.n	8001d0a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ce4:	f7ff ffb0 	bl	8001c48 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b0a      	cmp	r3, #10
 8001cf0:	d90b      	bls.n	8001d0a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2205      	movs	r2, #5
 8001d02:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e0c5      	b.n	8001e96 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0e5      	beq.n	8001ce4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0202 	bic.w	r2, r2, #2
 8001d26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d28:	f7ff ff8e 	bl	8001c48 <HAL_GetTick>
 8001d2c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d2e:	e012      	b.n	8001d56 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d30:	f7ff ff8a 	bl	8001c48 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b0a      	cmp	r3, #10
 8001d3c:	d90b      	bls.n	8001d56 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d42:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2205      	movs	r2, #5
 8001d4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e09f      	b.n	8001e96 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1e5      	bne.n	8001d30 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	7e1b      	ldrb	r3, [r3, #24]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d108      	bne.n	8001d7e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	e007      	b.n	8001d8e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	7e5b      	ldrb	r3, [r3, #25]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d108      	bne.n	8001da8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	e007      	b.n	8001db8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001db6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	7e9b      	ldrb	r3, [r3, #26]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d108      	bne.n	8001dd2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 0220 	orr.w	r2, r2, #32
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	e007      	b.n	8001de2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0220 	bic.w	r2, r2, #32
 8001de0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	7edb      	ldrb	r3, [r3, #27]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d108      	bne.n	8001dfc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 0210 	bic.w	r2, r2, #16
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	e007      	b.n	8001e0c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0210 	orr.w	r2, r2, #16
 8001e0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	7f1b      	ldrb	r3, [r3, #28]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d108      	bne.n	8001e26 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f042 0208 	orr.w	r2, r2, #8
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	e007      	b.n	8001e36 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0208 	bic.w	r2, r2, #8
 8001e34:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	7f5b      	ldrb	r3, [r3, #29]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d108      	bne.n	8001e50 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f042 0204 	orr.w	r2, r2, #4
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	e007      	b.n	8001e60 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 0204 	bic.w	r2, r2, #4
 8001e5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	ea42 0103 	orr.w	r1, r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	1e5a      	subs	r2, r3, #1
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b087      	sub	sp, #28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eb6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001eb8:	7cfb      	ldrb	r3, [r7, #19]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d003      	beq.n	8001ec6 <HAL_CAN_ConfigFilter+0x26>
 8001ebe:	7cfb      	ldrb	r3, [r7, #19]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	f040 80c7 	bne.w	8002054 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a69      	ldr	r2, [pc, #420]	; (8002070 <HAL_CAN_ConfigFilter+0x1d0>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d001      	beq.n	8001ed4 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001ed0:	4b68      	ldr	r3, [pc, #416]	; (8002074 <HAL_CAN_ConfigFilter+0x1d4>)
 8001ed2:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001eda:	f043 0201 	orr.w	r2, r3, #1
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	4a63      	ldr	r2, [pc, #396]	; (8002074 <HAL_CAN_ConfigFilter+0x1d4>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d111      	bne.n	8001f10 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ef2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f06:	021b      	lsls	r3, r3, #8
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	f003 031f 	and.w	r3, r3, #31
 8001f18:	2201      	movs	r2, #1
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d123      	bne.n	8001f82 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	43db      	mvns	r3, r3
 8001f44:	401a      	ands	r2, r3
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f5c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	3248      	adds	r2, #72	; 0x48
 8001f62:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f76:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f78:	6979      	ldr	r1, [r7, #20]
 8001f7a:	3348      	adds	r3, #72	; 0x48
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	440b      	add	r3, r1
 8001f80:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d122      	bne.n	8001fd0 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	431a      	orrs	r2, r3
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001faa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	3248      	adds	r2, #72	; 0x48
 8001fb0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fc4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fc6:	6979      	ldr	r1, [r7, #20]
 8001fc8:	3348      	adds	r3, #72	; 0x48
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	440b      	add	r3, r1
 8001fce:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d109      	bne.n	8001fec <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001fea:	e007      	b.n	8001ffc <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d109      	bne.n	8002018 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	43db      	mvns	r3, r3
 800200e:	401a      	ands	r2, r3
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002016:	e007      	b.n	8002028 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	431a      	orrs	r2, r3
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d107      	bne.n	8002040 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	431a      	orrs	r2, r3
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002046:	f023 0201 	bic.w	r2, r3, #1
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	e006      	b.n	8002062 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
  }
}
 8002062:	4618      	mov	r0, r3
 8002064:	371c      	adds	r7, #28
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40003400 	.word	0x40003400
 8002074:	40006400 	.word	0x40006400

08002078 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b01      	cmp	r3, #1
 800208a:	d12e      	bne.n	80020ea <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2202      	movs	r2, #2
 8002090:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0201 	bic.w	r2, r2, #1
 80020a2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80020a4:	f7ff fdd0 	bl	8001c48 <HAL_GetTick>
 80020a8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80020aa:	e012      	b.n	80020d2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020ac:	f7ff fdcc 	bl	8001c48 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b0a      	cmp	r3, #10
 80020b8:	d90b      	bls.n	80020d2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2205      	movs	r2, #5
 80020ca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e012      	b.n	80020f8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1e5      	bne.n	80020ac <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80020e6:	2300      	movs	r3, #0
 80020e8:	e006      	b.n	80020f8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
  }
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d133      	bne.n	800217c <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 0201 	orr.w	r2, r2, #1
 8002122:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002124:	f7ff fd90 	bl	8001c48 <HAL_GetTick>
 8002128:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800212a:	e012      	b.n	8002152 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800212c:	f7ff fd8c 	bl	8001c48 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b0a      	cmp	r3, #10
 8002138:	d90b      	bls.n	8002152 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2205      	movs	r2, #5
 800214a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e01b      	b.n	800218a <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0e5      	beq.n	800212c <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0202 	bic.w	r2, r2, #2
 800216e:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	e006      	b.n	800218a <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
  }
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002192:	b480      	push	{r7}
 8002194:	b087      	sub	sp, #28
 8002196:	af00      	add	r7, sp, #0
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	607a      	str	r2, [r7, #4]
 800219e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021a6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80021a8:	7dfb      	ldrb	r3, [r7, #23]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d003      	beq.n	80021b6 <HAL_CAN_GetRxMessage+0x24>
 80021ae:	7dfb      	ldrb	r3, [r7, #23]
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	f040 80f3 	bne.w	800239c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10e      	bne.n	80021da <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d116      	bne.n	80021f8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e0e7      	b.n	80023aa <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d107      	bne.n	80021f8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0d8      	b.n	80023aa <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	331b      	adds	r3, #27
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	4413      	add	r3, r2
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0204 	and.w	r2, r3, #4
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10c      	bne.n	8002230 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	331b      	adds	r3, #27
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	4413      	add	r3, r2
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	0d5b      	lsrs	r3, r3, #21
 8002226:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	e00b      	b.n	8002248 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	331b      	adds	r3, #27
 8002238:	011b      	lsls	r3, r3, #4
 800223a:	4413      	add	r3, r2
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	08db      	lsrs	r3, r3, #3
 8002240:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	331b      	adds	r3, #27
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	4413      	add	r3, r2
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0202 	and.w	r2, r3, #2
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	331b      	adds	r3, #27
 8002266:	011b      	lsls	r3, r3, #4
 8002268:	4413      	add	r3, r2
 800226a:	3304      	adds	r3, #4
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 020f 	and.w	r2, r3, #15
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	331b      	adds	r3, #27
 800227e:	011b      	lsls	r3, r3, #4
 8002280:	4413      	add	r3, r2
 8002282:	3304      	adds	r3, #4
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	0a1b      	lsrs	r3, r3, #8
 8002288:	b2da      	uxtb	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	331b      	adds	r3, #27
 8002296:	011b      	lsls	r3, r3, #4
 8002298:	4413      	add	r3, r2
 800229a:	3304      	adds	r3, #4
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	0c1b      	lsrs	r3, r3, #16
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	4413      	add	r3, r2
 80022b0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	011b      	lsls	r3, r3, #4
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	0a1a      	lsrs	r2, r3, #8
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	3301      	adds	r3, #1
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	011b      	lsls	r3, r3, #4
 80022de:	4413      	add	r3, r2
 80022e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	0c1a      	lsrs	r2, r3, #16
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	3302      	adds	r3, #2
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	011b      	lsls	r3, r3, #4
 80022f8:	4413      	add	r3, r2
 80022fa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	0e1a      	lsrs	r2, r3, #24
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	3303      	adds	r3, #3
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	011b      	lsls	r3, r3, #4
 8002312:	4413      	add	r3, r2
 8002314:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	3304      	adds	r3, #4
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	011b      	lsls	r3, r3, #4
 800232a:	4413      	add	r3, r2
 800232c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	0a1a      	lsrs	r2, r3, #8
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	3305      	adds	r3, #5
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	4413      	add	r3, r2
 8002346:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	0c1a      	lsrs	r2, r3, #16
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	3306      	adds	r3, #6
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	011b      	lsls	r3, r3, #4
 800235e:	4413      	add	r3, r2
 8002360:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	0e1a      	lsrs	r2, r3, #24
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	3307      	adds	r3, #7
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d108      	bne.n	8002388 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f042 0220 	orr.w	r2, r2, #32
 8002384:	60da      	str	r2, [r3, #12]
 8002386:	e007      	b.n	8002398 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	691a      	ldr	r2, [r3, #16]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0220 	orr.w	r2, r2, #32
 8002396:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	e006      	b.n	80023aa <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
  }
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	371c      	adds	r7, #28
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b085      	sub	sp, #20
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
 80023be:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ca:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80023cc:	7afb      	ldrb	r3, [r7, #11]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d002      	beq.n	80023d8 <HAL_CAN_GetRxFifoFillLevel+0x22>
 80023d2:	7afb      	ldrb	r3, [r7, #11]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d10f      	bne.n	80023f8 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d106      	bne.n	80023ec <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f003 0303 	and.w	r3, r3, #3
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	e005      	b.n	80023f8 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80023f8:	68fb      	ldr	r3, [r7, #12]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002406:	b480      	push	{r7}
 8002408:	b085      	sub	sp, #20
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002416:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002418:	7bfb      	ldrb	r3, [r7, #15]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d002      	beq.n	8002424 <HAL_CAN_ActivateNotification+0x1e>
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	2b02      	cmp	r3, #2
 8002422:	d109      	bne.n	8002438 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6959      	ldr	r1, [r3, #20]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	430a      	orrs	r2, r1
 8002432:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002434:	2300      	movs	r3, #0
 8002436:	e006      	b.n	8002446 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
  }
}
 8002446:	4618      	mov	r0, r3
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8002452:	b480      	push	{r7}
 8002454:	b085      	sub	sp, #20
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
 800245a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002462:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d002      	beq.n	8002470 <HAL_CAN_DeactivateNotification+0x1e>
 800246a:	7bfb      	ldrb	r3, [r7, #15]
 800246c:	2b02      	cmp	r3, #2
 800246e:	d10a      	bne.n	8002486 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6959      	ldr	r1, [r3, #20]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	43da      	mvns	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	400a      	ands	r2, r1
 8002480:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002482:	2300      	movs	r3, #0
 8002484:	e006      	b.n	8002494 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
  }
}
 8002494:	4618      	mov	r0, r3
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08a      	sub	sp, #40	; 0x28
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80024a8:	2300      	movs	r3, #0
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80024dc:	6a3b      	ldr	r3, [r7, #32]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d07c      	beq.n	80025e0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d023      	beq.n	8002538 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2201      	movs	r2, #1
 80024f6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f983 	bl	800280e <HAL_CAN_TxMailbox0CompleteCallback>
 8002508:	e016      	b.n	8002538 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d004      	beq.n	800251e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800251a:	627b      	str	r3, [r7, #36]	; 0x24
 800251c:	e00c      	b.n	8002538 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	f003 0308 	and.w	r3, r3, #8
 8002524:	2b00      	cmp	r3, #0
 8002526:	d004      	beq.n	8002532 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800252e:	627b      	str	r3, [r7, #36]	; 0x24
 8002530:	e002      	b.n	8002538 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f989 	bl	800284a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253e:	2b00      	cmp	r3, #0
 8002540:	d024      	beq.n	800258c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f44f 7280 	mov.w	r2, #256	; 0x100
 800254a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f963 	bl	8002822 <HAL_CAN_TxMailbox1CompleteCallback>
 800255c:	e016      	b.n	800258c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002564:	2b00      	cmp	r3, #0
 8002566:	d004      	beq.n	8002572 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800256e:	627b      	str	r3, [r7, #36]	; 0x24
 8002570:	e00c      	b.n	800258c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002578:	2b00      	cmp	r3, #0
 800257a:	d004      	beq.n	8002586 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002582:	627b      	str	r3, [r7, #36]	; 0x24
 8002584:	e002      	b.n	800258c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f969 	bl	800285e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d024      	beq.n	80025e0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800259e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f943 	bl	8002836 <HAL_CAN_TxMailbox2CompleteCallback>
 80025b0:	e016      	b.n	80025e0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d004      	beq.n	80025c6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025c2:	627b      	str	r3, [r7, #36]	; 0x24
 80025c4:	e00c      	b.n	80025e0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d004      	beq.n	80025da <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d6:	627b      	str	r3, [r7, #36]	; 0x24
 80025d8:	e002      	b.n	80025e0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f949 	bl	8002872 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00c      	beq.n	8002604 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f003 0310 	and.w	r3, r3, #16
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d007      	beq.n	8002604 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2210      	movs	r2, #16
 8002602:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002604:	6a3b      	ldr	r3, [r7, #32]
 8002606:	f003 0304 	and.w	r3, r3, #4
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00b      	beq.n	8002626 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f003 0308 	and.w	r3, r3, #8
 8002614:	2b00      	cmp	r3, #0
 8002616:	d006      	beq.n	8002626 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2208      	movs	r2, #8
 800261e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 f930 	bl	8002886 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d009      	beq.n	8002644 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7fe fd9e 	bl	8001180 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00c      	beq.n	8002668 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	f003 0310 	and.w	r3, r3, #16
 8002654:	2b00      	cmp	r3, #0
 8002656:	d007      	beq.n	8002668 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800265e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2210      	movs	r2, #16
 8002666:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	f003 0320 	and.w	r3, r3, #32
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00b      	beq.n	800268a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	f003 0308 	and.w	r3, r3, #8
 8002678:	2b00      	cmp	r3, #0
 800267a:	d006      	beq.n	800268a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2208      	movs	r2, #8
 8002682:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f912 	bl	80028ae <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800268a:	6a3b      	ldr	r3, [r7, #32]
 800268c:	f003 0310 	and.w	r3, r3, #16
 8002690:	2b00      	cmp	r3, #0
 8002692:	d009      	beq.n	80026a8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f8f9 	bl	800289a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80026a8:	6a3b      	ldr	r3, [r7, #32]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00b      	beq.n	80026ca <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	f003 0310 	and.w	r3, r3, #16
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d006      	beq.n	80026ca <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2210      	movs	r2, #16
 80026c2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f8fc 	bl	80028c2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00b      	beq.n	80026ec <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d006      	beq.n	80026ec <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2208      	movs	r2, #8
 80026e4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f8f5 	bl	80028d6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d07b      	beq.n	80027ee <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d072      	beq.n	80027e6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002706:	2b00      	cmp	r3, #0
 8002708:	d008      	beq.n	800271c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800271c:	6a3b      	ldr	r3, [r7, #32]
 800271e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002722:	2b00      	cmp	r3, #0
 8002724:	d008      	beq.n	8002738 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	f043 0302 	orr.w	r3, r3, #2
 8002736:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002738:	6a3b      	ldr	r3, [r7, #32]
 800273a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800273e:	2b00      	cmp	r3, #0
 8002740:	d008      	beq.n	8002754 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	f043 0304 	orr.w	r3, r3, #4
 8002752:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002754:	6a3b      	ldr	r3, [r7, #32]
 8002756:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800275a:	2b00      	cmp	r3, #0
 800275c:	d043      	beq.n	80027e6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002764:	2b00      	cmp	r3, #0
 8002766:	d03e      	beq.n	80027e6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800276e:	2b60      	cmp	r3, #96	; 0x60
 8002770:	d02b      	beq.n	80027ca <HAL_CAN_IRQHandler+0x32a>
 8002772:	2b60      	cmp	r3, #96	; 0x60
 8002774:	d82e      	bhi.n	80027d4 <HAL_CAN_IRQHandler+0x334>
 8002776:	2b50      	cmp	r3, #80	; 0x50
 8002778:	d022      	beq.n	80027c0 <HAL_CAN_IRQHandler+0x320>
 800277a:	2b50      	cmp	r3, #80	; 0x50
 800277c:	d82a      	bhi.n	80027d4 <HAL_CAN_IRQHandler+0x334>
 800277e:	2b40      	cmp	r3, #64	; 0x40
 8002780:	d019      	beq.n	80027b6 <HAL_CAN_IRQHandler+0x316>
 8002782:	2b40      	cmp	r3, #64	; 0x40
 8002784:	d826      	bhi.n	80027d4 <HAL_CAN_IRQHandler+0x334>
 8002786:	2b30      	cmp	r3, #48	; 0x30
 8002788:	d010      	beq.n	80027ac <HAL_CAN_IRQHandler+0x30c>
 800278a:	2b30      	cmp	r3, #48	; 0x30
 800278c:	d822      	bhi.n	80027d4 <HAL_CAN_IRQHandler+0x334>
 800278e:	2b10      	cmp	r3, #16
 8002790:	d002      	beq.n	8002798 <HAL_CAN_IRQHandler+0x2f8>
 8002792:	2b20      	cmp	r3, #32
 8002794:	d005      	beq.n	80027a2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002796:	e01d      	b.n	80027d4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	f043 0308 	orr.w	r3, r3, #8
 800279e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027a0:	e019      	b.n	80027d6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	f043 0310 	orr.w	r3, r3, #16
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027aa:	e014      	b.n	80027d6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	f043 0320 	orr.w	r3, r3, #32
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027b4:	e00f      	b.n	80027d6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027be:	e00a      	b.n	80027d6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027c8:	e005      	b.n	80027d6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027d2:	e000      	b.n	80027d6 <HAL_CAN_IRQHandler+0x336>
            break;
 80027d4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	699a      	ldr	r2, [r3, #24]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80027e4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2204      	movs	r2, #4
 80027ec:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d008      	beq.n	8002806 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f872 	bl	80028ea <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002806:	bf00      	nop
 8002808:	3728      	adds	r7, #40	; 0x28
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
	...

08002900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002910:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <__NVIC_SetPriorityGrouping+0x40>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800291c:	4013      	ands	r3, r2
 800291e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002928:	4b06      	ldr	r3, [pc, #24]	; (8002944 <__NVIC_SetPriorityGrouping+0x44>)
 800292a:	4313      	orrs	r3, r2
 800292c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800292e:	4a04      	ldr	r2, [pc, #16]	; (8002940 <__NVIC_SetPriorityGrouping+0x40>)
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	60d3      	str	r3, [r2, #12]
}
 8002934:	bf00      	nop
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	e000ed00 	.word	0xe000ed00
 8002944:	05fa0000 	.word	0x05fa0000

08002948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800294c:	4b04      	ldr	r3, [pc, #16]	; (8002960 <__NVIC_GetPriorityGrouping+0x18>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	0a1b      	lsrs	r3, r3, #8
 8002952:	f003 0307 	and.w	r3, r3, #7
}
 8002956:	4618      	mov	r0, r3
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800296e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002972:	2b00      	cmp	r3, #0
 8002974:	db0b      	blt.n	800298e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002976:	79fb      	ldrb	r3, [r7, #7]
 8002978:	f003 021f 	and.w	r2, r3, #31
 800297c:	4907      	ldr	r1, [pc, #28]	; (800299c <__NVIC_EnableIRQ+0x38>)
 800297e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002982:	095b      	lsrs	r3, r3, #5
 8002984:	2001      	movs	r0, #1
 8002986:	fa00 f202 	lsl.w	r2, r0, r2
 800298a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	e000e100 	.word	0xe000e100

080029a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	6039      	str	r1, [r7, #0]
 80029aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	db0a      	blt.n	80029ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	490c      	ldr	r1, [pc, #48]	; (80029ec <__NVIC_SetPriority+0x4c>)
 80029ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029be:	0112      	lsls	r2, r2, #4
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	440b      	add	r3, r1
 80029c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029c8:	e00a      	b.n	80029e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	4908      	ldr	r1, [pc, #32]	; (80029f0 <__NVIC_SetPriority+0x50>)
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	3b04      	subs	r3, #4
 80029d8:	0112      	lsls	r2, r2, #4
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	440b      	add	r3, r1
 80029de:	761a      	strb	r2, [r3, #24]
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	e000e100 	.word	0xe000e100
 80029f0:	e000ed00 	.word	0xe000ed00

080029f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b089      	sub	sp, #36	; 0x24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f1c3 0307 	rsb	r3, r3, #7
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	bf28      	it	cs
 8002a12:	2304      	movcs	r3, #4
 8002a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	3304      	adds	r3, #4
 8002a1a:	2b06      	cmp	r3, #6
 8002a1c:	d902      	bls.n	8002a24 <NVIC_EncodePriority+0x30>
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	3b03      	subs	r3, #3
 8002a22:	e000      	b.n	8002a26 <NVIC_EncodePriority+0x32>
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	43da      	mvns	r2, r3
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	401a      	ands	r2, r3
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	fa01 f303 	lsl.w	r3, r1, r3
 8002a46:	43d9      	mvns	r1, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a4c:	4313      	orrs	r3, r2
         );
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3724      	adds	r7, #36	; 0x24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
	...

08002a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a6c:	d301      	bcc.n	8002a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e00f      	b.n	8002a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a72:	4a0a      	ldr	r2, [pc, #40]	; (8002a9c <SysTick_Config+0x40>)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a7a:	210f      	movs	r1, #15
 8002a7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a80:	f7ff ff8e 	bl	80029a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a84:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <SysTick_Config+0x40>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a8a:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <SysTick_Config+0x40>)
 8002a8c:	2207      	movs	r2, #7
 8002a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	e000e010 	.word	0xe000e010

08002aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7ff ff29 	bl	8002900 <__NVIC_SetPriorityGrouping>
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b086      	sub	sp, #24
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	4603      	mov	r3, r0
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	607a      	str	r2, [r7, #4]
 8002ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ac8:	f7ff ff3e 	bl	8002948 <__NVIC_GetPriorityGrouping>
 8002acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	68b9      	ldr	r1, [r7, #8]
 8002ad2:	6978      	ldr	r0, [r7, #20]
 8002ad4:	f7ff ff8e 	bl	80029f4 <NVIC_EncodePriority>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ade:	4611      	mov	r1, r2
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff ff5d 	bl	80029a0 <__NVIC_SetPriority>
}
 8002ae6:	bf00      	nop
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b082      	sub	sp, #8
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	4603      	mov	r3, r0
 8002af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff ff31 	bl	8002964 <__NVIC_EnableIRQ>
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7ff ffa2 	bl	8002a5c <SysTick_Config>
 8002b18:	4603      	mov	r3, r0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
	...

08002b24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b30:	f7ff f88a 	bl	8001c48 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e099      	b.n	8002c74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2202      	movs	r2, #2
 8002b44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0201 	bic.w	r2, r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b60:	e00f      	b.n	8002b82 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b62:	f7ff f871 	bl	8001c48 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b05      	cmp	r3, #5
 8002b6e:	d908      	bls.n	8002b82 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2220      	movs	r2, #32
 8002b74:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2203      	movs	r2, #3
 8002b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e078      	b.n	8002c74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1e8      	bne.n	8002b62 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	4b38      	ldr	r3, [pc, #224]	; (8002c7c <HAL_DMA_Init+0x158>)
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d107      	bne.n	8002bec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be4:	4313      	orrs	r3, r2
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	f023 0307 	bic.w	r3, r3, #7
 8002c02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	d117      	bne.n	8002c46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00e      	beq.n	8002c46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 faa5 	bl	8003178 <DMA_CheckFifoParam>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d008      	beq.n	8002c46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2240      	movs	r2, #64	; 0x40
 8002c38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c42:	2301      	movs	r3, #1
 8002c44:	e016      	b.n	8002c74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 fa5c 	bl	800310c <DMA_CalcBaseAndBitshift>
 8002c54:	4603      	mov	r3, r0
 8002c56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5c:	223f      	movs	r2, #63	; 0x3f
 8002c5e:	409a      	lsls	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3718      	adds	r7, #24
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	e010803f 	.word	0xe010803f

08002c80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
 8002c8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c96:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_DMA_Start_IT+0x26>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	e048      	b.n	8002d38 <HAL_DMA_Start_IT+0xb8>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d137      	bne.n	8002d2a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	68b9      	ldr	r1, [r7, #8]
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 f9ee 	bl	80030b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd8:	223f      	movs	r2, #63	; 0x3f
 8002cda:	409a      	lsls	r2, r3
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0216 	orr.w	r2, r2, #22
 8002cee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	695a      	ldr	r2, [r3, #20]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cfe:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d007      	beq.n	8002d18 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0208 	orr.w	r2, r2, #8
 8002d16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 0201 	orr.w	r2, r2, #1
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	e005      	b.n	8002d36 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d32:	2302      	movs	r3, #2
 8002d34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d004      	beq.n	8002d5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2280      	movs	r2, #128	; 0x80
 8002d58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e00c      	b.n	8002d78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2205      	movs	r2, #5
 8002d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 0201 	bic.w	r2, r2, #1
 8002d74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002d90:	4b8e      	ldr	r3, [pc, #568]	; (8002fcc <HAL_DMA_IRQHandler+0x248>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a8e      	ldr	r2, [pc, #568]	; (8002fd0 <HAL_DMA_IRQHandler+0x24c>)
 8002d96:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9a:	0a9b      	lsrs	r3, r3, #10
 8002d9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dae:	2208      	movs	r2, #8
 8002db0:	409a      	lsls	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	4013      	ands	r3, r2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d01a      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d013      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0204 	bic.w	r2, r2, #4
 8002dd6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ddc:	2208      	movs	r2, #8
 8002dde:	409a      	lsls	r2, r3
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de8:	f043 0201 	orr.w	r2, r3, #1
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df4:	2201      	movs	r2, #1
 8002df6:	409a      	lsls	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d012      	beq.n	8002e26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00b      	beq.n	8002e26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e12:	2201      	movs	r2, #1
 8002e14:	409a      	lsls	r2, r3
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1e:	f043 0202 	orr.w	r2, r3, #2
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2a:	2204      	movs	r2, #4
 8002e2c:	409a      	lsls	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	4013      	ands	r3, r2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d012      	beq.n	8002e5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00b      	beq.n	8002e5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e48:	2204      	movs	r2, #4
 8002e4a:	409a      	lsls	r2, r3
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e54:	f043 0204 	orr.w	r2, r3, #4
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e60:	2210      	movs	r2, #16
 8002e62:	409a      	lsls	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4013      	ands	r3, r2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d043      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d03c      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7e:	2210      	movs	r2, #16
 8002e80:	409a      	lsls	r2, r3
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d018      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d108      	bne.n	8002eb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d024      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	4798      	blx	r3
 8002eb2:	e01f      	b.n	8002ef4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d01b      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	4798      	blx	r3
 8002ec4:	e016      	b.n	8002ef4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d107      	bne.n	8002ee4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0208 	bic.w	r2, r2, #8
 8002ee2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef8:	2220      	movs	r2, #32
 8002efa:	409a      	lsls	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	4013      	ands	r3, r2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 808f 	beq.w	8003024 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0310 	and.w	r3, r3, #16
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 8087 	beq.w	8003024 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	409a      	lsls	r2, r3
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b05      	cmp	r3, #5
 8002f2c:	d136      	bne.n	8002f9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0216 	bic.w	r2, r2, #22
 8002f3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	695a      	ldr	r2, [r3, #20]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d103      	bne.n	8002f5e <HAL_DMA_IRQHandler+0x1da>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d007      	beq.n	8002f6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 0208 	bic.w	r2, r2, #8
 8002f6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f72:	223f      	movs	r2, #63	; 0x3f
 8002f74:	409a      	lsls	r2, r3
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d07e      	beq.n	8003090 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	4798      	blx	r3
        }
        return;
 8002f9a:	e079      	b.n	8003090 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d01d      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10d      	bne.n	8002fd4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d031      	beq.n	8003024 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	4798      	blx	r3
 8002fc8:	e02c      	b.n	8003024 <HAL_DMA_IRQHandler+0x2a0>
 8002fca:	bf00      	nop
 8002fcc:	20000004 	.word	0x20000004
 8002fd0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d023      	beq.n	8003024 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	4798      	blx	r3
 8002fe4:	e01e      	b.n	8003024 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10f      	bne.n	8003014 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0210 	bic.w	r2, r2, #16
 8003002:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003028:	2b00      	cmp	r3, #0
 800302a:	d032      	beq.n	8003092 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b00      	cmp	r3, #0
 8003036:	d022      	beq.n	800307e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2205      	movs	r2, #5
 800303c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0201 	bic.w	r2, r2, #1
 800304e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	3301      	adds	r3, #1
 8003054:	60bb      	str	r3, [r7, #8]
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	429a      	cmp	r2, r3
 800305a:	d307      	bcc.n	800306c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1f2      	bne.n	8003050 <HAL_DMA_IRQHandler+0x2cc>
 800306a:	e000      	b.n	800306e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800306c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003082:	2b00      	cmp	r3, #0
 8003084:	d005      	beq.n	8003092 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	4798      	blx	r3
 800308e:	e000      	b.n	8003092 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003090:	bf00      	nop
    }
  }
}
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
 80030bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	2b40      	cmp	r3, #64	; 0x40
 80030dc:	d108      	bne.n	80030f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80030ee:	e007      	b.n	8003100 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	60da      	str	r2, [r3, #12]
}
 8003100:	bf00      	nop
 8003102:	3714      	adds	r7, #20
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	b2db      	uxtb	r3, r3
 800311a:	3b10      	subs	r3, #16
 800311c:	4a13      	ldr	r2, [pc, #76]	; (800316c <DMA_CalcBaseAndBitshift+0x60>)
 800311e:	fba2 2303 	umull	r2, r3, r2, r3
 8003122:	091b      	lsrs	r3, r3, #4
 8003124:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003126:	4a12      	ldr	r2, [pc, #72]	; (8003170 <DMA_CalcBaseAndBitshift+0x64>)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4413      	add	r3, r2
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	461a      	mov	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2b03      	cmp	r3, #3
 8003138:	d908      	bls.n	800314c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	461a      	mov	r2, r3
 8003140:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <DMA_CalcBaseAndBitshift+0x68>)
 8003142:	4013      	ands	r3, r2
 8003144:	1d1a      	adds	r2, r3, #4
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	659a      	str	r2, [r3, #88]	; 0x58
 800314a:	e006      	b.n	800315a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	461a      	mov	r2, r3
 8003152:	4b08      	ldr	r3, [pc, #32]	; (8003174 <DMA_CalcBaseAndBitshift+0x68>)
 8003154:	4013      	ands	r3, r2
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800315e:	4618      	mov	r0, r3
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	aaaaaaab 	.word	0xaaaaaaab
 8003170:	08011f80 	.word	0x08011f80
 8003174:	fffffc00 	.word	0xfffffc00

08003178 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003180:	2300      	movs	r3, #0
 8003182:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003188:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d11f      	bne.n	80031d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	2b03      	cmp	r3, #3
 8003196:	d856      	bhi.n	8003246 <DMA_CheckFifoParam+0xce>
 8003198:	a201      	add	r2, pc, #4	; (adr r2, 80031a0 <DMA_CheckFifoParam+0x28>)
 800319a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319e:	bf00      	nop
 80031a0:	080031b1 	.word	0x080031b1
 80031a4:	080031c3 	.word	0x080031c3
 80031a8:	080031b1 	.word	0x080031b1
 80031ac:	08003247 	.word	0x08003247
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d046      	beq.n	800324a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031c0:	e043      	b.n	800324a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031ca:	d140      	bne.n	800324e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031d0:	e03d      	b.n	800324e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031da:	d121      	bne.n	8003220 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	2b03      	cmp	r3, #3
 80031e0:	d837      	bhi.n	8003252 <DMA_CheckFifoParam+0xda>
 80031e2:	a201      	add	r2, pc, #4	; (adr r2, 80031e8 <DMA_CheckFifoParam+0x70>)
 80031e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e8:	080031f9 	.word	0x080031f9
 80031ec:	080031ff 	.word	0x080031ff
 80031f0:	080031f9 	.word	0x080031f9
 80031f4:	08003211 	.word	0x08003211
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	73fb      	strb	r3, [r7, #15]
      break;
 80031fc:	e030      	b.n	8003260 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003202:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d025      	beq.n	8003256 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800320e:	e022      	b.n	8003256 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003214:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003218:	d11f      	bne.n	800325a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800321e:	e01c      	b.n	800325a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	2b02      	cmp	r3, #2
 8003224:	d903      	bls.n	800322e <DMA_CheckFifoParam+0xb6>
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	2b03      	cmp	r3, #3
 800322a:	d003      	beq.n	8003234 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800322c:	e018      	b.n	8003260 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	73fb      	strb	r3, [r7, #15]
      break;
 8003232:	e015      	b.n	8003260 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003238:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00e      	beq.n	800325e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	73fb      	strb	r3, [r7, #15]
      break;
 8003244:	e00b      	b.n	800325e <DMA_CheckFifoParam+0xe6>
      break;
 8003246:	bf00      	nop
 8003248:	e00a      	b.n	8003260 <DMA_CheckFifoParam+0xe8>
      break;
 800324a:	bf00      	nop
 800324c:	e008      	b.n	8003260 <DMA_CheckFifoParam+0xe8>
      break;
 800324e:	bf00      	nop
 8003250:	e006      	b.n	8003260 <DMA_CheckFifoParam+0xe8>
      break;
 8003252:	bf00      	nop
 8003254:	e004      	b.n	8003260 <DMA_CheckFifoParam+0xe8>
      break;
 8003256:	bf00      	nop
 8003258:	e002      	b.n	8003260 <DMA_CheckFifoParam+0xe8>
      break;   
 800325a:	bf00      	nop
 800325c:	e000      	b.n	8003260 <DMA_CheckFifoParam+0xe8>
      break;
 800325e:	bf00      	nop
    }
  } 
  
  return status; 
 8003260:	7bfb      	ldrb	r3, [r7, #15]
}
 8003262:	4618      	mov	r0, r3
 8003264:	3714      	adds	r7, #20
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop

08003270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003270:	b480      	push	{r7}
 8003272:	b089      	sub	sp, #36	; 0x24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800327a:	2300      	movs	r3, #0
 800327c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800327e:	2300      	movs	r3, #0
 8003280:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003282:	2300      	movs	r3, #0
 8003284:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003286:	2300      	movs	r3, #0
 8003288:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800328a:	2300      	movs	r3, #0
 800328c:	61fb      	str	r3, [r7, #28]
 800328e:	e175      	b.n	800357c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003290:	2201      	movs	r2, #1
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	4013      	ands	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	f040 8164 	bne.w	8003576 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f003 0303 	and.w	r3, r3, #3
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d005      	beq.n	80032c6 <HAL_GPIO_Init+0x56>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d130      	bne.n	8003328 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	2203      	movs	r2, #3
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	43db      	mvns	r3, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4013      	ands	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032fc:	2201      	movs	r2, #1
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	43db      	mvns	r3, r3
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4013      	ands	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	091b      	lsrs	r3, r3, #4
 8003312:	f003 0201 	and.w	r2, r3, #1
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4313      	orrs	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f003 0303 	and.w	r3, r3, #3
 8003330:	2b03      	cmp	r3, #3
 8003332:	d017      	beq.n	8003364 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	2203      	movs	r2, #3
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	43db      	mvns	r3, r3
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4013      	ands	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4313      	orrs	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f003 0303 	and.w	r3, r3, #3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d123      	bne.n	80033b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	08da      	lsrs	r2, r3, #3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3208      	adds	r2, #8
 8003378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800337c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	220f      	movs	r2, #15
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	4013      	ands	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	691a      	ldr	r2, [r3, #16]
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	08da      	lsrs	r2, r3, #3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3208      	adds	r2, #8
 80033b2:	69b9      	ldr	r1, [r7, #24]
 80033b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	2203      	movs	r2, #3
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4013      	ands	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f003 0203 	and.w	r2, r3, #3
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 80be 	beq.w	8003576 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033fa:	4b66      	ldr	r3, [pc, #408]	; (8003594 <HAL_GPIO_Init+0x324>)
 80033fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fe:	4a65      	ldr	r2, [pc, #404]	; (8003594 <HAL_GPIO_Init+0x324>)
 8003400:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003404:	6453      	str	r3, [r2, #68]	; 0x44
 8003406:	4b63      	ldr	r3, [pc, #396]	; (8003594 <HAL_GPIO_Init+0x324>)
 8003408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003412:	4a61      	ldr	r2, [pc, #388]	; (8003598 <HAL_GPIO_Init+0x328>)
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	089b      	lsrs	r3, r3, #2
 8003418:	3302      	adds	r3, #2
 800341a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800341e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	f003 0303 	and.w	r3, r3, #3
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	220f      	movs	r2, #15
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43db      	mvns	r3, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4013      	ands	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a58      	ldr	r2, [pc, #352]	; (800359c <HAL_GPIO_Init+0x32c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d037      	beq.n	80034ae <HAL_GPIO_Init+0x23e>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a57      	ldr	r2, [pc, #348]	; (80035a0 <HAL_GPIO_Init+0x330>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d031      	beq.n	80034aa <HAL_GPIO_Init+0x23a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a56      	ldr	r2, [pc, #344]	; (80035a4 <HAL_GPIO_Init+0x334>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d02b      	beq.n	80034a6 <HAL_GPIO_Init+0x236>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a55      	ldr	r2, [pc, #340]	; (80035a8 <HAL_GPIO_Init+0x338>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d025      	beq.n	80034a2 <HAL_GPIO_Init+0x232>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a54      	ldr	r2, [pc, #336]	; (80035ac <HAL_GPIO_Init+0x33c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d01f      	beq.n	800349e <HAL_GPIO_Init+0x22e>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a53      	ldr	r2, [pc, #332]	; (80035b0 <HAL_GPIO_Init+0x340>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d019      	beq.n	800349a <HAL_GPIO_Init+0x22a>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a52      	ldr	r2, [pc, #328]	; (80035b4 <HAL_GPIO_Init+0x344>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d013      	beq.n	8003496 <HAL_GPIO_Init+0x226>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a51      	ldr	r2, [pc, #324]	; (80035b8 <HAL_GPIO_Init+0x348>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d00d      	beq.n	8003492 <HAL_GPIO_Init+0x222>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a50      	ldr	r2, [pc, #320]	; (80035bc <HAL_GPIO_Init+0x34c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d007      	beq.n	800348e <HAL_GPIO_Init+0x21e>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a4f      	ldr	r2, [pc, #316]	; (80035c0 <HAL_GPIO_Init+0x350>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d101      	bne.n	800348a <HAL_GPIO_Init+0x21a>
 8003486:	2309      	movs	r3, #9
 8003488:	e012      	b.n	80034b0 <HAL_GPIO_Init+0x240>
 800348a:	230a      	movs	r3, #10
 800348c:	e010      	b.n	80034b0 <HAL_GPIO_Init+0x240>
 800348e:	2308      	movs	r3, #8
 8003490:	e00e      	b.n	80034b0 <HAL_GPIO_Init+0x240>
 8003492:	2307      	movs	r3, #7
 8003494:	e00c      	b.n	80034b0 <HAL_GPIO_Init+0x240>
 8003496:	2306      	movs	r3, #6
 8003498:	e00a      	b.n	80034b0 <HAL_GPIO_Init+0x240>
 800349a:	2305      	movs	r3, #5
 800349c:	e008      	b.n	80034b0 <HAL_GPIO_Init+0x240>
 800349e:	2304      	movs	r3, #4
 80034a0:	e006      	b.n	80034b0 <HAL_GPIO_Init+0x240>
 80034a2:	2303      	movs	r3, #3
 80034a4:	e004      	b.n	80034b0 <HAL_GPIO_Init+0x240>
 80034a6:	2302      	movs	r3, #2
 80034a8:	e002      	b.n	80034b0 <HAL_GPIO_Init+0x240>
 80034aa:	2301      	movs	r3, #1
 80034ac:	e000      	b.n	80034b0 <HAL_GPIO_Init+0x240>
 80034ae:	2300      	movs	r3, #0
 80034b0:	69fa      	ldr	r2, [r7, #28]
 80034b2:	f002 0203 	and.w	r2, r2, #3
 80034b6:	0092      	lsls	r2, r2, #2
 80034b8:	4093      	lsls	r3, r2
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4313      	orrs	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80034c0:	4935      	ldr	r1, [pc, #212]	; (8003598 <HAL_GPIO_Init+0x328>)
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	089b      	lsrs	r3, r3, #2
 80034c6:	3302      	adds	r3, #2
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034ce:	4b3d      	ldr	r3, [pc, #244]	; (80035c4 <HAL_GPIO_Init+0x354>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	43db      	mvns	r3, r3
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	4013      	ands	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034f2:	4a34      	ldr	r2, [pc, #208]	; (80035c4 <HAL_GPIO_Init+0x354>)
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034f8:	4b32      	ldr	r3, [pc, #200]	; (80035c4 <HAL_GPIO_Init+0x354>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	43db      	mvns	r3, r3
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	4013      	ands	r3, r2
 8003506:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	4313      	orrs	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800351c:	4a29      	ldr	r2, [pc, #164]	; (80035c4 <HAL_GPIO_Init+0x354>)
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003522:	4b28      	ldr	r3, [pc, #160]	; (80035c4 <HAL_GPIO_Init+0x354>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	43db      	mvns	r3, r3
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	4013      	ands	r3, r2
 8003530:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	4313      	orrs	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003546:	4a1f      	ldr	r2, [pc, #124]	; (80035c4 <HAL_GPIO_Init+0x354>)
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800354c:	4b1d      	ldr	r3, [pc, #116]	; (80035c4 <HAL_GPIO_Init+0x354>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	43db      	mvns	r3, r3
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	4013      	ands	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	4313      	orrs	r3, r2
 800356e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003570:	4a14      	ldr	r2, [pc, #80]	; (80035c4 <HAL_GPIO_Init+0x354>)
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	3301      	adds	r3, #1
 800357a:	61fb      	str	r3, [r7, #28]
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	2b0f      	cmp	r3, #15
 8003580:	f67f ae86 	bls.w	8003290 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003584:	bf00      	nop
 8003586:	bf00      	nop
 8003588:	3724      	adds	r7, #36	; 0x24
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	40023800 	.word	0x40023800
 8003598:	40013800 	.word	0x40013800
 800359c:	40020000 	.word	0x40020000
 80035a0:	40020400 	.word	0x40020400
 80035a4:	40020800 	.word	0x40020800
 80035a8:	40020c00 	.word	0x40020c00
 80035ac:	40021000 	.word	0x40021000
 80035b0:	40021400 	.word	0x40021400
 80035b4:	40021800 	.word	0x40021800
 80035b8:	40021c00 	.word	0x40021c00
 80035bc:	40022000 	.word	0x40022000
 80035c0:	40022400 	.word	0x40022400
 80035c4:	40013c00 	.word	0x40013c00

080035c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	887b      	ldrh	r3, [r7, #2]
 80035da:	4013      	ands	r3, r2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d002      	beq.n	80035e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035e0:	2301      	movs	r3, #1
 80035e2:	73fb      	strb	r3, [r7, #15]
 80035e4:	e001      	b.n	80035ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035e6:	2300      	movs	r3, #0
 80035e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3714      	adds	r7, #20
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	460b      	mov	r3, r1
 8003602:	807b      	strh	r3, [r7, #2]
 8003604:	4613      	mov	r3, r2
 8003606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003608:	787b      	ldrb	r3, [r7, #1]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800360e:	887a      	ldrh	r2, [r7, #2]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003614:	e003      	b.n	800361e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003616:	887b      	ldrh	r3, [r7, #2]
 8003618:	041a      	lsls	r2, r3, #16
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	619a      	str	r2, [r3, #24]
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
	...

0800362c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	4603      	mov	r3, r0
 8003634:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003636:	4b08      	ldr	r3, [pc, #32]	; (8003658 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003638:	695a      	ldr	r2, [r3, #20]
 800363a:	88fb      	ldrh	r3, [r7, #6]
 800363c:	4013      	ands	r3, r2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d006      	beq.n	8003650 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003642:	4a05      	ldr	r2, [pc, #20]	; (8003658 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003644:	88fb      	ldrh	r3, [r7, #6]
 8003646:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003648:	88fb      	ldrh	r3, [r7, #6]
 800364a:	4618      	mov	r0, r3
 800364c:	f000 f806 	bl	800365c <HAL_GPIO_EXTI_Callback>
  }
}
 8003650:	bf00      	nop
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40013c00 	.word	0x40013c00

0800365c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	4603      	mov	r3, r0
 8003664:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
	...

08003674 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e07f      	b.n	8003786 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d106      	bne.n	80036a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7fd fe46 	bl	800132c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2224      	movs	r2, #36	; 0x24
 80036a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0201 	bic.w	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d107      	bne.n	80036ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036ea:	609a      	str	r2, [r3, #8]
 80036ec:	e006      	b.n	80036fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689a      	ldr	r2, [r3, #8]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80036fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	2b02      	cmp	r3, #2
 8003702:	d104      	bne.n	800370e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800370c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6859      	ldr	r1, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	4b1d      	ldr	r3, [pc, #116]	; (8003790 <HAL_I2C_Init+0x11c>)
 800371a:	430b      	orrs	r3, r1
 800371c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68da      	ldr	r2, [r3, #12]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800372c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691a      	ldr	r2, [r3, #16]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	69d9      	ldr	r1, [r3, #28]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a1a      	ldr	r2, [r3, #32]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	430a      	orrs	r2, r1
 8003756:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f042 0201 	orr.w	r2, r2, #1
 8003766:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2220      	movs	r2, #32
 8003772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	02008000 	.word	0x02008000

08003794 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b088      	sub	sp, #32
 8003798:	af02      	add	r7, sp, #8
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	607a      	str	r2, [r7, #4]
 800379e:	461a      	mov	r2, r3
 80037a0:	460b      	mov	r3, r1
 80037a2:	817b      	strh	r3, [r7, #10]
 80037a4:	4613      	mov	r3, r2
 80037a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b20      	cmp	r3, #32
 80037b2:	f040 80da 	bne.w	800396a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d101      	bne.n	80037c4 <HAL_I2C_Master_Transmit+0x30>
 80037c0:	2302      	movs	r3, #2
 80037c2:	e0d3      	b.n	800396c <HAL_I2C_Master_Transmit+0x1d8>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037cc:	f7fe fa3c 	bl	8001c48 <HAL_GetTick>
 80037d0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	2319      	movs	r3, #25
 80037d8:	2201      	movs	r2, #1
 80037da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 f9e6 	bl	8003bb0 <I2C_WaitOnFlagUntilTimeout>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e0be      	b.n	800396c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2221      	movs	r2, #33	; 0x21
 80037f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2210      	movs	r2, #16
 80037fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	893a      	ldrh	r2, [r7, #8]
 800380e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381a:	b29b      	uxth	r3, r3
 800381c:	2bff      	cmp	r3, #255	; 0xff
 800381e:	d90e      	bls.n	800383e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	22ff      	movs	r2, #255	; 0xff
 8003824:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800382a:	b2da      	uxtb	r2, r3
 800382c:	8979      	ldrh	r1, [r7, #10]
 800382e:	4b51      	ldr	r3, [pc, #324]	; (8003974 <HAL_I2C_Master_Transmit+0x1e0>)
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 fbd0 	bl	8003fdc <I2C_TransferConfig>
 800383c:	e06c      	b.n	8003918 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003842:	b29a      	uxth	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800384c:	b2da      	uxtb	r2, r3
 800384e:	8979      	ldrh	r1, [r7, #10]
 8003850:	4b48      	ldr	r3, [pc, #288]	; (8003974 <HAL_I2C_Master_Transmit+0x1e0>)
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f000 fbbf 	bl	8003fdc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800385e:	e05b      	b.n	8003918 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	6a39      	ldr	r1, [r7, #32]
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 f9e3 	bl	8003c30 <I2C_WaitOnTXISFlagUntilTimeout>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e07b      	b.n	800396c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	781a      	ldrb	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	1c5a      	adds	r2, r3, #1
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388e:	b29b      	uxth	r3, r3
 8003890:	3b01      	subs	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389c:	3b01      	subs	r3, #1
 800389e:	b29a      	uxth	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d034      	beq.n	8003918 <HAL_I2C_Master_Transmit+0x184>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d130      	bne.n	8003918 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	6a3b      	ldr	r3, [r7, #32]
 80038bc:	2200      	movs	r2, #0
 80038be:	2180      	movs	r1, #128	; 0x80
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 f975 	bl	8003bb0 <I2C_WaitOnFlagUntilTimeout>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e04d      	b.n	800396c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	2bff      	cmp	r3, #255	; 0xff
 80038d8:	d90e      	bls.n	80038f8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	22ff      	movs	r2, #255	; 0xff
 80038de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	8979      	ldrh	r1, [r7, #10]
 80038e8:	2300      	movs	r3, #0
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f000 fb73 	bl	8003fdc <I2C_TransferConfig>
 80038f6:	e00f      	b.n	8003918 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003906:	b2da      	uxtb	r2, r3
 8003908:	8979      	ldrh	r1, [r7, #10]
 800390a:	2300      	movs	r3, #0
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 fb62 	bl	8003fdc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391c:	b29b      	uxth	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d19e      	bne.n	8003860 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	6a39      	ldr	r1, [r7, #32]
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 f9c2 	bl	8003cb0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e01a      	b.n	800396c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2220      	movs	r2, #32
 800393c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6859      	ldr	r1, [r3, #4]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	4b0b      	ldr	r3, [pc, #44]	; (8003978 <HAL_I2C_Master_Transmit+0x1e4>)
 800394a:	400b      	ands	r3, r1
 800394c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2220      	movs	r2, #32
 8003952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003966:	2300      	movs	r3, #0
 8003968:	e000      	b.n	800396c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800396a:	2302      	movs	r3, #2
  }
}
 800396c:	4618      	mov	r0, r3
 800396e:	3718      	adds	r7, #24
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	80002000 	.word	0x80002000
 8003978:	fe00e800 	.word	0xfe00e800

0800397c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b088      	sub	sp, #32
 8003980:	af02      	add	r7, sp, #8
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	607a      	str	r2, [r7, #4]
 8003986:	461a      	mov	r2, r3
 8003988:	460b      	mov	r3, r1
 800398a:	817b      	strh	r3, [r7, #10]
 800398c:	4613      	mov	r3, r2
 800398e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b20      	cmp	r3, #32
 800399a:	f040 80db 	bne.w	8003b54 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <HAL_I2C_Master_Receive+0x30>
 80039a8:	2302      	movs	r3, #2
 80039aa:	e0d4      	b.n	8003b56 <HAL_I2C_Master_Receive+0x1da>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80039b4:	f7fe f948 	bl	8001c48 <HAL_GetTick>
 80039b8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	2319      	movs	r3, #25
 80039c0:	2201      	movs	r2, #1
 80039c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 f8f2 	bl	8003bb0 <I2C_WaitOnFlagUntilTimeout>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e0bf      	b.n	8003b56 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2222      	movs	r2, #34	; 0x22
 80039da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2210      	movs	r2, #16
 80039e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	893a      	ldrh	r2, [r7, #8]
 80039f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	2bff      	cmp	r3, #255	; 0xff
 8003a06:	d90e      	bls.n	8003a26 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	22ff      	movs	r2, #255	; 0xff
 8003a0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	8979      	ldrh	r1, [r7, #10]
 8003a16:	4b52      	ldr	r3, [pc, #328]	; (8003b60 <HAL_I2C_Master_Receive+0x1e4>)
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 fadc 	bl	8003fdc <I2C_TransferConfig>
 8003a24:	e06d      	b.n	8003b02 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	8979      	ldrh	r1, [r7, #10]
 8003a38:	4b49      	ldr	r3, [pc, #292]	; (8003b60 <HAL_I2C_Master_Receive+0x1e4>)
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f000 facb 	bl	8003fdc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003a46:	e05c      	b.n	8003b02 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	6a39      	ldr	r1, [r7, #32]
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f000 f96b 	bl	8003d28 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e07c      	b.n	8003b56 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d034      	beq.n	8003b02 <HAL_I2C_Master_Receive+0x186>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d130      	bne.n	8003b02 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	6a3b      	ldr	r3, [r7, #32]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	2180      	movs	r1, #128	; 0x80
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 f880 	bl	8003bb0 <I2C_WaitOnFlagUntilTimeout>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e04d      	b.n	8003b56 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	2bff      	cmp	r3, #255	; 0xff
 8003ac2:	d90e      	bls.n	8003ae2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	22ff      	movs	r2, #255	; 0xff
 8003ac8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	8979      	ldrh	r1, [r7, #10]
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 fa7e 	bl	8003fdc <I2C_TransferConfig>
 8003ae0:	e00f      	b.n	8003b02 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	8979      	ldrh	r1, [r7, #10]
 8003af4:	2300      	movs	r3, #0
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 fa6d 	bl	8003fdc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d19d      	bne.n	8003a48 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	6a39      	ldr	r1, [r7, #32]
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 f8cd 	bl	8003cb0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e01a      	b.n	8003b56 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2220      	movs	r2, #32
 8003b26:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6859      	ldr	r1, [r3, #4]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <HAL_I2C_Master_Receive+0x1e8>)
 8003b34:	400b      	ands	r3, r1
 8003b36:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b50:	2300      	movs	r3, #0
 8003b52:	e000      	b.n	8003b56 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003b54:	2302      	movs	r3, #2
  }
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3718      	adds	r7, #24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	80002400 	.word	0x80002400
 8003b64:	fe00e800 	.word	0xfe00e800

08003b68 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d103      	bne.n	8003b86 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2200      	movs	r2, #0
 8003b84:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d007      	beq.n	8003ba4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699a      	ldr	r2, [r3, #24]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f042 0201 	orr.w	r2, r2, #1
 8003ba2:	619a      	str	r2, [r3, #24]
  }
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	603b      	str	r3, [r7, #0]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bc0:	e022      	b.n	8003c08 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bc8:	d01e      	beq.n	8003c08 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bca:	f7fe f83d 	bl	8001c48 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d302      	bcc.n	8003be0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d113      	bne.n	8003c08 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be4:	f043 0220 	orr.w	r2, r3, #32
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e00f      	b.n	8003c28 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	699a      	ldr	r2, [r3, #24]
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	4013      	ands	r3, r2
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	bf0c      	ite	eq
 8003c18:	2301      	moveq	r3, #1
 8003c1a:	2300      	movne	r3, #0
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	461a      	mov	r2, r3
 8003c20:	79fb      	ldrb	r3, [r7, #7]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d0cd      	beq.n	8003bc2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c3c:	e02c      	b.n	8003c98 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	68b9      	ldr	r1, [r7, #8]
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 f8ea 	bl	8003e1c <I2C_IsErrorOccurred>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e02a      	b.n	8003ca8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c58:	d01e      	beq.n	8003c98 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c5a:	f7fd fff5 	bl	8001c48 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d302      	bcc.n	8003c70 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d113      	bne.n	8003c98 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c74:	f043 0220 	orr.w	r2, r3, #32
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e007      	b.n	8003ca8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d1cb      	bne.n	8003c3e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cbc:	e028      	b.n	8003d10 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	68b9      	ldr	r1, [r7, #8]
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 f8aa 	bl	8003e1c <I2C_IsErrorOccurred>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e026      	b.n	8003d20 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd2:	f7fd ffb9 	bl	8001c48 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d302      	bcc.n	8003ce8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d113      	bne.n	8003d10 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cec:	f043 0220 	orr.w	r2, r3, #32
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e007      	b.n	8003d20 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	f003 0320 	and.w	r3, r3, #32
 8003d1a:	2b20      	cmp	r3, #32
 8003d1c:	d1cf      	bne.n	8003cbe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d34:	e064      	b.n	8003e00 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	68b9      	ldr	r1, [r7, #8]
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f000 f86e 	bl	8003e1c <I2C_IsErrorOccurred>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e062      	b.n	8003e10 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	f003 0320 	and.w	r3, r3, #32
 8003d54:	2b20      	cmp	r3, #32
 8003d56:	d138      	bne.n	8003dca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d105      	bne.n	8003d72 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	e04e      	b.n	8003e10 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	f003 0310 	and.w	r3, r3, #16
 8003d7c:	2b10      	cmp	r3, #16
 8003d7e:	d107      	bne.n	8003d90 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2210      	movs	r2, #16
 8003d86:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2204      	movs	r2, #4
 8003d8c:	645a      	str	r2, [r3, #68]	; 0x44
 8003d8e:	e002      	b.n	8003d96 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6859      	ldr	r1, [r3, #4]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	4b1b      	ldr	r3, [pc, #108]	; (8003e18 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003daa:	400b      	ands	r3, r1
 8003dac:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2220      	movs	r2, #32
 8003db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e022      	b.n	8003e10 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dca:	f7fd ff3d 	bl	8001c48 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d302      	bcc.n	8003de0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10f      	bne.n	8003e00 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de4:	f043 0220 	orr.w	r2, r3, #32
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2220      	movs	r2, #32
 8003df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e007      	b.n	8003e10 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	f003 0304 	and.w	r3, r3, #4
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	d193      	bne.n	8003d36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	fe00e800 	.word	0xfe00e800

08003e1c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b08a      	sub	sp, #40	; 0x28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003e36:	2300      	movs	r3, #0
 8003e38:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	f003 0310 	and.w	r3, r3, #16
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d068      	beq.n	8003f1a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2210      	movs	r2, #16
 8003e4e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e50:	e049      	b.n	8003ee6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e58:	d045      	beq.n	8003ee6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e5a:	f7fd fef5 	bl	8001c48 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d302      	bcc.n	8003e70 <I2C_IsErrorOccurred+0x54>
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d13a      	bne.n	8003ee6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e7a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e82:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e92:	d121      	bne.n	8003ed8 <I2C_IsErrorOccurred+0xbc>
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e9a:	d01d      	beq.n	8003ed8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003e9c:	7cfb      	ldrb	r3, [r7, #19]
 8003e9e:	2b20      	cmp	r3, #32
 8003ea0:	d01a      	beq.n	8003ed8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003eb0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003eb2:	f7fd fec9 	bl	8001c48 <HAL_GetTick>
 8003eb6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003eb8:	e00e      	b.n	8003ed8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003eba:	f7fd fec5 	bl	8001c48 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b19      	cmp	r3, #25
 8003ec6:	d907      	bls.n	8003ed8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
 8003eca:	f043 0320 	orr.w	r3, r3, #32
 8003ece:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003ed6:	e006      	b.n	8003ee6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	f003 0320 	and.w	r3, r3, #32
 8003ee2:	2b20      	cmp	r3, #32
 8003ee4:	d1e9      	bne.n	8003eba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	f003 0320 	and.w	r3, r3, #32
 8003ef0:	2b20      	cmp	r3, #32
 8003ef2:	d003      	beq.n	8003efc <I2C_IsErrorOccurred+0xe0>
 8003ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0aa      	beq.n	8003e52 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003efc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d103      	bne.n	8003f0c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	f043 0304 	orr.w	r3, r3, #4
 8003f12:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00b      	beq.n	8003f44 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003f2c:	6a3b      	ldr	r3, [r7, #32]
 8003f2e:	f043 0301 	orr.w	r3, r3, #1
 8003f32:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00b      	beq.n	8003f66 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	f043 0308 	orr.w	r3, r3, #8
 8003f54:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f5e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00b      	beq.n	8003f88 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	f043 0302 	orr.w	r3, r3, #2
 8003f76:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003f88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d01c      	beq.n	8003fca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f7ff fde9 	bl	8003b68 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6859      	ldr	r1, [r3, #4]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	4b0d      	ldr	r3, [pc, #52]	; (8003fd8 <I2C_IsErrorOccurred+0x1bc>)
 8003fa2:	400b      	ands	r3, r1
 8003fa4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003faa:	6a3b      	ldr	r3, [r7, #32]
 8003fac:	431a      	orrs	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003fca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3728      	adds	r7, #40	; 0x28
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	fe00e800 	.word	0xfe00e800

08003fdc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	607b      	str	r3, [r7, #4]
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	817b      	strh	r3, [r7, #10]
 8003fea:	4613      	mov	r3, r2
 8003fec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003fee:	897b      	ldrh	r3, [r7, #10]
 8003ff0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ff4:	7a7b      	ldrb	r3, [r7, #9]
 8003ff6:	041b      	lsls	r3, r3, #16
 8003ff8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ffc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	4313      	orrs	r3, r2
 8004006:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800400a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	6a3b      	ldr	r3, [r7, #32]
 8004014:	0d5b      	lsrs	r3, r3, #21
 8004016:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800401a:	4b08      	ldr	r3, [pc, #32]	; (800403c <I2C_TransferConfig+0x60>)
 800401c:	430b      	orrs	r3, r1
 800401e:	43db      	mvns	r3, r3
 8004020:	ea02 0103 	and.w	r1, r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	430a      	orrs	r2, r1
 800402c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800402e:	bf00      	nop
 8004030:	371c      	adds	r7, #28
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	03ff63ff 	.word	0x03ff63ff

08004040 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b20      	cmp	r3, #32
 8004054:	d138      	bne.n	80040c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800405c:	2b01      	cmp	r3, #1
 800405e:	d101      	bne.n	8004064 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004060:	2302      	movs	r3, #2
 8004062:	e032      	b.n	80040ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2224      	movs	r2, #36	; 0x24
 8004070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0201 	bic.w	r2, r2, #1
 8004082:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004092:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6819      	ldr	r1, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 0201 	orr.w	r2, r2, #1
 80040b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2220      	movs	r2, #32
 80040b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040c4:	2300      	movs	r3, #0
 80040c6:	e000      	b.n	80040ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80040c8:	2302      	movs	r3, #2
  }
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b085      	sub	sp, #20
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
 80040de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b20      	cmp	r3, #32
 80040ea:	d139      	bne.n	8004160 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d101      	bne.n	80040fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80040f6:	2302      	movs	r3, #2
 80040f8:	e033      	b.n	8004162 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2224      	movs	r2, #36	; 0x24
 8004106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 0201 	bic.w	r2, r2, #1
 8004118:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004128:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	021b      	lsls	r3, r3, #8
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	4313      	orrs	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f042 0201 	orr.w	r2, r2, #1
 800414a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2220      	movs	r2, #32
 8004150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800415c:	2300      	movs	r3, #0
 800415e:	e000      	b.n	8004162 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004160:	2302      	movs	r3, #2
  }
}
 8004162:	4618      	mov	r0, r3
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800416e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004170:	b08f      	sub	sp, #60	; 0x3c
 8004172:	af0a      	add	r7, sp, #40	; 0x28
 8004174:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e116      	b.n	80043ae <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d106      	bne.n	80041a0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f00c f804 	bl	80101a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2203      	movs	r2, #3
 80041a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d102      	bne.n	80041ba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f004 ffdb 	bl	800917a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	603b      	str	r3, [r7, #0]
 80041ca:	687e      	ldr	r6, [r7, #4]
 80041cc:	466d      	mov	r5, sp
 80041ce:	f106 0410 	add.w	r4, r6, #16
 80041d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041de:	e885 0003 	stmia.w	r5, {r0, r1}
 80041e2:	1d33      	adds	r3, r6, #4
 80041e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041e6:	6838      	ldr	r0, [r7, #0]
 80041e8:	f004 febc 	bl	8008f64 <USB_CoreInit>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d005      	beq.n	80041fe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2202      	movs	r2, #2
 80041f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e0d7      	b.n	80043ae <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2100      	movs	r1, #0
 8004204:	4618      	mov	r0, r3
 8004206:	f004 ffc9 	bl	800919c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800420a:	2300      	movs	r3, #0
 800420c:	73fb      	strb	r3, [r7, #15]
 800420e:	e04a      	b.n	80042a6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004210:	7bfa      	ldrb	r2, [r7, #15]
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	4613      	mov	r3, r2
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	4413      	add	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	440b      	add	r3, r1
 800421e:	333d      	adds	r3, #61	; 0x3d
 8004220:	2201      	movs	r2, #1
 8004222:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004224:	7bfa      	ldrb	r2, [r7, #15]
 8004226:	6879      	ldr	r1, [r7, #4]
 8004228:	4613      	mov	r3, r2
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	4413      	add	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	440b      	add	r3, r1
 8004232:	333c      	adds	r3, #60	; 0x3c
 8004234:	7bfa      	ldrb	r2, [r7, #15]
 8004236:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004238:	7bfa      	ldrb	r2, [r7, #15]
 800423a:	7bfb      	ldrb	r3, [r7, #15]
 800423c:	b298      	uxth	r0, r3
 800423e:	6879      	ldr	r1, [r7, #4]
 8004240:	4613      	mov	r3, r2
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	4413      	add	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	440b      	add	r3, r1
 800424a:	3344      	adds	r3, #68	; 0x44
 800424c:	4602      	mov	r2, r0
 800424e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004250:	7bfa      	ldrb	r2, [r7, #15]
 8004252:	6879      	ldr	r1, [r7, #4]
 8004254:	4613      	mov	r3, r2
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	4413      	add	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	3340      	adds	r3, #64	; 0x40
 8004260:	2200      	movs	r2, #0
 8004262:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004264:	7bfa      	ldrb	r2, [r7, #15]
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	4613      	mov	r3, r2
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	4413      	add	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	440b      	add	r3, r1
 8004272:	3348      	adds	r3, #72	; 0x48
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004278:	7bfa      	ldrb	r2, [r7, #15]
 800427a:	6879      	ldr	r1, [r7, #4]
 800427c:	4613      	mov	r3, r2
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	4413      	add	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	440b      	add	r3, r1
 8004286:	334c      	adds	r3, #76	; 0x4c
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800428c:	7bfa      	ldrb	r2, [r7, #15]
 800428e:	6879      	ldr	r1, [r7, #4]
 8004290:	4613      	mov	r3, r2
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	4413      	add	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	440b      	add	r3, r1
 800429a:	3354      	adds	r3, #84	; 0x54
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042a0:	7bfb      	ldrb	r3, [r7, #15]
 80042a2:	3301      	adds	r3, #1
 80042a4:	73fb      	strb	r3, [r7, #15]
 80042a6:	7bfa      	ldrb	r2, [r7, #15]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d3af      	bcc.n	8004210 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042b0:	2300      	movs	r3, #0
 80042b2:	73fb      	strb	r3, [r7, #15]
 80042b4:	e044      	b.n	8004340 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80042b6:	7bfa      	ldrb	r2, [r7, #15]
 80042b8:	6879      	ldr	r1, [r7, #4]
 80042ba:	4613      	mov	r3, r2
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	4413      	add	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	440b      	add	r3, r1
 80042c4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80042c8:	2200      	movs	r2, #0
 80042ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80042cc:	7bfa      	ldrb	r2, [r7, #15]
 80042ce:	6879      	ldr	r1, [r7, #4]
 80042d0:	4613      	mov	r3, r2
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	4413      	add	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	440b      	add	r3, r1
 80042da:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80042de:	7bfa      	ldrb	r2, [r7, #15]
 80042e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80042e2:	7bfa      	ldrb	r2, [r7, #15]
 80042e4:	6879      	ldr	r1, [r7, #4]
 80042e6:	4613      	mov	r3, r2
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	4413      	add	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	440b      	add	r3, r1
 80042f0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80042f4:	2200      	movs	r2, #0
 80042f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80042f8:	7bfa      	ldrb	r2, [r7, #15]
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	4613      	mov	r3, r2
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	4413      	add	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800430a:	2200      	movs	r2, #0
 800430c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800430e:	7bfa      	ldrb	r2, [r7, #15]
 8004310:	6879      	ldr	r1, [r7, #4]
 8004312:	4613      	mov	r3, r2
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	4413      	add	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	440b      	add	r3, r1
 800431c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004320:	2200      	movs	r2, #0
 8004322:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004324:	7bfa      	ldrb	r2, [r7, #15]
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	4613      	mov	r3, r2
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	4413      	add	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	440b      	add	r3, r1
 8004332:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004336:	2200      	movs	r2, #0
 8004338:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800433a:	7bfb      	ldrb	r3, [r7, #15]
 800433c:	3301      	adds	r3, #1
 800433e:	73fb      	strb	r3, [r7, #15]
 8004340:	7bfa      	ldrb	r2, [r7, #15]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	429a      	cmp	r2, r3
 8004348:	d3b5      	bcc.n	80042b6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	603b      	str	r3, [r7, #0]
 8004350:	687e      	ldr	r6, [r7, #4]
 8004352:	466d      	mov	r5, sp
 8004354:	f106 0410 	add.w	r4, r6, #16
 8004358:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800435a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800435c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800435e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004360:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004364:	e885 0003 	stmia.w	r5, {r0, r1}
 8004368:	1d33      	adds	r3, r6, #4
 800436a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800436c:	6838      	ldr	r0, [r7, #0]
 800436e:	f004 ff61 	bl	8009234 <USB_DevInit>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d005      	beq.n	8004384 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e014      	b.n	80043ae <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	2b01      	cmp	r3, #1
 800439a:	d102      	bne.n	80043a2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f001 f97b 	bl	8005698 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f006 f8af 	bl	800a50a <USB_DevDisconnect>

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080043b6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b082      	sub	sp, #8
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d101      	bne.n	80043cc <HAL_PCD_Start+0x16>
 80043c8:	2302      	movs	r3, #2
 80043ca:	e012      	b.n	80043f2 <HAL_PCD_Start+0x3c>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4618      	mov	r0, r3
 80043da:	f004 febd 	bl	8009158 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f006 f870 	bl	800a4c8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80043fa:	b590      	push	{r4, r7, lr}
 80043fc:	b08d      	sub	sp, #52	; 0x34
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4618      	mov	r0, r3
 8004412:	f006 f92e 	bl	800a672 <USB_GetMode>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	f040 84b7 	bne.w	8004d8c <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f006 f892 	bl	800a54c <USB_ReadInterrupts>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 84ad 	beq.w	8004d8a <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	0a1b      	lsrs	r3, r3, #8
 800443a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4618      	mov	r0, r3
 800444a:	f006 f87f 	bl	800a54c <USB_ReadInterrupts>
 800444e:	4603      	mov	r3, r0
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b02      	cmp	r3, #2
 8004456:	d107      	bne.n	8004468 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	695a      	ldr	r2, [r3, #20]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f002 0202 	and.w	r2, r2, #2
 8004466:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4618      	mov	r0, r3
 800446e:	f006 f86d 	bl	800a54c <USB_ReadInterrupts>
 8004472:	4603      	mov	r3, r0
 8004474:	f003 0310 	and.w	r3, r3, #16
 8004478:	2b10      	cmp	r3, #16
 800447a:	d161      	bne.n	8004540 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699a      	ldr	r2, [r3, #24]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0210 	bic.w	r2, r2, #16
 800448a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800448c:	6a3b      	ldr	r3, [r7, #32]
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	f003 020f 	and.w	r2, r3, #15
 8004498:	4613      	mov	r3, r2
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	4413      	add	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	4413      	add	r3, r2
 80044a8:	3304      	adds	r3, #4
 80044aa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	0c5b      	lsrs	r3, r3, #17
 80044b0:	f003 030f 	and.w	r3, r3, #15
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d124      	bne.n	8004502 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80044be:	4013      	ands	r3, r2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d035      	beq.n	8004530 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	091b      	lsrs	r3, r3, #4
 80044cc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80044ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	461a      	mov	r2, r3
 80044d6:	6a38      	ldr	r0, [r7, #32]
 80044d8:	f005 fea4 	bl	800a224 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	691a      	ldr	r2, [r3, #16]
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	091b      	lsrs	r3, r3, #4
 80044e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044e8:	441a      	add	r2, r3
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	6a1a      	ldr	r2, [r3, #32]
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	091b      	lsrs	r3, r3, #4
 80044f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044fa:	441a      	add	r2, r3
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	621a      	str	r2, [r3, #32]
 8004500:	e016      	b.n	8004530 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	0c5b      	lsrs	r3, r3, #17
 8004506:	f003 030f 	and.w	r3, r3, #15
 800450a:	2b06      	cmp	r3, #6
 800450c:	d110      	bne.n	8004530 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004514:	2208      	movs	r2, #8
 8004516:	4619      	mov	r1, r3
 8004518:	6a38      	ldr	r0, [r7, #32]
 800451a:	f005 fe83 	bl	800a224 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	6a1a      	ldr	r2, [r3, #32]
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	091b      	lsrs	r3, r3, #4
 8004526:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800452a:	441a      	add	r2, r3
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	699a      	ldr	r2, [r3, #24]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f042 0210 	orr.w	r2, r2, #16
 800453e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4618      	mov	r0, r3
 8004546:	f006 f801 	bl	800a54c <USB_ReadInterrupts>
 800454a:	4603      	mov	r3, r0
 800454c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004550:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004554:	f040 80a7 	bne.w	80046a6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004558:	2300      	movs	r3, #0
 800455a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4618      	mov	r0, r3
 8004562:	f006 f806 	bl	800a572 <USB_ReadDevAllOutEpInterrupt>
 8004566:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004568:	e099      	b.n	800469e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800456a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 808e 	beq.w	8004692 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800457c:	b2d2      	uxtb	r2, r2
 800457e:	4611      	mov	r1, r2
 8004580:	4618      	mov	r0, r3
 8004582:	f006 f82a 	bl	800a5da <USB_ReadDevOutEPInterrupt>
 8004586:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00c      	beq.n	80045ac <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004594:	015a      	lsls	r2, r3, #5
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	4413      	add	r3, r2
 800459a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800459e:	461a      	mov	r2, r3
 80045a0:	2301      	movs	r3, #1
 80045a2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80045a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 fef0 	bl	800538c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f003 0308 	and.w	r3, r3, #8
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00c      	beq.n	80045d0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	015a      	lsls	r2, r3, #5
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	4413      	add	r3, r2
 80045be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c2:	461a      	mov	r2, r3
 80045c4:	2308      	movs	r3, #8
 80045c6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80045c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 ffc6 	bl	800555c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	f003 0310 	and.w	r3, r3, #16
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d008      	beq.n	80045ec <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	015a      	lsls	r2, r3, #5
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e6:	461a      	mov	r2, r3
 80045e8:	2310      	movs	r3, #16
 80045ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d030      	beq.n	8004658 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fe:	2b80      	cmp	r3, #128	; 0x80
 8004600:	d109      	bne.n	8004616 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	69fa      	ldr	r2, [r7, #28]
 800460c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004610:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004614:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004618:	4613      	mov	r3, r2
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	4413      	add	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	4413      	add	r3, r2
 8004628:	3304      	adds	r3, #4
 800462a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	78db      	ldrb	r3, [r3, #3]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d108      	bne.n	8004646 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	2200      	movs	r2, #0
 8004638:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463c:	b2db      	uxtb	r3, r3
 800463e:	4619      	mov	r1, r3
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f00b fed5 	bl	80103f0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004648:	015a      	lsls	r2, r3, #5
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	4413      	add	r3, r2
 800464e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004652:	461a      	mov	r2, r3
 8004654:	2302      	movs	r3, #2
 8004656:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f003 0320 	and.w	r3, r3, #32
 800465e:	2b00      	cmp	r3, #0
 8004660:	d008      	beq.n	8004674 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	015a      	lsls	r2, r3, #5
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	4413      	add	r3, r2
 800466a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466e:	461a      	mov	r2, r3
 8004670:	2320      	movs	r3, #32
 8004672:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d009      	beq.n	8004692 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	015a      	lsls	r2, r3, #5
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	4413      	add	r3, r2
 8004686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800468a:	461a      	mov	r2, r3
 800468c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004690:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	3301      	adds	r3, #1
 8004696:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469a:	085b      	lsrs	r3, r3, #1
 800469c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800469e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f47f af62 	bne.w	800456a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f005 ff4e 	bl	800a54c <USB_ReadInterrupts>
 80046b0:	4603      	mov	r3, r0
 80046b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046ba:	f040 80db 	bne.w	8004874 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f005 ff6f 	bl	800a5a6 <USB_ReadDevAllInEpInterrupt>
 80046c8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80046ce:	e0cd      	b.n	800486c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80046d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 80c2 	beq.w	8004860 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	4611      	mov	r1, r2
 80046e6:	4618      	mov	r0, r3
 80046e8:	f005 ff95 	bl	800a616 <USB_ReadDevInEPInterrupt>
 80046ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d057      	beq.n	80047a8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	f003 030f 	and.w	r3, r3, #15
 80046fe:	2201      	movs	r2, #1
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800470c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	43db      	mvns	r3, r3
 8004712:	69f9      	ldr	r1, [r7, #28]
 8004714:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004718:	4013      	ands	r3, r2
 800471a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	4413      	add	r3, r2
 8004724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004728:	461a      	mov	r2, r3
 800472a:	2301      	movs	r3, #1
 800472c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d132      	bne.n	800479c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800473a:	4613      	mov	r3, r2
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	4413      	add	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	440b      	add	r3, r1
 8004744:	334c      	adds	r3, #76	; 0x4c
 8004746:	6819      	ldr	r1, [r3, #0]
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800474c:	4613      	mov	r3, r2
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	4413      	add	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4403      	add	r3, r0
 8004756:	3348      	adds	r3, #72	; 0x48
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4419      	add	r1, r3
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004760:	4613      	mov	r3, r2
 8004762:	00db      	lsls	r3, r3, #3
 8004764:	4413      	add	r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	4403      	add	r3, r0
 800476a:	334c      	adds	r3, #76	; 0x4c
 800476c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004770:	2b00      	cmp	r3, #0
 8004772:	d113      	bne.n	800479c <HAL_PCD_IRQHandler+0x3a2>
 8004774:	6879      	ldr	r1, [r7, #4]
 8004776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004778:	4613      	mov	r3, r2
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	4413      	add	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	440b      	add	r3, r1
 8004782:	3354      	adds	r3, #84	; 0x54
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d108      	bne.n	800479c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6818      	ldr	r0, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004794:	461a      	mov	r2, r3
 8004796:	2101      	movs	r1, #1
 8004798:	f005 ff9e 	bl	800a6d8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	4619      	mov	r1, r3
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f00b fd9f 	bl	80102e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	f003 0308 	and.w	r3, r3, #8
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d008      	beq.n	80047c4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80047b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b4:	015a      	lsls	r2, r3, #5
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	4413      	add	r3, r2
 80047ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047be:	461a      	mov	r2, r3
 80047c0:	2308      	movs	r3, #8
 80047c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	f003 0310 	and.w	r3, r3, #16
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d008      	beq.n	80047e0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	015a      	lsls	r2, r3, #5
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	4413      	add	r3, r2
 80047d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047da:	461a      	mov	r2, r3
 80047dc:	2310      	movs	r3, #16
 80047de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d008      	beq.n	80047fc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	015a      	lsls	r2, r3, #5
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f6:	461a      	mov	r2, r3
 80047f8:	2340      	movs	r3, #64	; 0x40
 80047fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d023      	beq.n	800484e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004806:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004808:	6a38      	ldr	r0, [r7, #32]
 800480a:	f004 fe71 	bl	80094f0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800480e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004810:	4613      	mov	r3, r2
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	4413      	add	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	3338      	adds	r3, #56	; 0x38
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	4413      	add	r3, r2
 800481e:	3304      	adds	r3, #4
 8004820:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	78db      	ldrb	r3, [r3, #3]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d108      	bne.n	800483c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2200      	movs	r2, #0
 800482e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	b2db      	uxtb	r3, r3
 8004834:	4619      	mov	r1, r3
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f00b fdec 	bl	8010414 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004848:	461a      	mov	r2, r3
 800484a:	2302      	movs	r3, #2
 800484c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004858:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 fd08 	bl	8005270 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	3301      	adds	r3, #1
 8004864:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004868:	085b      	lsrs	r3, r3, #1
 800486a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800486c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486e:	2b00      	cmp	r3, #0
 8004870:	f47f af2e 	bne.w	80046d0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4618      	mov	r0, r3
 800487a:	f005 fe67 	bl	800a54c <USB_ReadInterrupts>
 800487e:	4603      	mov	r3, r0
 8004880:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004884:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004888:	d122      	bne.n	80048d0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	69fa      	ldr	r2, [r7, #28]
 8004894:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004898:	f023 0301 	bic.w	r3, r3, #1
 800489c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d108      	bne.n	80048ba <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80048b0:	2100      	movs	r1, #0
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f00b ff66 	bl	8010784 <HAL_PCDEx_LPM_Callback>
 80048b8:	e002      	b.n	80048c0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f00b fd8a 	bl	80103d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	695a      	ldr	r2, [r3, #20]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80048ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f005 fe39 	bl	800a54c <USB_ReadInterrupts>
 80048da:	4603      	mov	r3, r0
 80048dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048e4:	d112      	bne.n	800490c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d102      	bne.n	80048fc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f00b fd46 	bl	8010388 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	695a      	ldr	r2, [r3, #20]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800490a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4618      	mov	r0, r3
 8004912:	f005 fe1b 	bl	800a54c <USB_ReadInterrupts>
 8004916:	4603      	mov	r3, r0
 8004918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800491c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004920:	d121      	bne.n	8004966 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	695a      	ldr	r2, [r3, #20]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004930:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004938:	2b00      	cmp	r3, #0
 800493a:	d111      	bne.n	8004960 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800494a:	089b      	lsrs	r3, r3, #2
 800494c:	f003 020f 	and.w	r2, r3, #15
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004956:	2101      	movs	r1, #1
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f00b ff13 	bl	8010784 <HAL_PCDEx_LPM_Callback>
 800495e:	e002      	b.n	8004966 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f00b fd11 	bl	8010388 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4618      	mov	r0, r3
 800496c:	f005 fdee 	bl	800a54c <USB_ReadInterrupts>
 8004970:	4603      	mov	r3, r0
 8004972:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800497a:	f040 80b7 	bne.w	8004aec <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	69fa      	ldr	r2, [r7, #28]
 8004988:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800498c:	f023 0301 	bic.w	r3, r3, #1
 8004990:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2110      	movs	r1, #16
 8004998:	4618      	mov	r0, r3
 800499a:	f004 fda9 	bl	80094f0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800499e:	2300      	movs	r3, #0
 80049a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049a2:	e046      	b.n	8004a32 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80049a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a6:	015a      	lsls	r2, r3, #5
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	4413      	add	r3, r2
 80049ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b0:	461a      	mov	r2, r3
 80049b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049b6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80049b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ba:	015a      	lsls	r2, r3, #5
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	4413      	add	r3, r2
 80049c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049c8:	0151      	lsls	r1, r2, #5
 80049ca:	69fa      	ldr	r2, [r7, #28]
 80049cc:	440a      	add	r2, r1
 80049ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80049d6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80049d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049da:	015a      	lsls	r2, r3, #5
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	4413      	add	r3, r2
 80049e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e4:	461a      	mov	r2, r3
 80049e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049ea:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80049ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049fc:	0151      	lsls	r1, r2, #5
 80049fe:	69fa      	ldr	r2, [r7, #28]
 8004a00:	440a      	add	r2, r1
 8004a02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a0a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a1c:	0151      	lsls	r1, r2, #5
 8004a1e:	69fa      	ldr	r2, [r7, #28]
 8004a20:	440a      	add	r2, r1
 8004a22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a2a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2e:	3301      	adds	r3, #1
 8004a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d3b3      	bcc.n	80049a4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a42:	69db      	ldr	r3, [r3, #28]
 8004a44:	69fa      	ldr	r2, [r7, #28]
 8004a46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a4a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004a4e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d016      	beq.n	8004a86 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a62:	69fa      	ldr	r2, [r7, #28]
 8004a64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a68:	f043 030b 	orr.w	r3, r3, #11
 8004a6c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a78:	69fa      	ldr	r2, [r7, #28]
 8004a7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a7e:	f043 030b 	orr.w	r3, r3, #11
 8004a82:	6453      	str	r3, [r2, #68]	; 0x44
 8004a84:	e015      	b.n	8004ab2 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a8c:	695a      	ldr	r2, [r3, #20]
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a94:	4619      	mov	r1, r3
 8004a96:	f242 032b 	movw	r3, #8235	; 0x202b
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	69fa      	ldr	r2, [r7, #28]
 8004aa8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004aac:	f043 030b 	orr.w	r3, r3, #11
 8004ab0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	69fa      	ldr	r2, [r7, #28]
 8004abc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ac0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004ac4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6818      	ldr	r0, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	f005 fdfe 	bl	800a6d8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	695a      	ldr	r2, [r3, #20]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004aea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f005 fd2b 	bl	800a54c <USB_ReadInterrupts>
 8004af6:	4603      	mov	r3, r0
 8004af8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004afc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b00:	d124      	bne.n	8004b4c <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f005 fdc2 	bl	800a690 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f004 fd6a 	bl	80095ea <USB_GetDevSpeed>
 8004b16:	4603      	mov	r3, r0
 8004b18:	461a      	mov	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681c      	ldr	r4, [r3, #0]
 8004b22:	f001 fa7d 	bl	8006020 <HAL_RCC_GetHCLKFreq>
 8004b26:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	461a      	mov	r2, r3
 8004b30:	4620      	mov	r0, r4
 8004b32:	f004 fa6f 	bl	8009014 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f00b fbfd 	bl	8010336 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	695a      	ldr	r2, [r3, #20]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004b4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f005 fcfb 	bl	800a54c <USB_ReadInterrupts>
 8004b56:	4603      	mov	r3, r0
 8004b58:	f003 0308 	and.w	r3, r3, #8
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d10a      	bne.n	8004b76 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f00b fbda 	bl	801031a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	695a      	ldr	r2, [r3, #20]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f002 0208 	and.w	r2, r2, #8
 8004b74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f005 fce6 	bl	800a54c <USB_ReadInterrupts>
 8004b80:	4603      	mov	r3, r0
 8004b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b86:	2b80      	cmp	r3, #128	; 0x80
 8004b88:	d122      	bne.n	8004bd0 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004b8a:	6a3b      	ldr	r3, [r7, #32]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b92:	6a3b      	ldr	r3, [r7, #32]
 8004b94:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b96:	2301      	movs	r3, #1
 8004b98:	627b      	str	r3, [r7, #36]	; 0x24
 8004b9a:	e014      	b.n	8004bc6 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004b9c:	6879      	ldr	r1, [r7, #4]
 8004b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	00db      	lsls	r3, r3, #3
 8004ba4:	4413      	add	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	440b      	add	r3, r1
 8004baa:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d105      	bne.n	8004bc0 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	4619      	mov	r1, r3
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 fb27 	bl	800520e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d3e5      	bcc.n	8004b9c <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f005 fcb9 	bl	800a54c <USB_ReadInterrupts>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004be0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004be4:	d13b      	bne.n	8004c5e <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004be6:	2301      	movs	r3, #1
 8004be8:	627b      	str	r3, [r7, #36]	; 0x24
 8004bea:	e02b      	b.n	8004c44 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	015a      	lsls	r2, r3, #5
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004bfc:	6879      	ldr	r1, [r7, #4]
 8004bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c00:	4613      	mov	r3, r2
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	4413      	add	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	440b      	add	r3, r1
 8004c0a:	3340      	adds	r3, #64	; 0x40
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d115      	bne.n	8004c3e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004c12:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	da12      	bge.n	8004c3e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004c18:	6879      	ldr	r1, [r7, #4]
 8004c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	4413      	add	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	440b      	add	r3, r1
 8004c26:	333f      	adds	r3, #63	; 0x3f
 8004c28:	2201      	movs	r2, #1
 8004c2a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	4619      	mov	r1, r3
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 fae8 	bl	800520e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	3301      	adds	r3, #1
 8004c42:	627b      	str	r3, [r7, #36]	; 0x24
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d3ce      	bcc.n	8004bec <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	695a      	ldr	r2, [r3, #20]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004c5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f005 fc72 	bl	800a54c <USB_ReadInterrupts>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c72:	d155      	bne.n	8004d20 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c74:	2301      	movs	r3, #1
 8004c76:	627b      	str	r3, [r7, #36]	; 0x24
 8004c78:	e045      	b.n	8004d06 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c8a:	6879      	ldr	r1, [r7, #4]
 8004c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c8e:	4613      	mov	r3, r2
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	4413      	add	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	440b      	add	r3, r1
 8004c98:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d12e      	bne.n	8004d00 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004ca2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	da2b      	bge.n	8004d00 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004cb4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d121      	bne.n	8004d00 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004cbc:	6879      	ldr	r1, [r7, #4]
 8004cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	00db      	lsls	r3, r3, #3
 8004cc4:	4413      	add	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	440b      	add	r3, r1
 8004cca:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004cce:	2201      	movs	r2, #1
 8004cd0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004cd2:	6a3b      	ldr	r3, [r7, #32]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10a      	bne.n	8004d00 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	69fa      	ldr	r2, [r7, #28]
 8004cf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cf8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cfc:	6053      	str	r3, [r2, #4]
            break;
 8004cfe:	e007      	b.n	8004d10 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	3301      	adds	r3, #1
 8004d04:	627b      	str	r3, [r7, #36]	; 0x24
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d3b4      	bcc.n	8004c7a <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	695a      	ldr	r2, [r3, #20]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004d1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f005 fc11 	bl	800a54c <USB_ReadInterrupts>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d34:	d10a      	bne.n	8004d4c <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f00b fb7e 	bl	8010438 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	695a      	ldr	r2, [r3, #20]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004d4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f005 fbfb 	bl	800a54c <USB_ReadInterrupts>
 8004d56:	4603      	mov	r3, r0
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b04      	cmp	r3, #4
 8004d5e:	d115      	bne.n	8004d8c <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	f003 0304 	and.w	r3, r3, #4
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d002      	beq.n	8004d78 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f00b fb6e 	bl	8010454 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6859      	ldr	r1, [r3, #4]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	605a      	str	r2, [r3, #4]
 8004d88:	e000      	b.n	8004d8c <HAL_PCD_IRQHandler+0x992>
      return;
 8004d8a:	bf00      	nop
    }
  }
}
 8004d8c:	3734      	adds	r7, #52	; 0x34
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd90      	pop	{r4, r7, pc}

08004d92 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b082      	sub	sp, #8
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d101      	bne.n	8004dac <HAL_PCD_SetAddress+0x1a>
 8004da8:	2302      	movs	r3, #2
 8004daa:	e013      	b.n	8004dd4 <HAL_PCD_SetAddress+0x42>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	78fa      	ldrb	r2, [r7, #3]
 8004db8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	78fa      	ldrb	r2, [r7, #3]
 8004dc2:	4611      	mov	r1, r2
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f005 fb59 	bl	800a47c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	4608      	mov	r0, r1
 8004de6:	4611      	mov	r1, r2
 8004de8:	461a      	mov	r2, r3
 8004dea:	4603      	mov	r3, r0
 8004dec:	70fb      	strb	r3, [r7, #3]
 8004dee:	460b      	mov	r3, r1
 8004df0:	803b      	strh	r3, [r7, #0]
 8004df2:	4613      	mov	r3, r2
 8004df4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004df6:	2300      	movs	r3, #0
 8004df8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004dfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	da0f      	bge.n	8004e22 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e02:	78fb      	ldrb	r3, [r7, #3]
 8004e04:	f003 020f 	and.w	r2, r3, #15
 8004e08:	4613      	mov	r3, r2
 8004e0a:	00db      	lsls	r3, r3, #3
 8004e0c:	4413      	add	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	3338      	adds	r3, #56	; 0x38
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	4413      	add	r3, r2
 8004e16:	3304      	adds	r3, #4
 8004e18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	705a      	strb	r2, [r3, #1]
 8004e20:	e00f      	b.n	8004e42 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e22:	78fb      	ldrb	r3, [r7, #3]
 8004e24:	f003 020f 	and.w	r2, r3, #15
 8004e28:	4613      	mov	r3, r2
 8004e2a:	00db      	lsls	r3, r3, #3
 8004e2c:	4413      	add	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	4413      	add	r3, r2
 8004e38:	3304      	adds	r3, #4
 8004e3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004e42:	78fb      	ldrb	r3, [r7, #3]
 8004e44:	f003 030f 	and.w	r3, r3, #15
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004e4e:	883a      	ldrh	r2, [r7, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	78ba      	ldrb	r2, [r7, #2]
 8004e58:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	785b      	ldrb	r3, [r3, #1]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d004      	beq.n	8004e6c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004e6c:	78bb      	ldrb	r3, [r7, #2]
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d102      	bne.n	8004e78 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d101      	bne.n	8004e86 <HAL_PCD_EP_Open+0xaa>
 8004e82:	2302      	movs	r3, #2
 8004e84:	e00e      	b.n	8004ea4 <HAL_PCD_EP_Open+0xc8>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68f9      	ldr	r1, [r7, #12]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f004 fbcd 	bl	8009634 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004ea2:	7afb      	ldrb	r3, [r7, #11]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004eb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	da0f      	bge.n	8004ee0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ec0:	78fb      	ldrb	r3, [r7, #3]
 8004ec2:	f003 020f 	and.w	r2, r3, #15
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	00db      	lsls	r3, r3, #3
 8004eca:	4413      	add	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	3338      	adds	r3, #56	; 0x38
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2201      	movs	r2, #1
 8004edc:	705a      	strb	r2, [r3, #1]
 8004ede:	e00f      	b.n	8004f00 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ee0:	78fb      	ldrb	r3, [r7, #3]
 8004ee2:	f003 020f 	and.w	r2, r3, #15
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	00db      	lsls	r3, r3, #3
 8004eea:	4413      	add	r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	3304      	adds	r3, #4
 8004ef8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004f00:	78fb      	ldrb	r3, [r7, #3]
 8004f02:	f003 030f 	and.w	r3, r3, #15
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d101      	bne.n	8004f1a <HAL_PCD_EP_Close+0x6e>
 8004f16:	2302      	movs	r3, #2
 8004f18:	e00e      	b.n	8004f38 <HAL_PCD_EP_Close+0x8c>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68f9      	ldr	r1, [r7, #12]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f004 fc0b 	bl	8009744 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	607a      	str	r2, [r7, #4]
 8004f4a:	603b      	str	r3, [r7, #0]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f50:	7afb      	ldrb	r3, [r7, #11]
 8004f52:	f003 020f 	and.w	r2, r3, #15
 8004f56:	4613      	mov	r3, r2
 8004f58:	00db      	lsls	r3, r3, #3
 8004f5a:	4413      	add	r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	4413      	add	r3, r2
 8004f66:	3304      	adds	r3, #4
 8004f68:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	683a      	ldr	r2, [r7, #0]
 8004f74:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f82:	7afb      	ldrb	r3, [r7, #11]
 8004f84:	f003 030f 	and.w	r3, r3, #15
 8004f88:	b2da      	uxtb	r2, r3
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d102      	bne.n	8004f9c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f9c:	7afb      	ldrb	r3, [r7, #11]
 8004f9e:	f003 030f 	and.w	r3, r3, #15
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d109      	bne.n	8004fba <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6818      	ldr	r0, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	6979      	ldr	r1, [r7, #20]
 8004fb4:	f004 fef2 	bl	8009d9c <USB_EP0StartXfer>
 8004fb8:	e008      	b.n	8004fcc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6818      	ldr	r0, [r3, #0]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	6979      	ldr	r1, [r7, #20]
 8004fc8:	f004 fc98 	bl	80098fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3718      	adds	r7, #24
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b083      	sub	sp, #12
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
 8004fde:	460b      	mov	r3, r1
 8004fe0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004fe2:	78fb      	ldrb	r3, [r7, #3]
 8004fe4:	f003 020f 	and.w	r2, r3, #15
 8004fe8:	6879      	ldr	r1, [r7, #4]
 8004fea:	4613      	mov	r3, r2
 8004fec:	00db      	lsls	r3, r3, #3
 8004fee:	4413      	add	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	440b      	add	r3, r1
 8004ff4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004ff8:	681b      	ldr	r3, [r3, #0]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b086      	sub	sp, #24
 800500a:	af00      	add	r7, sp, #0
 800500c:	60f8      	str	r0, [r7, #12]
 800500e:	607a      	str	r2, [r7, #4]
 8005010:	603b      	str	r3, [r7, #0]
 8005012:	460b      	mov	r3, r1
 8005014:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005016:	7afb      	ldrb	r3, [r7, #11]
 8005018:	f003 020f 	and.w	r2, r3, #15
 800501c:	4613      	mov	r3, r2
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	4413      	add	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	3338      	adds	r3, #56	; 0x38
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	4413      	add	r3, r2
 800502a:	3304      	adds	r3, #4
 800502c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	2200      	movs	r2, #0
 800503e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	2201      	movs	r2, #1
 8005044:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005046:	7afb      	ldrb	r3, [r7, #11]
 8005048:	f003 030f 	and.w	r3, r3, #15
 800504c:	b2da      	uxtb	r2, r3
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d102      	bne.n	8005060 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005060:	7afb      	ldrb	r3, [r7, #11]
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	2b00      	cmp	r3, #0
 8005068:	d109      	bne.n	800507e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6818      	ldr	r0, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	b2db      	uxtb	r3, r3
 8005074:	461a      	mov	r2, r3
 8005076:	6979      	ldr	r1, [r7, #20]
 8005078:	f004 fe90 	bl	8009d9c <USB_EP0StartXfer>
 800507c:	e008      	b.n	8005090 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6818      	ldr	r0, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	b2db      	uxtb	r3, r3
 8005088:	461a      	mov	r2, r3
 800508a:	6979      	ldr	r1, [r7, #20]
 800508c:	f004 fc36 	bl	80098fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3718      	adds	r7, #24
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b084      	sub	sp, #16
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	460b      	mov	r3, r1
 80050a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80050a6:	78fb      	ldrb	r3, [r7, #3]
 80050a8:	f003 020f 	and.w	r2, r3, #15
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d901      	bls.n	80050b8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e050      	b.n	800515a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80050b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	da0f      	bge.n	80050e0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050c0:	78fb      	ldrb	r3, [r7, #3]
 80050c2:	f003 020f 	and.w	r2, r3, #15
 80050c6:	4613      	mov	r3, r2
 80050c8:	00db      	lsls	r3, r3, #3
 80050ca:	4413      	add	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	3338      	adds	r3, #56	; 0x38
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	4413      	add	r3, r2
 80050d4:	3304      	adds	r3, #4
 80050d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2201      	movs	r2, #1
 80050dc:	705a      	strb	r2, [r3, #1]
 80050de:	e00d      	b.n	80050fc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80050e0:	78fa      	ldrb	r2, [r7, #3]
 80050e2:	4613      	mov	r3, r2
 80050e4:	00db      	lsls	r3, r3, #3
 80050e6:	4413      	add	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	4413      	add	r3, r2
 80050f2:	3304      	adds	r3, #4
 80050f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2201      	movs	r2, #1
 8005100:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005102:	78fb      	ldrb	r3, [r7, #3]
 8005104:	f003 030f 	and.w	r3, r3, #15
 8005108:	b2da      	uxtb	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005114:	2b01      	cmp	r3, #1
 8005116:	d101      	bne.n	800511c <HAL_PCD_EP_SetStall+0x82>
 8005118:	2302      	movs	r3, #2
 800511a:	e01e      	b.n	800515a <HAL_PCD_EP_SetStall+0xc0>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68f9      	ldr	r1, [r7, #12]
 800512a:	4618      	mov	r0, r3
 800512c:	f005 f8d2 	bl	800a2d4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005130:	78fb      	ldrb	r3, [r7, #3]
 8005132:	f003 030f 	and.w	r3, r3, #15
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10a      	bne.n	8005150 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6818      	ldr	r0, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	b2d9      	uxtb	r1, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800514a:	461a      	mov	r2, r3
 800514c:	f005 fac4 	bl	800a6d8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b084      	sub	sp, #16
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	460b      	mov	r3, r1
 800516c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800516e:	78fb      	ldrb	r3, [r7, #3]
 8005170:	f003 020f 	and.w	r2, r3, #15
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	429a      	cmp	r2, r3
 800517a:	d901      	bls.n	8005180 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e042      	b.n	8005206 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005180:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005184:	2b00      	cmp	r3, #0
 8005186:	da0f      	bge.n	80051a8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005188:	78fb      	ldrb	r3, [r7, #3]
 800518a:	f003 020f 	and.w	r2, r3, #15
 800518e:	4613      	mov	r3, r2
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	4413      	add	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	3338      	adds	r3, #56	; 0x38
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	4413      	add	r3, r2
 800519c:	3304      	adds	r3, #4
 800519e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2201      	movs	r2, #1
 80051a4:	705a      	strb	r2, [r3, #1]
 80051a6:	e00f      	b.n	80051c8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051a8:	78fb      	ldrb	r3, [r7, #3]
 80051aa:	f003 020f 	and.w	r2, r3, #15
 80051ae:	4613      	mov	r3, r2
 80051b0:	00db      	lsls	r3, r3, #3
 80051b2:	4413      	add	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	4413      	add	r3, r2
 80051be:	3304      	adds	r3, #4
 80051c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051ce:	78fb      	ldrb	r3, [r7, #3]
 80051d0:	f003 030f 	and.w	r3, r3, #15
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d101      	bne.n	80051e8 <HAL_PCD_EP_ClrStall+0x86>
 80051e4:	2302      	movs	r3, #2
 80051e6:	e00e      	b.n	8005206 <HAL_PCD_EP_ClrStall+0xa4>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68f9      	ldr	r1, [r7, #12]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f005 f8da 	bl	800a3b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b084      	sub	sp, #16
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
 8005216:	460b      	mov	r3, r1
 8005218:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800521a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800521e:	2b00      	cmp	r3, #0
 8005220:	da0c      	bge.n	800523c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005222:	78fb      	ldrb	r3, [r7, #3]
 8005224:	f003 020f 	and.w	r2, r3, #15
 8005228:	4613      	mov	r3, r2
 800522a:	00db      	lsls	r3, r3, #3
 800522c:	4413      	add	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	3338      	adds	r3, #56	; 0x38
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	4413      	add	r3, r2
 8005236:	3304      	adds	r3, #4
 8005238:	60fb      	str	r3, [r7, #12]
 800523a:	e00c      	b.n	8005256 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800523c:	78fb      	ldrb	r3, [r7, #3]
 800523e:	f003 020f 	and.w	r2, r3, #15
 8005242:	4613      	mov	r3, r2
 8005244:	00db      	lsls	r3, r3, #3
 8005246:	4413      	add	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	4413      	add	r3, r2
 8005252:	3304      	adds	r3, #4
 8005254:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68f9      	ldr	r1, [r7, #12]
 800525c:	4618      	mov	r0, r3
 800525e:	f004 fef9 	bl	800a054 <USB_EPStopXfer>
 8005262:	4603      	mov	r3, r0
 8005264:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005266:	7afb      	ldrb	r3, [r7, #11]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b08a      	sub	sp, #40	; 0x28
 8005274:	af02      	add	r7, sp, #8
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	4613      	mov	r3, r2
 8005288:	00db      	lsls	r3, r3, #3
 800528a:	4413      	add	r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	3338      	adds	r3, #56	; 0x38
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	4413      	add	r3, r2
 8005294:	3304      	adds	r3, #4
 8005296:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6a1a      	ldr	r2, [r3, #32]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d901      	bls.n	80052a8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e06c      	b.n	8005382 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	699a      	ldr	r2, [r3, #24]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	69fa      	ldr	r2, [r7, #28]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d902      	bls.n	80052c4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	3303      	adds	r3, #3
 80052c8:	089b      	lsrs	r3, r3, #2
 80052ca:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80052cc:	e02b      	b.n	8005326 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	699a      	ldr	r2, [r3, #24]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	69fa      	ldr	r2, [r7, #28]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d902      	bls.n	80052ea <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	3303      	adds	r3, #3
 80052ee:	089b      	lsrs	r3, r3, #2
 80052f0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6919      	ldr	r1, [r3, #16]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	b2da      	uxtb	r2, r3
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005302:	b2db      	uxtb	r3, r3
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	4603      	mov	r3, r0
 8005308:	6978      	ldr	r0, [r7, #20]
 800530a:	f004 ff4d 	bl	800a1a8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	691a      	ldr	r2, [r3, #16]
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	441a      	add	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6a1a      	ldr	r2, [r3, #32]
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	441a      	add	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	015a      	lsls	r2, r3, #5
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	4413      	add	r3, r2
 800532e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	429a      	cmp	r2, r3
 800533a:	d809      	bhi.n	8005350 <PCD_WriteEmptyTxFifo+0xe0>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6a1a      	ldr	r2, [r3, #32]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005344:	429a      	cmp	r2, r3
 8005346:	d203      	bcs.n	8005350 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1be      	bne.n	80052ce <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	699a      	ldr	r2, [r3, #24]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	429a      	cmp	r2, r3
 800535a:	d811      	bhi.n	8005380 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	f003 030f 	and.w	r3, r3, #15
 8005362:	2201      	movs	r2, #1
 8005364:	fa02 f303 	lsl.w	r3, r2, r3
 8005368:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	43db      	mvns	r3, r3
 8005376:	6939      	ldr	r1, [r7, #16]
 8005378:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800537c:	4013      	ands	r3, r2
 800537e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3720      	adds	r7, #32
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
	...

0800538c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b088      	sub	sp, #32
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	333c      	adds	r3, #60	; 0x3c
 80053a4:	3304      	adds	r3, #4
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	015a      	lsls	r2, r3, #5
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	4413      	add	r3, r2
 80053b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d17b      	bne.n	80054ba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	f003 0308 	and.w	r3, r3, #8
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d015      	beq.n	80053f8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	4a61      	ldr	r2, [pc, #388]	; (8005554 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	f240 80b9 	bls.w	8005548 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f000 80b3 	beq.w	8005548 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ee:	461a      	mov	r2, r3
 80053f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053f4:	6093      	str	r3, [r2, #8]
 80053f6:	e0a7      	b.n	8005548 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	f003 0320 	and.w	r3, r3, #32
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d009      	beq.n	8005416 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	4413      	add	r3, r2
 800540a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800540e:	461a      	mov	r2, r3
 8005410:	2320      	movs	r3, #32
 8005412:	6093      	str	r3, [r2, #8]
 8005414:	e098      	b.n	8005548 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800541c:	2b00      	cmp	r3, #0
 800541e:	f040 8093 	bne.w	8005548 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	4a4b      	ldr	r2, [pc, #300]	; (8005554 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d90f      	bls.n	800544a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00a      	beq.n	800544a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	4413      	add	r3, r2
 800543c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005440:	461a      	mov	r2, r3
 8005442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005446:	6093      	str	r3, [r2, #8]
 8005448:	e07e      	b.n	8005548 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	4613      	mov	r3, r2
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	4413      	add	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	4413      	add	r3, r2
 800545c:	3304      	adds	r3, #4
 800545e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	69da      	ldr	r2, [r3, #28]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	0159      	lsls	r1, r3, #5
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	440b      	add	r3, r1
 800546c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005476:	1ad2      	subs	r2, r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d114      	bne.n	80054ac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d109      	bne.n	800549e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6818      	ldr	r0, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005494:	461a      	mov	r2, r3
 8005496:	2101      	movs	r1, #1
 8005498:	f005 f91e 	bl	800a6d8 <USB_EP0_OutStart>
 800549c:	e006      	b.n	80054ac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	691a      	ldr	r2, [r3, #16]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	441a      	add	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	4619      	mov	r1, r3
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f00a fefc 	bl	80102b0 <HAL_PCD_DataOutStageCallback>
 80054b8:	e046      	b.n	8005548 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	4a26      	ldr	r2, [pc, #152]	; (8005558 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d124      	bne.n	800550c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00a      	beq.n	80054e2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	015a      	lsls	r2, r3, #5
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d8:	461a      	mov	r2, r3
 80054da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054de:	6093      	str	r3, [r2, #8]
 80054e0:	e032      	b.n	8005548 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	f003 0320 	and.w	r3, r3, #32
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d008      	beq.n	80054fe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f8:	461a      	mov	r2, r3
 80054fa:	2320      	movs	r3, #32
 80054fc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	b2db      	uxtb	r3, r3
 8005502:	4619      	mov	r1, r3
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f00a fed3 	bl	80102b0 <HAL_PCD_DataOutStageCallback>
 800550a:	e01d      	b.n	8005548 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d114      	bne.n	800553c <PCD_EP_OutXfrComplete_int+0x1b0>
 8005512:	6879      	ldr	r1, [r7, #4]
 8005514:	683a      	ldr	r2, [r7, #0]
 8005516:	4613      	mov	r3, r2
 8005518:	00db      	lsls	r3, r3, #3
 800551a:	4413      	add	r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	440b      	add	r3, r1
 8005520:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d108      	bne.n	800553c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6818      	ldr	r0, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005534:	461a      	mov	r2, r3
 8005536:	2100      	movs	r1, #0
 8005538:	f005 f8ce 	bl	800a6d8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	b2db      	uxtb	r3, r3
 8005540:	4619      	mov	r1, r3
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f00a feb4 	bl	80102b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3720      	adds	r7, #32
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	4f54300a 	.word	0x4f54300a
 8005558:	4f54310a 	.word	0x4f54310a

0800555c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b086      	sub	sp, #24
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	333c      	adds	r3, #60	; 0x3c
 8005574:	3304      	adds	r3, #4
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	4413      	add	r3, r2
 8005582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4a15      	ldr	r2, [pc, #84]	; (80055e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d90e      	bls.n	80055b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005598:	2b00      	cmp	r3, #0
 800559a:	d009      	beq.n	80055b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a8:	461a      	mov	r2, r3
 80055aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f00a fe6b 	bl	801028c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	4a0a      	ldr	r2, [pc, #40]	; (80055e4 <PCD_EP_OutSetupPacket_int+0x88>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d90c      	bls.n	80055d8 <PCD_EP_OutSetupPacket_int+0x7c>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d108      	bne.n	80055d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6818      	ldr	r0, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80055d0:	461a      	mov	r2, r3
 80055d2:	2101      	movs	r1, #1
 80055d4:	f005 f880 	bl	800a6d8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3718      	adds	r7, #24
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	4f54300a 	.word	0x4f54300a

080055e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	460b      	mov	r3, r1
 80055f2:	70fb      	strb	r3, [r7, #3]
 80055f4:	4613      	mov	r3, r2
 80055f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005600:	78fb      	ldrb	r3, [r7, #3]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d107      	bne.n	8005616 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005606:	883b      	ldrh	r3, [r7, #0]
 8005608:	0419      	lsls	r1, r3, #16
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68ba      	ldr	r2, [r7, #8]
 8005610:	430a      	orrs	r2, r1
 8005612:	629a      	str	r2, [r3, #40]	; 0x28
 8005614:	e028      	b.n	8005668 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561c:	0c1b      	lsrs	r3, r3, #16
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	4413      	add	r3, r2
 8005622:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005624:	2300      	movs	r3, #0
 8005626:	73fb      	strb	r3, [r7, #15]
 8005628:	e00d      	b.n	8005646 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	7bfb      	ldrb	r3, [r7, #15]
 8005630:	3340      	adds	r3, #64	; 0x40
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	0c1b      	lsrs	r3, r3, #16
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	4413      	add	r3, r2
 800563e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005640:	7bfb      	ldrb	r3, [r7, #15]
 8005642:	3301      	adds	r3, #1
 8005644:	73fb      	strb	r3, [r7, #15]
 8005646:	7bfa      	ldrb	r2, [r7, #15]
 8005648:	78fb      	ldrb	r3, [r7, #3]
 800564a:	3b01      	subs	r3, #1
 800564c:	429a      	cmp	r2, r3
 800564e:	d3ec      	bcc.n	800562a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005650:	883b      	ldrh	r3, [r7, #0]
 8005652:	0418      	lsls	r0, r3, #16
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6819      	ldr	r1, [r3, #0]
 8005658:	78fb      	ldrb	r3, [r7, #3]
 800565a:	3b01      	subs	r3, #1
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	4302      	orrs	r2, r0
 8005660:	3340      	adds	r3, #64	; 0x40
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	440b      	add	r3, r1
 8005666:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3714      	adds	r7, #20
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005676:	b480      	push	{r7}
 8005678:	b083      	sub	sp, #12
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
 800567e:	460b      	mov	r3, r1
 8005680:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	887a      	ldrh	r2, [r7, #2]
 8005688:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056c6:	4b05      	ldr	r3, [pc, #20]	; (80056dc <HAL_PCDEx_ActivateLPM+0x44>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3714      	adds	r7, #20
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	10000003 	.word	0x10000003

080056e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80056e8:	2300      	movs	r3, #0
 80056ea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e29b      	b.n	8005c2e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f000 8087 	beq.w	8005812 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005704:	4b96      	ldr	r3, [pc, #600]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f003 030c 	and.w	r3, r3, #12
 800570c:	2b04      	cmp	r3, #4
 800570e:	d00c      	beq.n	800572a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005710:	4b93      	ldr	r3, [pc, #588]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f003 030c 	and.w	r3, r3, #12
 8005718:	2b08      	cmp	r3, #8
 800571a:	d112      	bne.n	8005742 <HAL_RCC_OscConfig+0x62>
 800571c:	4b90      	ldr	r3, [pc, #576]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005724:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005728:	d10b      	bne.n	8005742 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800572a:	4b8d      	ldr	r3, [pc, #564]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d06c      	beq.n	8005810 <HAL_RCC_OscConfig+0x130>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d168      	bne.n	8005810 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e275      	b.n	8005c2e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800574a:	d106      	bne.n	800575a <HAL_RCC_OscConfig+0x7a>
 800574c:	4b84      	ldr	r3, [pc, #528]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a83      	ldr	r2, [pc, #524]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 8005752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005756:	6013      	str	r3, [r2, #0]
 8005758:	e02e      	b.n	80057b8 <HAL_RCC_OscConfig+0xd8>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10c      	bne.n	800577c <HAL_RCC_OscConfig+0x9c>
 8005762:	4b7f      	ldr	r3, [pc, #508]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a7e      	ldr	r2, [pc, #504]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 8005768:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	4b7c      	ldr	r3, [pc, #496]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a7b      	ldr	r2, [pc, #492]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 8005774:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005778:	6013      	str	r3, [r2, #0]
 800577a:	e01d      	b.n	80057b8 <HAL_RCC_OscConfig+0xd8>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005784:	d10c      	bne.n	80057a0 <HAL_RCC_OscConfig+0xc0>
 8005786:	4b76      	ldr	r3, [pc, #472]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a75      	ldr	r2, [pc, #468]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 800578c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005790:	6013      	str	r3, [r2, #0]
 8005792:	4b73      	ldr	r3, [pc, #460]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a72      	ldr	r2, [pc, #456]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 8005798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800579c:	6013      	str	r3, [r2, #0]
 800579e:	e00b      	b.n	80057b8 <HAL_RCC_OscConfig+0xd8>
 80057a0:	4b6f      	ldr	r3, [pc, #444]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a6e      	ldr	r2, [pc, #440]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 80057a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057aa:	6013      	str	r3, [r2, #0]
 80057ac:	4b6c      	ldr	r3, [pc, #432]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a6b      	ldr	r2, [pc, #428]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 80057b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d013      	beq.n	80057e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c0:	f7fc fa42 	bl	8001c48 <HAL_GetTick>
 80057c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057c6:	e008      	b.n	80057da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057c8:	f7fc fa3e 	bl	8001c48 <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	2b64      	cmp	r3, #100	; 0x64
 80057d4:	d901      	bls.n	80057da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e229      	b.n	8005c2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057da:	4b61      	ldr	r3, [pc, #388]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d0f0      	beq.n	80057c8 <HAL_RCC_OscConfig+0xe8>
 80057e6:	e014      	b.n	8005812 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e8:	f7fc fa2e 	bl	8001c48 <HAL_GetTick>
 80057ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057ee:	e008      	b.n	8005802 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057f0:	f7fc fa2a 	bl	8001c48 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b64      	cmp	r3, #100	; 0x64
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e215      	b.n	8005c2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005802:	4b57      	ldr	r3, [pc, #348]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1f0      	bne.n	80057f0 <HAL_RCC_OscConfig+0x110>
 800580e:	e000      	b.n	8005812 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d069      	beq.n	80058f2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800581e:	4b50      	ldr	r3, [pc, #320]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f003 030c 	and.w	r3, r3, #12
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00b      	beq.n	8005842 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800582a:	4b4d      	ldr	r3, [pc, #308]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f003 030c 	and.w	r3, r3, #12
 8005832:	2b08      	cmp	r3, #8
 8005834:	d11c      	bne.n	8005870 <HAL_RCC_OscConfig+0x190>
 8005836:	4b4a      	ldr	r3, [pc, #296]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d116      	bne.n	8005870 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005842:	4b47      	ldr	r3, [pc, #284]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d005      	beq.n	800585a <HAL_RCC_OscConfig+0x17a>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d001      	beq.n	800585a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e1e9      	b.n	8005c2e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800585a:	4b41      	ldr	r3, [pc, #260]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	493d      	ldr	r1, [pc, #244]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 800586a:	4313      	orrs	r3, r2
 800586c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800586e:	e040      	b.n	80058f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d023      	beq.n	80058c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005878:	4b39      	ldr	r3, [pc, #228]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a38      	ldr	r2, [pc, #224]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 800587e:	f043 0301 	orr.w	r3, r3, #1
 8005882:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005884:	f7fc f9e0 	bl	8001c48 <HAL_GetTick>
 8005888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800588a:	e008      	b.n	800589e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800588c:	f7fc f9dc 	bl	8001c48 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	2b02      	cmp	r3, #2
 8005898:	d901      	bls.n	800589e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e1c7      	b.n	8005c2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800589e:	4b30      	ldr	r3, [pc, #192]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d0f0      	beq.n	800588c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058aa:	4b2d      	ldr	r3, [pc, #180]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	4929      	ldr	r1, [pc, #164]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	600b      	str	r3, [r1, #0]
 80058be:	e018      	b.n	80058f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058c0:	4b27      	ldr	r3, [pc, #156]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a26      	ldr	r2, [pc, #152]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 80058c6:	f023 0301 	bic.w	r3, r3, #1
 80058ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058cc:	f7fc f9bc 	bl	8001c48 <HAL_GetTick>
 80058d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058d2:	e008      	b.n	80058e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058d4:	f7fc f9b8 	bl	8001c48 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e1a3      	b.n	8005c2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058e6:	4b1e      	ldr	r3, [pc, #120]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0302 	and.w	r3, r3, #2
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1f0      	bne.n	80058d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0308 	and.w	r3, r3, #8
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d038      	beq.n	8005970 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d019      	beq.n	800593a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005906:	4b16      	ldr	r3, [pc, #88]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 8005908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800590a:	4a15      	ldr	r2, [pc, #84]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 800590c:	f043 0301 	orr.w	r3, r3, #1
 8005910:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005912:	f7fc f999 	bl	8001c48 <HAL_GetTick>
 8005916:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005918:	e008      	b.n	800592c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800591a:	f7fc f995 	bl	8001c48 <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	2b02      	cmp	r3, #2
 8005926:	d901      	bls.n	800592c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e180      	b.n	8005c2e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800592c:	4b0c      	ldr	r3, [pc, #48]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 800592e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005930:	f003 0302 	and.w	r3, r3, #2
 8005934:	2b00      	cmp	r3, #0
 8005936:	d0f0      	beq.n	800591a <HAL_RCC_OscConfig+0x23a>
 8005938:	e01a      	b.n	8005970 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800593a:	4b09      	ldr	r3, [pc, #36]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 800593c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800593e:	4a08      	ldr	r2, [pc, #32]	; (8005960 <HAL_RCC_OscConfig+0x280>)
 8005940:	f023 0301 	bic.w	r3, r3, #1
 8005944:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005946:	f7fc f97f 	bl	8001c48 <HAL_GetTick>
 800594a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800594c:	e00a      	b.n	8005964 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800594e:	f7fc f97b 	bl	8001c48 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	2b02      	cmp	r3, #2
 800595a:	d903      	bls.n	8005964 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e166      	b.n	8005c2e <HAL_RCC_OscConfig+0x54e>
 8005960:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005964:	4b92      	ldr	r3, [pc, #584]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005968:	f003 0302 	and.w	r3, r3, #2
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1ee      	bne.n	800594e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0304 	and.w	r3, r3, #4
 8005978:	2b00      	cmp	r3, #0
 800597a:	f000 80a4 	beq.w	8005ac6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800597e:	4b8c      	ldr	r3, [pc, #560]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10d      	bne.n	80059a6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800598a:	4b89      	ldr	r3, [pc, #548]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 800598c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598e:	4a88      	ldr	r2, [pc, #544]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005994:	6413      	str	r3, [r2, #64]	; 0x40
 8005996:	4b86      	ldr	r3, [pc, #536]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800599e:	60bb      	str	r3, [r7, #8]
 80059a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059a2:	2301      	movs	r3, #1
 80059a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059a6:	4b83      	ldr	r3, [pc, #524]	; (8005bb4 <HAL_RCC_OscConfig+0x4d4>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d118      	bne.n	80059e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80059b2:	4b80      	ldr	r3, [pc, #512]	; (8005bb4 <HAL_RCC_OscConfig+0x4d4>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a7f      	ldr	r2, [pc, #508]	; (8005bb4 <HAL_RCC_OscConfig+0x4d4>)
 80059b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059be:	f7fc f943 	bl	8001c48 <HAL_GetTick>
 80059c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059c4:	e008      	b.n	80059d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059c6:	f7fc f93f 	bl	8001c48 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	2b64      	cmp	r3, #100	; 0x64
 80059d2:	d901      	bls.n	80059d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e12a      	b.n	8005c2e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059d8:	4b76      	ldr	r3, [pc, #472]	; (8005bb4 <HAL_RCC_OscConfig+0x4d4>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d0f0      	beq.n	80059c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d106      	bne.n	80059fa <HAL_RCC_OscConfig+0x31a>
 80059ec:	4b70      	ldr	r3, [pc, #448]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 80059ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f0:	4a6f      	ldr	r2, [pc, #444]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 80059f2:	f043 0301 	orr.w	r3, r3, #1
 80059f6:	6713      	str	r3, [r2, #112]	; 0x70
 80059f8:	e02d      	b.n	8005a56 <HAL_RCC_OscConfig+0x376>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d10c      	bne.n	8005a1c <HAL_RCC_OscConfig+0x33c>
 8005a02:	4b6b      	ldr	r3, [pc, #428]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a06:	4a6a      	ldr	r2, [pc, #424]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005a08:	f023 0301 	bic.w	r3, r3, #1
 8005a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8005a0e:	4b68      	ldr	r3, [pc, #416]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a12:	4a67      	ldr	r2, [pc, #412]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005a14:	f023 0304 	bic.w	r3, r3, #4
 8005a18:	6713      	str	r3, [r2, #112]	; 0x70
 8005a1a:	e01c      	b.n	8005a56 <HAL_RCC_OscConfig+0x376>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	2b05      	cmp	r3, #5
 8005a22:	d10c      	bne.n	8005a3e <HAL_RCC_OscConfig+0x35e>
 8005a24:	4b62      	ldr	r3, [pc, #392]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a28:	4a61      	ldr	r2, [pc, #388]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005a2a:	f043 0304 	orr.w	r3, r3, #4
 8005a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a30:	4b5f      	ldr	r3, [pc, #380]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a34:	4a5e      	ldr	r2, [pc, #376]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005a36:	f043 0301 	orr.w	r3, r3, #1
 8005a3a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a3c:	e00b      	b.n	8005a56 <HAL_RCC_OscConfig+0x376>
 8005a3e:	4b5c      	ldr	r3, [pc, #368]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a42:	4a5b      	ldr	r2, [pc, #364]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005a44:	f023 0301 	bic.w	r3, r3, #1
 8005a48:	6713      	str	r3, [r2, #112]	; 0x70
 8005a4a:	4b59      	ldr	r3, [pc, #356]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a4e:	4a58      	ldr	r2, [pc, #352]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005a50:	f023 0304 	bic.w	r3, r3, #4
 8005a54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d015      	beq.n	8005a8a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a5e:	f7fc f8f3 	bl	8001c48 <HAL_GetTick>
 8005a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a64:	e00a      	b.n	8005a7c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a66:	f7fc f8ef 	bl	8001c48 <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d901      	bls.n	8005a7c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e0d8      	b.n	8005c2e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a7c:	4b4c      	ldr	r3, [pc, #304]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a80:	f003 0302 	and.w	r3, r3, #2
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d0ee      	beq.n	8005a66 <HAL_RCC_OscConfig+0x386>
 8005a88:	e014      	b.n	8005ab4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a8a:	f7fc f8dd 	bl	8001c48 <HAL_GetTick>
 8005a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a90:	e00a      	b.n	8005aa8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a92:	f7fc f8d9 	bl	8001c48 <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d901      	bls.n	8005aa8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e0c2      	b.n	8005c2e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005aa8:	4b41      	ldr	r3, [pc, #260]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aac:	f003 0302 	and.w	r3, r3, #2
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1ee      	bne.n	8005a92 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005ab4:	7dfb      	ldrb	r3, [r7, #23]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d105      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005aba:	4b3d      	ldr	r3, [pc, #244]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abe:	4a3c      	ldr	r2, [pc, #240]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005ac0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ac4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f000 80ae 	beq.w	8005c2c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ad0:	4b37      	ldr	r3, [pc, #220]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f003 030c 	and.w	r3, r3, #12
 8005ad8:	2b08      	cmp	r3, #8
 8005ada:	d06d      	beq.n	8005bb8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d14b      	bne.n	8005b7c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ae4:	4b32      	ldr	r3, [pc, #200]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a31      	ldr	r2, [pc, #196]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005aea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af0:	f7fc f8aa 	bl	8001c48 <HAL_GetTick>
 8005af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005af6:	e008      	b.n	8005b0a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005af8:	f7fc f8a6 	bl	8001c48 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d901      	bls.n	8005b0a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e091      	b.n	8005c2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b0a:	4b29      	ldr	r3, [pc, #164]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1f0      	bne.n	8005af8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	69da      	ldr	r2, [r3, #28]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	431a      	orrs	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b24:	019b      	lsls	r3, r3, #6
 8005b26:	431a      	orrs	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2c:	085b      	lsrs	r3, r3, #1
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	041b      	lsls	r3, r3, #16
 8005b32:	431a      	orrs	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b38:	061b      	lsls	r3, r3, #24
 8005b3a:	431a      	orrs	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b40:	071b      	lsls	r3, r3, #28
 8005b42:	491b      	ldr	r1, [pc, #108]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b48:	4b19      	ldr	r3, [pc, #100]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a18      	ldr	r2, [pc, #96]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005b4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b54:	f7fc f878 	bl	8001c48 <HAL_GetTick>
 8005b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b5a:	e008      	b.n	8005b6e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b5c:	f7fc f874 	bl	8001c48 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d901      	bls.n	8005b6e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e05f      	b.n	8005c2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b6e:	4b10      	ldr	r3, [pc, #64]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d0f0      	beq.n	8005b5c <HAL_RCC_OscConfig+0x47c>
 8005b7a:	e057      	b.n	8005c2c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b7c:	4b0c      	ldr	r3, [pc, #48]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a0b      	ldr	r2, [pc, #44]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005b82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b88:	f7fc f85e 	bl	8001c48 <HAL_GetTick>
 8005b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b8e:	e008      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b90:	f7fc f85a 	bl	8001c48 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e045      	b.n	8005c2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ba2:	4b03      	ldr	r3, [pc, #12]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1f0      	bne.n	8005b90 <HAL_RCC_OscConfig+0x4b0>
 8005bae:	e03d      	b.n	8005c2c <HAL_RCC_OscConfig+0x54c>
 8005bb0:	40023800 	.word	0x40023800
 8005bb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005bb8:	4b1f      	ldr	r3, [pc, #124]	; (8005c38 <HAL_RCC_OscConfig+0x558>)
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d030      	beq.n	8005c28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d129      	bne.n	8005c28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d122      	bne.n	8005c28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005be8:	4013      	ands	r3, r2
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005bee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d119      	bne.n	8005c28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfe:	085b      	lsrs	r3, r3, #1
 8005c00:	3b01      	subs	r3, #1
 8005c02:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d10f      	bne.n	8005c28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c12:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d107      	bne.n	8005c28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c22:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d001      	beq.n	8005c2c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e000      	b.n	8005c2e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3718      	adds	r7, #24
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	40023800 	.word	0x40023800

08005c3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005c46:	2300      	movs	r3, #0
 8005c48:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d101      	bne.n	8005c54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e0d0      	b.n	8005df6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c54:	4b6a      	ldr	r3, [pc, #424]	; (8005e00 <HAL_RCC_ClockConfig+0x1c4>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 030f 	and.w	r3, r3, #15
 8005c5c:	683a      	ldr	r2, [r7, #0]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d910      	bls.n	8005c84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c62:	4b67      	ldr	r3, [pc, #412]	; (8005e00 <HAL_RCC_ClockConfig+0x1c4>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f023 020f 	bic.w	r2, r3, #15
 8005c6a:	4965      	ldr	r1, [pc, #404]	; (8005e00 <HAL_RCC_ClockConfig+0x1c4>)
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c72:	4b63      	ldr	r3, [pc, #396]	; (8005e00 <HAL_RCC_ClockConfig+0x1c4>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 030f 	and.w	r3, r3, #15
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d001      	beq.n	8005c84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e0b8      	b.n	8005df6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0302 	and.w	r3, r3, #2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d020      	beq.n	8005cd2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0304 	and.w	r3, r3, #4
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d005      	beq.n	8005ca8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c9c:	4b59      	ldr	r3, [pc, #356]	; (8005e04 <HAL_RCC_ClockConfig+0x1c8>)
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	4a58      	ldr	r2, [pc, #352]	; (8005e04 <HAL_RCC_ClockConfig+0x1c8>)
 8005ca2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ca6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0308 	and.w	r3, r3, #8
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d005      	beq.n	8005cc0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cb4:	4b53      	ldr	r3, [pc, #332]	; (8005e04 <HAL_RCC_ClockConfig+0x1c8>)
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	4a52      	ldr	r2, [pc, #328]	; (8005e04 <HAL_RCC_ClockConfig+0x1c8>)
 8005cba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005cbe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cc0:	4b50      	ldr	r3, [pc, #320]	; (8005e04 <HAL_RCC_ClockConfig+0x1c8>)
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	494d      	ldr	r1, [pc, #308]	; (8005e04 <HAL_RCC_ClockConfig+0x1c8>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d040      	beq.n	8005d60 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d107      	bne.n	8005cf6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ce6:	4b47      	ldr	r3, [pc, #284]	; (8005e04 <HAL_RCC_ClockConfig+0x1c8>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d115      	bne.n	8005d1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e07f      	b.n	8005df6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d107      	bne.n	8005d0e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cfe:	4b41      	ldr	r3, [pc, #260]	; (8005e04 <HAL_RCC_ClockConfig+0x1c8>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d109      	bne.n	8005d1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e073      	b.n	8005df6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d0e:	4b3d      	ldr	r3, [pc, #244]	; (8005e04 <HAL_RCC_ClockConfig+0x1c8>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0302 	and.w	r3, r3, #2
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e06b      	b.n	8005df6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d1e:	4b39      	ldr	r3, [pc, #228]	; (8005e04 <HAL_RCC_ClockConfig+0x1c8>)
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f023 0203 	bic.w	r2, r3, #3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	4936      	ldr	r1, [pc, #216]	; (8005e04 <HAL_RCC_ClockConfig+0x1c8>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d30:	f7fb ff8a 	bl	8001c48 <HAL_GetTick>
 8005d34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d36:	e00a      	b.n	8005d4e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d38:	f7fb ff86 	bl	8001c48 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d901      	bls.n	8005d4e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e053      	b.n	8005df6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d4e:	4b2d      	ldr	r3, [pc, #180]	; (8005e04 <HAL_RCC_ClockConfig+0x1c8>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f003 020c 	and.w	r2, r3, #12
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d1eb      	bne.n	8005d38 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d60:	4b27      	ldr	r3, [pc, #156]	; (8005e00 <HAL_RCC_ClockConfig+0x1c4>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 030f 	and.w	r3, r3, #15
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d210      	bcs.n	8005d90 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d6e:	4b24      	ldr	r3, [pc, #144]	; (8005e00 <HAL_RCC_ClockConfig+0x1c4>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f023 020f 	bic.w	r2, r3, #15
 8005d76:	4922      	ldr	r1, [pc, #136]	; (8005e00 <HAL_RCC_ClockConfig+0x1c4>)
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d7e:	4b20      	ldr	r3, [pc, #128]	; (8005e00 <HAL_RCC_ClockConfig+0x1c4>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 030f 	and.w	r3, r3, #15
 8005d86:	683a      	ldr	r2, [r7, #0]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d001      	beq.n	8005d90 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e032      	b.n	8005df6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0304 	and.w	r3, r3, #4
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d008      	beq.n	8005dae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d9c:	4b19      	ldr	r3, [pc, #100]	; (8005e04 <HAL_RCC_ClockConfig+0x1c8>)
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	4916      	ldr	r1, [pc, #88]	; (8005e04 <HAL_RCC_ClockConfig+0x1c8>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0308 	and.w	r3, r3, #8
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d009      	beq.n	8005dce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005dba:	4b12      	ldr	r3, [pc, #72]	; (8005e04 <HAL_RCC_ClockConfig+0x1c8>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	00db      	lsls	r3, r3, #3
 8005dc8:	490e      	ldr	r1, [pc, #56]	; (8005e04 <HAL_RCC_ClockConfig+0x1c8>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005dce:	f000 f821 	bl	8005e14 <HAL_RCC_GetSysClockFreq>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	4b0b      	ldr	r3, [pc, #44]	; (8005e04 <HAL_RCC_ClockConfig+0x1c8>)
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	091b      	lsrs	r3, r3, #4
 8005dda:	f003 030f 	and.w	r3, r3, #15
 8005dde:	490a      	ldr	r1, [pc, #40]	; (8005e08 <HAL_RCC_ClockConfig+0x1cc>)
 8005de0:	5ccb      	ldrb	r3, [r1, r3]
 8005de2:	fa22 f303 	lsr.w	r3, r2, r3
 8005de6:	4a09      	ldr	r2, [pc, #36]	; (8005e0c <HAL_RCC_ClockConfig+0x1d0>)
 8005de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005dea:	4b09      	ldr	r3, [pc, #36]	; (8005e10 <HAL_RCC_ClockConfig+0x1d4>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7fb fee6 	bl	8001bc0 <HAL_InitTick>

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	40023c00 	.word	0x40023c00
 8005e04:	40023800 	.word	0x40023800
 8005e08:	08011f68 	.word	0x08011f68
 8005e0c:	20000004 	.word	0x20000004
 8005e10:	20000008 	.word	0x20000008

08005e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e18:	b094      	sub	sp, #80	; 0x50
 8005e1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	647b      	str	r3, [r7, #68]	; 0x44
 8005e20:	2300      	movs	r3, #0
 8005e22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e24:	2300      	movs	r3, #0
 8005e26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e2c:	4b79      	ldr	r3, [pc, #484]	; (8006014 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f003 030c 	and.w	r3, r3, #12
 8005e34:	2b08      	cmp	r3, #8
 8005e36:	d00d      	beq.n	8005e54 <HAL_RCC_GetSysClockFreq+0x40>
 8005e38:	2b08      	cmp	r3, #8
 8005e3a:	f200 80e1 	bhi.w	8006000 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d002      	beq.n	8005e48 <HAL_RCC_GetSysClockFreq+0x34>
 8005e42:	2b04      	cmp	r3, #4
 8005e44:	d003      	beq.n	8005e4e <HAL_RCC_GetSysClockFreq+0x3a>
 8005e46:	e0db      	b.n	8006000 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e48:	4b73      	ldr	r3, [pc, #460]	; (8006018 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e4a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e4c:	e0db      	b.n	8006006 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e4e:	4b73      	ldr	r3, [pc, #460]	; (800601c <HAL_RCC_GetSysClockFreq+0x208>)
 8005e50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e52:	e0d8      	b.n	8006006 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e54:	4b6f      	ldr	r3, [pc, #444]	; (8006014 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e5c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005e5e:	4b6d      	ldr	r3, [pc, #436]	; (8006014 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d063      	beq.n	8005f32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e6a:	4b6a      	ldr	r3, [pc, #424]	; (8006014 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	099b      	lsrs	r3, r3, #6
 8005e70:	2200      	movs	r2, #0
 8005e72:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e7c:	633b      	str	r3, [r7, #48]	; 0x30
 8005e7e:	2300      	movs	r3, #0
 8005e80:	637b      	str	r3, [r7, #52]	; 0x34
 8005e82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005e86:	4622      	mov	r2, r4
 8005e88:	462b      	mov	r3, r5
 8005e8a:	f04f 0000 	mov.w	r0, #0
 8005e8e:	f04f 0100 	mov.w	r1, #0
 8005e92:	0159      	lsls	r1, r3, #5
 8005e94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e98:	0150      	lsls	r0, r2, #5
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	4621      	mov	r1, r4
 8005ea0:	1a51      	subs	r1, r2, r1
 8005ea2:	6139      	str	r1, [r7, #16]
 8005ea4:	4629      	mov	r1, r5
 8005ea6:	eb63 0301 	sbc.w	r3, r3, r1
 8005eaa:	617b      	str	r3, [r7, #20]
 8005eac:	f04f 0200 	mov.w	r2, #0
 8005eb0:	f04f 0300 	mov.w	r3, #0
 8005eb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005eb8:	4659      	mov	r1, fp
 8005eba:	018b      	lsls	r3, r1, #6
 8005ebc:	4651      	mov	r1, sl
 8005ebe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ec2:	4651      	mov	r1, sl
 8005ec4:	018a      	lsls	r2, r1, #6
 8005ec6:	4651      	mov	r1, sl
 8005ec8:	ebb2 0801 	subs.w	r8, r2, r1
 8005ecc:	4659      	mov	r1, fp
 8005ece:	eb63 0901 	sbc.w	r9, r3, r1
 8005ed2:	f04f 0200 	mov.w	r2, #0
 8005ed6:	f04f 0300 	mov.w	r3, #0
 8005eda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ede:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ee2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ee6:	4690      	mov	r8, r2
 8005ee8:	4699      	mov	r9, r3
 8005eea:	4623      	mov	r3, r4
 8005eec:	eb18 0303 	adds.w	r3, r8, r3
 8005ef0:	60bb      	str	r3, [r7, #8]
 8005ef2:	462b      	mov	r3, r5
 8005ef4:	eb49 0303 	adc.w	r3, r9, r3
 8005ef8:	60fb      	str	r3, [r7, #12]
 8005efa:	f04f 0200 	mov.w	r2, #0
 8005efe:	f04f 0300 	mov.w	r3, #0
 8005f02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005f06:	4629      	mov	r1, r5
 8005f08:	024b      	lsls	r3, r1, #9
 8005f0a:	4621      	mov	r1, r4
 8005f0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f10:	4621      	mov	r1, r4
 8005f12:	024a      	lsls	r2, r1, #9
 8005f14:	4610      	mov	r0, r2
 8005f16:	4619      	mov	r1, r3
 8005f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f24:	f7fa f9dc 	bl	80002e0 <__aeabi_uldivmod>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f30:	e058      	b.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f32:	4b38      	ldr	r3, [pc, #224]	; (8006014 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	099b      	lsrs	r3, r3, #6
 8005f38:	2200      	movs	r2, #0
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	4611      	mov	r1, r2
 8005f3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005f42:	623b      	str	r3, [r7, #32]
 8005f44:	2300      	movs	r3, #0
 8005f46:	627b      	str	r3, [r7, #36]	; 0x24
 8005f48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005f4c:	4642      	mov	r2, r8
 8005f4e:	464b      	mov	r3, r9
 8005f50:	f04f 0000 	mov.w	r0, #0
 8005f54:	f04f 0100 	mov.w	r1, #0
 8005f58:	0159      	lsls	r1, r3, #5
 8005f5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f5e:	0150      	lsls	r0, r2, #5
 8005f60:	4602      	mov	r2, r0
 8005f62:	460b      	mov	r3, r1
 8005f64:	4641      	mov	r1, r8
 8005f66:	ebb2 0a01 	subs.w	sl, r2, r1
 8005f6a:	4649      	mov	r1, r9
 8005f6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005f70:	f04f 0200 	mov.w	r2, #0
 8005f74:	f04f 0300 	mov.w	r3, #0
 8005f78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005f7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005f80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005f84:	ebb2 040a 	subs.w	r4, r2, sl
 8005f88:	eb63 050b 	sbc.w	r5, r3, fp
 8005f8c:	f04f 0200 	mov.w	r2, #0
 8005f90:	f04f 0300 	mov.w	r3, #0
 8005f94:	00eb      	lsls	r3, r5, #3
 8005f96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f9a:	00e2      	lsls	r2, r4, #3
 8005f9c:	4614      	mov	r4, r2
 8005f9e:	461d      	mov	r5, r3
 8005fa0:	4643      	mov	r3, r8
 8005fa2:	18e3      	adds	r3, r4, r3
 8005fa4:	603b      	str	r3, [r7, #0]
 8005fa6:	464b      	mov	r3, r9
 8005fa8:	eb45 0303 	adc.w	r3, r5, r3
 8005fac:	607b      	str	r3, [r7, #4]
 8005fae:	f04f 0200 	mov.w	r2, #0
 8005fb2:	f04f 0300 	mov.w	r3, #0
 8005fb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005fba:	4629      	mov	r1, r5
 8005fbc:	028b      	lsls	r3, r1, #10
 8005fbe:	4621      	mov	r1, r4
 8005fc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005fc4:	4621      	mov	r1, r4
 8005fc6:	028a      	lsls	r2, r1, #10
 8005fc8:	4610      	mov	r0, r2
 8005fca:	4619      	mov	r1, r3
 8005fcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fce:	2200      	movs	r2, #0
 8005fd0:	61bb      	str	r3, [r7, #24]
 8005fd2:	61fa      	str	r2, [r7, #28]
 8005fd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fd8:	f7fa f982 	bl	80002e0 <__aeabi_uldivmod>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	460b      	mov	r3, r1
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005fe4:	4b0b      	ldr	r3, [pc, #44]	; (8006014 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	0c1b      	lsrs	r3, r3, #16
 8005fea:	f003 0303 	and.w	r3, r3, #3
 8005fee:	3301      	adds	r3, #1
 8005ff0:	005b      	lsls	r3, r3, #1
 8005ff2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005ff4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ffc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ffe:	e002      	b.n	8006006 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006000:	4b05      	ldr	r3, [pc, #20]	; (8006018 <HAL_RCC_GetSysClockFreq+0x204>)
 8006002:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006004:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006008:	4618      	mov	r0, r3
 800600a:	3750      	adds	r7, #80	; 0x50
 800600c:	46bd      	mov	sp, r7
 800600e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006012:	bf00      	nop
 8006014:	40023800 	.word	0x40023800
 8006018:	00f42400 	.word	0x00f42400
 800601c:	007a1200 	.word	0x007a1200

08006020 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006020:	b480      	push	{r7}
 8006022:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006024:	4b03      	ldr	r3, [pc, #12]	; (8006034 <HAL_RCC_GetHCLKFreq+0x14>)
 8006026:	681b      	ldr	r3, [r3, #0]
}
 8006028:	4618      	mov	r0, r3
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	20000004 	.word	0x20000004

08006038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800603c:	f7ff fff0 	bl	8006020 <HAL_RCC_GetHCLKFreq>
 8006040:	4602      	mov	r2, r0
 8006042:	4b05      	ldr	r3, [pc, #20]	; (8006058 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	0a9b      	lsrs	r3, r3, #10
 8006048:	f003 0307 	and.w	r3, r3, #7
 800604c:	4903      	ldr	r1, [pc, #12]	; (800605c <HAL_RCC_GetPCLK1Freq+0x24>)
 800604e:	5ccb      	ldrb	r3, [r1, r3]
 8006050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006054:	4618      	mov	r0, r3
 8006056:	bd80      	pop	{r7, pc}
 8006058:	40023800 	.word	0x40023800
 800605c:	08011f78 	.word	0x08011f78

08006060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006064:	f7ff ffdc 	bl	8006020 <HAL_RCC_GetHCLKFreq>
 8006068:	4602      	mov	r2, r0
 800606a:	4b05      	ldr	r3, [pc, #20]	; (8006080 <HAL_RCC_GetPCLK2Freq+0x20>)
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	0b5b      	lsrs	r3, r3, #13
 8006070:	f003 0307 	and.w	r3, r3, #7
 8006074:	4903      	ldr	r1, [pc, #12]	; (8006084 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006076:	5ccb      	ldrb	r3, [r1, r3]
 8006078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800607c:	4618      	mov	r0, r3
 800607e:	bd80      	pop	{r7, pc}
 8006080:	40023800 	.word	0x40023800
 8006084:	08011f78 	.word	0x08011f78

08006088 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b088      	sub	sp, #32
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006090:	2300      	movs	r3, #0
 8006092:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006094:	2300      	movs	r3, #0
 8006096:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006098:	2300      	movs	r3, #0
 800609a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800609c:	2300      	movs	r3, #0
 800609e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80060a0:	2300      	movs	r3, #0
 80060a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d012      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80060b0:	4b69      	ldr	r3, [pc, #420]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	4a68      	ldr	r2, [pc, #416]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80060ba:	6093      	str	r3, [r2, #8]
 80060bc:	4b66      	ldr	r3, [pc, #408]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060be:	689a      	ldr	r2, [r3, #8]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060c4:	4964      	ldr	r1, [pc, #400]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d101      	bne.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80060d2:	2301      	movs	r3, #1
 80060d4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d017      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80060e2:	4b5d      	ldr	r3, [pc, #372]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f0:	4959      	ldr	r1, [pc, #356]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006100:	d101      	bne.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006102:	2301      	movs	r3, #1
 8006104:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800610e:	2301      	movs	r3, #1
 8006110:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d017      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800611e:	4b4e      	ldr	r3, [pc, #312]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006124:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612c:	494a      	ldr	r1, [pc, #296]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800612e:	4313      	orrs	r3, r2
 8006130:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006138:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800613c:	d101      	bne.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800613e:	2301      	movs	r3, #1
 8006140:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006146:	2b00      	cmp	r3, #0
 8006148:	d101      	bne.n	800614e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800614a:	2301      	movs	r3, #1
 800614c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800615a:	2301      	movs	r3, #1
 800615c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 0320 	and.w	r3, r3, #32
 8006166:	2b00      	cmp	r3, #0
 8006168:	f000 808b 	beq.w	8006282 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800616c:	4b3a      	ldr	r3, [pc, #232]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800616e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006170:	4a39      	ldr	r2, [pc, #228]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006176:	6413      	str	r3, [r2, #64]	; 0x40
 8006178:	4b37      	ldr	r3, [pc, #220]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800617a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006180:	60bb      	str	r3, [r7, #8]
 8006182:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006184:	4b35      	ldr	r3, [pc, #212]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a34      	ldr	r2, [pc, #208]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800618a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800618e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006190:	f7fb fd5a 	bl	8001c48 <HAL_GetTick>
 8006194:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006196:	e008      	b.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006198:	f7fb fd56 	bl	8001c48 <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	2b64      	cmp	r3, #100	; 0x64
 80061a4:	d901      	bls.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e38f      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80061aa:	4b2c      	ldr	r3, [pc, #176]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d0f0      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061b6:	4b28      	ldr	r3, [pc, #160]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061be:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d035      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d02e      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061d4:	4b20      	ldr	r3, [pc, #128]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061dc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061de:	4b1e      	ldr	r3, [pc, #120]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e2:	4a1d      	ldr	r2, [pc, #116]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061e8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061ea:	4b1b      	ldr	r3, [pc, #108]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ee:	4a1a      	ldr	r2, [pc, #104]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80061f6:	4a18      	ldr	r2, [pc, #96]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80061fc:	4b16      	ldr	r3, [pc, #88]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006200:	f003 0301 	and.w	r3, r3, #1
 8006204:	2b01      	cmp	r3, #1
 8006206:	d114      	bne.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006208:	f7fb fd1e 	bl	8001c48 <HAL_GetTick>
 800620c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800620e:	e00a      	b.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006210:	f7fb fd1a 	bl	8001c48 <HAL_GetTick>
 8006214:	4602      	mov	r2, r0
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	f241 3288 	movw	r2, #5000	; 0x1388
 800621e:	4293      	cmp	r3, r2
 8006220:	d901      	bls.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006222:	2303      	movs	r3, #3
 8006224:	e351      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006226:	4b0c      	ldr	r3, [pc, #48]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800622a:	f003 0302 	and.w	r3, r3, #2
 800622e:	2b00      	cmp	r3, #0
 8006230:	d0ee      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800623a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800623e:	d111      	bne.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006240:	4b05      	ldr	r3, [pc, #20]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800624c:	4b04      	ldr	r3, [pc, #16]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800624e:	400b      	ands	r3, r1
 8006250:	4901      	ldr	r1, [pc, #4]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006252:	4313      	orrs	r3, r2
 8006254:	608b      	str	r3, [r1, #8]
 8006256:	e00b      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006258:	40023800 	.word	0x40023800
 800625c:	40007000 	.word	0x40007000
 8006260:	0ffffcff 	.word	0x0ffffcff
 8006264:	4bac      	ldr	r3, [pc, #688]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	4aab      	ldr	r2, [pc, #684]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800626a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800626e:	6093      	str	r3, [r2, #8]
 8006270:	4ba9      	ldr	r3, [pc, #676]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006272:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006278:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800627c:	49a6      	ldr	r1, [pc, #664]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800627e:	4313      	orrs	r3, r2
 8006280:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0310 	and.w	r3, r3, #16
 800628a:	2b00      	cmp	r3, #0
 800628c:	d010      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800628e:	4ba2      	ldr	r3, [pc, #648]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006290:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006294:	4aa0      	ldr	r2, [pc, #640]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006296:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800629a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800629e:	4b9e      	ldr	r3, [pc, #632]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a8:	499b      	ldr	r1, [pc, #620]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00a      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062bc:	4b96      	ldr	r3, [pc, #600]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062ca:	4993      	ldr	r1, [pc, #588]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062cc:	4313      	orrs	r3, r2
 80062ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00a      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80062de:	4b8e      	ldr	r3, [pc, #568]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062ec:	498a      	ldr	r1, [pc, #552]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062ee:	4313      	orrs	r3, r2
 80062f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00a      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006300:	4b85      	ldr	r3, [pc, #532]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006306:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800630e:	4982      	ldr	r1, [pc, #520]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006310:	4313      	orrs	r3, r2
 8006312:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00a      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006322:	4b7d      	ldr	r3, [pc, #500]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006328:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006330:	4979      	ldr	r1, [pc, #484]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006332:	4313      	orrs	r3, r2
 8006334:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00a      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006344:	4b74      	ldr	r3, [pc, #464]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800634a:	f023 0203 	bic.w	r2, r3, #3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006352:	4971      	ldr	r1, [pc, #452]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006354:	4313      	orrs	r3, r2
 8006356:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00a      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006366:	4b6c      	ldr	r3, [pc, #432]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800636c:	f023 020c 	bic.w	r2, r3, #12
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006374:	4968      	ldr	r1, [pc, #416]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006376:	4313      	orrs	r3, r2
 8006378:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00a      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006388:	4b63      	ldr	r3, [pc, #396]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800638a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800638e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006396:	4960      	ldr	r1, [pc, #384]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006398:	4313      	orrs	r3, r2
 800639a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00a      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80063aa:	4b5b      	ldr	r3, [pc, #364]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063b0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063b8:	4957      	ldr	r1, [pc, #348]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00a      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80063cc:	4b52      	ldr	r3, [pc, #328]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063da:	494f      	ldr	r1, [pc, #316]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00a      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80063ee:	4b4a      	ldr	r3, [pc, #296]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063fc:	4946      	ldr	r1, [pc, #280]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00a      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006410:	4b41      	ldr	r3, [pc, #260]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006416:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800641e:	493e      	ldr	r1, [pc, #248]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006420:	4313      	orrs	r3, r2
 8006422:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00a      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006432:	4b39      	ldr	r3, [pc, #228]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006438:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006440:	4935      	ldr	r1, [pc, #212]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006442:	4313      	orrs	r3, r2
 8006444:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00a      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006454:	4b30      	ldr	r3, [pc, #192]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800645a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006462:	492d      	ldr	r1, [pc, #180]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006464:	4313      	orrs	r3, r2
 8006466:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d011      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006476:	4b28      	ldr	r3, [pc, #160]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800647c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006484:	4924      	ldr	r1, [pc, #144]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006486:	4313      	orrs	r3, r2
 8006488:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006490:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006494:	d101      	bne.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006496:	2301      	movs	r3, #1
 8006498:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0308 	and.w	r3, r3, #8
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80064a6:	2301      	movs	r3, #1
 80064a8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00a      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064b6:	4b18      	ldr	r3, [pc, #96]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064bc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064c4:	4914      	ldr	r1, [pc, #80]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00b      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80064d8:	4b0f      	ldr	r3, [pc, #60]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064de:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064e8:	490b      	ldr	r1, [pc, #44]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00f      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80064fc:	4b06      	ldr	r3, [pc, #24]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006502:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800650c:	4902      	ldr	r1, [pc, #8]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800650e:	4313      	orrs	r3, r2
 8006510:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006514:	e002      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8006516:	bf00      	nop
 8006518:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00b      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006528:	4b8a      	ldr	r3, [pc, #552]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800652a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800652e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006538:	4986      	ldr	r1, [pc, #536]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800653a:	4313      	orrs	r3, r2
 800653c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00b      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800654c:	4b81      	ldr	r3, [pc, #516]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800654e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006552:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800655c:	497d      	ldr	r1, [pc, #500]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800655e:	4313      	orrs	r3, r2
 8006560:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	2b01      	cmp	r3, #1
 8006568:	d006      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006572:	2b00      	cmp	r3, #0
 8006574:	f000 80d6 	beq.w	8006724 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006578:	4b76      	ldr	r3, [pc, #472]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a75      	ldr	r2, [pc, #468]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800657e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006582:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006584:	f7fb fb60 	bl	8001c48 <HAL_GetTick>
 8006588:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800658a:	e008      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800658c:	f7fb fb5c 	bl	8001c48 <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	2b64      	cmp	r3, #100	; 0x64
 8006598:	d901      	bls.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e195      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800659e:	4b6d      	ldr	r3, [pc, #436]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1f0      	bne.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d021      	beq.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x572>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d11d      	bne.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80065be:	4b65      	ldr	r3, [pc, #404]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065c4:	0c1b      	lsrs	r3, r3, #16
 80065c6:	f003 0303 	and.w	r3, r3, #3
 80065ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80065cc:	4b61      	ldr	r3, [pc, #388]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065d2:	0e1b      	lsrs	r3, r3, #24
 80065d4:	f003 030f 	and.w	r3, r3, #15
 80065d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	019a      	lsls	r2, r3, #6
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	041b      	lsls	r3, r3, #16
 80065e4:	431a      	orrs	r2, r3
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	061b      	lsls	r3, r3, #24
 80065ea:	431a      	orrs	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	071b      	lsls	r3, r3, #28
 80065f2:	4958      	ldr	r1, [pc, #352]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065f4:	4313      	orrs	r3, r2
 80065f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d004      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800660a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800660e:	d00a      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006618:	2b00      	cmp	r3, #0
 800661a:	d02e      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006620:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006624:	d129      	bne.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006626:	4b4b      	ldr	r3, [pc, #300]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006628:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800662c:	0c1b      	lsrs	r3, r3, #16
 800662e:	f003 0303 	and.w	r3, r3, #3
 8006632:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006634:	4b47      	ldr	r3, [pc, #284]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006636:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800663a:	0f1b      	lsrs	r3, r3, #28
 800663c:	f003 0307 	and.w	r3, r3, #7
 8006640:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	019a      	lsls	r2, r3, #6
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	041b      	lsls	r3, r3, #16
 800664c:	431a      	orrs	r2, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	061b      	lsls	r3, r3, #24
 8006654:	431a      	orrs	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	071b      	lsls	r3, r3, #28
 800665a:	493e      	ldr	r1, [pc, #248]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800665c:	4313      	orrs	r3, r2
 800665e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006662:	4b3c      	ldr	r3, [pc, #240]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006668:	f023 021f 	bic.w	r2, r3, #31
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006670:	3b01      	subs	r3, #1
 8006672:	4938      	ldr	r1, [pc, #224]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006674:	4313      	orrs	r3, r2
 8006676:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d01d      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006686:	4b33      	ldr	r3, [pc, #204]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006688:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800668c:	0e1b      	lsrs	r3, r3, #24
 800668e:	f003 030f 	and.w	r3, r3, #15
 8006692:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006694:	4b2f      	ldr	r3, [pc, #188]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006696:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800669a:	0f1b      	lsrs	r3, r3, #28
 800669c:	f003 0307 	and.w	r3, r3, #7
 80066a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	019a      	lsls	r2, r3, #6
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	041b      	lsls	r3, r3, #16
 80066ae:	431a      	orrs	r2, r3
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	061b      	lsls	r3, r3, #24
 80066b4:	431a      	orrs	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	071b      	lsls	r3, r3, #28
 80066ba:	4926      	ldr	r1, [pc, #152]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d011      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	019a      	lsls	r2, r3, #6
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	041b      	lsls	r3, r3, #16
 80066da:	431a      	orrs	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	061b      	lsls	r3, r3, #24
 80066e2:	431a      	orrs	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	071b      	lsls	r3, r3, #28
 80066ea:	491a      	ldr	r1, [pc, #104]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066ec:	4313      	orrs	r3, r2
 80066ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80066f2:	4b18      	ldr	r3, [pc, #96]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a17      	ldr	r2, [pc, #92]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80066fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066fe:	f7fb faa3 	bl	8001c48 <HAL_GetTick>
 8006702:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006704:	e008      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006706:	f7fb fa9f 	bl	8001c48 <HAL_GetTick>
 800670a:	4602      	mov	r2, r0
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	2b64      	cmp	r3, #100	; 0x64
 8006712:	d901      	bls.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006714:	2303      	movs	r3, #3
 8006716:	e0d8      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006718:	4b0e      	ldr	r3, [pc, #56]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006720:	2b00      	cmp	r3, #0
 8006722:	d0f0      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	2b01      	cmp	r3, #1
 8006728:	f040 80ce 	bne.w	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800672c:	4b09      	ldr	r3, [pc, #36]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a08      	ldr	r2, [pc, #32]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006732:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006736:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006738:	f7fb fa86 	bl	8001c48 <HAL_GetTick>
 800673c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800673e:	e00b      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006740:	f7fb fa82 	bl	8001c48 <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	2b64      	cmp	r3, #100	; 0x64
 800674c:	d904      	bls.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e0bb      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006752:	bf00      	nop
 8006754:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006758:	4b5e      	ldr	r3, [pc, #376]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006760:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006764:	d0ec      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006776:	2b00      	cmp	r3, #0
 8006778:	d009      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006782:	2b00      	cmp	r3, #0
 8006784:	d02e      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678a:	2b00      	cmp	r3, #0
 800678c:	d12a      	bne.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800678e:	4b51      	ldr	r3, [pc, #324]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006794:	0c1b      	lsrs	r3, r3, #16
 8006796:	f003 0303 	and.w	r3, r3, #3
 800679a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800679c:	4b4d      	ldr	r3, [pc, #308]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800679e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a2:	0f1b      	lsrs	r3, r3, #28
 80067a4:	f003 0307 	and.w	r3, r3, #7
 80067a8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	019a      	lsls	r2, r3, #6
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	041b      	lsls	r3, r3, #16
 80067b4:	431a      	orrs	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	061b      	lsls	r3, r3, #24
 80067bc:	431a      	orrs	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	071b      	lsls	r3, r3, #28
 80067c2:	4944      	ldr	r1, [pc, #272]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80067ca:	4b42      	ldr	r3, [pc, #264]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d8:	3b01      	subs	r3, #1
 80067da:	021b      	lsls	r3, r3, #8
 80067dc:	493d      	ldr	r1, [pc, #244]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067de:	4313      	orrs	r3, r2
 80067e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d022      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067f8:	d11d      	bne.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80067fa:	4b36      	ldr	r3, [pc, #216]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006800:	0e1b      	lsrs	r3, r3, #24
 8006802:	f003 030f 	and.w	r3, r3, #15
 8006806:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006808:	4b32      	ldr	r3, [pc, #200]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800680a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800680e:	0f1b      	lsrs	r3, r3, #28
 8006810:	f003 0307 	and.w	r3, r3, #7
 8006814:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	019a      	lsls	r2, r3, #6
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a1b      	ldr	r3, [r3, #32]
 8006820:	041b      	lsls	r3, r3, #16
 8006822:	431a      	orrs	r2, r3
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	061b      	lsls	r3, r3, #24
 8006828:	431a      	orrs	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	071b      	lsls	r3, r3, #28
 800682e:	4929      	ldr	r1, [pc, #164]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006830:	4313      	orrs	r3, r2
 8006832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 0308 	and.w	r3, r3, #8
 800683e:	2b00      	cmp	r3, #0
 8006840:	d028      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006842:	4b24      	ldr	r3, [pc, #144]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006848:	0e1b      	lsrs	r3, r3, #24
 800684a:	f003 030f 	and.w	r3, r3, #15
 800684e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006850:	4b20      	ldr	r3, [pc, #128]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006856:	0c1b      	lsrs	r3, r3, #16
 8006858:	f003 0303 	and.w	r3, r3, #3
 800685c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	695b      	ldr	r3, [r3, #20]
 8006862:	019a      	lsls	r2, r3, #6
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	041b      	lsls	r3, r3, #16
 8006868:	431a      	orrs	r2, r3
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	061b      	lsls	r3, r3, #24
 800686e:	431a      	orrs	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	69db      	ldr	r3, [r3, #28]
 8006874:	071b      	lsls	r3, r3, #28
 8006876:	4917      	ldr	r1, [pc, #92]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006878:	4313      	orrs	r3, r2
 800687a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800687e:	4b15      	ldr	r3, [pc, #84]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006884:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688c:	4911      	ldr	r1, [pc, #68]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800688e:	4313      	orrs	r3, r2
 8006890:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006894:	4b0f      	ldr	r3, [pc, #60]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a0e      	ldr	r2, [pc, #56]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800689a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800689e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068a0:	f7fb f9d2 	bl	8001c48 <HAL_GetTick>
 80068a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80068a6:	e008      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80068a8:	f7fb f9ce 	bl	8001c48 <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	2b64      	cmp	r3, #100	; 0x64
 80068b4:	d901      	bls.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e007      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80068ba:	4b06      	ldr	r3, [pc, #24]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068c6:	d1ef      	bne.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3720      	adds	r7, #32
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	40023800 	.word	0x40023800

080068d8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e022      	b.n	8006930 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d105      	bne.n	8006902 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f7fa fd75 	bl	80013ec <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2203      	movs	r2, #3
 8006906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 f814 	bl	8006938 <HAL_SD_InitCard>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d001      	beq.n	800691a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e00a      	b.n	8006930 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3708      	adds	r7, #8
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006938:	b5b0      	push	{r4, r5, r7, lr}
 800693a:	b08e      	sub	sp, #56	; 0x38
 800693c:	af04      	add	r7, sp, #16
 800693e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006940:	2300      	movs	r3, #0
 8006942:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8006944:	2300      	movs	r3, #0
 8006946:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006948:	2300      	movs	r3, #0
 800694a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800694c:	2300      	movs	r3, #0
 800694e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006950:	2300      	movs	r3, #0
 8006952:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8006954:	2376      	movs	r3, #118	; 0x76
 8006956:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681d      	ldr	r5, [r3, #0]
 800695c:	466c      	mov	r4, sp
 800695e:	f107 0314 	add.w	r3, r7, #20
 8006962:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006966:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800696a:	f107 0308 	add.w	r3, r7, #8
 800696e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006970:	4628      	mov	r0, r5
 8006972:	f001 fdc5 	bl	8008500 <SDMMC_Init>
 8006976:	4603      	mov	r3, r0
 8006978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800697c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006980:	2b00      	cmp	r3, #0
 8006982:	d001      	beq.n	8006988 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e059      	b.n	8006a3c <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006996:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4618      	mov	r0, r3
 800699e:	f001 fdf9 	bl	8008594 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	685a      	ldr	r2, [r3, #4]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069b0:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80069b2:	2002      	movs	r0, #2
 80069b4:	f7fb f954 	bl	8001c60 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 ff59 	bl	8007870 <SD_PowerON>
 80069be:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80069c0:	6a3b      	ldr	r3, [r7, #32]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00b      	beq.n	80069de <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069d2:	6a3b      	ldr	r3, [r7, #32]
 80069d4:	431a      	orrs	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e02e      	b.n	8006a3c <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fe78 	bl	80076d4 <SD_InitCard>
 80069e4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80069e6:	6a3b      	ldr	r3, [r7, #32]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00b      	beq.n	8006a04 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069f8:	6a3b      	ldr	r3, [r7, #32]
 80069fa:	431a      	orrs	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e01b      	b.n	8006a3c <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f001 fe53 	bl	80086b8 <SDMMC_CmdBlockLength>
 8006a12:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00f      	beq.n	8006a3a <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a09      	ldr	r2, [pc, #36]	; (8006a44 <HAL_SD_InitCard+0x10c>)
 8006a20:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a26:	6a3b      	ldr	r3, [r7, #32]
 8006a28:	431a      	orrs	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2201      	movs	r2, #1
 8006a32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e000      	b.n	8006a3c <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3728      	adds	r7, #40	; 0x28
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bdb0      	pop	{r4, r5, r7, pc}
 8006a44:	004005ff 	.word	0x004005ff

08006a48 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b08c      	sub	sp, #48	; 0x30
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
 8006a54:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d107      	bne.n	8006a70 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a64:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e0c3      	b.n	8006bf8 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	f040 80bc 	bne.w	8006bf6 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006a84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	441a      	add	r2, r3
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d907      	bls.n	8006aa2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a96:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e0aa      	b.n	8006bf8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2203      	movs	r2, #3
 8006aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8006ac0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac6:	4a4e      	ldr	r2, [pc, #312]	; (8006c00 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8006ac8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ace:	4a4d      	ldr	r2, [pc, #308]	; (8006c04 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006ad0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ade:	2200      	movs	r2, #0
 8006ae0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af2:	689a      	ldr	r2, [r3, #8]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	430a      	orrs	r2, r1
 8006afc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	3380      	adds	r3, #128	; 0x80
 8006b08:	4619      	mov	r1, r3
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	025b      	lsls	r3, r3, #9
 8006b10:	089b      	lsrs	r3, r3, #2
 8006b12:	f7fc f8b5 	bl	8002c80 <HAL_DMA_Start_IT>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d017      	beq.n	8006b4c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8006b2a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a35      	ldr	r2, [pc, #212]	; (8006c08 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8006b32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b38:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e055      	b.n	8006bf8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f042 0208 	orr.w	r2, r2, #8
 8006b5a:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d002      	beq.n	8006b6a <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8006b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b66:	025b      	lsls	r3, r3, #9
 8006b68:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006b6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b6e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	025b      	lsls	r3, r3, #9
 8006b74:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006b76:	2390      	movs	r3, #144	; 0x90
 8006b78:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8006b82:	2301      	movs	r3, #1
 8006b84:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f107 0210 	add.w	r2, r7, #16
 8006b8e:	4611      	mov	r1, r2
 8006b90:	4618      	mov	r0, r3
 8006b92:	f001 fd65 	bl	8008660 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d90a      	bls.n	8006bb2 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2282      	movs	r2, #130	; 0x82
 8006ba0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f001 fdc9 	bl	8008740 <SDMMC_CmdReadMultiBlock>
 8006bae:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006bb0:	e009      	b.n	8006bc6 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2281      	movs	r2, #129	; 0x81
 8006bb6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f001 fd9c 	bl	80086fc <SDMMC_CmdReadSingleBlock>
 8006bc4:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d012      	beq.n	8006bf2 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a0d      	ldr	r2, [pc, #52]	; (8006c08 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8006bd2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bda:	431a      	orrs	r2, r3
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e002      	b.n	8006bf8 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	e000      	b.n	8006bf8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8006bf6:	2302      	movs	r3, #2
  }
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3730      	adds	r7, #48	; 0x30
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	080074e3 	.word	0x080074e3
 8006c04:	08007555 	.word	0x08007555
 8006c08:	004005ff 	.word	0x004005ff

08006c0c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b08c      	sub	sp, #48	; 0x30
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
 8006c18:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d107      	bne.n	8006c34 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c28:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e0c6      	b.n	8006dc2 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	f040 80bf 	bne.w	8006dc0 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006c48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	441a      	add	r2, r3
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d907      	bls.n	8006c66 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e0ad      	b.n	8006dc2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2203      	movs	r2, #3
 8006c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2200      	movs	r2, #0
 8006c74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f042 021a 	orr.w	r2, r2, #26
 8006c84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c8a:	4a50      	ldr	r2, [pc, #320]	; (8006dcc <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8006c8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c92:	4a4f      	ldr	r2, [pc, #316]	; (8006dd0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8006c94:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d002      	beq.n	8006cac <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8006ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca8:	025b      	lsls	r3, r3, #9
 8006caa:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d90a      	bls.n	8006cc8 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	22a0      	movs	r2, #160	; 0xa0
 8006cb6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f001 fd82 	bl	80087c8 <SDMMC_CmdWriteMultiBlock>
 8006cc4:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006cc6:	e009      	b.n	8006cdc <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2290      	movs	r2, #144	; 0x90
 8006ccc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f001 fd55 	bl	8008784 <SDMMC_CmdWriteSingleBlock>
 8006cda:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d012      	beq.n	8006d08 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a3b      	ldr	r2, [pc, #236]	; (8006dd4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006ce8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf0:	431a      	orrs	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e05c      	b.n	8006dc2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f042 0208 	orr.w	r2, r2, #8
 8006d16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d1c:	2240      	movs	r2, #64	; 0x40
 8006d1e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d30:	689a      	ldr	r2, [r3, #8]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006d40:	68b9      	ldr	r1, [r7, #8]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	3380      	adds	r3, #128	; 0x80
 8006d48:	461a      	mov	r2, r3
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	025b      	lsls	r3, r3, #9
 8006d4e:	089b      	lsrs	r3, r3, #2
 8006d50:	f7fb ff96 	bl	8002c80 <HAL_DMA_Start_IT>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d01a      	beq.n	8006d90 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f022 021a 	bic.w	r2, r2, #26
 8006d68:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a19      	ldr	r2, [pc, #100]	; (8006dd4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006d70:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d76:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e018      	b.n	8006dc2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006d90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d94:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	025b      	lsls	r3, r3, #9
 8006d9a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006d9c:	2390      	movs	r3, #144	; 0x90
 8006d9e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006da0:	2300      	movs	r3, #0
 8006da2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006da4:	2300      	movs	r3, #0
 8006da6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8006da8:	2301      	movs	r3, #1
 8006daa:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f107 0210 	add.w	r2, r7, #16
 8006db4:	4611      	mov	r1, r2
 8006db6:	4618      	mov	r0, r3
 8006db8:	f001 fc52 	bl	8008660 <SDMMC_ConfigData>

      return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	e000      	b.n	8006dc2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8006dc0:	2302      	movs	r3, #2
  }
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3730      	adds	r7, #48	; 0x30
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	080074b9 	.word	0x080074b9
 8006dd0:	08007555 	.word	0x08007555
 8006dd4:	004005ff 	.word	0x004005ff

08006dd8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d008      	beq.n	8006e06 <HAL_SD_IRQHandler+0x2e>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f003 0308 	and.w	r3, r3, #8
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d003      	beq.n	8006e06 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 fdec 	bl	80079dc <SD_Read_IT>
 8006e04:	e15a      	b.n	80070bc <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f000 808d 	beq.w	8006f30 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e1e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	4b9a      	ldr	r3, [pc, #616]	; (8007094 <HAL_SD_IRQHandler+0x2bc>)
 8006e2c:	400b      	ands	r3, r1
 8006e2e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f022 0201 	bic.w	r2, r2, #1
 8006e3e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f003 0308 	and.w	r3, r3, #8
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d039      	beq.n	8006ebe <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f003 0302 	and.w	r3, r3, #2
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d104      	bne.n	8006e5e <HAL_SD_IRQHandler+0x86>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f003 0320 	and.w	r3, r3, #32
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d011      	beq.n	8006e82 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4618      	mov	r0, r3
 8006e64:	f001 fcd2 	bl	800880c <SDMMC_CmdStopTransfer>
 8006e68:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d008      	beq.n	8006e82 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	431a      	orrs	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 f921 	bl	80070c4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f240 523a 	movw	r2, #1338	; 0x53a
 8006e8a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f003 0301 	and.w	r3, r3, #1
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d104      	bne.n	8006eae <HAL_SD_IRQHandler+0xd6>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f003 0302 	and.w	r3, r3, #2
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d003      	beq.n	8006eb6 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f003 fd3c 	bl	800a92c <HAL_SD_RxCpltCallback>
 8006eb4:	e102      	b.n	80070bc <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f003 fd2e 	bl	800a918 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006ebc:	e0fe      	b.n	80070bc <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f000 80f9 	beq.w	80070bc <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f003 0320 	and.w	r3, r3, #32
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d011      	beq.n	8006ef8 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f001 fc97 	bl	800880c <SDMMC_CmdStopTransfer>
 8006ede:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d008      	beq.n	8006ef8 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	431a      	orrs	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f8e6 	bl	80070c4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	f040 80dc 	bne.w	80070bc <HAL_SD_IRQHandler+0x2e4>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f003 0302 	and.w	r3, r3, #2
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f040 80d6 	bne.w	80070bc <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f022 0208 	bic.w	r2, r2, #8
 8006f1e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f003 fcf5 	bl	800a918 <HAL_SD_TxCpltCallback>
}
 8006f2e:	e0c5      	b.n	80070bc <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d008      	beq.n	8006f50 <HAL_SD_IRQHandler+0x178>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f003 0308 	and.w	r3, r3, #8
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d003      	beq.n	8006f50 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fd98 	bl	8007a7e <SD_Write_IT>
 8006f4e:	e0b5      	b.n	80070bc <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f56:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f000 80ae 	beq.w	80070bc <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f66:	f003 0302 	and.w	r3, r3, #2
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d005      	beq.n	8006f7a <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f72:	f043 0202 	orr.w	r2, r3, #2
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f80:	f003 0308 	and.w	r3, r3, #8
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d005      	beq.n	8006f94 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8c:	f043 0208 	orr.w	r2, r3, #8
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f9a:	f003 0320 	and.w	r3, r3, #32
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d005      	beq.n	8006fae <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa6:	f043 0220 	orr.w	r2, r3, #32
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb4:	f003 0310 	and.w	r3, r3, #16
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d005      	beq.n	8006fc8 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc0:	f043 0210 	orr.w	r2, r3, #16
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f240 523a 	movw	r2, #1338	; 0x53a
 8006fd0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006fe0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f001 fc10 	bl	800880c <SDMMC_CmdStopTransfer>
 8006fec:	4602      	mov	r2, r0
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff2:	431a      	orrs	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f003 0308 	and.w	r3, r3, #8
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00a      	beq.n	8007018 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2201      	movs	r2, #1
 8007006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 f857 	bl	80070c4 <HAL_SD_ErrorCallback>
}
 8007016:	e051      	b.n	80070bc <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800701e:	2b00      	cmp	r3, #0
 8007020:	d04c      	beq.n	80070bc <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f003 0310 	and.w	r3, r3, #16
 8007028:	2b00      	cmp	r3, #0
 800702a:	d104      	bne.n	8007036 <HAL_SD_IRQHandler+0x25e>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f003 0320 	and.w	r3, r3, #32
 8007032:	2b00      	cmp	r3, #0
 8007034:	d011      	beq.n	800705a <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800703a:	4a17      	ldr	r2, [pc, #92]	; (8007098 <HAL_SD_IRQHandler+0x2c0>)
 800703c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007042:	4618      	mov	r0, r3
 8007044:	f7fb fe7c 	bl	8002d40 <HAL_DMA_Abort_IT>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d036      	beq.n	80070bc <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007052:	4618      	mov	r0, r3
 8007054:	f000 fad0 	bl	80075f8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007058:	e030      	b.n	80070bc <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f003 0301 	and.w	r3, r3, #1
 8007060:	2b00      	cmp	r3, #0
 8007062:	d104      	bne.n	800706e <HAL_SD_IRQHandler+0x296>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f003 0302 	and.w	r3, r3, #2
 800706a:	2b00      	cmp	r3, #0
 800706c:	d018      	beq.n	80070a0 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007072:	4a0a      	ldr	r2, [pc, #40]	; (800709c <HAL_SD_IRQHandler+0x2c4>)
 8007074:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707a:	4618      	mov	r0, r3
 800707c:	f7fb fe60 	bl	8002d40 <HAL_DMA_Abort_IT>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d01a      	beq.n	80070bc <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708a:	4618      	mov	r0, r3
 800708c:	f000 faeb 	bl	8007666 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007090:	e014      	b.n	80070bc <HAL_SD_IRQHandler+0x2e4>
 8007092:	bf00      	nop
 8007094:	ffff3ec5 	.word	0xffff3ec5
 8007098:	080075f9 	.word	0x080075f9
 800709c:	08007667 	.word	0x08007667
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f003 fc25 	bl	800a904 <HAL_SD_AbortCallback>
}
 80070ba:	e7ff      	b.n	80070bc <HAL_SD_IRQHandler+0x2e4>
 80070bc:	bf00      	nop
 80070be:	3710      	adds	r7, #16
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80070cc:	bf00      	nop
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070e6:	0f9b      	lsrs	r3, r3, #30
 80070e8:	b2da      	uxtb	r2, r3
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070f2:	0e9b      	lsrs	r3, r3, #26
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	f003 030f 	and.w	r3, r3, #15
 80070fa:	b2da      	uxtb	r2, r3
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007104:	0e1b      	lsrs	r3, r3, #24
 8007106:	b2db      	uxtb	r3, r3
 8007108:	f003 0303 	and.w	r3, r3, #3
 800710c:	b2da      	uxtb	r2, r3
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007116:	0c1b      	lsrs	r3, r3, #16
 8007118:	b2da      	uxtb	r2, r3
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007122:	0a1b      	lsrs	r3, r3, #8
 8007124:	b2da      	uxtb	r2, r3
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800712e:	b2da      	uxtb	r2, r3
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007138:	0d1b      	lsrs	r3, r3, #20
 800713a:	b29a      	uxth	r2, r3
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007144:	0c1b      	lsrs	r3, r3, #16
 8007146:	b2db      	uxtb	r3, r3
 8007148:	f003 030f 	and.w	r3, r3, #15
 800714c:	b2da      	uxtb	r2, r3
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007156:	0bdb      	lsrs	r3, r3, #15
 8007158:	b2db      	uxtb	r3, r3
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	b2da      	uxtb	r2, r3
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007168:	0b9b      	lsrs	r3, r3, #14
 800716a:	b2db      	uxtb	r3, r3
 800716c:	f003 0301 	and.w	r3, r3, #1
 8007170:	b2da      	uxtb	r2, r3
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800717a:	0b5b      	lsrs	r3, r3, #13
 800717c:	b2db      	uxtb	r3, r3
 800717e:	f003 0301 	and.w	r3, r3, #1
 8007182:	b2da      	uxtb	r2, r3
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800718c:	0b1b      	lsrs	r3, r3, #12
 800718e:	b2db      	uxtb	r3, r3
 8007190:	f003 0301 	and.w	r3, r3, #1
 8007194:	b2da      	uxtb	r2, r3
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	2200      	movs	r2, #0
 800719e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d163      	bne.n	8007270 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071ac:	009a      	lsls	r2, r3, #2
 80071ae:	f640 73fc 	movw	r3, #4092	; 0xffc
 80071b2:	4013      	ands	r3, r2
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80071b8:	0f92      	lsrs	r2, r2, #30
 80071ba:	431a      	orrs	r2, r3
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071c4:	0edb      	lsrs	r3, r3, #27
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	f003 0307 	and.w	r3, r3, #7
 80071cc:	b2da      	uxtb	r2, r3
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071d6:	0e1b      	lsrs	r3, r3, #24
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	f003 0307 	and.w	r3, r3, #7
 80071de:	b2da      	uxtb	r2, r3
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071e8:	0d5b      	lsrs	r3, r3, #21
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	f003 0307 	and.w	r3, r3, #7
 80071f0:	b2da      	uxtb	r2, r3
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071fa:	0c9b      	lsrs	r3, r3, #18
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	f003 0307 	and.w	r3, r3, #7
 8007202:	b2da      	uxtb	r2, r3
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800720c:	0bdb      	lsrs	r3, r3, #15
 800720e:	b2db      	uxtb	r3, r3
 8007210:	f003 0307 	and.w	r3, r3, #7
 8007214:	b2da      	uxtb	r2, r3
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	1c5a      	adds	r2, r3, #1
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	7e1b      	ldrb	r3, [r3, #24]
 8007228:	b2db      	uxtb	r3, r3
 800722a:	f003 0307 	and.w	r3, r3, #7
 800722e:	3302      	adds	r3, #2
 8007230:	2201      	movs	r2, #1
 8007232:	fa02 f303 	lsl.w	r3, r2, r3
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800723a:	fb03 f202 	mul.w	r2, r3, r2
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	7a1b      	ldrb	r3, [r3, #8]
 8007246:	b2db      	uxtb	r3, r3
 8007248:	f003 030f 	and.w	r3, r3, #15
 800724c:	2201      	movs	r2, #1
 800724e:	409a      	lsls	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800725c:	0a52      	lsrs	r2, r2, #9
 800725e:	fb03 f202 	mul.w	r2, r3, r2
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f44f 7200 	mov.w	r2, #512	; 0x200
 800726c:	661a      	str	r2, [r3, #96]	; 0x60
 800726e:	e031      	b.n	80072d4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007274:	2b01      	cmp	r3, #1
 8007276:	d11d      	bne.n	80072b4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800727c:	041b      	lsls	r3, r3, #16
 800727e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007286:	0c1b      	lsrs	r3, r3, #16
 8007288:	431a      	orrs	r2, r3
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	3301      	adds	r3, #1
 8007294:	029a      	lsls	r2, r3, #10
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072a8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	661a      	str	r2, [r3, #96]	; 0x60
 80072b2:	e00f      	b.n	80072d4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a58      	ldr	r2, [pc, #352]	; (800741c <HAL_SD_GetCardCSD+0x344>)
 80072ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e09d      	b.n	8007410 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072d8:	0b9b      	lsrs	r3, r3, #14
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	f003 0301 	and.w	r3, r3, #1
 80072e0:	b2da      	uxtb	r2, r3
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072ea:	09db      	lsrs	r3, r3, #7
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072f2:	b2da      	uxtb	r2, r3
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007302:	b2da      	uxtb	r2, r3
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800730c:	0fdb      	lsrs	r3, r3, #31
 800730e:	b2da      	uxtb	r2, r3
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007318:	0f5b      	lsrs	r3, r3, #29
 800731a:	b2db      	uxtb	r3, r3
 800731c:	f003 0303 	and.w	r3, r3, #3
 8007320:	b2da      	uxtb	r2, r3
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800732a:	0e9b      	lsrs	r3, r3, #26
 800732c:	b2db      	uxtb	r3, r3
 800732e:	f003 0307 	and.w	r3, r3, #7
 8007332:	b2da      	uxtb	r2, r3
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800733c:	0d9b      	lsrs	r3, r3, #22
 800733e:	b2db      	uxtb	r3, r3
 8007340:	f003 030f 	and.w	r3, r3, #15
 8007344:	b2da      	uxtb	r2, r3
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800734e:	0d5b      	lsrs	r3, r3, #21
 8007350:	b2db      	uxtb	r3, r3
 8007352:	f003 0301 	and.w	r3, r3, #1
 8007356:	b2da      	uxtb	r2, r3
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800736a:	0c1b      	lsrs	r3, r3, #16
 800736c:	b2db      	uxtb	r3, r3
 800736e:	f003 0301 	and.w	r3, r3, #1
 8007372:	b2da      	uxtb	r2, r3
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800737e:	0bdb      	lsrs	r3, r3, #15
 8007380:	b2db      	uxtb	r3, r3
 8007382:	f003 0301 	and.w	r3, r3, #1
 8007386:	b2da      	uxtb	r2, r3
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007392:	0b9b      	lsrs	r3, r3, #14
 8007394:	b2db      	uxtb	r3, r3
 8007396:	f003 0301 	and.w	r3, r3, #1
 800739a:	b2da      	uxtb	r2, r3
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a6:	0b5b      	lsrs	r3, r3, #13
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	f003 0301 	and.w	r3, r3, #1
 80073ae:	b2da      	uxtb	r2, r3
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ba:	0b1b      	lsrs	r3, r3, #12
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	f003 0301 	and.w	r3, r3, #1
 80073c2:	b2da      	uxtb	r2, r3
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ce:	0a9b      	lsrs	r3, r3, #10
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	f003 0303 	and.w	r3, r3, #3
 80073d6:	b2da      	uxtb	r2, r3
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073e2:	0a1b      	lsrs	r3, r3, #8
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	f003 0303 	and.w	r3, r3, #3
 80073ea:	b2da      	uxtb	r2, r3
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073f6:	085b      	lsrs	r3, r3, #1
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073fe:	b2da      	uxtb	r2, r3
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	2201      	movs	r2, #1
 800740a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr
 800741c:	004005ff 	.word	0x004005ff

08007420 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b086      	sub	sp, #24
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007480:	2300      	movs	r3, #0
 8007482:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007484:	f107 030c 	add.w	r3, r7, #12
 8007488:	4619      	mov	r1, r3
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 fa7e 	bl	800798c <SD_SendStatus>
 8007490:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d005      	beq.n	80074a4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	431a      	orrs	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	0a5b      	lsrs	r3, r3, #9
 80074a8:	f003 030f 	and.w	r3, r3, #15
 80074ac:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80074ae:	693b      	ldr	r3, [r7, #16]
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3718      	adds	r7, #24
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074d4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80074d6:	bf00      	nop
 80074d8:	3714      	adds	r7, #20
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b084      	sub	sp, #16
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ee:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f4:	2b82      	cmp	r3, #130	; 0x82
 80074f6:	d111      	bne.n	800751c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4618      	mov	r0, r3
 80074fe:	f001 f985 	bl	800880c <SDMMC_CmdStopTransfer>
 8007502:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d008      	beq.n	800751c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	431a      	orrs	r2, r3
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f7ff fdd4 	bl	80070c4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f022 0208 	bic.w	r2, r2, #8
 800752a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f240 523a 	movw	r2, #1338	; 0x53a
 8007534:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f003 f9f1 	bl	800a92c <HAL_SD_RxCpltCallback>
#endif
}
 800754a:	bf00      	nop
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
	...

08007554 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b086      	sub	sp, #24
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007560:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f7fb fd98 	bl	8003098 <HAL_DMA_GetError>
 8007568:	4603      	mov	r3, r0
 800756a:	2b02      	cmp	r3, #2
 800756c:	d03e      	beq.n	80075ec <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007574:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800757a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800757c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d002      	beq.n	800758a <SD_DMAError+0x36>
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2b01      	cmp	r3, #1
 8007588:	d12d      	bne.n	80075e6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a19      	ldr	r2, [pc, #100]	; (80075f4 <SD_DMAError+0xa0>)
 8007590:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80075a0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80075ae:	6978      	ldr	r0, [r7, #20]
 80075b0:	f7ff ff62 	bl	8007478 <HAL_SD_GetCardState>
 80075b4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	2b06      	cmp	r3, #6
 80075ba:	d002      	beq.n	80075c2 <SD_DMAError+0x6e>
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	2b05      	cmp	r3, #5
 80075c0:	d10a      	bne.n	80075d8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4618      	mov	r0, r3
 80075c8:	f001 f920 	bl	800880c <SDMMC_CmdStopTransfer>
 80075cc:	4602      	mov	r2, r0
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d2:	431a      	orrs	r2, r3
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	2200      	movs	r2, #0
 80075e4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80075e6:	6978      	ldr	r0, [r7, #20]
 80075e8:	f7ff fd6c 	bl	80070c4 <HAL_SD_ErrorCallback>
#endif
  }
}
 80075ec:	bf00      	nop
 80075ee:	3718      	adds	r7, #24
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	004005ff 	.word	0x004005ff

080075f8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007604:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f240 523a 	movw	r2, #1338	; 0x53a
 800760e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007610:	68f8      	ldr	r0, [r7, #12]
 8007612:	f7ff ff31 	bl	8007478 <HAL_SD_GetCardState>
 8007616:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	2b06      	cmp	r3, #6
 800762a:	d002      	beq.n	8007632 <SD_DMATxAbort+0x3a>
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	2b05      	cmp	r3, #5
 8007630:	d10a      	bne.n	8007648 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4618      	mov	r0, r3
 8007638:	f001 f8e8 	bl	800880c <SDMMC_CmdStopTransfer>
 800763c:	4602      	mov	r2, r0
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007642:	431a      	orrs	r2, r3
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764c:	2b00      	cmp	r3, #0
 800764e:	d103      	bne.n	8007658 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f003 f957 	bl	800a904 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007656:	e002      	b.n	800765e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f7ff fd33 	bl	80070c4 <HAL_SD_ErrorCallback>
}
 800765e:	bf00      	nop
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b084      	sub	sp, #16
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007672:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f240 523a 	movw	r2, #1338	; 0x53a
 800767c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f7ff fefa 	bl	8007478 <HAL_SD_GetCardState>
 8007684:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2201      	movs	r2, #1
 800768a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2200      	movs	r2, #0
 8007692:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	2b06      	cmp	r3, #6
 8007698:	d002      	beq.n	80076a0 <SD_DMARxAbort+0x3a>
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	2b05      	cmp	r3, #5
 800769e:	d10a      	bne.n	80076b6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4618      	mov	r0, r3
 80076a6:	f001 f8b1 	bl	800880c <SDMMC_CmdStopTransfer>
 80076aa:	4602      	mov	r2, r0
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b0:	431a      	orrs	r2, r3
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d103      	bne.n	80076c6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f003 f920 	bl	800a904 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80076c4:	e002      	b.n	80076cc <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f7ff fcfc 	bl	80070c4 <HAL_SD_ErrorCallback>
}
 80076cc:	bf00      	nop
 80076ce:	3710      	adds	r7, #16
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80076d4:	b5b0      	push	{r4, r5, r7, lr}
 80076d6:	b094      	sub	sp, #80	; 0x50
 80076d8:	af04      	add	r7, sp, #16
 80076da:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80076dc:	2301      	movs	r3, #1
 80076de:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4618      	mov	r0, r3
 80076e6:	f000 ff63 	bl	80085b0 <SDMMC_GetPowerState>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d102      	bne.n	80076f6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80076f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80076f4:	e0b8      	b.n	8007868 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076fa:	2b03      	cmp	r3, #3
 80076fc:	d02f      	beq.n	800775e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4618      	mov	r0, r3
 8007704:	f001 f94a 	bl	800899c <SDMMC_CmdSendCID>
 8007708:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800770a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800770c:	2b00      	cmp	r3, #0
 800770e:	d001      	beq.n	8007714 <SD_InitCard+0x40>
    {
      return errorstate;
 8007710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007712:	e0a9      	b.n	8007868 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2100      	movs	r1, #0
 800771a:	4618      	mov	r0, r3
 800771c:	f000 ff8d 	bl	800863a <SDMMC_GetResponse>
 8007720:	4602      	mov	r2, r0
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2104      	movs	r1, #4
 800772c:	4618      	mov	r0, r3
 800772e:	f000 ff84 	bl	800863a <SDMMC_GetResponse>
 8007732:	4602      	mov	r2, r0
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2108      	movs	r1, #8
 800773e:	4618      	mov	r0, r3
 8007740:	f000 ff7b 	bl	800863a <SDMMC_GetResponse>
 8007744:	4602      	mov	r2, r0
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	210c      	movs	r1, #12
 8007750:	4618      	mov	r0, r3
 8007752:	f000 ff72 	bl	800863a <SDMMC_GetResponse>
 8007756:	4602      	mov	r2, r0
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007762:	2b03      	cmp	r3, #3
 8007764:	d00d      	beq.n	8007782 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f107 020e 	add.w	r2, r7, #14
 800776e:	4611      	mov	r1, r2
 8007770:	4618      	mov	r0, r3
 8007772:	f001 f950 	bl	8008a16 <SDMMC_CmdSetRelAdd>
 8007776:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800777a:	2b00      	cmp	r3, #0
 800777c:	d001      	beq.n	8007782 <SD_InitCard+0xae>
    {
      return errorstate;
 800777e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007780:	e072      	b.n	8007868 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007786:	2b03      	cmp	r3, #3
 8007788:	d036      	beq.n	80077f8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800778a:	89fb      	ldrh	r3, [r7, #14]
 800778c:	461a      	mov	r2, r3
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800779a:	041b      	lsls	r3, r3, #16
 800779c:	4619      	mov	r1, r3
 800779e:	4610      	mov	r0, r2
 80077a0:	f001 f91a 	bl	80089d8 <SDMMC_CmdSendCSD>
 80077a4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80077a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d001      	beq.n	80077b0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80077ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077ae:	e05b      	b.n	8007868 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2100      	movs	r1, #0
 80077b6:	4618      	mov	r0, r3
 80077b8:	f000 ff3f 	bl	800863a <SDMMC_GetResponse>
 80077bc:	4602      	mov	r2, r0
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2104      	movs	r1, #4
 80077c8:	4618      	mov	r0, r3
 80077ca:	f000 ff36 	bl	800863a <SDMMC_GetResponse>
 80077ce:	4602      	mov	r2, r0
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2108      	movs	r1, #8
 80077da:	4618      	mov	r0, r3
 80077dc:	f000 ff2d 	bl	800863a <SDMMC_GetResponse>
 80077e0:	4602      	mov	r2, r0
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	210c      	movs	r1, #12
 80077ec:	4618      	mov	r0, r3
 80077ee:	f000 ff24 	bl	800863a <SDMMC_GetResponse>
 80077f2:	4602      	mov	r2, r0
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2104      	movs	r1, #4
 80077fe:	4618      	mov	r0, r3
 8007800:	f000 ff1b 	bl	800863a <SDMMC_GetResponse>
 8007804:	4603      	mov	r3, r0
 8007806:	0d1a      	lsrs	r2, r3, #20
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800780c:	f107 0310 	add.w	r3, r7, #16
 8007810:	4619      	mov	r1, r3
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f7ff fc60 	bl	80070d8 <HAL_SD_GetCardCSD>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d002      	beq.n	8007824 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800781e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007822:	e021      	b.n	8007868 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6819      	ldr	r1, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800782c:	041b      	lsls	r3, r3, #16
 800782e:	2200      	movs	r2, #0
 8007830:	461c      	mov	r4, r3
 8007832:	4615      	mov	r5, r2
 8007834:	4622      	mov	r2, r4
 8007836:	462b      	mov	r3, r5
 8007838:	4608      	mov	r0, r1
 800783a:	f001 f809 	bl	8008850 <SDMMC_CmdSelDesel>
 800783e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007842:	2b00      	cmp	r3, #0
 8007844:	d001      	beq.n	800784a <SD_InitCard+0x176>
  {
    return errorstate;
 8007846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007848:	e00e      	b.n	8007868 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681d      	ldr	r5, [r3, #0]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	466c      	mov	r4, sp
 8007852:	f103 0210 	add.w	r2, r3, #16
 8007856:	ca07      	ldmia	r2, {r0, r1, r2}
 8007858:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800785c:	3304      	adds	r3, #4
 800785e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007860:	4628      	mov	r0, r5
 8007862:	f000 fe4d 	bl	8008500 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3740      	adds	r7, #64	; 0x40
 800786c:	46bd      	mov	sp, r7
 800786e:	bdb0      	pop	{r4, r5, r7, pc}

08007870 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b086      	sub	sp, #24
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007878:	2300      	movs	r3, #0
 800787a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800787c:	2300      	movs	r3, #0
 800787e:	617b      	str	r3, [r7, #20]
 8007880:	2300      	movs	r3, #0
 8007882:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4618      	mov	r0, r3
 800788a:	f001 f804 	bl	8008896 <SDMMC_CmdGoIdleState>
 800788e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d001      	beq.n	800789a <SD_PowerON+0x2a>
  {
    return errorstate;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	e072      	b.n	8007980 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4618      	mov	r0, r3
 80078a0:	f001 f817 	bl	80088d2 <SDMMC_CmdOperCond>
 80078a4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00d      	beq.n	80078c8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4618      	mov	r0, r3
 80078b8:	f000 ffed 	bl	8008896 <SDMMC_CmdGoIdleState>
 80078bc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d004      	beq.n	80078ce <SD_PowerON+0x5e>
    {
      return errorstate;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	e05b      	b.n	8007980 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d137      	bne.n	8007946 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2100      	movs	r1, #0
 80078dc:	4618      	mov	r0, r3
 80078de:	f001 f817 	bl	8008910 <SDMMC_CmdAppCommand>
 80078e2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d02d      	beq.n	8007946 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80078ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80078ee:	e047      	b.n	8007980 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2100      	movs	r1, #0
 80078f6:	4618      	mov	r0, r3
 80078f8:	f001 f80a 	bl	8008910 <SDMMC_CmdAppCommand>
 80078fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d001      	beq.n	8007908 <SD_PowerON+0x98>
    {
      return errorstate;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	e03b      	b.n	8007980 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	491e      	ldr	r1, [pc, #120]	; (8007988 <SD_PowerON+0x118>)
 800790e:	4618      	mov	r0, r3
 8007910:	f001 f820 	bl	8008954 <SDMMC_CmdAppOperCommand>
 8007914:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d002      	beq.n	8007922 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800791c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007920:	e02e      	b.n	8007980 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2100      	movs	r1, #0
 8007928:	4618      	mov	r0, r3
 800792a:	f000 fe86 	bl	800863a <SDMMC_GetResponse>
 800792e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	0fdb      	lsrs	r3, r3, #31
 8007934:	2b01      	cmp	r3, #1
 8007936:	d101      	bne.n	800793c <SD_PowerON+0xcc>
 8007938:	2301      	movs	r3, #1
 800793a:	e000      	b.n	800793e <SD_PowerON+0xce>
 800793c:	2300      	movs	r3, #0
 800793e:	613b      	str	r3, [r7, #16]

    count++;
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	3301      	adds	r3, #1
 8007944:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800794c:	4293      	cmp	r3, r2
 800794e:	d802      	bhi.n	8007956 <SD_PowerON+0xe6>
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d0cc      	beq.n	80078f0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800795c:	4293      	cmp	r3, r2
 800795e:	d902      	bls.n	8007966 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007960:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007964:	e00c      	b.n	8007980 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800796c:	2b00      	cmp	r3, #0
 800796e:	d003      	beq.n	8007978 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	645a      	str	r2, [r3, #68]	; 0x44
 8007976:	e002      	b.n	800797e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3718      	adds	r7, #24
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	c1100000 	.word	0xc1100000

0800798c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d102      	bne.n	80079a2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800799c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80079a0:	e018      	b.n	80079d4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079aa:	041b      	lsls	r3, r3, #16
 80079ac:	4619      	mov	r1, r3
 80079ae:	4610      	mov	r0, r2
 80079b0:	f001 f852 	bl	8008a58 <SDMMC_CmdSendStatus>
 80079b4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d001      	beq.n	80079c0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	e009      	b.n	80079d4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2100      	movs	r1, #0
 80079c6:	4618      	mov	r0, r3
 80079c8:	f000 fe37 	bl	800863a <SDMMC_GetResponse>
 80079cc:	4602      	mov	r2, r0
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3710      	adds	r7, #16
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b086      	sub	sp, #24
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ee:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d03f      	beq.n	8007a76 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80079f6:	2300      	movs	r3, #0
 80079f8:	617b      	str	r3, [r7, #20]
 80079fa:	e033      	b.n	8007a64 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4618      	mov	r0, r3
 8007a02:	f000 fda9 	bl	8008558 <SDMMC_ReadFIFO>
 8007a06:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	b2da      	uxtb	r2, r3
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	3301      	adds	r3, #1
 8007a14:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	0a1b      	lsrs	r3, r3, #8
 8007a20:	b2da      	uxtb	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	3b01      	subs	r3, #1
 8007a30:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	0c1b      	lsrs	r3, r3, #16
 8007a36:	b2da      	uxtb	r2, r3
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	3b01      	subs	r3, #1
 8007a46:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	0e1b      	lsrs	r3, r3, #24
 8007a4c:	b2da      	uxtb	r2, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	3301      	adds	r3, #1
 8007a56:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	3301      	adds	r3, #1
 8007a62:	617b      	str	r3, [r7, #20]
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	2b07      	cmp	r3, #7
 8007a68:	d9c8      	bls.n	80079fc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007a76:	bf00      	nop
 8007a78:	3718      	adds	r7, #24
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b086      	sub	sp, #24
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a1b      	ldr	r3, [r3, #32]
 8007a8a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a90:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d043      	beq.n	8007b20 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007a98:	2300      	movs	r3, #0
 8007a9a:	617b      	str	r3, [r7, #20]
 8007a9c:	e037      	b.n	8007b0e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	3b01      	subs	r3, #1
 8007aae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	021a      	lsls	r2, r3, #8
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	041a      	lsls	r2, r3, #16
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	3b01      	subs	r3, #1
 8007ade:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	061a      	lsls	r2, r3, #24
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	3301      	adds	r3, #1
 8007af0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	3b01      	subs	r3, #1
 8007af6:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f107 0208 	add.w	r2, r7, #8
 8007b00:	4611      	mov	r1, r2
 8007b02:	4618      	mov	r0, r3
 8007b04:	f000 fd35 	bl	8008572 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	617b      	str	r3, [r7, #20]
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	2b07      	cmp	r3, #7
 8007b12:	d9c4      	bls.n	8007a9e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	693a      	ldr	r2, [r7, #16]
 8007b1e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007b20:	bf00      	nop
 8007b22:	3718      	adds	r7, #24
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d101      	bne.n	8007b3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e040      	b.n	8007bbc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d106      	bne.n	8007b50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7f9 fd5a 	bl	8001604 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2224      	movs	r2, #36	; 0x24
 8007b54:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f022 0201 	bic.w	r2, r2, #1
 8007b64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 f8b0 	bl	8007ccc <UART_SetConfig>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d101      	bne.n	8007b76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e022      	b.n	8007bbc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d002      	beq.n	8007b84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fb08 	bl	8008194 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	685a      	ldr	r2, [r3, #4]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	689a      	ldr	r2, [r3, #8]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ba2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f042 0201 	orr.w	r2, r2, #1
 8007bb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 fb8f 	bl	80082d8 <UART_CheckIdleState>
 8007bba:	4603      	mov	r3, r0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b08a      	sub	sp, #40	; 0x28
 8007bc8:	af02      	add	r7, sp, #8
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	603b      	str	r3, [r7, #0]
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bd8:	2b20      	cmp	r3, #32
 8007bda:	d171      	bne.n	8007cc0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d002      	beq.n	8007be8 <HAL_UART_Transmit+0x24>
 8007be2:	88fb      	ldrh	r3, [r7, #6]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d101      	bne.n	8007bec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	e06a      	b.n	8007cc2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2221      	movs	r2, #33	; 0x21
 8007bf8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007bfa:	f7fa f825 	bl	8001c48 <HAL_GetTick>
 8007bfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	88fa      	ldrh	r2, [r7, #6]
 8007c04:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	88fa      	ldrh	r2, [r7, #6]
 8007c0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c18:	d108      	bne.n	8007c2c <HAL_UART_Transmit+0x68>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d104      	bne.n	8007c2c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007c22:	2300      	movs	r3, #0
 8007c24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	61bb      	str	r3, [r7, #24]
 8007c2a:	e003      	b.n	8007c34 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c30:	2300      	movs	r3, #0
 8007c32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007c34:	e02c      	b.n	8007c90 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	2180      	movs	r1, #128	; 0x80
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	f000 fb96 	bl	8008372 <UART_WaitOnFlagUntilTimeout>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d001      	beq.n	8007c50 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	e038      	b.n	8007cc2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10b      	bne.n	8007c6e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	881b      	ldrh	r3, [r3, #0]
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c64:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	3302      	adds	r3, #2
 8007c6a:	61bb      	str	r3, [r7, #24]
 8007c6c:	e007      	b.n	8007c7e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	781a      	ldrb	r2, [r3, #0]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	3b01      	subs	r3, #1
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d1cc      	bne.n	8007c36 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	9300      	str	r3, [sp, #0]
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	2140      	movs	r1, #64	; 0x40
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	f000 fb63 	bl	8008372 <UART_WaitOnFlagUntilTimeout>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d001      	beq.n	8007cb6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8007cb2:	2303      	movs	r3, #3
 8007cb4:	e005      	b.n	8007cc2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2220      	movs	r2, #32
 8007cba:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	e000      	b.n	8007cc2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007cc0:	2302      	movs	r3, #2
  }
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3720      	adds	r7, #32
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
	...

08007ccc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b088      	sub	sp, #32
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	689a      	ldr	r2, [r3, #8]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	431a      	orrs	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	695b      	ldr	r3, [r3, #20]
 8007ce6:	431a      	orrs	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	69db      	ldr	r3, [r3, #28]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	4ba6      	ldr	r3, [pc, #664]	; (8007f90 <UART_SetConfig+0x2c4>)
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	6812      	ldr	r2, [r2, #0]
 8007cfe:	6979      	ldr	r1, [r7, #20]
 8007d00:	430b      	orrs	r3, r1
 8007d02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	68da      	ldr	r2, [r3, #12]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	430a      	orrs	r2, r1
 8007d18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	699b      	ldr	r3, [r3, #24]
 8007d1e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a1b      	ldr	r3, [r3, #32]
 8007d24:	697a      	ldr	r2, [r7, #20]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	697a      	ldr	r2, [r7, #20]
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a94      	ldr	r2, [pc, #592]	; (8007f94 <UART_SetConfig+0x2c8>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d120      	bne.n	8007d8a <UART_SetConfig+0xbe>
 8007d48:	4b93      	ldr	r3, [pc, #588]	; (8007f98 <UART_SetConfig+0x2cc>)
 8007d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d4e:	f003 0303 	and.w	r3, r3, #3
 8007d52:	2b03      	cmp	r3, #3
 8007d54:	d816      	bhi.n	8007d84 <UART_SetConfig+0xb8>
 8007d56:	a201      	add	r2, pc, #4	; (adr r2, 8007d5c <UART_SetConfig+0x90>)
 8007d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d5c:	08007d6d 	.word	0x08007d6d
 8007d60:	08007d79 	.word	0x08007d79
 8007d64:	08007d73 	.word	0x08007d73
 8007d68:	08007d7f 	.word	0x08007d7f
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	77fb      	strb	r3, [r7, #31]
 8007d70:	e150      	b.n	8008014 <UART_SetConfig+0x348>
 8007d72:	2302      	movs	r3, #2
 8007d74:	77fb      	strb	r3, [r7, #31]
 8007d76:	e14d      	b.n	8008014 <UART_SetConfig+0x348>
 8007d78:	2304      	movs	r3, #4
 8007d7a:	77fb      	strb	r3, [r7, #31]
 8007d7c:	e14a      	b.n	8008014 <UART_SetConfig+0x348>
 8007d7e:	2308      	movs	r3, #8
 8007d80:	77fb      	strb	r3, [r7, #31]
 8007d82:	e147      	b.n	8008014 <UART_SetConfig+0x348>
 8007d84:	2310      	movs	r3, #16
 8007d86:	77fb      	strb	r3, [r7, #31]
 8007d88:	e144      	b.n	8008014 <UART_SetConfig+0x348>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a83      	ldr	r2, [pc, #524]	; (8007f9c <UART_SetConfig+0x2d0>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d132      	bne.n	8007dfa <UART_SetConfig+0x12e>
 8007d94:	4b80      	ldr	r3, [pc, #512]	; (8007f98 <UART_SetConfig+0x2cc>)
 8007d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d9a:	f003 030c 	and.w	r3, r3, #12
 8007d9e:	2b0c      	cmp	r3, #12
 8007da0:	d828      	bhi.n	8007df4 <UART_SetConfig+0x128>
 8007da2:	a201      	add	r2, pc, #4	; (adr r2, 8007da8 <UART_SetConfig+0xdc>)
 8007da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da8:	08007ddd 	.word	0x08007ddd
 8007dac:	08007df5 	.word	0x08007df5
 8007db0:	08007df5 	.word	0x08007df5
 8007db4:	08007df5 	.word	0x08007df5
 8007db8:	08007de9 	.word	0x08007de9
 8007dbc:	08007df5 	.word	0x08007df5
 8007dc0:	08007df5 	.word	0x08007df5
 8007dc4:	08007df5 	.word	0x08007df5
 8007dc8:	08007de3 	.word	0x08007de3
 8007dcc:	08007df5 	.word	0x08007df5
 8007dd0:	08007df5 	.word	0x08007df5
 8007dd4:	08007df5 	.word	0x08007df5
 8007dd8:	08007def 	.word	0x08007def
 8007ddc:	2300      	movs	r3, #0
 8007dde:	77fb      	strb	r3, [r7, #31]
 8007de0:	e118      	b.n	8008014 <UART_SetConfig+0x348>
 8007de2:	2302      	movs	r3, #2
 8007de4:	77fb      	strb	r3, [r7, #31]
 8007de6:	e115      	b.n	8008014 <UART_SetConfig+0x348>
 8007de8:	2304      	movs	r3, #4
 8007dea:	77fb      	strb	r3, [r7, #31]
 8007dec:	e112      	b.n	8008014 <UART_SetConfig+0x348>
 8007dee:	2308      	movs	r3, #8
 8007df0:	77fb      	strb	r3, [r7, #31]
 8007df2:	e10f      	b.n	8008014 <UART_SetConfig+0x348>
 8007df4:	2310      	movs	r3, #16
 8007df6:	77fb      	strb	r3, [r7, #31]
 8007df8:	e10c      	b.n	8008014 <UART_SetConfig+0x348>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a68      	ldr	r2, [pc, #416]	; (8007fa0 <UART_SetConfig+0x2d4>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d120      	bne.n	8007e46 <UART_SetConfig+0x17a>
 8007e04:	4b64      	ldr	r3, [pc, #400]	; (8007f98 <UART_SetConfig+0x2cc>)
 8007e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e0a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007e0e:	2b30      	cmp	r3, #48	; 0x30
 8007e10:	d013      	beq.n	8007e3a <UART_SetConfig+0x16e>
 8007e12:	2b30      	cmp	r3, #48	; 0x30
 8007e14:	d814      	bhi.n	8007e40 <UART_SetConfig+0x174>
 8007e16:	2b20      	cmp	r3, #32
 8007e18:	d009      	beq.n	8007e2e <UART_SetConfig+0x162>
 8007e1a:	2b20      	cmp	r3, #32
 8007e1c:	d810      	bhi.n	8007e40 <UART_SetConfig+0x174>
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d002      	beq.n	8007e28 <UART_SetConfig+0x15c>
 8007e22:	2b10      	cmp	r3, #16
 8007e24:	d006      	beq.n	8007e34 <UART_SetConfig+0x168>
 8007e26:	e00b      	b.n	8007e40 <UART_SetConfig+0x174>
 8007e28:	2300      	movs	r3, #0
 8007e2a:	77fb      	strb	r3, [r7, #31]
 8007e2c:	e0f2      	b.n	8008014 <UART_SetConfig+0x348>
 8007e2e:	2302      	movs	r3, #2
 8007e30:	77fb      	strb	r3, [r7, #31]
 8007e32:	e0ef      	b.n	8008014 <UART_SetConfig+0x348>
 8007e34:	2304      	movs	r3, #4
 8007e36:	77fb      	strb	r3, [r7, #31]
 8007e38:	e0ec      	b.n	8008014 <UART_SetConfig+0x348>
 8007e3a:	2308      	movs	r3, #8
 8007e3c:	77fb      	strb	r3, [r7, #31]
 8007e3e:	e0e9      	b.n	8008014 <UART_SetConfig+0x348>
 8007e40:	2310      	movs	r3, #16
 8007e42:	77fb      	strb	r3, [r7, #31]
 8007e44:	e0e6      	b.n	8008014 <UART_SetConfig+0x348>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a56      	ldr	r2, [pc, #344]	; (8007fa4 <UART_SetConfig+0x2d8>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d120      	bne.n	8007e92 <UART_SetConfig+0x1c6>
 8007e50:	4b51      	ldr	r3, [pc, #324]	; (8007f98 <UART_SetConfig+0x2cc>)
 8007e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007e5a:	2bc0      	cmp	r3, #192	; 0xc0
 8007e5c:	d013      	beq.n	8007e86 <UART_SetConfig+0x1ba>
 8007e5e:	2bc0      	cmp	r3, #192	; 0xc0
 8007e60:	d814      	bhi.n	8007e8c <UART_SetConfig+0x1c0>
 8007e62:	2b80      	cmp	r3, #128	; 0x80
 8007e64:	d009      	beq.n	8007e7a <UART_SetConfig+0x1ae>
 8007e66:	2b80      	cmp	r3, #128	; 0x80
 8007e68:	d810      	bhi.n	8007e8c <UART_SetConfig+0x1c0>
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d002      	beq.n	8007e74 <UART_SetConfig+0x1a8>
 8007e6e:	2b40      	cmp	r3, #64	; 0x40
 8007e70:	d006      	beq.n	8007e80 <UART_SetConfig+0x1b4>
 8007e72:	e00b      	b.n	8007e8c <UART_SetConfig+0x1c0>
 8007e74:	2300      	movs	r3, #0
 8007e76:	77fb      	strb	r3, [r7, #31]
 8007e78:	e0cc      	b.n	8008014 <UART_SetConfig+0x348>
 8007e7a:	2302      	movs	r3, #2
 8007e7c:	77fb      	strb	r3, [r7, #31]
 8007e7e:	e0c9      	b.n	8008014 <UART_SetConfig+0x348>
 8007e80:	2304      	movs	r3, #4
 8007e82:	77fb      	strb	r3, [r7, #31]
 8007e84:	e0c6      	b.n	8008014 <UART_SetConfig+0x348>
 8007e86:	2308      	movs	r3, #8
 8007e88:	77fb      	strb	r3, [r7, #31]
 8007e8a:	e0c3      	b.n	8008014 <UART_SetConfig+0x348>
 8007e8c:	2310      	movs	r3, #16
 8007e8e:	77fb      	strb	r3, [r7, #31]
 8007e90:	e0c0      	b.n	8008014 <UART_SetConfig+0x348>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a44      	ldr	r2, [pc, #272]	; (8007fa8 <UART_SetConfig+0x2dc>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d125      	bne.n	8007ee8 <UART_SetConfig+0x21c>
 8007e9c:	4b3e      	ldr	r3, [pc, #248]	; (8007f98 <UART_SetConfig+0x2cc>)
 8007e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ea6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007eaa:	d017      	beq.n	8007edc <UART_SetConfig+0x210>
 8007eac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007eb0:	d817      	bhi.n	8007ee2 <UART_SetConfig+0x216>
 8007eb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007eb6:	d00b      	beq.n	8007ed0 <UART_SetConfig+0x204>
 8007eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ebc:	d811      	bhi.n	8007ee2 <UART_SetConfig+0x216>
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d003      	beq.n	8007eca <UART_SetConfig+0x1fe>
 8007ec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ec6:	d006      	beq.n	8007ed6 <UART_SetConfig+0x20a>
 8007ec8:	e00b      	b.n	8007ee2 <UART_SetConfig+0x216>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	77fb      	strb	r3, [r7, #31]
 8007ece:	e0a1      	b.n	8008014 <UART_SetConfig+0x348>
 8007ed0:	2302      	movs	r3, #2
 8007ed2:	77fb      	strb	r3, [r7, #31]
 8007ed4:	e09e      	b.n	8008014 <UART_SetConfig+0x348>
 8007ed6:	2304      	movs	r3, #4
 8007ed8:	77fb      	strb	r3, [r7, #31]
 8007eda:	e09b      	b.n	8008014 <UART_SetConfig+0x348>
 8007edc:	2308      	movs	r3, #8
 8007ede:	77fb      	strb	r3, [r7, #31]
 8007ee0:	e098      	b.n	8008014 <UART_SetConfig+0x348>
 8007ee2:	2310      	movs	r3, #16
 8007ee4:	77fb      	strb	r3, [r7, #31]
 8007ee6:	e095      	b.n	8008014 <UART_SetConfig+0x348>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a2f      	ldr	r2, [pc, #188]	; (8007fac <UART_SetConfig+0x2e0>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d125      	bne.n	8007f3e <UART_SetConfig+0x272>
 8007ef2:	4b29      	ldr	r3, [pc, #164]	; (8007f98 <UART_SetConfig+0x2cc>)
 8007ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ef8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007efc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f00:	d017      	beq.n	8007f32 <UART_SetConfig+0x266>
 8007f02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f06:	d817      	bhi.n	8007f38 <UART_SetConfig+0x26c>
 8007f08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f0c:	d00b      	beq.n	8007f26 <UART_SetConfig+0x25a>
 8007f0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f12:	d811      	bhi.n	8007f38 <UART_SetConfig+0x26c>
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d003      	beq.n	8007f20 <UART_SetConfig+0x254>
 8007f18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f1c:	d006      	beq.n	8007f2c <UART_SetConfig+0x260>
 8007f1e:	e00b      	b.n	8007f38 <UART_SetConfig+0x26c>
 8007f20:	2301      	movs	r3, #1
 8007f22:	77fb      	strb	r3, [r7, #31]
 8007f24:	e076      	b.n	8008014 <UART_SetConfig+0x348>
 8007f26:	2302      	movs	r3, #2
 8007f28:	77fb      	strb	r3, [r7, #31]
 8007f2a:	e073      	b.n	8008014 <UART_SetConfig+0x348>
 8007f2c:	2304      	movs	r3, #4
 8007f2e:	77fb      	strb	r3, [r7, #31]
 8007f30:	e070      	b.n	8008014 <UART_SetConfig+0x348>
 8007f32:	2308      	movs	r3, #8
 8007f34:	77fb      	strb	r3, [r7, #31]
 8007f36:	e06d      	b.n	8008014 <UART_SetConfig+0x348>
 8007f38:	2310      	movs	r3, #16
 8007f3a:	77fb      	strb	r3, [r7, #31]
 8007f3c:	e06a      	b.n	8008014 <UART_SetConfig+0x348>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a1b      	ldr	r2, [pc, #108]	; (8007fb0 <UART_SetConfig+0x2e4>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d138      	bne.n	8007fba <UART_SetConfig+0x2ee>
 8007f48:	4b13      	ldr	r3, [pc, #76]	; (8007f98 <UART_SetConfig+0x2cc>)
 8007f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f4e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007f52:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007f56:	d017      	beq.n	8007f88 <UART_SetConfig+0x2bc>
 8007f58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007f5c:	d82a      	bhi.n	8007fb4 <UART_SetConfig+0x2e8>
 8007f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f62:	d00b      	beq.n	8007f7c <UART_SetConfig+0x2b0>
 8007f64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f68:	d824      	bhi.n	8007fb4 <UART_SetConfig+0x2e8>
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d003      	beq.n	8007f76 <UART_SetConfig+0x2aa>
 8007f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f72:	d006      	beq.n	8007f82 <UART_SetConfig+0x2b6>
 8007f74:	e01e      	b.n	8007fb4 <UART_SetConfig+0x2e8>
 8007f76:	2300      	movs	r3, #0
 8007f78:	77fb      	strb	r3, [r7, #31]
 8007f7a:	e04b      	b.n	8008014 <UART_SetConfig+0x348>
 8007f7c:	2302      	movs	r3, #2
 8007f7e:	77fb      	strb	r3, [r7, #31]
 8007f80:	e048      	b.n	8008014 <UART_SetConfig+0x348>
 8007f82:	2304      	movs	r3, #4
 8007f84:	77fb      	strb	r3, [r7, #31]
 8007f86:	e045      	b.n	8008014 <UART_SetConfig+0x348>
 8007f88:	2308      	movs	r3, #8
 8007f8a:	77fb      	strb	r3, [r7, #31]
 8007f8c:	e042      	b.n	8008014 <UART_SetConfig+0x348>
 8007f8e:	bf00      	nop
 8007f90:	efff69f3 	.word	0xefff69f3
 8007f94:	40011000 	.word	0x40011000
 8007f98:	40023800 	.word	0x40023800
 8007f9c:	40004400 	.word	0x40004400
 8007fa0:	40004800 	.word	0x40004800
 8007fa4:	40004c00 	.word	0x40004c00
 8007fa8:	40005000 	.word	0x40005000
 8007fac:	40011400 	.word	0x40011400
 8007fb0:	40007800 	.word	0x40007800
 8007fb4:	2310      	movs	r3, #16
 8007fb6:	77fb      	strb	r3, [r7, #31]
 8007fb8:	e02c      	b.n	8008014 <UART_SetConfig+0x348>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a72      	ldr	r2, [pc, #456]	; (8008188 <UART_SetConfig+0x4bc>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d125      	bne.n	8008010 <UART_SetConfig+0x344>
 8007fc4:	4b71      	ldr	r3, [pc, #452]	; (800818c <UART_SetConfig+0x4c0>)
 8007fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007fce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007fd2:	d017      	beq.n	8008004 <UART_SetConfig+0x338>
 8007fd4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007fd8:	d817      	bhi.n	800800a <UART_SetConfig+0x33e>
 8007fda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fde:	d00b      	beq.n	8007ff8 <UART_SetConfig+0x32c>
 8007fe0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fe4:	d811      	bhi.n	800800a <UART_SetConfig+0x33e>
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d003      	beq.n	8007ff2 <UART_SetConfig+0x326>
 8007fea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fee:	d006      	beq.n	8007ffe <UART_SetConfig+0x332>
 8007ff0:	e00b      	b.n	800800a <UART_SetConfig+0x33e>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	77fb      	strb	r3, [r7, #31]
 8007ff6:	e00d      	b.n	8008014 <UART_SetConfig+0x348>
 8007ff8:	2302      	movs	r3, #2
 8007ffa:	77fb      	strb	r3, [r7, #31]
 8007ffc:	e00a      	b.n	8008014 <UART_SetConfig+0x348>
 8007ffe:	2304      	movs	r3, #4
 8008000:	77fb      	strb	r3, [r7, #31]
 8008002:	e007      	b.n	8008014 <UART_SetConfig+0x348>
 8008004:	2308      	movs	r3, #8
 8008006:	77fb      	strb	r3, [r7, #31]
 8008008:	e004      	b.n	8008014 <UART_SetConfig+0x348>
 800800a:	2310      	movs	r3, #16
 800800c:	77fb      	strb	r3, [r7, #31]
 800800e:	e001      	b.n	8008014 <UART_SetConfig+0x348>
 8008010:	2310      	movs	r3, #16
 8008012:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	69db      	ldr	r3, [r3, #28]
 8008018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800801c:	d15b      	bne.n	80080d6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800801e:	7ffb      	ldrb	r3, [r7, #31]
 8008020:	2b08      	cmp	r3, #8
 8008022:	d828      	bhi.n	8008076 <UART_SetConfig+0x3aa>
 8008024:	a201      	add	r2, pc, #4	; (adr r2, 800802c <UART_SetConfig+0x360>)
 8008026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802a:	bf00      	nop
 800802c:	08008051 	.word	0x08008051
 8008030:	08008059 	.word	0x08008059
 8008034:	08008061 	.word	0x08008061
 8008038:	08008077 	.word	0x08008077
 800803c:	08008067 	.word	0x08008067
 8008040:	08008077 	.word	0x08008077
 8008044:	08008077 	.word	0x08008077
 8008048:	08008077 	.word	0x08008077
 800804c:	0800806f 	.word	0x0800806f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008050:	f7fd fff2 	bl	8006038 <HAL_RCC_GetPCLK1Freq>
 8008054:	61b8      	str	r0, [r7, #24]
        break;
 8008056:	e013      	b.n	8008080 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008058:	f7fe f802 	bl	8006060 <HAL_RCC_GetPCLK2Freq>
 800805c:	61b8      	str	r0, [r7, #24]
        break;
 800805e:	e00f      	b.n	8008080 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008060:	4b4b      	ldr	r3, [pc, #300]	; (8008190 <UART_SetConfig+0x4c4>)
 8008062:	61bb      	str	r3, [r7, #24]
        break;
 8008064:	e00c      	b.n	8008080 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008066:	f7fd fed5 	bl	8005e14 <HAL_RCC_GetSysClockFreq>
 800806a:	61b8      	str	r0, [r7, #24]
        break;
 800806c:	e008      	b.n	8008080 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800806e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008072:	61bb      	str	r3, [r7, #24]
        break;
 8008074:	e004      	b.n	8008080 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008076:	2300      	movs	r3, #0
 8008078:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	77bb      	strb	r3, [r7, #30]
        break;
 800807e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d074      	beq.n	8008170 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	005a      	lsls	r2, r3, #1
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	085b      	lsrs	r3, r3, #1
 8008090:	441a      	add	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	fbb2 f3f3 	udiv	r3, r2, r3
 800809a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	2b0f      	cmp	r3, #15
 80080a0:	d916      	bls.n	80080d0 <UART_SetConfig+0x404>
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080a8:	d212      	bcs.n	80080d0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	f023 030f 	bic.w	r3, r3, #15
 80080b2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	085b      	lsrs	r3, r3, #1
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	f003 0307 	and.w	r3, r3, #7
 80080be:	b29a      	uxth	r2, r3
 80080c0:	89fb      	ldrh	r3, [r7, #14]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	89fa      	ldrh	r2, [r7, #14]
 80080cc:	60da      	str	r2, [r3, #12]
 80080ce:	e04f      	b.n	8008170 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	77bb      	strb	r3, [r7, #30]
 80080d4:	e04c      	b.n	8008170 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80080d6:	7ffb      	ldrb	r3, [r7, #31]
 80080d8:	2b08      	cmp	r3, #8
 80080da:	d828      	bhi.n	800812e <UART_SetConfig+0x462>
 80080dc:	a201      	add	r2, pc, #4	; (adr r2, 80080e4 <UART_SetConfig+0x418>)
 80080de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e2:	bf00      	nop
 80080e4:	08008109 	.word	0x08008109
 80080e8:	08008111 	.word	0x08008111
 80080ec:	08008119 	.word	0x08008119
 80080f0:	0800812f 	.word	0x0800812f
 80080f4:	0800811f 	.word	0x0800811f
 80080f8:	0800812f 	.word	0x0800812f
 80080fc:	0800812f 	.word	0x0800812f
 8008100:	0800812f 	.word	0x0800812f
 8008104:	08008127 	.word	0x08008127
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008108:	f7fd ff96 	bl	8006038 <HAL_RCC_GetPCLK1Freq>
 800810c:	61b8      	str	r0, [r7, #24]
        break;
 800810e:	e013      	b.n	8008138 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008110:	f7fd ffa6 	bl	8006060 <HAL_RCC_GetPCLK2Freq>
 8008114:	61b8      	str	r0, [r7, #24]
        break;
 8008116:	e00f      	b.n	8008138 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008118:	4b1d      	ldr	r3, [pc, #116]	; (8008190 <UART_SetConfig+0x4c4>)
 800811a:	61bb      	str	r3, [r7, #24]
        break;
 800811c:	e00c      	b.n	8008138 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800811e:	f7fd fe79 	bl	8005e14 <HAL_RCC_GetSysClockFreq>
 8008122:	61b8      	str	r0, [r7, #24]
        break;
 8008124:	e008      	b.n	8008138 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800812a:	61bb      	str	r3, [r7, #24]
        break;
 800812c:	e004      	b.n	8008138 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800812e:	2300      	movs	r3, #0
 8008130:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	77bb      	strb	r3, [r7, #30]
        break;
 8008136:	bf00      	nop
    }

    if (pclk != 0U)
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d018      	beq.n	8008170 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	085a      	lsrs	r2, r3, #1
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	441a      	add	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008150:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	2b0f      	cmp	r3, #15
 8008156:	d909      	bls.n	800816c <UART_SetConfig+0x4a0>
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800815e:	d205      	bcs.n	800816c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	b29a      	uxth	r2, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	60da      	str	r2, [r3, #12]
 800816a:	e001      	b.n	8008170 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800817c:	7fbb      	ldrb	r3, [r7, #30]
}
 800817e:	4618      	mov	r0, r3
 8008180:	3720      	adds	r7, #32
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	40007c00 	.word	0x40007c00
 800818c:	40023800 	.word	0x40023800
 8008190:	00f42400 	.word	0x00f42400

08008194 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a0:	f003 0301 	and.w	r3, r3, #1
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00a      	beq.n	80081be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	430a      	orrs	r2, r1
 80081bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c2:	f003 0302 	and.w	r3, r3, #2
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00a      	beq.n	80081e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	430a      	orrs	r2, r1
 80081de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e4:	f003 0304 	and.w	r3, r3, #4
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d00a      	beq.n	8008202 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	430a      	orrs	r2, r1
 8008200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008206:	f003 0308 	and.w	r3, r3, #8
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00a      	beq.n	8008224 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	430a      	orrs	r2, r1
 8008222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008228:	f003 0310 	and.w	r3, r3, #16
 800822c:	2b00      	cmp	r3, #0
 800822e:	d00a      	beq.n	8008246 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	430a      	orrs	r2, r1
 8008244:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824a:	f003 0320 	and.w	r3, r3, #32
 800824e:	2b00      	cmp	r3, #0
 8008250:	d00a      	beq.n	8008268 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	430a      	orrs	r2, r1
 8008266:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008270:	2b00      	cmp	r3, #0
 8008272:	d01a      	beq.n	80082aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	430a      	orrs	r2, r1
 8008288:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008292:	d10a      	bne.n	80082aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	430a      	orrs	r2, r1
 80082a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00a      	beq.n	80082cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	430a      	orrs	r2, r1
 80082ca:	605a      	str	r2, [r3, #4]
  }
}
 80082cc:	bf00      	nop
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b086      	sub	sp, #24
 80082dc:	af02      	add	r7, sp, #8
 80082de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80082e8:	f7f9 fcae 	bl	8001c48 <HAL_GetTick>
 80082ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f003 0308 	and.w	r3, r3, #8
 80082f8:	2b08      	cmp	r3, #8
 80082fa:	d10e      	bne.n	800831a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008300:	9300      	str	r3, [sp, #0]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2200      	movs	r2, #0
 8008306:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 f831 	bl	8008372 <UART_WaitOnFlagUntilTimeout>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d001      	beq.n	800831a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008316:	2303      	movs	r3, #3
 8008318:	e027      	b.n	800836a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f003 0304 	and.w	r3, r3, #4
 8008324:	2b04      	cmp	r3, #4
 8008326:	d10e      	bne.n	8008346 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008328:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800832c:	9300      	str	r3, [sp, #0]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2200      	movs	r2, #0
 8008332:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 f81b 	bl	8008372 <UART_WaitOnFlagUntilTimeout>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d001      	beq.n	8008346 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008342:	2303      	movs	r3, #3
 8008344:	e011      	b.n	800836a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2220      	movs	r2, #32
 800834a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2220      	movs	r2, #32
 8008350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3710      	adds	r7, #16
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008372:	b580      	push	{r7, lr}
 8008374:	b09c      	sub	sp, #112	; 0x70
 8008376:	af00      	add	r7, sp, #0
 8008378:	60f8      	str	r0, [r7, #12]
 800837a:	60b9      	str	r1, [r7, #8]
 800837c:	603b      	str	r3, [r7, #0]
 800837e:	4613      	mov	r3, r2
 8008380:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008382:	e0a7      	b.n	80084d4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008384:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008386:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800838a:	f000 80a3 	beq.w	80084d4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800838e:	f7f9 fc5b 	bl	8001c48 <HAL_GetTick>
 8008392:	4602      	mov	r2, r0
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800839a:	429a      	cmp	r2, r3
 800839c:	d302      	bcc.n	80083a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800839e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d13f      	bne.n	8008424 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083ac:	e853 3f00 	ldrex	r3, [r3]
 80083b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80083b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80083b8:	667b      	str	r3, [r7, #100]	; 0x64
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	461a      	mov	r2, r3
 80083c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083c4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80083c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80083ca:	e841 2300 	strex	r3, r2, [r1]
 80083ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80083d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d1e6      	bne.n	80083a4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	3308      	adds	r3, #8
 80083dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083e0:	e853 3f00 	ldrex	r3, [r3]
 80083e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e8:	f023 0301 	bic.w	r3, r3, #1
 80083ec:	663b      	str	r3, [r7, #96]	; 0x60
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	3308      	adds	r3, #8
 80083f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80083f6:	64ba      	str	r2, [r7, #72]	; 0x48
 80083f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80083fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083fe:	e841 2300 	strex	r3, r2, [r1]
 8008402:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1e5      	bne.n	80083d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2220      	movs	r2, #32
 800840e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2220      	movs	r2, #32
 8008414:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2200      	movs	r2, #0
 800841c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008420:	2303      	movs	r3, #3
 8008422:	e068      	b.n	80084f6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f003 0304 	and.w	r3, r3, #4
 800842e:	2b00      	cmp	r3, #0
 8008430:	d050      	beq.n	80084d4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	69db      	ldr	r3, [r3, #28]
 8008438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800843c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008440:	d148      	bne.n	80084d4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800844a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008454:	e853 3f00 	ldrex	r3, [r3]
 8008458:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800845a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008460:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	461a      	mov	r2, r3
 8008468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800846a:	637b      	str	r3, [r7, #52]	; 0x34
 800846c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008470:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008472:	e841 2300 	strex	r3, r2, [r1]
 8008476:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1e6      	bne.n	800844c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	3308      	adds	r3, #8
 8008484:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	e853 3f00 	ldrex	r3, [r3]
 800848c:	613b      	str	r3, [r7, #16]
   return(result);
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	f023 0301 	bic.w	r3, r3, #1
 8008494:	66bb      	str	r3, [r7, #104]	; 0x68
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	3308      	adds	r3, #8
 800849c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800849e:	623a      	str	r2, [r7, #32]
 80084a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a2:	69f9      	ldr	r1, [r7, #28]
 80084a4:	6a3a      	ldr	r2, [r7, #32]
 80084a6:	e841 2300 	strex	r3, r2, [r1]
 80084aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80084ac:	69bb      	ldr	r3, [r7, #24]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1e5      	bne.n	800847e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2220      	movs	r2, #32
 80084b6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2220      	movs	r2, #32
 80084bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2220      	movs	r2, #32
 80084c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80084d0:	2303      	movs	r3, #3
 80084d2:	e010      	b.n	80084f6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	69da      	ldr	r2, [r3, #28]
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	4013      	ands	r3, r2
 80084de:	68ba      	ldr	r2, [r7, #8]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	bf0c      	ite	eq
 80084e4:	2301      	moveq	r3, #1
 80084e6:	2300      	movne	r3, #0
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	461a      	mov	r2, r3
 80084ec:	79fb      	ldrb	r3, [r7, #7]
 80084ee:	429a      	cmp	r2, r3
 80084f0:	f43f af48 	beq.w	8008384 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3770      	adds	r7, #112	; 0x70
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
	...

08008500 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008500:	b084      	sub	sp, #16
 8008502:	b480      	push	{r7}
 8008504:	b085      	sub	sp, #20
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
 800850a:	f107 001c 	add.w	r0, r7, #28
 800850e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008512:	2300      	movs	r3, #0
 8008514:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008516:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008518:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800851a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800851c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800851e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008520:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008522:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008526:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800852a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	4313      	orrs	r3, r2
 8008530:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	685a      	ldr	r2, [r3, #4]
 8008536:	4b07      	ldr	r3, [pc, #28]	; (8008554 <SDMMC_Init+0x54>)
 8008538:	4013      	ands	r3, r2
 800853a:	68fa      	ldr	r2, [r7, #12]
 800853c:	431a      	orrs	r2, r3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008542:	2300      	movs	r3, #0
}
 8008544:	4618      	mov	r0, r3
 8008546:	3714      	adds	r7, #20
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	b004      	add	sp, #16
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	ffff8100 	.word	0xffff8100

08008558 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008566:	4618      	mov	r0, r3
 8008568:	370c      	adds	r7, #12
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr

08008572 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8008572:	b480      	push	{r7}
 8008574:	b083      	sub	sp, #12
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
 800857a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008586:	2300      	movs	r3, #0
}
 8008588:	4618      	mov	r0, r3
 800858a:	370c      	adds	r7, #12
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2203      	movs	r2, #3
 80085a0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80085a2:	2300      	movs	r3, #0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f003 0303 	and.w	r3, r3, #3
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	370c      	adds	r7, #12
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80085d6:	2300      	movs	r3, #0
 80085d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80085ea:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80085f0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80085f6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80085f8:	68fa      	ldr	r2, [r7, #12]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	68da      	ldr	r2, [r3, #12]
 8008602:	4b06      	ldr	r3, [pc, #24]	; (800861c <SDMMC_SendCommand+0x50>)
 8008604:	4013      	ands	r3, r2
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	431a      	orrs	r2, r3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	3714      	adds	r7, #20
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr
 800861c:	fffff000 	.word	0xfffff000

08008620 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	691b      	ldr	r3, [r3, #16]
 800862c:	b2db      	uxtb	r3, r3
}
 800862e:	4618      	mov	r0, r3
 8008630:	370c      	adds	r7, #12
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr

0800863a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800863a:	b480      	push	{r7}
 800863c:	b085      	sub	sp, #20
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
 8008642:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	3314      	adds	r3, #20
 8008648:	461a      	mov	r2, r3
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	4413      	add	r3, r2
 800864e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
}  
 8008654:	4618      	mov	r0, r3
 8008656:	3714      	adds	r7, #20
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr

08008660 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8008660:	b480      	push	{r7}
 8008662:	b085      	sub	sp, #20
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800866a:	2300      	movs	r3, #0
 800866c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	685a      	ldr	r2, [r3, #4]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008686:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800868c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008692:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008694:	68fa      	ldr	r2, [r7, #12]
 8008696:	4313      	orrs	r3, r2
 8008698:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800869e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	431a      	orrs	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80086aa:	2300      	movs	r3, #0

}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3714      	adds	r7, #20
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr

080086b8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b088      	sub	sp, #32
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80086c6:	2310      	movs	r3, #16
 80086c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80086ca:	2340      	movs	r3, #64	; 0x40
 80086cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80086ce:	2300      	movs	r3, #0
 80086d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80086d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80086d8:	f107 0308 	add.w	r3, r7, #8
 80086dc:	4619      	mov	r1, r3
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f7ff ff74 	bl	80085cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80086e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80086e8:	2110      	movs	r1, #16
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 f9d6 	bl	8008a9c <SDMMC_GetCmdResp1>
 80086f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086f2:	69fb      	ldr	r3, [r7, #28]
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3720      	adds	r7, #32
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b088      	sub	sp, #32
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800870a:	2311      	movs	r3, #17
 800870c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800870e:	2340      	movs	r3, #64	; 0x40
 8008710:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008712:	2300      	movs	r3, #0
 8008714:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800871a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800871c:	f107 0308 	add.w	r3, r7, #8
 8008720:	4619      	mov	r1, r3
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f7ff ff52 	bl	80085cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008728:	f241 3288 	movw	r2, #5000	; 0x1388
 800872c:	2111      	movs	r1, #17
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 f9b4 	bl	8008a9c <SDMMC_GetCmdResp1>
 8008734:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008736:	69fb      	ldr	r3, [r7, #28]
}
 8008738:	4618      	mov	r0, r3
 800873a:	3720      	adds	r7, #32
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b088      	sub	sp, #32
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800874e:	2312      	movs	r3, #18
 8008750:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008752:	2340      	movs	r3, #64	; 0x40
 8008754:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008756:	2300      	movs	r3, #0
 8008758:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800875a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800875e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008760:	f107 0308 	add.w	r3, r7, #8
 8008764:	4619      	mov	r1, r3
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f7ff ff30 	bl	80085cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800876c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008770:	2112      	movs	r1, #18
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 f992 	bl	8008a9c <SDMMC_GetCmdResp1>
 8008778:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800877a:	69fb      	ldr	r3, [r7, #28]
}
 800877c:	4618      	mov	r0, r3
 800877e:	3720      	adds	r7, #32
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b088      	sub	sp, #32
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008792:	2318      	movs	r3, #24
 8008794:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008796:	2340      	movs	r3, #64	; 0x40
 8008798:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800879a:	2300      	movs	r3, #0
 800879c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800879e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80087a4:	f107 0308 	add.w	r3, r7, #8
 80087a8:	4619      	mov	r1, r3
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f7ff ff0e 	bl	80085cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80087b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80087b4:	2118      	movs	r1, #24
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 f970 	bl	8008a9c <SDMMC_GetCmdResp1>
 80087bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087be:	69fb      	ldr	r3, [r7, #28]
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3720      	adds	r7, #32
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b088      	sub	sp, #32
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80087d6:	2319      	movs	r3, #25
 80087d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80087da:	2340      	movs	r3, #64	; 0x40
 80087dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80087de:	2300      	movs	r3, #0
 80087e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80087e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80087e8:	f107 0308 	add.w	r3, r7, #8
 80087ec:	4619      	mov	r1, r3
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f7ff feec 	bl	80085cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80087f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80087f8:	2119      	movs	r1, #25
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 f94e 	bl	8008a9c <SDMMC_GetCmdResp1>
 8008800:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008802:	69fb      	ldr	r3, [r7, #28]
}
 8008804:	4618      	mov	r0, r3
 8008806:	3720      	adds	r7, #32
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b088      	sub	sp, #32
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008814:	2300      	movs	r3, #0
 8008816:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008818:	230c      	movs	r3, #12
 800881a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800881c:	2340      	movs	r3, #64	; 0x40
 800881e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008820:	2300      	movs	r3, #0
 8008822:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008824:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008828:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800882a:	f107 0308 	add.w	r3, r7, #8
 800882e:	4619      	mov	r1, r3
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f7ff fecb 	bl	80085cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008836:	4a05      	ldr	r2, [pc, #20]	; (800884c <SDMMC_CmdStopTransfer+0x40>)
 8008838:	210c      	movs	r1, #12
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 f92e 	bl	8008a9c <SDMMC_GetCmdResp1>
 8008840:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008842:	69fb      	ldr	r3, [r7, #28]
}
 8008844:	4618      	mov	r0, r3
 8008846:	3720      	adds	r7, #32
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	05f5e100 	.word	0x05f5e100

08008850 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b08a      	sub	sp, #40	; 0x28
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008860:	2307      	movs	r3, #7
 8008862:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008864:	2340      	movs	r3, #64	; 0x40
 8008866:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008868:	2300      	movs	r3, #0
 800886a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800886c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008870:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008872:	f107 0310 	add.w	r3, r7, #16
 8008876:	4619      	mov	r1, r3
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f7ff fea7 	bl	80085cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800887e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008882:	2107      	movs	r1, #7
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f000 f909 	bl	8008a9c <SDMMC_GetCmdResp1>
 800888a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800888c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800888e:	4618      	mov	r0, r3
 8008890:	3728      	adds	r7, #40	; 0x28
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b088      	sub	sp, #32
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800889e:	2300      	movs	r3, #0
 80088a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80088a2:	2300      	movs	r3, #0
 80088a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80088a6:	2300      	movs	r3, #0
 80088a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80088aa:	2300      	movs	r3, #0
 80088ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80088ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80088b4:	f107 0308 	add.w	r3, r7, #8
 80088b8:	4619      	mov	r1, r3
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f7ff fe86 	bl	80085cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 fb23 	bl	8008f0c <SDMMC_GetCmdError>
 80088c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088c8:	69fb      	ldr	r3, [r7, #28]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3720      	adds	r7, #32
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b088      	sub	sp, #32
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80088da:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80088de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80088e0:	2308      	movs	r3, #8
 80088e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80088e4:	2340      	movs	r3, #64	; 0x40
 80088e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80088e8:	2300      	movs	r3, #0
 80088ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80088ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80088f2:	f107 0308 	add.w	r3, r7, #8
 80088f6:	4619      	mov	r1, r3
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f7ff fe67 	bl	80085cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 fab6 	bl	8008e70 <SDMMC_GetCmdResp7>
 8008904:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008906:	69fb      	ldr	r3, [r7, #28]
}
 8008908:	4618      	mov	r0, r3
 800890a:	3720      	adds	r7, #32
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b088      	sub	sp, #32
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800891e:	2337      	movs	r3, #55	; 0x37
 8008920:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008922:	2340      	movs	r3, #64	; 0x40
 8008924:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008926:	2300      	movs	r3, #0
 8008928:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800892a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800892e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008930:	f107 0308 	add.w	r3, r7, #8
 8008934:	4619      	mov	r1, r3
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f7ff fe48 	bl	80085cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800893c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008940:	2137      	movs	r1, #55	; 0x37
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 f8aa 	bl	8008a9c <SDMMC_GetCmdResp1>
 8008948:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800894a:	69fb      	ldr	r3, [r7, #28]
}
 800894c:	4618      	mov	r0, r3
 800894e:	3720      	adds	r7, #32
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b088      	sub	sp, #32
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800895e:	683a      	ldr	r2, [r7, #0]
 8008960:	4b0d      	ldr	r3, [pc, #52]	; (8008998 <SDMMC_CmdAppOperCommand+0x44>)
 8008962:	4313      	orrs	r3, r2
 8008964:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008966:	2329      	movs	r3, #41	; 0x29
 8008968:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800896a:	2340      	movs	r3, #64	; 0x40
 800896c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800896e:	2300      	movs	r3, #0
 8008970:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008976:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008978:	f107 0308 	add.w	r3, r7, #8
 800897c:	4619      	mov	r1, r3
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f7ff fe24 	bl	80085cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 f9bf 	bl	8008d08 <SDMMC_GetCmdResp3>
 800898a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800898c:	69fb      	ldr	r3, [r7, #28]
}
 800898e:	4618      	mov	r0, r3
 8008990:	3720      	adds	r7, #32
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	80100000 	.word	0x80100000

0800899c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b088      	sub	sp, #32
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80089a4:	2300      	movs	r3, #0
 80089a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80089a8:	2302      	movs	r3, #2
 80089aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80089ac:	23c0      	movs	r3, #192	; 0xc0
 80089ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80089b0:	2300      	movs	r3, #0
 80089b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80089b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80089ba:	f107 0308 	add.w	r3, r7, #8
 80089be:	4619      	mov	r1, r3
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f7ff fe03 	bl	80085cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 f956 	bl	8008c78 <SDMMC_GetCmdResp2>
 80089cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089ce:	69fb      	ldr	r3, [r7, #28]
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3720      	adds	r7, #32
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b088      	sub	sp, #32
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80089e6:	2309      	movs	r3, #9
 80089e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80089ea:	23c0      	movs	r3, #192	; 0xc0
 80089ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80089ee:	2300      	movs	r3, #0
 80089f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80089f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80089f8:	f107 0308 	add.w	r3, r7, #8
 80089fc:	4619      	mov	r1, r3
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f7ff fde4 	bl	80085cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 f937 	bl	8008c78 <SDMMC_GetCmdResp2>
 8008a0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a0c:	69fb      	ldr	r3, [r7, #28]
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3720      	adds	r7, #32
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b088      	sub	sp, #32
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
 8008a1e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008a20:	2300      	movs	r3, #0
 8008a22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008a24:	2303      	movs	r3, #3
 8008a26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a28:	2340      	movs	r3, #64	; 0x40
 8008a2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a34:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a36:	f107 0308 	add.w	r3, r7, #8
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f7ff fdc5 	bl	80085cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008a42:	683a      	ldr	r2, [r7, #0]
 8008a44:	2103      	movs	r1, #3
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 f99c 	bl	8008d84 <SDMMC_GetCmdResp6>
 8008a4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a4e:	69fb      	ldr	r3, [r7, #28]
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3720      	adds	r7, #32
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b088      	sub	sp, #32
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008a66:	230d      	movs	r3, #13
 8008a68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a6a:	2340      	movs	r3, #64	; 0x40
 8008a6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a78:	f107 0308 	add.w	r3, r7, #8
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f7ff fda4 	bl	80085cc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a88:	210d      	movs	r1, #13
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f806 	bl	8008a9c <SDMMC_GetCmdResp1>
 8008a90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a92:	69fb      	ldr	r3, [r7, #28]
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3720      	adds	r7, #32
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b088      	sub	sp, #32
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	607a      	str	r2, [r7, #4]
 8008aa8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008aaa:	4b70      	ldr	r3, [pc, #448]	; (8008c6c <SDMMC_GetCmdResp1+0x1d0>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a70      	ldr	r2, [pc, #448]	; (8008c70 <SDMMC_GetCmdResp1+0x1d4>)
 8008ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ab4:	0a5a      	lsrs	r2, r3, #9
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	fb02 f303 	mul.w	r3, r2, r3
 8008abc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	1e5a      	subs	r2, r3, #1
 8008ac2:	61fa      	str	r2, [r7, #28]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d102      	bne.n	8008ace <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008ac8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008acc:	e0c9      	b.n	8008c62 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ad2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d0ef      	beq.n	8008abe <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d1ea      	bne.n	8008abe <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aec:	f003 0304 	and.w	r3, r3, #4
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d004      	beq.n	8008afe <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2204      	movs	r2, #4
 8008af8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008afa:	2304      	movs	r3, #4
 8008afc:	e0b1      	b.n	8008c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b02:	f003 0301 	and.w	r3, r3, #1
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d004      	beq.n	8008b14 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008b10:	2301      	movs	r3, #1
 8008b12:	e0a6      	b.n	8008c62 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	22c5      	movs	r2, #197	; 0xc5
 8008b18:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008b1a:	68f8      	ldr	r0, [r7, #12]
 8008b1c:	f7ff fd80 	bl	8008620 <SDMMC_GetCommandResponse>
 8008b20:	4603      	mov	r3, r0
 8008b22:	461a      	mov	r2, r3
 8008b24:	7afb      	ldrb	r3, [r7, #11]
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d001      	beq.n	8008b2e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e099      	b.n	8008c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008b2e:	2100      	movs	r1, #0
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f7ff fd82 	bl	800863a <SDMMC_GetResponse>
 8008b36:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008b38:	697a      	ldr	r2, [r7, #20]
 8008b3a:	4b4e      	ldr	r3, [pc, #312]	; (8008c74 <SDMMC_GetCmdResp1+0x1d8>)
 8008b3c:	4013      	ands	r3, r2
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d101      	bne.n	8008b46 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008b42:	2300      	movs	r3, #0
 8008b44:	e08d      	b.n	8008c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	da02      	bge.n	8008b52 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008b4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b50:	e087      	b.n	8008c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d001      	beq.n	8008b60 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008b5c:	2340      	movs	r3, #64	; 0x40
 8008b5e:	e080      	b.n	8008c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d001      	beq.n	8008b6e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008b6a:	2380      	movs	r3, #128	; 0x80
 8008b6c:	e079      	b.n	8008c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d002      	beq.n	8008b7e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008b78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b7c:	e071      	b.n	8008c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d002      	beq.n	8008b8e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008b88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b8c:	e069      	b.n	8008c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d002      	beq.n	8008b9e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008b98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b9c:	e061      	b.n	8008c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d002      	beq.n	8008bae <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008ba8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008bac:	e059      	b.n	8008c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d002      	beq.n	8008bbe <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bbc:	e051      	b.n	8008c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d002      	beq.n	8008bce <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008bc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008bcc:	e049      	b.n	8008c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d002      	beq.n	8008bde <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008bd8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008bdc:	e041      	b.n	8008c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d002      	beq.n	8008bee <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008be8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bec:	e039      	b.n	8008c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d002      	beq.n	8008bfe <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008bf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008bfc:	e031      	b.n	8008c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d002      	beq.n	8008c0e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008c08:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008c0c:	e029      	b.n	8008c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d002      	beq.n	8008c1e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008c18:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008c1c:	e021      	b.n	8008c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d002      	beq.n	8008c2e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008c28:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008c2c:	e019      	b.n	8008c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d002      	beq.n	8008c3e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008c38:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008c3c:	e011      	b.n	8008c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d002      	beq.n	8008c4e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008c48:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008c4c:	e009      	b.n	8008c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	f003 0308 	and.w	r3, r3, #8
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d002      	beq.n	8008c5e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008c58:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008c5c:	e001      	b.n	8008c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008c5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3720      	adds	r7, #32
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	20000004 	.word	0x20000004
 8008c70:	10624dd3 	.word	0x10624dd3
 8008c74:	fdffe008 	.word	0xfdffe008

08008c78 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b085      	sub	sp, #20
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008c80:	4b1f      	ldr	r3, [pc, #124]	; (8008d00 <SDMMC_GetCmdResp2+0x88>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a1f      	ldr	r2, [pc, #124]	; (8008d04 <SDMMC_GetCmdResp2+0x8c>)
 8008c86:	fba2 2303 	umull	r2, r3, r2, r3
 8008c8a:	0a5b      	lsrs	r3, r3, #9
 8008c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c90:	fb02 f303 	mul.w	r3, r2, r3
 8008c94:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	1e5a      	subs	r2, r3, #1
 8008c9a:	60fa      	str	r2, [r7, #12]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d102      	bne.n	8008ca6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008ca0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ca4:	e026      	b.n	8008cf4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008caa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d0ef      	beq.n	8008c96 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d1ea      	bne.n	8008c96 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cc4:	f003 0304 	and.w	r3, r3, #4
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d004      	beq.n	8008cd6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2204      	movs	r2, #4
 8008cd0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008cd2:	2304      	movs	r3, #4
 8008cd4:	e00e      	b.n	8008cf4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cda:	f003 0301 	and.w	r3, r3, #1
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d004      	beq.n	8008cec <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e003      	b.n	8008cf4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	22c5      	movs	r2, #197	; 0xc5
 8008cf0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3714      	adds	r7, #20
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr
 8008d00:	20000004 	.word	0x20000004
 8008d04:	10624dd3 	.word	0x10624dd3

08008d08 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b085      	sub	sp, #20
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008d10:	4b1a      	ldr	r3, [pc, #104]	; (8008d7c <SDMMC_GetCmdResp3+0x74>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a1a      	ldr	r2, [pc, #104]	; (8008d80 <SDMMC_GetCmdResp3+0x78>)
 8008d16:	fba2 2303 	umull	r2, r3, r2, r3
 8008d1a:	0a5b      	lsrs	r3, r3, #9
 8008d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d20:	fb02 f303 	mul.w	r3, r2, r3
 8008d24:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	1e5a      	subs	r2, r3, #1
 8008d2a:	60fa      	str	r2, [r7, #12]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d102      	bne.n	8008d36 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008d30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d34:	e01b      	b.n	8008d6e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d3a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d0ef      	beq.n	8008d26 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d1ea      	bne.n	8008d26 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d54:	f003 0304 	and.w	r3, r3, #4
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d004      	beq.n	8008d66 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2204      	movs	r2, #4
 8008d60:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008d62:	2304      	movs	r3, #4
 8008d64:	e003      	b.n	8008d6e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	22c5      	movs	r2, #197	; 0xc5
 8008d6a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3714      	adds	r7, #20
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop
 8008d7c:	20000004 	.word	0x20000004
 8008d80:	10624dd3 	.word	0x10624dd3

08008d84 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b088      	sub	sp, #32
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	60f8      	str	r0, [r7, #12]
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	607a      	str	r2, [r7, #4]
 8008d90:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008d92:	4b35      	ldr	r3, [pc, #212]	; (8008e68 <SDMMC_GetCmdResp6+0xe4>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a35      	ldr	r2, [pc, #212]	; (8008e6c <SDMMC_GetCmdResp6+0xe8>)
 8008d98:	fba2 2303 	umull	r2, r3, r2, r3
 8008d9c:	0a5b      	lsrs	r3, r3, #9
 8008d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008da2:	fb02 f303 	mul.w	r3, r2, r3
 8008da6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	1e5a      	subs	r2, r3, #1
 8008dac:	61fa      	str	r2, [r7, #28]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d102      	bne.n	8008db8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008db2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008db6:	e052      	b.n	8008e5e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dbc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d0ef      	beq.n	8008da8 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008dc8:	69bb      	ldr	r3, [r7, #24]
 8008dca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d1ea      	bne.n	8008da8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd6:	f003 0304 	and.w	r3, r3, #4
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d004      	beq.n	8008de8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2204      	movs	r2, #4
 8008de2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008de4:	2304      	movs	r3, #4
 8008de6:	e03a      	b.n	8008e5e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dec:	f003 0301 	and.w	r3, r3, #1
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d004      	beq.n	8008dfe <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2201      	movs	r2, #1
 8008df8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e02f      	b.n	8008e5e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008dfe:	68f8      	ldr	r0, [r7, #12]
 8008e00:	f7ff fc0e 	bl	8008620 <SDMMC_GetCommandResponse>
 8008e04:	4603      	mov	r3, r0
 8008e06:	461a      	mov	r2, r3
 8008e08:	7afb      	ldrb	r3, [r7, #11]
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d001      	beq.n	8008e12 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e025      	b.n	8008e5e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	22c5      	movs	r2, #197	; 0xc5
 8008e16:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008e18:	2100      	movs	r1, #0
 8008e1a:	68f8      	ldr	r0, [r7, #12]
 8008e1c:	f7ff fc0d 	bl	800863a <SDMMC_GetResponse>
 8008e20:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d106      	bne.n	8008e3a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	0c1b      	lsrs	r3, r3, #16
 8008e30:	b29a      	uxth	r2, r3
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008e36:	2300      	movs	r3, #0
 8008e38:	e011      	b.n	8008e5e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d002      	beq.n	8008e4a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008e44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008e48:	e009      	b.n	8008e5e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d002      	beq.n	8008e5a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008e54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e58:	e001      	b.n	8008e5e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008e5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3720      	adds	r7, #32
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	20000004 	.word	0x20000004
 8008e6c:	10624dd3 	.word	0x10624dd3

08008e70 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b085      	sub	sp, #20
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008e78:	4b22      	ldr	r3, [pc, #136]	; (8008f04 <SDMMC_GetCmdResp7+0x94>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a22      	ldr	r2, [pc, #136]	; (8008f08 <SDMMC_GetCmdResp7+0x98>)
 8008e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e82:	0a5b      	lsrs	r3, r3, #9
 8008e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e88:	fb02 f303 	mul.w	r3, r2, r3
 8008e8c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	1e5a      	subs	r2, r3, #1
 8008e92:	60fa      	str	r2, [r7, #12]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d102      	bne.n	8008e9e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008e98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e9c:	e02c      	b.n	8008ef8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ea2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d0ef      	beq.n	8008e8e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d1ea      	bne.n	8008e8e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ebc:	f003 0304 	and.w	r3, r3, #4
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d004      	beq.n	8008ece <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2204      	movs	r2, #4
 8008ec8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008eca:	2304      	movs	r3, #4
 8008ecc:	e014      	b.n	8008ef8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ed2:	f003 0301 	and.w	r3, r3, #1
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d004      	beq.n	8008ee4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2201      	movs	r2, #1
 8008ede:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e009      	b.n	8008ef8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d002      	beq.n	8008ef6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2240      	movs	r2, #64	; 0x40
 8008ef4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008ef6:	2300      	movs	r3, #0
  
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3714      	adds	r7, #20
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr
 8008f04:	20000004 	.word	0x20000004
 8008f08:	10624dd3 	.word	0x10624dd3

08008f0c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b085      	sub	sp, #20
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008f14:	4b11      	ldr	r3, [pc, #68]	; (8008f5c <SDMMC_GetCmdError+0x50>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a11      	ldr	r2, [pc, #68]	; (8008f60 <SDMMC_GetCmdError+0x54>)
 8008f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f1e:	0a5b      	lsrs	r3, r3, #9
 8008f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f24:	fb02 f303 	mul.w	r3, r2, r3
 8008f28:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	1e5a      	subs	r2, r3, #1
 8008f2e:	60fa      	str	r2, [r7, #12]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d102      	bne.n	8008f3a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008f34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008f38:	e009      	b.n	8008f4e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d0f1      	beq.n	8008f2a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	22c5      	movs	r2, #197	; 0xc5
 8008f4a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3714      	adds	r7, #20
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	20000004 	.word	0x20000004
 8008f60:	10624dd3 	.word	0x10624dd3

08008f64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f64:	b084      	sub	sp, #16
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b084      	sub	sp, #16
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
 8008f6e:	f107 001c 	add.w	r0, r7, #28
 8008f72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d120      	bne.n	8008fbe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	68da      	ldr	r2, [r3, #12]
 8008f8c:	4b20      	ldr	r3, [pc, #128]	; (8009010 <USB_CoreInit+0xac>)
 8008f8e:	4013      	ands	r3, r2
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d105      	bne.n	8008fb2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f001 fbee 	bl	800a794 <USB_CoreReset>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	73fb      	strb	r3, [r7, #15]
 8008fbc:	e010      	b.n	8008fe0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f001 fbe2 	bl	800a794 <USB_CoreReset>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d10b      	bne.n	8008ffe <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	f043 0206 	orr.w	r2, r3, #6
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	f043 0220 	orr.w	r2, r3, #32
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009000:	4618      	mov	r0, r3
 8009002:	3710      	adds	r7, #16
 8009004:	46bd      	mov	sp, r7
 8009006:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800900a:	b004      	add	sp, #16
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	ffbdffbf 	.word	0xffbdffbf

08009014 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009014:	b480      	push	{r7}
 8009016:	b087      	sub	sp, #28
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	4613      	mov	r3, r2
 8009020:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009022:	79fb      	ldrb	r3, [r7, #7]
 8009024:	2b02      	cmp	r3, #2
 8009026:	d165      	bne.n	80090f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	4a41      	ldr	r2, [pc, #260]	; (8009130 <USB_SetTurnaroundTime+0x11c>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d906      	bls.n	800903e <USB_SetTurnaroundTime+0x2a>
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	4a40      	ldr	r2, [pc, #256]	; (8009134 <USB_SetTurnaroundTime+0x120>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d202      	bcs.n	800903e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009038:	230f      	movs	r3, #15
 800903a:	617b      	str	r3, [r7, #20]
 800903c:	e062      	b.n	8009104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	4a3c      	ldr	r2, [pc, #240]	; (8009134 <USB_SetTurnaroundTime+0x120>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d306      	bcc.n	8009054 <USB_SetTurnaroundTime+0x40>
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	4a3b      	ldr	r2, [pc, #236]	; (8009138 <USB_SetTurnaroundTime+0x124>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d202      	bcs.n	8009054 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800904e:	230e      	movs	r3, #14
 8009050:	617b      	str	r3, [r7, #20]
 8009052:	e057      	b.n	8009104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	4a38      	ldr	r2, [pc, #224]	; (8009138 <USB_SetTurnaroundTime+0x124>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d306      	bcc.n	800906a <USB_SetTurnaroundTime+0x56>
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	4a37      	ldr	r2, [pc, #220]	; (800913c <USB_SetTurnaroundTime+0x128>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d202      	bcs.n	800906a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009064:	230d      	movs	r3, #13
 8009066:	617b      	str	r3, [r7, #20]
 8009068:	e04c      	b.n	8009104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	4a33      	ldr	r2, [pc, #204]	; (800913c <USB_SetTurnaroundTime+0x128>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d306      	bcc.n	8009080 <USB_SetTurnaroundTime+0x6c>
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	4a32      	ldr	r2, [pc, #200]	; (8009140 <USB_SetTurnaroundTime+0x12c>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d802      	bhi.n	8009080 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800907a:	230c      	movs	r3, #12
 800907c:	617b      	str	r3, [r7, #20]
 800907e:	e041      	b.n	8009104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	4a2f      	ldr	r2, [pc, #188]	; (8009140 <USB_SetTurnaroundTime+0x12c>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d906      	bls.n	8009096 <USB_SetTurnaroundTime+0x82>
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	4a2e      	ldr	r2, [pc, #184]	; (8009144 <USB_SetTurnaroundTime+0x130>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d802      	bhi.n	8009096 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009090:	230b      	movs	r3, #11
 8009092:	617b      	str	r3, [r7, #20]
 8009094:	e036      	b.n	8009104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	4a2a      	ldr	r2, [pc, #168]	; (8009144 <USB_SetTurnaroundTime+0x130>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d906      	bls.n	80090ac <USB_SetTurnaroundTime+0x98>
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	4a29      	ldr	r2, [pc, #164]	; (8009148 <USB_SetTurnaroundTime+0x134>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d802      	bhi.n	80090ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80090a6:	230a      	movs	r3, #10
 80090a8:	617b      	str	r3, [r7, #20]
 80090aa:	e02b      	b.n	8009104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	4a26      	ldr	r2, [pc, #152]	; (8009148 <USB_SetTurnaroundTime+0x134>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d906      	bls.n	80090c2 <USB_SetTurnaroundTime+0xae>
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	4a25      	ldr	r2, [pc, #148]	; (800914c <USB_SetTurnaroundTime+0x138>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d202      	bcs.n	80090c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80090bc:	2309      	movs	r3, #9
 80090be:	617b      	str	r3, [r7, #20]
 80090c0:	e020      	b.n	8009104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	4a21      	ldr	r2, [pc, #132]	; (800914c <USB_SetTurnaroundTime+0x138>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d306      	bcc.n	80090d8 <USB_SetTurnaroundTime+0xc4>
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	4a20      	ldr	r2, [pc, #128]	; (8009150 <USB_SetTurnaroundTime+0x13c>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d802      	bhi.n	80090d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80090d2:	2308      	movs	r3, #8
 80090d4:	617b      	str	r3, [r7, #20]
 80090d6:	e015      	b.n	8009104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	4a1d      	ldr	r2, [pc, #116]	; (8009150 <USB_SetTurnaroundTime+0x13c>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d906      	bls.n	80090ee <USB_SetTurnaroundTime+0xda>
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	4a1c      	ldr	r2, [pc, #112]	; (8009154 <USB_SetTurnaroundTime+0x140>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d202      	bcs.n	80090ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80090e8:	2307      	movs	r3, #7
 80090ea:	617b      	str	r3, [r7, #20]
 80090ec:	e00a      	b.n	8009104 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80090ee:	2306      	movs	r3, #6
 80090f0:	617b      	str	r3, [r7, #20]
 80090f2:	e007      	b.n	8009104 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80090f4:	79fb      	ldrb	r3, [r7, #7]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d102      	bne.n	8009100 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80090fa:	2309      	movs	r3, #9
 80090fc:	617b      	str	r3, [r7, #20]
 80090fe:	e001      	b.n	8009104 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009100:	2309      	movs	r3, #9
 8009102:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	68da      	ldr	r2, [r3, #12]
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	029b      	lsls	r3, r3, #10
 8009118:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800911c:	431a      	orrs	r2, r3
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009122:	2300      	movs	r3, #0
}
 8009124:	4618      	mov	r0, r3
 8009126:	371c      	adds	r7, #28
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr
 8009130:	00d8acbf 	.word	0x00d8acbf
 8009134:	00e4e1c0 	.word	0x00e4e1c0
 8009138:	00f42400 	.word	0x00f42400
 800913c:	01067380 	.word	0x01067380
 8009140:	011a499f 	.word	0x011a499f
 8009144:	01312cff 	.word	0x01312cff
 8009148:	014ca43f 	.word	0x014ca43f
 800914c:	016e3600 	.word	0x016e3600
 8009150:	01a6ab1f 	.word	0x01a6ab1f
 8009154:	01e84800 	.word	0x01e84800

08009158 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009158:	b480      	push	{r7}
 800915a:	b083      	sub	sp, #12
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	f043 0201 	orr.w	r2, r3, #1
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	370c      	adds	r7, #12
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr

0800917a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800917a:	b480      	push	{r7}
 800917c:	b083      	sub	sp, #12
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	f023 0201 	bic.w	r2, r3, #1
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	460b      	mov	r3, r1
 80091a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80091a8:	2300      	movs	r3, #0
 80091aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	68db      	ldr	r3, [r3, #12]
 80091b0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80091b8:	78fb      	ldrb	r3, [r7, #3]
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d115      	bne.n	80091ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80091ca:	2001      	movs	r0, #1
 80091cc:	f7f8 fd48 	bl	8001c60 <HAL_Delay>
      ms++;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	3301      	adds	r3, #1
 80091d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f001 fa4b 	bl	800a672 <USB_GetMode>
 80091dc:	4603      	mov	r3, r0
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d01e      	beq.n	8009220 <USB_SetCurrentMode+0x84>
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2b31      	cmp	r3, #49	; 0x31
 80091e6:	d9f0      	bls.n	80091ca <USB_SetCurrentMode+0x2e>
 80091e8:	e01a      	b.n	8009220 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80091ea:	78fb      	ldrb	r3, [r7, #3]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d115      	bne.n	800921c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80091fc:	2001      	movs	r0, #1
 80091fe:	f7f8 fd2f 	bl	8001c60 <HAL_Delay>
      ms++;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	3301      	adds	r3, #1
 8009206:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f001 fa32 	bl	800a672 <USB_GetMode>
 800920e:	4603      	mov	r3, r0
 8009210:	2b00      	cmp	r3, #0
 8009212:	d005      	beq.n	8009220 <USB_SetCurrentMode+0x84>
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2b31      	cmp	r3, #49	; 0x31
 8009218:	d9f0      	bls.n	80091fc <USB_SetCurrentMode+0x60>
 800921a:	e001      	b.n	8009220 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	e005      	b.n	800922c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2b32      	cmp	r3, #50	; 0x32
 8009224:	d101      	bne.n	800922a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	e000      	b.n	800922c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800922a:	2300      	movs	r3, #0
}
 800922c:	4618      	mov	r0, r3
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009234:	b084      	sub	sp, #16
 8009236:	b580      	push	{r7, lr}
 8009238:	b086      	sub	sp, #24
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
 800923e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009242:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009246:	2300      	movs	r3, #0
 8009248:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800924e:	2300      	movs	r3, #0
 8009250:	613b      	str	r3, [r7, #16]
 8009252:	e009      	b.n	8009268 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	3340      	adds	r3, #64	; 0x40
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	4413      	add	r3, r2
 800925e:	2200      	movs	r2, #0
 8009260:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	3301      	adds	r3, #1
 8009266:	613b      	str	r3, [r7, #16]
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	2b0e      	cmp	r3, #14
 800926c:	d9f2      	bls.n	8009254 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800926e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009270:	2b00      	cmp	r3, #0
 8009272:	d11c      	bne.n	80092ae <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	68fa      	ldr	r2, [r7, #12]
 800927e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009282:	f043 0302 	orr.w	r3, r3, #2
 8009286:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800928c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	601a      	str	r2, [r3, #0]
 80092ac:	e005      	b.n	80092ba <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80092c0:	461a      	mov	r2, r3
 80092c2:	2300      	movs	r3, #0
 80092c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092cc:	4619      	mov	r1, r3
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092d4:	461a      	mov	r2, r3
 80092d6:	680b      	ldr	r3, [r1, #0]
 80092d8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80092da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d10c      	bne.n	80092fa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80092e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d104      	bne.n	80092f0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80092e6:	2100      	movs	r1, #0
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 f965 	bl	80095b8 <USB_SetDevSpeed>
 80092ee:	e008      	b.n	8009302 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80092f0:	2101      	movs	r1, #1
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 f960 	bl	80095b8 <USB_SetDevSpeed>
 80092f8:	e003      	b.n	8009302 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80092fa:	2103      	movs	r1, #3
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 f95b 	bl	80095b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009302:	2110      	movs	r1, #16
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 f8f3 	bl	80094f0 <USB_FlushTxFifo>
 800930a:	4603      	mov	r3, r0
 800930c:	2b00      	cmp	r3, #0
 800930e:	d001      	beq.n	8009314 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009310:	2301      	movs	r3, #1
 8009312:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 f91f 	bl	8009558 <USB_FlushRxFifo>
 800931a:	4603      	mov	r3, r0
 800931c:	2b00      	cmp	r3, #0
 800931e:	d001      	beq.n	8009324 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009320:	2301      	movs	r3, #1
 8009322:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800932a:	461a      	mov	r2, r3
 800932c:	2300      	movs	r3, #0
 800932e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009336:	461a      	mov	r2, r3
 8009338:	2300      	movs	r3, #0
 800933a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009342:	461a      	mov	r2, r3
 8009344:	2300      	movs	r3, #0
 8009346:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009348:	2300      	movs	r3, #0
 800934a:	613b      	str	r3, [r7, #16]
 800934c:	e043      	b.n	80093d6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	015a      	lsls	r2, r3, #5
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	4413      	add	r3, r2
 8009356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009360:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009364:	d118      	bne.n	8009398 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d10a      	bne.n	8009382 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	015a      	lsls	r2, r3, #5
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	4413      	add	r3, r2
 8009374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009378:	461a      	mov	r2, r3
 800937a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800937e:	6013      	str	r3, [r2, #0]
 8009380:	e013      	b.n	80093aa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	015a      	lsls	r2, r3, #5
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	4413      	add	r3, r2
 800938a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800938e:	461a      	mov	r2, r3
 8009390:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009394:	6013      	str	r3, [r2, #0]
 8009396:	e008      	b.n	80093aa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	015a      	lsls	r2, r3, #5
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	4413      	add	r3, r2
 80093a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093a4:	461a      	mov	r2, r3
 80093a6:	2300      	movs	r3, #0
 80093a8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	015a      	lsls	r2, r3, #5
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	4413      	add	r3, r2
 80093b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093b6:	461a      	mov	r2, r3
 80093b8:	2300      	movs	r3, #0
 80093ba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	015a      	lsls	r2, r3, #5
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	4413      	add	r3, r2
 80093c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093c8:	461a      	mov	r2, r3
 80093ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80093ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	3301      	adds	r3, #1
 80093d4:	613b      	str	r3, [r7, #16]
 80093d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d8:	693a      	ldr	r2, [r7, #16]
 80093da:	429a      	cmp	r2, r3
 80093dc:	d3b7      	bcc.n	800934e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093de:	2300      	movs	r3, #0
 80093e0:	613b      	str	r3, [r7, #16]
 80093e2:	e043      	b.n	800946c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	015a      	lsls	r2, r3, #5
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	4413      	add	r3, r2
 80093ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80093f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093fa:	d118      	bne.n	800942e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d10a      	bne.n	8009418 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	015a      	lsls	r2, r3, #5
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	4413      	add	r3, r2
 800940a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800940e:	461a      	mov	r2, r3
 8009410:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009414:	6013      	str	r3, [r2, #0]
 8009416:	e013      	b.n	8009440 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	015a      	lsls	r2, r3, #5
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	4413      	add	r3, r2
 8009420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009424:	461a      	mov	r2, r3
 8009426:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800942a:	6013      	str	r3, [r2, #0]
 800942c:	e008      	b.n	8009440 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	015a      	lsls	r2, r3, #5
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	4413      	add	r3, r2
 8009436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800943a:	461a      	mov	r2, r3
 800943c:	2300      	movs	r3, #0
 800943e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	015a      	lsls	r2, r3, #5
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	4413      	add	r3, r2
 8009448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800944c:	461a      	mov	r2, r3
 800944e:	2300      	movs	r3, #0
 8009450:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	015a      	lsls	r2, r3, #5
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	4413      	add	r3, r2
 800945a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800945e:	461a      	mov	r2, r3
 8009460:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009464:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	3301      	adds	r3, #1
 800946a:	613b      	str	r3, [r7, #16]
 800946c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946e:	693a      	ldr	r2, [r7, #16]
 8009470:	429a      	cmp	r2, r3
 8009472:	d3b7      	bcc.n	80093e4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	68fa      	ldr	r2, [r7, #12]
 800947e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009482:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009486:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2200      	movs	r2, #0
 800948c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009494:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009498:	2b00      	cmp	r3, #0
 800949a:	d105      	bne.n	80094a8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	699b      	ldr	r3, [r3, #24]
 80094a0:	f043 0210 	orr.w	r2, r3, #16
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	699a      	ldr	r2, [r3, #24]
 80094ac:	4b0e      	ldr	r3, [pc, #56]	; (80094e8 <USB_DevInit+0x2b4>)
 80094ae:	4313      	orrs	r3, r2
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80094b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d005      	beq.n	80094c6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	699b      	ldr	r3, [r3, #24]
 80094be:	f043 0208 	orr.w	r2, r3, #8
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80094c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d105      	bne.n	80094d8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	699a      	ldr	r2, [r3, #24]
 80094d0:	4b06      	ldr	r3, [pc, #24]	; (80094ec <USB_DevInit+0x2b8>)
 80094d2:	4313      	orrs	r3, r2
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80094d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3718      	adds	r7, #24
 80094de:	46bd      	mov	sp, r7
 80094e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80094e4:	b004      	add	sp, #16
 80094e6:	4770      	bx	lr
 80094e8:	803c3800 	.word	0x803c3800
 80094ec:	40000004 	.word	0x40000004

080094f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b085      	sub	sp, #20
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80094fa:	2300      	movs	r3, #0
 80094fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	3301      	adds	r3, #1
 8009502:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	4a13      	ldr	r2, [pc, #76]	; (8009554 <USB_FlushTxFifo+0x64>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d901      	bls.n	8009510 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800950c:	2303      	movs	r3, #3
 800950e:	e01b      	b.n	8009548 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	691b      	ldr	r3, [r3, #16]
 8009514:	2b00      	cmp	r3, #0
 8009516:	daf2      	bge.n	80094fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009518:	2300      	movs	r3, #0
 800951a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	019b      	lsls	r3, r3, #6
 8009520:	f043 0220 	orr.w	r2, r3, #32
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	3301      	adds	r3, #1
 800952c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	4a08      	ldr	r2, [pc, #32]	; (8009554 <USB_FlushTxFifo+0x64>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d901      	bls.n	800953a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009536:	2303      	movs	r3, #3
 8009538:	e006      	b.n	8009548 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	691b      	ldr	r3, [r3, #16]
 800953e:	f003 0320 	and.w	r3, r3, #32
 8009542:	2b20      	cmp	r3, #32
 8009544:	d0f0      	beq.n	8009528 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	3714      	adds	r7, #20
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr
 8009554:	00030d40 	.word	0x00030d40

08009558 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009558:	b480      	push	{r7}
 800955a:	b085      	sub	sp, #20
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009560:	2300      	movs	r3, #0
 8009562:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	3301      	adds	r3, #1
 8009568:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	4a11      	ldr	r2, [pc, #68]	; (80095b4 <USB_FlushRxFifo+0x5c>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d901      	bls.n	8009576 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009572:	2303      	movs	r3, #3
 8009574:	e018      	b.n	80095a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	691b      	ldr	r3, [r3, #16]
 800957a:	2b00      	cmp	r3, #0
 800957c:	daf2      	bge.n	8009564 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800957e:	2300      	movs	r3, #0
 8009580:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2210      	movs	r2, #16
 8009586:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	3301      	adds	r3, #1
 800958c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	4a08      	ldr	r2, [pc, #32]	; (80095b4 <USB_FlushRxFifo+0x5c>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d901      	bls.n	800959a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009596:	2303      	movs	r3, #3
 8009598:	e006      	b.n	80095a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	691b      	ldr	r3, [r3, #16]
 800959e:	f003 0310 	and.w	r3, r3, #16
 80095a2:	2b10      	cmp	r3, #16
 80095a4:	d0f0      	beq.n	8009588 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80095a6:	2300      	movs	r3, #0
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3714      	adds	r7, #20
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr
 80095b4:	00030d40 	.word	0x00030d40

080095b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b085      	sub	sp, #20
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	460b      	mov	r3, r1
 80095c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ce:	681a      	ldr	r2, [r3, #0]
 80095d0:	78fb      	ldrb	r3, [r7, #3]
 80095d2:	68f9      	ldr	r1, [r7, #12]
 80095d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095d8:	4313      	orrs	r3, r2
 80095da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80095dc:	2300      	movs	r3, #0
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3714      	adds	r7, #20
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr

080095ea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80095ea:	b480      	push	{r7}
 80095ec:	b087      	sub	sp, #28
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	f003 0306 	and.w	r3, r3, #6
 8009602:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d102      	bne.n	8009610 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800960a:	2300      	movs	r3, #0
 800960c:	75fb      	strb	r3, [r7, #23]
 800960e:	e00a      	b.n	8009626 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2b02      	cmp	r3, #2
 8009614:	d002      	beq.n	800961c <USB_GetDevSpeed+0x32>
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2b06      	cmp	r3, #6
 800961a:	d102      	bne.n	8009622 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800961c:	2302      	movs	r3, #2
 800961e:	75fb      	strb	r3, [r7, #23]
 8009620:	e001      	b.n	8009626 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009622:	230f      	movs	r3, #15
 8009624:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009626:	7dfb      	ldrb	r3, [r7, #23]
}
 8009628:	4618      	mov	r0, r3
 800962a:	371c      	adds	r7, #28
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr

08009634 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009634:	b480      	push	{r7}
 8009636:	b085      	sub	sp, #20
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	781b      	ldrb	r3, [r3, #0]
 8009646:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	785b      	ldrb	r3, [r3, #1]
 800964c:	2b01      	cmp	r3, #1
 800964e:	d139      	bne.n	80096c4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009656:	69da      	ldr	r2, [r3, #28]
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	f003 030f 	and.w	r3, r3, #15
 8009660:	2101      	movs	r1, #1
 8009662:	fa01 f303 	lsl.w	r3, r1, r3
 8009666:	b29b      	uxth	r3, r3
 8009668:	68f9      	ldr	r1, [r7, #12]
 800966a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800966e:	4313      	orrs	r3, r2
 8009670:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	015a      	lsls	r2, r3, #5
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	4413      	add	r3, r2
 800967a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009684:	2b00      	cmp	r3, #0
 8009686:	d153      	bne.n	8009730 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	015a      	lsls	r2, r3, #5
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	4413      	add	r3, r2
 8009690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	791b      	ldrb	r3, [r3, #4]
 80096a2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096a4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	059b      	lsls	r3, r3, #22
 80096aa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096ac:	431a      	orrs	r2, r3
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	0159      	lsls	r1, r3, #5
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	440b      	add	r3, r1
 80096b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ba:	4619      	mov	r1, r3
 80096bc:	4b20      	ldr	r3, [pc, #128]	; (8009740 <USB_ActivateEndpoint+0x10c>)
 80096be:	4313      	orrs	r3, r2
 80096c0:	600b      	str	r3, [r1, #0]
 80096c2:	e035      	b.n	8009730 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096ca:	69da      	ldr	r2, [r3, #28]
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	f003 030f 	and.w	r3, r3, #15
 80096d4:	2101      	movs	r1, #1
 80096d6:	fa01 f303 	lsl.w	r3, r1, r3
 80096da:	041b      	lsls	r3, r3, #16
 80096dc:	68f9      	ldr	r1, [r7, #12]
 80096de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096e2:	4313      	orrs	r3, r2
 80096e4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	015a      	lsls	r2, r3, #5
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	4413      	add	r3, r2
 80096ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d119      	bne.n	8009730 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	015a      	lsls	r2, r3, #5
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	4413      	add	r3, r2
 8009704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	68db      	ldr	r3, [r3, #12]
 800970e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	791b      	ldrb	r3, [r3, #4]
 8009716:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009718:	430b      	orrs	r3, r1
 800971a:	431a      	orrs	r2, r3
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	0159      	lsls	r1, r3, #5
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	440b      	add	r3, r1
 8009724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009728:	4619      	mov	r1, r3
 800972a:	4b05      	ldr	r3, [pc, #20]	; (8009740 <USB_ActivateEndpoint+0x10c>)
 800972c:	4313      	orrs	r3, r2
 800972e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009730:	2300      	movs	r3, #0
}
 8009732:	4618      	mov	r0, r3
 8009734:	3714      	adds	r7, #20
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop
 8009740:	10008000 	.word	0x10008000

08009744 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009744:	b480      	push	{r7}
 8009746:	b085      	sub	sp, #20
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	785b      	ldrb	r3, [r3, #1]
 800975c:	2b01      	cmp	r3, #1
 800975e:	d161      	bne.n	8009824 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	015a      	lsls	r2, r3, #5
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	4413      	add	r3, r2
 8009768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009772:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009776:	d11f      	bne.n	80097b8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	015a      	lsls	r2, r3, #5
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	4413      	add	r3, r2
 8009780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	68ba      	ldr	r2, [r7, #8]
 8009788:	0151      	lsls	r1, r2, #5
 800978a:	68fa      	ldr	r2, [r7, #12]
 800978c:	440a      	add	r2, r1
 800978e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009792:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009796:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	015a      	lsls	r2, r3, #5
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	4413      	add	r3, r2
 80097a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	68ba      	ldr	r2, [r7, #8]
 80097a8:	0151      	lsls	r1, r2, #5
 80097aa:	68fa      	ldr	r2, [r7, #12]
 80097ac:	440a      	add	r2, r1
 80097ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80097b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	f003 030f 	and.w	r3, r3, #15
 80097c8:	2101      	movs	r1, #1
 80097ca:	fa01 f303 	lsl.w	r3, r1, r3
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	43db      	mvns	r3, r3
 80097d2:	68f9      	ldr	r1, [r7, #12]
 80097d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097d8:	4013      	ands	r3, r2
 80097da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097e2:	69da      	ldr	r2, [r3, #28]
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	f003 030f 	and.w	r3, r3, #15
 80097ec:	2101      	movs	r1, #1
 80097ee:	fa01 f303 	lsl.w	r3, r1, r3
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	43db      	mvns	r3, r3
 80097f6:	68f9      	ldr	r1, [r7, #12]
 80097f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097fc:	4013      	ands	r3, r2
 80097fe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	015a      	lsls	r2, r3, #5
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	4413      	add	r3, r2
 8009808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	0159      	lsls	r1, r3, #5
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	440b      	add	r3, r1
 8009816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800981a:	4619      	mov	r1, r3
 800981c:	4b35      	ldr	r3, [pc, #212]	; (80098f4 <USB_DeactivateEndpoint+0x1b0>)
 800981e:	4013      	ands	r3, r2
 8009820:	600b      	str	r3, [r1, #0]
 8009822:	e060      	b.n	80098e6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	015a      	lsls	r2, r3, #5
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	4413      	add	r3, r2
 800982c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009836:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800983a:	d11f      	bne.n	800987c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	015a      	lsls	r2, r3, #5
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	4413      	add	r3, r2
 8009844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	68ba      	ldr	r2, [r7, #8]
 800984c:	0151      	lsls	r1, r2, #5
 800984e:	68fa      	ldr	r2, [r7, #12]
 8009850:	440a      	add	r2, r1
 8009852:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009856:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800985a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	015a      	lsls	r2, r3, #5
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	4413      	add	r3, r2
 8009864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	68ba      	ldr	r2, [r7, #8]
 800986c:	0151      	lsls	r1, r2, #5
 800986e:	68fa      	ldr	r2, [r7, #12]
 8009870:	440a      	add	r2, r1
 8009872:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009876:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800987a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009882:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	f003 030f 	and.w	r3, r3, #15
 800988c:	2101      	movs	r1, #1
 800988e:	fa01 f303 	lsl.w	r3, r1, r3
 8009892:	041b      	lsls	r3, r3, #16
 8009894:	43db      	mvns	r3, r3
 8009896:	68f9      	ldr	r1, [r7, #12]
 8009898:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800989c:	4013      	ands	r3, r2
 800989e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098a6:	69da      	ldr	r2, [r3, #28]
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	f003 030f 	and.w	r3, r3, #15
 80098b0:	2101      	movs	r1, #1
 80098b2:	fa01 f303 	lsl.w	r3, r1, r3
 80098b6:	041b      	lsls	r3, r3, #16
 80098b8:	43db      	mvns	r3, r3
 80098ba:	68f9      	ldr	r1, [r7, #12]
 80098bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098c0:	4013      	ands	r3, r2
 80098c2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	015a      	lsls	r2, r3, #5
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	4413      	add	r3, r2
 80098cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098d0:	681a      	ldr	r2, [r3, #0]
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	0159      	lsls	r1, r3, #5
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	440b      	add	r3, r1
 80098da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098de:	4619      	mov	r1, r3
 80098e0:	4b05      	ldr	r3, [pc, #20]	; (80098f8 <USB_DeactivateEndpoint+0x1b4>)
 80098e2:	4013      	ands	r3, r2
 80098e4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80098e6:	2300      	movs	r3, #0
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3714      	adds	r7, #20
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr
 80098f4:	ec337800 	.word	0xec337800
 80098f8:	eff37800 	.word	0xeff37800

080098fc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b08a      	sub	sp, #40	; 0x28
 8009900:	af02      	add	r7, sp, #8
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	4613      	mov	r3, r2
 8009908:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	785b      	ldrb	r3, [r3, #1]
 8009918:	2b01      	cmp	r3, #1
 800991a:	f040 8163 	bne.w	8009be4 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	699b      	ldr	r3, [r3, #24]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d132      	bne.n	800998c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009926:	69bb      	ldr	r3, [r7, #24]
 8009928:	015a      	lsls	r2, r3, #5
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	4413      	add	r3, r2
 800992e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009932:	691a      	ldr	r2, [r3, #16]
 8009934:	69bb      	ldr	r3, [r7, #24]
 8009936:	0159      	lsls	r1, r3, #5
 8009938:	69fb      	ldr	r3, [r7, #28]
 800993a:	440b      	add	r3, r1
 800993c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009940:	4619      	mov	r1, r3
 8009942:	4ba5      	ldr	r3, [pc, #660]	; (8009bd8 <USB_EPStartXfer+0x2dc>)
 8009944:	4013      	ands	r3, r2
 8009946:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	015a      	lsls	r2, r3, #5
 800994c:	69fb      	ldr	r3, [r7, #28]
 800994e:	4413      	add	r3, r2
 8009950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009954:	691b      	ldr	r3, [r3, #16]
 8009956:	69ba      	ldr	r2, [r7, #24]
 8009958:	0151      	lsls	r1, r2, #5
 800995a:	69fa      	ldr	r2, [r7, #28]
 800995c:	440a      	add	r2, r1
 800995e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009962:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009966:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009968:	69bb      	ldr	r3, [r7, #24]
 800996a:	015a      	lsls	r2, r3, #5
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	4413      	add	r3, r2
 8009970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009974:	691a      	ldr	r2, [r3, #16]
 8009976:	69bb      	ldr	r3, [r7, #24]
 8009978:	0159      	lsls	r1, r3, #5
 800997a:	69fb      	ldr	r3, [r7, #28]
 800997c:	440b      	add	r3, r1
 800997e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009982:	4619      	mov	r1, r3
 8009984:	4b95      	ldr	r3, [pc, #596]	; (8009bdc <USB_EPStartXfer+0x2e0>)
 8009986:	4013      	ands	r3, r2
 8009988:	610b      	str	r3, [r1, #16]
 800998a:	e074      	b.n	8009a76 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800998c:	69bb      	ldr	r3, [r7, #24]
 800998e:	015a      	lsls	r2, r3, #5
 8009990:	69fb      	ldr	r3, [r7, #28]
 8009992:	4413      	add	r3, r2
 8009994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009998:	691a      	ldr	r2, [r3, #16]
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	0159      	lsls	r1, r3, #5
 800999e:	69fb      	ldr	r3, [r7, #28]
 80099a0:	440b      	add	r3, r1
 80099a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099a6:	4619      	mov	r1, r3
 80099a8:	4b8c      	ldr	r3, [pc, #560]	; (8009bdc <USB_EPStartXfer+0x2e0>)
 80099aa:	4013      	ands	r3, r2
 80099ac:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80099ae:	69bb      	ldr	r3, [r7, #24]
 80099b0:	015a      	lsls	r2, r3, #5
 80099b2:	69fb      	ldr	r3, [r7, #28]
 80099b4:	4413      	add	r3, r2
 80099b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099ba:	691a      	ldr	r2, [r3, #16]
 80099bc:	69bb      	ldr	r3, [r7, #24]
 80099be:	0159      	lsls	r1, r3, #5
 80099c0:	69fb      	ldr	r3, [r7, #28]
 80099c2:	440b      	add	r3, r1
 80099c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099c8:	4619      	mov	r1, r3
 80099ca:	4b83      	ldr	r3, [pc, #524]	; (8009bd8 <USB_EPStartXfer+0x2dc>)
 80099cc:	4013      	ands	r3, r2
 80099ce:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80099d0:	69bb      	ldr	r3, [r7, #24]
 80099d2:	015a      	lsls	r2, r3, #5
 80099d4:	69fb      	ldr	r3, [r7, #28]
 80099d6:	4413      	add	r3, r2
 80099d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099dc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	6999      	ldr	r1, [r3, #24]
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	68db      	ldr	r3, [r3, #12]
 80099e6:	440b      	add	r3, r1
 80099e8:	1e59      	subs	r1, r3, #1
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	68db      	ldr	r3, [r3, #12]
 80099ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80099f2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80099f4:	4b7a      	ldr	r3, [pc, #488]	; (8009be0 <USB_EPStartXfer+0x2e4>)
 80099f6:	400b      	ands	r3, r1
 80099f8:	69b9      	ldr	r1, [r7, #24]
 80099fa:	0148      	lsls	r0, r1, #5
 80099fc:	69f9      	ldr	r1, [r7, #28]
 80099fe:	4401      	add	r1, r0
 8009a00:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009a04:	4313      	orrs	r3, r2
 8009a06:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009a08:	69bb      	ldr	r3, [r7, #24]
 8009a0a:	015a      	lsls	r2, r3, #5
 8009a0c:	69fb      	ldr	r3, [r7, #28]
 8009a0e:	4413      	add	r3, r2
 8009a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a14:	691a      	ldr	r2, [r3, #16]
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	699b      	ldr	r3, [r3, #24]
 8009a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a1e:	69b9      	ldr	r1, [r7, #24]
 8009a20:	0148      	lsls	r0, r1, #5
 8009a22:	69f9      	ldr	r1, [r7, #28]
 8009a24:	4401      	add	r1, r0
 8009a26:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	791b      	ldrb	r3, [r3, #4]
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d11f      	bne.n	8009a76 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009a36:	69bb      	ldr	r3, [r7, #24]
 8009a38:	015a      	lsls	r2, r3, #5
 8009a3a:	69fb      	ldr	r3, [r7, #28]
 8009a3c:	4413      	add	r3, r2
 8009a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a42:	691b      	ldr	r3, [r3, #16]
 8009a44:	69ba      	ldr	r2, [r7, #24]
 8009a46:	0151      	lsls	r1, r2, #5
 8009a48:	69fa      	ldr	r2, [r7, #28]
 8009a4a:	440a      	add	r2, r1
 8009a4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a50:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009a54:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009a56:	69bb      	ldr	r3, [r7, #24]
 8009a58:	015a      	lsls	r2, r3, #5
 8009a5a:	69fb      	ldr	r3, [r7, #28]
 8009a5c:	4413      	add	r3, r2
 8009a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a62:	691b      	ldr	r3, [r3, #16]
 8009a64:	69ba      	ldr	r2, [r7, #24]
 8009a66:	0151      	lsls	r1, r2, #5
 8009a68:	69fa      	ldr	r2, [r7, #28]
 8009a6a:	440a      	add	r2, r1
 8009a6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009a74:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009a76:	79fb      	ldrb	r3, [r7, #7]
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d14b      	bne.n	8009b14 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	695b      	ldr	r3, [r3, #20]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d009      	beq.n	8009a98 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009a84:	69bb      	ldr	r3, [r7, #24]
 8009a86:	015a      	lsls	r2, r3, #5
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	4413      	add	r3, r2
 8009a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a90:	461a      	mov	r2, r3
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	695b      	ldr	r3, [r3, #20]
 8009a96:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	791b      	ldrb	r3, [r3, #4]
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d128      	bne.n	8009af2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d110      	bne.n	8009ad2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009ab0:	69bb      	ldr	r3, [r7, #24]
 8009ab2:	015a      	lsls	r2, r3, #5
 8009ab4:	69fb      	ldr	r3, [r7, #28]
 8009ab6:	4413      	add	r3, r2
 8009ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	69ba      	ldr	r2, [r7, #24]
 8009ac0:	0151      	lsls	r1, r2, #5
 8009ac2:	69fa      	ldr	r2, [r7, #28]
 8009ac4:	440a      	add	r2, r1
 8009ac6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009aca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009ace:	6013      	str	r3, [r2, #0]
 8009ad0:	e00f      	b.n	8009af2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009ad2:	69bb      	ldr	r3, [r7, #24]
 8009ad4:	015a      	lsls	r2, r3, #5
 8009ad6:	69fb      	ldr	r3, [r7, #28]
 8009ad8:	4413      	add	r3, r2
 8009ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	69ba      	ldr	r2, [r7, #24]
 8009ae2:	0151      	lsls	r1, r2, #5
 8009ae4:	69fa      	ldr	r2, [r7, #28]
 8009ae6:	440a      	add	r2, r1
 8009ae8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009af0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009af2:	69bb      	ldr	r3, [r7, #24]
 8009af4:	015a      	lsls	r2, r3, #5
 8009af6:	69fb      	ldr	r3, [r7, #28]
 8009af8:	4413      	add	r3, r2
 8009afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	69ba      	ldr	r2, [r7, #24]
 8009b02:	0151      	lsls	r1, r2, #5
 8009b04:	69fa      	ldr	r2, [r7, #28]
 8009b06:	440a      	add	r2, r1
 8009b08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b10:	6013      	str	r3, [r2, #0]
 8009b12:	e137      	b.n	8009d84 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b14:	69bb      	ldr	r3, [r7, #24]
 8009b16:	015a      	lsls	r2, r3, #5
 8009b18:	69fb      	ldr	r3, [r7, #28]
 8009b1a:	4413      	add	r3, r2
 8009b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	69ba      	ldr	r2, [r7, #24]
 8009b24:	0151      	lsls	r1, r2, #5
 8009b26:	69fa      	ldr	r2, [r7, #28]
 8009b28:	440a      	add	r2, r1
 8009b2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b32:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	791b      	ldrb	r3, [r3, #4]
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d015      	beq.n	8009b68 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	699b      	ldr	r3, [r3, #24]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	f000 811f 	beq.w	8009d84 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009b46:	69fb      	ldr	r3, [r7, #28]
 8009b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	f003 030f 	and.w	r3, r3, #15
 8009b56:	2101      	movs	r1, #1
 8009b58:	fa01 f303 	lsl.w	r3, r1, r3
 8009b5c:	69f9      	ldr	r1, [r7, #28]
 8009b5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b62:	4313      	orrs	r3, r2
 8009b64:	634b      	str	r3, [r1, #52]	; 0x34
 8009b66:	e10d      	b.n	8009d84 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d110      	bne.n	8009b9a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	015a      	lsls	r2, r3, #5
 8009b7c:	69fb      	ldr	r3, [r7, #28]
 8009b7e:	4413      	add	r3, r2
 8009b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	69ba      	ldr	r2, [r7, #24]
 8009b88:	0151      	lsls	r1, r2, #5
 8009b8a:	69fa      	ldr	r2, [r7, #28]
 8009b8c:	440a      	add	r2, r1
 8009b8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009b96:	6013      	str	r3, [r2, #0]
 8009b98:	e00f      	b.n	8009bba <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009b9a:	69bb      	ldr	r3, [r7, #24]
 8009b9c:	015a      	lsls	r2, r3, #5
 8009b9e:	69fb      	ldr	r3, [r7, #28]
 8009ba0:	4413      	add	r3, r2
 8009ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	69ba      	ldr	r2, [r7, #24]
 8009baa:	0151      	lsls	r1, r2, #5
 8009bac:	69fa      	ldr	r2, [r7, #28]
 8009bae:	440a      	add	r2, r1
 8009bb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bb8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	6919      	ldr	r1, [r3, #16]
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	781a      	ldrb	r2, [r3, #0]
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	699b      	ldr	r3, [r3, #24]
 8009bc6:	b298      	uxth	r0, r3
 8009bc8:	79fb      	ldrb	r3, [r7, #7]
 8009bca:	9300      	str	r3, [sp, #0]
 8009bcc:	4603      	mov	r3, r0
 8009bce:	68f8      	ldr	r0, [r7, #12]
 8009bd0:	f000 faea 	bl	800a1a8 <USB_WritePacket>
 8009bd4:	e0d6      	b.n	8009d84 <USB_EPStartXfer+0x488>
 8009bd6:	bf00      	nop
 8009bd8:	e007ffff 	.word	0xe007ffff
 8009bdc:	fff80000 	.word	0xfff80000
 8009be0:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009be4:	69bb      	ldr	r3, [r7, #24]
 8009be6:	015a      	lsls	r2, r3, #5
 8009be8:	69fb      	ldr	r3, [r7, #28]
 8009bea:	4413      	add	r3, r2
 8009bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bf0:	691a      	ldr	r2, [r3, #16]
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	0159      	lsls	r1, r3, #5
 8009bf6:	69fb      	ldr	r3, [r7, #28]
 8009bf8:	440b      	add	r3, r1
 8009bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bfe:	4619      	mov	r1, r3
 8009c00:	4b63      	ldr	r3, [pc, #396]	; (8009d90 <USB_EPStartXfer+0x494>)
 8009c02:	4013      	ands	r3, r2
 8009c04:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009c06:	69bb      	ldr	r3, [r7, #24]
 8009c08:	015a      	lsls	r2, r3, #5
 8009c0a:	69fb      	ldr	r3, [r7, #28]
 8009c0c:	4413      	add	r3, r2
 8009c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c12:	691a      	ldr	r2, [r3, #16]
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	0159      	lsls	r1, r3, #5
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	440b      	add	r3, r1
 8009c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c20:	4619      	mov	r1, r3
 8009c22:	4b5c      	ldr	r3, [pc, #368]	; (8009d94 <USB_EPStartXfer+0x498>)
 8009c24:	4013      	ands	r3, r2
 8009c26:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	699b      	ldr	r3, [r3, #24]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d123      	bne.n	8009c78 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	015a      	lsls	r2, r3, #5
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	4413      	add	r3, r2
 8009c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c3c:	691a      	ldr	r2, [r3, #16]
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	68db      	ldr	r3, [r3, #12]
 8009c42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c46:	69b9      	ldr	r1, [r7, #24]
 8009c48:	0148      	lsls	r0, r1, #5
 8009c4a:	69f9      	ldr	r1, [r7, #28]
 8009c4c:	4401      	add	r1, r0
 8009c4e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009c52:	4313      	orrs	r3, r2
 8009c54:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009c56:	69bb      	ldr	r3, [r7, #24]
 8009c58:	015a      	lsls	r2, r3, #5
 8009c5a:	69fb      	ldr	r3, [r7, #28]
 8009c5c:	4413      	add	r3, r2
 8009c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c62:	691b      	ldr	r3, [r3, #16]
 8009c64:	69ba      	ldr	r2, [r7, #24]
 8009c66:	0151      	lsls	r1, r2, #5
 8009c68:	69fa      	ldr	r2, [r7, #28]
 8009c6a:	440a      	add	r2, r1
 8009c6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c74:	6113      	str	r3, [r2, #16]
 8009c76:	e037      	b.n	8009ce8 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	699a      	ldr	r2, [r3, #24]
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	4413      	add	r3, r2
 8009c82:	1e5a      	subs	r2, r3, #1
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c8c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	68db      	ldr	r3, [r3, #12]
 8009c92:	8afa      	ldrh	r2, [r7, #22]
 8009c94:	fb03 f202 	mul.w	r2, r3, r2
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009c9c:	69bb      	ldr	r3, [r7, #24]
 8009c9e:	015a      	lsls	r2, r3, #5
 8009ca0:	69fb      	ldr	r3, [r7, #28]
 8009ca2:	4413      	add	r3, r2
 8009ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ca8:	691a      	ldr	r2, [r3, #16]
 8009caa:	8afb      	ldrh	r3, [r7, #22]
 8009cac:	04d9      	lsls	r1, r3, #19
 8009cae:	4b3a      	ldr	r3, [pc, #232]	; (8009d98 <USB_EPStartXfer+0x49c>)
 8009cb0:	400b      	ands	r3, r1
 8009cb2:	69b9      	ldr	r1, [r7, #24]
 8009cb4:	0148      	lsls	r0, r1, #5
 8009cb6:	69f9      	ldr	r1, [r7, #28]
 8009cb8:	4401      	add	r1, r0
 8009cba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009cc2:	69bb      	ldr	r3, [r7, #24]
 8009cc4:	015a      	lsls	r2, r3, #5
 8009cc6:	69fb      	ldr	r3, [r7, #28]
 8009cc8:	4413      	add	r3, r2
 8009cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cce:	691a      	ldr	r2, [r3, #16]
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	69db      	ldr	r3, [r3, #28]
 8009cd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cd8:	69b9      	ldr	r1, [r7, #24]
 8009cda:	0148      	lsls	r0, r1, #5
 8009cdc:	69f9      	ldr	r1, [r7, #28]
 8009cde:	4401      	add	r1, r0
 8009ce0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009ce8:	79fb      	ldrb	r3, [r7, #7]
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d10d      	bne.n	8009d0a <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	691b      	ldr	r3, [r3, #16]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d009      	beq.n	8009d0a <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	6919      	ldr	r1, [r3, #16]
 8009cfa:	69bb      	ldr	r3, [r7, #24]
 8009cfc:	015a      	lsls	r2, r3, #5
 8009cfe:	69fb      	ldr	r3, [r7, #28]
 8009d00:	4413      	add	r3, r2
 8009d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d06:	460a      	mov	r2, r1
 8009d08:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	791b      	ldrb	r3, [r3, #4]
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d128      	bne.n	8009d64 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d110      	bne.n	8009d44 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009d22:	69bb      	ldr	r3, [r7, #24]
 8009d24:	015a      	lsls	r2, r3, #5
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	4413      	add	r3, r2
 8009d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	69ba      	ldr	r2, [r7, #24]
 8009d32:	0151      	lsls	r1, r2, #5
 8009d34:	69fa      	ldr	r2, [r7, #28]
 8009d36:	440a      	add	r2, r1
 8009d38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009d40:	6013      	str	r3, [r2, #0]
 8009d42:	e00f      	b.n	8009d64 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009d44:	69bb      	ldr	r3, [r7, #24]
 8009d46:	015a      	lsls	r2, r3, #5
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	4413      	add	r3, r2
 8009d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	69ba      	ldr	r2, [r7, #24]
 8009d54:	0151      	lsls	r1, r2, #5
 8009d56:	69fa      	ldr	r2, [r7, #28]
 8009d58:	440a      	add	r2, r1
 8009d5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d62:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009d64:	69bb      	ldr	r3, [r7, #24]
 8009d66:	015a      	lsls	r2, r3, #5
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	69ba      	ldr	r2, [r7, #24]
 8009d74:	0151      	lsls	r1, r2, #5
 8009d76:	69fa      	ldr	r2, [r7, #28]
 8009d78:	440a      	add	r2, r1
 8009d7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009d82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3720      	adds	r7, #32
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	fff80000 	.word	0xfff80000
 8009d94:	e007ffff 	.word	0xe007ffff
 8009d98:	1ff80000 	.word	0x1ff80000

08009d9c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b087      	sub	sp, #28
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	60b9      	str	r1, [r7, #8]
 8009da6:	4613      	mov	r3, r2
 8009da8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	785b      	ldrb	r3, [r3, #1]
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	f040 80ce 	bne.w	8009f5a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	699b      	ldr	r3, [r3, #24]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d132      	bne.n	8009e2c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	015a      	lsls	r2, r3, #5
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	4413      	add	r3, r2
 8009dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dd2:	691a      	ldr	r2, [r3, #16]
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	0159      	lsls	r1, r3, #5
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	440b      	add	r3, r1
 8009ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009de0:	4619      	mov	r1, r3
 8009de2:	4b9a      	ldr	r3, [pc, #616]	; (800a04c <USB_EP0StartXfer+0x2b0>)
 8009de4:	4013      	ands	r3, r2
 8009de6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	015a      	lsls	r2, r3, #5
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	4413      	add	r3, r2
 8009df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009df4:	691b      	ldr	r3, [r3, #16]
 8009df6:	693a      	ldr	r2, [r7, #16]
 8009df8:	0151      	lsls	r1, r2, #5
 8009dfa:	697a      	ldr	r2, [r7, #20]
 8009dfc:	440a      	add	r2, r1
 8009dfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	015a      	lsls	r2, r3, #5
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	4413      	add	r3, r2
 8009e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e14:	691a      	ldr	r2, [r3, #16]
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	0159      	lsls	r1, r3, #5
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	440b      	add	r3, r1
 8009e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e22:	4619      	mov	r1, r3
 8009e24:	4b8a      	ldr	r3, [pc, #552]	; (800a050 <USB_EP0StartXfer+0x2b4>)
 8009e26:	4013      	ands	r3, r2
 8009e28:	610b      	str	r3, [r1, #16]
 8009e2a:	e04e      	b.n	8009eca <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	015a      	lsls	r2, r3, #5
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	4413      	add	r3, r2
 8009e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e38:	691a      	ldr	r2, [r3, #16]
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	0159      	lsls	r1, r3, #5
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	440b      	add	r3, r1
 8009e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e46:	4619      	mov	r1, r3
 8009e48:	4b81      	ldr	r3, [pc, #516]	; (800a050 <USB_EP0StartXfer+0x2b4>)
 8009e4a:	4013      	ands	r3, r2
 8009e4c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	015a      	lsls	r2, r3, #5
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	4413      	add	r3, r2
 8009e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e5a:	691a      	ldr	r2, [r3, #16]
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	0159      	lsls	r1, r3, #5
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	440b      	add	r3, r1
 8009e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e68:	4619      	mov	r1, r3
 8009e6a:	4b78      	ldr	r3, [pc, #480]	; (800a04c <USB_EP0StartXfer+0x2b0>)
 8009e6c:	4013      	ands	r3, r2
 8009e6e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	699a      	ldr	r2, [r3, #24]
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d903      	bls.n	8009e84 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	68da      	ldr	r2, [r3, #12]
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	015a      	lsls	r2, r3, #5
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	4413      	add	r3, r2
 8009e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e90:	691b      	ldr	r3, [r3, #16]
 8009e92:	693a      	ldr	r2, [r7, #16]
 8009e94:	0151      	lsls	r1, r2, #5
 8009e96:	697a      	ldr	r2, [r7, #20]
 8009e98:	440a      	add	r2, r1
 8009e9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ea2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	015a      	lsls	r2, r3, #5
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	4413      	add	r3, r2
 8009eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eb0:	691a      	ldr	r2, [r3, #16]
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	699b      	ldr	r3, [r3, #24]
 8009eb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009eba:	6939      	ldr	r1, [r7, #16]
 8009ebc:	0148      	lsls	r0, r1, #5
 8009ebe:	6979      	ldr	r1, [r7, #20]
 8009ec0:	4401      	add	r1, r0
 8009ec2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009eca:	79fb      	ldrb	r3, [r7, #7]
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d11e      	bne.n	8009f0e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	695b      	ldr	r3, [r3, #20]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d009      	beq.n	8009eec <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	015a      	lsls	r2, r3, #5
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	4413      	add	r3, r2
 8009ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	695b      	ldr	r3, [r3, #20]
 8009eea:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	015a      	lsls	r2, r3, #5
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	4413      	add	r3, r2
 8009ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	693a      	ldr	r2, [r7, #16]
 8009efc:	0151      	lsls	r1, r2, #5
 8009efe:	697a      	ldr	r2, [r7, #20]
 8009f00:	440a      	add	r2, r1
 8009f02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009f0a:	6013      	str	r3, [r2, #0]
 8009f0c:	e097      	b.n	800a03e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	015a      	lsls	r2, r3, #5
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	4413      	add	r3, r2
 8009f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	693a      	ldr	r2, [r7, #16]
 8009f1e:	0151      	lsls	r1, r2, #5
 8009f20:	697a      	ldr	r2, [r7, #20]
 8009f22:	440a      	add	r2, r1
 8009f24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f28:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009f2c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	699b      	ldr	r3, [r3, #24]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	f000 8083 	beq.w	800a03e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	f003 030f 	and.w	r3, r3, #15
 8009f48:	2101      	movs	r1, #1
 8009f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8009f4e:	6979      	ldr	r1, [r7, #20]
 8009f50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f54:	4313      	orrs	r3, r2
 8009f56:	634b      	str	r3, [r1, #52]	; 0x34
 8009f58:	e071      	b.n	800a03e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	015a      	lsls	r2, r3, #5
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	4413      	add	r3, r2
 8009f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f66:	691a      	ldr	r2, [r3, #16]
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	0159      	lsls	r1, r3, #5
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	440b      	add	r3, r1
 8009f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f74:	4619      	mov	r1, r3
 8009f76:	4b36      	ldr	r3, [pc, #216]	; (800a050 <USB_EP0StartXfer+0x2b4>)
 8009f78:	4013      	ands	r3, r2
 8009f7a:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	015a      	lsls	r2, r3, #5
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	4413      	add	r3, r2
 8009f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f88:	691a      	ldr	r2, [r3, #16]
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	0159      	lsls	r1, r3, #5
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	440b      	add	r3, r1
 8009f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f96:	4619      	mov	r1, r3
 8009f98:	4b2c      	ldr	r3, [pc, #176]	; (800a04c <USB_EP0StartXfer+0x2b0>)
 8009f9a:	4013      	ands	r3, r2
 8009f9c:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	699b      	ldr	r3, [r3, #24]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d003      	beq.n	8009fae <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	68da      	ldr	r2, [r3, #12]
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	68da      	ldr	r2, [r3, #12]
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	015a      	lsls	r2, r3, #5
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	4413      	add	r3, r2
 8009fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fc2:	691b      	ldr	r3, [r3, #16]
 8009fc4:	693a      	ldr	r2, [r7, #16]
 8009fc6:	0151      	lsls	r1, r2, #5
 8009fc8:	697a      	ldr	r2, [r7, #20]
 8009fca:	440a      	add	r2, r1
 8009fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009fd4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	015a      	lsls	r2, r3, #5
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	4413      	add	r3, r2
 8009fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fe2:	691a      	ldr	r2, [r3, #16]
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	69db      	ldr	r3, [r3, #28]
 8009fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fec:	6939      	ldr	r1, [r7, #16]
 8009fee:	0148      	lsls	r0, r1, #5
 8009ff0:	6979      	ldr	r1, [r7, #20]
 8009ff2:	4401      	add	r1, r0
 8009ff4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009ffc:	79fb      	ldrb	r3, [r7, #7]
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d10d      	bne.n	800a01e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	691b      	ldr	r3, [r3, #16]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d009      	beq.n	800a01e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	6919      	ldr	r1, [r3, #16]
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	015a      	lsls	r2, r3, #5
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	4413      	add	r3, r2
 800a016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a01a:	460a      	mov	r2, r1
 800a01c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	015a      	lsls	r2, r3, #5
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	4413      	add	r3, r2
 800a026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	693a      	ldr	r2, [r7, #16]
 800a02e:	0151      	lsls	r1, r2, #5
 800a030:	697a      	ldr	r2, [r7, #20]
 800a032:	440a      	add	r2, r1
 800a034:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a038:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a03c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a03e:	2300      	movs	r3, #0
}
 800a040:	4618      	mov	r0, r3
 800a042:	371c      	adds	r7, #28
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr
 800a04c:	e007ffff 	.word	0xe007ffff
 800a050:	fff80000 	.word	0xfff80000

0800a054 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a054:	b480      	push	{r7}
 800a056:	b087      	sub	sp, #28
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a05e:	2300      	movs	r3, #0
 800a060:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a062:	2300      	movs	r3, #0
 800a064:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	785b      	ldrb	r3, [r3, #1]
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d14a      	bne.n	800a108 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	015a      	lsls	r2, r3, #5
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	4413      	add	r3, r2
 800a07c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a086:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a08a:	f040 8086 	bne.w	800a19a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	015a      	lsls	r2, r3, #5
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	4413      	add	r3, r2
 800a098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	683a      	ldr	r2, [r7, #0]
 800a0a0:	7812      	ldrb	r2, [r2, #0]
 800a0a2:	0151      	lsls	r1, r2, #5
 800a0a4:	693a      	ldr	r2, [r7, #16]
 800a0a6:	440a      	add	r2, r1
 800a0a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a0b0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	781b      	ldrb	r3, [r3, #0]
 800a0b6:	015a      	lsls	r2, r3, #5
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	4413      	add	r3, r2
 800a0bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	683a      	ldr	r2, [r7, #0]
 800a0c4:	7812      	ldrb	r2, [r2, #0]
 800a0c6:	0151      	lsls	r1, r2, #5
 800a0c8:	693a      	ldr	r2, [r7, #16]
 800a0ca:	440a      	add	r2, r1
 800a0cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a0d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	3301      	adds	r3, #1
 800a0da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f242 7210 	movw	r2, #10000	; 0x2710
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d902      	bls.n	800a0ec <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	75fb      	strb	r3, [r7, #23]
          break;
 800a0ea:	e056      	b.n	800a19a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	015a      	lsls	r2, r3, #5
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	4413      	add	r3, r2
 800a0f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a100:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a104:	d0e7      	beq.n	800a0d6 <USB_EPStopXfer+0x82>
 800a106:	e048      	b.n	800a19a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	015a      	lsls	r2, r3, #5
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	4413      	add	r3, r2
 800a112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a11c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a120:	d13b      	bne.n	800a19a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	015a      	lsls	r2, r3, #5
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	4413      	add	r3, r2
 800a12c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	683a      	ldr	r2, [r7, #0]
 800a134:	7812      	ldrb	r2, [r2, #0]
 800a136:	0151      	lsls	r1, r2, #5
 800a138:	693a      	ldr	r2, [r7, #16]
 800a13a:	440a      	add	r2, r1
 800a13c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a140:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a144:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	015a      	lsls	r2, r3, #5
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	4413      	add	r3, r2
 800a150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	683a      	ldr	r2, [r7, #0]
 800a158:	7812      	ldrb	r2, [r2, #0]
 800a15a:	0151      	lsls	r1, r2, #5
 800a15c:	693a      	ldr	r2, [r7, #16]
 800a15e:	440a      	add	r2, r1
 800a160:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a164:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a168:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	3301      	adds	r3, #1
 800a16e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f242 7210 	movw	r2, #10000	; 0x2710
 800a176:	4293      	cmp	r3, r2
 800a178:	d902      	bls.n	800a180 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a17a:	2301      	movs	r3, #1
 800a17c:	75fb      	strb	r3, [r7, #23]
          break;
 800a17e:	e00c      	b.n	800a19a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	015a      	lsls	r2, r3, #5
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	4413      	add	r3, r2
 800a18a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a194:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a198:	d0e7      	beq.n	800a16a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a19a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	371c      	adds	r7, #28
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr

0800a1a8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b089      	sub	sp, #36	; 0x24
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	60b9      	str	r1, [r7, #8]
 800a1b2:	4611      	mov	r1, r2
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	71fb      	strb	r3, [r7, #7]
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a1c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d123      	bne.n	800a216 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a1ce:	88bb      	ldrh	r3, [r7, #4]
 800a1d0:	3303      	adds	r3, #3
 800a1d2:	089b      	lsrs	r3, r3, #2
 800a1d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	61bb      	str	r3, [r7, #24]
 800a1da:	e018      	b.n	800a20e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a1dc:	79fb      	ldrb	r3, [r7, #7]
 800a1de:	031a      	lsls	r2, r3, #12
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	4413      	add	r3, r2
 800a1e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	69fb      	ldr	r3, [r7, #28]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a1f0:	69fb      	ldr	r3, [r7, #28]
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a1f6:	69fb      	ldr	r3, [r7, #28]
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a1fc:	69fb      	ldr	r3, [r7, #28]
 800a1fe:	3301      	adds	r3, #1
 800a200:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a202:	69fb      	ldr	r3, [r7, #28]
 800a204:	3301      	adds	r3, #1
 800a206:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a208:	69bb      	ldr	r3, [r7, #24]
 800a20a:	3301      	adds	r3, #1
 800a20c:	61bb      	str	r3, [r7, #24]
 800a20e:	69ba      	ldr	r2, [r7, #24]
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	429a      	cmp	r2, r3
 800a214:	d3e2      	bcc.n	800a1dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a216:	2300      	movs	r3, #0
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3724      	adds	r7, #36	; 0x24
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a224:	b480      	push	{r7}
 800a226:	b08b      	sub	sp, #44	; 0x2c
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	4613      	mov	r3, r2
 800a230:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a23a:	88fb      	ldrh	r3, [r7, #6]
 800a23c:	089b      	lsrs	r3, r3, #2
 800a23e:	b29b      	uxth	r3, r3
 800a240:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a242:	88fb      	ldrh	r3, [r7, #6]
 800a244:	f003 0303 	and.w	r3, r3, #3
 800a248:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a24a:	2300      	movs	r3, #0
 800a24c:	623b      	str	r3, [r7, #32]
 800a24e:	e014      	b.n	800a27a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a256:	681a      	ldr	r2, [r3, #0]
 800a258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25a:	601a      	str	r2, [r3, #0]
    pDest++;
 800a25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25e:	3301      	adds	r3, #1
 800a260:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a264:	3301      	adds	r3, #1
 800a266:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26a:	3301      	adds	r3, #1
 800a26c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a270:	3301      	adds	r3, #1
 800a272:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a274:	6a3b      	ldr	r3, [r7, #32]
 800a276:	3301      	adds	r3, #1
 800a278:	623b      	str	r3, [r7, #32]
 800a27a:	6a3a      	ldr	r2, [r7, #32]
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	429a      	cmp	r2, r3
 800a280:	d3e6      	bcc.n	800a250 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a282:	8bfb      	ldrh	r3, [r7, #30]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d01e      	beq.n	800a2c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a288:	2300      	movs	r3, #0
 800a28a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a28c:	69bb      	ldr	r3, [r7, #24]
 800a28e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a292:	461a      	mov	r2, r3
 800a294:	f107 0310 	add.w	r3, r7, #16
 800a298:	6812      	ldr	r2, [r2, #0]
 800a29a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a29c:	693a      	ldr	r2, [r7, #16]
 800a29e:	6a3b      	ldr	r3, [r7, #32]
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	00db      	lsls	r3, r3, #3
 800a2a4:	fa22 f303 	lsr.w	r3, r2, r3
 800a2a8:	b2da      	uxtb	r2, r3
 800a2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ac:	701a      	strb	r2, [r3, #0]
      i++;
 800a2ae:	6a3b      	ldr	r3, [r7, #32]
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	623b      	str	r3, [r7, #32]
      pDest++;
 800a2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a2ba:	8bfb      	ldrh	r3, [r7, #30]
 800a2bc:	3b01      	subs	r3, #1
 800a2be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a2c0:	8bfb      	ldrh	r3, [r7, #30]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d1ea      	bne.n	800a29c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	372c      	adds	r7, #44	; 0x2c
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b085      	sub	sp, #20
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	785b      	ldrb	r3, [r3, #1]
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d12c      	bne.n	800a34a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	015a      	lsls	r2, r3, #5
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	4413      	add	r3, r2
 800a2f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	db12      	blt.n	800a328 <USB_EPSetStall+0x54>
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d00f      	beq.n	800a328 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	015a      	lsls	r2, r3, #5
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	4413      	add	r3, r2
 800a310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	68ba      	ldr	r2, [r7, #8]
 800a318:	0151      	lsls	r1, r2, #5
 800a31a:	68fa      	ldr	r2, [r7, #12]
 800a31c:	440a      	add	r2, r1
 800a31e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a322:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a326:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	015a      	lsls	r2, r3, #5
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	4413      	add	r3, r2
 800a330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	68ba      	ldr	r2, [r7, #8]
 800a338:	0151      	lsls	r1, r2, #5
 800a33a:	68fa      	ldr	r2, [r7, #12]
 800a33c:	440a      	add	r2, r1
 800a33e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a342:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a346:	6013      	str	r3, [r2, #0]
 800a348:	e02b      	b.n	800a3a2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	015a      	lsls	r2, r3, #5
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	4413      	add	r3, r2
 800a352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	db12      	blt.n	800a382 <USB_EPSetStall+0xae>
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d00f      	beq.n	800a382 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	015a      	lsls	r2, r3, #5
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	4413      	add	r3, r2
 800a36a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	68ba      	ldr	r2, [r7, #8]
 800a372:	0151      	lsls	r1, r2, #5
 800a374:	68fa      	ldr	r2, [r7, #12]
 800a376:	440a      	add	r2, r1
 800a378:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a37c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a380:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	015a      	lsls	r2, r3, #5
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	4413      	add	r3, r2
 800a38a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	68ba      	ldr	r2, [r7, #8]
 800a392:	0151      	lsls	r1, r2, #5
 800a394:	68fa      	ldr	r2, [r7, #12]
 800a396:	440a      	add	r2, r1
 800a398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a39c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a3a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a3a2:	2300      	movs	r3, #0
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3714      	adds	r7, #20
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b085      	sub	sp, #20
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	785b      	ldrb	r3, [r3, #1]
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d128      	bne.n	800a41e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	015a      	lsls	r2, r3, #5
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	4413      	add	r3, r2
 800a3d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	68ba      	ldr	r2, [r7, #8]
 800a3dc:	0151      	lsls	r1, r2, #5
 800a3de:	68fa      	ldr	r2, [r7, #12]
 800a3e0:	440a      	add	r2, r1
 800a3e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a3ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	791b      	ldrb	r3, [r3, #4]
 800a3f0:	2b03      	cmp	r3, #3
 800a3f2:	d003      	beq.n	800a3fc <USB_EPClearStall+0x4c>
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	791b      	ldrb	r3, [r3, #4]
 800a3f8:	2b02      	cmp	r3, #2
 800a3fa:	d138      	bne.n	800a46e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	015a      	lsls	r2, r3, #5
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	4413      	add	r3, r2
 800a404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	68ba      	ldr	r2, [r7, #8]
 800a40c:	0151      	lsls	r1, r2, #5
 800a40e:	68fa      	ldr	r2, [r7, #12]
 800a410:	440a      	add	r2, r1
 800a412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a41a:	6013      	str	r3, [r2, #0]
 800a41c:	e027      	b.n	800a46e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	015a      	lsls	r2, r3, #5
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	4413      	add	r3, r2
 800a426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	68ba      	ldr	r2, [r7, #8]
 800a42e:	0151      	lsls	r1, r2, #5
 800a430:	68fa      	ldr	r2, [r7, #12]
 800a432:	440a      	add	r2, r1
 800a434:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a438:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a43c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	791b      	ldrb	r3, [r3, #4]
 800a442:	2b03      	cmp	r3, #3
 800a444:	d003      	beq.n	800a44e <USB_EPClearStall+0x9e>
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	791b      	ldrb	r3, [r3, #4]
 800a44a:	2b02      	cmp	r3, #2
 800a44c:	d10f      	bne.n	800a46e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	015a      	lsls	r2, r3, #5
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	4413      	add	r3, r2
 800a456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	68ba      	ldr	r2, [r7, #8]
 800a45e:	0151      	lsls	r1, r2, #5
 800a460:	68fa      	ldr	r2, [r7, #12]
 800a462:	440a      	add	r2, r1
 800a464:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a46c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a46e:	2300      	movs	r3, #0
}
 800a470:	4618      	mov	r0, r3
 800a472:	3714      	adds	r7, #20
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr

0800a47c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b085      	sub	sp, #20
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	460b      	mov	r3, r1
 800a486:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	68fa      	ldr	r2, [r7, #12]
 800a496:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a49a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a49e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	78fb      	ldrb	r3, [r7, #3]
 800a4aa:	011b      	lsls	r3, r3, #4
 800a4ac:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a4b0:	68f9      	ldr	r1, [r7, #12]
 800a4b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a4ba:	2300      	movs	r3, #0
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3714      	adds	r7, #20
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr

0800a4c8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b085      	sub	sp, #20
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	68fa      	ldr	r2, [r7, #12]
 800a4de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a4e2:	f023 0303 	bic.w	r3, r3, #3
 800a4e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	68fa      	ldr	r2, [r7, #12]
 800a4f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a4f6:	f023 0302 	bic.w	r3, r3, #2
 800a4fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a4fc:	2300      	movs	r3, #0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3714      	adds	r7, #20
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr

0800a50a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a50a:	b480      	push	{r7}
 800a50c:	b085      	sub	sp, #20
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	68fa      	ldr	r2, [r7, #12]
 800a520:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a524:	f023 0303 	bic.w	r3, r3, #3
 800a528:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	68fa      	ldr	r2, [r7, #12]
 800a534:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a538:	f043 0302 	orr.w	r3, r3, #2
 800a53c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a53e:	2300      	movs	r3, #0
}
 800a540:	4618      	mov	r0, r3
 800a542:	3714      	adds	r7, #20
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b085      	sub	sp, #20
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	695b      	ldr	r3, [r3, #20]
 800a558:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	699b      	ldr	r3, [r3, #24]
 800a55e:	68fa      	ldr	r2, [r7, #12]
 800a560:	4013      	ands	r3, r2
 800a562:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a564:	68fb      	ldr	r3, [r7, #12]
}
 800a566:	4618      	mov	r0, r3
 800a568:	3714      	adds	r7, #20
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr

0800a572 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a572:	b480      	push	{r7}
 800a574:	b085      	sub	sp, #20
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a584:	699b      	ldr	r3, [r3, #24]
 800a586:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a58e:	69db      	ldr	r3, [r3, #28]
 800a590:	68ba      	ldr	r2, [r7, #8]
 800a592:	4013      	ands	r3, r2
 800a594:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	0c1b      	lsrs	r3, r3, #16
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3714      	adds	r7, #20
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr

0800a5a6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a5a6:	b480      	push	{r7}
 800a5a8:	b085      	sub	sp, #20
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5b8:	699b      	ldr	r3, [r3, #24]
 800a5ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5c2:	69db      	ldr	r3, [r3, #28]
 800a5c4:	68ba      	ldr	r2, [r7, #8]
 800a5c6:	4013      	ands	r3, r2
 800a5c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	b29b      	uxth	r3, r3
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3714      	adds	r7, #20
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr

0800a5da <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a5da:	b480      	push	{r7}
 800a5dc:	b085      	sub	sp, #20
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	6078      	str	r0, [r7, #4]
 800a5e2:	460b      	mov	r3, r1
 800a5e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a5ea:	78fb      	ldrb	r3, [r7, #3]
 800a5ec:	015a      	lsls	r2, r3, #5
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	4413      	add	r3, r2
 800a5f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5f6:	689b      	ldr	r3, [r3, #8]
 800a5f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a600:	695b      	ldr	r3, [r3, #20]
 800a602:	68ba      	ldr	r2, [r7, #8]
 800a604:	4013      	ands	r3, r2
 800a606:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a608:	68bb      	ldr	r3, [r7, #8]
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3714      	adds	r7, #20
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr

0800a616 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a616:	b480      	push	{r7}
 800a618:	b087      	sub	sp, #28
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
 800a61e:	460b      	mov	r3, r1
 800a620:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a62c:	691b      	ldr	r3, [r3, #16]
 800a62e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a638:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a63a:	78fb      	ldrb	r3, [r7, #3]
 800a63c:	f003 030f 	and.w	r3, r3, #15
 800a640:	68fa      	ldr	r2, [r7, #12]
 800a642:	fa22 f303 	lsr.w	r3, r2, r3
 800a646:	01db      	lsls	r3, r3, #7
 800a648:	b2db      	uxtb	r3, r3
 800a64a:	693a      	ldr	r2, [r7, #16]
 800a64c:	4313      	orrs	r3, r2
 800a64e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a650:	78fb      	ldrb	r3, [r7, #3]
 800a652:	015a      	lsls	r2, r3, #5
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	4413      	add	r3, r2
 800a658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a65c:	689b      	ldr	r3, [r3, #8]
 800a65e:	693a      	ldr	r2, [r7, #16]
 800a660:	4013      	ands	r3, r2
 800a662:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a664:	68bb      	ldr	r3, [r7, #8]
}
 800a666:	4618      	mov	r0, r3
 800a668:	371c      	adds	r7, #28
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr

0800a672 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a672:	b480      	push	{r7}
 800a674:	b083      	sub	sp, #12
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	695b      	ldr	r3, [r3, #20]
 800a67e:	f003 0301 	and.w	r3, r3, #1
}
 800a682:	4618      	mov	r0, r3
 800a684:	370c      	adds	r7, #12
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr
	...

0800a690 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a690:	b480      	push	{r7}
 800a692:	b085      	sub	sp, #20
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6a2:	681a      	ldr	r2, [r3, #0]
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	4b09      	ldr	r3, [pc, #36]	; (800a6d4 <USB_ActivateSetup+0x44>)
 800a6ae:	4013      	ands	r3, r2
 800a6b0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	68fa      	ldr	r2, [r7, #12]
 800a6bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a6c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a6c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a6c6:	2300      	movs	r3, #0
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3714      	adds	r7, #20
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr
 800a6d4:	fffff800 	.word	0xfffff800

0800a6d8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b087      	sub	sp, #28
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	60f8      	str	r0, [r7, #12]
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	607a      	str	r2, [r7, #4]
 800a6e4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	333c      	adds	r3, #60	; 0x3c
 800a6ee:	3304      	adds	r3, #4
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	4a26      	ldr	r2, [pc, #152]	; (800a790 <USB_EP0_OutStart+0xb8>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d90a      	bls.n	800a712 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a708:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a70c:	d101      	bne.n	800a712 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a70e:	2300      	movs	r3, #0
 800a710:	e037      	b.n	800a782 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a718:	461a      	mov	r2, r3
 800a71a:	2300      	movs	r3, #0
 800a71c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a724:	691b      	ldr	r3, [r3, #16]
 800a726:	697a      	ldr	r2, [r7, #20]
 800a728:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a72c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a730:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a738:	691b      	ldr	r3, [r3, #16]
 800a73a:	697a      	ldr	r2, [r7, #20]
 800a73c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a740:	f043 0318 	orr.w	r3, r3, #24
 800a744:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a74c:	691b      	ldr	r3, [r3, #16]
 800a74e:	697a      	ldr	r2, [r7, #20]
 800a750:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a754:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a758:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a75a:	7afb      	ldrb	r3, [r7, #11]
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	d10f      	bne.n	800a780 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a766:	461a      	mov	r2, r3
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	697a      	ldr	r2, [r7, #20]
 800a776:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a77a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a77e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a780:	2300      	movs	r3, #0
}
 800a782:	4618      	mov	r0, r3
 800a784:	371c      	adds	r7, #28
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr
 800a78e:	bf00      	nop
 800a790:	4f54300a 	.word	0x4f54300a

0800a794 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a794:	b480      	push	{r7}
 800a796:	b085      	sub	sp, #20
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a79c:	2300      	movs	r3, #0
 800a79e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	4a13      	ldr	r2, [pc, #76]	; (800a7f8 <USB_CoreReset+0x64>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d901      	bls.n	800a7b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a7ae:	2303      	movs	r3, #3
 800a7b0:	e01b      	b.n	800a7ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	691b      	ldr	r3, [r3, #16]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	daf2      	bge.n	800a7a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	691b      	ldr	r3, [r3, #16]
 800a7c2:	f043 0201 	orr.w	r2, r3, #1
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	3301      	adds	r3, #1
 800a7ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	4a09      	ldr	r2, [pc, #36]	; (800a7f8 <USB_CoreReset+0x64>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d901      	bls.n	800a7dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a7d8:	2303      	movs	r3, #3
 800a7da:	e006      	b.n	800a7ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	691b      	ldr	r3, [r3, #16]
 800a7e0:	f003 0301 	and.w	r3, r3, #1
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d0f0      	beq.n	800a7ca <USB_CoreReset+0x36>

  return HAL_OK;
 800a7e8:	2300      	movs	r3, #0
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3714      	adds	r7, #20
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f4:	4770      	bx	lr
 800a7f6:	bf00      	nop
 800a7f8:	00030d40 	.word	0x00030d40

0800a7fc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a800:	4904      	ldr	r1, [pc, #16]	; (800a814 <MX_FATFS_Init+0x18>)
 800a802:	4805      	ldr	r0, [pc, #20]	; (800a818 <MX_FATFS_Init+0x1c>)
 800a804:	f005 f9e2 	bl	800fbcc <FATFS_LinkDriver>
 800a808:	4603      	mov	r3, r0
 800a80a:	461a      	mov	r2, r3
 800a80c:	4b03      	ldr	r3, [pc, #12]	; (800a81c <MX_FATFS_Init+0x20>)
 800a80e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a810:	bf00      	nop
 800a812:	bd80      	pop	{r7, pc}
 800a814:	20001190 	.word	0x20001190
 800a818:	08011f88 	.word	0x08011f88
 800a81c:	2000118c 	.word	0x2000118c

0800a820 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a820:	b480      	push	{r7}
 800a822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a824:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a826:	4618      	mov	r0, r3
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr

0800a830 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a836:	2300      	movs	r3, #0
 800a838:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a83a:	f000 f888 	bl	800a94e <BSP_SD_IsDetected>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b01      	cmp	r3, #1
 800a842:	d001      	beq.n	800a848 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800a844:	2302      	movs	r3, #2
 800a846:	e005      	b.n	800a854 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800a848:	4804      	ldr	r0, [pc, #16]	; (800a85c <BSP_SD_Init+0x2c>)
 800a84a:	f7fc f845 	bl	80068d8 <HAL_SD_Init>
 800a84e:	4603      	mov	r3, r0
 800a850:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800a852:	79fb      	ldrb	r3, [r7, #7]
}
 800a854:	4618      	mov	r0, r3
 800a856:	3708      	adds	r7, #8
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}
 800a85c:	20000204 	.word	0x20000204

0800a860 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b086      	sub	sp, #24
 800a864:	af00      	add	r7, sp, #0
 800a866:	60f8      	str	r0, [r7, #12]
 800a868:	60b9      	str	r1, [r7, #8]
 800a86a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a86c:	2300      	movs	r3, #0
 800a86e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	68ba      	ldr	r2, [r7, #8]
 800a874:	68f9      	ldr	r1, [r7, #12]
 800a876:	4806      	ldr	r0, [pc, #24]	; (800a890 <BSP_SD_ReadBlocks_DMA+0x30>)
 800a878:	f7fc f8e6 	bl	8006a48 <HAL_SD_ReadBlocks_DMA>
 800a87c:	4603      	mov	r3, r0
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d001      	beq.n	800a886 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a882:	2301      	movs	r3, #1
 800a884:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a886:	7dfb      	ldrb	r3, [r7, #23]
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3718      	adds	r7, #24
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	20000204 	.word	0x20000204

0800a894 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b086      	sub	sp, #24
 800a898:	af00      	add	r7, sp, #0
 800a89a:	60f8      	str	r0, [r7, #12]
 800a89c:	60b9      	str	r1, [r7, #8]
 800a89e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	68ba      	ldr	r2, [r7, #8]
 800a8a8:	68f9      	ldr	r1, [r7, #12]
 800a8aa:	4806      	ldr	r0, [pc, #24]	; (800a8c4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800a8ac:	f7fc f9ae 	bl	8006c0c <HAL_SD_WriteBlocks_DMA>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d001      	beq.n	800a8ba <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a8ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3718      	adds	r7, #24
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}
 800a8c4:	20000204 	.word	0x20000204

0800a8c8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a8cc:	4805      	ldr	r0, [pc, #20]	; (800a8e4 <BSP_SD_GetCardState+0x1c>)
 800a8ce:	f7fc fdd3 	bl	8007478 <HAL_SD_GetCardState>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	2b04      	cmp	r3, #4
 800a8d6:	bf14      	ite	ne
 800a8d8:	2301      	movne	r3, #1
 800a8da:	2300      	moveq	r3, #0
 800a8dc:	b2db      	uxtb	r3, r3
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	20000204 	.word	0x20000204

0800a8e8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b082      	sub	sp, #8
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a8f0:	6879      	ldr	r1, [r7, #4]
 800a8f2:	4803      	ldr	r0, [pc, #12]	; (800a900 <BSP_SD_GetCardInfo+0x18>)
 800a8f4:	f7fc fd94 	bl	8007420 <HAL_SD_GetCardInfo>
}
 800a8f8:	bf00      	nop
 800a8fa:	3708      	adds	r7, #8
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	20000204 	.word	0x20000204

0800a904 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b082      	sub	sp, #8
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800a90c:	f000 f818 	bl	800a940 <BSP_SD_AbortCallback>
}
 800a910:	bf00      	nop
 800a912:	3708      	adds	r7, #8
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}

0800a918 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a920:	f000 f9a8 	bl	800ac74 <BSP_SD_WriteCpltCallback>
}
 800a924:	bf00      	nop
 800a926:	3708      	adds	r7, #8
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a934:	f000 f9aa 	bl	800ac8c <BSP_SD_ReadCpltCallback>
}
 800a938:	bf00      	nop
 800a93a:	3708      	adds	r7, #8
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800a940:	b480      	push	{r7}
 800a942:	af00      	add	r7, sp, #0

}
 800a944:	bf00      	nop
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr

0800a94e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a94e:	b580      	push	{r7, lr}
 800a950:	b082      	sub	sp, #8
 800a952:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a954:	2301      	movs	r3, #1
 800a956:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a958:	f000 f80c 	bl	800a974 <BSP_PlatformIsDetected>
 800a95c:	4603      	mov	r3, r0
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d101      	bne.n	800a966 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a962:	2300      	movs	r3, #0
 800a964:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a966:	79fb      	ldrb	r3, [r7, #7]
 800a968:	b2db      	uxtb	r3, r3
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3708      	adds	r7, #8
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
	...

0800a974 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a974:	b580      	push	{r7, lr}
 800a976:	b082      	sub	sp, #8
 800a978:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a97a:	2301      	movs	r3, #1
 800a97c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 800a97e:	2104      	movs	r1, #4
 800a980:	4806      	ldr	r0, [pc, #24]	; (800a99c <BSP_PlatformIsDetected+0x28>)
 800a982:	f7f8 fe21 	bl	80035c8 <HAL_GPIO_ReadPin>
 800a986:	4603      	mov	r3, r0
 800a988:	2b01      	cmp	r3, #1
 800a98a:	d001      	beq.n	800a990 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800a98c:	2300      	movs	r3, #0
 800a98e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800a990:	79fb      	ldrb	r3, [r7, #7]
}
 800a992:	4618      	mov	r0, r3
 800a994:	3708      	adds	r7, #8
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	bf00      	nop
 800a99c:	40021800 	.word	0x40021800

0800a9a0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b084      	sub	sp, #16
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800a9a8:	f7f7 f94e 	bl	8001c48 <HAL_GetTick>
 800a9ac:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800a9ae:	e006      	b.n	800a9be <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a9b0:	f7ff ff8a 	bl	800a8c8 <BSP_SD_GetCardState>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d101      	bne.n	800a9be <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	e009      	b.n	800a9d2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800a9be:	f7f7 f943 	bl	8001c48 <HAL_GetTick>
 800a9c2:	4602      	mov	r2, r0
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	1ad3      	subs	r3, r2, r3
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d8f0      	bhi.n	800a9b0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a9ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3710      	adds	r7, #16
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
	...

0800a9dc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b082      	sub	sp, #8
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a9e6:	4b0b      	ldr	r3, [pc, #44]	; (800aa14 <SD_CheckStatus+0x38>)
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a9ec:	f7ff ff6c 	bl	800a8c8 <BSP_SD_GetCardState>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d107      	bne.n	800aa06 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a9f6:	4b07      	ldr	r3, [pc, #28]	; (800aa14 <SD_CheckStatus+0x38>)
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	f023 0301 	bic.w	r3, r3, #1
 800aa00:	b2da      	uxtb	r2, r3
 800aa02:	4b04      	ldr	r3, [pc, #16]	; (800aa14 <SD_CheckStatus+0x38>)
 800aa04:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800aa06:	4b03      	ldr	r3, [pc, #12]	; (800aa14 <SD_CheckStatus+0x38>)
 800aa08:	781b      	ldrb	r3, [r3, #0]
 800aa0a:	b2db      	uxtb	r3, r3
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3708      	adds	r7, #8
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	2000000d 	.word	0x2000000d

0800aa18 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b082      	sub	sp, #8
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	4603      	mov	r3, r0
 800aa20:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800aa22:	f7ff ff05 	bl	800a830 <BSP_SD_Init>
 800aa26:	4603      	mov	r3, r0
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d107      	bne.n	800aa3c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800aa2c:	79fb      	ldrb	r3, [r7, #7]
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f7ff ffd4 	bl	800a9dc <SD_CheckStatus>
 800aa34:	4603      	mov	r3, r0
 800aa36:	461a      	mov	r2, r3
 800aa38:	4b04      	ldr	r3, [pc, #16]	; (800aa4c <SD_initialize+0x34>)
 800aa3a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800aa3c:	4b03      	ldr	r3, [pc, #12]	; (800aa4c <SD_initialize+0x34>)
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	b2db      	uxtb	r3, r3
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3708      	adds	r7, #8
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
 800aa4a:	bf00      	nop
 800aa4c:	2000000d 	.word	0x2000000d

0800aa50 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b082      	sub	sp, #8
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	4603      	mov	r3, r0
 800aa58:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800aa5a:	79fb      	ldrb	r3, [r7, #7]
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f7ff ffbd 	bl	800a9dc <SD_CheckStatus>
 800aa62:	4603      	mov	r3, r0
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3708      	adds	r7, #8
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b086      	sub	sp, #24
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	60b9      	str	r1, [r7, #8]
 800aa74:	607a      	str	r2, [r7, #4]
 800aa76:	603b      	str	r3, [r7, #0]
 800aa78:	4603      	mov	r3, r0
 800aa7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800aa80:	f247 5030 	movw	r0, #30000	; 0x7530
 800aa84:	f7ff ff8c 	bl	800a9a0 <SD_CheckStatusWithTimeout>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	da01      	bge.n	800aa92 <SD_read+0x26>
  {
    return res;
 800aa8e:	7dfb      	ldrb	r3, [r7, #23]
 800aa90:	e03b      	b.n	800ab0a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800aa92:	683a      	ldr	r2, [r7, #0]
 800aa94:	6879      	ldr	r1, [r7, #4]
 800aa96:	68b8      	ldr	r0, [r7, #8]
 800aa98:	f7ff fee2 	bl	800a860 <BSP_SD_ReadBlocks_DMA>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d132      	bne.n	800ab08 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800aaa2:	4b1c      	ldr	r3, [pc, #112]	; (800ab14 <SD_read+0xa8>)
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800aaa8:	f7f7 f8ce 	bl	8001c48 <HAL_GetTick>
 800aaac:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800aaae:	bf00      	nop
 800aab0:	4b18      	ldr	r3, [pc, #96]	; (800ab14 <SD_read+0xa8>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d108      	bne.n	800aaca <SD_read+0x5e>
 800aab8:	f7f7 f8c6 	bl	8001c48 <HAL_GetTick>
 800aabc:	4602      	mov	r2, r0
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	1ad3      	subs	r3, r2, r3
 800aac2:	f247 522f 	movw	r2, #29999	; 0x752f
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d9f2      	bls.n	800aab0 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800aaca:	4b12      	ldr	r3, [pc, #72]	; (800ab14 <SD_read+0xa8>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d102      	bne.n	800aad8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800aad2:	2301      	movs	r3, #1
 800aad4:	75fb      	strb	r3, [r7, #23]
 800aad6:	e017      	b.n	800ab08 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800aad8:	4b0e      	ldr	r3, [pc, #56]	; (800ab14 <SD_read+0xa8>)
 800aada:	2200      	movs	r2, #0
 800aadc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800aade:	f7f7 f8b3 	bl	8001c48 <HAL_GetTick>
 800aae2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800aae4:	e007      	b.n	800aaf6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800aae6:	f7ff feef 	bl	800a8c8 <BSP_SD_GetCardState>
 800aaea:	4603      	mov	r3, r0
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d102      	bne.n	800aaf6 <SD_read+0x8a>
          {
            res = RES_OK;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800aaf4:	e008      	b.n	800ab08 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800aaf6:	f7f7 f8a7 	bl	8001c48 <HAL_GetTick>
 800aafa:	4602      	mov	r2, r0
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	1ad3      	subs	r3, r2, r3
 800ab00:	f247 522f 	movw	r2, #29999	; 0x752f
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d9ee      	bls.n	800aae6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800ab08:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3718      	adds	r7, #24
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	200015fc 	.word	0x200015fc

0800ab18 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b086      	sub	sp, #24
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	60b9      	str	r1, [r7, #8]
 800ab20:	607a      	str	r2, [r7, #4]
 800ab22:	603b      	str	r3, [r7, #0]
 800ab24:	4603      	mov	r3, r0
 800ab26:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ab28:	2301      	movs	r3, #1
 800ab2a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800ab2c:	4b24      	ldr	r3, [pc, #144]	; (800abc0 <SD_write+0xa8>)
 800ab2e:	2200      	movs	r2, #0
 800ab30:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ab32:	f247 5030 	movw	r0, #30000	; 0x7530
 800ab36:	f7ff ff33 	bl	800a9a0 <SD_CheckStatusWithTimeout>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	da01      	bge.n	800ab44 <SD_write+0x2c>
  {
    return res;
 800ab40:	7dfb      	ldrb	r3, [r7, #23]
 800ab42:	e038      	b.n	800abb6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ab44:	683a      	ldr	r2, [r7, #0]
 800ab46:	6879      	ldr	r1, [r7, #4]
 800ab48:	68b8      	ldr	r0, [r7, #8]
 800ab4a:	f7ff fea3 	bl	800a894 <BSP_SD_WriteBlocks_DMA>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d12f      	bne.n	800abb4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800ab54:	f7f7 f878 	bl	8001c48 <HAL_GetTick>
 800ab58:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ab5a:	bf00      	nop
 800ab5c:	4b18      	ldr	r3, [pc, #96]	; (800abc0 <SD_write+0xa8>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d108      	bne.n	800ab76 <SD_write+0x5e>
 800ab64:	f7f7 f870 	bl	8001c48 <HAL_GetTick>
 800ab68:	4602      	mov	r2, r0
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	1ad3      	subs	r3, r2, r3
 800ab6e:	f247 522f 	movw	r2, #29999	; 0x752f
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d9f2      	bls.n	800ab5c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800ab76:	4b12      	ldr	r3, [pc, #72]	; (800abc0 <SD_write+0xa8>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d102      	bne.n	800ab84 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800ab7e:	2301      	movs	r3, #1
 800ab80:	75fb      	strb	r3, [r7, #23]
 800ab82:	e017      	b.n	800abb4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800ab84:	4b0e      	ldr	r3, [pc, #56]	; (800abc0 <SD_write+0xa8>)
 800ab86:	2200      	movs	r2, #0
 800ab88:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ab8a:	f7f7 f85d 	bl	8001c48 <HAL_GetTick>
 800ab8e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ab90:	e007      	b.n	800aba2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ab92:	f7ff fe99 	bl	800a8c8 <BSP_SD_GetCardState>
 800ab96:	4603      	mov	r3, r0
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d102      	bne.n	800aba2 <SD_write+0x8a>
          {
            res = RES_OK;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	75fb      	strb	r3, [r7, #23]
            break;
 800aba0:	e008      	b.n	800abb4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800aba2:	f7f7 f851 	bl	8001c48 <HAL_GetTick>
 800aba6:	4602      	mov	r2, r0
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	1ad3      	subs	r3, r2, r3
 800abac:	f247 522f 	movw	r2, #29999	; 0x752f
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d9ee      	bls.n	800ab92 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800abb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3718      	adds	r7, #24
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}
 800abbe:	bf00      	nop
 800abc0:	200015f8 	.word	0x200015f8

0800abc4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b08c      	sub	sp, #48	; 0x30
 800abc8:	af00      	add	r7, sp, #0
 800abca:	4603      	mov	r3, r0
 800abcc:	603a      	str	r2, [r7, #0]
 800abce:	71fb      	strb	r3, [r7, #7]
 800abd0:	460b      	mov	r3, r1
 800abd2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800abd4:	2301      	movs	r3, #1
 800abd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800abda:	4b25      	ldr	r3, [pc, #148]	; (800ac70 <SD_ioctl+0xac>)
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	b2db      	uxtb	r3, r3
 800abe0:	f003 0301 	and.w	r3, r3, #1
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d001      	beq.n	800abec <SD_ioctl+0x28>
 800abe8:	2303      	movs	r3, #3
 800abea:	e03c      	b.n	800ac66 <SD_ioctl+0xa2>

  switch (cmd)
 800abec:	79bb      	ldrb	r3, [r7, #6]
 800abee:	2b03      	cmp	r3, #3
 800abf0:	d834      	bhi.n	800ac5c <SD_ioctl+0x98>
 800abf2:	a201      	add	r2, pc, #4	; (adr r2, 800abf8 <SD_ioctl+0x34>)
 800abf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf8:	0800ac09 	.word	0x0800ac09
 800abfc:	0800ac11 	.word	0x0800ac11
 800ac00:	0800ac29 	.word	0x0800ac29
 800ac04:	0800ac43 	.word	0x0800ac43
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ac0e:	e028      	b.n	800ac62 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ac10:	f107 030c 	add.w	r3, r7, #12
 800ac14:	4618      	mov	r0, r3
 800ac16:	f7ff fe67 	bl	800a8e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ac1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ac20:	2300      	movs	r3, #0
 800ac22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ac26:	e01c      	b.n	800ac62 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ac28:	f107 030c 	add.w	r3, r7, #12
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f7ff fe5b 	bl	800a8e8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ac32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac34:	b29a      	uxth	r2, r3
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ac40:	e00f      	b.n	800ac62 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ac42:	f107 030c 	add.w	r3, r7, #12
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7ff fe4e 	bl	800a8e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ac4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac4e:	0a5a      	lsrs	r2, r3, #9
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ac54:	2300      	movs	r3, #0
 800ac56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ac5a:	e002      	b.n	800ac62 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ac5c:	2304      	movs	r3, #4
 800ac5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ac62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3730      	adds	r7, #48	; 0x30
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
 800ac6e:	bf00      	nop
 800ac70:	2000000d 	.word	0x2000000d

0800ac74 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800ac74:	b480      	push	{r7}
 800ac76:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800ac78:	4b03      	ldr	r3, [pc, #12]	; (800ac88 <BSP_SD_WriteCpltCallback+0x14>)
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	601a      	str	r2, [r3, #0]
}
 800ac7e:	bf00      	nop
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr
 800ac88:	200015f8 	.word	0x200015f8

0800ac8c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800ac90:	4b03      	ldr	r3, [pc, #12]	; (800aca0 <BSP_SD_ReadCpltCallback+0x14>)
 800ac92:	2201      	movs	r2, #1
 800ac94:	601a      	str	r2, [r3, #0]
}
 800ac96:	bf00      	nop
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr
 800aca0:	200015fc 	.word	0x200015fc

0800aca4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	460b      	mov	r3, r1
 800acae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800acb0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800acb4:	f005 fde6 	bl	8010884 <malloc>
 800acb8:	4603      	mov	r3, r0
 800acba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d109      	bne.n	800acd6 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	32b0      	adds	r2, #176	; 0xb0
 800accc:	2100      	movs	r1, #0
 800acce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800acd2:	2302      	movs	r3, #2
 800acd4:	e0d4      	b.n	800ae80 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800acd6:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800acda:	2100      	movs	r1, #0
 800acdc:	68f8      	ldr	r0, [r7, #12]
 800acde:	f005 fff1 	bl	8010cc4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	32b0      	adds	r2, #176	; 0xb0
 800acec:	68f9      	ldr	r1, [r7, #12]
 800acee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	32b0      	adds	r2, #176	; 0xb0
 800acfc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	7c1b      	ldrb	r3, [r3, #16]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d138      	bne.n	800ad80 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ad0e:	4b5e      	ldr	r3, [pc, #376]	; (800ae88 <USBD_CDC_Init+0x1e4>)
 800ad10:	7819      	ldrb	r1, [r3, #0]
 800ad12:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad16:	2202      	movs	r2, #2
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f005 fc10 	bl	801053e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ad1e:	4b5a      	ldr	r3, [pc, #360]	; (800ae88 <USBD_CDC_Init+0x1e4>)
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	f003 020f 	and.w	r2, r3, #15
 800ad26:	6879      	ldr	r1, [r7, #4]
 800ad28:	4613      	mov	r3, r2
 800ad2a:	009b      	lsls	r3, r3, #2
 800ad2c:	4413      	add	r3, r2
 800ad2e:	009b      	lsls	r3, r3, #2
 800ad30:	440b      	add	r3, r1
 800ad32:	3324      	adds	r3, #36	; 0x24
 800ad34:	2201      	movs	r2, #1
 800ad36:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ad38:	4b54      	ldr	r3, [pc, #336]	; (800ae8c <USBD_CDC_Init+0x1e8>)
 800ad3a:	7819      	ldrb	r1, [r3, #0]
 800ad3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad40:	2202      	movs	r2, #2
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f005 fbfb 	bl	801053e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ad48:	4b50      	ldr	r3, [pc, #320]	; (800ae8c <USBD_CDC_Init+0x1e8>)
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	f003 020f 	and.w	r2, r3, #15
 800ad50:	6879      	ldr	r1, [r7, #4]
 800ad52:	4613      	mov	r3, r2
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	4413      	add	r3, r2
 800ad58:	009b      	lsls	r3, r3, #2
 800ad5a:	440b      	add	r3, r1
 800ad5c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ad60:	2201      	movs	r2, #1
 800ad62:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ad64:	4b4a      	ldr	r3, [pc, #296]	; (800ae90 <USBD_CDC_Init+0x1ec>)
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	f003 020f 	and.w	r2, r3, #15
 800ad6c:	6879      	ldr	r1, [r7, #4]
 800ad6e:	4613      	mov	r3, r2
 800ad70:	009b      	lsls	r3, r3, #2
 800ad72:	4413      	add	r3, r2
 800ad74:	009b      	lsls	r3, r3, #2
 800ad76:	440b      	add	r3, r1
 800ad78:	3326      	adds	r3, #38	; 0x26
 800ad7a:	2210      	movs	r2, #16
 800ad7c:	801a      	strh	r2, [r3, #0]
 800ad7e:	e035      	b.n	800adec <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ad80:	4b41      	ldr	r3, [pc, #260]	; (800ae88 <USBD_CDC_Init+0x1e4>)
 800ad82:	7819      	ldrb	r1, [r3, #0]
 800ad84:	2340      	movs	r3, #64	; 0x40
 800ad86:	2202      	movs	r2, #2
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f005 fbd8 	bl	801053e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ad8e:	4b3e      	ldr	r3, [pc, #248]	; (800ae88 <USBD_CDC_Init+0x1e4>)
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	f003 020f 	and.w	r2, r3, #15
 800ad96:	6879      	ldr	r1, [r7, #4]
 800ad98:	4613      	mov	r3, r2
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	4413      	add	r3, r2
 800ad9e:	009b      	lsls	r3, r3, #2
 800ada0:	440b      	add	r3, r1
 800ada2:	3324      	adds	r3, #36	; 0x24
 800ada4:	2201      	movs	r2, #1
 800ada6:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ada8:	4b38      	ldr	r3, [pc, #224]	; (800ae8c <USBD_CDC_Init+0x1e8>)
 800adaa:	7819      	ldrb	r1, [r3, #0]
 800adac:	2340      	movs	r3, #64	; 0x40
 800adae:	2202      	movs	r2, #2
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f005 fbc4 	bl	801053e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800adb6:	4b35      	ldr	r3, [pc, #212]	; (800ae8c <USBD_CDC_Init+0x1e8>)
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	f003 020f 	and.w	r2, r3, #15
 800adbe:	6879      	ldr	r1, [r7, #4]
 800adc0:	4613      	mov	r3, r2
 800adc2:	009b      	lsls	r3, r3, #2
 800adc4:	4413      	add	r3, r2
 800adc6:	009b      	lsls	r3, r3, #2
 800adc8:	440b      	add	r3, r1
 800adca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800adce:	2201      	movs	r2, #1
 800add0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800add2:	4b2f      	ldr	r3, [pc, #188]	; (800ae90 <USBD_CDC_Init+0x1ec>)
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	f003 020f 	and.w	r2, r3, #15
 800adda:	6879      	ldr	r1, [r7, #4]
 800addc:	4613      	mov	r3, r2
 800adde:	009b      	lsls	r3, r3, #2
 800ade0:	4413      	add	r3, r2
 800ade2:	009b      	lsls	r3, r3, #2
 800ade4:	440b      	add	r3, r1
 800ade6:	3326      	adds	r3, #38	; 0x26
 800ade8:	2210      	movs	r2, #16
 800adea:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800adec:	4b28      	ldr	r3, [pc, #160]	; (800ae90 <USBD_CDC_Init+0x1ec>)
 800adee:	7819      	ldrb	r1, [r3, #0]
 800adf0:	2308      	movs	r3, #8
 800adf2:	2203      	movs	r2, #3
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f005 fba2 	bl	801053e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800adfa:	4b25      	ldr	r3, [pc, #148]	; (800ae90 <USBD_CDC_Init+0x1ec>)
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	f003 020f 	and.w	r2, r3, #15
 800ae02:	6879      	ldr	r1, [r7, #4]
 800ae04:	4613      	mov	r3, r2
 800ae06:	009b      	lsls	r3, r3, #2
 800ae08:	4413      	add	r3, r2
 800ae0a:	009b      	lsls	r3, r3, #2
 800ae0c:	440b      	add	r3, r1
 800ae0e:	3324      	adds	r3, #36	; 0x24
 800ae10:	2201      	movs	r2, #1
 800ae12:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2200      	movs	r2, #0
 800ae18:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	33b0      	adds	r3, #176	; 0xb0
 800ae26:	009b      	lsls	r3, r3, #2
 800ae28:	4413      	add	r3, r2
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2200      	movs	r2, #0
 800ae34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d101      	bne.n	800ae4e <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800ae4a:	2302      	movs	r3, #2
 800ae4c:	e018      	b.n	800ae80 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	7c1b      	ldrb	r3, [r3, #16]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d10a      	bne.n	800ae6c <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ae56:	4b0d      	ldr	r3, [pc, #52]	; (800ae8c <USBD_CDC_Init+0x1e8>)
 800ae58:	7819      	ldrb	r1, [r3, #0]
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae60:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f005 fc59 	bl	801071c <USBD_LL_PrepareReceive>
 800ae6a:	e008      	b.n	800ae7e <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ae6c:	4b07      	ldr	r3, [pc, #28]	; (800ae8c <USBD_CDC_Init+0x1e8>)
 800ae6e:	7819      	ldrb	r1, [r3, #0]
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae76:	2340      	movs	r3, #64	; 0x40
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f005 fc4f 	bl	801071c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ae7e:	2300      	movs	r3, #0
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3710      	adds	r7, #16
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	20000097 	.word	0x20000097
 800ae8c:	20000098 	.word	0x20000098
 800ae90:	20000099 	.word	0x20000099

0800ae94 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b082      	sub	sp, #8
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	460b      	mov	r3, r1
 800ae9e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800aea0:	4b3a      	ldr	r3, [pc, #232]	; (800af8c <USBD_CDC_DeInit+0xf8>)
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	4619      	mov	r1, r3
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f005 fb6f 	bl	801058a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800aeac:	4b37      	ldr	r3, [pc, #220]	; (800af8c <USBD_CDC_DeInit+0xf8>)
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	f003 020f 	and.w	r2, r3, #15
 800aeb4:	6879      	ldr	r1, [r7, #4]
 800aeb6:	4613      	mov	r3, r2
 800aeb8:	009b      	lsls	r3, r3, #2
 800aeba:	4413      	add	r3, r2
 800aebc:	009b      	lsls	r3, r3, #2
 800aebe:	440b      	add	r3, r1
 800aec0:	3324      	adds	r3, #36	; 0x24
 800aec2:	2200      	movs	r2, #0
 800aec4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800aec6:	4b32      	ldr	r3, [pc, #200]	; (800af90 <USBD_CDC_DeInit+0xfc>)
 800aec8:	781b      	ldrb	r3, [r3, #0]
 800aeca:	4619      	mov	r1, r3
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f005 fb5c 	bl	801058a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800aed2:	4b2f      	ldr	r3, [pc, #188]	; (800af90 <USBD_CDC_DeInit+0xfc>)
 800aed4:	781b      	ldrb	r3, [r3, #0]
 800aed6:	f003 020f 	and.w	r2, r3, #15
 800aeda:	6879      	ldr	r1, [r7, #4]
 800aedc:	4613      	mov	r3, r2
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	4413      	add	r3, r2
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	440b      	add	r3, r1
 800aee6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aeea:	2200      	movs	r2, #0
 800aeec:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800aeee:	4b29      	ldr	r3, [pc, #164]	; (800af94 <USBD_CDC_DeInit+0x100>)
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	4619      	mov	r1, r3
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f005 fb48 	bl	801058a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800aefa:	4b26      	ldr	r3, [pc, #152]	; (800af94 <USBD_CDC_DeInit+0x100>)
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	f003 020f 	and.w	r2, r3, #15
 800af02:	6879      	ldr	r1, [r7, #4]
 800af04:	4613      	mov	r3, r2
 800af06:	009b      	lsls	r3, r3, #2
 800af08:	4413      	add	r3, r2
 800af0a:	009b      	lsls	r3, r3, #2
 800af0c:	440b      	add	r3, r1
 800af0e:	3324      	adds	r3, #36	; 0x24
 800af10:	2200      	movs	r2, #0
 800af12:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800af14:	4b1f      	ldr	r3, [pc, #124]	; (800af94 <USBD_CDC_DeInit+0x100>)
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	f003 020f 	and.w	r2, r3, #15
 800af1c:	6879      	ldr	r1, [r7, #4]
 800af1e:	4613      	mov	r3, r2
 800af20:	009b      	lsls	r3, r3, #2
 800af22:	4413      	add	r3, r2
 800af24:	009b      	lsls	r3, r3, #2
 800af26:	440b      	add	r3, r1
 800af28:	3326      	adds	r3, #38	; 0x26
 800af2a:	2200      	movs	r2, #0
 800af2c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	32b0      	adds	r2, #176	; 0xb0
 800af38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d01f      	beq.n	800af80 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af46:	687a      	ldr	r2, [r7, #4]
 800af48:	33b0      	adds	r3, #176	; 0xb0
 800af4a:	009b      	lsls	r3, r3, #2
 800af4c:	4413      	add	r3, r2
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	32b0      	adds	r2, #176	; 0xb0
 800af5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af62:	4618      	mov	r0, r3
 800af64:	f005 fc96 	bl	8010894 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	32b0      	adds	r2, #176	; 0xb0
 800af72:	2100      	movs	r1, #0
 800af74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2200      	movs	r2, #0
 800af7c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800af80:	2300      	movs	r3, #0
}
 800af82:	4618      	mov	r0, r3
 800af84:	3708      	adds	r7, #8
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	20000097 	.word	0x20000097
 800af90:	20000098 	.word	0x20000098
 800af94:	20000099 	.word	0x20000099

0800af98 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b086      	sub	sp, #24
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	32b0      	adds	r2, #176	; 0xb0
 800afac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afb0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800afb2:	2300      	movs	r3, #0
 800afb4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800afb6:	2300      	movs	r3, #0
 800afb8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800afba:	2300      	movs	r3, #0
 800afbc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d101      	bne.n	800afc8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800afc4:	2303      	movs	r3, #3
 800afc6:	e0bf      	b.n	800b148 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	781b      	ldrb	r3, [r3, #0]
 800afcc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d050      	beq.n	800b076 <USBD_CDC_Setup+0xde>
 800afd4:	2b20      	cmp	r3, #32
 800afd6:	f040 80af 	bne.w	800b138 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	88db      	ldrh	r3, [r3, #6]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d03a      	beq.n	800b058 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	781b      	ldrb	r3, [r3, #0]
 800afe6:	b25b      	sxtb	r3, r3
 800afe8:	2b00      	cmp	r3, #0
 800afea:	da1b      	bge.n	800b024 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	33b0      	adds	r3, #176	; 0xb0
 800aff6:	009b      	lsls	r3, r3, #2
 800aff8:	4413      	add	r3, r2
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	689b      	ldr	r3, [r3, #8]
 800affe:	683a      	ldr	r2, [r7, #0]
 800b000:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b002:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b004:	683a      	ldr	r2, [r7, #0]
 800b006:	88d2      	ldrh	r2, [r2, #6]
 800b008:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	88db      	ldrh	r3, [r3, #6]
 800b00e:	2b07      	cmp	r3, #7
 800b010:	bf28      	it	cs
 800b012:	2307      	movcs	r3, #7
 800b014:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	89fa      	ldrh	r2, [r7, #14]
 800b01a:	4619      	mov	r1, r3
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f001 fdad 	bl	800cb7c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b022:	e090      	b.n	800b146 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	785a      	ldrb	r2, [r3, #1]
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	88db      	ldrh	r3, [r3, #6]
 800b032:	2b3f      	cmp	r3, #63	; 0x3f
 800b034:	d803      	bhi.n	800b03e <USBD_CDC_Setup+0xa6>
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	88db      	ldrh	r3, [r3, #6]
 800b03a:	b2da      	uxtb	r2, r3
 800b03c:	e000      	b.n	800b040 <USBD_CDC_Setup+0xa8>
 800b03e:	2240      	movs	r2, #64	; 0x40
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b046:	6939      	ldr	r1, [r7, #16]
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b04e:	461a      	mov	r2, r3
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f001 fdbf 	bl	800cbd4 <USBD_CtlPrepareRx>
      break;
 800b056:	e076      	b.n	800b146 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b05e:	687a      	ldr	r2, [r7, #4]
 800b060:	33b0      	adds	r3, #176	; 0xb0
 800b062:	009b      	lsls	r3, r3, #2
 800b064:	4413      	add	r3, r2
 800b066:	685b      	ldr	r3, [r3, #4]
 800b068:	689b      	ldr	r3, [r3, #8]
 800b06a:	683a      	ldr	r2, [r7, #0]
 800b06c:	7850      	ldrb	r0, [r2, #1]
 800b06e:	2200      	movs	r2, #0
 800b070:	6839      	ldr	r1, [r7, #0]
 800b072:	4798      	blx	r3
      break;
 800b074:	e067      	b.n	800b146 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	785b      	ldrb	r3, [r3, #1]
 800b07a:	2b0b      	cmp	r3, #11
 800b07c:	d851      	bhi.n	800b122 <USBD_CDC_Setup+0x18a>
 800b07e:	a201      	add	r2, pc, #4	; (adr r2, 800b084 <USBD_CDC_Setup+0xec>)
 800b080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b084:	0800b0b5 	.word	0x0800b0b5
 800b088:	0800b131 	.word	0x0800b131
 800b08c:	0800b123 	.word	0x0800b123
 800b090:	0800b123 	.word	0x0800b123
 800b094:	0800b123 	.word	0x0800b123
 800b098:	0800b123 	.word	0x0800b123
 800b09c:	0800b123 	.word	0x0800b123
 800b0a0:	0800b123 	.word	0x0800b123
 800b0a4:	0800b123 	.word	0x0800b123
 800b0a8:	0800b123 	.word	0x0800b123
 800b0ac:	0800b0df 	.word	0x0800b0df
 800b0b0:	0800b109 	.word	0x0800b109
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0ba:	b2db      	uxtb	r3, r3
 800b0bc:	2b03      	cmp	r3, #3
 800b0be:	d107      	bne.n	800b0d0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b0c0:	f107 030a 	add.w	r3, r7, #10
 800b0c4:	2202      	movs	r2, #2
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f001 fd57 	bl	800cb7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b0ce:	e032      	b.n	800b136 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b0d0:	6839      	ldr	r1, [r7, #0]
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f001 fce1 	bl	800ca9a <USBD_CtlError>
            ret = USBD_FAIL;
 800b0d8:	2303      	movs	r3, #3
 800b0da:	75fb      	strb	r3, [r7, #23]
          break;
 800b0dc:	e02b      	b.n	800b136 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	2b03      	cmp	r3, #3
 800b0e8:	d107      	bne.n	800b0fa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b0ea:	f107 030d 	add.w	r3, r7, #13
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f001 fd42 	bl	800cb7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b0f8:	e01d      	b.n	800b136 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b0fa:	6839      	ldr	r1, [r7, #0]
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f001 fccc 	bl	800ca9a <USBD_CtlError>
            ret = USBD_FAIL;
 800b102:	2303      	movs	r3, #3
 800b104:	75fb      	strb	r3, [r7, #23]
          break;
 800b106:	e016      	b.n	800b136 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b10e:	b2db      	uxtb	r3, r3
 800b110:	2b03      	cmp	r3, #3
 800b112:	d00f      	beq.n	800b134 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b114:	6839      	ldr	r1, [r7, #0]
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f001 fcbf 	bl	800ca9a <USBD_CtlError>
            ret = USBD_FAIL;
 800b11c:	2303      	movs	r3, #3
 800b11e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b120:	e008      	b.n	800b134 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b122:	6839      	ldr	r1, [r7, #0]
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f001 fcb8 	bl	800ca9a <USBD_CtlError>
          ret = USBD_FAIL;
 800b12a:	2303      	movs	r3, #3
 800b12c:	75fb      	strb	r3, [r7, #23]
          break;
 800b12e:	e002      	b.n	800b136 <USBD_CDC_Setup+0x19e>
          break;
 800b130:	bf00      	nop
 800b132:	e008      	b.n	800b146 <USBD_CDC_Setup+0x1ae>
          break;
 800b134:	bf00      	nop
      }
      break;
 800b136:	e006      	b.n	800b146 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b138:	6839      	ldr	r1, [r7, #0]
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f001 fcad 	bl	800ca9a <USBD_CtlError>
      ret = USBD_FAIL;
 800b140:	2303      	movs	r3, #3
 800b142:	75fb      	strb	r3, [r7, #23]
      break;
 800b144:	bf00      	nop
  }

  return (uint8_t)ret;
 800b146:	7dfb      	ldrb	r3, [r7, #23]
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3718      	adds	r7, #24
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	460b      	mov	r3, r1
 800b15a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b162:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	32b0      	adds	r2, #176	; 0xb0
 800b16e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d101      	bne.n	800b17a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b176:	2303      	movs	r3, #3
 800b178:	e065      	b.n	800b246 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	32b0      	adds	r2, #176	; 0xb0
 800b184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b188:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b18a:	78fb      	ldrb	r3, [r7, #3]
 800b18c:	f003 020f 	and.w	r2, r3, #15
 800b190:	6879      	ldr	r1, [r7, #4]
 800b192:	4613      	mov	r3, r2
 800b194:	009b      	lsls	r3, r3, #2
 800b196:	4413      	add	r3, r2
 800b198:	009b      	lsls	r3, r3, #2
 800b19a:	440b      	add	r3, r1
 800b19c:	3318      	adds	r3, #24
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d02f      	beq.n	800b204 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b1a4:	78fb      	ldrb	r3, [r7, #3]
 800b1a6:	f003 020f 	and.w	r2, r3, #15
 800b1aa:	6879      	ldr	r1, [r7, #4]
 800b1ac:	4613      	mov	r3, r2
 800b1ae:	009b      	lsls	r3, r3, #2
 800b1b0:	4413      	add	r3, r2
 800b1b2:	009b      	lsls	r3, r3, #2
 800b1b4:	440b      	add	r3, r1
 800b1b6:	3318      	adds	r3, #24
 800b1b8:	681a      	ldr	r2, [r3, #0]
 800b1ba:	78fb      	ldrb	r3, [r7, #3]
 800b1bc:	f003 010f 	and.w	r1, r3, #15
 800b1c0:	68f8      	ldr	r0, [r7, #12]
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	00db      	lsls	r3, r3, #3
 800b1c6:	440b      	add	r3, r1
 800b1c8:	009b      	lsls	r3, r3, #2
 800b1ca:	4403      	add	r3, r0
 800b1cc:	3348      	adds	r3, #72	; 0x48
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	fbb2 f1f3 	udiv	r1, r2, r3
 800b1d4:	fb01 f303 	mul.w	r3, r1, r3
 800b1d8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d112      	bne.n	800b204 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b1de:	78fb      	ldrb	r3, [r7, #3]
 800b1e0:	f003 020f 	and.w	r2, r3, #15
 800b1e4:	6879      	ldr	r1, [r7, #4]
 800b1e6:	4613      	mov	r3, r2
 800b1e8:	009b      	lsls	r3, r3, #2
 800b1ea:	4413      	add	r3, r2
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	440b      	add	r3, r1
 800b1f0:	3318      	adds	r3, #24
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b1f6:	78f9      	ldrb	r1, [r7, #3]
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f005 fa6c 	bl	80106da <USBD_LL_Transmit>
 800b202:	e01f      	b.n	800b244 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	2200      	movs	r2, #0
 800b208:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b212:	687a      	ldr	r2, [r7, #4]
 800b214:	33b0      	adds	r3, #176	; 0xb0
 800b216:	009b      	lsls	r3, r3, #2
 800b218:	4413      	add	r3, r2
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	691b      	ldr	r3, [r3, #16]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d010      	beq.n	800b244 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	33b0      	adds	r3, #176	; 0xb0
 800b22c:	009b      	lsls	r3, r3, #2
 800b22e:	4413      	add	r3, r2
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	691b      	ldr	r3, [r3, #16]
 800b234:	68ba      	ldr	r2, [r7, #8]
 800b236:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b23a:	68ba      	ldr	r2, [r7, #8]
 800b23c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b240:	78fa      	ldrb	r2, [r7, #3]
 800b242:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b244:	2300      	movs	r3, #0
}
 800b246:	4618      	mov	r0, r3
 800b248:	3710      	adds	r7, #16
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}

0800b24e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b24e:	b580      	push	{r7, lr}
 800b250:	b084      	sub	sp, #16
 800b252:	af00      	add	r7, sp, #0
 800b254:	6078      	str	r0, [r7, #4]
 800b256:	460b      	mov	r3, r1
 800b258:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	32b0      	adds	r2, #176	; 0xb0
 800b264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b268:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	32b0      	adds	r2, #176	; 0xb0
 800b274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d101      	bne.n	800b280 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b27c:	2303      	movs	r3, #3
 800b27e:	e01a      	b.n	800b2b6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b280:	78fb      	ldrb	r3, [r7, #3]
 800b282:	4619      	mov	r1, r3
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f005 fa6a 	bl	801075e <USBD_LL_GetRxDataSize>
 800b28a:	4602      	mov	r2, r0
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b298:	687a      	ldr	r2, [r7, #4]
 800b29a:	33b0      	adds	r3, #176	; 0xb0
 800b29c:	009b      	lsls	r3, r3, #2
 800b29e:	4413      	add	r3, r2
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	68db      	ldr	r3, [r3, #12]
 800b2a4:	68fa      	ldr	r2, [r7, #12]
 800b2a6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b2aa:	68fa      	ldr	r2, [r7, #12]
 800b2ac:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b2b0:	4611      	mov	r1, r2
 800b2b2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b2b4:	2300      	movs	r3, #0
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3710      	adds	r7, #16
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}

0800b2be <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b2be:	b580      	push	{r7, lr}
 800b2c0:	b084      	sub	sp, #16
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	32b0      	adds	r2, #176	; 0xb0
 800b2d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d101      	bne.n	800b2e0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b2dc:	2303      	movs	r3, #3
 800b2de:	e025      	b.n	800b32c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b2e6:	687a      	ldr	r2, [r7, #4]
 800b2e8:	33b0      	adds	r3, #176	; 0xb0
 800b2ea:	009b      	lsls	r3, r3, #2
 800b2ec:	4413      	add	r3, r2
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d01a      	beq.n	800b32a <USBD_CDC_EP0_RxReady+0x6c>
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b2fa:	2bff      	cmp	r3, #255	; 0xff
 800b2fc:	d015      	beq.n	800b32a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b304:	687a      	ldr	r2, [r7, #4]
 800b306:	33b0      	adds	r3, #176	; 0xb0
 800b308:	009b      	lsls	r3, r3, #2
 800b30a:	4413      	add	r3, r2
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	689b      	ldr	r3, [r3, #8]
 800b310:	68fa      	ldr	r2, [r7, #12]
 800b312:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b316:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b318:	68fa      	ldr	r2, [r7, #12]
 800b31a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b31e:	b292      	uxth	r2, r2
 800b320:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	22ff      	movs	r2, #255	; 0xff
 800b326:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b32a:	2300      	movs	r3, #0
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3710      	adds	r7, #16
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b086      	sub	sp, #24
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b33c:	2182      	movs	r1, #130	; 0x82
 800b33e:	4818      	ldr	r0, [pc, #96]	; (800b3a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b340:	f000 fd49 	bl	800bdd6 <USBD_GetEpDesc>
 800b344:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b346:	2101      	movs	r1, #1
 800b348:	4815      	ldr	r0, [pc, #84]	; (800b3a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b34a:	f000 fd44 	bl	800bdd6 <USBD_GetEpDesc>
 800b34e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b350:	2181      	movs	r1, #129	; 0x81
 800b352:	4813      	ldr	r0, [pc, #76]	; (800b3a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b354:	f000 fd3f 	bl	800bdd6 <USBD_GetEpDesc>
 800b358:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d002      	beq.n	800b366 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	2210      	movs	r2, #16
 800b364:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d006      	beq.n	800b37a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	2200      	movs	r2, #0
 800b370:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b374:	711a      	strb	r2, [r3, #4]
 800b376:	2200      	movs	r2, #0
 800b378:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d006      	beq.n	800b38e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2200      	movs	r2, #0
 800b384:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b388:	711a      	strb	r2, [r3, #4]
 800b38a:	2200      	movs	r2, #0
 800b38c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2243      	movs	r2, #67	; 0x43
 800b392:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b394:	4b02      	ldr	r3, [pc, #8]	; (800b3a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b396:	4618      	mov	r0, r3
 800b398:	3718      	adds	r7, #24
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
 800b39e:	bf00      	nop
 800b3a0:	20000054 	.word	0x20000054

0800b3a4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b086      	sub	sp, #24
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b3ac:	2182      	movs	r1, #130	; 0x82
 800b3ae:	4818      	ldr	r0, [pc, #96]	; (800b410 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b3b0:	f000 fd11 	bl	800bdd6 <USBD_GetEpDesc>
 800b3b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b3b6:	2101      	movs	r1, #1
 800b3b8:	4815      	ldr	r0, [pc, #84]	; (800b410 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b3ba:	f000 fd0c 	bl	800bdd6 <USBD_GetEpDesc>
 800b3be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b3c0:	2181      	movs	r1, #129	; 0x81
 800b3c2:	4813      	ldr	r0, [pc, #76]	; (800b410 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b3c4:	f000 fd07 	bl	800bdd6 <USBD_GetEpDesc>
 800b3c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d002      	beq.n	800b3d6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	2210      	movs	r2, #16
 800b3d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d006      	beq.n	800b3ea <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	711a      	strb	r2, [r3, #4]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	f042 0202 	orr.w	r2, r2, #2
 800b3e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d006      	beq.n	800b3fe <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	711a      	strb	r2, [r3, #4]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	f042 0202 	orr.w	r2, r2, #2
 800b3fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2243      	movs	r2, #67	; 0x43
 800b402:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b404:	4b02      	ldr	r3, [pc, #8]	; (800b410 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b406:	4618      	mov	r0, r3
 800b408:	3718      	adds	r7, #24
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	bf00      	nop
 800b410:	20000054 	.word	0x20000054

0800b414 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b086      	sub	sp, #24
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b41c:	2182      	movs	r1, #130	; 0x82
 800b41e:	4818      	ldr	r0, [pc, #96]	; (800b480 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b420:	f000 fcd9 	bl	800bdd6 <USBD_GetEpDesc>
 800b424:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b426:	2101      	movs	r1, #1
 800b428:	4815      	ldr	r0, [pc, #84]	; (800b480 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b42a:	f000 fcd4 	bl	800bdd6 <USBD_GetEpDesc>
 800b42e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b430:	2181      	movs	r1, #129	; 0x81
 800b432:	4813      	ldr	r0, [pc, #76]	; (800b480 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b434:	f000 fccf 	bl	800bdd6 <USBD_GetEpDesc>
 800b438:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d002      	beq.n	800b446 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	2210      	movs	r2, #16
 800b444:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d006      	beq.n	800b45a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	2200      	movs	r2, #0
 800b450:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b454:	711a      	strb	r2, [r3, #4]
 800b456:	2200      	movs	r2, #0
 800b458:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d006      	beq.n	800b46e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2200      	movs	r2, #0
 800b464:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b468:	711a      	strb	r2, [r3, #4]
 800b46a:	2200      	movs	r2, #0
 800b46c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2243      	movs	r2, #67	; 0x43
 800b472:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b474:	4b02      	ldr	r3, [pc, #8]	; (800b480 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b476:	4618      	mov	r0, r3
 800b478:	3718      	adds	r7, #24
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	20000054 	.word	0x20000054

0800b484 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b484:	b480      	push	{r7}
 800b486:	b083      	sub	sp, #12
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	220a      	movs	r2, #10
 800b490:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b492:	4b03      	ldr	r3, [pc, #12]	; (800b4a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b494:	4618      	mov	r0, r3
 800b496:	370c      	adds	r7, #12
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr
 800b4a0:	20000010 	.word	0x20000010

0800b4a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b083      	sub	sp, #12
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d101      	bne.n	800b4b8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b4b4:	2303      	movs	r3, #3
 800b4b6:	e009      	b.n	800b4cc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b4be:	687a      	ldr	r2, [r7, #4]
 800b4c0:	33b0      	adds	r3, #176	; 0xb0
 800b4c2:	009b      	lsls	r3, r3, #2
 800b4c4:	4413      	add	r3, r2
 800b4c6:	683a      	ldr	r2, [r7, #0]
 800b4c8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b4ca:	2300      	movs	r3, #0
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	370c      	adds	r7, #12
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d6:	4770      	bx	lr

0800b4d8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b087      	sub	sp, #28
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	60f8      	str	r0, [r7, #12]
 800b4e0:	60b9      	str	r1, [r7, #8]
 800b4e2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	32b0      	adds	r2, #176	; 0xb0
 800b4ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4f2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d101      	bne.n	800b4fe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b4fa:	2303      	movs	r3, #3
 800b4fc:	e008      	b.n	800b510 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	68ba      	ldr	r2, [r7, #8]
 800b502:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b50e:	2300      	movs	r3, #0
}
 800b510:	4618      	mov	r0, r3
 800b512:	371c      	adds	r7, #28
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr

0800b51c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b085      	sub	sp, #20
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	32b0      	adds	r2, #176	; 0xb0
 800b530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b534:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d101      	bne.n	800b540 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b53c:	2303      	movs	r3, #3
 800b53e:	e004      	b.n	800b54a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	683a      	ldr	r2, [r7, #0]
 800b544:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b548:	2300      	movs	r3, #0
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3714      	adds	r7, #20
 800b54e:	46bd      	mov	sp, r7
 800b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b554:	4770      	bx	lr
	...

0800b558 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b084      	sub	sp, #16
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	32b0      	adds	r2, #176	; 0xb0
 800b56a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b56e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b570:	2301      	movs	r3, #1
 800b572:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d101      	bne.n	800b57e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b57a:	2303      	movs	r3, #3
 800b57c:	e025      	b.n	800b5ca <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b584:	2b00      	cmp	r3, #0
 800b586:	d11f      	bne.n	800b5c8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	2201      	movs	r2, #1
 800b58c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b590:	4b10      	ldr	r3, [pc, #64]	; (800b5d4 <USBD_CDC_TransmitPacket+0x7c>)
 800b592:	781b      	ldrb	r3, [r3, #0]
 800b594:	f003 020f 	and.w	r2, r3, #15
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	4613      	mov	r3, r2
 800b5a2:	009b      	lsls	r3, r3, #2
 800b5a4:	4413      	add	r3, r2
 800b5a6:	009b      	lsls	r3, r3, #2
 800b5a8:	4403      	add	r3, r0
 800b5aa:	3318      	adds	r3, #24
 800b5ac:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b5ae:	4b09      	ldr	r3, [pc, #36]	; (800b5d4 <USBD_CDC_TransmitPacket+0x7c>)
 800b5b0:	7819      	ldrb	r1, [r3, #0]
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f005 f88b 	bl	80106da <USBD_LL_Transmit>

    ret = USBD_OK;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b5c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3710      	adds	r7, #16
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
 800b5d2:	bf00      	nop
 800b5d4:	20000097 	.word	0x20000097

0800b5d8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b084      	sub	sp, #16
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	32b0      	adds	r2, #176	; 0xb0
 800b5ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5ee:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	32b0      	adds	r2, #176	; 0xb0
 800b5fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d101      	bne.n	800b606 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b602:	2303      	movs	r3, #3
 800b604:	e018      	b.n	800b638 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	7c1b      	ldrb	r3, [r3, #16]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d10a      	bne.n	800b624 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b60e:	4b0c      	ldr	r3, [pc, #48]	; (800b640 <USBD_CDC_ReceivePacket+0x68>)
 800b610:	7819      	ldrb	r1, [r3, #0]
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b618:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f005 f87d 	bl	801071c <USBD_LL_PrepareReceive>
 800b622:	e008      	b.n	800b636 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b624:	4b06      	ldr	r3, [pc, #24]	; (800b640 <USBD_CDC_ReceivePacket+0x68>)
 800b626:	7819      	ldrb	r1, [r3, #0]
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b62e:	2340      	movs	r3, #64	; 0x40
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f005 f873 	bl	801071c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b636:	2300      	movs	r3, #0
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3710      	adds	r7, #16
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}
 800b640:	20000098 	.word	0x20000098

0800b644 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b086      	sub	sp, #24
 800b648:	af00      	add	r7, sp, #0
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	60b9      	str	r1, [r7, #8]
 800b64e:	4613      	mov	r3, r2
 800b650:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d101      	bne.n	800b65c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b658:	2303      	movs	r3, #3
 800b65a:	e01f      	b.n	800b69c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	2200      	movs	r2, #0
 800b660:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	2200      	movs	r2, #0
 800b668:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2200      	movs	r2, #0
 800b670:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d003      	beq.n	800b682 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	68ba      	ldr	r2, [r7, #8]
 800b67e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	2201      	movs	r2, #1
 800b686:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	79fa      	ldrb	r2, [r7, #7]
 800b68e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b690:	68f8      	ldr	r0, [r7, #12]
 800b692:	f004 feed 	bl	8010470 <USBD_LL_Init>
 800b696:	4603      	mov	r3, r0
 800b698:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b69a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3718      	adds	r7, #24
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}

0800b6a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b084      	sub	sp, #16
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
 800b6ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d101      	bne.n	800b6bc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b6b8:	2303      	movs	r3, #3
 800b6ba:	e025      	b.n	800b708 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	683a      	ldr	r2, [r7, #0]
 800b6c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	32ae      	adds	r2, #174	; 0xae
 800b6ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d00f      	beq.n	800b6f8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	32ae      	adds	r2, #174	; 0xae
 800b6e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6e8:	f107 020e 	add.w	r2, r7, #14
 800b6ec:	4610      	mov	r0, r2
 800b6ee:	4798      	blx	r3
 800b6f0:	4602      	mov	r2, r0
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b6fe:	1c5a      	adds	r2, r3, #1
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b706:	2300      	movs	r3, #0
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3710      	adds	r7, #16
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}

0800b710 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b082      	sub	sp, #8
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f004 fef5 	bl	8010508 <USBD_LL_Start>
 800b71e:	4603      	mov	r3, r0
}
 800b720:	4618      	mov	r0, r3
 800b722:	3708      	adds	r7, #8
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}

0800b728 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b728:	b480      	push	{r7}
 800b72a:	b083      	sub	sp, #12
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b730:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b732:	4618      	mov	r0, r3
 800b734:	370c      	adds	r7, #12
 800b736:	46bd      	mov	sp, r7
 800b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73c:	4770      	bx	lr

0800b73e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b73e:	b580      	push	{r7, lr}
 800b740:	b084      	sub	sp, #16
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
 800b746:	460b      	mov	r3, r1
 800b748:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b74a:	2300      	movs	r3, #0
 800b74c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b754:	2b00      	cmp	r3, #0
 800b756:	d009      	beq.n	800b76c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	78fa      	ldrb	r2, [r7, #3]
 800b762:	4611      	mov	r1, r2
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	4798      	blx	r3
 800b768:	4603      	mov	r3, r0
 800b76a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b76c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3710      	adds	r7, #16
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}

0800b776 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b776:	b580      	push	{r7, lr}
 800b778:	b084      	sub	sp, #16
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
 800b77e:	460b      	mov	r3, r1
 800b780:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b782:	2300      	movs	r3, #0
 800b784:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b78c:	685b      	ldr	r3, [r3, #4]
 800b78e:	78fa      	ldrb	r2, [r7, #3]
 800b790:	4611      	mov	r1, r2
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	4798      	blx	r3
 800b796:	4603      	mov	r3, r0
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d001      	beq.n	800b7a0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b79c:	2303      	movs	r3, #3
 800b79e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b7a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3710      	adds	r7, #16
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}

0800b7aa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b7aa:	b580      	push	{r7, lr}
 800b7ac:	b084      	sub	sp, #16
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	6078      	str	r0, [r7, #4]
 800b7b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b7ba:	6839      	ldr	r1, [r7, #0]
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f001 f932 	bl	800ca26 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b7de:	f003 031f 	and.w	r3, r3, #31
 800b7e2:	2b02      	cmp	r3, #2
 800b7e4:	d01a      	beq.n	800b81c <USBD_LL_SetupStage+0x72>
 800b7e6:	2b02      	cmp	r3, #2
 800b7e8:	d822      	bhi.n	800b830 <USBD_LL_SetupStage+0x86>
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d002      	beq.n	800b7f4 <USBD_LL_SetupStage+0x4a>
 800b7ee:	2b01      	cmp	r3, #1
 800b7f0:	d00a      	beq.n	800b808 <USBD_LL_SetupStage+0x5e>
 800b7f2:	e01d      	b.n	800b830 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f000 fb5f 	bl	800bec0 <USBD_StdDevReq>
 800b802:	4603      	mov	r3, r0
 800b804:	73fb      	strb	r3, [r7, #15]
      break;
 800b806:	e020      	b.n	800b84a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b80e:	4619      	mov	r1, r3
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f000 fbc7 	bl	800bfa4 <USBD_StdItfReq>
 800b816:	4603      	mov	r3, r0
 800b818:	73fb      	strb	r3, [r7, #15]
      break;
 800b81a:	e016      	b.n	800b84a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b822:	4619      	mov	r1, r3
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f000 fc29 	bl	800c07c <USBD_StdEPReq>
 800b82a:	4603      	mov	r3, r0
 800b82c:	73fb      	strb	r3, [r7, #15]
      break;
 800b82e:	e00c      	b.n	800b84a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b836:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b83a:	b2db      	uxtb	r3, r3
 800b83c:	4619      	mov	r1, r3
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f004 fec2 	bl	80105c8 <USBD_LL_StallEP>
 800b844:	4603      	mov	r3, r0
 800b846:	73fb      	strb	r3, [r7, #15]
      break;
 800b848:	bf00      	nop
  }

  return ret;
 800b84a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3710      	adds	r7, #16
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b086      	sub	sp, #24
 800b858:	af00      	add	r7, sp, #0
 800b85a:	60f8      	str	r0, [r7, #12]
 800b85c:	460b      	mov	r3, r1
 800b85e:	607a      	str	r2, [r7, #4]
 800b860:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b862:	2300      	movs	r3, #0
 800b864:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b866:	7afb      	ldrb	r3, [r7, #11]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d16e      	bne.n	800b94a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b872:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b87a:	2b03      	cmp	r3, #3
 800b87c:	f040 8098 	bne.w	800b9b0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	689a      	ldr	r2, [r3, #8]
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	68db      	ldr	r3, [r3, #12]
 800b888:	429a      	cmp	r2, r3
 800b88a:	d913      	bls.n	800b8b4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	689a      	ldr	r2, [r3, #8]
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	68db      	ldr	r3, [r3, #12]
 800b894:	1ad2      	subs	r2, r2, r3
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	68da      	ldr	r2, [r3, #12]
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	689b      	ldr	r3, [r3, #8]
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	bf28      	it	cs
 800b8a6:	4613      	movcs	r3, r2
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	6879      	ldr	r1, [r7, #4]
 800b8ac:	68f8      	ldr	r0, [r7, #12]
 800b8ae:	f001 f9ae 	bl	800cc0e <USBD_CtlContinueRx>
 800b8b2:	e07d      	b.n	800b9b0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b8ba:	f003 031f 	and.w	r3, r3, #31
 800b8be:	2b02      	cmp	r3, #2
 800b8c0:	d014      	beq.n	800b8ec <USBD_LL_DataOutStage+0x98>
 800b8c2:	2b02      	cmp	r3, #2
 800b8c4:	d81d      	bhi.n	800b902 <USBD_LL_DataOutStage+0xae>
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d002      	beq.n	800b8d0 <USBD_LL_DataOutStage+0x7c>
 800b8ca:	2b01      	cmp	r3, #1
 800b8cc:	d003      	beq.n	800b8d6 <USBD_LL_DataOutStage+0x82>
 800b8ce:	e018      	b.n	800b902 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	75bb      	strb	r3, [r7, #22]
            break;
 800b8d4:	e018      	b.n	800b908 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b8dc:	b2db      	uxtb	r3, r3
 800b8de:	4619      	mov	r1, r3
 800b8e0:	68f8      	ldr	r0, [r7, #12]
 800b8e2:	f000 fa5e 	bl	800bda2 <USBD_CoreFindIF>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	75bb      	strb	r3, [r7, #22]
            break;
 800b8ea:	e00d      	b.n	800b908 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b8f2:	b2db      	uxtb	r3, r3
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	68f8      	ldr	r0, [r7, #12]
 800b8f8:	f000 fa60 	bl	800bdbc <USBD_CoreFindEP>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	75bb      	strb	r3, [r7, #22]
            break;
 800b900:	e002      	b.n	800b908 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b902:	2300      	movs	r3, #0
 800b904:	75bb      	strb	r3, [r7, #22]
            break;
 800b906:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b908:	7dbb      	ldrb	r3, [r7, #22]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d119      	bne.n	800b942 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b914:	b2db      	uxtb	r3, r3
 800b916:	2b03      	cmp	r3, #3
 800b918:	d113      	bne.n	800b942 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b91a:	7dba      	ldrb	r2, [r7, #22]
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	32ae      	adds	r2, #174	; 0xae
 800b920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b924:	691b      	ldr	r3, [r3, #16]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d00b      	beq.n	800b942 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b92a:	7dba      	ldrb	r2, [r7, #22]
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b932:	7dba      	ldrb	r2, [r7, #22]
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	32ae      	adds	r2, #174	; 0xae
 800b938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b93c:	691b      	ldr	r3, [r3, #16]
 800b93e:	68f8      	ldr	r0, [r7, #12]
 800b940:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b942:	68f8      	ldr	r0, [r7, #12]
 800b944:	f001 f974 	bl	800cc30 <USBD_CtlSendStatus>
 800b948:	e032      	b.n	800b9b0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b94a:	7afb      	ldrb	r3, [r7, #11]
 800b94c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b950:	b2db      	uxtb	r3, r3
 800b952:	4619      	mov	r1, r3
 800b954:	68f8      	ldr	r0, [r7, #12]
 800b956:	f000 fa31 	bl	800bdbc <USBD_CoreFindEP>
 800b95a:	4603      	mov	r3, r0
 800b95c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b95e:	7dbb      	ldrb	r3, [r7, #22]
 800b960:	2bff      	cmp	r3, #255	; 0xff
 800b962:	d025      	beq.n	800b9b0 <USBD_LL_DataOutStage+0x15c>
 800b964:	7dbb      	ldrb	r3, [r7, #22]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d122      	bne.n	800b9b0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b970:	b2db      	uxtb	r3, r3
 800b972:	2b03      	cmp	r3, #3
 800b974:	d117      	bne.n	800b9a6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b976:	7dba      	ldrb	r2, [r7, #22]
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	32ae      	adds	r2, #174	; 0xae
 800b97c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b980:	699b      	ldr	r3, [r3, #24]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d00f      	beq.n	800b9a6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b986:	7dba      	ldrb	r2, [r7, #22]
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b98e:	7dba      	ldrb	r2, [r7, #22]
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	32ae      	adds	r2, #174	; 0xae
 800b994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b998:	699b      	ldr	r3, [r3, #24]
 800b99a:	7afa      	ldrb	r2, [r7, #11]
 800b99c:	4611      	mov	r1, r2
 800b99e:	68f8      	ldr	r0, [r7, #12]
 800b9a0:	4798      	blx	r3
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b9a6:	7dfb      	ldrb	r3, [r7, #23]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d001      	beq.n	800b9b0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b9ac:	7dfb      	ldrb	r3, [r7, #23]
 800b9ae:	e000      	b.n	800b9b2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b9b0:	2300      	movs	r3, #0
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	3718      	adds	r7, #24
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}

0800b9ba <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b9ba:	b580      	push	{r7, lr}
 800b9bc:	b086      	sub	sp, #24
 800b9be:	af00      	add	r7, sp, #0
 800b9c0:	60f8      	str	r0, [r7, #12]
 800b9c2:	460b      	mov	r3, r1
 800b9c4:	607a      	str	r2, [r7, #4]
 800b9c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b9c8:	7afb      	ldrb	r3, [r7, #11]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d16f      	bne.n	800baae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	3314      	adds	r3, #20
 800b9d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b9da:	2b02      	cmp	r3, #2
 800b9dc:	d15a      	bne.n	800ba94 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	689a      	ldr	r2, [r3, #8]
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	68db      	ldr	r3, [r3, #12]
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d914      	bls.n	800ba14 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	689a      	ldr	r2, [r3, #8]
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	68db      	ldr	r3, [r3, #12]
 800b9f2:	1ad2      	subs	r2, r2, r3
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	689b      	ldr	r3, [r3, #8]
 800b9fc:	461a      	mov	r2, r3
 800b9fe:	6879      	ldr	r1, [r7, #4]
 800ba00:	68f8      	ldr	r0, [r7, #12]
 800ba02:	f001 f8d6 	bl	800cbb2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba06:	2300      	movs	r3, #0
 800ba08:	2200      	movs	r2, #0
 800ba0a:	2100      	movs	r1, #0
 800ba0c:	68f8      	ldr	r0, [r7, #12]
 800ba0e:	f004 fe85 	bl	801071c <USBD_LL_PrepareReceive>
 800ba12:	e03f      	b.n	800ba94 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	68da      	ldr	r2, [r3, #12]
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	689b      	ldr	r3, [r3, #8]
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d11c      	bne.n	800ba5a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	685a      	ldr	r2, [r3, #4]
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d316      	bcc.n	800ba5a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	685a      	ldr	r2, [r3, #4]
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d20f      	bcs.n	800ba5a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	2100      	movs	r1, #0
 800ba3e:	68f8      	ldr	r0, [r7, #12]
 800ba40:	f001 f8b7 	bl	800cbb2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2200      	movs	r2, #0
 800ba48:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	2200      	movs	r2, #0
 800ba50:	2100      	movs	r1, #0
 800ba52:	68f8      	ldr	r0, [r7, #12]
 800ba54:	f004 fe62 	bl	801071c <USBD_LL_PrepareReceive>
 800ba58:	e01c      	b.n	800ba94 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba60:	b2db      	uxtb	r3, r3
 800ba62:	2b03      	cmp	r3, #3
 800ba64:	d10f      	bne.n	800ba86 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba6c:	68db      	ldr	r3, [r3, #12]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d009      	beq.n	800ba86 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	2200      	movs	r2, #0
 800ba76:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba80:	68db      	ldr	r3, [r3, #12]
 800ba82:	68f8      	ldr	r0, [r7, #12]
 800ba84:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba86:	2180      	movs	r1, #128	; 0x80
 800ba88:	68f8      	ldr	r0, [r7, #12]
 800ba8a:	f004 fd9d 	bl	80105c8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ba8e:	68f8      	ldr	r0, [r7, #12]
 800ba90:	f001 f8e1 	bl	800cc56 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d03a      	beq.n	800bb14 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ba9e:	68f8      	ldr	r0, [r7, #12]
 800baa0:	f7ff fe42 	bl	800b728 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2200      	movs	r2, #0
 800baa8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800baac:	e032      	b.n	800bb14 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800baae:	7afb      	ldrb	r3, [r7, #11]
 800bab0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bab4:	b2db      	uxtb	r3, r3
 800bab6:	4619      	mov	r1, r3
 800bab8:	68f8      	ldr	r0, [r7, #12]
 800baba:	f000 f97f 	bl	800bdbc <USBD_CoreFindEP>
 800babe:	4603      	mov	r3, r0
 800bac0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bac2:	7dfb      	ldrb	r3, [r7, #23]
 800bac4:	2bff      	cmp	r3, #255	; 0xff
 800bac6:	d025      	beq.n	800bb14 <USBD_LL_DataInStage+0x15a>
 800bac8:	7dfb      	ldrb	r3, [r7, #23]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d122      	bne.n	800bb14 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bad4:	b2db      	uxtb	r3, r3
 800bad6:	2b03      	cmp	r3, #3
 800bad8:	d11c      	bne.n	800bb14 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bada:	7dfa      	ldrb	r2, [r7, #23]
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	32ae      	adds	r2, #174	; 0xae
 800bae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bae4:	695b      	ldr	r3, [r3, #20]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d014      	beq.n	800bb14 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800baea:	7dfa      	ldrb	r2, [r7, #23]
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800baf2:	7dfa      	ldrb	r2, [r7, #23]
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	32ae      	adds	r2, #174	; 0xae
 800baf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bafc:	695b      	ldr	r3, [r3, #20]
 800bafe:	7afa      	ldrb	r2, [r7, #11]
 800bb00:	4611      	mov	r1, r2
 800bb02:	68f8      	ldr	r0, [r7, #12]
 800bb04:	4798      	blx	r3
 800bb06:	4603      	mov	r3, r0
 800bb08:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bb0a:	7dbb      	ldrb	r3, [r7, #22]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d001      	beq.n	800bb14 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bb10:	7dbb      	ldrb	r3, [r7, #22]
 800bb12:	e000      	b.n	800bb16 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bb14:	2300      	movs	r3, #0
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3718      	adds	r7, #24
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}

0800bb1e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bb1e:	b580      	push	{r7, lr}
 800bb20:	b084      	sub	sp, #16
 800bb22:	af00      	add	r7, sp, #0
 800bb24:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb26:	2300      	movs	r3, #0
 800bb28:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2201      	movs	r2, #1
 800bb2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2200      	movs	r2, #0
 800bb36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2200      	movs	r2, #0
 800bb44:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d014      	beq.n	800bb84 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d00e      	beq.n	800bb84 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	687a      	ldr	r2, [r7, #4]
 800bb70:	6852      	ldr	r2, [r2, #4]
 800bb72:	b2d2      	uxtb	r2, r2
 800bb74:	4611      	mov	r1, r2
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	4798      	blx	r3
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d001      	beq.n	800bb84 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bb80:	2303      	movs	r3, #3
 800bb82:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bb84:	2340      	movs	r3, #64	; 0x40
 800bb86:	2200      	movs	r2, #0
 800bb88:	2100      	movs	r1, #0
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f004 fcd7 	bl	801053e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2201      	movs	r2, #1
 800bb94:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2240      	movs	r2, #64	; 0x40
 800bb9c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bba0:	2340      	movs	r3, #64	; 0x40
 800bba2:	2200      	movs	r2, #0
 800bba4:	2180      	movs	r1, #128	; 0x80
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f004 fcc9 	bl	801053e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2201      	movs	r2, #1
 800bbb0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2240      	movs	r2, #64	; 0x40
 800bbb6:	621a      	str	r2, [r3, #32]

  return ret;
 800bbb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3710      	adds	r7, #16
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}

0800bbc2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bbc2:	b480      	push	{r7}
 800bbc4:	b083      	sub	sp, #12
 800bbc6:	af00      	add	r7, sp, #0
 800bbc8:	6078      	str	r0, [r7, #4]
 800bbca:	460b      	mov	r3, r1
 800bbcc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	78fa      	ldrb	r2, [r7, #3]
 800bbd2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bbd4:	2300      	movs	r3, #0
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	370c      	adds	r7, #12
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe0:	4770      	bx	lr

0800bbe2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bbe2:	b480      	push	{r7}
 800bbe4:	b083      	sub	sp, #12
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbf0:	b2da      	uxtb	r2, r3
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2204      	movs	r2, #4
 800bbfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bc00:	2300      	movs	r3, #0
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	370c      	adds	r7, #12
 800bc06:	46bd      	mov	sp, r7
 800bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0c:	4770      	bx	lr

0800bc0e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bc0e:	b480      	push	{r7}
 800bc10:	b083      	sub	sp, #12
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc1c:	b2db      	uxtb	r3, r3
 800bc1e:	2b04      	cmp	r3, #4
 800bc20:	d106      	bne.n	800bc30 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bc28:	b2da      	uxtb	r2, r3
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bc30:	2300      	movs	r3, #0
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	370c      	adds	r7, #12
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr

0800bc3e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bc3e:	b580      	push	{r7, lr}
 800bc40:	b082      	sub	sp, #8
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc4c:	b2db      	uxtb	r3, r3
 800bc4e:	2b03      	cmp	r3, #3
 800bc50:	d110      	bne.n	800bc74 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d00b      	beq.n	800bc74 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc62:	69db      	ldr	r3, [r3, #28]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d005      	beq.n	800bc74 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc6e:	69db      	ldr	r3, [r3, #28]
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bc74:	2300      	movs	r3, #0
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3708      	adds	r7, #8
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}

0800bc7e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bc7e:	b580      	push	{r7, lr}
 800bc80:	b082      	sub	sp, #8
 800bc82:	af00      	add	r7, sp, #0
 800bc84:	6078      	str	r0, [r7, #4]
 800bc86:	460b      	mov	r3, r1
 800bc88:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	32ae      	adds	r2, #174	; 0xae
 800bc94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d101      	bne.n	800bca0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bc9c:	2303      	movs	r3, #3
 800bc9e:	e01c      	b.n	800bcda <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bca6:	b2db      	uxtb	r3, r3
 800bca8:	2b03      	cmp	r3, #3
 800bcaa:	d115      	bne.n	800bcd8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	32ae      	adds	r2, #174	; 0xae
 800bcb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcba:	6a1b      	ldr	r3, [r3, #32]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d00b      	beq.n	800bcd8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	32ae      	adds	r2, #174	; 0xae
 800bcca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcce:	6a1b      	ldr	r3, [r3, #32]
 800bcd0:	78fa      	ldrb	r2, [r7, #3]
 800bcd2:	4611      	mov	r1, r2
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bcd8:	2300      	movs	r3, #0
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3708      	adds	r7, #8
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}

0800bce2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bce2:	b580      	push	{r7, lr}
 800bce4:	b082      	sub	sp, #8
 800bce6:	af00      	add	r7, sp, #0
 800bce8:	6078      	str	r0, [r7, #4]
 800bcea:	460b      	mov	r3, r1
 800bcec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	32ae      	adds	r2, #174	; 0xae
 800bcf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d101      	bne.n	800bd04 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bd00:	2303      	movs	r3, #3
 800bd02:	e01c      	b.n	800bd3e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd0a:	b2db      	uxtb	r3, r3
 800bd0c:	2b03      	cmp	r3, #3
 800bd0e:	d115      	bne.n	800bd3c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	32ae      	adds	r2, #174	; 0xae
 800bd1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d00b      	beq.n	800bd3c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	32ae      	adds	r2, #174	; 0xae
 800bd2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd34:	78fa      	ldrb	r2, [r7, #3]
 800bd36:	4611      	mov	r1, r2
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bd3c:	2300      	movs	r3, #0
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	3708      	adds	r7, #8
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}

0800bd46 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bd46:	b480      	push	{r7}
 800bd48:	b083      	sub	sp, #12
 800bd4a:	af00      	add	r7, sp, #0
 800bd4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bd4e:	2300      	movs	r3, #0
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	370c      	adds	r7, #12
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr

0800bd5c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b084      	sub	sp, #16
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bd64:	2300      	movs	r3, #0
 800bd66:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d00e      	beq.n	800bd98 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd80:	685b      	ldr	r3, [r3, #4]
 800bd82:	687a      	ldr	r2, [r7, #4]
 800bd84:	6852      	ldr	r2, [r2, #4]
 800bd86:	b2d2      	uxtb	r2, r2
 800bd88:	4611      	mov	r1, r2
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	4798      	blx	r3
 800bd8e:	4603      	mov	r3, r0
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d001      	beq.n	800bd98 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bd94:	2303      	movs	r3, #3
 800bd96:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bd98:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3710      	adds	r7, #16
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}

0800bda2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bda2:	b480      	push	{r7}
 800bda4:	b083      	sub	sp, #12
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	6078      	str	r0, [r7, #4]
 800bdaa:	460b      	mov	r3, r1
 800bdac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bdae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	370c      	adds	r7, #12
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr

0800bdbc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b083      	sub	sp, #12
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	460b      	mov	r3, r1
 800bdc6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bdc8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	370c      	adds	r7, #12
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd4:	4770      	bx	lr

0800bdd6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bdd6:	b580      	push	{r7, lr}
 800bdd8:	b086      	sub	sp, #24
 800bdda:	af00      	add	r7, sp, #0
 800bddc:	6078      	str	r0, [r7, #4]
 800bdde:	460b      	mov	r3, r1
 800bde0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bdea:	2300      	movs	r3, #0
 800bdec:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	885b      	ldrh	r3, [r3, #2]
 800bdf2:	b29a      	uxth	r2, r3
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	781b      	ldrb	r3, [r3, #0]
 800bdf8:	b29b      	uxth	r3, r3
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	d920      	bls.n	800be40 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	b29b      	uxth	r3, r3
 800be04:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800be06:	e013      	b.n	800be30 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800be08:	f107 030a 	add.w	r3, r7, #10
 800be0c:	4619      	mov	r1, r3
 800be0e:	6978      	ldr	r0, [r7, #20]
 800be10:	f000 f81b 	bl	800be4a <USBD_GetNextDesc>
 800be14:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	785b      	ldrb	r3, [r3, #1]
 800be1a:	2b05      	cmp	r3, #5
 800be1c:	d108      	bne.n	800be30 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	789b      	ldrb	r3, [r3, #2]
 800be26:	78fa      	ldrb	r2, [r7, #3]
 800be28:	429a      	cmp	r2, r3
 800be2a:	d008      	beq.n	800be3e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800be2c:	2300      	movs	r3, #0
 800be2e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	885b      	ldrh	r3, [r3, #2]
 800be34:	b29a      	uxth	r2, r3
 800be36:	897b      	ldrh	r3, [r7, #10]
 800be38:	429a      	cmp	r2, r3
 800be3a:	d8e5      	bhi.n	800be08 <USBD_GetEpDesc+0x32>
 800be3c:	e000      	b.n	800be40 <USBD_GetEpDesc+0x6a>
          break;
 800be3e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800be40:	693b      	ldr	r3, [r7, #16]
}
 800be42:	4618      	mov	r0, r3
 800be44:	3718      	adds	r7, #24
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}

0800be4a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800be4a:	b480      	push	{r7}
 800be4c:	b085      	sub	sp, #20
 800be4e:	af00      	add	r7, sp, #0
 800be50:	6078      	str	r0, [r7, #4]
 800be52:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	881a      	ldrh	r2, [r3, #0]
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	781b      	ldrb	r3, [r3, #0]
 800be60:	b29b      	uxth	r3, r3
 800be62:	4413      	add	r3, r2
 800be64:	b29a      	uxth	r2, r3
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	461a      	mov	r2, r3
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	4413      	add	r3, r2
 800be74:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800be76:	68fb      	ldr	r3, [r7, #12]
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3714      	adds	r7, #20
 800be7c:	46bd      	mov	sp, r7
 800be7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be82:	4770      	bx	lr

0800be84 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800be84:	b480      	push	{r7}
 800be86:	b087      	sub	sp, #28
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	781b      	ldrb	r3, [r3, #0]
 800be94:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	3301      	adds	r3, #1
 800be9a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	781b      	ldrb	r3, [r3, #0]
 800bea0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bea2:	8a3b      	ldrh	r3, [r7, #16]
 800bea4:	021b      	lsls	r3, r3, #8
 800bea6:	b21a      	sxth	r2, r3
 800bea8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800beac:	4313      	orrs	r3, r2
 800beae:	b21b      	sxth	r3, r3
 800beb0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800beb2:	89fb      	ldrh	r3, [r7, #14]
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	371c      	adds	r7, #28
 800beb8:	46bd      	mov	sp, r7
 800beba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebe:	4770      	bx	lr

0800bec0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800beca:	2300      	movs	r3, #0
 800becc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bed6:	2b40      	cmp	r3, #64	; 0x40
 800bed8:	d005      	beq.n	800bee6 <USBD_StdDevReq+0x26>
 800beda:	2b40      	cmp	r3, #64	; 0x40
 800bedc:	d857      	bhi.n	800bf8e <USBD_StdDevReq+0xce>
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d00f      	beq.n	800bf02 <USBD_StdDevReq+0x42>
 800bee2:	2b20      	cmp	r3, #32
 800bee4:	d153      	bne.n	800bf8e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	32ae      	adds	r2, #174	; 0xae
 800bef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bef4:	689b      	ldr	r3, [r3, #8]
 800bef6:	6839      	ldr	r1, [r7, #0]
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	4798      	blx	r3
 800befc:	4603      	mov	r3, r0
 800befe:	73fb      	strb	r3, [r7, #15]
      break;
 800bf00:	e04a      	b.n	800bf98 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	785b      	ldrb	r3, [r3, #1]
 800bf06:	2b09      	cmp	r3, #9
 800bf08:	d83b      	bhi.n	800bf82 <USBD_StdDevReq+0xc2>
 800bf0a:	a201      	add	r2, pc, #4	; (adr r2, 800bf10 <USBD_StdDevReq+0x50>)
 800bf0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf10:	0800bf65 	.word	0x0800bf65
 800bf14:	0800bf79 	.word	0x0800bf79
 800bf18:	0800bf83 	.word	0x0800bf83
 800bf1c:	0800bf6f 	.word	0x0800bf6f
 800bf20:	0800bf83 	.word	0x0800bf83
 800bf24:	0800bf43 	.word	0x0800bf43
 800bf28:	0800bf39 	.word	0x0800bf39
 800bf2c:	0800bf83 	.word	0x0800bf83
 800bf30:	0800bf5b 	.word	0x0800bf5b
 800bf34:	0800bf4d 	.word	0x0800bf4d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bf38:	6839      	ldr	r1, [r7, #0]
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f000 fa3c 	bl	800c3b8 <USBD_GetDescriptor>
          break;
 800bf40:	e024      	b.n	800bf8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bf42:	6839      	ldr	r1, [r7, #0]
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f000 fbcb 	bl	800c6e0 <USBD_SetAddress>
          break;
 800bf4a:	e01f      	b.n	800bf8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bf4c:	6839      	ldr	r1, [r7, #0]
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f000 fc0a 	bl	800c768 <USBD_SetConfig>
 800bf54:	4603      	mov	r3, r0
 800bf56:	73fb      	strb	r3, [r7, #15]
          break;
 800bf58:	e018      	b.n	800bf8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bf5a:	6839      	ldr	r1, [r7, #0]
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f000 fcad 	bl	800c8bc <USBD_GetConfig>
          break;
 800bf62:	e013      	b.n	800bf8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bf64:	6839      	ldr	r1, [r7, #0]
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f000 fcde 	bl	800c928 <USBD_GetStatus>
          break;
 800bf6c:	e00e      	b.n	800bf8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bf6e:	6839      	ldr	r1, [r7, #0]
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f000 fd0d 	bl	800c990 <USBD_SetFeature>
          break;
 800bf76:	e009      	b.n	800bf8c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bf78:	6839      	ldr	r1, [r7, #0]
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f000 fd31 	bl	800c9e2 <USBD_ClrFeature>
          break;
 800bf80:	e004      	b.n	800bf8c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bf82:	6839      	ldr	r1, [r7, #0]
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f000 fd88 	bl	800ca9a <USBD_CtlError>
          break;
 800bf8a:	bf00      	nop
      }
      break;
 800bf8c:	e004      	b.n	800bf98 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bf8e:	6839      	ldr	r1, [r7, #0]
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f000 fd82 	bl	800ca9a <USBD_CtlError>
      break;
 800bf96:	bf00      	nop
  }

  return ret;
 800bf98:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3710      	adds	r7, #16
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}
 800bfa2:	bf00      	nop

0800bfa4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b084      	sub	sp, #16
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bfba:	2b40      	cmp	r3, #64	; 0x40
 800bfbc:	d005      	beq.n	800bfca <USBD_StdItfReq+0x26>
 800bfbe:	2b40      	cmp	r3, #64	; 0x40
 800bfc0:	d852      	bhi.n	800c068 <USBD_StdItfReq+0xc4>
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d001      	beq.n	800bfca <USBD_StdItfReq+0x26>
 800bfc6:	2b20      	cmp	r3, #32
 800bfc8:	d14e      	bne.n	800c068 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfd0:	b2db      	uxtb	r3, r3
 800bfd2:	3b01      	subs	r3, #1
 800bfd4:	2b02      	cmp	r3, #2
 800bfd6:	d840      	bhi.n	800c05a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	889b      	ldrh	r3, [r3, #4]
 800bfdc:	b2db      	uxtb	r3, r3
 800bfde:	2b01      	cmp	r3, #1
 800bfe0:	d836      	bhi.n	800c050 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	889b      	ldrh	r3, [r3, #4]
 800bfe6:	b2db      	uxtb	r3, r3
 800bfe8:	4619      	mov	r1, r3
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f7ff fed9 	bl	800bda2 <USBD_CoreFindIF>
 800bff0:	4603      	mov	r3, r0
 800bff2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bff4:	7bbb      	ldrb	r3, [r7, #14]
 800bff6:	2bff      	cmp	r3, #255	; 0xff
 800bff8:	d01d      	beq.n	800c036 <USBD_StdItfReq+0x92>
 800bffa:	7bbb      	ldrb	r3, [r7, #14]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d11a      	bne.n	800c036 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c000:	7bba      	ldrb	r2, [r7, #14]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	32ae      	adds	r2, #174	; 0xae
 800c006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c00a:	689b      	ldr	r3, [r3, #8]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d00f      	beq.n	800c030 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c010:	7bba      	ldrb	r2, [r7, #14]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c018:	7bba      	ldrb	r2, [r7, #14]
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	32ae      	adds	r2, #174	; 0xae
 800c01e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c022:	689b      	ldr	r3, [r3, #8]
 800c024:	6839      	ldr	r1, [r7, #0]
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	4798      	blx	r3
 800c02a:	4603      	mov	r3, r0
 800c02c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c02e:	e004      	b.n	800c03a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c030:	2303      	movs	r3, #3
 800c032:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c034:	e001      	b.n	800c03a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c036:	2303      	movs	r3, #3
 800c038:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	88db      	ldrh	r3, [r3, #6]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d110      	bne.n	800c064 <USBD_StdItfReq+0xc0>
 800c042:	7bfb      	ldrb	r3, [r7, #15]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d10d      	bne.n	800c064 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f000 fdf1 	bl	800cc30 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c04e:	e009      	b.n	800c064 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c050:	6839      	ldr	r1, [r7, #0]
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f000 fd21 	bl	800ca9a <USBD_CtlError>
          break;
 800c058:	e004      	b.n	800c064 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c05a:	6839      	ldr	r1, [r7, #0]
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f000 fd1c 	bl	800ca9a <USBD_CtlError>
          break;
 800c062:	e000      	b.n	800c066 <USBD_StdItfReq+0xc2>
          break;
 800c064:	bf00      	nop
      }
      break;
 800c066:	e004      	b.n	800c072 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c068:	6839      	ldr	r1, [r7, #0]
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f000 fd15 	bl	800ca9a <USBD_CtlError>
      break;
 800c070:	bf00      	nop
  }

  return ret;
 800c072:	7bfb      	ldrb	r3, [r7, #15]
}
 800c074:	4618      	mov	r0, r3
 800c076:	3710      	adds	r7, #16
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}

0800c07c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b084      	sub	sp, #16
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c086:	2300      	movs	r3, #0
 800c088:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	889b      	ldrh	r3, [r3, #4]
 800c08e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	781b      	ldrb	r3, [r3, #0]
 800c094:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c098:	2b40      	cmp	r3, #64	; 0x40
 800c09a:	d007      	beq.n	800c0ac <USBD_StdEPReq+0x30>
 800c09c:	2b40      	cmp	r3, #64	; 0x40
 800c09e:	f200 817f 	bhi.w	800c3a0 <USBD_StdEPReq+0x324>
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d02a      	beq.n	800c0fc <USBD_StdEPReq+0x80>
 800c0a6:	2b20      	cmp	r3, #32
 800c0a8:	f040 817a 	bne.w	800c3a0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c0ac:	7bbb      	ldrb	r3, [r7, #14]
 800c0ae:	4619      	mov	r1, r3
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f7ff fe83 	bl	800bdbc <USBD_CoreFindEP>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c0ba:	7b7b      	ldrb	r3, [r7, #13]
 800c0bc:	2bff      	cmp	r3, #255	; 0xff
 800c0be:	f000 8174 	beq.w	800c3aa <USBD_StdEPReq+0x32e>
 800c0c2:	7b7b      	ldrb	r3, [r7, #13]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	f040 8170 	bne.w	800c3aa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c0ca:	7b7a      	ldrb	r2, [r7, #13]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c0d2:	7b7a      	ldrb	r2, [r7, #13]
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	32ae      	adds	r2, #174	; 0xae
 800c0d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0dc:	689b      	ldr	r3, [r3, #8]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	f000 8163 	beq.w	800c3aa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c0e4:	7b7a      	ldrb	r2, [r7, #13]
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	32ae      	adds	r2, #174	; 0xae
 800c0ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0ee:	689b      	ldr	r3, [r3, #8]
 800c0f0:	6839      	ldr	r1, [r7, #0]
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	4798      	blx	r3
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c0fa:	e156      	b.n	800c3aa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	785b      	ldrb	r3, [r3, #1]
 800c100:	2b03      	cmp	r3, #3
 800c102:	d008      	beq.n	800c116 <USBD_StdEPReq+0x9a>
 800c104:	2b03      	cmp	r3, #3
 800c106:	f300 8145 	bgt.w	800c394 <USBD_StdEPReq+0x318>
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	f000 809b 	beq.w	800c246 <USBD_StdEPReq+0x1ca>
 800c110:	2b01      	cmp	r3, #1
 800c112:	d03c      	beq.n	800c18e <USBD_StdEPReq+0x112>
 800c114:	e13e      	b.n	800c394 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c11c:	b2db      	uxtb	r3, r3
 800c11e:	2b02      	cmp	r3, #2
 800c120:	d002      	beq.n	800c128 <USBD_StdEPReq+0xac>
 800c122:	2b03      	cmp	r3, #3
 800c124:	d016      	beq.n	800c154 <USBD_StdEPReq+0xd8>
 800c126:	e02c      	b.n	800c182 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c128:	7bbb      	ldrb	r3, [r7, #14]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d00d      	beq.n	800c14a <USBD_StdEPReq+0xce>
 800c12e:	7bbb      	ldrb	r3, [r7, #14]
 800c130:	2b80      	cmp	r3, #128	; 0x80
 800c132:	d00a      	beq.n	800c14a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c134:	7bbb      	ldrb	r3, [r7, #14]
 800c136:	4619      	mov	r1, r3
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f004 fa45 	bl	80105c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c13e:	2180      	movs	r1, #128	; 0x80
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f004 fa41 	bl	80105c8 <USBD_LL_StallEP>
 800c146:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c148:	e020      	b.n	800c18c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c14a:	6839      	ldr	r1, [r7, #0]
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f000 fca4 	bl	800ca9a <USBD_CtlError>
              break;
 800c152:	e01b      	b.n	800c18c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	885b      	ldrh	r3, [r3, #2]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d10e      	bne.n	800c17a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c15c:	7bbb      	ldrb	r3, [r7, #14]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d00b      	beq.n	800c17a <USBD_StdEPReq+0xfe>
 800c162:	7bbb      	ldrb	r3, [r7, #14]
 800c164:	2b80      	cmp	r3, #128	; 0x80
 800c166:	d008      	beq.n	800c17a <USBD_StdEPReq+0xfe>
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	88db      	ldrh	r3, [r3, #6]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d104      	bne.n	800c17a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c170:	7bbb      	ldrb	r3, [r7, #14]
 800c172:	4619      	mov	r1, r3
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f004 fa27 	bl	80105c8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 fd58 	bl	800cc30 <USBD_CtlSendStatus>

              break;
 800c180:	e004      	b.n	800c18c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c182:	6839      	ldr	r1, [r7, #0]
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f000 fc88 	bl	800ca9a <USBD_CtlError>
              break;
 800c18a:	bf00      	nop
          }
          break;
 800c18c:	e107      	b.n	800c39e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c194:	b2db      	uxtb	r3, r3
 800c196:	2b02      	cmp	r3, #2
 800c198:	d002      	beq.n	800c1a0 <USBD_StdEPReq+0x124>
 800c19a:	2b03      	cmp	r3, #3
 800c19c:	d016      	beq.n	800c1cc <USBD_StdEPReq+0x150>
 800c19e:	e04b      	b.n	800c238 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c1a0:	7bbb      	ldrb	r3, [r7, #14]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d00d      	beq.n	800c1c2 <USBD_StdEPReq+0x146>
 800c1a6:	7bbb      	ldrb	r3, [r7, #14]
 800c1a8:	2b80      	cmp	r3, #128	; 0x80
 800c1aa:	d00a      	beq.n	800c1c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c1ac:	7bbb      	ldrb	r3, [r7, #14]
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f004 fa09 	bl	80105c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c1b6:	2180      	movs	r1, #128	; 0x80
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f004 fa05 	bl	80105c8 <USBD_LL_StallEP>
 800c1be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c1c0:	e040      	b.n	800c244 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c1c2:	6839      	ldr	r1, [r7, #0]
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f000 fc68 	bl	800ca9a <USBD_CtlError>
              break;
 800c1ca:	e03b      	b.n	800c244 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	885b      	ldrh	r3, [r3, #2]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d136      	bne.n	800c242 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c1d4:	7bbb      	ldrb	r3, [r7, #14]
 800c1d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d004      	beq.n	800c1e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c1de:	7bbb      	ldrb	r3, [r7, #14]
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f004 fa0f 	bl	8010606 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f000 fd21 	bl	800cc30 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c1ee:	7bbb      	ldrb	r3, [r7, #14]
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f7ff fde2 	bl	800bdbc <USBD_CoreFindEP>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c1fc:	7b7b      	ldrb	r3, [r7, #13]
 800c1fe:	2bff      	cmp	r3, #255	; 0xff
 800c200:	d01f      	beq.n	800c242 <USBD_StdEPReq+0x1c6>
 800c202:	7b7b      	ldrb	r3, [r7, #13]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d11c      	bne.n	800c242 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c208:	7b7a      	ldrb	r2, [r7, #13]
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c210:	7b7a      	ldrb	r2, [r7, #13]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	32ae      	adds	r2, #174	; 0xae
 800c216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c21a:	689b      	ldr	r3, [r3, #8]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d010      	beq.n	800c242 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c220:	7b7a      	ldrb	r2, [r7, #13]
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	32ae      	adds	r2, #174	; 0xae
 800c226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c22a:	689b      	ldr	r3, [r3, #8]
 800c22c:	6839      	ldr	r1, [r7, #0]
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	4798      	blx	r3
 800c232:	4603      	mov	r3, r0
 800c234:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c236:	e004      	b.n	800c242 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c238:	6839      	ldr	r1, [r7, #0]
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f000 fc2d 	bl	800ca9a <USBD_CtlError>
              break;
 800c240:	e000      	b.n	800c244 <USBD_StdEPReq+0x1c8>
              break;
 800c242:	bf00      	nop
          }
          break;
 800c244:	e0ab      	b.n	800c39e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c24c:	b2db      	uxtb	r3, r3
 800c24e:	2b02      	cmp	r3, #2
 800c250:	d002      	beq.n	800c258 <USBD_StdEPReq+0x1dc>
 800c252:	2b03      	cmp	r3, #3
 800c254:	d032      	beq.n	800c2bc <USBD_StdEPReq+0x240>
 800c256:	e097      	b.n	800c388 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c258:	7bbb      	ldrb	r3, [r7, #14]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d007      	beq.n	800c26e <USBD_StdEPReq+0x1f2>
 800c25e:	7bbb      	ldrb	r3, [r7, #14]
 800c260:	2b80      	cmp	r3, #128	; 0x80
 800c262:	d004      	beq.n	800c26e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c264:	6839      	ldr	r1, [r7, #0]
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f000 fc17 	bl	800ca9a <USBD_CtlError>
                break;
 800c26c:	e091      	b.n	800c392 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c26e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c272:	2b00      	cmp	r3, #0
 800c274:	da0b      	bge.n	800c28e <USBD_StdEPReq+0x212>
 800c276:	7bbb      	ldrb	r3, [r7, #14]
 800c278:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c27c:	4613      	mov	r3, r2
 800c27e:	009b      	lsls	r3, r3, #2
 800c280:	4413      	add	r3, r2
 800c282:	009b      	lsls	r3, r3, #2
 800c284:	3310      	adds	r3, #16
 800c286:	687a      	ldr	r2, [r7, #4]
 800c288:	4413      	add	r3, r2
 800c28a:	3304      	adds	r3, #4
 800c28c:	e00b      	b.n	800c2a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c28e:	7bbb      	ldrb	r3, [r7, #14]
 800c290:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c294:	4613      	mov	r3, r2
 800c296:	009b      	lsls	r3, r3, #2
 800c298:	4413      	add	r3, r2
 800c29a:	009b      	lsls	r3, r3, #2
 800c29c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c2a0:	687a      	ldr	r2, [r7, #4]
 800c2a2:	4413      	add	r3, r2
 800c2a4:	3304      	adds	r3, #4
 800c2a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	2202      	movs	r2, #2
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f000 fc61 	bl	800cb7c <USBD_CtlSendData>
              break;
 800c2ba:	e06a      	b.n	800c392 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c2bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	da11      	bge.n	800c2e8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c2c4:	7bbb      	ldrb	r3, [r7, #14]
 800c2c6:	f003 020f 	and.w	r2, r3, #15
 800c2ca:	6879      	ldr	r1, [r7, #4]
 800c2cc:	4613      	mov	r3, r2
 800c2ce:	009b      	lsls	r3, r3, #2
 800c2d0:	4413      	add	r3, r2
 800c2d2:	009b      	lsls	r3, r3, #2
 800c2d4:	440b      	add	r3, r1
 800c2d6:	3324      	adds	r3, #36	; 0x24
 800c2d8:	881b      	ldrh	r3, [r3, #0]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d117      	bne.n	800c30e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c2de:	6839      	ldr	r1, [r7, #0]
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f000 fbda 	bl	800ca9a <USBD_CtlError>
                  break;
 800c2e6:	e054      	b.n	800c392 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c2e8:	7bbb      	ldrb	r3, [r7, #14]
 800c2ea:	f003 020f 	and.w	r2, r3, #15
 800c2ee:	6879      	ldr	r1, [r7, #4]
 800c2f0:	4613      	mov	r3, r2
 800c2f2:	009b      	lsls	r3, r3, #2
 800c2f4:	4413      	add	r3, r2
 800c2f6:	009b      	lsls	r3, r3, #2
 800c2f8:	440b      	add	r3, r1
 800c2fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c2fe:	881b      	ldrh	r3, [r3, #0]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d104      	bne.n	800c30e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c304:	6839      	ldr	r1, [r7, #0]
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f000 fbc7 	bl	800ca9a <USBD_CtlError>
                  break;
 800c30c:	e041      	b.n	800c392 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c30e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c312:	2b00      	cmp	r3, #0
 800c314:	da0b      	bge.n	800c32e <USBD_StdEPReq+0x2b2>
 800c316:	7bbb      	ldrb	r3, [r7, #14]
 800c318:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c31c:	4613      	mov	r3, r2
 800c31e:	009b      	lsls	r3, r3, #2
 800c320:	4413      	add	r3, r2
 800c322:	009b      	lsls	r3, r3, #2
 800c324:	3310      	adds	r3, #16
 800c326:	687a      	ldr	r2, [r7, #4]
 800c328:	4413      	add	r3, r2
 800c32a:	3304      	adds	r3, #4
 800c32c:	e00b      	b.n	800c346 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c32e:	7bbb      	ldrb	r3, [r7, #14]
 800c330:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c334:	4613      	mov	r3, r2
 800c336:	009b      	lsls	r3, r3, #2
 800c338:	4413      	add	r3, r2
 800c33a:	009b      	lsls	r3, r3, #2
 800c33c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c340:	687a      	ldr	r2, [r7, #4]
 800c342:	4413      	add	r3, r2
 800c344:	3304      	adds	r3, #4
 800c346:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c348:	7bbb      	ldrb	r3, [r7, #14]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d002      	beq.n	800c354 <USBD_StdEPReq+0x2d8>
 800c34e:	7bbb      	ldrb	r3, [r7, #14]
 800c350:	2b80      	cmp	r3, #128	; 0x80
 800c352:	d103      	bne.n	800c35c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	2200      	movs	r2, #0
 800c358:	601a      	str	r2, [r3, #0]
 800c35a:	e00e      	b.n	800c37a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c35c:	7bbb      	ldrb	r3, [r7, #14]
 800c35e:	4619      	mov	r1, r3
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f004 f96f 	bl	8010644 <USBD_LL_IsStallEP>
 800c366:	4603      	mov	r3, r0
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d003      	beq.n	800c374 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	2201      	movs	r2, #1
 800c370:	601a      	str	r2, [r3, #0]
 800c372:	e002      	b.n	800c37a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	2200      	movs	r2, #0
 800c378:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	2202      	movs	r2, #2
 800c37e:	4619      	mov	r1, r3
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f000 fbfb 	bl	800cb7c <USBD_CtlSendData>
              break;
 800c386:	e004      	b.n	800c392 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c388:	6839      	ldr	r1, [r7, #0]
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f000 fb85 	bl	800ca9a <USBD_CtlError>
              break;
 800c390:	bf00      	nop
          }
          break;
 800c392:	e004      	b.n	800c39e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c394:	6839      	ldr	r1, [r7, #0]
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	f000 fb7f 	bl	800ca9a <USBD_CtlError>
          break;
 800c39c:	bf00      	nop
      }
      break;
 800c39e:	e005      	b.n	800c3ac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c3a0:	6839      	ldr	r1, [r7, #0]
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 fb79 	bl	800ca9a <USBD_CtlError>
      break;
 800c3a8:	e000      	b.n	800c3ac <USBD_StdEPReq+0x330>
      break;
 800c3aa:	bf00      	nop
  }

  return ret;
 800c3ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3710      	adds	r7, #16
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}
	...

0800c3b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b084      	sub	sp, #16
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	885b      	ldrh	r3, [r3, #2]
 800c3d2:	0a1b      	lsrs	r3, r3, #8
 800c3d4:	b29b      	uxth	r3, r3
 800c3d6:	3b01      	subs	r3, #1
 800c3d8:	2b0e      	cmp	r3, #14
 800c3da:	f200 8152 	bhi.w	800c682 <USBD_GetDescriptor+0x2ca>
 800c3de:	a201      	add	r2, pc, #4	; (adr r2, 800c3e4 <USBD_GetDescriptor+0x2c>)
 800c3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3e4:	0800c455 	.word	0x0800c455
 800c3e8:	0800c46d 	.word	0x0800c46d
 800c3ec:	0800c4ad 	.word	0x0800c4ad
 800c3f0:	0800c683 	.word	0x0800c683
 800c3f4:	0800c683 	.word	0x0800c683
 800c3f8:	0800c623 	.word	0x0800c623
 800c3fc:	0800c64f 	.word	0x0800c64f
 800c400:	0800c683 	.word	0x0800c683
 800c404:	0800c683 	.word	0x0800c683
 800c408:	0800c683 	.word	0x0800c683
 800c40c:	0800c683 	.word	0x0800c683
 800c410:	0800c683 	.word	0x0800c683
 800c414:	0800c683 	.word	0x0800c683
 800c418:	0800c683 	.word	0x0800c683
 800c41c:	0800c421 	.word	0x0800c421
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c426:	69db      	ldr	r3, [r3, #28]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d00b      	beq.n	800c444 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c432:	69db      	ldr	r3, [r3, #28]
 800c434:	687a      	ldr	r2, [r7, #4]
 800c436:	7c12      	ldrb	r2, [r2, #16]
 800c438:	f107 0108 	add.w	r1, r7, #8
 800c43c:	4610      	mov	r0, r2
 800c43e:	4798      	blx	r3
 800c440:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c442:	e126      	b.n	800c692 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c444:	6839      	ldr	r1, [r7, #0]
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f000 fb27 	bl	800ca9a <USBD_CtlError>
        err++;
 800c44c:	7afb      	ldrb	r3, [r7, #11]
 800c44e:	3301      	adds	r3, #1
 800c450:	72fb      	strb	r3, [r7, #11]
      break;
 800c452:	e11e      	b.n	800c692 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	687a      	ldr	r2, [r7, #4]
 800c45e:	7c12      	ldrb	r2, [r2, #16]
 800c460:	f107 0108 	add.w	r1, r7, #8
 800c464:	4610      	mov	r0, r2
 800c466:	4798      	blx	r3
 800c468:	60f8      	str	r0, [r7, #12]
      break;
 800c46a:	e112      	b.n	800c692 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	7c1b      	ldrb	r3, [r3, #16]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d10d      	bne.n	800c490 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c47a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c47c:	f107 0208 	add.w	r2, r7, #8
 800c480:	4610      	mov	r0, r2
 800c482:	4798      	blx	r3
 800c484:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	3301      	adds	r3, #1
 800c48a:	2202      	movs	r2, #2
 800c48c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c48e:	e100      	b.n	800c692 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c498:	f107 0208 	add.w	r2, r7, #8
 800c49c:	4610      	mov	r0, r2
 800c49e:	4798      	blx	r3
 800c4a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	3301      	adds	r3, #1
 800c4a6:	2202      	movs	r2, #2
 800c4a8:	701a      	strb	r2, [r3, #0]
      break;
 800c4aa:	e0f2      	b.n	800c692 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	885b      	ldrh	r3, [r3, #2]
 800c4b0:	b2db      	uxtb	r3, r3
 800c4b2:	2b05      	cmp	r3, #5
 800c4b4:	f200 80ac 	bhi.w	800c610 <USBD_GetDescriptor+0x258>
 800c4b8:	a201      	add	r2, pc, #4	; (adr r2, 800c4c0 <USBD_GetDescriptor+0x108>)
 800c4ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4be:	bf00      	nop
 800c4c0:	0800c4d9 	.word	0x0800c4d9
 800c4c4:	0800c50d 	.word	0x0800c50d
 800c4c8:	0800c541 	.word	0x0800c541
 800c4cc:	0800c575 	.word	0x0800c575
 800c4d0:	0800c5a9 	.word	0x0800c5a9
 800c4d4:	0800c5dd 	.word	0x0800c5dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4de:	685b      	ldr	r3, [r3, #4]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d00b      	beq.n	800c4fc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4ea:	685b      	ldr	r3, [r3, #4]
 800c4ec:	687a      	ldr	r2, [r7, #4]
 800c4ee:	7c12      	ldrb	r2, [r2, #16]
 800c4f0:	f107 0108 	add.w	r1, r7, #8
 800c4f4:	4610      	mov	r0, r2
 800c4f6:	4798      	blx	r3
 800c4f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4fa:	e091      	b.n	800c620 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c4fc:	6839      	ldr	r1, [r7, #0]
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f000 facb 	bl	800ca9a <USBD_CtlError>
            err++;
 800c504:	7afb      	ldrb	r3, [r7, #11]
 800c506:	3301      	adds	r3, #1
 800c508:	72fb      	strb	r3, [r7, #11]
          break;
 800c50a:	e089      	b.n	800c620 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c512:	689b      	ldr	r3, [r3, #8]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d00b      	beq.n	800c530 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c51e:	689b      	ldr	r3, [r3, #8]
 800c520:	687a      	ldr	r2, [r7, #4]
 800c522:	7c12      	ldrb	r2, [r2, #16]
 800c524:	f107 0108 	add.w	r1, r7, #8
 800c528:	4610      	mov	r0, r2
 800c52a:	4798      	blx	r3
 800c52c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c52e:	e077      	b.n	800c620 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c530:	6839      	ldr	r1, [r7, #0]
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f000 fab1 	bl	800ca9a <USBD_CtlError>
            err++;
 800c538:	7afb      	ldrb	r3, [r7, #11]
 800c53a:	3301      	adds	r3, #1
 800c53c:	72fb      	strb	r3, [r7, #11]
          break;
 800c53e:	e06f      	b.n	800c620 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c546:	68db      	ldr	r3, [r3, #12]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d00b      	beq.n	800c564 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c552:	68db      	ldr	r3, [r3, #12]
 800c554:	687a      	ldr	r2, [r7, #4]
 800c556:	7c12      	ldrb	r2, [r2, #16]
 800c558:	f107 0108 	add.w	r1, r7, #8
 800c55c:	4610      	mov	r0, r2
 800c55e:	4798      	blx	r3
 800c560:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c562:	e05d      	b.n	800c620 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c564:	6839      	ldr	r1, [r7, #0]
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f000 fa97 	bl	800ca9a <USBD_CtlError>
            err++;
 800c56c:	7afb      	ldrb	r3, [r7, #11]
 800c56e:	3301      	adds	r3, #1
 800c570:	72fb      	strb	r3, [r7, #11]
          break;
 800c572:	e055      	b.n	800c620 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c57a:	691b      	ldr	r3, [r3, #16]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d00b      	beq.n	800c598 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c586:	691b      	ldr	r3, [r3, #16]
 800c588:	687a      	ldr	r2, [r7, #4]
 800c58a:	7c12      	ldrb	r2, [r2, #16]
 800c58c:	f107 0108 	add.w	r1, r7, #8
 800c590:	4610      	mov	r0, r2
 800c592:	4798      	blx	r3
 800c594:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c596:	e043      	b.n	800c620 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c598:	6839      	ldr	r1, [r7, #0]
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f000 fa7d 	bl	800ca9a <USBD_CtlError>
            err++;
 800c5a0:	7afb      	ldrb	r3, [r7, #11]
 800c5a2:	3301      	adds	r3, #1
 800c5a4:	72fb      	strb	r3, [r7, #11]
          break;
 800c5a6:	e03b      	b.n	800c620 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5ae:	695b      	ldr	r3, [r3, #20]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d00b      	beq.n	800c5cc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5ba:	695b      	ldr	r3, [r3, #20]
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	7c12      	ldrb	r2, [r2, #16]
 800c5c0:	f107 0108 	add.w	r1, r7, #8
 800c5c4:	4610      	mov	r0, r2
 800c5c6:	4798      	blx	r3
 800c5c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5ca:	e029      	b.n	800c620 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c5cc:	6839      	ldr	r1, [r7, #0]
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 fa63 	bl	800ca9a <USBD_CtlError>
            err++;
 800c5d4:	7afb      	ldrb	r3, [r7, #11]
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	72fb      	strb	r3, [r7, #11]
          break;
 800c5da:	e021      	b.n	800c620 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5e2:	699b      	ldr	r3, [r3, #24]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d00b      	beq.n	800c600 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5ee:	699b      	ldr	r3, [r3, #24]
 800c5f0:	687a      	ldr	r2, [r7, #4]
 800c5f2:	7c12      	ldrb	r2, [r2, #16]
 800c5f4:	f107 0108 	add.w	r1, r7, #8
 800c5f8:	4610      	mov	r0, r2
 800c5fa:	4798      	blx	r3
 800c5fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5fe:	e00f      	b.n	800c620 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c600:	6839      	ldr	r1, [r7, #0]
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f000 fa49 	bl	800ca9a <USBD_CtlError>
            err++;
 800c608:	7afb      	ldrb	r3, [r7, #11]
 800c60a:	3301      	adds	r3, #1
 800c60c:	72fb      	strb	r3, [r7, #11]
          break;
 800c60e:	e007      	b.n	800c620 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c610:	6839      	ldr	r1, [r7, #0]
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f000 fa41 	bl	800ca9a <USBD_CtlError>
          err++;
 800c618:	7afb      	ldrb	r3, [r7, #11]
 800c61a:	3301      	adds	r3, #1
 800c61c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c61e:	bf00      	nop
      }
      break;
 800c620:	e037      	b.n	800c692 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	7c1b      	ldrb	r3, [r3, #16]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d109      	bne.n	800c63e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c632:	f107 0208 	add.w	r2, r7, #8
 800c636:	4610      	mov	r0, r2
 800c638:	4798      	blx	r3
 800c63a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c63c:	e029      	b.n	800c692 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c63e:	6839      	ldr	r1, [r7, #0]
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f000 fa2a 	bl	800ca9a <USBD_CtlError>
        err++;
 800c646:	7afb      	ldrb	r3, [r7, #11]
 800c648:	3301      	adds	r3, #1
 800c64a:	72fb      	strb	r3, [r7, #11]
      break;
 800c64c:	e021      	b.n	800c692 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	7c1b      	ldrb	r3, [r3, #16]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d10d      	bne.n	800c672 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c65c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c65e:	f107 0208 	add.w	r2, r7, #8
 800c662:	4610      	mov	r0, r2
 800c664:	4798      	blx	r3
 800c666:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	3301      	adds	r3, #1
 800c66c:	2207      	movs	r2, #7
 800c66e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c670:	e00f      	b.n	800c692 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c672:	6839      	ldr	r1, [r7, #0]
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f000 fa10 	bl	800ca9a <USBD_CtlError>
        err++;
 800c67a:	7afb      	ldrb	r3, [r7, #11]
 800c67c:	3301      	adds	r3, #1
 800c67e:	72fb      	strb	r3, [r7, #11]
      break;
 800c680:	e007      	b.n	800c692 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c682:	6839      	ldr	r1, [r7, #0]
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f000 fa08 	bl	800ca9a <USBD_CtlError>
      err++;
 800c68a:	7afb      	ldrb	r3, [r7, #11]
 800c68c:	3301      	adds	r3, #1
 800c68e:	72fb      	strb	r3, [r7, #11]
      break;
 800c690:	bf00      	nop
  }

  if (err != 0U)
 800c692:	7afb      	ldrb	r3, [r7, #11]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d11e      	bne.n	800c6d6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	88db      	ldrh	r3, [r3, #6]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d016      	beq.n	800c6ce <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c6a0:	893b      	ldrh	r3, [r7, #8]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d00e      	beq.n	800c6c4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	88da      	ldrh	r2, [r3, #6]
 800c6aa:	893b      	ldrh	r3, [r7, #8]
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	bf28      	it	cs
 800c6b0:	4613      	movcs	r3, r2
 800c6b2:	b29b      	uxth	r3, r3
 800c6b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c6b6:	893b      	ldrh	r3, [r7, #8]
 800c6b8:	461a      	mov	r2, r3
 800c6ba:	68f9      	ldr	r1, [r7, #12]
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f000 fa5d 	bl	800cb7c <USBD_CtlSendData>
 800c6c2:	e009      	b.n	800c6d8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c6c4:	6839      	ldr	r1, [r7, #0]
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f000 f9e7 	bl	800ca9a <USBD_CtlError>
 800c6cc:	e004      	b.n	800c6d8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f000 faae 	bl	800cc30 <USBD_CtlSendStatus>
 800c6d4:	e000      	b.n	800c6d8 <USBD_GetDescriptor+0x320>
    return;
 800c6d6:	bf00      	nop
  }
}
 800c6d8:	3710      	adds	r7, #16
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}
 800c6de:	bf00      	nop

0800c6e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b084      	sub	sp, #16
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	889b      	ldrh	r3, [r3, #4]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d131      	bne.n	800c756 <USBD_SetAddress+0x76>
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	88db      	ldrh	r3, [r3, #6]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d12d      	bne.n	800c756 <USBD_SetAddress+0x76>
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	885b      	ldrh	r3, [r3, #2]
 800c6fe:	2b7f      	cmp	r3, #127	; 0x7f
 800c700:	d829      	bhi.n	800c756 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	885b      	ldrh	r3, [r3, #2]
 800c706:	b2db      	uxtb	r3, r3
 800c708:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c70c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c714:	b2db      	uxtb	r3, r3
 800c716:	2b03      	cmp	r3, #3
 800c718:	d104      	bne.n	800c724 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c71a:	6839      	ldr	r1, [r7, #0]
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f000 f9bc 	bl	800ca9a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c722:	e01d      	b.n	800c760 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	7bfa      	ldrb	r2, [r7, #15]
 800c728:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c72c:	7bfb      	ldrb	r3, [r7, #15]
 800c72e:	4619      	mov	r1, r3
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f003 ffb3 	bl	801069c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f000 fa7a 	bl	800cc30 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c73c:	7bfb      	ldrb	r3, [r7, #15]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d004      	beq.n	800c74c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2202      	movs	r2, #2
 800c746:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c74a:	e009      	b.n	800c760 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2201      	movs	r2, #1
 800c750:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c754:	e004      	b.n	800c760 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c756:	6839      	ldr	r1, [r7, #0]
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f000 f99e 	bl	800ca9a <USBD_CtlError>
  }
}
 800c75e:	bf00      	nop
 800c760:	bf00      	nop
 800c762:	3710      	adds	r7, #16
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}

0800c768 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b084      	sub	sp, #16
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c772:	2300      	movs	r3, #0
 800c774:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	885b      	ldrh	r3, [r3, #2]
 800c77a:	b2da      	uxtb	r2, r3
 800c77c:	4b4e      	ldr	r3, [pc, #312]	; (800c8b8 <USBD_SetConfig+0x150>)
 800c77e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c780:	4b4d      	ldr	r3, [pc, #308]	; (800c8b8 <USBD_SetConfig+0x150>)
 800c782:	781b      	ldrb	r3, [r3, #0]
 800c784:	2b01      	cmp	r3, #1
 800c786:	d905      	bls.n	800c794 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c788:	6839      	ldr	r1, [r7, #0]
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f000 f985 	bl	800ca9a <USBD_CtlError>
    return USBD_FAIL;
 800c790:	2303      	movs	r3, #3
 800c792:	e08c      	b.n	800c8ae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c79a:	b2db      	uxtb	r3, r3
 800c79c:	2b02      	cmp	r3, #2
 800c79e:	d002      	beq.n	800c7a6 <USBD_SetConfig+0x3e>
 800c7a0:	2b03      	cmp	r3, #3
 800c7a2:	d029      	beq.n	800c7f8 <USBD_SetConfig+0x90>
 800c7a4:	e075      	b.n	800c892 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c7a6:	4b44      	ldr	r3, [pc, #272]	; (800c8b8 <USBD_SetConfig+0x150>)
 800c7a8:	781b      	ldrb	r3, [r3, #0]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d020      	beq.n	800c7f0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c7ae:	4b42      	ldr	r3, [pc, #264]	; (800c8b8 <USBD_SetConfig+0x150>)
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	461a      	mov	r2, r3
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c7b8:	4b3f      	ldr	r3, [pc, #252]	; (800c8b8 <USBD_SetConfig+0x150>)
 800c7ba:	781b      	ldrb	r3, [r3, #0]
 800c7bc:	4619      	mov	r1, r3
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f7fe ffbd 	bl	800b73e <USBD_SetClassConfig>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c7c8:	7bfb      	ldrb	r3, [r7, #15]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d008      	beq.n	800c7e0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c7ce:	6839      	ldr	r1, [r7, #0]
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f000 f962 	bl	800ca9a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2202      	movs	r2, #2
 800c7da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c7de:	e065      	b.n	800c8ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f000 fa25 	bl	800cc30 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2203      	movs	r2, #3
 800c7ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c7ee:	e05d      	b.n	800c8ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f000 fa1d 	bl	800cc30 <USBD_CtlSendStatus>
      break;
 800c7f6:	e059      	b.n	800c8ac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c7f8:	4b2f      	ldr	r3, [pc, #188]	; (800c8b8 <USBD_SetConfig+0x150>)
 800c7fa:	781b      	ldrb	r3, [r3, #0]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d112      	bne.n	800c826 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2202      	movs	r2, #2
 800c804:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c808:	4b2b      	ldr	r3, [pc, #172]	; (800c8b8 <USBD_SetConfig+0x150>)
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	461a      	mov	r2, r3
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c812:	4b29      	ldr	r3, [pc, #164]	; (800c8b8 <USBD_SetConfig+0x150>)
 800c814:	781b      	ldrb	r3, [r3, #0]
 800c816:	4619      	mov	r1, r3
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f7fe ffac 	bl	800b776 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f000 fa06 	bl	800cc30 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c824:	e042      	b.n	800c8ac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c826:	4b24      	ldr	r3, [pc, #144]	; (800c8b8 <USBD_SetConfig+0x150>)
 800c828:	781b      	ldrb	r3, [r3, #0]
 800c82a:	461a      	mov	r2, r3
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	685b      	ldr	r3, [r3, #4]
 800c830:	429a      	cmp	r2, r3
 800c832:	d02a      	beq.n	800c88a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	685b      	ldr	r3, [r3, #4]
 800c838:	b2db      	uxtb	r3, r3
 800c83a:	4619      	mov	r1, r3
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f7fe ff9a 	bl	800b776 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c842:	4b1d      	ldr	r3, [pc, #116]	; (800c8b8 <USBD_SetConfig+0x150>)
 800c844:	781b      	ldrb	r3, [r3, #0]
 800c846:	461a      	mov	r2, r3
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c84c:	4b1a      	ldr	r3, [pc, #104]	; (800c8b8 <USBD_SetConfig+0x150>)
 800c84e:	781b      	ldrb	r3, [r3, #0]
 800c850:	4619      	mov	r1, r3
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f7fe ff73 	bl	800b73e <USBD_SetClassConfig>
 800c858:	4603      	mov	r3, r0
 800c85a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c85c:	7bfb      	ldrb	r3, [r7, #15]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d00f      	beq.n	800c882 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c862:	6839      	ldr	r1, [r7, #0]
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f000 f918 	bl	800ca9a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	685b      	ldr	r3, [r3, #4]
 800c86e:	b2db      	uxtb	r3, r3
 800c870:	4619      	mov	r1, r3
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f7fe ff7f 	bl	800b776 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2202      	movs	r2, #2
 800c87c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c880:	e014      	b.n	800c8ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f000 f9d4 	bl	800cc30 <USBD_CtlSendStatus>
      break;
 800c888:	e010      	b.n	800c8ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f000 f9d0 	bl	800cc30 <USBD_CtlSendStatus>
      break;
 800c890:	e00c      	b.n	800c8ac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c892:	6839      	ldr	r1, [r7, #0]
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f000 f900 	bl	800ca9a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c89a:	4b07      	ldr	r3, [pc, #28]	; (800c8b8 <USBD_SetConfig+0x150>)
 800c89c:	781b      	ldrb	r3, [r3, #0]
 800c89e:	4619      	mov	r1, r3
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f7fe ff68 	bl	800b776 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c8a6:	2303      	movs	r3, #3
 800c8a8:	73fb      	strb	r3, [r7, #15]
      break;
 800c8aa:	bf00      	nop
  }

  return ret;
 800c8ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	3710      	adds	r7, #16
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}
 800c8b6:	bf00      	nop
 800c8b8:	20001600 	.word	0x20001600

0800c8bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b082      	sub	sp, #8
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	88db      	ldrh	r3, [r3, #6]
 800c8ca:	2b01      	cmp	r3, #1
 800c8cc:	d004      	beq.n	800c8d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c8ce:	6839      	ldr	r1, [r7, #0]
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f000 f8e2 	bl	800ca9a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c8d6:	e023      	b.n	800c920 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8de:	b2db      	uxtb	r3, r3
 800c8e0:	2b02      	cmp	r3, #2
 800c8e2:	dc02      	bgt.n	800c8ea <USBD_GetConfig+0x2e>
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	dc03      	bgt.n	800c8f0 <USBD_GetConfig+0x34>
 800c8e8:	e015      	b.n	800c916 <USBD_GetConfig+0x5a>
 800c8ea:	2b03      	cmp	r3, #3
 800c8ec:	d00b      	beq.n	800c906 <USBD_GetConfig+0x4a>
 800c8ee:	e012      	b.n	800c916 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	3308      	adds	r3, #8
 800c8fa:	2201      	movs	r2, #1
 800c8fc:	4619      	mov	r1, r3
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 f93c 	bl	800cb7c <USBD_CtlSendData>
        break;
 800c904:	e00c      	b.n	800c920 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	3304      	adds	r3, #4
 800c90a:	2201      	movs	r2, #1
 800c90c:	4619      	mov	r1, r3
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f000 f934 	bl	800cb7c <USBD_CtlSendData>
        break;
 800c914:	e004      	b.n	800c920 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c916:	6839      	ldr	r1, [r7, #0]
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f000 f8be 	bl	800ca9a <USBD_CtlError>
        break;
 800c91e:	bf00      	nop
}
 800c920:	bf00      	nop
 800c922:	3708      	adds	r7, #8
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b082      	sub	sp, #8
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c938:	b2db      	uxtb	r3, r3
 800c93a:	3b01      	subs	r3, #1
 800c93c:	2b02      	cmp	r3, #2
 800c93e:	d81e      	bhi.n	800c97e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	88db      	ldrh	r3, [r3, #6]
 800c944:	2b02      	cmp	r3, #2
 800c946:	d004      	beq.n	800c952 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c948:	6839      	ldr	r1, [r7, #0]
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f000 f8a5 	bl	800ca9a <USBD_CtlError>
        break;
 800c950:	e01a      	b.n	800c988 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2201      	movs	r2, #1
 800c956:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d005      	beq.n	800c96e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	68db      	ldr	r3, [r3, #12]
 800c966:	f043 0202 	orr.w	r2, r3, #2
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	330c      	adds	r3, #12
 800c972:	2202      	movs	r2, #2
 800c974:	4619      	mov	r1, r3
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f000 f900 	bl	800cb7c <USBD_CtlSendData>
      break;
 800c97c:	e004      	b.n	800c988 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c97e:	6839      	ldr	r1, [r7, #0]
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f000 f88a 	bl	800ca9a <USBD_CtlError>
      break;
 800c986:	bf00      	nop
  }
}
 800c988:	bf00      	nop
 800c98a:	3708      	adds	r7, #8
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}

0800c990 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b082      	sub	sp, #8
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
 800c998:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	885b      	ldrh	r3, [r3, #2]
 800c99e:	2b01      	cmp	r3, #1
 800c9a0:	d107      	bne.n	800c9b2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2201      	movs	r2, #1
 800c9a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f000 f940 	bl	800cc30 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c9b0:	e013      	b.n	800c9da <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	885b      	ldrh	r3, [r3, #2]
 800c9b6:	2b02      	cmp	r3, #2
 800c9b8:	d10b      	bne.n	800c9d2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	889b      	ldrh	r3, [r3, #4]
 800c9be:	0a1b      	lsrs	r3, r3, #8
 800c9c0:	b29b      	uxth	r3, r3
 800c9c2:	b2da      	uxtb	r2, r3
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f000 f930 	bl	800cc30 <USBD_CtlSendStatus>
}
 800c9d0:	e003      	b.n	800c9da <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c9d2:	6839      	ldr	r1, [r7, #0]
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f000 f860 	bl	800ca9a <USBD_CtlError>
}
 800c9da:	bf00      	nop
 800c9dc:	3708      	adds	r7, #8
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}

0800c9e2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9e2:	b580      	push	{r7, lr}
 800c9e4:	b082      	sub	sp, #8
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	6078      	str	r0, [r7, #4]
 800c9ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9f2:	b2db      	uxtb	r3, r3
 800c9f4:	3b01      	subs	r3, #1
 800c9f6:	2b02      	cmp	r3, #2
 800c9f8:	d80b      	bhi.n	800ca12 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	885b      	ldrh	r3, [r3, #2]
 800c9fe:	2b01      	cmp	r3, #1
 800ca00:	d10c      	bne.n	800ca1c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2200      	movs	r2, #0
 800ca06:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f000 f910 	bl	800cc30 <USBD_CtlSendStatus>
      }
      break;
 800ca10:	e004      	b.n	800ca1c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ca12:	6839      	ldr	r1, [r7, #0]
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f000 f840 	bl	800ca9a <USBD_CtlError>
      break;
 800ca1a:	e000      	b.n	800ca1e <USBD_ClrFeature+0x3c>
      break;
 800ca1c:	bf00      	nop
  }
}
 800ca1e:	bf00      	nop
 800ca20:	3708      	adds	r7, #8
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}

0800ca26 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ca26:	b580      	push	{r7, lr}
 800ca28:	b084      	sub	sp, #16
 800ca2a:	af00      	add	r7, sp, #0
 800ca2c:	6078      	str	r0, [r7, #4]
 800ca2e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	781a      	ldrb	r2, [r3, #0]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	3301      	adds	r3, #1
 800ca40:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	781a      	ldrb	r2, [r3, #0]
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	3301      	adds	r3, #1
 800ca4e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ca50:	68f8      	ldr	r0, [r7, #12]
 800ca52:	f7ff fa17 	bl	800be84 <SWAPBYTE>
 800ca56:	4603      	mov	r3, r0
 800ca58:	461a      	mov	r2, r3
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	3301      	adds	r3, #1
 800ca62:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	3301      	adds	r3, #1
 800ca68:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ca6a:	68f8      	ldr	r0, [r7, #12]
 800ca6c:	f7ff fa0a 	bl	800be84 <SWAPBYTE>
 800ca70:	4603      	mov	r3, r0
 800ca72:	461a      	mov	r2, r3
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	3301      	adds	r3, #1
 800ca7c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	3301      	adds	r3, #1
 800ca82:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ca84:	68f8      	ldr	r0, [r7, #12]
 800ca86:	f7ff f9fd 	bl	800be84 <SWAPBYTE>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	461a      	mov	r2, r3
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	80da      	strh	r2, [r3, #6]
}
 800ca92:	bf00      	nop
 800ca94:	3710      	adds	r7, #16
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}

0800ca9a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca9a:	b580      	push	{r7, lr}
 800ca9c:	b082      	sub	sp, #8
 800ca9e:	af00      	add	r7, sp, #0
 800caa0:	6078      	str	r0, [r7, #4]
 800caa2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800caa4:	2180      	movs	r1, #128	; 0x80
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f003 fd8e 	bl	80105c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800caac:	2100      	movs	r1, #0
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f003 fd8a 	bl	80105c8 <USBD_LL_StallEP>
}
 800cab4:	bf00      	nop
 800cab6:	3708      	adds	r7, #8
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}

0800cabc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b086      	sub	sp, #24
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	60f8      	str	r0, [r7, #12]
 800cac4:	60b9      	str	r1, [r7, #8]
 800cac6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cac8:	2300      	movs	r3, #0
 800caca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d036      	beq.n	800cb40 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cad6:	6938      	ldr	r0, [r7, #16]
 800cad8:	f000 f836 	bl	800cb48 <USBD_GetLen>
 800cadc:	4603      	mov	r3, r0
 800cade:	3301      	adds	r3, #1
 800cae0:	b29b      	uxth	r3, r3
 800cae2:	005b      	lsls	r3, r3, #1
 800cae4:	b29a      	uxth	r2, r3
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800caea:	7dfb      	ldrb	r3, [r7, #23]
 800caec:	68ba      	ldr	r2, [r7, #8]
 800caee:	4413      	add	r3, r2
 800caf0:	687a      	ldr	r2, [r7, #4]
 800caf2:	7812      	ldrb	r2, [r2, #0]
 800caf4:	701a      	strb	r2, [r3, #0]
  idx++;
 800caf6:	7dfb      	ldrb	r3, [r7, #23]
 800caf8:	3301      	adds	r3, #1
 800cafa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cafc:	7dfb      	ldrb	r3, [r7, #23]
 800cafe:	68ba      	ldr	r2, [r7, #8]
 800cb00:	4413      	add	r3, r2
 800cb02:	2203      	movs	r2, #3
 800cb04:	701a      	strb	r2, [r3, #0]
  idx++;
 800cb06:	7dfb      	ldrb	r3, [r7, #23]
 800cb08:	3301      	adds	r3, #1
 800cb0a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cb0c:	e013      	b.n	800cb36 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cb0e:	7dfb      	ldrb	r3, [r7, #23]
 800cb10:	68ba      	ldr	r2, [r7, #8]
 800cb12:	4413      	add	r3, r2
 800cb14:	693a      	ldr	r2, [r7, #16]
 800cb16:	7812      	ldrb	r2, [r2, #0]
 800cb18:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	3301      	adds	r3, #1
 800cb1e:	613b      	str	r3, [r7, #16]
    idx++;
 800cb20:	7dfb      	ldrb	r3, [r7, #23]
 800cb22:	3301      	adds	r3, #1
 800cb24:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cb26:	7dfb      	ldrb	r3, [r7, #23]
 800cb28:	68ba      	ldr	r2, [r7, #8]
 800cb2a:	4413      	add	r3, r2
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	701a      	strb	r2, [r3, #0]
    idx++;
 800cb30:	7dfb      	ldrb	r3, [r7, #23]
 800cb32:	3301      	adds	r3, #1
 800cb34:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cb36:	693b      	ldr	r3, [r7, #16]
 800cb38:	781b      	ldrb	r3, [r3, #0]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d1e7      	bne.n	800cb0e <USBD_GetString+0x52>
 800cb3e:	e000      	b.n	800cb42 <USBD_GetString+0x86>
    return;
 800cb40:	bf00      	nop
  }
}
 800cb42:	3718      	adds	r7, #24
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}

0800cb48 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b085      	sub	sp, #20
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cb50:	2300      	movs	r3, #0
 800cb52:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cb58:	e005      	b.n	800cb66 <USBD_GetLen+0x1e>
  {
    len++;
 800cb5a:	7bfb      	ldrb	r3, [r7, #15]
 800cb5c:	3301      	adds	r3, #1
 800cb5e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	3301      	adds	r3, #1
 800cb64:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	781b      	ldrb	r3, [r3, #0]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d1f5      	bne.n	800cb5a <USBD_GetLen+0x12>
  }

  return len;
 800cb6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	3714      	adds	r7, #20
 800cb74:	46bd      	mov	sp, r7
 800cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7a:	4770      	bx	lr

0800cb7c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b084      	sub	sp, #16
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	60f8      	str	r0, [r7, #12]
 800cb84:	60b9      	str	r1, [r7, #8]
 800cb86:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	2202      	movs	r2, #2
 800cb8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	687a      	ldr	r2, [r7, #4]
 800cb94:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	687a      	ldr	r2, [r7, #4]
 800cb9a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	68ba      	ldr	r2, [r7, #8]
 800cba0:	2100      	movs	r1, #0
 800cba2:	68f8      	ldr	r0, [r7, #12]
 800cba4:	f003 fd99 	bl	80106da <USBD_LL_Transmit>

  return USBD_OK;
 800cba8:	2300      	movs	r3, #0
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3710      	adds	r7, #16
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}

0800cbb2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cbb2:	b580      	push	{r7, lr}
 800cbb4:	b084      	sub	sp, #16
 800cbb6:	af00      	add	r7, sp, #0
 800cbb8:	60f8      	str	r0, [r7, #12]
 800cbba:	60b9      	str	r1, [r7, #8]
 800cbbc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	68ba      	ldr	r2, [r7, #8]
 800cbc2:	2100      	movs	r1, #0
 800cbc4:	68f8      	ldr	r0, [r7, #12]
 800cbc6:	f003 fd88 	bl	80106da <USBD_LL_Transmit>

  return USBD_OK;
 800cbca:	2300      	movs	r3, #0
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3710      	adds	r7, #16
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}

0800cbd4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b084      	sub	sp, #16
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	60f8      	str	r0, [r7, #12]
 800cbdc:	60b9      	str	r1, [r7, #8]
 800cbde:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	2203      	movs	r2, #3
 800cbe4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	687a      	ldr	r2, [r7, #4]
 800cbec:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	687a      	ldr	r2, [r7, #4]
 800cbf4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	68ba      	ldr	r2, [r7, #8]
 800cbfc:	2100      	movs	r1, #0
 800cbfe:	68f8      	ldr	r0, [r7, #12]
 800cc00:	f003 fd8c 	bl	801071c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cc04:	2300      	movs	r3, #0
}
 800cc06:	4618      	mov	r0, r3
 800cc08:	3710      	adds	r7, #16
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}

0800cc0e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cc0e:	b580      	push	{r7, lr}
 800cc10:	b084      	sub	sp, #16
 800cc12:	af00      	add	r7, sp, #0
 800cc14:	60f8      	str	r0, [r7, #12]
 800cc16:	60b9      	str	r1, [r7, #8]
 800cc18:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	68ba      	ldr	r2, [r7, #8]
 800cc1e:	2100      	movs	r1, #0
 800cc20:	68f8      	ldr	r0, [r7, #12]
 800cc22:	f003 fd7b 	bl	801071c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cc26:	2300      	movs	r3, #0
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3710      	adds	r7, #16
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}

0800cc30 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b082      	sub	sp, #8
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2204      	movs	r2, #4
 800cc3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cc40:	2300      	movs	r3, #0
 800cc42:	2200      	movs	r2, #0
 800cc44:	2100      	movs	r1, #0
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f003 fd47 	bl	80106da <USBD_LL_Transmit>

  return USBD_OK;
 800cc4c:	2300      	movs	r3, #0
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3708      	adds	r7, #8
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}

0800cc56 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cc56:	b580      	push	{r7, lr}
 800cc58:	b082      	sub	sp, #8
 800cc5a:	af00      	add	r7, sp, #0
 800cc5c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2205      	movs	r2, #5
 800cc62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cc66:	2300      	movs	r3, #0
 800cc68:	2200      	movs	r2, #0
 800cc6a:	2100      	movs	r1, #0
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f003 fd55 	bl	801071c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cc72:	2300      	movs	r3, #0
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3708      	adds	r7, #8
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}

0800cc7c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b084      	sub	sp, #16
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	4603      	mov	r3, r0
 800cc84:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cc86:	79fb      	ldrb	r3, [r7, #7]
 800cc88:	4a08      	ldr	r2, [pc, #32]	; (800ccac <disk_status+0x30>)
 800cc8a:	009b      	lsls	r3, r3, #2
 800cc8c:	4413      	add	r3, r2
 800cc8e:	685b      	ldr	r3, [r3, #4]
 800cc90:	685b      	ldr	r3, [r3, #4]
 800cc92:	79fa      	ldrb	r2, [r7, #7]
 800cc94:	4905      	ldr	r1, [pc, #20]	; (800ccac <disk_status+0x30>)
 800cc96:	440a      	add	r2, r1
 800cc98:	7a12      	ldrb	r2, [r2, #8]
 800cc9a:	4610      	mov	r0, r2
 800cc9c:	4798      	blx	r3
 800cc9e:	4603      	mov	r3, r0
 800cca0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cca2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	3710      	adds	r7, #16
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}
 800ccac:	2000182c 	.word	0x2000182c

0800ccb0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b084      	sub	sp, #16
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ccbe:	79fb      	ldrb	r3, [r7, #7]
 800ccc0:	4a0d      	ldr	r2, [pc, #52]	; (800ccf8 <disk_initialize+0x48>)
 800ccc2:	5cd3      	ldrb	r3, [r2, r3]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d111      	bne.n	800ccec <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ccc8:	79fb      	ldrb	r3, [r7, #7]
 800ccca:	4a0b      	ldr	r2, [pc, #44]	; (800ccf8 <disk_initialize+0x48>)
 800cccc:	2101      	movs	r1, #1
 800ccce:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ccd0:	79fb      	ldrb	r3, [r7, #7]
 800ccd2:	4a09      	ldr	r2, [pc, #36]	; (800ccf8 <disk_initialize+0x48>)
 800ccd4:	009b      	lsls	r3, r3, #2
 800ccd6:	4413      	add	r3, r2
 800ccd8:	685b      	ldr	r3, [r3, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	79fa      	ldrb	r2, [r7, #7]
 800ccde:	4906      	ldr	r1, [pc, #24]	; (800ccf8 <disk_initialize+0x48>)
 800cce0:	440a      	add	r2, r1
 800cce2:	7a12      	ldrb	r2, [r2, #8]
 800cce4:	4610      	mov	r0, r2
 800cce6:	4798      	blx	r3
 800cce8:	4603      	mov	r3, r0
 800ccea:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ccec:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3710      	adds	r7, #16
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}
 800ccf6:	bf00      	nop
 800ccf8:	2000182c 	.word	0x2000182c

0800ccfc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ccfc:	b590      	push	{r4, r7, lr}
 800ccfe:	b087      	sub	sp, #28
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	60b9      	str	r1, [r7, #8]
 800cd04:	607a      	str	r2, [r7, #4]
 800cd06:	603b      	str	r3, [r7, #0]
 800cd08:	4603      	mov	r3, r0
 800cd0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cd0c:	7bfb      	ldrb	r3, [r7, #15]
 800cd0e:	4a0a      	ldr	r2, [pc, #40]	; (800cd38 <disk_read+0x3c>)
 800cd10:	009b      	lsls	r3, r3, #2
 800cd12:	4413      	add	r3, r2
 800cd14:	685b      	ldr	r3, [r3, #4]
 800cd16:	689c      	ldr	r4, [r3, #8]
 800cd18:	7bfb      	ldrb	r3, [r7, #15]
 800cd1a:	4a07      	ldr	r2, [pc, #28]	; (800cd38 <disk_read+0x3c>)
 800cd1c:	4413      	add	r3, r2
 800cd1e:	7a18      	ldrb	r0, [r3, #8]
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	687a      	ldr	r2, [r7, #4]
 800cd24:	68b9      	ldr	r1, [r7, #8]
 800cd26:	47a0      	blx	r4
 800cd28:	4603      	mov	r3, r0
 800cd2a:	75fb      	strb	r3, [r7, #23]
  return res;
 800cd2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd2e:	4618      	mov	r0, r3
 800cd30:	371c      	adds	r7, #28
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd90      	pop	{r4, r7, pc}
 800cd36:	bf00      	nop
 800cd38:	2000182c 	.word	0x2000182c

0800cd3c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cd3c:	b590      	push	{r4, r7, lr}
 800cd3e:	b087      	sub	sp, #28
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	60b9      	str	r1, [r7, #8]
 800cd44:	607a      	str	r2, [r7, #4]
 800cd46:	603b      	str	r3, [r7, #0]
 800cd48:	4603      	mov	r3, r0
 800cd4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cd4c:	7bfb      	ldrb	r3, [r7, #15]
 800cd4e:	4a0a      	ldr	r2, [pc, #40]	; (800cd78 <disk_write+0x3c>)
 800cd50:	009b      	lsls	r3, r3, #2
 800cd52:	4413      	add	r3, r2
 800cd54:	685b      	ldr	r3, [r3, #4]
 800cd56:	68dc      	ldr	r4, [r3, #12]
 800cd58:	7bfb      	ldrb	r3, [r7, #15]
 800cd5a:	4a07      	ldr	r2, [pc, #28]	; (800cd78 <disk_write+0x3c>)
 800cd5c:	4413      	add	r3, r2
 800cd5e:	7a18      	ldrb	r0, [r3, #8]
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	687a      	ldr	r2, [r7, #4]
 800cd64:	68b9      	ldr	r1, [r7, #8]
 800cd66:	47a0      	blx	r4
 800cd68:	4603      	mov	r3, r0
 800cd6a:	75fb      	strb	r3, [r7, #23]
  return res;
 800cd6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	371c      	adds	r7, #28
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd90      	pop	{r4, r7, pc}
 800cd76:	bf00      	nop
 800cd78:	2000182c 	.word	0x2000182c

0800cd7c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b084      	sub	sp, #16
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	4603      	mov	r3, r0
 800cd84:	603a      	str	r2, [r7, #0]
 800cd86:	71fb      	strb	r3, [r7, #7]
 800cd88:	460b      	mov	r3, r1
 800cd8a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cd8c:	79fb      	ldrb	r3, [r7, #7]
 800cd8e:	4a09      	ldr	r2, [pc, #36]	; (800cdb4 <disk_ioctl+0x38>)
 800cd90:	009b      	lsls	r3, r3, #2
 800cd92:	4413      	add	r3, r2
 800cd94:	685b      	ldr	r3, [r3, #4]
 800cd96:	691b      	ldr	r3, [r3, #16]
 800cd98:	79fa      	ldrb	r2, [r7, #7]
 800cd9a:	4906      	ldr	r1, [pc, #24]	; (800cdb4 <disk_ioctl+0x38>)
 800cd9c:	440a      	add	r2, r1
 800cd9e:	7a10      	ldrb	r0, [r2, #8]
 800cda0:	79b9      	ldrb	r1, [r7, #6]
 800cda2:	683a      	ldr	r2, [r7, #0]
 800cda4:	4798      	blx	r3
 800cda6:	4603      	mov	r3, r0
 800cda8:	73fb      	strb	r3, [r7, #15]
  return res;
 800cdaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdac:	4618      	mov	r0, r3
 800cdae:	3710      	adds	r7, #16
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}
 800cdb4:	2000182c 	.word	0x2000182c

0800cdb8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cdb8:	b480      	push	{r7}
 800cdba:	b085      	sub	sp, #20
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	3301      	adds	r3, #1
 800cdc4:	781b      	ldrb	r3, [r3, #0]
 800cdc6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cdc8:	89fb      	ldrh	r3, [r7, #14]
 800cdca:	021b      	lsls	r3, r3, #8
 800cdcc:	b21a      	sxth	r2, r3
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	781b      	ldrb	r3, [r3, #0]
 800cdd2:	b21b      	sxth	r3, r3
 800cdd4:	4313      	orrs	r3, r2
 800cdd6:	b21b      	sxth	r3, r3
 800cdd8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800cdda:	89fb      	ldrh	r3, [r7, #14]
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	3714      	adds	r7, #20
 800cde0:	46bd      	mov	sp, r7
 800cde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde6:	4770      	bx	lr

0800cde8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800cde8:	b480      	push	{r7}
 800cdea:	b085      	sub	sp, #20
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	3303      	adds	r3, #3
 800cdf4:	781b      	ldrb	r3, [r3, #0]
 800cdf6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	021b      	lsls	r3, r3, #8
 800cdfc:	687a      	ldr	r2, [r7, #4]
 800cdfe:	3202      	adds	r2, #2
 800ce00:	7812      	ldrb	r2, [r2, #0]
 800ce02:	4313      	orrs	r3, r2
 800ce04:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	021b      	lsls	r3, r3, #8
 800ce0a:	687a      	ldr	r2, [r7, #4]
 800ce0c:	3201      	adds	r2, #1
 800ce0e:	7812      	ldrb	r2, [r2, #0]
 800ce10:	4313      	orrs	r3, r2
 800ce12:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	021b      	lsls	r3, r3, #8
 800ce18:	687a      	ldr	r2, [r7, #4]
 800ce1a:	7812      	ldrb	r2, [r2, #0]
 800ce1c:	4313      	orrs	r3, r2
 800ce1e:	60fb      	str	r3, [r7, #12]
	return rv;
 800ce20:	68fb      	ldr	r3, [r7, #12]
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3714      	adds	r7, #20
 800ce26:	46bd      	mov	sp, r7
 800ce28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2c:	4770      	bx	lr

0800ce2e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ce2e:	b480      	push	{r7}
 800ce30:	b083      	sub	sp, #12
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	6078      	str	r0, [r7, #4]
 800ce36:	460b      	mov	r3, r1
 800ce38:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	1c5a      	adds	r2, r3, #1
 800ce3e:	607a      	str	r2, [r7, #4]
 800ce40:	887a      	ldrh	r2, [r7, #2]
 800ce42:	b2d2      	uxtb	r2, r2
 800ce44:	701a      	strb	r2, [r3, #0]
 800ce46:	887b      	ldrh	r3, [r7, #2]
 800ce48:	0a1b      	lsrs	r3, r3, #8
 800ce4a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	1c5a      	adds	r2, r3, #1
 800ce50:	607a      	str	r2, [r7, #4]
 800ce52:	887a      	ldrh	r2, [r7, #2]
 800ce54:	b2d2      	uxtb	r2, r2
 800ce56:	701a      	strb	r2, [r3, #0]
}
 800ce58:	bf00      	nop
 800ce5a:	370c      	adds	r7, #12
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce62:	4770      	bx	lr

0800ce64 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ce64:	b480      	push	{r7}
 800ce66:	b083      	sub	sp, #12
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
 800ce6c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	1c5a      	adds	r2, r3, #1
 800ce72:	607a      	str	r2, [r7, #4]
 800ce74:	683a      	ldr	r2, [r7, #0]
 800ce76:	b2d2      	uxtb	r2, r2
 800ce78:	701a      	strb	r2, [r3, #0]
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	0a1b      	lsrs	r3, r3, #8
 800ce7e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	1c5a      	adds	r2, r3, #1
 800ce84:	607a      	str	r2, [r7, #4]
 800ce86:	683a      	ldr	r2, [r7, #0]
 800ce88:	b2d2      	uxtb	r2, r2
 800ce8a:	701a      	strb	r2, [r3, #0]
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	0a1b      	lsrs	r3, r3, #8
 800ce90:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	1c5a      	adds	r2, r3, #1
 800ce96:	607a      	str	r2, [r7, #4]
 800ce98:	683a      	ldr	r2, [r7, #0]
 800ce9a:	b2d2      	uxtb	r2, r2
 800ce9c:	701a      	strb	r2, [r3, #0]
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	0a1b      	lsrs	r3, r3, #8
 800cea2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	1c5a      	adds	r2, r3, #1
 800cea8:	607a      	str	r2, [r7, #4]
 800ceaa:	683a      	ldr	r2, [r7, #0]
 800ceac:	b2d2      	uxtb	r2, r2
 800ceae:	701a      	strb	r2, [r3, #0]
}
 800ceb0:	bf00      	nop
 800ceb2:	370c      	adds	r7, #12
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceba:	4770      	bx	lr

0800cebc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800cebc:	b480      	push	{r7}
 800cebe:	b087      	sub	sp, #28
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	60f8      	str	r0, [r7, #12]
 800cec4:	60b9      	str	r1, [r7, #8]
 800cec6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d00d      	beq.n	800cef2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ced6:	693a      	ldr	r2, [r7, #16]
 800ced8:	1c53      	adds	r3, r2, #1
 800ceda:	613b      	str	r3, [r7, #16]
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	1c59      	adds	r1, r3, #1
 800cee0:	6179      	str	r1, [r7, #20]
 800cee2:	7812      	ldrb	r2, [r2, #0]
 800cee4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	3b01      	subs	r3, #1
 800ceea:	607b      	str	r3, [r7, #4]
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d1f1      	bne.n	800ced6 <mem_cpy+0x1a>
	}
}
 800cef2:	bf00      	nop
 800cef4:	371c      	adds	r7, #28
 800cef6:	46bd      	mov	sp, r7
 800cef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefc:	4770      	bx	lr

0800cefe <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800cefe:	b480      	push	{r7}
 800cf00:	b087      	sub	sp, #28
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	60f8      	str	r0, [r7, #12]
 800cf06:	60b9      	str	r1, [r7, #8]
 800cf08:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	1c5a      	adds	r2, r3, #1
 800cf12:	617a      	str	r2, [r7, #20]
 800cf14:	68ba      	ldr	r2, [r7, #8]
 800cf16:	b2d2      	uxtb	r2, r2
 800cf18:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	3b01      	subs	r3, #1
 800cf1e:	607b      	str	r3, [r7, #4]
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d1f3      	bne.n	800cf0e <mem_set+0x10>
}
 800cf26:	bf00      	nop
 800cf28:	bf00      	nop
 800cf2a:	371c      	adds	r7, #28
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf32:	4770      	bx	lr

0800cf34 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800cf34:	b480      	push	{r7}
 800cf36:	b089      	sub	sp, #36	; 0x24
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	60f8      	str	r0, [r7, #12]
 800cf3c:	60b9      	str	r1, [r7, #8]
 800cf3e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	61fb      	str	r3, [r7, #28]
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800cf4c:	69fb      	ldr	r3, [r7, #28]
 800cf4e:	1c5a      	adds	r2, r3, #1
 800cf50:	61fa      	str	r2, [r7, #28]
 800cf52:	781b      	ldrb	r3, [r3, #0]
 800cf54:	4619      	mov	r1, r3
 800cf56:	69bb      	ldr	r3, [r7, #24]
 800cf58:	1c5a      	adds	r2, r3, #1
 800cf5a:	61ba      	str	r2, [r7, #24]
 800cf5c:	781b      	ldrb	r3, [r3, #0]
 800cf5e:	1acb      	subs	r3, r1, r3
 800cf60:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	3b01      	subs	r3, #1
 800cf66:	607b      	str	r3, [r7, #4]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d002      	beq.n	800cf74 <mem_cmp+0x40>
 800cf6e:	697b      	ldr	r3, [r7, #20]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d0eb      	beq.n	800cf4c <mem_cmp+0x18>

	return r;
 800cf74:	697b      	ldr	r3, [r7, #20]
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3724      	adds	r7, #36	; 0x24
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf80:	4770      	bx	lr

0800cf82 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800cf82:	b480      	push	{r7}
 800cf84:	b083      	sub	sp, #12
 800cf86:	af00      	add	r7, sp, #0
 800cf88:	6078      	str	r0, [r7, #4]
 800cf8a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800cf8c:	e002      	b.n	800cf94 <chk_chr+0x12>
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	3301      	adds	r3, #1
 800cf92:	607b      	str	r3, [r7, #4]
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	781b      	ldrb	r3, [r3, #0]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d005      	beq.n	800cfa8 <chk_chr+0x26>
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	461a      	mov	r2, r3
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	4293      	cmp	r3, r2
 800cfa6:	d1f2      	bne.n	800cf8e <chk_chr+0xc>
	return *str;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	781b      	ldrb	r3, [r3, #0]
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	370c      	adds	r7, #12
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb6:	4770      	bx	lr

0800cfb8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b085      	sub	sp, #20
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
 800cfc0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	60bb      	str	r3, [r7, #8]
 800cfc6:	68bb      	ldr	r3, [r7, #8]
 800cfc8:	60fb      	str	r3, [r7, #12]
 800cfca:	e029      	b.n	800d020 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800cfcc:	4a27      	ldr	r2, [pc, #156]	; (800d06c <chk_lock+0xb4>)
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	011b      	lsls	r3, r3, #4
 800cfd2:	4413      	add	r3, r2
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d01d      	beq.n	800d016 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cfda:	4a24      	ldr	r2, [pc, #144]	; (800d06c <chk_lock+0xb4>)
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	011b      	lsls	r3, r3, #4
 800cfe0:	4413      	add	r3, r2
 800cfe2:	681a      	ldr	r2, [r3, #0]
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	429a      	cmp	r2, r3
 800cfea:	d116      	bne.n	800d01a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800cfec:	4a1f      	ldr	r2, [pc, #124]	; (800d06c <chk_lock+0xb4>)
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	011b      	lsls	r3, r3, #4
 800cff2:	4413      	add	r3, r2
 800cff4:	3304      	adds	r3, #4
 800cff6:	681a      	ldr	r2, [r3, #0]
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cffc:	429a      	cmp	r2, r3
 800cffe:	d10c      	bne.n	800d01a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d000:	4a1a      	ldr	r2, [pc, #104]	; (800d06c <chk_lock+0xb4>)
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	011b      	lsls	r3, r3, #4
 800d006:	4413      	add	r3, r2
 800d008:	3308      	adds	r3, #8
 800d00a:	681a      	ldr	r2, [r3, #0]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d010:	429a      	cmp	r2, r3
 800d012:	d102      	bne.n	800d01a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d014:	e007      	b.n	800d026 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d016:	2301      	movs	r3, #1
 800d018:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	3301      	adds	r3, #1
 800d01e:	60fb      	str	r3, [r7, #12]
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	2b01      	cmp	r3, #1
 800d024:	d9d2      	bls.n	800cfcc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	2b02      	cmp	r3, #2
 800d02a:	d109      	bne.n	800d040 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d102      	bne.n	800d038 <chk_lock+0x80>
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	2b02      	cmp	r3, #2
 800d036:	d101      	bne.n	800d03c <chk_lock+0x84>
 800d038:	2300      	movs	r3, #0
 800d03a:	e010      	b.n	800d05e <chk_lock+0xa6>
 800d03c:	2312      	movs	r3, #18
 800d03e:	e00e      	b.n	800d05e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d108      	bne.n	800d058 <chk_lock+0xa0>
 800d046:	4a09      	ldr	r2, [pc, #36]	; (800d06c <chk_lock+0xb4>)
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	011b      	lsls	r3, r3, #4
 800d04c:	4413      	add	r3, r2
 800d04e:	330c      	adds	r3, #12
 800d050:	881b      	ldrh	r3, [r3, #0]
 800d052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d056:	d101      	bne.n	800d05c <chk_lock+0xa4>
 800d058:	2310      	movs	r3, #16
 800d05a:	e000      	b.n	800d05e <chk_lock+0xa6>
 800d05c:	2300      	movs	r3, #0
}
 800d05e:	4618      	mov	r0, r3
 800d060:	3714      	adds	r7, #20
 800d062:	46bd      	mov	sp, r7
 800d064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d068:	4770      	bx	lr
 800d06a:	bf00      	nop
 800d06c:	2000160c 	.word	0x2000160c

0800d070 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d070:	b480      	push	{r7}
 800d072:	b083      	sub	sp, #12
 800d074:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d076:	2300      	movs	r3, #0
 800d078:	607b      	str	r3, [r7, #4]
 800d07a:	e002      	b.n	800d082 <enq_lock+0x12>
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	3301      	adds	r3, #1
 800d080:	607b      	str	r3, [r7, #4]
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2b01      	cmp	r3, #1
 800d086:	d806      	bhi.n	800d096 <enq_lock+0x26>
 800d088:	4a09      	ldr	r2, [pc, #36]	; (800d0b0 <enq_lock+0x40>)
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	011b      	lsls	r3, r3, #4
 800d08e:	4413      	add	r3, r2
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d1f2      	bne.n	800d07c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2b02      	cmp	r3, #2
 800d09a:	bf14      	ite	ne
 800d09c:	2301      	movne	r3, #1
 800d09e:	2300      	moveq	r3, #0
 800d0a0:	b2db      	uxtb	r3, r3
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	370c      	adds	r7, #12
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ac:	4770      	bx	lr
 800d0ae:	bf00      	nop
 800d0b0:	2000160c 	.word	0x2000160c

0800d0b4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	b085      	sub	sp, #20
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d0be:	2300      	movs	r3, #0
 800d0c0:	60fb      	str	r3, [r7, #12]
 800d0c2:	e01f      	b.n	800d104 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d0c4:	4a41      	ldr	r2, [pc, #260]	; (800d1cc <inc_lock+0x118>)
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	011b      	lsls	r3, r3, #4
 800d0ca:	4413      	add	r3, r2
 800d0cc:	681a      	ldr	r2, [r3, #0]
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	429a      	cmp	r2, r3
 800d0d4:	d113      	bne.n	800d0fe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d0d6:	4a3d      	ldr	r2, [pc, #244]	; (800d1cc <inc_lock+0x118>)
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	011b      	lsls	r3, r3, #4
 800d0dc:	4413      	add	r3, r2
 800d0de:	3304      	adds	r3, #4
 800d0e0:	681a      	ldr	r2, [r3, #0]
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d0e6:	429a      	cmp	r2, r3
 800d0e8:	d109      	bne.n	800d0fe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d0ea:	4a38      	ldr	r2, [pc, #224]	; (800d1cc <inc_lock+0x118>)
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	011b      	lsls	r3, r3, #4
 800d0f0:	4413      	add	r3, r2
 800d0f2:	3308      	adds	r3, #8
 800d0f4:	681a      	ldr	r2, [r3, #0]
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d0fa:	429a      	cmp	r2, r3
 800d0fc:	d006      	beq.n	800d10c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	3301      	adds	r3, #1
 800d102:	60fb      	str	r3, [r7, #12]
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	2b01      	cmp	r3, #1
 800d108:	d9dc      	bls.n	800d0c4 <inc_lock+0x10>
 800d10a:	e000      	b.n	800d10e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d10c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	2b02      	cmp	r3, #2
 800d112:	d132      	bne.n	800d17a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d114:	2300      	movs	r3, #0
 800d116:	60fb      	str	r3, [r7, #12]
 800d118:	e002      	b.n	800d120 <inc_lock+0x6c>
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	3301      	adds	r3, #1
 800d11e:	60fb      	str	r3, [r7, #12]
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	2b01      	cmp	r3, #1
 800d124:	d806      	bhi.n	800d134 <inc_lock+0x80>
 800d126:	4a29      	ldr	r2, [pc, #164]	; (800d1cc <inc_lock+0x118>)
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	011b      	lsls	r3, r3, #4
 800d12c:	4413      	add	r3, r2
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d1f2      	bne.n	800d11a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	2b02      	cmp	r3, #2
 800d138:	d101      	bne.n	800d13e <inc_lock+0x8a>
 800d13a:	2300      	movs	r3, #0
 800d13c:	e040      	b.n	800d1c0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681a      	ldr	r2, [r3, #0]
 800d142:	4922      	ldr	r1, [pc, #136]	; (800d1cc <inc_lock+0x118>)
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	011b      	lsls	r3, r3, #4
 800d148:	440b      	add	r3, r1
 800d14a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	689a      	ldr	r2, [r3, #8]
 800d150:	491e      	ldr	r1, [pc, #120]	; (800d1cc <inc_lock+0x118>)
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	011b      	lsls	r3, r3, #4
 800d156:	440b      	add	r3, r1
 800d158:	3304      	adds	r3, #4
 800d15a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	695a      	ldr	r2, [r3, #20]
 800d160:	491a      	ldr	r1, [pc, #104]	; (800d1cc <inc_lock+0x118>)
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	011b      	lsls	r3, r3, #4
 800d166:	440b      	add	r3, r1
 800d168:	3308      	adds	r3, #8
 800d16a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d16c:	4a17      	ldr	r2, [pc, #92]	; (800d1cc <inc_lock+0x118>)
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	011b      	lsls	r3, r3, #4
 800d172:	4413      	add	r3, r2
 800d174:	330c      	adds	r3, #12
 800d176:	2200      	movs	r2, #0
 800d178:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d009      	beq.n	800d194 <inc_lock+0xe0>
 800d180:	4a12      	ldr	r2, [pc, #72]	; (800d1cc <inc_lock+0x118>)
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	011b      	lsls	r3, r3, #4
 800d186:	4413      	add	r3, r2
 800d188:	330c      	adds	r3, #12
 800d18a:	881b      	ldrh	r3, [r3, #0]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d001      	beq.n	800d194 <inc_lock+0xe0>
 800d190:	2300      	movs	r3, #0
 800d192:	e015      	b.n	800d1c0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d108      	bne.n	800d1ac <inc_lock+0xf8>
 800d19a:	4a0c      	ldr	r2, [pc, #48]	; (800d1cc <inc_lock+0x118>)
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	011b      	lsls	r3, r3, #4
 800d1a0:	4413      	add	r3, r2
 800d1a2:	330c      	adds	r3, #12
 800d1a4:	881b      	ldrh	r3, [r3, #0]
 800d1a6:	3301      	adds	r3, #1
 800d1a8:	b29a      	uxth	r2, r3
 800d1aa:	e001      	b.n	800d1b0 <inc_lock+0xfc>
 800d1ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d1b0:	4906      	ldr	r1, [pc, #24]	; (800d1cc <inc_lock+0x118>)
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	011b      	lsls	r3, r3, #4
 800d1b6:	440b      	add	r3, r1
 800d1b8:	330c      	adds	r3, #12
 800d1ba:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	3301      	adds	r3, #1
}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	3714      	adds	r7, #20
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ca:	4770      	bx	lr
 800d1cc:	2000160c 	.word	0x2000160c

0800d1d0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	b085      	sub	sp, #20
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	3b01      	subs	r3, #1
 800d1dc:	607b      	str	r3, [r7, #4]
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2b01      	cmp	r3, #1
 800d1e2:	d825      	bhi.n	800d230 <dec_lock+0x60>
		n = Files[i].ctr;
 800d1e4:	4a17      	ldr	r2, [pc, #92]	; (800d244 <dec_lock+0x74>)
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	011b      	lsls	r3, r3, #4
 800d1ea:	4413      	add	r3, r2
 800d1ec:	330c      	adds	r3, #12
 800d1ee:	881b      	ldrh	r3, [r3, #0]
 800d1f0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d1f2:	89fb      	ldrh	r3, [r7, #14]
 800d1f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1f8:	d101      	bne.n	800d1fe <dec_lock+0x2e>
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d1fe:	89fb      	ldrh	r3, [r7, #14]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d002      	beq.n	800d20a <dec_lock+0x3a>
 800d204:	89fb      	ldrh	r3, [r7, #14]
 800d206:	3b01      	subs	r3, #1
 800d208:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d20a:	4a0e      	ldr	r2, [pc, #56]	; (800d244 <dec_lock+0x74>)
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	011b      	lsls	r3, r3, #4
 800d210:	4413      	add	r3, r2
 800d212:	330c      	adds	r3, #12
 800d214:	89fa      	ldrh	r2, [r7, #14]
 800d216:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d218:	89fb      	ldrh	r3, [r7, #14]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d105      	bne.n	800d22a <dec_lock+0x5a>
 800d21e:	4a09      	ldr	r2, [pc, #36]	; (800d244 <dec_lock+0x74>)
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	011b      	lsls	r3, r3, #4
 800d224:	4413      	add	r3, r2
 800d226:	2200      	movs	r2, #0
 800d228:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d22a:	2300      	movs	r3, #0
 800d22c:	737b      	strb	r3, [r7, #13]
 800d22e:	e001      	b.n	800d234 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d230:	2302      	movs	r3, #2
 800d232:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d234:	7b7b      	ldrb	r3, [r7, #13]
}
 800d236:	4618      	mov	r0, r3
 800d238:	3714      	adds	r7, #20
 800d23a:	46bd      	mov	sp, r7
 800d23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d240:	4770      	bx	lr
 800d242:	bf00      	nop
 800d244:	2000160c 	.word	0x2000160c

0800d248 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d248:	b480      	push	{r7}
 800d24a:	b085      	sub	sp, #20
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d250:	2300      	movs	r3, #0
 800d252:	60fb      	str	r3, [r7, #12]
 800d254:	e010      	b.n	800d278 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d256:	4a0d      	ldr	r2, [pc, #52]	; (800d28c <clear_lock+0x44>)
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	011b      	lsls	r3, r3, #4
 800d25c:	4413      	add	r3, r2
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	687a      	ldr	r2, [r7, #4]
 800d262:	429a      	cmp	r2, r3
 800d264:	d105      	bne.n	800d272 <clear_lock+0x2a>
 800d266:	4a09      	ldr	r2, [pc, #36]	; (800d28c <clear_lock+0x44>)
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	011b      	lsls	r3, r3, #4
 800d26c:	4413      	add	r3, r2
 800d26e:	2200      	movs	r2, #0
 800d270:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	3301      	adds	r3, #1
 800d276:	60fb      	str	r3, [r7, #12]
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	2b01      	cmp	r3, #1
 800d27c:	d9eb      	bls.n	800d256 <clear_lock+0xe>
	}
}
 800d27e:	bf00      	nop
 800d280:	bf00      	nop
 800d282:	3714      	adds	r7, #20
 800d284:	46bd      	mov	sp, r7
 800d286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28a:	4770      	bx	lr
 800d28c:	2000160c 	.word	0x2000160c

0800d290 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b086      	sub	sp, #24
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d298:	2300      	movs	r3, #0
 800d29a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	78db      	ldrb	r3, [r3, #3]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d034      	beq.n	800d30e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2a8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	7858      	ldrb	r0, [r3, #1]
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	697a      	ldr	r2, [r7, #20]
 800d2b8:	f7ff fd40 	bl	800cd3c <disk_write>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d002      	beq.n	800d2c8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	73fb      	strb	r3, [r7, #15]
 800d2c6:	e022      	b.n	800d30e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2d2:	697a      	ldr	r2, [r7, #20]
 800d2d4:	1ad2      	subs	r2, r2, r3
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	69db      	ldr	r3, [r3, #28]
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	d217      	bcs.n	800d30e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	789b      	ldrb	r3, [r3, #2]
 800d2e2:	613b      	str	r3, [r7, #16]
 800d2e4:	e010      	b.n	800d308 <sync_window+0x78>
					wsect += fs->fsize;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	69db      	ldr	r3, [r3, #28]
 800d2ea:	697a      	ldr	r2, [r7, #20]
 800d2ec:	4413      	add	r3, r2
 800d2ee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	7858      	ldrb	r0, [r3, #1]
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d2fa:	2301      	movs	r3, #1
 800d2fc:	697a      	ldr	r2, [r7, #20]
 800d2fe:	f7ff fd1d 	bl	800cd3c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d302:	693b      	ldr	r3, [r7, #16]
 800d304:	3b01      	subs	r3, #1
 800d306:	613b      	str	r3, [r7, #16]
 800d308:	693b      	ldr	r3, [r7, #16]
 800d30a:	2b01      	cmp	r3, #1
 800d30c:	d8eb      	bhi.n	800d2e6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d30e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d310:	4618      	mov	r0, r3
 800d312:	3718      	adds	r7, #24
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}

0800d318 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b084      	sub	sp, #16
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
 800d320:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d322:	2300      	movs	r3, #0
 800d324:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d32a:	683a      	ldr	r2, [r7, #0]
 800d32c:	429a      	cmp	r2, r3
 800d32e:	d01b      	beq.n	800d368 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f7ff ffad 	bl	800d290 <sync_window>
 800d336:	4603      	mov	r3, r0
 800d338:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d33a:	7bfb      	ldrb	r3, [r7, #15]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d113      	bne.n	800d368 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	7858      	ldrb	r0, [r3, #1]
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d34a:	2301      	movs	r3, #1
 800d34c:	683a      	ldr	r2, [r7, #0]
 800d34e:	f7ff fcd5 	bl	800ccfc <disk_read>
 800d352:	4603      	mov	r3, r0
 800d354:	2b00      	cmp	r3, #0
 800d356:	d004      	beq.n	800d362 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d358:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d35c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d35e:	2301      	movs	r3, #1
 800d360:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	683a      	ldr	r2, [r7, #0]
 800d366:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800d368:	7bfb      	ldrb	r3, [r7, #15]
}
 800d36a:	4618      	mov	r0, r3
 800d36c:	3710      	adds	r7, #16
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}
	...

0800d374 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b084      	sub	sp, #16
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	f7ff ff87 	bl	800d290 <sync_window>
 800d382:	4603      	mov	r3, r0
 800d384:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d386:	7bfb      	ldrb	r3, [r7, #15]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d158      	bne.n	800d43e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	781b      	ldrb	r3, [r3, #0]
 800d390:	2b03      	cmp	r3, #3
 800d392:	d148      	bne.n	800d426 <sync_fs+0xb2>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	791b      	ldrb	r3, [r3, #4]
 800d398:	2b01      	cmp	r3, #1
 800d39a:	d144      	bne.n	800d426 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	3334      	adds	r3, #52	; 0x34
 800d3a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d3a4:	2100      	movs	r1, #0
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f7ff fda9 	bl	800cefe <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	3334      	adds	r3, #52	; 0x34
 800d3b0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d3b4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f7ff fd38 	bl	800ce2e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	3334      	adds	r3, #52	; 0x34
 800d3c2:	4921      	ldr	r1, [pc, #132]	; (800d448 <sync_fs+0xd4>)
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f7ff fd4d 	bl	800ce64 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	3334      	adds	r3, #52	; 0x34
 800d3ce:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d3d2:	491e      	ldr	r1, [pc, #120]	; (800d44c <sync_fs+0xd8>)
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f7ff fd45 	bl	800ce64 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	3334      	adds	r3, #52	; 0x34
 800d3de:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	695b      	ldr	r3, [r3, #20]
 800d3e6:	4619      	mov	r1, r3
 800d3e8:	4610      	mov	r0, r2
 800d3ea:	f7ff fd3b 	bl	800ce64 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	3334      	adds	r3, #52	; 0x34
 800d3f2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	691b      	ldr	r3, [r3, #16]
 800d3fa:	4619      	mov	r1, r3
 800d3fc:	4610      	mov	r0, r2
 800d3fe:	f7ff fd31 	bl	800ce64 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6a1b      	ldr	r3, [r3, #32]
 800d406:	1c5a      	adds	r2, r3, #1
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	7858      	ldrb	r0, [r3, #1]
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d41a:	2301      	movs	r3, #1
 800d41c:	f7ff fc8e 	bl	800cd3c <disk_write>
			fs->fsi_flag = 0;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2200      	movs	r2, #0
 800d424:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	785b      	ldrb	r3, [r3, #1]
 800d42a:	2200      	movs	r2, #0
 800d42c:	2100      	movs	r1, #0
 800d42e:	4618      	mov	r0, r3
 800d430:	f7ff fca4 	bl	800cd7c <disk_ioctl>
 800d434:	4603      	mov	r3, r0
 800d436:	2b00      	cmp	r3, #0
 800d438:	d001      	beq.n	800d43e <sync_fs+0xca>
 800d43a:	2301      	movs	r3, #1
 800d43c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d43e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d440:	4618      	mov	r0, r3
 800d442:	3710      	adds	r7, #16
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}
 800d448:	41615252 	.word	0x41615252
 800d44c:	61417272 	.word	0x61417272

0800d450 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d450:	b480      	push	{r7}
 800d452:	b083      	sub	sp, #12
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
 800d458:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	3b02      	subs	r3, #2
 800d45e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	699b      	ldr	r3, [r3, #24]
 800d464:	3b02      	subs	r3, #2
 800d466:	683a      	ldr	r2, [r7, #0]
 800d468:	429a      	cmp	r2, r3
 800d46a:	d301      	bcc.n	800d470 <clust2sect+0x20>
 800d46c:	2300      	movs	r3, #0
 800d46e:	e008      	b.n	800d482 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	895b      	ldrh	r3, [r3, #10]
 800d474:	461a      	mov	r2, r3
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	fb03 f202 	mul.w	r2, r3, r2
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d480:	4413      	add	r3, r2
}
 800d482:	4618      	mov	r0, r3
 800d484:	370c      	adds	r7, #12
 800d486:	46bd      	mov	sp, r7
 800d488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48c:	4770      	bx	lr

0800d48e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d48e:	b580      	push	{r7, lr}
 800d490:	b086      	sub	sp, #24
 800d492:	af00      	add	r7, sp, #0
 800d494:	6078      	str	r0, [r7, #4]
 800d496:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	2b01      	cmp	r3, #1
 800d4a2:	d904      	bls.n	800d4ae <get_fat+0x20>
 800d4a4:	693b      	ldr	r3, [r7, #16]
 800d4a6:	699b      	ldr	r3, [r3, #24]
 800d4a8:	683a      	ldr	r2, [r7, #0]
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d302      	bcc.n	800d4b4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	617b      	str	r3, [r7, #20]
 800d4b2:	e08f      	b.n	800d5d4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d4b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d4b8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d4ba:	693b      	ldr	r3, [r7, #16]
 800d4bc:	781b      	ldrb	r3, [r3, #0]
 800d4be:	2b03      	cmp	r3, #3
 800d4c0:	d062      	beq.n	800d588 <get_fat+0xfa>
 800d4c2:	2b03      	cmp	r3, #3
 800d4c4:	dc7c      	bgt.n	800d5c0 <get_fat+0x132>
 800d4c6:	2b01      	cmp	r3, #1
 800d4c8:	d002      	beq.n	800d4d0 <get_fat+0x42>
 800d4ca:	2b02      	cmp	r3, #2
 800d4cc:	d042      	beq.n	800d554 <get_fat+0xc6>
 800d4ce:	e077      	b.n	800d5c0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	60fb      	str	r3, [r7, #12]
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	085b      	lsrs	r3, r3, #1
 800d4d8:	68fa      	ldr	r2, [r7, #12]
 800d4da:	4413      	add	r3, r2
 800d4dc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	0a5b      	lsrs	r3, r3, #9
 800d4e6:	4413      	add	r3, r2
 800d4e8:	4619      	mov	r1, r3
 800d4ea:	6938      	ldr	r0, [r7, #16]
 800d4ec:	f7ff ff14 	bl	800d318 <move_window>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d167      	bne.n	800d5c6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	1c5a      	adds	r2, r3, #1
 800d4fa:	60fa      	str	r2, [r7, #12]
 800d4fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d500:	693a      	ldr	r2, [r7, #16]
 800d502:	4413      	add	r3, r2
 800d504:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d508:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	0a5b      	lsrs	r3, r3, #9
 800d512:	4413      	add	r3, r2
 800d514:	4619      	mov	r1, r3
 800d516:	6938      	ldr	r0, [r7, #16]
 800d518:	f7ff fefe 	bl	800d318 <move_window>
 800d51c:	4603      	mov	r3, r0
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d153      	bne.n	800d5ca <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d528:	693a      	ldr	r2, [r7, #16]
 800d52a:	4413      	add	r3, r2
 800d52c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d530:	021b      	lsls	r3, r3, #8
 800d532:	461a      	mov	r2, r3
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	4313      	orrs	r3, r2
 800d538:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	f003 0301 	and.w	r3, r3, #1
 800d540:	2b00      	cmp	r3, #0
 800d542:	d002      	beq.n	800d54a <get_fat+0xbc>
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	091b      	lsrs	r3, r3, #4
 800d548:	e002      	b.n	800d550 <get_fat+0xc2>
 800d54a:	68bb      	ldr	r3, [r7, #8]
 800d54c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d550:	617b      	str	r3, [r7, #20]
			break;
 800d552:	e03f      	b.n	800d5d4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	0a1b      	lsrs	r3, r3, #8
 800d55c:	4413      	add	r3, r2
 800d55e:	4619      	mov	r1, r3
 800d560:	6938      	ldr	r0, [r7, #16]
 800d562:	f7ff fed9 	bl	800d318 <move_window>
 800d566:	4603      	mov	r3, r0
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d130      	bne.n	800d5ce <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d56c:	693b      	ldr	r3, [r7, #16]
 800d56e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	005b      	lsls	r3, r3, #1
 800d576:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d57a:	4413      	add	r3, r2
 800d57c:	4618      	mov	r0, r3
 800d57e:	f7ff fc1b 	bl	800cdb8 <ld_word>
 800d582:	4603      	mov	r3, r0
 800d584:	617b      	str	r3, [r7, #20]
			break;
 800d586:	e025      	b.n	800d5d4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d588:	693b      	ldr	r3, [r7, #16]
 800d58a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	09db      	lsrs	r3, r3, #7
 800d590:	4413      	add	r3, r2
 800d592:	4619      	mov	r1, r3
 800d594:	6938      	ldr	r0, [r7, #16]
 800d596:	f7ff febf 	bl	800d318 <move_window>
 800d59a:	4603      	mov	r3, r0
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d118      	bne.n	800d5d2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d5a0:	693b      	ldr	r3, [r7, #16]
 800d5a2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	009b      	lsls	r3, r3, #2
 800d5aa:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d5ae:	4413      	add	r3, r2
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f7ff fc19 	bl	800cde8 <ld_dword>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d5bc:	617b      	str	r3, [r7, #20]
			break;
 800d5be:	e009      	b.n	800d5d4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	617b      	str	r3, [r7, #20]
 800d5c4:	e006      	b.n	800d5d4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d5c6:	bf00      	nop
 800d5c8:	e004      	b.n	800d5d4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d5ca:	bf00      	nop
 800d5cc:	e002      	b.n	800d5d4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d5ce:	bf00      	nop
 800d5d0:	e000      	b.n	800d5d4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d5d2:	bf00      	nop
		}
	}

	return val;
 800d5d4:	697b      	ldr	r3, [r7, #20]
}
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	3718      	adds	r7, #24
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}

0800d5de <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d5de:	b590      	push	{r4, r7, lr}
 800d5e0:	b089      	sub	sp, #36	; 0x24
 800d5e2:	af00      	add	r7, sp, #0
 800d5e4:	60f8      	str	r0, [r7, #12]
 800d5e6:	60b9      	str	r1, [r7, #8]
 800d5e8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d5ea:	2302      	movs	r3, #2
 800d5ec:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	2b01      	cmp	r3, #1
 800d5f2:	f240 80d9 	bls.w	800d7a8 <put_fat+0x1ca>
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	699b      	ldr	r3, [r3, #24]
 800d5fa:	68ba      	ldr	r2, [r7, #8]
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	f080 80d3 	bcs.w	800d7a8 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	781b      	ldrb	r3, [r3, #0]
 800d606:	2b03      	cmp	r3, #3
 800d608:	f000 8096 	beq.w	800d738 <put_fat+0x15a>
 800d60c:	2b03      	cmp	r3, #3
 800d60e:	f300 80cb 	bgt.w	800d7a8 <put_fat+0x1ca>
 800d612:	2b01      	cmp	r3, #1
 800d614:	d002      	beq.n	800d61c <put_fat+0x3e>
 800d616:	2b02      	cmp	r3, #2
 800d618:	d06e      	beq.n	800d6f8 <put_fat+0x11a>
 800d61a:	e0c5      	b.n	800d7a8 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	61bb      	str	r3, [r7, #24]
 800d620:	69bb      	ldr	r3, [r7, #24]
 800d622:	085b      	lsrs	r3, r3, #1
 800d624:	69ba      	ldr	r2, [r7, #24]
 800d626:	4413      	add	r3, r2
 800d628:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d62e:	69bb      	ldr	r3, [r7, #24]
 800d630:	0a5b      	lsrs	r3, r3, #9
 800d632:	4413      	add	r3, r2
 800d634:	4619      	mov	r1, r3
 800d636:	68f8      	ldr	r0, [r7, #12]
 800d638:	f7ff fe6e 	bl	800d318 <move_window>
 800d63c:	4603      	mov	r3, r0
 800d63e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d640:	7ffb      	ldrb	r3, [r7, #31]
 800d642:	2b00      	cmp	r3, #0
 800d644:	f040 80a9 	bne.w	800d79a <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d64e:	69bb      	ldr	r3, [r7, #24]
 800d650:	1c59      	adds	r1, r3, #1
 800d652:	61b9      	str	r1, [r7, #24]
 800d654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d658:	4413      	add	r3, r2
 800d65a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	f003 0301 	and.w	r3, r3, #1
 800d662:	2b00      	cmp	r3, #0
 800d664:	d00d      	beq.n	800d682 <put_fat+0xa4>
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	781b      	ldrb	r3, [r3, #0]
 800d66a:	b25b      	sxtb	r3, r3
 800d66c:	f003 030f 	and.w	r3, r3, #15
 800d670:	b25a      	sxtb	r2, r3
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	b2db      	uxtb	r3, r3
 800d676:	011b      	lsls	r3, r3, #4
 800d678:	b25b      	sxtb	r3, r3
 800d67a:	4313      	orrs	r3, r2
 800d67c:	b25b      	sxtb	r3, r3
 800d67e:	b2db      	uxtb	r3, r3
 800d680:	e001      	b.n	800d686 <put_fat+0xa8>
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	b2db      	uxtb	r3, r3
 800d686:	697a      	ldr	r2, [r7, #20]
 800d688:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	2201      	movs	r2, #1
 800d68e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d694:	69bb      	ldr	r3, [r7, #24]
 800d696:	0a5b      	lsrs	r3, r3, #9
 800d698:	4413      	add	r3, r2
 800d69a:	4619      	mov	r1, r3
 800d69c:	68f8      	ldr	r0, [r7, #12]
 800d69e:	f7ff fe3b 	bl	800d318 <move_window>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d6a6:	7ffb      	ldrb	r3, [r7, #31]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d178      	bne.n	800d79e <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d6b2:	69bb      	ldr	r3, [r7, #24]
 800d6b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6b8:	4413      	add	r3, r2
 800d6ba:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	f003 0301 	and.w	r3, r3, #1
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d003      	beq.n	800d6ce <put_fat+0xf0>
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	091b      	lsrs	r3, r3, #4
 800d6ca:	b2db      	uxtb	r3, r3
 800d6cc:	e00e      	b.n	800d6ec <put_fat+0x10e>
 800d6ce:	697b      	ldr	r3, [r7, #20]
 800d6d0:	781b      	ldrb	r3, [r3, #0]
 800d6d2:	b25b      	sxtb	r3, r3
 800d6d4:	f023 030f 	bic.w	r3, r3, #15
 800d6d8:	b25a      	sxtb	r2, r3
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	0a1b      	lsrs	r3, r3, #8
 800d6de:	b25b      	sxtb	r3, r3
 800d6e0:	f003 030f 	and.w	r3, r3, #15
 800d6e4:	b25b      	sxtb	r3, r3
 800d6e6:	4313      	orrs	r3, r2
 800d6e8:	b25b      	sxtb	r3, r3
 800d6ea:	b2db      	uxtb	r3, r3
 800d6ec:	697a      	ldr	r2, [r7, #20]
 800d6ee:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	2201      	movs	r2, #1
 800d6f4:	70da      	strb	r2, [r3, #3]
			break;
 800d6f6:	e057      	b.n	800d7a8 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	0a1b      	lsrs	r3, r3, #8
 800d700:	4413      	add	r3, r2
 800d702:	4619      	mov	r1, r3
 800d704:	68f8      	ldr	r0, [r7, #12]
 800d706:	f7ff fe07 	bl	800d318 <move_window>
 800d70a:	4603      	mov	r3, r0
 800d70c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d70e:	7ffb      	ldrb	r3, [r7, #31]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d146      	bne.n	800d7a2 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	005b      	lsls	r3, r3, #1
 800d71e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d722:	4413      	add	r3, r2
 800d724:	687a      	ldr	r2, [r7, #4]
 800d726:	b292      	uxth	r2, r2
 800d728:	4611      	mov	r1, r2
 800d72a:	4618      	mov	r0, r3
 800d72c:	f7ff fb7f 	bl	800ce2e <st_word>
			fs->wflag = 1;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	2201      	movs	r2, #1
 800d734:	70da      	strb	r2, [r3, #3]
			break;
 800d736:	e037      	b.n	800d7a8 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	09db      	lsrs	r3, r3, #7
 800d740:	4413      	add	r3, r2
 800d742:	4619      	mov	r1, r3
 800d744:	68f8      	ldr	r0, [r7, #12]
 800d746:	f7ff fde7 	bl	800d318 <move_window>
 800d74a:	4603      	mov	r3, r0
 800d74c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d74e:	7ffb      	ldrb	r3, [r7, #31]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d128      	bne.n	800d7a6 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d760:	68bb      	ldr	r3, [r7, #8]
 800d762:	009b      	lsls	r3, r3, #2
 800d764:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d768:	4413      	add	r3, r2
 800d76a:	4618      	mov	r0, r3
 800d76c:	f7ff fb3c 	bl	800cde8 <ld_dword>
 800d770:	4603      	mov	r3, r0
 800d772:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d776:	4323      	orrs	r3, r4
 800d778:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	009b      	lsls	r3, r3, #2
 800d784:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d788:	4413      	add	r3, r2
 800d78a:	6879      	ldr	r1, [r7, #4]
 800d78c:	4618      	mov	r0, r3
 800d78e:	f7ff fb69 	bl	800ce64 <st_dword>
			fs->wflag = 1;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	2201      	movs	r2, #1
 800d796:	70da      	strb	r2, [r3, #3]
			break;
 800d798:	e006      	b.n	800d7a8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d79a:	bf00      	nop
 800d79c:	e004      	b.n	800d7a8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d79e:	bf00      	nop
 800d7a0:	e002      	b.n	800d7a8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d7a2:	bf00      	nop
 800d7a4:	e000      	b.n	800d7a8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d7a6:	bf00      	nop
		}
	}
	return res;
 800d7a8:	7ffb      	ldrb	r3, [r7, #31]
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3724      	adds	r7, #36	; 0x24
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd90      	pop	{r4, r7, pc}

0800d7b2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d7b2:	b580      	push	{r7, lr}
 800d7b4:	b088      	sub	sp, #32
 800d7b6:	af00      	add	r7, sp, #0
 800d7b8:	60f8      	str	r0, [r7, #12]
 800d7ba:	60b9      	str	r1, [r7, #8]
 800d7bc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	2b01      	cmp	r3, #1
 800d7cc:	d904      	bls.n	800d7d8 <remove_chain+0x26>
 800d7ce:	69bb      	ldr	r3, [r7, #24]
 800d7d0:	699b      	ldr	r3, [r3, #24]
 800d7d2:	68ba      	ldr	r2, [r7, #8]
 800d7d4:	429a      	cmp	r2, r3
 800d7d6:	d301      	bcc.n	800d7dc <remove_chain+0x2a>
 800d7d8:	2302      	movs	r3, #2
 800d7da:	e04b      	b.n	800d874 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d00c      	beq.n	800d7fc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d7e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d7e6:	6879      	ldr	r1, [r7, #4]
 800d7e8:	69b8      	ldr	r0, [r7, #24]
 800d7ea:	f7ff fef8 	bl	800d5de <put_fat>
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d7f2:	7ffb      	ldrb	r3, [r7, #31]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d001      	beq.n	800d7fc <remove_chain+0x4a>
 800d7f8:	7ffb      	ldrb	r3, [r7, #31]
 800d7fa:	e03b      	b.n	800d874 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d7fc:	68b9      	ldr	r1, [r7, #8]
 800d7fe:	68f8      	ldr	r0, [r7, #12]
 800d800:	f7ff fe45 	bl	800d48e <get_fat>
 800d804:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d031      	beq.n	800d870 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	2b01      	cmp	r3, #1
 800d810:	d101      	bne.n	800d816 <remove_chain+0x64>
 800d812:	2302      	movs	r3, #2
 800d814:	e02e      	b.n	800d874 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d816:	697b      	ldr	r3, [r7, #20]
 800d818:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d81c:	d101      	bne.n	800d822 <remove_chain+0x70>
 800d81e:	2301      	movs	r3, #1
 800d820:	e028      	b.n	800d874 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d822:	2200      	movs	r2, #0
 800d824:	68b9      	ldr	r1, [r7, #8]
 800d826:	69b8      	ldr	r0, [r7, #24]
 800d828:	f7ff fed9 	bl	800d5de <put_fat>
 800d82c:	4603      	mov	r3, r0
 800d82e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d830:	7ffb      	ldrb	r3, [r7, #31]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d001      	beq.n	800d83a <remove_chain+0x88>
 800d836:	7ffb      	ldrb	r3, [r7, #31]
 800d838:	e01c      	b.n	800d874 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d83a:	69bb      	ldr	r3, [r7, #24]
 800d83c:	695a      	ldr	r2, [r3, #20]
 800d83e:	69bb      	ldr	r3, [r7, #24]
 800d840:	699b      	ldr	r3, [r3, #24]
 800d842:	3b02      	subs	r3, #2
 800d844:	429a      	cmp	r2, r3
 800d846:	d20b      	bcs.n	800d860 <remove_chain+0xae>
			fs->free_clst++;
 800d848:	69bb      	ldr	r3, [r7, #24]
 800d84a:	695b      	ldr	r3, [r3, #20]
 800d84c:	1c5a      	adds	r2, r3, #1
 800d84e:	69bb      	ldr	r3, [r7, #24]
 800d850:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800d852:	69bb      	ldr	r3, [r7, #24]
 800d854:	791b      	ldrb	r3, [r3, #4]
 800d856:	f043 0301 	orr.w	r3, r3, #1
 800d85a:	b2da      	uxtb	r2, r3
 800d85c:	69bb      	ldr	r3, [r7, #24]
 800d85e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d864:	69bb      	ldr	r3, [r7, #24]
 800d866:	699b      	ldr	r3, [r3, #24]
 800d868:	68ba      	ldr	r2, [r7, #8]
 800d86a:	429a      	cmp	r2, r3
 800d86c:	d3c6      	bcc.n	800d7fc <remove_chain+0x4a>
 800d86e:	e000      	b.n	800d872 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d870:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d872:	2300      	movs	r3, #0
}
 800d874:	4618      	mov	r0, r3
 800d876:	3720      	adds	r7, #32
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}

0800d87c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b088      	sub	sp, #32
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
 800d884:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d10d      	bne.n	800d8ae <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d892:	693b      	ldr	r3, [r7, #16]
 800d894:	691b      	ldr	r3, [r3, #16]
 800d896:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d898:	69bb      	ldr	r3, [r7, #24]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d004      	beq.n	800d8a8 <create_chain+0x2c>
 800d89e:	693b      	ldr	r3, [r7, #16]
 800d8a0:	699b      	ldr	r3, [r3, #24]
 800d8a2:	69ba      	ldr	r2, [r7, #24]
 800d8a4:	429a      	cmp	r2, r3
 800d8a6:	d31b      	bcc.n	800d8e0 <create_chain+0x64>
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	61bb      	str	r3, [r7, #24]
 800d8ac:	e018      	b.n	800d8e0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d8ae:	6839      	ldr	r1, [r7, #0]
 800d8b0:	6878      	ldr	r0, [r7, #4]
 800d8b2:	f7ff fdec 	bl	800d48e <get_fat>
 800d8b6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	2b01      	cmp	r3, #1
 800d8bc:	d801      	bhi.n	800d8c2 <create_chain+0x46>
 800d8be:	2301      	movs	r3, #1
 800d8c0:	e070      	b.n	800d9a4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d8c8:	d101      	bne.n	800d8ce <create_chain+0x52>
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	e06a      	b.n	800d9a4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d8ce:	693b      	ldr	r3, [r7, #16]
 800d8d0:	699b      	ldr	r3, [r3, #24]
 800d8d2:	68fa      	ldr	r2, [r7, #12]
 800d8d4:	429a      	cmp	r2, r3
 800d8d6:	d201      	bcs.n	800d8dc <create_chain+0x60>
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	e063      	b.n	800d9a4 <create_chain+0x128>
		scl = clst;
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d8e0:	69bb      	ldr	r3, [r7, #24]
 800d8e2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d8e4:	69fb      	ldr	r3, [r7, #28]
 800d8e6:	3301      	adds	r3, #1
 800d8e8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d8ea:	693b      	ldr	r3, [r7, #16]
 800d8ec:	699b      	ldr	r3, [r3, #24]
 800d8ee:	69fa      	ldr	r2, [r7, #28]
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	d307      	bcc.n	800d904 <create_chain+0x88>
				ncl = 2;
 800d8f4:	2302      	movs	r3, #2
 800d8f6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d8f8:	69fa      	ldr	r2, [r7, #28]
 800d8fa:	69bb      	ldr	r3, [r7, #24]
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	d901      	bls.n	800d904 <create_chain+0x88>
 800d900:	2300      	movs	r3, #0
 800d902:	e04f      	b.n	800d9a4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d904:	69f9      	ldr	r1, [r7, #28]
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f7ff fdc1 	bl	800d48e <get_fat>
 800d90c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d00e      	beq.n	800d932 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	2b01      	cmp	r3, #1
 800d918:	d003      	beq.n	800d922 <create_chain+0xa6>
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d920:	d101      	bne.n	800d926 <create_chain+0xaa>
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	e03e      	b.n	800d9a4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d926:	69fa      	ldr	r2, [r7, #28]
 800d928:	69bb      	ldr	r3, [r7, #24]
 800d92a:	429a      	cmp	r2, r3
 800d92c:	d1da      	bne.n	800d8e4 <create_chain+0x68>
 800d92e:	2300      	movs	r3, #0
 800d930:	e038      	b.n	800d9a4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d932:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d934:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d938:	69f9      	ldr	r1, [r7, #28]
 800d93a:	6938      	ldr	r0, [r7, #16]
 800d93c:	f7ff fe4f 	bl	800d5de <put_fat>
 800d940:	4603      	mov	r3, r0
 800d942:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d944:	7dfb      	ldrb	r3, [r7, #23]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d109      	bne.n	800d95e <create_chain+0xe2>
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d006      	beq.n	800d95e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d950:	69fa      	ldr	r2, [r7, #28]
 800d952:	6839      	ldr	r1, [r7, #0]
 800d954:	6938      	ldr	r0, [r7, #16]
 800d956:	f7ff fe42 	bl	800d5de <put_fat>
 800d95a:	4603      	mov	r3, r0
 800d95c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d95e:	7dfb      	ldrb	r3, [r7, #23]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d116      	bne.n	800d992 <create_chain+0x116>
		fs->last_clst = ncl;
 800d964:	693b      	ldr	r3, [r7, #16]
 800d966:	69fa      	ldr	r2, [r7, #28]
 800d968:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	695a      	ldr	r2, [r3, #20]
 800d96e:	693b      	ldr	r3, [r7, #16]
 800d970:	699b      	ldr	r3, [r3, #24]
 800d972:	3b02      	subs	r3, #2
 800d974:	429a      	cmp	r2, r3
 800d976:	d804      	bhi.n	800d982 <create_chain+0x106>
 800d978:	693b      	ldr	r3, [r7, #16]
 800d97a:	695b      	ldr	r3, [r3, #20]
 800d97c:	1e5a      	subs	r2, r3, #1
 800d97e:	693b      	ldr	r3, [r7, #16]
 800d980:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	791b      	ldrb	r3, [r3, #4]
 800d986:	f043 0301 	orr.w	r3, r3, #1
 800d98a:	b2da      	uxtb	r2, r3
 800d98c:	693b      	ldr	r3, [r7, #16]
 800d98e:	711a      	strb	r2, [r3, #4]
 800d990:	e007      	b.n	800d9a2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d992:	7dfb      	ldrb	r3, [r7, #23]
 800d994:	2b01      	cmp	r3, #1
 800d996:	d102      	bne.n	800d99e <create_chain+0x122>
 800d998:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d99c:	e000      	b.n	800d9a0 <create_chain+0x124>
 800d99e:	2301      	movs	r3, #1
 800d9a0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d9a2:	69fb      	ldr	r3, [r7, #28]
}
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	3720      	adds	r7, #32
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}

0800d9ac <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d9ac:	b480      	push	{r7}
 800d9ae:	b087      	sub	sp, #28
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
 800d9b4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9c0:	3304      	adds	r3, #4
 800d9c2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	0a5b      	lsrs	r3, r3, #9
 800d9c8:	68fa      	ldr	r2, [r7, #12]
 800d9ca:	8952      	ldrh	r2, [r2, #10]
 800d9cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d9d0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d9d2:	693b      	ldr	r3, [r7, #16]
 800d9d4:	1d1a      	adds	r2, r3, #4
 800d9d6:	613a      	str	r2, [r7, #16]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d101      	bne.n	800d9e6 <clmt_clust+0x3a>
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	e010      	b.n	800da08 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d9e6:	697a      	ldr	r2, [r7, #20]
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	d307      	bcc.n	800d9fe <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d9ee:	697a      	ldr	r2, [r7, #20]
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	1ad3      	subs	r3, r2, r3
 800d9f4:	617b      	str	r3, [r7, #20]
 800d9f6:	693b      	ldr	r3, [r7, #16]
 800d9f8:	3304      	adds	r3, #4
 800d9fa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d9fc:	e7e9      	b.n	800d9d2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d9fe:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800da00:	693b      	ldr	r3, [r7, #16]
 800da02:	681a      	ldr	r2, [r3, #0]
 800da04:	697b      	ldr	r3, [r7, #20]
 800da06:	4413      	add	r3, r2
}
 800da08:	4618      	mov	r0, r3
 800da0a:	371c      	adds	r7, #28
 800da0c:	46bd      	mov	sp, r7
 800da0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da12:	4770      	bx	lr

0800da14 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b086      	sub	sp, #24
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
 800da1c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800da2a:	d204      	bcs.n	800da36 <dir_sdi+0x22>
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	f003 031f 	and.w	r3, r3, #31
 800da32:	2b00      	cmp	r3, #0
 800da34:	d001      	beq.n	800da3a <dir_sdi+0x26>
		return FR_INT_ERR;
 800da36:	2302      	movs	r3, #2
 800da38:	e063      	b.n	800db02 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	683a      	ldr	r2, [r7, #0]
 800da3e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	689b      	ldr	r3, [r3, #8]
 800da44:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800da46:	697b      	ldr	r3, [r7, #20]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d106      	bne.n	800da5a <dir_sdi+0x46>
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	781b      	ldrb	r3, [r3, #0]
 800da50:	2b02      	cmp	r3, #2
 800da52:	d902      	bls.n	800da5a <dir_sdi+0x46>
		clst = fs->dirbase;
 800da54:	693b      	ldr	r3, [r7, #16]
 800da56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da58:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800da5a:	697b      	ldr	r3, [r7, #20]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d10c      	bne.n	800da7a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	095b      	lsrs	r3, r3, #5
 800da64:	693a      	ldr	r2, [r7, #16]
 800da66:	8912      	ldrh	r2, [r2, #8]
 800da68:	4293      	cmp	r3, r2
 800da6a:	d301      	bcc.n	800da70 <dir_sdi+0x5c>
 800da6c:	2302      	movs	r3, #2
 800da6e:	e048      	b.n	800db02 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800da70:	693b      	ldr	r3, [r7, #16]
 800da72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	61da      	str	r2, [r3, #28]
 800da78:	e029      	b.n	800dace <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800da7a:	693b      	ldr	r3, [r7, #16]
 800da7c:	895b      	ldrh	r3, [r3, #10]
 800da7e:	025b      	lsls	r3, r3, #9
 800da80:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800da82:	e019      	b.n	800dab8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6979      	ldr	r1, [r7, #20]
 800da88:	4618      	mov	r0, r3
 800da8a:	f7ff fd00 	bl	800d48e <get_fat>
 800da8e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800da90:	697b      	ldr	r3, [r7, #20]
 800da92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da96:	d101      	bne.n	800da9c <dir_sdi+0x88>
 800da98:	2301      	movs	r3, #1
 800da9a:	e032      	b.n	800db02 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800da9c:	697b      	ldr	r3, [r7, #20]
 800da9e:	2b01      	cmp	r3, #1
 800daa0:	d904      	bls.n	800daac <dir_sdi+0x98>
 800daa2:	693b      	ldr	r3, [r7, #16]
 800daa4:	699b      	ldr	r3, [r3, #24]
 800daa6:	697a      	ldr	r2, [r7, #20]
 800daa8:	429a      	cmp	r2, r3
 800daaa:	d301      	bcc.n	800dab0 <dir_sdi+0x9c>
 800daac:	2302      	movs	r3, #2
 800daae:	e028      	b.n	800db02 <dir_sdi+0xee>
			ofs -= csz;
 800dab0:	683a      	ldr	r2, [r7, #0]
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	1ad3      	subs	r3, r2, r3
 800dab6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dab8:	683a      	ldr	r2, [r7, #0]
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	429a      	cmp	r2, r3
 800dabe:	d2e1      	bcs.n	800da84 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800dac0:	6979      	ldr	r1, [r7, #20]
 800dac2:	6938      	ldr	r0, [r7, #16]
 800dac4:	f7ff fcc4 	bl	800d450 <clust2sect>
 800dac8:	4602      	mov	r2, r0
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	697a      	ldr	r2, [r7, #20]
 800dad2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	69db      	ldr	r3, [r3, #28]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d101      	bne.n	800dae0 <dir_sdi+0xcc>
 800dadc:	2302      	movs	r3, #2
 800dade:	e010      	b.n	800db02 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	69da      	ldr	r2, [r3, #28]
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	0a5b      	lsrs	r3, r3, #9
 800dae8:	441a      	add	r2, r3
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800daee:	693b      	ldr	r3, [r7, #16]
 800daf0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dafa:	441a      	add	r2, r3
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800db00:	2300      	movs	r3, #0
}
 800db02:	4618      	mov	r0, r3
 800db04:	3718      	adds	r7, #24
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}

0800db0a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800db0a:	b580      	push	{r7, lr}
 800db0c:	b086      	sub	sp, #24
 800db0e:	af00      	add	r7, sp, #0
 800db10:	6078      	str	r0, [r7, #4]
 800db12:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	695b      	ldr	r3, [r3, #20]
 800db1e:	3320      	adds	r3, #32
 800db20:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	69db      	ldr	r3, [r3, #28]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d003      	beq.n	800db32 <dir_next+0x28>
 800db2a:	68bb      	ldr	r3, [r7, #8]
 800db2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800db30:	d301      	bcc.n	800db36 <dir_next+0x2c>
 800db32:	2304      	movs	r3, #4
 800db34:	e0aa      	b.n	800dc8c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800db36:	68bb      	ldr	r3, [r7, #8]
 800db38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	f040 8098 	bne.w	800dc72 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	69db      	ldr	r3, [r3, #28]
 800db46:	1c5a      	adds	r2, r3, #1
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	699b      	ldr	r3, [r3, #24]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d10b      	bne.n	800db6c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	095b      	lsrs	r3, r3, #5
 800db58:	68fa      	ldr	r2, [r7, #12]
 800db5a:	8912      	ldrh	r2, [r2, #8]
 800db5c:	4293      	cmp	r3, r2
 800db5e:	f0c0 8088 	bcc.w	800dc72 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2200      	movs	r2, #0
 800db66:	61da      	str	r2, [r3, #28]
 800db68:	2304      	movs	r3, #4
 800db6a:	e08f      	b.n	800dc8c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	0a5b      	lsrs	r3, r3, #9
 800db70:	68fa      	ldr	r2, [r7, #12]
 800db72:	8952      	ldrh	r2, [r2, #10]
 800db74:	3a01      	subs	r2, #1
 800db76:	4013      	ands	r3, r2
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d17a      	bne.n	800dc72 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800db7c:	687a      	ldr	r2, [r7, #4]
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	699b      	ldr	r3, [r3, #24]
 800db82:	4619      	mov	r1, r3
 800db84:	4610      	mov	r0, r2
 800db86:	f7ff fc82 	bl	800d48e <get_fat>
 800db8a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	2b01      	cmp	r3, #1
 800db90:	d801      	bhi.n	800db96 <dir_next+0x8c>
 800db92:	2302      	movs	r3, #2
 800db94:	e07a      	b.n	800dc8c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db9c:	d101      	bne.n	800dba2 <dir_next+0x98>
 800db9e:	2301      	movs	r3, #1
 800dba0:	e074      	b.n	800dc8c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	699b      	ldr	r3, [r3, #24]
 800dba6:	697a      	ldr	r2, [r7, #20]
 800dba8:	429a      	cmp	r2, r3
 800dbaa:	d358      	bcc.n	800dc5e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d104      	bne.n	800dbbc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	61da      	str	r2, [r3, #28]
 800dbb8:	2304      	movs	r3, #4
 800dbba:	e067      	b.n	800dc8c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800dbbc:	687a      	ldr	r2, [r7, #4]
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	699b      	ldr	r3, [r3, #24]
 800dbc2:	4619      	mov	r1, r3
 800dbc4:	4610      	mov	r0, r2
 800dbc6:	f7ff fe59 	bl	800d87c <create_chain>
 800dbca:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d101      	bne.n	800dbd6 <dir_next+0xcc>
 800dbd2:	2307      	movs	r3, #7
 800dbd4:	e05a      	b.n	800dc8c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	2b01      	cmp	r3, #1
 800dbda:	d101      	bne.n	800dbe0 <dir_next+0xd6>
 800dbdc:	2302      	movs	r3, #2
 800dbde:	e055      	b.n	800dc8c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dbe6:	d101      	bne.n	800dbec <dir_next+0xe2>
 800dbe8:	2301      	movs	r3, #1
 800dbea:	e04f      	b.n	800dc8c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800dbec:	68f8      	ldr	r0, [r7, #12]
 800dbee:	f7ff fb4f 	bl	800d290 <sync_window>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d001      	beq.n	800dbfc <dir_next+0xf2>
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	e047      	b.n	800dc8c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	3334      	adds	r3, #52	; 0x34
 800dc00:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dc04:	2100      	movs	r1, #0
 800dc06:	4618      	mov	r0, r3
 800dc08:	f7ff f979 	bl	800cefe <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	613b      	str	r3, [r7, #16]
 800dc10:	6979      	ldr	r1, [r7, #20]
 800dc12:	68f8      	ldr	r0, [r7, #12]
 800dc14:	f7ff fc1c 	bl	800d450 <clust2sect>
 800dc18:	4602      	mov	r2, r0
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	631a      	str	r2, [r3, #48]	; 0x30
 800dc1e:	e012      	b.n	800dc46 <dir_next+0x13c>
						fs->wflag = 1;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	2201      	movs	r2, #1
 800dc24:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800dc26:	68f8      	ldr	r0, [r7, #12]
 800dc28:	f7ff fb32 	bl	800d290 <sync_window>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d001      	beq.n	800dc36 <dir_next+0x12c>
 800dc32:	2301      	movs	r3, #1
 800dc34:	e02a      	b.n	800dc8c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dc36:	693b      	ldr	r3, [r7, #16]
 800dc38:	3301      	adds	r3, #1
 800dc3a:	613b      	str	r3, [r7, #16]
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc40:	1c5a      	adds	r2, r3, #1
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	631a      	str	r2, [r3, #48]	; 0x30
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	895b      	ldrh	r3, [r3, #10]
 800dc4a:	461a      	mov	r2, r3
 800dc4c:	693b      	ldr	r3, [r7, #16]
 800dc4e:	4293      	cmp	r3, r2
 800dc50:	d3e6      	bcc.n	800dc20 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc56:	693b      	ldr	r3, [r7, #16]
 800dc58:	1ad2      	subs	r2, r2, r3
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	697a      	ldr	r2, [r7, #20]
 800dc62:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800dc64:	6979      	ldr	r1, [r7, #20]
 800dc66:	68f8      	ldr	r0, [r7, #12]
 800dc68:	f7ff fbf2 	bl	800d450 <clust2sect>
 800dc6c:	4602      	mov	r2, r0
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	68ba      	ldr	r2, [r7, #8]
 800dc76:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dc7e:	68bb      	ldr	r3, [r7, #8]
 800dc80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc84:	441a      	add	r2, r3
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800dc8a:	2300      	movs	r3, #0
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3718      	adds	r7, #24
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}

0800dc94 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b086      	sub	sp, #24
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
 800dc9c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800dca4:	2100      	movs	r1, #0
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f7ff feb4 	bl	800da14 <dir_sdi>
 800dcac:	4603      	mov	r3, r0
 800dcae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dcb0:	7dfb      	ldrb	r3, [r7, #23]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d12b      	bne.n	800dd0e <dir_alloc+0x7a>
		n = 0;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	69db      	ldr	r3, [r3, #28]
 800dcbe:	4619      	mov	r1, r3
 800dcc0:	68f8      	ldr	r0, [r7, #12]
 800dcc2:	f7ff fb29 	bl	800d318 <move_window>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dcca:	7dfb      	ldrb	r3, [r7, #23]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d11d      	bne.n	800dd0c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	6a1b      	ldr	r3, [r3, #32]
 800dcd4:	781b      	ldrb	r3, [r3, #0]
 800dcd6:	2be5      	cmp	r3, #229	; 0xe5
 800dcd8:	d004      	beq.n	800dce4 <dir_alloc+0x50>
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6a1b      	ldr	r3, [r3, #32]
 800dcde:	781b      	ldrb	r3, [r3, #0]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d107      	bne.n	800dcf4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800dce4:	693b      	ldr	r3, [r7, #16]
 800dce6:	3301      	adds	r3, #1
 800dce8:	613b      	str	r3, [r7, #16]
 800dcea:	693a      	ldr	r2, [r7, #16]
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	429a      	cmp	r2, r3
 800dcf0:	d102      	bne.n	800dcf8 <dir_alloc+0x64>
 800dcf2:	e00c      	b.n	800dd0e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800dcf8:	2101      	movs	r1, #1
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f7ff ff05 	bl	800db0a <dir_next>
 800dd00:	4603      	mov	r3, r0
 800dd02:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800dd04:	7dfb      	ldrb	r3, [r7, #23]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d0d7      	beq.n	800dcba <dir_alloc+0x26>
 800dd0a:	e000      	b.n	800dd0e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800dd0c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800dd0e:	7dfb      	ldrb	r3, [r7, #23]
 800dd10:	2b04      	cmp	r3, #4
 800dd12:	d101      	bne.n	800dd18 <dir_alloc+0x84>
 800dd14:	2307      	movs	r3, #7
 800dd16:	75fb      	strb	r3, [r7, #23]
	return res;
 800dd18:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	3718      	adds	r7, #24
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}

0800dd22 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800dd22:	b580      	push	{r7, lr}
 800dd24:	b084      	sub	sp, #16
 800dd26:	af00      	add	r7, sp, #0
 800dd28:	6078      	str	r0, [r7, #4]
 800dd2a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	331a      	adds	r3, #26
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7ff f841 	bl	800cdb8 <ld_word>
 800dd36:	4603      	mov	r3, r0
 800dd38:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	781b      	ldrb	r3, [r3, #0]
 800dd3e:	2b03      	cmp	r3, #3
 800dd40:	d109      	bne.n	800dd56 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800dd42:	683b      	ldr	r3, [r7, #0]
 800dd44:	3314      	adds	r3, #20
 800dd46:	4618      	mov	r0, r3
 800dd48:	f7ff f836 	bl	800cdb8 <ld_word>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	041b      	lsls	r3, r3, #16
 800dd50:	68fa      	ldr	r2, [r7, #12]
 800dd52:	4313      	orrs	r3, r2
 800dd54:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800dd56:	68fb      	ldr	r3, [r7, #12]
}
 800dd58:	4618      	mov	r0, r3
 800dd5a:	3710      	adds	r7, #16
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}

0800dd60 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b084      	sub	sp, #16
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	60f8      	str	r0, [r7, #12]
 800dd68:	60b9      	str	r1, [r7, #8]
 800dd6a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	331a      	adds	r3, #26
 800dd70:	687a      	ldr	r2, [r7, #4]
 800dd72:	b292      	uxth	r2, r2
 800dd74:	4611      	mov	r1, r2
 800dd76:	4618      	mov	r0, r3
 800dd78:	f7ff f859 	bl	800ce2e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	781b      	ldrb	r3, [r3, #0]
 800dd80:	2b03      	cmp	r3, #3
 800dd82:	d109      	bne.n	800dd98 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	f103 0214 	add.w	r2, r3, #20
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	0c1b      	lsrs	r3, r3, #16
 800dd8e:	b29b      	uxth	r3, r3
 800dd90:	4619      	mov	r1, r3
 800dd92:	4610      	mov	r0, r2
 800dd94:	f7ff f84b 	bl	800ce2e <st_word>
	}
}
 800dd98:	bf00      	nop
 800dd9a:	3710      	adds	r7, #16
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}

0800dda0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800dda0:	b590      	push	{r4, r7, lr}
 800dda2:	b087      	sub	sp, #28
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
 800dda8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	331a      	adds	r3, #26
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7ff f802 	bl	800cdb8 <ld_word>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d001      	beq.n	800ddbe <cmp_lfn+0x1e>
 800ddba:	2300      	movs	r3, #0
 800ddbc:	e059      	b.n	800de72 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	781b      	ldrb	r3, [r3, #0]
 800ddc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ddc6:	1e5a      	subs	r2, r3, #1
 800ddc8:	4613      	mov	r3, r2
 800ddca:	005b      	lsls	r3, r3, #1
 800ddcc:	4413      	add	r3, r2
 800ddce:	009b      	lsls	r3, r3, #2
 800ddd0:	4413      	add	r3, r2
 800ddd2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ddd4:	2301      	movs	r3, #1
 800ddd6:	81fb      	strh	r3, [r7, #14]
 800ddd8:	2300      	movs	r3, #0
 800ddda:	613b      	str	r3, [r7, #16]
 800dddc:	e033      	b.n	800de46 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ddde:	4a27      	ldr	r2, [pc, #156]	; (800de7c <cmp_lfn+0xdc>)
 800dde0:	693b      	ldr	r3, [r7, #16]
 800dde2:	4413      	add	r3, r2
 800dde4:	781b      	ldrb	r3, [r3, #0]
 800dde6:	461a      	mov	r2, r3
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	4413      	add	r3, r2
 800ddec:	4618      	mov	r0, r3
 800ddee:	f7fe ffe3 	bl	800cdb8 <ld_word>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ddf6:	89fb      	ldrh	r3, [r7, #14]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d01a      	beq.n	800de32 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	2bfe      	cmp	r3, #254	; 0xfe
 800de00:	d812      	bhi.n	800de28 <cmp_lfn+0x88>
 800de02:	89bb      	ldrh	r3, [r7, #12]
 800de04:	4618      	mov	r0, r3
 800de06:	f001 ff2d 	bl	800fc64 <ff_wtoupper>
 800de0a:	4603      	mov	r3, r0
 800de0c:	461c      	mov	r4, r3
 800de0e:	697b      	ldr	r3, [r7, #20]
 800de10:	1c5a      	adds	r2, r3, #1
 800de12:	617a      	str	r2, [r7, #20]
 800de14:	005b      	lsls	r3, r3, #1
 800de16:	687a      	ldr	r2, [r7, #4]
 800de18:	4413      	add	r3, r2
 800de1a:	881b      	ldrh	r3, [r3, #0]
 800de1c:	4618      	mov	r0, r3
 800de1e:	f001 ff21 	bl	800fc64 <ff_wtoupper>
 800de22:	4603      	mov	r3, r0
 800de24:	429c      	cmp	r4, r3
 800de26:	d001      	beq.n	800de2c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800de28:	2300      	movs	r3, #0
 800de2a:	e022      	b.n	800de72 <cmp_lfn+0xd2>
			}
			wc = uc;
 800de2c:	89bb      	ldrh	r3, [r7, #12]
 800de2e:	81fb      	strh	r3, [r7, #14]
 800de30:	e006      	b.n	800de40 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800de32:	89bb      	ldrh	r3, [r7, #12]
 800de34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de38:	4293      	cmp	r3, r2
 800de3a:	d001      	beq.n	800de40 <cmp_lfn+0xa0>
 800de3c:	2300      	movs	r3, #0
 800de3e:	e018      	b.n	800de72 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800de40:	693b      	ldr	r3, [r7, #16]
 800de42:	3301      	adds	r3, #1
 800de44:	613b      	str	r3, [r7, #16]
 800de46:	693b      	ldr	r3, [r7, #16]
 800de48:	2b0c      	cmp	r3, #12
 800de4a:	d9c8      	bls.n	800ddde <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	781b      	ldrb	r3, [r3, #0]
 800de50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de54:	2b00      	cmp	r3, #0
 800de56:	d00b      	beq.n	800de70 <cmp_lfn+0xd0>
 800de58:	89fb      	ldrh	r3, [r7, #14]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d008      	beq.n	800de70 <cmp_lfn+0xd0>
 800de5e:	697b      	ldr	r3, [r7, #20]
 800de60:	005b      	lsls	r3, r3, #1
 800de62:	687a      	ldr	r2, [r7, #4]
 800de64:	4413      	add	r3, r2
 800de66:	881b      	ldrh	r3, [r3, #0]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d001      	beq.n	800de70 <cmp_lfn+0xd0>
 800de6c:	2300      	movs	r3, #0
 800de6e:	e000      	b.n	800de72 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800de70:	2301      	movs	r3, #1
}
 800de72:	4618      	mov	r0, r3
 800de74:	371c      	adds	r7, #28
 800de76:	46bd      	mov	sp, r7
 800de78:	bd90      	pop	{r4, r7, pc}
 800de7a:	bf00      	nop
 800de7c:	0801201c 	.word	0x0801201c

0800de80 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b088      	sub	sp, #32
 800de84:	af00      	add	r7, sp, #0
 800de86:	60f8      	str	r0, [r7, #12]
 800de88:	60b9      	str	r1, [r7, #8]
 800de8a:	4611      	mov	r1, r2
 800de8c:	461a      	mov	r2, r3
 800de8e:	460b      	mov	r3, r1
 800de90:	71fb      	strb	r3, [r7, #7]
 800de92:	4613      	mov	r3, r2
 800de94:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	330d      	adds	r3, #13
 800de9a:	79ba      	ldrb	r2, [r7, #6]
 800de9c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	330b      	adds	r3, #11
 800dea2:	220f      	movs	r2, #15
 800dea4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800dea6:	68bb      	ldr	r3, [r7, #8]
 800dea8:	330c      	adds	r3, #12
 800deaa:	2200      	movs	r2, #0
 800deac:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	331a      	adds	r3, #26
 800deb2:	2100      	movs	r1, #0
 800deb4:	4618      	mov	r0, r3
 800deb6:	f7fe ffba 	bl	800ce2e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800deba:	79fb      	ldrb	r3, [r7, #7]
 800debc:	1e5a      	subs	r2, r3, #1
 800debe:	4613      	mov	r3, r2
 800dec0:	005b      	lsls	r3, r3, #1
 800dec2:	4413      	add	r3, r2
 800dec4:	009b      	lsls	r3, r3, #2
 800dec6:	4413      	add	r3, r2
 800dec8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800deca:	2300      	movs	r3, #0
 800decc:	82fb      	strh	r3, [r7, #22]
 800dece:	2300      	movs	r3, #0
 800ded0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ded2:	8afb      	ldrh	r3, [r7, #22]
 800ded4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ded8:	4293      	cmp	r3, r2
 800deda:	d007      	beq.n	800deec <put_lfn+0x6c>
 800dedc:	69fb      	ldr	r3, [r7, #28]
 800dede:	1c5a      	adds	r2, r3, #1
 800dee0:	61fa      	str	r2, [r7, #28]
 800dee2:	005b      	lsls	r3, r3, #1
 800dee4:	68fa      	ldr	r2, [r7, #12]
 800dee6:	4413      	add	r3, r2
 800dee8:	881b      	ldrh	r3, [r3, #0]
 800deea:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800deec:	4a17      	ldr	r2, [pc, #92]	; (800df4c <put_lfn+0xcc>)
 800deee:	69bb      	ldr	r3, [r7, #24]
 800def0:	4413      	add	r3, r2
 800def2:	781b      	ldrb	r3, [r3, #0]
 800def4:	461a      	mov	r2, r3
 800def6:	68bb      	ldr	r3, [r7, #8]
 800def8:	4413      	add	r3, r2
 800defa:	8afa      	ldrh	r2, [r7, #22]
 800defc:	4611      	mov	r1, r2
 800defe:	4618      	mov	r0, r3
 800df00:	f7fe ff95 	bl	800ce2e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800df04:	8afb      	ldrh	r3, [r7, #22]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d102      	bne.n	800df10 <put_lfn+0x90>
 800df0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800df0e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800df10:	69bb      	ldr	r3, [r7, #24]
 800df12:	3301      	adds	r3, #1
 800df14:	61bb      	str	r3, [r7, #24]
 800df16:	69bb      	ldr	r3, [r7, #24]
 800df18:	2b0c      	cmp	r3, #12
 800df1a:	d9da      	bls.n	800ded2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800df1c:	8afb      	ldrh	r3, [r7, #22]
 800df1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df22:	4293      	cmp	r3, r2
 800df24:	d006      	beq.n	800df34 <put_lfn+0xb4>
 800df26:	69fb      	ldr	r3, [r7, #28]
 800df28:	005b      	lsls	r3, r3, #1
 800df2a:	68fa      	ldr	r2, [r7, #12]
 800df2c:	4413      	add	r3, r2
 800df2e:	881b      	ldrh	r3, [r3, #0]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d103      	bne.n	800df3c <put_lfn+0xbc>
 800df34:	79fb      	ldrb	r3, [r7, #7]
 800df36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df3a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	79fa      	ldrb	r2, [r7, #7]
 800df40:	701a      	strb	r2, [r3, #0]
}
 800df42:	bf00      	nop
 800df44:	3720      	adds	r7, #32
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}
 800df4a:	bf00      	nop
 800df4c:	0801201c 	.word	0x0801201c

0800df50 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b08c      	sub	sp, #48	; 0x30
 800df54:	af00      	add	r7, sp, #0
 800df56:	60f8      	str	r0, [r7, #12]
 800df58:	60b9      	str	r1, [r7, #8]
 800df5a:	607a      	str	r2, [r7, #4]
 800df5c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800df5e:	220b      	movs	r2, #11
 800df60:	68b9      	ldr	r1, [r7, #8]
 800df62:	68f8      	ldr	r0, [r7, #12]
 800df64:	f7fe ffaa 	bl	800cebc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	2b05      	cmp	r3, #5
 800df6c:	d929      	bls.n	800dfc2 <gen_numname+0x72>
		sr = seq;
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800df72:	e020      	b.n	800dfb6 <gen_numname+0x66>
			wc = *lfn++;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	1c9a      	adds	r2, r3, #2
 800df78:	607a      	str	r2, [r7, #4]
 800df7a:	881b      	ldrh	r3, [r3, #0]
 800df7c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800df7e:	2300      	movs	r3, #0
 800df80:	62bb      	str	r3, [r7, #40]	; 0x28
 800df82:	e015      	b.n	800dfb0 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800df84:	69fb      	ldr	r3, [r7, #28]
 800df86:	005a      	lsls	r2, r3, #1
 800df88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df8a:	f003 0301 	and.w	r3, r3, #1
 800df8e:	4413      	add	r3, r2
 800df90:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800df92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df94:	085b      	lsrs	r3, r3, #1
 800df96:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800df98:	69fb      	ldr	r3, [r7, #28]
 800df9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d003      	beq.n	800dfaa <gen_numname+0x5a>
 800dfa2:	69fa      	ldr	r2, [r7, #28]
 800dfa4:	4b30      	ldr	r3, [pc, #192]	; (800e068 <gen_numname+0x118>)
 800dfa6:	4053      	eors	r3, r2
 800dfa8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800dfaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfac:	3301      	adds	r3, #1
 800dfae:	62bb      	str	r3, [r7, #40]	; 0x28
 800dfb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfb2:	2b0f      	cmp	r3, #15
 800dfb4:	d9e6      	bls.n	800df84 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	881b      	ldrh	r3, [r3, #0]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d1da      	bne.n	800df74 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800dfbe:	69fb      	ldr	r3, [r7, #28]
 800dfc0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800dfc2:	2307      	movs	r3, #7
 800dfc4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	b2db      	uxtb	r3, r3
 800dfca:	f003 030f 	and.w	r3, r3, #15
 800dfce:	b2db      	uxtb	r3, r3
 800dfd0:	3330      	adds	r3, #48	; 0x30
 800dfd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800dfd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dfda:	2b39      	cmp	r3, #57	; 0x39
 800dfdc:	d904      	bls.n	800dfe8 <gen_numname+0x98>
 800dfde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dfe2:	3307      	adds	r3, #7
 800dfe4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800dfe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfea:	1e5a      	subs	r2, r3, #1
 800dfec:	62ba      	str	r2, [r7, #40]	; 0x28
 800dfee:	3330      	adds	r3, #48	; 0x30
 800dff0:	443b      	add	r3, r7
 800dff2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800dff6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	091b      	lsrs	r3, r3, #4
 800dffe:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d1df      	bne.n	800dfc6 <gen_numname+0x76>
	ns[i] = '~';
 800e006:	f107 0214 	add.w	r2, r7, #20
 800e00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e00c:	4413      	add	r3, r2
 800e00e:	227e      	movs	r2, #126	; 0x7e
 800e010:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e012:	2300      	movs	r3, #0
 800e014:	627b      	str	r3, [r7, #36]	; 0x24
 800e016:	e002      	b.n	800e01e <gen_numname+0xce>
 800e018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e01a:	3301      	adds	r3, #1
 800e01c:	627b      	str	r3, [r7, #36]	; 0x24
 800e01e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e022:	429a      	cmp	r2, r3
 800e024:	d205      	bcs.n	800e032 <gen_numname+0xe2>
 800e026:	68fa      	ldr	r2, [r7, #12]
 800e028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e02a:	4413      	add	r3, r2
 800e02c:	781b      	ldrb	r3, [r3, #0]
 800e02e:	2b20      	cmp	r3, #32
 800e030:	d1f2      	bne.n	800e018 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e034:	2b07      	cmp	r3, #7
 800e036:	d807      	bhi.n	800e048 <gen_numname+0xf8>
 800e038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e03a:	1c5a      	adds	r2, r3, #1
 800e03c:	62ba      	str	r2, [r7, #40]	; 0x28
 800e03e:	3330      	adds	r3, #48	; 0x30
 800e040:	443b      	add	r3, r7
 800e042:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e046:	e000      	b.n	800e04a <gen_numname+0xfa>
 800e048:	2120      	movs	r1, #32
 800e04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e04c:	1c5a      	adds	r2, r3, #1
 800e04e:	627a      	str	r2, [r7, #36]	; 0x24
 800e050:	68fa      	ldr	r2, [r7, #12]
 800e052:	4413      	add	r3, r2
 800e054:	460a      	mov	r2, r1
 800e056:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e05a:	2b07      	cmp	r3, #7
 800e05c:	d9e9      	bls.n	800e032 <gen_numname+0xe2>
}
 800e05e:	bf00      	nop
 800e060:	bf00      	nop
 800e062:	3730      	adds	r7, #48	; 0x30
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}
 800e068:	00011021 	.word	0x00011021

0800e06c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e06c:	b480      	push	{r7}
 800e06e:	b085      	sub	sp, #20
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e074:	2300      	movs	r3, #0
 800e076:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e078:	230b      	movs	r3, #11
 800e07a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e07c:	7bfb      	ldrb	r3, [r7, #15]
 800e07e:	b2da      	uxtb	r2, r3
 800e080:	0852      	lsrs	r2, r2, #1
 800e082:	01db      	lsls	r3, r3, #7
 800e084:	4313      	orrs	r3, r2
 800e086:	b2da      	uxtb	r2, r3
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	1c59      	adds	r1, r3, #1
 800e08c:	6079      	str	r1, [r7, #4]
 800e08e:	781b      	ldrb	r3, [r3, #0]
 800e090:	4413      	add	r3, r2
 800e092:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	3b01      	subs	r3, #1
 800e098:	60bb      	str	r3, [r7, #8]
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d1ed      	bne.n	800e07c <sum_sfn+0x10>
	return sum;
 800e0a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	3714      	adds	r7, #20
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ac:	4770      	bx	lr

0800e0ae <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e0ae:	b580      	push	{r7, lr}
 800e0b0:	b086      	sub	sp, #24
 800e0b2:	af00      	add	r7, sp, #0
 800e0b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e0bc:	2100      	movs	r1, #0
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f7ff fca8 	bl	800da14 <dir_sdi>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e0c8:	7dfb      	ldrb	r3, [r7, #23]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d001      	beq.n	800e0d2 <dir_find+0x24>
 800e0ce:	7dfb      	ldrb	r3, [r7, #23]
 800e0d0:	e0a9      	b.n	800e226 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e0d2:	23ff      	movs	r3, #255	; 0xff
 800e0d4:	753b      	strb	r3, [r7, #20]
 800e0d6:	7d3b      	ldrb	r3, [r7, #20]
 800e0d8:	757b      	strb	r3, [r7, #21]
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e0e0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	69db      	ldr	r3, [r3, #28]
 800e0e6:	4619      	mov	r1, r3
 800e0e8:	6938      	ldr	r0, [r7, #16]
 800e0ea:	f7ff f915 	bl	800d318 <move_window>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e0f2:	7dfb      	ldrb	r3, [r7, #23]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	f040 8090 	bne.w	800e21a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6a1b      	ldr	r3, [r3, #32]
 800e0fe:	781b      	ldrb	r3, [r3, #0]
 800e100:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e102:	7dbb      	ldrb	r3, [r7, #22]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d102      	bne.n	800e10e <dir_find+0x60>
 800e108:	2304      	movs	r3, #4
 800e10a:	75fb      	strb	r3, [r7, #23]
 800e10c:	e08a      	b.n	800e224 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6a1b      	ldr	r3, [r3, #32]
 800e112:	330b      	adds	r3, #11
 800e114:	781b      	ldrb	r3, [r3, #0]
 800e116:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e11a:	73fb      	strb	r3, [r7, #15]
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	7bfa      	ldrb	r2, [r7, #15]
 800e120:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e122:	7dbb      	ldrb	r3, [r7, #22]
 800e124:	2be5      	cmp	r3, #229	; 0xe5
 800e126:	d007      	beq.n	800e138 <dir_find+0x8a>
 800e128:	7bfb      	ldrb	r3, [r7, #15]
 800e12a:	f003 0308 	and.w	r3, r3, #8
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d009      	beq.n	800e146 <dir_find+0x98>
 800e132:	7bfb      	ldrb	r3, [r7, #15]
 800e134:	2b0f      	cmp	r3, #15
 800e136:	d006      	beq.n	800e146 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e138:	23ff      	movs	r3, #255	; 0xff
 800e13a:	757b      	strb	r3, [r7, #21]
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e142:	631a      	str	r2, [r3, #48]	; 0x30
 800e144:	e05e      	b.n	800e204 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e146:	7bfb      	ldrb	r3, [r7, #15]
 800e148:	2b0f      	cmp	r3, #15
 800e14a:	d136      	bne.n	800e1ba <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e156:	2b00      	cmp	r3, #0
 800e158:	d154      	bne.n	800e204 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e15a:	7dbb      	ldrb	r3, [r7, #22]
 800e15c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e160:	2b00      	cmp	r3, #0
 800e162:	d00d      	beq.n	800e180 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	6a1b      	ldr	r3, [r3, #32]
 800e168:	7b5b      	ldrb	r3, [r3, #13]
 800e16a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e16c:	7dbb      	ldrb	r3, [r7, #22]
 800e16e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e172:	75bb      	strb	r3, [r7, #22]
 800e174:	7dbb      	ldrb	r3, [r7, #22]
 800e176:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	695a      	ldr	r2, [r3, #20]
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e180:	7dba      	ldrb	r2, [r7, #22]
 800e182:	7d7b      	ldrb	r3, [r7, #21]
 800e184:	429a      	cmp	r2, r3
 800e186:	d115      	bne.n	800e1b4 <dir_find+0x106>
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	6a1b      	ldr	r3, [r3, #32]
 800e18c:	330d      	adds	r3, #13
 800e18e:	781b      	ldrb	r3, [r3, #0]
 800e190:	7d3a      	ldrb	r2, [r7, #20]
 800e192:	429a      	cmp	r2, r3
 800e194:	d10e      	bne.n	800e1b4 <dir_find+0x106>
 800e196:	693b      	ldr	r3, [r7, #16]
 800e198:	68da      	ldr	r2, [r3, #12]
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	6a1b      	ldr	r3, [r3, #32]
 800e19e:	4619      	mov	r1, r3
 800e1a0:	4610      	mov	r0, r2
 800e1a2:	f7ff fdfd 	bl	800dda0 <cmp_lfn>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d003      	beq.n	800e1b4 <dir_find+0x106>
 800e1ac:	7d7b      	ldrb	r3, [r7, #21]
 800e1ae:	3b01      	subs	r3, #1
 800e1b0:	b2db      	uxtb	r3, r3
 800e1b2:	e000      	b.n	800e1b6 <dir_find+0x108>
 800e1b4:	23ff      	movs	r3, #255	; 0xff
 800e1b6:	757b      	strb	r3, [r7, #21]
 800e1b8:	e024      	b.n	800e204 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e1ba:	7d7b      	ldrb	r3, [r7, #21]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d109      	bne.n	800e1d4 <dir_find+0x126>
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	6a1b      	ldr	r3, [r3, #32]
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	f7ff ff51 	bl	800e06c <sum_sfn>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	7d3b      	ldrb	r3, [r7, #20]
 800e1d0:	4293      	cmp	r3, r2
 800e1d2:	d024      	beq.n	800e21e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e1da:	f003 0301 	and.w	r3, r3, #1
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d10a      	bne.n	800e1f8 <dir_find+0x14a>
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6a18      	ldr	r0, [r3, #32]
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	3324      	adds	r3, #36	; 0x24
 800e1ea:	220b      	movs	r2, #11
 800e1ec:	4619      	mov	r1, r3
 800e1ee:	f7fe fea1 	bl	800cf34 <mem_cmp>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d014      	beq.n	800e222 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e1f8:	23ff      	movs	r3, #255	; 0xff
 800e1fa:	757b      	strb	r3, [r7, #21]
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e202:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e204:	2100      	movs	r1, #0
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f7ff fc7f 	bl	800db0a <dir_next>
 800e20c:	4603      	mov	r3, r0
 800e20e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e210:	7dfb      	ldrb	r3, [r7, #23]
 800e212:	2b00      	cmp	r3, #0
 800e214:	f43f af65 	beq.w	800e0e2 <dir_find+0x34>
 800e218:	e004      	b.n	800e224 <dir_find+0x176>
		if (res != FR_OK) break;
 800e21a:	bf00      	nop
 800e21c:	e002      	b.n	800e224 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e21e:	bf00      	nop
 800e220:	e000      	b.n	800e224 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e222:	bf00      	nop

	return res;
 800e224:	7dfb      	ldrb	r3, [r7, #23]
}
 800e226:	4618      	mov	r0, r3
 800e228:	3718      	adds	r7, #24
 800e22a:	46bd      	mov	sp, r7
 800e22c:	bd80      	pop	{r7, pc}
	...

0800e230 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b08c      	sub	sp, #48	; 0x30
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e244:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d001      	beq.n	800e250 <dir_register+0x20>
 800e24c:	2306      	movs	r3, #6
 800e24e:	e0e0      	b.n	800e412 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e250:	2300      	movs	r3, #0
 800e252:	627b      	str	r3, [r7, #36]	; 0x24
 800e254:	e002      	b.n	800e25c <dir_register+0x2c>
 800e256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e258:	3301      	adds	r3, #1
 800e25a:	627b      	str	r3, [r7, #36]	; 0x24
 800e25c:	69fb      	ldr	r3, [r7, #28]
 800e25e:	68da      	ldr	r2, [r3, #12]
 800e260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e262:	005b      	lsls	r3, r3, #1
 800e264:	4413      	add	r3, r2
 800e266:	881b      	ldrh	r3, [r3, #0]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d1f4      	bne.n	800e256 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800e272:	f107 030c 	add.w	r3, r7, #12
 800e276:	220c      	movs	r2, #12
 800e278:	4618      	mov	r0, r3
 800e27a:	f7fe fe1f 	bl	800cebc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e27e:	7dfb      	ldrb	r3, [r7, #23]
 800e280:	f003 0301 	and.w	r3, r3, #1
 800e284:	2b00      	cmp	r3, #0
 800e286:	d032      	beq.n	800e2ee <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2240      	movs	r2, #64	; 0x40
 800e28c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800e290:	2301      	movs	r3, #1
 800e292:	62bb      	str	r3, [r7, #40]	; 0x28
 800e294:	e016      	b.n	800e2c4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800e29c:	69fb      	ldr	r3, [r7, #28]
 800e29e:	68da      	ldr	r2, [r3, #12]
 800e2a0:	f107 010c 	add.w	r1, r7, #12
 800e2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a6:	f7ff fe53 	bl	800df50 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	f7ff feff 	bl	800e0ae <dir_find>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800e2b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d106      	bne.n	800e2cc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800e2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2c0:	3301      	adds	r3, #1
 800e2c2:	62bb      	str	r3, [r7, #40]	; 0x28
 800e2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2c6:	2b63      	cmp	r3, #99	; 0x63
 800e2c8:	d9e5      	bls.n	800e296 <dir_register+0x66>
 800e2ca:	e000      	b.n	800e2ce <dir_register+0x9e>
			if (res != FR_OK) break;
 800e2cc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d0:	2b64      	cmp	r3, #100	; 0x64
 800e2d2:	d101      	bne.n	800e2d8 <dir_register+0xa8>
 800e2d4:	2307      	movs	r3, #7
 800e2d6:	e09c      	b.n	800e412 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e2d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e2dc:	2b04      	cmp	r3, #4
 800e2de:	d002      	beq.n	800e2e6 <dir_register+0xb6>
 800e2e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e2e4:	e095      	b.n	800e412 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e2e6:	7dfa      	ldrb	r2, [r7, #23]
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e2ee:	7dfb      	ldrb	r3, [r7, #23]
 800e2f0:	f003 0302 	and.w	r3, r3, #2
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d007      	beq.n	800e308 <dir_register+0xd8>
 800e2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2fa:	330c      	adds	r3, #12
 800e2fc:	4a47      	ldr	r2, [pc, #284]	; (800e41c <dir_register+0x1ec>)
 800e2fe:	fba2 2303 	umull	r2, r3, r2, r3
 800e302:	089b      	lsrs	r3, r3, #2
 800e304:	3301      	adds	r3, #1
 800e306:	e000      	b.n	800e30a <dir_register+0xda>
 800e308:	2301      	movs	r3, #1
 800e30a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e30c:	6a39      	ldr	r1, [r7, #32]
 800e30e:	6878      	ldr	r0, [r7, #4]
 800e310:	f7ff fcc0 	bl	800dc94 <dir_alloc>
 800e314:	4603      	mov	r3, r0
 800e316:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e31a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d148      	bne.n	800e3b4 <dir_register+0x184>
 800e322:	6a3b      	ldr	r3, [r7, #32]
 800e324:	3b01      	subs	r3, #1
 800e326:	623b      	str	r3, [r7, #32]
 800e328:	6a3b      	ldr	r3, [r7, #32]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d042      	beq.n	800e3b4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	695a      	ldr	r2, [r3, #20]
 800e332:	6a3b      	ldr	r3, [r7, #32]
 800e334:	015b      	lsls	r3, r3, #5
 800e336:	1ad3      	subs	r3, r2, r3
 800e338:	4619      	mov	r1, r3
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f7ff fb6a 	bl	800da14 <dir_sdi>
 800e340:	4603      	mov	r3, r0
 800e342:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e346:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d132      	bne.n	800e3b4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	3324      	adds	r3, #36	; 0x24
 800e352:	4618      	mov	r0, r3
 800e354:	f7ff fe8a 	bl	800e06c <sum_sfn>
 800e358:	4603      	mov	r3, r0
 800e35a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	69db      	ldr	r3, [r3, #28]
 800e360:	4619      	mov	r1, r3
 800e362:	69f8      	ldr	r0, [r7, #28]
 800e364:	f7fe ffd8 	bl	800d318 <move_window>
 800e368:	4603      	mov	r3, r0
 800e36a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800e36e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e372:	2b00      	cmp	r3, #0
 800e374:	d11d      	bne.n	800e3b2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e376:	69fb      	ldr	r3, [r7, #28]
 800e378:	68d8      	ldr	r0, [r3, #12]
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	6a19      	ldr	r1, [r3, #32]
 800e37e:	6a3b      	ldr	r3, [r7, #32]
 800e380:	b2da      	uxtb	r2, r3
 800e382:	7efb      	ldrb	r3, [r7, #27]
 800e384:	f7ff fd7c 	bl	800de80 <put_lfn>
				fs->wflag = 1;
 800e388:	69fb      	ldr	r3, [r7, #28]
 800e38a:	2201      	movs	r2, #1
 800e38c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e38e:	2100      	movs	r1, #0
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f7ff fbba 	bl	800db0a <dir_next>
 800e396:	4603      	mov	r3, r0
 800e398:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800e39c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d107      	bne.n	800e3b4 <dir_register+0x184>
 800e3a4:	6a3b      	ldr	r3, [r7, #32]
 800e3a6:	3b01      	subs	r3, #1
 800e3a8:	623b      	str	r3, [r7, #32]
 800e3aa:	6a3b      	ldr	r3, [r7, #32]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d1d5      	bne.n	800e35c <dir_register+0x12c>
 800e3b0:	e000      	b.n	800e3b4 <dir_register+0x184>
				if (res != FR_OK) break;
 800e3b2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e3b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d128      	bne.n	800e40e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	69db      	ldr	r3, [r3, #28]
 800e3c0:	4619      	mov	r1, r3
 800e3c2:	69f8      	ldr	r0, [r7, #28]
 800e3c4:	f7fe ffa8 	bl	800d318 <move_window>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e3ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d11b      	bne.n	800e40e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	6a1b      	ldr	r3, [r3, #32]
 800e3da:	2220      	movs	r2, #32
 800e3dc:	2100      	movs	r1, #0
 800e3de:	4618      	mov	r0, r3
 800e3e0:	f7fe fd8d 	bl	800cefe <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	6a18      	ldr	r0, [r3, #32]
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	3324      	adds	r3, #36	; 0x24
 800e3ec:	220b      	movs	r2, #11
 800e3ee:	4619      	mov	r1, r3
 800e3f0:	f7fe fd64 	bl	800cebc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	6a1b      	ldr	r3, [r3, #32]
 800e3fe:	330c      	adds	r3, #12
 800e400:	f002 0218 	and.w	r2, r2, #24
 800e404:	b2d2      	uxtb	r2, r2
 800e406:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800e408:	69fb      	ldr	r3, [r7, #28]
 800e40a:	2201      	movs	r2, #1
 800e40c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e40e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e412:	4618      	mov	r0, r3
 800e414:	3730      	adds	r7, #48	; 0x30
 800e416:	46bd      	mov	sp, r7
 800e418:	bd80      	pop	{r7, pc}
 800e41a:	bf00      	nop
 800e41c:	4ec4ec4f 	.word	0x4ec4ec4f

0800e420 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b088      	sub	sp, #32
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
 800e428:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	2200      	movs	r2, #0
 800e434:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	69db      	ldr	r3, [r3, #28]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	f000 80c9 	beq.w	800e5d2 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e444:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e448:	d032      	beq.n	800e4b0 <get_fileinfo+0x90>
			i = j = 0;
 800e44a:	2300      	movs	r3, #0
 800e44c:	61bb      	str	r3, [r7, #24]
 800e44e:	69bb      	ldr	r3, [r7, #24]
 800e450:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800e452:	e01b      	b.n	800e48c <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800e454:	89fb      	ldrh	r3, [r7, #14]
 800e456:	2100      	movs	r1, #0
 800e458:	4618      	mov	r0, r3
 800e45a:	f001 fbc7 	bl	800fbec <ff_convert>
 800e45e:	4603      	mov	r3, r0
 800e460:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800e462:	89fb      	ldrh	r3, [r7, #14]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d102      	bne.n	800e46e <get_fileinfo+0x4e>
 800e468:	2300      	movs	r3, #0
 800e46a:	61fb      	str	r3, [r7, #28]
 800e46c:	e01a      	b.n	800e4a4 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800e46e:	69fb      	ldr	r3, [r7, #28]
 800e470:	2bfe      	cmp	r3, #254	; 0xfe
 800e472:	d902      	bls.n	800e47a <get_fileinfo+0x5a>
 800e474:	2300      	movs	r3, #0
 800e476:	61fb      	str	r3, [r7, #28]
 800e478:	e014      	b.n	800e4a4 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800e47a:	69fb      	ldr	r3, [r7, #28]
 800e47c:	1c5a      	adds	r2, r3, #1
 800e47e:	61fa      	str	r2, [r7, #28]
 800e480:	89fa      	ldrh	r2, [r7, #14]
 800e482:	b2d1      	uxtb	r1, r2
 800e484:	683a      	ldr	r2, [r7, #0]
 800e486:	4413      	add	r3, r2
 800e488:	460a      	mov	r2, r1
 800e48a:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800e48c:	693b      	ldr	r3, [r7, #16]
 800e48e:	68da      	ldr	r2, [r3, #12]
 800e490:	69bb      	ldr	r3, [r7, #24]
 800e492:	1c59      	adds	r1, r3, #1
 800e494:	61b9      	str	r1, [r7, #24]
 800e496:	005b      	lsls	r3, r3, #1
 800e498:	4413      	add	r3, r2
 800e49a:	881b      	ldrh	r3, [r3, #0]
 800e49c:	81fb      	strh	r3, [r7, #14]
 800e49e:	89fb      	ldrh	r3, [r7, #14]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d1d7      	bne.n	800e454 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800e4a4:	683a      	ldr	r2, [r7, #0]
 800e4a6:	69fb      	ldr	r3, [r7, #28]
 800e4a8:	4413      	add	r3, r2
 800e4aa:	3316      	adds	r3, #22
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	61bb      	str	r3, [r7, #24]
 800e4b4:	69bb      	ldr	r3, [r7, #24]
 800e4b6:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800e4b8:	683a      	ldr	r2, [r7, #0]
 800e4ba:	69fb      	ldr	r3, [r7, #28]
 800e4bc:	4413      	add	r3, r2
 800e4be:	3316      	adds	r3, #22
 800e4c0:	781b      	ldrb	r3, [r3, #0]
 800e4c2:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800e4c4:	e04c      	b.n	800e560 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	6a1a      	ldr	r2, [r3, #32]
 800e4ca:	69fb      	ldr	r3, [r7, #28]
 800e4cc:	1c59      	adds	r1, r3, #1
 800e4ce:	61f9      	str	r1, [r7, #28]
 800e4d0:	4413      	add	r3, r2
 800e4d2:	781b      	ldrb	r3, [r3, #0]
 800e4d4:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800e4d6:	7dfb      	ldrb	r3, [r7, #23]
 800e4d8:	2b20      	cmp	r3, #32
 800e4da:	d100      	bne.n	800e4de <get_fileinfo+0xbe>
 800e4dc:	e040      	b.n	800e560 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800e4de:	7dfb      	ldrb	r3, [r7, #23]
 800e4e0:	2b05      	cmp	r3, #5
 800e4e2:	d101      	bne.n	800e4e8 <get_fileinfo+0xc8>
 800e4e4:	23e5      	movs	r3, #229	; 0xe5
 800e4e6:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800e4e8:	69fb      	ldr	r3, [r7, #28]
 800e4ea:	2b09      	cmp	r3, #9
 800e4ec:	d10f      	bne.n	800e50e <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800e4ee:	89bb      	ldrh	r3, [r7, #12]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d105      	bne.n	800e500 <get_fileinfo+0xe0>
 800e4f4:	683a      	ldr	r2, [r7, #0]
 800e4f6:	69bb      	ldr	r3, [r7, #24]
 800e4f8:	4413      	add	r3, r2
 800e4fa:	3316      	adds	r3, #22
 800e4fc:	222e      	movs	r2, #46	; 0x2e
 800e4fe:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800e500:	69bb      	ldr	r3, [r7, #24]
 800e502:	1c5a      	adds	r2, r3, #1
 800e504:	61ba      	str	r2, [r7, #24]
 800e506:	683a      	ldr	r2, [r7, #0]
 800e508:	4413      	add	r3, r2
 800e50a:	222e      	movs	r2, #46	; 0x2e
 800e50c:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800e50e:	683a      	ldr	r2, [r7, #0]
 800e510:	69bb      	ldr	r3, [r7, #24]
 800e512:	4413      	add	r3, r2
 800e514:	3309      	adds	r3, #9
 800e516:	7dfa      	ldrb	r2, [r7, #23]
 800e518:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800e51a:	89bb      	ldrh	r3, [r7, #12]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d11c      	bne.n	800e55a <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800e520:	7dfb      	ldrb	r3, [r7, #23]
 800e522:	2b40      	cmp	r3, #64	; 0x40
 800e524:	d913      	bls.n	800e54e <get_fileinfo+0x12e>
 800e526:	7dfb      	ldrb	r3, [r7, #23]
 800e528:	2b5a      	cmp	r3, #90	; 0x5a
 800e52a:	d810      	bhi.n	800e54e <get_fileinfo+0x12e>
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	6a1b      	ldr	r3, [r3, #32]
 800e530:	330c      	adds	r3, #12
 800e532:	781b      	ldrb	r3, [r3, #0]
 800e534:	461a      	mov	r2, r3
 800e536:	69fb      	ldr	r3, [r7, #28]
 800e538:	2b08      	cmp	r3, #8
 800e53a:	d901      	bls.n	800e540 <get_fileinfo+0x120>
 800e53c:	2310      	movs	r3, #16
 800e53e:	e000      	b.n	800e542 <get_fileinfo+0x122>
 800e540:	2308      	movs	r3, #8
 800e542:	4013      	ands	r3, r2
 800e544:	2b00      	cmp	r3, #0
 800e546:	d002      	beq.n	800e54e <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800e548:	7dfb      	ldrb	r3, [r7, #23]
 800e54a:	3320      	adds	r3, #32
 800e54c:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800e54e:	683a      	ldr	r2, [r7, #0]
 800e550:	69bb      	ldr	r3, [r7, #24]
 800e552:	4413      	add	r3, r2
 800e554:	3316      	adds	r3, #22
 800e556:	7dfa      	ldrb	r2, [r7, #23]
 800e558:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800e55a:	69bb      	ldr	r3, [r7, #24]
 800e55c:	3301      	adds	r3, #1
 800e55e:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800e560:	69fb      	ldr	r3, [r7, #28]
 800e562:	2b0a      	cmp	r3, #10
 800e564:	d9af      	bls.n	800e4c6 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800e566:	89bb      	ldrh	r3, [r7, #12]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d10d      	bne.n	800e588 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800e56c:	683a      	ldr	r2, [r7, #0]
 800e56e:	69bb      	ldr	r3, [r7, #24]
 800e570:	4413      	add	r3, r2
 800e572:	3316      	adds	r3, #22
 800e574:	2200      	movs	r2, #0
 800e576:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	6a1b      	ldr	r3, [r3, #32]
 800e57c:	330c      	adds	r3, #12
 800e57e:	781b      	ldrb	r3, [r3, #0]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d101      	bne.n	800e588 <get_fileinfo+0x168>
 800e584:	2300      	movs	r3, #0
 800e586:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800e588:	683a      	ldr	r2, [r7, #0]
 800e58a:	69bb      	ldr	r3, [r7, #24]
 800e58c:	4413      	add	r3, r2
 800e58e:	3309      	adds	r3, #9
 800e590:	2200      	movs	r2, #0
 800e592:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	6a1b      	ldr	r3, [r3, #32]
 800e598:	7ada      	ldrb	r2, [r3, #11]
 800e59a:	683b      	ldr	r3, [r7, #0]
 800e59c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	6a1b      	ldr	r3, [r3, #32]
 800e5a2:	331c      	adds	r3, #28
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f7fe fc1f 	bl	800cde8 <ld_dword>
 800e5aa:	4602      	mov	r2, r0
 800e5ac:	683b      	ldr	r3, [r7, #0]
 800e5ae:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	6a1b      	ldr	r3, [r3, #32]
 800e5b4:	3316      	adds	r3, #22
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f7fe fc16 	bl	800cde8 <ld_dword>
 800e5bc:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800e5be:	68bb      	ldr	r3, [r7, #8]
 800e5c0:	b29a      	uxth	r2, r3
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	80da      	strh	r2, [r3, #6]
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	0c1b      	lsrs	r3, r3, #16
 800e5ca:	b29a      	uxth	r2, r3
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	809a      	strh	r2, [r3, #4]
 800e5d0:	e000      	b.n	800e5d4 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e5d2:	bf00      	nop
}
 800e5d4:	3720      	adds	r7, #32
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bd80      	pop	{r7, pc}
	...

0800e5dc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b08a      	sub	sp, #40	; 0x28
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
 800e5e4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e5e6:	683b      	ldr	r3, [r7, #0]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	613b      	str	r3, [r7, #16]
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	68db      	ldr	r3, [r3, #12]
 800e5f2:	60fb      	str	r3, [r7, #12]
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	617b      	str	r3, [r7, #20]
 800e5f8:	697b      	ldr	r3, [r7, #20]
 800e5fa:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e5fc:	69bb      	ldr	r3, [r7, #24]
 800e5fe:	1c5a      	adds	r2, r3, #1
 800e600:	61ba      	str	r2, [r7, #24]
 800e602:	693a      	ldr	r2, [r7, #16]
 800e604:	4413      	add	r3, r2
 800e606:	781b      	ldrb	r3, [r3, #0]
 800e608:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800e60a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e60c:	2b1f      	cmp	r3, #31
 800e60e:	d940      	bls.n	800e692 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e610:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e612:	2b2f      	cmp	r3, #47	; 0x2f
 800e614:	d006      	beq.n	800e624 <create_name+0x48>
 800e616:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e618:	2b5c      	cmp	r3, #92	; 0x5c
 800e61a:	d110      	bne.n	800e63e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e61c:	e002      	b.n	800e624 <create_name+0x48>
 800e61e:	69bb      	ldr	r3, [r7, #24]
 800e620:	3301      	adds	r3, #1
 800e622:	61bb      	str	r3, [r7, #24]
 800e624:	693a      	ldr	r2, [r7, #16]
 800e626:	69bb      	ldr	r3, [r7, #24]
 800e628:	4413      	add	r3, r2
 800e62a:	781b      	ldrb	r3, [r3, #0]
 800e62c:	2b2f      	cmp	r3, #47	; 0x2f
 800e62e:	d0f6      	beq.n	800e61e <create_name+0x42>
 800e630:	693a      	ldr	r2, [r7, #16]
 800e632:	69bb      	ldr	r3, [r7, #24]
 800e634:	4413      	add	r3, r2
 800e636:	781b      	ldrb	r3, [r3, #0]
 800e638:	2b5c      	cmp	r3, #92	; 0x5c
 800e63a:	d0f0      	beq.n	800e61e <create_name+0x42>
			break;
 800e63c:	e02a      	b.n	800e694 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	2bfe      	cmp	r3, #254	; 0xfe
 800e642:	d901      	bls.n	800e648 <create_name+0x6c>
 800e644:	2306      	movs	r3, #6
 800e646:	e17d      	b.n	800e944 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e648:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e64a:	b2db      	uxtb	r3, r3
 800e64c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e64e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e650:	2101      	movs	r1, #1
 800e652:	4618      	mov	r0, r3
 800e654:	f001 faca 	bl	800fbec <ff_convert>
 800e658:	4603      	mov	r3, r0
 800e65a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e65c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d101      	bne.n	800e666 <create_name+0x8a>
 800e662:	2306      	movs	r3, #6
 800e664:	e16e      	b.n	800e944 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e666:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e668:	2b7f      	cmp	r3, #127	; 0x7f
 800e66a:	d809      	bhi.n	800e680 <create_name+0xa4>
 800e66c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e66e:	4619      	mov	r1, r3
 800e670:	488d      	ldr	r0, [pc, #564]	; (800e8a8 <create_name+0x2cc>)
 800e672:	f7fe fc86 	bl	800cf82 <chk_chr>
 800e676:	4603      	mov	r3, r0
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d001      	beq.n	800e680 <create_name+0xa4>
 800e67c:	2306      	movs	r3, #6
 800e67e:	e161      	b.n	800e944 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	1c5a      	adds	r2, r3, #1
 800e684:	617a      	str	r2, [r7, #20]
 800e686:	005b      	lsls	r3, r3, #1
 800e688:	68fa      	ldr	r2, [r7, #12]
 800e68a:	4413      	add	r3, r2
 800e68c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e68e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e690:	e7b4      	b.n	800e5fc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800e692:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e694:	693a      	ldr	r2, [r7, #16]
 800e696:	69bb      	ldr	r3, [r7, #24]
 800e698:	441a      	add	r2, r3
 800e69a:	683b      	ldr	r3, [r7, #0]
 800e69c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e69e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6a0:	2b1f      	cmp	r3, #31
 800e6a2:	d801      	bhi.n	800e6a8 <create_name+0xcc>
 800e6a4:	2304      	movs	r3, #4
 800e6a6:	e000      	b.n	800e6aa <create_name+0xce>
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e6ae:	e011      	b.n	800e6d4 <create_name+0xf8>
		w = lfn[di - 1];
 800e6b0:	697a      	ldr	r2, [r7, #20]
 800e6b2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e6b6:	4413      	add	r3, r2
 800e6b8:	005b      	lsls	r3, r3, #1
 800e6ba:	68fa      	ldr	r2, [r7, #12]
 800e6bc:	4413      	add	r3, r2
 800e6be:	881b      	ldrh	r3, [r3, #0]
 800e6c0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800e6c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6c4:	2b20      	cmp	r3, #32
 800e6c6:	d002      	beq.n	800e6ce <create_name+0xf2>
 800e6c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6ca:	2b2e      	cmp	r3, #46	; 0x2e
 800e6cc:	d106      	bne.n	800e6dc <create_name+0x100>
		di--;
 800e6ce:	697b      	ldr	r3, [r7, #20]
 800e6d0:	3b01      	subs	r3, #1
 800e6d2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e6d4:	697b      	ldr	r3, [r7, #20]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d1ea      	bne.n	800e6b0 <create_name+0xd4>
 800e6da:	e000      	b.n	800e6de <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800e6dc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	005b      	lsls	r3, r3, #1
 800e6e2:	68fa      	ldr	r2, [r7, #12]
 800e6e4:	4413      	add	r3, r2
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e6ea:	697b      	ldr	r3, [r7, #20]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d101      	bne.n	800e6f4 <create_name+0x118>
 800e6f0:	2306      	movs	r3, #6
 800e6f2:	e127      	b.n	800e944 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	3324      	adds	r3, #36	; 0x24
 800e6f8:	220b      	movs	r2, #11
 800e6fa:	2120      	movs	r1, #32
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f7fe fbfe 	bl	800cefe <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e702:	2300      	movs	r3, #0
 800e704:	61bb      	str	r3, [r7, #24]
 800e706:	e002      	b.n	800e70e <create_name+0x132>
 800e708:	69bb      	ldr	r3, [r7, #24]
 800e70a:	3301      	adds	r3, #1
 800e70c:	61bb      	str	r3, [r7, #24]
 800e70e:	69bb      	ldr	r3, [r7, #24]
 800e710:	005b      	lsls	r3, r3, #1
 800e712:	68fa      	ldr	r2, [r7, #12]
 800e714:	4413      	add	r3, r2
 800e716:	881b      	ldrh	r3, [r3, #0]
 800e718:	2b20      	cmp	r3, #32
 800e71a:	d0f5      	beq.n	800e708 <create_name+0x12c>
 800e71c:	69bb      	ldr	r3, [r7, #24]
 800e71e:	005b      	lsls	r3, r3, #1
 800e720:	68fa      	ldr	r2, [r7, #12]
 800e722:	4413      	add	r3, r2
 800e724:	881b      	ldrh	r3, [r3, #0]
 800e726:	2b2e      	cmp	r3, #46	; 0x2e
 800e728:	d0ee      	beq.n	800e708 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e72a:	69bb      	ldr	r3, [r7, #24]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d009      	beq.n	800e744 <create_name+0x168>
 800e730:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e734:	f043 0303 	orr.w	r3, r3, #3
 800e738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e73c:	e002      	b.n	800e744 <create_name+0x168>
 800e73e:	697b      	ldr	r3, [r7, #20]
 800e740:	3b01      	subs	r3, #1
 800e742:	617b      	str	r3, [r7, #20]
 800e744:	697b      	ldr	r3, [r7, #20]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d009      	beq.n	800e75e <create_name+0x182>
 800e74a:	697a      	ldr	r2, [r7, #20]
 800e74c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e750:	4413      	add	r3, r2
 800e752:	005b      	lsls	r3, r3, #1
 800e754:	68fa      	ldr	r2, [r7, #12]
 800e756:	4413      	add	r3, r2
 800e758:	881b      	ldrh	r3, [r3, #0]
 800e75a:	2b2e      	cmp	r3, #46	; 0x2e
 800e75c:	d1ef      	bne.n	800e73e <create_name+0x162>

	i = b = 0; ni = 8;
 800e75e:	2300      	movs	r3, #0
 800e760:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e764:	2300      	movs	r3, #0
 800e766:	623b      	str	r3, [r7, #32]
 800e768:	2308      	movs	r3, #8
 800e76a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e76c:	69bb      	ldr	r3, [r7, #24]
 800e76e:	1c5a      	adds	r2, r3, #1
 800e770:	61ba      	str	r2, [r7, #24]
 800e772:	005b      	lsls	r3, r3, #1
 800e774:	68fa      	ldr	r2, [r7, #12]
 800e776:	4413      	add	r3, r2
 800e778:	881b      	ldrh	r3, [r3, #0]
 800e77a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e77c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e77e:	2b00      	cmp	r3, #0
 800e780:	f000 8090 	beq.w	800e8a4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e784:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e786:	2b20      	cmp	r3, #32
 800e788:	d006      	beq.n	800e798 <create_name+0x1bc>
 800e78a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e78c:	2b2e      	cmp	r3, #46	; 0x2e
 800e78e:	d10a      	bne.n	800e7a6 <create_name+0x1ca>
 800e790:	69ba      	ldr	r2, [r7, #24]
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	429a      	cmp	r2, r3
 800e796:	d006      	beq.n	800e7a6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800e798:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e79c:	f043 0303 	orr.w	r3, r3, #3
 800e7a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e7a4:	e07d      	b.n	800e8a2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e7a6:	6a3a      	ldr	r2, [r7, #32]
 800e7a8:	69fb      	ldr	r3, [r7, #28]
 800e7aa:	429a      	cmp	r2, r3
 800e7ac:	d203      	bcs.n	800e7b6 <create_name+0x1da>
 800e7ae:	69ba      	ldr	r2, [r7, #24]
 800e7b0:	697b      	ldr	r3, [r7, #20]
 800e7b2:	429a      	cmp	r2, r3
 800e7b4:	d123      	bne.n	800e7fe <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800e7b6:	69fb      	ldr	r3, [r7, #28]
 800e7b8:	2b0b      	cmp	r3, #11
 800e7ba:	d106      	bne.n	800e7ca <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800e7bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7c0:	f043 0303 	orr.w	r3, r3, #3
 800e7c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e7c8:	e075      	b.n	800e8b6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e7ca:	69ba      	ldr	r2, [r7, #24]
 800e7cc:	697b      	ldr	r3, [r7, #20]
 800e7ce:	429a      	cmp	r2, r3
 800e7d0:	d005      	beq.n	800e7de <create_name+0x202>
 800e7d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7d6:	f043 0303 	orr.w	r3, r3, #3
 800e7da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800e7de:	69ba      	ldr	r2, [r7, #24]
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d866      	bhi.n	800e8b4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	61bb      	str	r3, [r7, #24]
 800e7ea:	2308      	movs	r3, #8
 800e7ec:	623b      	str	r3, [r7, #32]
 800e7ee:	230b      	movs	r3, #11
 800e7f0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e7f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e7f6:	009b      	lsls	r3, r3, #2
 800e7f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e7fc:	e051      	b.n	800e8a2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e7fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e800:	2b7f      	cmp	r3, #127	; 0x7f
 800e802:	d914      	bls.n	800e82e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e804:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e806:	2100      	movs	r1, #0
 800e808:	4618      	mov	r0, r3
 800e80a:	f001 f9ef 	bl	800fbec <ff_convert>
 800e80e:	4603      	mov	r3, r0
 800e810:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e812:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e814:	2b00      	cmp	r3, #0
 800e816:	d004      	beq.n	800e822 <create_name+0x246>
 800e818:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e81a:	3b80      	subs	r3, #128	; 0x80
 800e81c:	4a23      	ldr	r2, [pc, #140]	; (800e8ac <create_name+0x2d0>)
 800e81e:	5cd3      	ldrb	r3, [r2, r3]
 800e820:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e822:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e826:	f043 0302 	orr.w	r3, r3, #2
 800e82a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e82e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e830:	2b00      	cmp	r3, #0
 800e832:	d007      	beq.n	800e844 <create_name+0x268>
 800e834:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e836:	4619      	mov	r1, r3
 800e838:	481d      	ldr	r0, [pc, #116]	; (800e8b0 <create_name+0x2d4>)
 800e83a:	f7fe fba2 	bl	800cf82 <chk_chr>
 800e83e:	4603      	mov	r3, r0
 800e840:	2b00      	cmp	r3, #0
 800e842:	d008      	beq.n	800e856 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e844:	235f      	movs	r3, #95	; 0x5f
 800e846:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e84c:	f043 0303 	orr.w	r3, r3, #3
 800e850:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e854:	e01b      	b.n	800e88e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e856:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e858:	2b40      	cmp	r3, #64	; 0x40
 800e85a:	d909      	bls.n	800e870 <create_name+0x294>
 800e85c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e85e:	2b5a      	cmp	r3, #90	; 0x5a
 800e860:	d806      	bhi.n	800e870 <create_name+0x294>
					b |= 2;
 800e862:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e866:	f043 0302 	orr.w	r3, r3, #2
 800e86a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e86e:	e00e      	b.n	800e88e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e870:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e872:	2b60      	cmp	r3, #96	; 0x60
 800e874:	d90b      	bls.n	800e88e <create_name+0x2b2>
 800e876:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e878:	2b7a      	cmp	r3, #122	; 0x7a
 800e87a:	d808      	bhi.n	800e88e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800e87c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e880:	f043 0301 	orr.w	r3, r3, #1
 800e884:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e888:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e88a:	3b20      	subs	r3, #32
 800e88c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e88e:	6a3b      	ldr	r3, [r7, #32]
 800e890:	1c5a      	adds	r2, r3, #1
 800e892:	623a      	str	r2, [r7, #32]
 800e894:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e896:	b2d1      	uxtb	r1, r2
 800e898:	687a      	ldr	r2, [r7, #4]
 800e89a:	4413      	add	r3, r2
 800e89c:	460a      	mov	r2, r1
 800e89e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800e8a2:	e763      	b.n	800e76c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800e8a4:	bf00      	nop
 800e8a6:	e006      	b.n	800e8b6 <create_name+0x2da>
 800e8a8:	08011ed8 	.word	0x08011ed8
 800e8ac:	08011f9c 	.word	0x08011f9c
 800e8b0:	08011ee4 	.word	0x08011ee4
			if (si > di) break;			/* No extension */
 800e8b4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e8bc:	2be5      	cmp	r3, #229	; 0xe5
 800e8be:	d103      	bne.n	800e8c8 <create_name+0x2ec>
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2205      	movs	r2, #5
 800e8c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800e8c8:	69fb      	ldr	r3, [r7, #28]
 800e8ca:	2b08      	cmp	r3, #8
 800e8cc:	d104      	bne.n	800e8d8 <create_name+0x2fc>
 800e8ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e8d2:	009b      	lsls	r3, r3, #2
 800e8d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e8d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e8dc:	f003 030c 	and.w	r3, r3, #12
 800e8e0:	2b0c      	cmp	r3, #12
 800e8e2:	d005      	beq.n	800e8f0 <create_name+0x314>
 800e8e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e8e8:	f003 0303 	and.w	r3, r3, #3
 800e8ec:	2b03      	cmp	r3, #3
 800e8ee:	d105      	bne.n	800e8fc <create_name+0x320>
 800e8f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8f4:	f043 0302 	orr.w	r3, r3, #2
 800e8f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e8fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e900:	f003 0302 	and.w	r3, r3, #2
 800e904:	2b00      	cmp	r3, #0
 800e906:	d117      	bne.n	800e938 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e908:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e90c:	f003 0303 	and.w	r3, r3, #3
 800e910:	2b01      	cmp	r3, #1
 800e912:	d105      	bne.n	800e920 <create_name+0x344>
 800e914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e918:	f043 0310 	orr.w	r3, r3, #16
 800e91c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e920:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e924:	f003 030c 	and.w	r3, r3, #12
 800e928:	2b04      	cmp	r3, #4
 800e92a:	d105      	bne.n	800e938 <create_name+0x35c>
 800e92c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e930:	f043 0308 	orr.w	r3, r3, #8
 800e934:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e93e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800e942:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800e944:	4618      	mov	r0, r3
 800e946:	3728      	adds	r7, #40	; 0x28
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}

0800e94c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b086      	sub	sp, #24
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
 800e954:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e95a:	693b      	ldr	r3, [r7, #16]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e960:	e002      	b.n	800e968 <follow_path+0x1c>
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	3301      	adds	r3, #1
 800e966:	603b      	str	r3, [r7, #0]
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	781b      	ldrb	r3, [r3, #0]
 800e96c:	2b2f      	cmp	r3, #47	; 0x2f
 800e96e:	d0f8      	beq.n	800e962 <follow_path+0x16>
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	781b      	ldrb	r3, [r3, #0]
 800e974:	2b5c      	cmp	r3, #92	; 0x5c
 800e976:	d0f4      	beq.n	800e962 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e978:	693b      	ldr	r3, [r7, #16]
 800e97a:	2200      	movs	r2, #0
 800e97c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	781b      	ldrb	r3, [r3, #0]
 800e982:	2b1f      	cmp	r3, #31
 800e984:	d80a      	bhi.n	800e99c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2280      	movs	r2, #128	; 0x80
 800e98a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e98e:	2100      	movs	r1, #0
 800e990:	6878      	ldr	r0, [r7, #4]
 800e992:	f7ff f83f 	bl	800da14 <dir_sdi>
 800e996:	4603      	mov	r3, r0
 800e998:	75fb      	strb	r3, [r7, #23]
 800e99a:	e043      	b.n	800ea24 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e99c:	463b      	mov	r3, r7
 800e99e:	4619      	mov	r1, r3
 800e9a0:	6878      	ldr	r0, [r7, #4]
 800e9a2:	f7ff fe1b 	bl	800e5dc <create_name>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e9aa:	7dfb      	ldrb	r3, [r7, #23]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d134      	bne.n	800ea1a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e9b0:	6878      	ldr	r0, [r7, #4]
 800e9b2:	f7ff fb7c 	bl	800e0ae <dir_find>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e9c0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e9c2:	7dfb      	ldrb	r3, [r7, #23]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d00a      	beq.n	800e9de <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e9c8:	7dfb      	ldrb	r3, [r7, #23]
 800e9ca:	2b04      	cmp	r3, #4
 800e9cc:	d127      	bne.n	800ea1e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e9ce:	7afb      	ldrb	r3, [r7, #11]
 800e9d0:	f003 0304 	and.w	r3, r3, #4
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d122      	bne.n	800ea1e <follow_path+0xd2>
 800e9d8:	2305      	movs	r3, #5
 800e9da:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e9dc:	e01f      	b.n	800ea1e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e9de:	7afb      	ldrb	r3, [r7, #11]
 800e9e0:	f003 0304 	and.w	r3, r3, #4
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d11c      	bne.n	800ea22 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e9e8:	693b      	ldr	r3, [r7, #16]
 800e9ea:	799b      	ldrb	r3, [r3, #6]
 800e9ec:	f003 0310 	and.w	r3, r3, #16
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d102      	bne.n	800e9fa <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e9f4:	2305      	movs	r3, #5
 800e9f6:	75fb      	strb	r3, [r7, #23]
 800e9f8:	e014      	b.n	800ea24 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	695b      	ldr	r3, [r3, #20]
 800ea04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea08:	4413      	add	r3, r2
 800ea0a:	4619      	mov	r1, r3
 800ea0c:	68f8      	ldr	r0, [r7, #12]
 800ea0e:	f7ff f988 	bl	800dd22 <ld_clust>
 800ea12:	4602      	mov	r2, r0
 800ea14:	693b      	ldr	r3, [r7, #16]
 800ea16:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ea18:	e7c0      	b.n	800e99c <follow_path+0x50>
			if (res != FR_OK) break;
 800ea1a:	bf00      	nop
 800ea1c:	e002      	b.n	800ea24 <follow_path+0xd8>
				break;
 800ea1e:	bf00      	nop
 800ea20:	e000      	b.n	800ea24 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ea22:	bf00      	nop
			}
		}
	}

	return res;
 800ea24:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea26:	4618      	mov	r0, r3
 800ea28:	3718      	adds	r7, #24
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}

0800ea2e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ea2e:	b480      	push	{r7}
 800ea30:	b087      	sub	sp, #28
 800ea32:	af00      	add	r7, sp, #0
 800ea34:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ea36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ea3a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d031      	beq.n	800eaa8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	617b      	str	r3, [r7, #20]
 800ea4a:	e002      	b.n	800ea52 <get_ldnumber+0x24>
 800ea4c:	697b      	ldr	r3, [r7, #20]
 800ea4e:	3301      	adds	r3, #1
 800ea50:	617b      	str	r3, [r7, #20]
 800ea52:	697b      	ldr	r3, [r7, #20]
 800ea54:	781b      	ldrb	r3, [r3, #0]
 800ea56:	2b1f      	cmp	r3, #31
 800ea58:	d903      	bls.n	800ea62 <get_ldnumber+0x34>
 800ea5a:	697b      	ldr	r3, [r7, #20]
 800ea5c:	781b      	ldrb	r3, [r3, #0]
 800ea5e:	2b3a      	cmp	r3, #58	; 0x3a
 800ea60:	d1f4      	bne.n	800ea4c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ea62:	697b      	ldr	r3, [r7, #20]
 800ea64:	781b      	ldrb	r3, [r3, #0]
 800ea66:	2b3a      	cmp	r3, #58	; 0x3a
 800ea68:	d11c      	bne.n	800eaa4 <get_ldnumber+0x76>
			tp = *path;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	1c5a      	adds	r2, r3, #1
 800ea74:	60fa      	str	r2, [r7, #12]
 800ea76:	781b      	ldrb	r3, [r3, #0]
 800ea78:	3b30      	subs	r3, #48	; 0x30
 800ea7a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	2b09      	cmp	r3, #9
 800ea80:	d80e      	bhi.n	800eaa0 <get_ldnumber+0x72>
 800ea82:	68fa      	ldr	r2, [r7, #12]
 800ea84:	697b      	ldr	r3, [r7, #20]
 800ea86:	429a      	cmp	r2, r3
 800ea88:	d10a      	bne.n	800eaa0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d107      	bne.n	800eaa0 <get_ldnumber+0x72>
					vol = (int)i;
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	3301      	adds	r3, #1
 800ea98:	617b      	str	r3, [r7, #20]
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	697a      	ldr	r2, [r7, #20]
 800ea9e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800eaa0:	693b      	ldr	r3, [r7, #16]
 800eaa2:	e002      	b.n	800eaaa <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800eaa8:	693b      	ldr	r3, [r7, #16]
}
 800eaaa:	4618      	mov	r0, r3
 800eaac:	371c      	adds	r7, #28
 800eaae:	46bd      	mov	sp, r7
 800eab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab4:	4770      	bx	lr
	...

0800eab8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b082      	sub	sp, #8
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
 800eac0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2200      	movs	r2, #0
 800eac6:	70da      	strb	r2, [r3, #3]
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eace:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ead0:	6839      	ldr	r1, [r7, #0]
 800ead2:	6878      	ldr	r0, [r7, #4]
 800ead4:	f7fe fc20 	bl	800d318 <move_window>
 800ead8:	4603      	mov	r3, r0
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d001      	beq.n	800eae2 <check_fs+0x2a>
 800eade:	2304      	movs	r3, #4
 800eae0:	e038      	b.n	800eb54 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	3334      	adds	r3, #52	; 0x34
 800eae6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800eaea:	4618      	mov	r0, r3
 800eaec:	f7fe f964 	bl	800cdb8 <ld_word>
 800eaf0:	4603      	mov	r3, r0
 800eaf2:	461a      	mov	r2, r3
 800eaf4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800eaf8:	429a      	cmp	r2, r3
 800eafa:	d001      	beq.n	800eb00 <check_fs+0x48>
 800eafc:	2303      	movs	r3, #3
 800eafe:	e029      	b.n	800eb54 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800eb06:	2be9      	cmp	r3, #233	; 0xe9
 800eb08:	d009      	beq.n	800eb1e <check_fs+0x66>
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800eb10:	2beb      	cmp	r3, #235	; 0xeb
 800eb12:	d11e      	bne.n	800eb52 <check_fs+0x9a>
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800eb1a:	2b90      	cmp	r3, #144	; 0x90
 800eb1c:	d119      	bne.n	800eb52 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	3334      	adds	r3, #52	; 0x34
 800eb22:	3336      	adds	r3, #54	; 0x36
 800eb24:	4618      	mov	r0, r3
 800eb26:	f7fe f95f 	bl	800cde8 <ld_dword>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800eb30:	4a0a      	ldr	r2, [pc, #40]	; (800eb5c <check_fs+0xa4>)
 800eb32:	4293      	cmp	r3, r2
 800eb34:	d101      	bne.n	800eb3a <check_fs+0x82>
 800eb36:	2300      	movs	r3, #0
 800eb38:	e00c      	b.n	800eb54 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	3334      	adds	r3, #52	; 0x34
 800eb3e:	3352      	adds	r3, #82	; 0x52
 800eb40:	4618      	mov	r0, r3
 800eb42:	f7fe f951 	bl	800cde8 <ld_dword>
 800eb46:	4603      	mov	r3, r0
 800eb48:	4a05      	ldr	r2, [pc, #20]	; (800eb60 <check_fs+0xa8>)
 800eb4a:	4293      	cmp	r3, r2
 800eb4c:	d101      	bne.n	800eb52 <check_fs+0x9a>
 800eb4e:	2300      	movs	r3, #0
 800eb50:	e000      	b.n	800eb54 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800eb52:	2302      	movs	r3, #2
}
 800eb54:	4618      	mov	r0, r3
 800eb56:	3708      	adds	r7, #8
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}
 800eb5c:	00544146 	.word	0x00544146
 800eb60:	33544146 	.word	0x33544146

0800eb64 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b096      	sub	sp, #88	; 0x58
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	60f8      	str	r0, [r7, #12]
 800eb6c:	60b9      	str	r1, [r7, #8]
 800eb6e:	4613      	mov	r3, r2
 800eb70:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800eb72:	68bb      	ldr	r3, [r7, #8]
 800eb74:	2200      	movs	r2, #0
 800eb76:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800eb78:	68f8      	ldr	r0, [r7, #12]
 800eb7a:	f7ff ff58 	bl	800ea2e <get_ldnumber>
 800eb7e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800eb80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	da01      	bge.n	800eb8a <find_volume+0x26>
 800eb86:	230b      	movs	r3, #11
 800eb88:	e230      	b.n	800efec <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800eb8a:	4aa1      	ldr	r2, [pc, #644]	; (800ee10 <find_volume+0x2ac>)
 800eb8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb92:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800eb94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d101      	bne.n	800eb9e <find_volume+0x3a>
 800eb9a:	230c      	movs	r3, #12
 800eb9c:	e226      	b.n	800efec <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800eb9e:	68bb      	ldr	r3, [r7, #8]
 800eba0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eba2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800eba4:	79fb      	ldrb	r3, [r7, #7]
 800eba6:	f023 0301 	bic.w	r3, r3, #1
 800ebaa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ebac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebae:	781b      	ldrb	r3, [r3, #0]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d01a      	beq.n	800ebea <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ebb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebb6:	785b      	ldrb	r3, [r3, #1]
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f7fe f85f 	bl	800cc7c <disk_status>
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ebc4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ebc8:	f003 0301 	and.w	r3, r3, #1
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d10c      	bne.n	800ebea <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ebd0:	79fb      	ldrb	r3, [r7, #7]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d007      	beq.n	800ebe6 <find_volume+0x82>
 800ebd6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ebda:	f003 0304 	and.w	r3, r3, #4
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d001      	beq.n	800ebe6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ebe2:	230a      	movs	r3, #10
 800ebe4:	e202      	b.n	800efec <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	e200      	b.n	800efec <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ebea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebec:	2200      	movs	r2, #0
 800ebee:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ebf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebf2:	b2da      	uxtb	r2, r3
 800ebf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebf6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ebf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebfa:	785b      	ldrb	r3, [r3, #1]
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	f7fe f857 	bl	800ccb0 <disk_initialize>
 800ec02:	4603      	mov	r3, r0
 800ec04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ec08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ec0c:	f003 0301 	and.w	r3, r3, #1
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d001      	beq.n	800ec18 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ec14:	2303      	movs	r3, #3
 800ec16:	e1e9      	b.n	800efec <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ec18:	79fb      	ldrb	r3, [r7, #7]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d007      	beq.n	800ec2e <find_volume+0xca>
 800ec1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ec22:	f003 0304 	and.w	r3, r3, #4
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d001      	beq.n	800ec2e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ec2a:	230a      	movs	r3, #10
 800ec2c:	e1de      	b.n	800efec <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ec2e:	2300      	movs	r3, #0
 800ec30:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ec32:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ec34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ec36:	f7ff ff3f 	bl	800eab8 <check_fs>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ec40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ec44:	2b02      	cmp	r3, #2
 800ec46:	d149      	bne.n	800ecdc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ec48:	2300      	movs	r3, #0
 800ec4a:	643b      	str	r3, [r7, #64]	; 0x40
 800ec4c:	e01e      	b.n	800ec8c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ec4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec50:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ec54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec56:	011b      	lsls	r3, r3, #4
 800ec58:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ec5c:	4413      	add	r3, r2
 800ec5e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ec60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec62:	3304      	adds	r3, #4
 800ec64:	781b      	ldrb	r3, [r3, #0]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d006      	beq.n	800ec78 <find_volume+0x114>
 800ec6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec6c:	3308      	adds	r3, #8
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f7fe f8ba 	bl	800cde8 <ld_dword>
 800ec74:	4602      	mov	r2, r0
 800ec76:	e000      	b.n	800ec7a <find_volume+0x116>
 800ec78:	2200      	movs	r2, #0
 800ec7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec7c:	009b      	lsls	r3, r3, #2
 800ec7e:	3358      	adds	r3, #88	; 0x58
 800ec80:	443b      	add	r3, r7
 800ec82:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ec86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec88:	3301      	adds	r3, #1
 800ec8a:	643b      	str	r3, [r7, #64]	; 0x40
 800ec8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec8e:	2b03      	cmp	r3, #3
 800ec90:	d9dd      	bls.n	800ec4e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ec92:	2300      	movs	r3, #0
 800ec94:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ec96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d002      	beq.n	800eca2 <find_volume+0x13e>
 800ec9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec9e:	3b01      	subs	r3, #1
 800eca0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800eca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eca4:	009b      	lsls	r3, r3, #2
 800eca6:	3358      	adds	r3, #88	; 0x58
 800eca8:	443b      	add	r3, r7
 800ecaa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ecae:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ecb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d005      	beq.n	800ecc2 <find_volume+0x15e>
 800ecb6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ecb8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ecba:	f7ff fefd 	bl	800eab8 <check_fs>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	e000      	b.n	800ecc4 <find_volume+0x160>
 800ecc2:	2303      	movs	r3, #3
 800ecc4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ecc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eccc:	2b01      	cmp	r3, #1
 800ecce:	d905      	bls.n	800ecdc <find_volume+0x178>
 800ecd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ecd2:	3301      	adds	r3, #1
 800ecd4:	643b      	str	r3, [r7, #64]	; 0x40
 800ecd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ecd8:	2b03      	cmp	r3, #3
 800ecda:	d9e2      	bls.n	800eca2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ecdc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ece0:	2b04      	cmp	r3, #4
 800ece2:	d101      	bne.n	800ece8 <find_volume+0x184>
 800ece4:	2301      	movs	r3, #1
 800ece6:	e181      	b.n	800efec <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ece8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ecec:	2b01      	cmp	r3, #1
 800ecee:	d901      	bls.n	800ecf4 <find_volume+0x190>
 800ecf0:	230d      	movs	r3, #13
 800ecf2:	e17b      	b.n	800efec <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ecf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecf6:	3334      	adds	r3, #52	; 0x34
 800ecf8:	330b      	adds	r3, #11
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f7fe f85c 	bl	800cdb8 <ld_word>
 800ed00:	4603      	mov	r3, r0
 800ed02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed06:	d001      	beq.n	800ed0c <find_volume+0x1a8>
 800ed08:	230d      	movs	r3, #13
 800ed0a:	e16f      	b.n	800efec <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ed0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed0e:	3334      	adds	r3, #52	; 0x34
 800ed10:	3316      	adds	r3, #22
 800ed12:	4618      	mov	r0, r3
 800ed14:	f7fe f850 	bl	800cdb8 <ld_word>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ed1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d106      	bne.n	800ed30 <find_volume+0x1cc>
 800ed22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed24:	3334      	adds	r3, #52	; 0x34
 800ed26:	3324      	adds	r3, #36	; 0x24
 800ed28:	4618      	mov	r0, r3
 800ed2a:	f7fe f85d 	bl	800cde8 <ld_dword>
 800ed2e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ed30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ed34:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ed36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed38:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ed3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed3e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ed40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed42:	789b      	ldrb	r3, [r3, #2]
 800ed44:	2b01      	cmp	r3, #1
 800ed46:	d005      	beq.n	800ed54 <find_volume+0x1f0>
 800ed48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed4a:	789b      	ldrb	r3, [r3, #2]
 800ed4c:	2b02      	cmp	r3, #2
 800ed4e:	d001      	beq.n	800ed54 <find_volume+0x1f0>
 800ed50:	230d      	movs	r3, #13
 800ed52:	e14b      	b.n	800efec <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ed54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed56:	789b      	ldrb	r3, [r3, #2]
 800ed58:	461a      	mov	r2, r3
 800ed5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed5c:	fb02 f303 	mul.w	r3, r2, r3
 800ed60:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ed62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ed68:	b29a      	uxth	r2, r3
 800ed6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed6c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ed6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed70:	895b      	ldrh	r3, [r3, #10]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d008      	beq.n	800ed88 <find_volume+0x224>
 800ed76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed78:	895b      	ldrh	r3, [r3, #10]
 800ed7a:	461a      	mov	r2, r3
 800ed7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed7e:	895b      	ldrh	r3, [r3, #10]
 800ed80:	3b01      	subs	r3, #1
 800ed82:	4013      	ands	r3, r2
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d001      	beq.n	800ed8c <find_volume+0x228>
 800ed88:	230d      	movs	r3, #13
 800ed8a:	e12f      	b.n	800efec <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ed8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed8e:	3334      	adds	r3, #52	; 0x34
 800ed90:	3311      	adds	r3, #17
 800ed92:	4618      	mov	r0, r3
 800ed94:	f7fe f810 	bl	800cdb8 <ld_word>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	461a      	mov	r2, r3
 800ed9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed9e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800eda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eda2:	891b      	ldrh	r3, [r3, #8]
 800eda4:	f003 030f 	and.w	r3, r3, #15
 800eda8:	b29b      	uxth	r3, r3
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d001      	beq.n	800edb2 <find_volume+0x24e>
 800edae:	230d      	movs	r3, #13
 800edb0:	e11c      	b.n	800efec <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800edb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edb4:	3334      	adds	r3, #52	; 0x34
 800edb6:	3313      	adds	r3, #19
 800edb8:	4618      	mov	r0, r3
 800edba:	f7fd fffd 	bl	800cdb8 <ld_word>
 800edbe:	4603      	mov	r3, r0
 800edc0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800edc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d106      	bne.n	800edd6 <find_volume+0x272>
 800edc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edca:	3334      	adds	r3, #52	; 0x34
 800edcc:	3320      	adds	r3, #32
 800edce:	4618      	mov	r0, r3
 800edd0:	f7fe f80a 	bl	800cde8 <ld_dword>
 800edd4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800edd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edd8:	3334      	adds	r3, #52	; 0x34
 800edda:	330e      	adds	r3, #14
 800eddc:	4618      	mov	r0, r3
 800edde:	f7fd ffeb 	bl	800cdb8 <ld_word>
 800ede2:	4603      	mov	r3, r0
 800ede4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ede6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d101      	bne.n	800edf0 <find_volume+0x28c>
 800edec:	230d      	movs	r3, #13
 800edee:	e0fd      	b.n	800efec <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800edf0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800edf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edf4:	4413      	add	r3, r2
 800edf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800edf8:	8912      	ldrh	r2, [r2, #8]
 800edfa:	0912      	lsrs	r2, r2, #4
 800edfc:	b292      	uxth	r2, r2
 800edfe:	4413      	add	r3, r2
 800ee00:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ee02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ee04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee06:	429a      	cmp	r2, r3
 800ee08:	d204      	bcs.n	800ee14 <find_volume+0x2b0>
 800ee0a:	230d      	movs	r3, #13
 800ee0c:	e0ee      	b.n	800efec <find_volume+0x488>
 800ee0e:	bf00      	nop
 800ee10:	20001604 	.word	0x20001604
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ee14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ee16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee18:	1ad3      	subs	r3, r2, r3
 800ee1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee1c:	8952      	ldrh	r2, [r2, #10]
 800ee1e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee22:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ee24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d101      	bne.n	800ee2e <find_volume+0x2ca>
 800ee2a:	230d      	movs	r3, #13
 800ee2c:	e0de      	b.n	800efec <find_volume+0x488>
		fmt = FS_FAT32;
 800ee2e:	2303      	movs	r3, #3
 800ee30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ee34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee36:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ee3a:	4293      	cmp	r3, r2
 800ee3c:	d802      	bhi.n	800ee44 <find_volume+0x2e0>
 800ee3e:	2302      	movs	r3, #2
 800ee40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ee44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee46:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ee4a:	4293      	cmp	r3, r2
 800ee4c:	d802      	bhi.n	800ee54 <find_volume+0x2f0>
 800ee4e:	2301      	movs	r3, #1
 800ee50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ee54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee56:	1c9a      	adds	r2, r3, #2
 800ee58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee5a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800ee5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ee60:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ee62:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ee64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee66:	441a      	add	r2, r3
 800ee68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee6a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800ee6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ee6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee70:	441a      	add	r2, r3
 800ee72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee74:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800ee76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ee7a:	2b03      	cmp	r3, #3
 800ee7c:	d11e      	bne.n	800eebc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ee7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee80:	3334      	adds	r3, #52	; 0x34
 800ee82:	332a      	adds	r3, #42	; 0x2a
 800ee84:	4618      	mov	r0, r3
 800ee86:	f7fd ff97 	bl	800cdb8 <ld_word>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d001      	beq.n	800ee94 <find_volume+0x330>
 800ee90:	230d      	movs	r3, #13
 800ee92:	e0ab      	b.n	800efec <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ee94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee96:	891b      	ldrh	r3, [r3, #8]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d001      	beq.n	800eea0 <find_volume+0x33c>
 800ee9c:	230d      	movs	r3, #13
 800ee9e:	e0a5      	b.n	800efec <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800eea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eea2:	3334      	adds	r3, #52	; 0x34
 800eea4:	332c      	adds	r3, #44	; 0x2c
 800eea6:	4618      	mov	r0, r3
 800eea8:	f7fd ff9e 	bl	800cde8 <ld_dword>
 800eeac:	4602      	mov	r2, r0
 800eeae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeb0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800eeb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeb4:	699b      	ldr	r3, [r3, #24]
 800eeb6:	009b      	lsls	r3, r3, #2
 800eeb8:	647b      	str	r3, [r7, #68]	; 0x44
 800eeba:	e01f      	b.n	800eefc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800eebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eebe:	891b      	ldrh	r3, [r3, #8]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d101      	bne.n	800eec8 <find_volume+0x364>
 800eec4:	230d      	movs	r3, #13
 800eec6:	e091      	b.n	800efec <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800eec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eece:	441a      	add	r2, r3
 800eed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eed2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800eed4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eed8:	2b02      	cmp	r3, #2
 800eeda:	d103      	bne.n	800eee4 <find_volume+0x380>
 800eedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eede:	699b      	ldr	r3, [r3, #24]
 800eee0:	005b      	lsls	r3, r3, #1
 800eee2:	e00a      	b.n	800eefa <find_volume+0x396>
 800eee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eee6:	699a      	ldr	r2, [r3, #24]
 800eee8:	4613      	mov	r3, r2
 800eeea:	005b      	lsls	r3, r3, #1
 800eeec:	4413      	add	r3, r2
 800eeee:	085a      	lsrs	r2, r3, #1
 800eef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eef2:	699b      	ldr	r3, [r3, #24]
 800eef4:	f003 0301 	and.w	r3, r3, #1
 800eef8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800eefa:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800eefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eefe:	69da      	ldr	r2, [r3, #28]
 800ef00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef02:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ef06:	0a5b      	lsrs	r3, r3, #9
 800ef08:	429a      	cmp	r2, r3
 800ef0a:	d201      	bcs.n	800ef10 <find_volume+0x3ac>
 800ef0c:	230d      	movs	r3, #13
 800ef0e:	e06d      	b.n	800efec <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ef10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ef16:	615a      	str	r2, [r3, #20]
 800ef18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef1a:	695a      	ldr	r2, [r3, #20]
 800ef1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef1e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800ef20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef22:	2280      	movs	r2, #128	; 0x80
 800ef24:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ef26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ef2a:	2b03      	cmp	r3, #3
 800ef2c:	d149      	bne.n	800efc2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ef2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef30:	3334      	adds	r3, #52	; 0x34
 800ef32:	3330      	adds	r3, #48	; 0x30
 800ef34:	4618      	mov	r0, r3
 800ef36:	f7fd ff3f 	bl	800cdb8 <ld_word>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	2b01      	cmp	r3, #1
 800ef3e:	d140      	bne.n	800efc2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ef40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef42:	3301      	adds	r3, #1
 800ef44:	4619      	mov	r1, r3
 800ef46:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ef48:	f7fe f9e6 	bl	800d318 <move_window>
 800ef4c:	4603      	mov	r3, r0
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d137      	bne.n	800efc2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800ef52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef54:	2200      	movs	r2, #0
 800ef56:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ef58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef5a:	3334      	adds	r3, #52	; 0x34
 800ef5c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ef60:	4618      	mov	r0, r3
 800ef62:	f7fd ff29 	bl	800cdb8 <ld_word>
 800ef66:	4603      	mov	r3, r0
 800ef68:	461a      	mov	r2, r3
 800ef6a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ef6e:	429a      	cmp	r2, r3
 800ef70:	d127      	bne.n	800efc2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ef72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef74:	3334      	adds	r3, #52	; 0x34
 800ef76:	4618      	mov	r0, r3
 800ef78:	f7fd ff36 	bl	800cde8 <ld_dword>
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	4a1d      	ldr	r2, [pc, #116]	; (800eff4 <find_volume+0x490>)
 800ef80:	4293      	cmp	r3, r2
 800ef82:	d11e      	bne.n	800efc2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ef84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef86:	3334      	adds	r3, #52	; 0x34
 800ef88:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	f7fd ff2b 	bl	800cde8 <ld_dword>
 800ef92:	4603      	mov	r3, r0
 800ef94:	4a18      	ldr	r2, [pc, #96]	; (800eff8 <find_volume+0x494>)
 800ef96:	4293      	cmp	r3, r2
 800ef98:	d113      	bne.n	800efc2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ef9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef9c:	3334      	adds	r3, #52	; 0x34
 800ef9e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800efa2:	4618      	mov	r0, r3
 800efa4:	f7fd ff20 	bl	800cde8 <ld_dword>
 800efa8:	4602      	mov	r2, r0
 800efaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efac:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800efae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efb0:	3334      	adds	r3, #52	; 0x34
 800efb2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800efb6:	4618      	mov	r0, r3
 800efb8:	f7fd ff16 	bl	800cde8 <ld_dword>
 800efbc:	4602      	mov	r2, r0
 800efbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efc0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800efc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efc4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800efc8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800efca:	4b0c      	ldr	r3, [pc, #48]	; (800effc <find_volume+0x498>)
 800efcc:	881b      	ldrh	r3, [r3, #0]
 800efce:	3301      	adds	r3, #1
 800efd0:	b29a      	uxth	r2, r3
 800efd2:	4b0a      	ldr	r3, [pc, #40]	; (800effc <find_volume+0x498>)
 800efd4:	801a      	strh	r2, [r3, #0]
 800efd6:	4b09      	ldr	r3, [pc, #36]	; (800effc <find_volume+0x498>)
 800efd8:	881a      	ldrh	r2, [r3, #0]
 800efda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efdc:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800efde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efe0:	4a07      	ldr	r2, [pc, #28]	; (800f000 <find_volume+0x49c>)
 800efe2:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800efe4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800efe6:	f7fe f92f 	bl	800d248 <clear_lock>
#endif
	return FR_OK;
 800efea:	2300      	movs	r3, #0
}
 800efec:	4618      	mov	r0, r3
 800efee:	3758      	adds	r7, #88	; 0x58
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd80      	pop	{r7, pc}
 800eff4:	41615252 	.word	0x41615252
 800eff8:	61417272 	.word	0x61417272
 800effc:	20001608 	.word	0x20001608
 800f000:	2000162c 	.word	0x2000162c

0800f004 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b084      	sub	sp, #16
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
 800f00c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f00e:	2309      	movs	r3, #9
 800f010:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d01c      	beq.n	800f052 <validate+0x4e>
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d018      	beq.n	800f052 <validate+0x4e>
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	781b      	ldrb	r3, [r3, #0]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d013      	beq.n	800f052 <validate+0x4e>
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	889a      	ldrh	r2, [r3, #4]
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	88db      	ldrh	r3, [r3, #6]
 800f034:	429a      	cmp	r2, r3
 800f036:	d10c      	bne.n	800f052 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	785b      	ldrb	r3, [r3, #1]
 800f03e:	4618      	mov	r0, r3
 800f040:	f7fd fe1c 	bl	800cc7c <disk_status>
 800f044:	4603      	mov	r3, r0
 800f046:	f003 0301 	and.w	r3, r3, #1
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d101      	bne.n	800f052 <validate+0x4e>
			res = FR_OK;
 800f04e:	2300      	movs	r3, #0
 800f050:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f052:	7bfb      	ldrb	r3, [r7, #15]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d102      	bne.n	800f05e <validate+0x5a>
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	e000      	b.n	800f060 <validate+0x5c>
 800f05e:	2300      	movs	r3, #0
 800f060:	683a      	ldr	r2, [r7, #0]
 800f062:	6013      	str	r3, [r2, #0]
	return res;
 800f064:	7bfb      	ldrb	r3, [r7, #15]
}
 800f066:	4618      	mov	r0, r3
 800f068:	3710      	adds	r7, #16
 800f06a:	46bd      	mov	sp, r7
 800f06c:	bd80      	pop	{r7, pc}
	...

0800f070 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b088      	sub	sp, #32
 800f074:	af00      	add	r7, sp, #0
 800f076:	60f8      	str	r0, [r7, #12]
 800f078:	60b9      	str	r1, [r7, #8]
 800f07a:	4613      	mov	r3, r2
 800f07c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f07e:	68bb      	ldr	r3, [r7, #8]
 800f080:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f082:	f107 0310 	add.w	r3, r7, #16
 800f086:	4618      	mov	r0, r3
 800f088:	f7ff fcd1 	bl	800ea2e <get_ldnumber>
 800f08c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f08e:	69fb      	ldr	r3, [r7, #28]
 800f090:	2b00      	cmp	r3, #0
 800f092:	da01      	bge.n	800f098 <f_mount+0x28>
 800f094:	230b      	movs	r3, #11
 800f096:	e02b      	b.n	800f0f0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f098:	4a17      	ldr	r2, [pc, #92]	; (800f0f8 <f_mount+0x88>)
 800f09a:	69fb      	ldr	r3, [r7, #28]
 800f09c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f0a0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f0a2:	69bb      	ldr	r3, [r7, #24]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d005      	beq.n	800f0b4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f0a8:	69b8      	ldr	r0, [r7, #24]
 800f0aa:	f7fe f8cd 	bl	800d248 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f0ae:	69bb      	ldr	r3, [r7, #24]
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d002      	beq.n	800f0c0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	2200      	movs	r2, #0
 800f0be:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f0c0:	68fa      	ldr	r2, [r7, #12]
 800f0c2:	490d      	ldr	r1, [pc, #52]	; (800f0f8 <f_mount+0x88>)
 800f0c4:	69fb      	ldr	r3, [r7, #28]
 800f0c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d002      	beq.n	800f0d6 <f_mount+0x66>
 800f0d0:	79fb      	ldrb	r3, [r7, #7]
 800f0d2:	2b01      	cmp	r3, #1
 800f0d4:	d001      	beq.n	800f0da <f_mount+0x6a>
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	e00a      	b.n	800f0f0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f0da:	f107 010c 	add.w	r1, r7, #12
 800f0de:	f107 0308 	add.w	r3, r7, #8
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	f7ff fd3d 	bl	800eb64 <find_volume>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f0ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	3720      	adds	r7, #32
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	bd80      	pop	{r7, pc}
 800f0f8:	20001604 	.word	0x20001604

0800f0fc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b09a      	sub	sp, #104	; 0x68
 800f100:	af00      	add	r7, sp, #0
 800f102:	60f8      	str	r0, [r7, #12]
 800f104:	60b9      	str	r1, [r7, #8]
 800f106:	4613      	mov	r3, r2
 800f108:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d101      	bne.n	800f114 <f_open+0x18>
 800f110:	2309      	movs	r3, #9
 800f112:	e1ad      	b.n	800f470 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f114:	79fb      	ldrb	r3, [r7, #7]
 800f116:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f11a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f11c:	79fa      	ldrb	r2, [r7, #7]
 800f11e:	f107 0114 	add.w	r1, r7, #20
 800f122:	f107 0308 	add.w	r3, r7, #8
 800f126:	4618      	mov	r0, r3
 800f128:	f7ff fd1c 	bl	800eb64 <find_volume>
 800f12c:	4603      	mov	r3, r0
 800f12e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800f132:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f136:	2b00      	cmp	r3, #0
 800f138:	f040 8191 	bne.w	800f45e <f_open+0x362>
		dj.obj.fs = fs;
 800f13c:	697b      	ldr	r3, [r7, #20]
 800f13e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f140:	68ba      	ldr	r2, [r7, #8]
 800f142:	f107 0318 	add.w	r3, r7, #24
 800f146:	4611      	mov	r1, r2
 800f148:	4618      	mov	r0, r3
 800f14a:	f7ff fbff 	bl	800e94c <follow_path>
 800f14e:	4603      	mov	r3, r0
 800f150:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f154:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d11a      	bne.n	800f192 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f15c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f160:	b25b      	sxtb	r3, r3
 800f162:	2b00      	cmp	r3, #0
 800f164:	da03      	bge.n	800f16e <f_open+0x72>
				res = FR_INVALID_NAME;
 800f166:	2306      	movs	r3, #6
 800f168:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f16c:	e011      	b.n	800f192 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f16e:	79fb      	ldrb	r3, [r7, #7]
 800f170:	f023 0301 	bic.w	r3, r3, #1
 800f174:	2b00      	cmp	r3, #0
 800f176:	bf14      	ite	ne
 800f178:	2301      	movne	r3, #1
 800f17a:	2300      	moveq	r3, #0
 800f17c:	b2db      	uxtb	r3, r3
 800f17e:	461a      	mov	r2, r3
 800f180:	f107 0318 	add.w	r3, r7, #24
 800f184:	4611      	mov	r1, r2
 800f186:	4618      	mov	r0, r3
 800f188:	f7fd ff16 	bl	800cfb8 <chk_lock>
 800f18c:	4603      	mov	r3, r0
 800f18e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f192:	79fb      	ldrb	r3, [r7, #7]
 800f194:	f003 031c 	and.w	r3, r3, #28
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d07f      	beq.n	800f29c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800f19c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d017      	beq.n	800f1d4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f1a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f1a8:	2b04      	cmp	r3, #4
 800f1aa:	d10e      	bne.n	800f1ca <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f1ac:	f7fd ff60 	bl	800d070 <enq_lock>
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d006      	beq.n	800f1c4 <f_open+0xc8>
 800f1b6:	f107 0318 	add.w	r3, r7, #24
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f7ff f838 	bl	800e230 <dir_register>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	e000      	b.n	800f1c6 <f_open+0xca>
 800f1c4:	2312      	movs	r3, #18
 800f1c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f1ca:	79fb      	ldrb	r3, [r7, #7]
 800f1cc:	f043 0308 	orr.w	r3, r3, #8
 800f1d0:	71fb      	strb	r3, [r7, #7]
 800f1d2:	e010      	b.n	800f1f6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f1d4:	7fbb      	ldrb	r3, [r7, #30]
 800f1d6:	f003 0311 	and.w	r3, r3, #17
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d003      	beq.n	800f1e6 <f_open+0xea>
					res = FR_DENIED;
 800f1de:	2307      	movs	r3, #7
 800f1e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f1e4:	e007      	b.n	800f1f6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f1e6:	79fb      	ldrb	r3, [r7, #7]
 800f1e8:	f003 0304 	and.w	r3, r3, #4
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d002      	beq.n	800f1f6 <f_open+0xfa>
 800f1f0:	2308      	movs	r3, #8
 800f1f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f1f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d168      	bne.n	800f2d0 <f_open+0x1d4>
 800f1fe:	79fb      	ldrb	r3, [r7, #7]
 800f200:	f003 0308 	and.w	r3, r3, #8
 800f204:	2b00      	cmp	r3, #0
 800f206:	d063      	beq.n	800f2d0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800f208:	f7fb fb0a 	bl	800a820 <get_fattime>
 800f20c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f210:	330e      	adds	r3, #14
 800f212:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f214:	4618      	mov	r0, r3
 800f216:	f7fd fe25 	bl	800ce64 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f21c:	3316      	adds	r3, #22
 800f21e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f220:	4618      	mov	r0, r3
 800f222:	f7fd fe1f 	bl	800ce64 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f228:	330b      	adds	r3, #11
 800f22a:	2220      	movs	r2, #32
 800f22c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f22e:	697b      	ldr	r3, [r7, #20]
 800f230:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f232:	4611      	mov	r1, r2
 800f234:	4618      	mov	r0, r3
 800f236:	f7fe fd74 	bl	800dd22 <ld_clust>
 800f23a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f23c:	697b      	ldr	r3, [r7, #20]
 800f23e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f240:	2200      	movs	r2, #0
 800f242:	4618      	mov	r0, r3
 800f244:	f7fe fd8c 	bl	800dd60 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f24a:	331c      	adds	r3, #28
 800f24c:	2100      	movs	r1, #0
 800f24e:	4618      	mov	r0, r3
 800f250:	f7fd fe08 	bl	800ce64 <st_dword>
					fs->wflag = 1;
 800f254:	697b      	ldr	r3, [r7, #20]
 800f256:	2201      	movs	r2, #1
 800f258:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f25a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d037      	beq.n	800f2d0 <f_open+0x1d4>
						dw = fs->winsect;
 800f260:	697b      	ldr	r3, [r7, #20]
 800f262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f264:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800f266:	f107 0318 	add.w	r3, r7, #24
 800f26a:	2200      	movs	r2, #0
 800f26c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f26e:	4618      	mov	r0, r3
 800f270:	f7fe fa9f 	bl	800d7b2 <remove_chain>
 800f274:	4603      	mov	r3, r0
 800f276:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800f27a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d126      	bne.n	800f2d0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800f282:	697b      	ldr	r3, [r7, #20]
 800f284:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f286:	4618      	mov	r0, r3
 800f288:	f7fe f846 	bl	800d318 <move_window>
 800f28c:	4603      	mov	r3, r0
 800f28e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f292:	697b      	ldr	r3, [r7, #20]
 800f294:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f296:	3a01      	subs	r2, #1
 800f298:	611a      	str	r2, [r3, #16]
 800f29a:	e019      	b.n	800f2d0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f29c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d115      	bne.n	800f2d0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f2a4:	7fbb      	ldrb	r3, [r7, #30]
 800f2a6:	f003 0310 	and.w	r3, r3, #16
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d003      	beq.n	800f2b6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800f2ae:	2304      	movs	r3, #4
 800f2b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f2b4:	e00c      	b.n	800f2d0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f2b6:	79fb      	ldrb	r3, [r7, #7]
 800f2b8:	f003 0302 	and.w	r3, r3, #2
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d007      	beq.n	800f2d0 <f_open+0x1d4>
 800f2c0:	7fbb      	ldrb	r3, [r7, #30]
 800f2c2:	f003 0301 	and.w	r3, r3, #1
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d002      	beq.n	800f2d0 <f_open+0x1d4>
						res = FR_DENIED;
 800f2ca:	2307      	movs	r3, #7
 800f2cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800f2d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d128      	bne.n	800f32a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f2d8:	79fb      	ldrb	r3, [r7, #7]
 800f2da:	f003 0308 	and.w	r3, r3, #8
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d003      	beq.n	800f2ea <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800f2e2:	79fb      	ldrb	r3, [r7, #7]
 800f2e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2e8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f2ea:	697b      	ldr	r3, [r7, #20]
 800f2ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f2f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f2f8:	79fb      	ldrb	r3, [r7, #7]
 800f2fa:	f023 0301 	bic.w	r3, r3, #1
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	bf14      	ite	ne
 800f302:	2301      	movne	r3, #1
 800f304:	2300      	moveq	r3, #0
 800f306:	b2db      	uxtb	r3, r3
 800f308:	461a      	mov	r2, r3
 800f30a:	f107 0318 	add.w	r3, r7, #24
 800f30e:	4611      	mov	r1, r2
 800f310:	4618      	mov	r0, r3
 800f312:	f7fd fecf 	bl	800d0b4 <inc_lock>
 800f316:	4602      	mov	r2, r0
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	691b      	ldr	r3, [r3, #16]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d102      	bne.n	800f32a <f_open+0x22e>
 800f324:	2302      	movs	r3, #2
 800f326:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f32a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f32e:	2b00      	cmp	r3, #0
 800f330:	f040 8095 	bne.w	800f45e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f334:	697b      	ldr	r3, [r7, #20]
 800f336:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f338:	4611      	mov	r1, r2
 800f33a:	4618      	mov	r0, r3
 800f33c:	f7fe fcf1 	bl	800dd22 <ld_clust>
 800f340:	4602      	mov	r2, r0
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f348:	331c      	adds	r3, #28
 800f34a:	4618      	mov	r0, r3
 800f34c:	f7fd fd4c 	bl	800cde8 <ld_dword>
 800f350:	4602      	mov	r2, r0
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	2200      	movs	r2, #0
 800f35a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f35c:	697a      	ldr	r2, [r7, #20]
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f362:	697b      	ldr	r3, [r7, #20]
 800f364:	88da      	ldrh	r2, [r3, #6]
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	79fa      	ldrb	r2, [r7, #7]
 800f36e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	2200      	movs	r2, #0
 800f374:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	2200      	movs	r2, #0
 800f37a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	2200      	movs	r2, #0
 800f380:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	3330      	adds	r3, #48	; 0x30
 800f386:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f38a:	2100      	movs	r1, #0
 800f38c:	4618      	mov	r0, r3
 800f38e:	f7fd fdb6 	bl	800cefe <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f392:	79fb      	ldrb	r3, [r7, #7]
 800f394:	f003 0320 	and.w	r3, r3, #32
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d060      	beq.n	800f45e <f_open+0x362>
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	68db      	ldr	r3, [r3, #12]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d05c      	beq.n	800f45e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	68da      	ldr	r2, [r3, #12]
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f3ac:	697b      	ldr	r3, [r7, #20]
 800f3ae:	895b      	ldrh	r3, [r3, #10]
 800f3b0:	025b      	lsls	r3, r3, #9
 800f3b2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	689b      	ldr	r3, [r3, #8]
 800f3b8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	68db      	ldr	r3, [r3, #12]
 800f3be:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f3c0:	e016      	b.n	800f3f0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	f7fe f861 	bl	800d48e <get_fat>
 800f3cc:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800f3ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f3d0:	2b01      	cmp	r3, #1
 800f3d2:	d802      	bhi.n	800f3da <f_open+0x2de>
 800f3d4:	2302      	movs	r3, #2
 800f3d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f3da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f3dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f3e0:	d102      	bne.n	800f3e8 <f_open+0x2ec>
 800f3e2:	2301      	movs	r3, #1
 800f3e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f3e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f3ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3ec:	1ad3      	subs	r3, r2, r3
 800f3ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f3f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d103      	bne.n	800f400 <f_open+0x304>
 800f3f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f3fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3fc:	429a      	cmp	r2, r3
 800f3fe:	d8e0      	bhi.n	800f3c2 <f_open+0x2c6>
				}
				fp->clust = clst;
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f404:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f406:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d127      	bne.n	800f45e <f_open+0x362>
 800f40e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f414:	2b00      	cmp	r3, #0
 800f416:	d022      	beq.n	800f45e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f41c:	4618      	mov	r0, r3
 800f41e:	f7fe f817 	bl	800d450 <clust2sect>
 800f422:	64f8      	str	r0, [r7, #76]	; 0x4c
 800f424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f426:	2b00      	cmp	r3, #0
 800f428:	d103      	bne.n	800f432 <f_open+0x336>
						res = FR_INT_ERR;
 800f42a:	2302      	movs	r3, #2
 800f42c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f430:	e015      	b.n	800f45e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f432:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f434:	0a5a      	lsrs	r2, r3, #9
 800f436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f438:	441a      	add	r2, r3
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f43e:	697b      	ldr	r3, [r7, #20]
 800f440:	7858      	ldrb	r0, [r3, #1]
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	6a1a      	ldr	r2, [r3, #32]
 800f44c:	2301      	movs	r3, #1
 800f44e:	f7fd fc55 	bl	800ccfc <disk_read>
 800f452:	4603      	mov	r3, r0
 800f454:	2b00      	cmp	r3, #0
 800f456:	d002      	beq.n	800f45e <f_open+0x362>
 800f458:	2301      	movs	r3, #1
 800f45a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f45e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f462:	2b00      	cmp	r3, #0
 800f464:	d002      	beq.n	800f46c <f_open+0x370>
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	2200      	movs	r2, #0
 800f46a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f46c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800f470:	4618      	mov	r0, r3
 800f472:	3768      	adds	r7, #104	; 0x68
 800f474:	46bd      	mov	sp, r7
 800f476:	bd80      	pop	{r7, pc}

0800f478 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b08c      	sub	sp, #48	; 0x30
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	60f8      	str	r0, [r7, #12]
 800f480:	60b9      	str	r1, [r7, #8]
 800f482:	607a      	str	r2, [r7, #4]
 800f484:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f486:	68bb      	ldr	r3, [r7, #8]
 800f488:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f48a:	683b      	ldr	r3, [r7, #0]
 800f48c:	2200      	movs	r2, #0
 800f48e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	f107 0210 	add.w	r2, r7, #16
 800f496:	4611      	mov	r1, r2
 800f498:	4618      	mov	r0, r3
 800f49a:	f7ff fdb3 	bl	800f004 <validate>
 800f49e:	4603      	mov	r3, r0
 800f4a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f4a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d107      	bne.n	800f4bc <f_write+0x44>
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	7d5b      	ldrb	r3, [r3, #21]
 800f4b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f4b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d002      	beq.n	800f4c2 <f_write+0x4a>
 800f4bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f4c0:	e14b      	b.n	800f75a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	7d1b      	ldrb	r3, [r3, #20]
 800f4c6:	f003 0302 	and.w	r3, r3, #2
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d101      	bne.n	800f4d2 <f_write+0x5a>
 800f4ce:	2307      	movs	r3, #7
 800f4d0:	e143      	b.n	800f75a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	699a      	ldr	r2, [r3, #24]
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	441a      	add	r2, r3
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	699b      	ldr	r3, [r3, #24]
 800f4de:	429a      	cmp	r2, r3
 800f4e0:	f080 812d 	bcs.w	800f73e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	699b      	ldr	r3, [r3, #24]
 800f4e8:	43db      	mvns	r3, r3
 800f4ea:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f4ec:	e127      	b.n	800f73e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	699b      	ldr	r3, [r3, #24]
 800f4f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	f040 80e3 	bne.w	800f6c2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	699b      	ldr	r3, [r3, #24]
 800f500:	0a5b      	lsrs	r3, r3, #9
 800f502:	693a      	ldr	r2, [r7, #16]
 800f504:	8952      	ldrh	r2, [r2, #10]
 800f506:	3a01      	subs	r2, #1
 800f508:	4013      	ands	r3, r2
 800f50a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f50c:	69bb      	ldr	r3, [r7, #24]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d143      	bne.n	800f59a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	699b      	ldr	r3, [r3, #24]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d10c      	bne.n	800f534 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	689b      	ldr	r3, [r3, #8]
 800f51e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f522:	2b00      	cmp	r3, #0
 800f524:	d11a      	bne.n	800f55c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	2100      	movs	r1, #0
 800f52a:	4618      	mov	r0, r3
 800f52c:	f7fe f9a6 	bl	800d87c <create_chain>
 800f530:	62b8      	str	r0, [r7, #40]	; 0x28
 800f532:	e013      	b.n	800f55c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d007      	beq.n	800f54c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	699b      	ldr	r3, [r3, #24]
 800f540:	4619      	mov	r1, r3
 800f542:	68f8      	ldr	r0, [r7, #12]
 800f544:	f7fe fa32 	bl	800d9ac <clmt_clust>
 800f548:	62b8      	str	r0, [r7, #40]	; 0x28
 800f54a:	e007      	b.n	800f55c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f54c:	68fa      	ldr	r2, [r7, #12]
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	69db      	ldr	r3, [r3, #28]
 800f552:	4619      	mov	r1, r3
 800f554:	4610      	mov	r0, r2
 800f556:	f7fe f991 	bl	800d87c <create_chain>
 800f55a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f55e:	2b00      	cmp	r3, #0
 800f560:	f000 80f2 	beq.w	800f748 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f566:	2b01      	cmp	r3, #1
 800f568:	d104      	bne.n	800f574 <f_write+0xfc>
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	2202      	movs	r2, #2
 800f56e:	755a      	strb	r2, [r3, #21]
 800f570:	2302      	movs	r3, #2
 800f572:	e0f2      	b.n	800f75a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f576:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f57a:	d104      	bne.n	800f586 <f_write+0x10e>
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	2201      	movs	r2, #1
 800f580:	755a      	strb	r2, [r3, #21]
 800f582:	2301      	movs	r3, #1
 800f584:	e0e9      	b.n	800f75a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f58a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	689b      	ldr	r3, [r3, #8]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d102      	bne.n	800f59a <f_write+0x122>
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f598:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	7d1b      	ldrb	r3, [r3, #20]
 800f59e:	b25b      	sxtb	r3, r3
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	da18      	bge.n	800f5d6 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f5a4:	693b      	ldr	r3, [r7, #16]
 800f5a6:	7858      	ldrb	r0, [r3, #1]
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	6a1a      	ldr	r2, [r3, #32]
 800f5b2:	2301      	movs	r3, #1
 800f5b4:	f7fd fbc2 	bl	800cd3c <disk_write>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d004      	beq.n	800f5c8 <f_write+0x150>
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	2201      	movs	r2, #1
 800f5c2:	755a      	strb	r2, [r3, #21]
 800f5c4:	2301      	movs	r3, #1
 800f5c6:	e0c8      	b.n	800f75a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	7d1b      	ldrb	r3, [r3, #20]
 800f5cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f5d0:	b2da      	uxtb	r2, r3
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f5d6:	693a      	ldr	r2, [r7, #16]
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	69db      	ldr	r3, [r3, #28]
 800f5dc:	4619      	mov	r1, r3
 800f5de:	4610      	mov	r0, r2
 800f5e0:	f7fd ff36 	bl	800d450 <clust2sect>
 800f5e4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f5e6:	697b      	ldr	r3, [r7, #20]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d104      	bne.n	800f5f6 <f_write+0x17e>
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	2202      	movs	r2, #2
 800f5f0:	755a      	strb	r2, [r3, #21]
 800f5f2:	2302      	movs	r3, #2
 800f5f4:	e0b1      	b.n	800f75a <f_write+0x2e2>
			sect += csect;
 800f5f6:	697a      	ldr	r2, [r7, #20]
 800f5f8:	69bb      	ldr	r3, [r7, #24]
 800f5fa:	4413      	add	r3, r2
 800f5fc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	0a5b      	lsrs	r3, r3, #9
 800f602:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f604:	6a3b      	ldr	r3, [r7, #32]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d03c      	beq.n	800f684 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f60a:	69ba      	ldr	r2, [r7, #24]
 800f60c:	6a3b      	ldr	r3, [r7, #32]
 800f60e:	4413      	add	r3, r2
 800f610:	693a      	ldr	r2, [r7, #16]
 800f612:	8952      	ldrh	r2, [r2, #10]
 800f614:	4293      	cmp	r3, r2
 800f616:	d905      	bls.n	800f624 <f_write+0x1ac>
					cc = fs->csize - csect;
 800f618:	693b      	ldr	r3, [r7, #16]
 800f61a:	895b      	ldrh	r3, [r3, #10]
 800f61c:	461a      	mov	r2, r3
 800f61e:	69bb      	ldr	r3, [r7, #24]
 800f620:	1ad3      	subs	r3, r2, r3
 800f622:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f624:	693b      	ldr	r3, [r7, #16]
 800f626:	7858      	ldrb	r0, [r3, #1]
 800f628:	6a3b      	ldr	r3, [r7, #32]
 800f62a:	697a      	ldr	r2, [r7, #20]
 800f62c:	69f9      	ldr	r1, [r7, #28]
 800f62e:	f7fd fb85 	bl	800cd3c <disk_write>
 800f632:	4603      	mov	r3, r0
 800f634:	2b00      	cmp	r3, #0
 800f636:	d004      	beq.n	800f642 <f_write+0x1ca>
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	2201      	movs	r2, #1
 800f63c:	755a      	strb	r2, [r3, #21]
 800f63e:	2301      	movs	r3, #1
 800f640:	e08b      	b.n	800f75a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	6a1a      	ldr	r2, [r3, #32]
 800f646:	697b      	ldr	r3, [r7, #20]
 800f648:	1ad3      	subs	r3, r2, r3
 800f64a:	6a3a      	ldr	r2, [r7, #32]
 800f64c:	429a      	cmp	r2, r3
 800f64e:	d915      	bls.n	800f67c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	6a1a      	ldr	r2, [r3, #32]
 800f65a:	697b      	ldr	r3, [r7, #20]
 800f65c:	1ad3      	subs	r3, r2, r3
 800f65e:	025b      	lsls	r3, r3, #9
 800f660:	69fa      	ldr	r2, [r7, #28]
 800f662:	4413      	add	r3, r2
 800f664:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f668:	4619      	mov	r1, r3
 800f66a:	f7fd fc27 	bl	800cebc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	7d1b      	ldrb	r3, [r3, #20]
 800f672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f676:	b2da      	uxtb	r2, r3
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f67c:	6a3b      	ldr	r3, [r7, #32]
 800f67e:	025b      	lsls	r3, r3, #9
 800f680:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f682:	e03f      	b.n	800f704 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	6a1b      	ldr	r3, [r3, #32]
 800f688:	697a      	ldr	r2, [r7, #20]
 800f68a:	429a      	cmp	r2, r3
 800f68c:	d016      	beq.n	800f6bc <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	699a      	ldr	r2, [r3, #24]
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f696:	429a      	cmp	r2, r3
 800f698:	d210      	bcs.n	800f6bc <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f69a:	693b      	ldr	r3, [r7, #16]
 800f69c:	7858      	ldrb	r0, [r3, #1]
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f6a4:	2301      	movs	r3, #1
 800f6a6:	697a      	ldr	r2, [r7, #20]
 800f6a8:	f7fd fb28 	bl	800ccfc <disk_read>
 800f6ac:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d004      	beq.n	800f6bc <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	2201      	movs	r2, #1
 800f6b6:	755a      	strb	r2, [r3, #21]
 800f6b8:	2301      	movs	r3, #1
 800f6ba:	e04e      	b.n	800f75a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	697a      	ldr	r2, [r7, #20]
 800f6c0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	699b      	ldr	r3, [r3, #24]
 800f6c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6ca:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f6ce:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f6d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	429a      	cmp	r2, r3
 800f6d6:	d901      	bls.n	800f6dc <f_write+0x264>
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	699b      	ldr	r3, [r3, #24]
 800f6e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6ea:	4413      	add	r3, r2
 800f6ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6ee:	69f9      	ldr	r1, [r7, #28]
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	f7fd fbe3 	bl	800cebc <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	7d1b      	ldrb	r3, [r3, #20]
 800f6fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f6fe:	b2da      	uxtb	r2, r3
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f704:	69fa      	ldr	r2, [r7, #28]
 800f706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f708:	4413      	add	r3, r2
 800f70a:	61fb      	str	r3, [r7, #28]
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	699a      	ldr	r2, [r3, #24]
 800f710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f712:	441a      	add	r2, r3
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	619a      	str	r2, [r3, #24]
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	68da      	ldr	r2, [r3, #12]
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	699b      	ldr	r3, [r3, #24]
 800f720:	429a      	cmp	r2, r3
 800f722:	bf38      	it	cc
 800f724:	461a      	movcc	r2, r3
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	60da      	str	r2, [r3, #12]
 800f72a:	683b      	ldr	r3, [r7, #0]
 800f72c:	681a      	ldr	r2, [r3, #0]
 800f72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f730:	441a      	add	r2, r3
 800f732:	683b      	ldr	r3, [r7, #0]
 800f734:	601a      	str	r2, [r3, #0]
 800f736:	687a      	ldr	r2, [r7, #4]
 800f738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f73a:	1ad3      	subs	r3, r2, r3
 800f73c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	2b00      	cmp	r3, #0
 800f742:	f47f aed4 	bne.w	800f4ee <f_write+0x76>
 800f746:	e000      	b.n	800f74a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f748:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	7d1b      	ldrb	r3, [r3, #20]
 800f74e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f752:	b2da      	uxtb	r2, r3
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f758:	2300      	movs	r3, #0
}
 800f75a:	4618      	mov	r0, r3
 800f75c:	3730      	adds	r7, #48	; 0x30
 800f75e:	46bd      	mov	sp, r7
 800f760:	bd80      	pop	{r7, pc}

0800f762 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f762:	b580      	push	{r7, lr}
 800f764:	b086      	sub	sp, #24
 800f766:	af00      	add	r7, sp, #0
 800f768:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	f107 0208 	add.w	r2, r7, #8
 800f770:	4611      	mov	r1, r2
 800f772:	4618      	mov	r0, r3
 800f774:	f7ff fc46 	bl	800f004 <validate>
 800f778:	4603      	mov	r3, r0
 800f77a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f77c:	7dfb      	ldrb	r3, [r7, #23]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d168      	bne.n	800f854 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	7d1b      	ldrb	r3, [r3, #20]
 800f786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d062      	beq.n	800f854 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	7d1b      	ldrb	r3, [r3, #20]
 800f792:	b25b      	sxtb	r3, r3
 800f794:	2b00      	cmp	r3, #0
 800f796:	da15      	bge.n	800f7c4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f798:	68bb      	ldr	r3, [r7, #8]
 800f79a:	7858      	ldrb	r0, [r3, #1]
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	6a1a      	ldr	r2, [r3, #32]
 800f7a6:	2301      	movs	r3, #1
 800f7a8:	f7fd fac8 	bl	800cd3c <disk_write>
 800f7ac:	4603      	mov	r3, r0
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d001      	beq.n	800f7b6 <f_sync+0x54>
 800f7b2:	2301      	movs	r3, #1
 800f7b4:	e04f      	b.n	800f856 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	7d1b      	ldrb	r3, [r3, #20]
 800f7ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f7be:	b2da      	uxtb	r2, r3
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f7c4:	f7fb f82c 	bl	800a820 <get_fattime>
 800f7c8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f7ca:	68ba      	ldr	r2, [r7, #8]
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7d0:	4619      	mov	r1, r3
 800f7d2:	4610      	mov	r0, r2
 800f7d4:	f7fd fda0 	bl	800d318 <move_window>
 800f7d8:	4603      	mov	r3, r0
 800f7da:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f7dc:	7dfb      	ldrb	r3, [r7, #23]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d138      	bne.n	800f854 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7e6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	330b      	adds	r3, #11
 800f7ec:	781a      	ldrb	r2, [r3, #0]
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	330b      	adds	r3, #11
 800f7f2:	f042 0220 	orr.w	r2, r2, #32
 800f7f6:	b2d2      	uxtb	r2, r2
 800f7f8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	6818      	ldr	r0, [r3, #0]
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	689b      	ldr	r3, [r3, #8]
 800f802:	461a      	mov	r2, r3
 800f804:	68f9      	ldr	r1, [r7, #12]
 800f806:	f7fe faab 	bl	800dd60 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	f103 021c 	add.w	r2, r3, #28
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	68db      	ldr	r3, [r3, #12]
 800f814:	4619      	mov	r1, r3
 800f816:	4610      	mov	r0, r2
 800f818:	f7fd fb24 	bl	800ce64 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	3316      	adds	r3, #22
 800f820:	6939      	ldr	r1, [r7, #16]
 800f822:	4618      	mov	r0, r3
 800f824:	f7fd fb1e 	bl	800ce64 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	3312      	adds	r3, #18
 800f82c:	2100      	movs	r1, #0
 800f82e:	4618      	mov	r0, r3
 800f830:	f7fd fafd 	bl	800ce2e <st_word>
					fs->wflag = 1;
 800f834:	68bb      	ldr	r3, [r7, #8]
 800f836:	2201      	movs	r2, #1
 800f838:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f83a:	68bb      	ldr	r3, [r7, #8]
 800f83c:	4618      	mov	r0, r3
 800f83e:	f7fd fd99 	bl	800d374 <sync_fs>
 800f842:	4603      	mov	r3, r0
 800f844:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	7d1b      	ldrb	r3, [r3, #20]
 800f84a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f84e:	b2da      	uxtb	r2, r3
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f854:	7dfb      	ldrb	r3, [r7, #23]
}
 800f856:	4618      	mov	r0, r3
 800f858:	3718      	adds	r7, #24
 800f85a:	46bd      	mov	sp, r7
 800f85c:	bd80      	pop	{r7, pc}

0800f85e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f85e:	b580      	push	{r7, lr}
 800f860:	b084      	sub	sp, #16
 800f862:	af00      	add	r7, sp, #0
 800f864:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f866:	6878      	ldr	r0, [r7, #4]
 800f868:	f7ff ff7b 	bl	800f762 <f_sync>
 800f86c:	4603      	mov	r3, r0
 800f86e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f870:	7bfb      	ldrb	r3, [r7, #15]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d118      	bne.n	800f8a8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	f107 0208 	add.w	r2, r7, #8
 800f87c:	4611      	mov	r1, r2
 800f87e:	4618      	mov	r0, r3
 800f880:	f7ff fbc0 	bl	800f004 <validate>
 800f884:	4603      	mov	r3, r0
 800f886:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f888:	7bfb      	ldrb	r3, [r7, #15]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d10c      	bne.n	800f8a8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	691b      	ldr	r3, [r3, #16]
 800f892:	4618      	mov	r0, r3
 800f894:	f7fd fc9c 	bl	800d1d0 <dec_lock>
 800f898:	4603      	mov	r3, r0
 800f89a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f89c:	7bfb      	ldrb	r3, [r7, #15]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d102      	bne.n	800f8a8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f8a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	3710      	adds	r7, #16
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	bd80      	pop	{r7, pc}

0800f8b2 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800f8b2:	b580      	push	{r7, lr}
 800f8b4:	b090      	sub	sp, #64	; 0x40
 800f8b6:	af00      	add	r7, sp, #0
 800f8b8:	6078      	str	r0, [r7, #4]
 800f8ba:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800f8bc:	f107 0108 	add.w	r1, r7, #8
 800f8c0:	1d3b      	adds	r3, r7, #4
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	f7ff f94d 	bl	800eb64 <find_volume>
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800f8d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d11f      	bne.n	800f918 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f8d8:	687a      	ldr	r2, [r7, #4]
 800f8da:	f107 0308 	add.w	r3, r7, #8
 800f8de:	4611      	mov	r1, r2
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	f7ff f833 	bl	800e94c <follow_path>
 800f8e6:	4603      	mov	r3, r0
 800f8e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800f8ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d111      	bne.n	800f918 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800f8f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f8f8:	b25b      	sxtb	r3, r3
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	da03      	bge.n	800f906 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800f8fe:	2306      	movs	r3, #6
 800f900:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f904:	e008      	b.n	800f918 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800f906:	683b      	ldr	r3, [r7, #0]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d005      	beq.n	800f918 <f_stat+0x66>
 800f90c:	f107 0308 	add.w	r3, r7, #8
 800f910:	6839      	ldr	r1, [r7, #0]
 800f912:	4618      	mov	r0, r3
 800f914:	f7fe fd84 	bl	800e420 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800f918:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800f91c:	4618      	mov	r0, r3
 800f91e:	3740      	adds	r7, #64	; 0x40
 800f920:	46bd      	mov	sp, r7
 800f922:	bd80      	pop	{r7, pc}

0800f924 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b098      	sub	sp, #96	; 0x60
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800f92c:	f107 010c 	add.w	r1, r7, #12
 800f930:	1d3b      	adds	r3, r7, #4
 800f932:	2202      	movs	r2, #2
 800f934:	4618      	mov	r0, r3
 800f936:	f7ff f915 	bl	800eb64 <find_volume>
 800f93a:	4603      	mov	r3, r0
 800f93c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 800f944:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f948:	2b00      	cmp	r3, #0
 800f94a:	f040 80ec 	bne.w	800fb26 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800f94e:	687a      	ldr	r2, [r7, #4]
 800f950:	f107 0310 	add.w	r3, r7, #16
 800f954:	4611      	mov	r1, r2
 800f956:	4618      	mov	r0, r3
 800f958:	f7fe fff8 	bl	800e94c <follow_path>
 800f95c:	4603      	mov	r3, r0
 800f95e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800f962:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f966:	2b00      	cmp	r3, #0
 800f968:	d102      	bne.n	800f970 <f_mkdir+0x4c>
 800f96a:	2308      	movs	r3, #8
 800f96c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800f970:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f974:	2b04      	cmp	r3, #4
 800f976:	f040 80d6 	bne.w	800fb26 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800f97a:	f107 0310 	add.w	r3, r7, #16
 800f97e:	2100      	movs	r1, #0
 800f980:	4618      	mov	r0, r3
 800f982:	f7fd ff7b 	bl	800d87c <create_chain>
 800f986:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	895b      	ldrh	r3, [r3, #10]
 800f98c:	025b      	lsls	r3, r3, #9
 800f98e:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 800f990:	2300      	movs	r3, #0
 800f992:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800f996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d102      	bne.n	800f9a2 <f_mkdir+0x7e>
 800f99c:	2307      	movs	r3, #7
 800f99e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 800f9a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9a4:	2b01      	cmp	r3, #1
 800f9a6:	d102      	bne.n	800f9ae <f_mkdir+0x8a>
 800f9a8:	2302      	movs	r3, #2
 800f9aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f9ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f9b4:	d102      	bne.n	800f9bc <f_mkdir+0x98>
 800f9b6:	2301      	movs	r3, #1
 800f9b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800f9bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d106      	bne.n	800f9d2 <f_mkdir+0xae>
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f7fd fc62 	bl	800d290 <sync_window>
 800f9cc:	4603      	mov	r3, r0
 800f9ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 800f9d2:	f7fa ff25 	bl	800a820 <get_fattime>
 800f9d6:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 800f9d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d16a      	bne.n	800fab6 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	f7fd fd33 	bl	800d450 <clust2sect>
 800f9ea:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	3334      	adds	r3, #52	; 0x34
 800f9f0:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 800f9f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f9f6:	2100      	movs	r1, #0
 800f9f8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f9fa:	f7fd fa80 	bl	800cefe <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800f9fe:	220b      	movs	r2, #11
 800fa00:	2120      	movs	r1, #32
 800fa02:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fa04:	f7fd fa7b 	bl	800cefe <mem_set>
					dir[DIR_Name] = '.';
 800fa08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa0a:	222e      	movs	r2, #46	; 0x2e
 800fa0c:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800fa0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa10:	330b      	adds	r3, #11
 800fa12:	2210      	movs	r2, #16
 800fa14:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800fa16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa18:	3316      	adds	r3, #22
 800fa1a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	f7fd fa21 	bl	800ce64 <st_dword>
					st_clust(fs, dir, dcl);
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fa26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fa28:	4618      	mov	r0, r3
 800fa2a:	f7fe f999 	bl	800dd60 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800fa2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa30:	3320      	adds	r3, #32
 800fa32:	2220      	movs	r2, #32
 800fa34:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fa36:	4618      	mov	r0, r3
 800fa38:	f7fd fa40 	bl	800cebc <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800fa3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa3e:	3321      	adds	r3, #33	; 0x21
 800fa40:	222e      	movs	r2, #46	; 0x2e
 800fa42:	701a      	strb	r2, [r3, #0]
 800fa44:	69bb      	ldr	r3, [r7, #24]
 800fa46:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	781b      	ldrb	r3, [r3, #0]
 800fa4c:	2b03      	cmp	r3, #3
 800fa4e:	d106      	bne.n	800fa5e <f_mkdir+0x13a>
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fa56:	429a      	cmp	r2, r3
 800fa58:	d101      	bne.n	800fa5e <f_mkdir+0x13a>
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 800fa5e:	68f8      	ldr	r0, [r7, #12]
 800fa60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa62:	3320      	adds	r3, #32
 800fa64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fa66:	4619      	mov	r1, r3
 800fa68:	f7fe f97a 	bl	800dd60 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	895b      	ldrh	r3, [r3, #10]
 800fa70:	65bb      	str	r3, [r7, #88]	; 0x58
 800fa72:	e01b      	b.n	800faac <f_mkdir+0x188>
					fs->winsect = dsc++;
 800fa74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa76:	1c5a      	adds	r2, r3, #1
 800fa78:	657a      	str	r2, [r7, #84]	; 0x54
 800fa7a:	68fa      	ldr	r2, [r7, #12]
 800fa7c:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	2201      	movs	r2, #1
 800fa82:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	4618      	mov	r0, r3
 800fa88:	f7fd fc02 	bl	800d290 <sync_window>
 800fa8c:	4603      	mov	r3, r0
 800fa8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 800fa92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d10c      	bne.n	800fab4 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 800fa9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fa9e:	2100      	movs	r1, #0
 800faa0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800faa2:	f7fd fa2c 	bl	800cefe <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800faa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800faa8:	3b01      	subs	r3, #1
 800faaa:	65bb      	str	r3, [r7, #88]	; 0x58
 800faac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d1e0      	bne.n	800fa74 <f_mkdir+0x150>
 800fab2:	e000      	b.n	800fab6 <f_mkdir+0x192>
					if (res != FR_OK) break;
 800fab4:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800fab6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d107      	bne.n	800face <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800fabe:	f107 0310 	add.w	r3, r7, #16
 800fac2:	4618      	mov	r0, r3
 800fac4:	f7fe fbb4 	bl	800e230 <dir_register>
 800fac8:	4603      	mov	r3, r0
 800faca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 800face:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d120      	bne.n	800fb18 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800fad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fad8:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800fada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fadc:	3316      	adds	r3, #22
 800fade:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fae0:	4618      	mov	r0, r3
 800fae2:	f7fd f9bf 	bl	800ce64 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800faea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800faec:	4618      	mov	r0, r3
 800faee:	f7fe f937 	bl	800dd60 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800faf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800faf4:	330b      	adds	r3, #11
 800faf6:	2210      	movs	r2, #16
 800faf8:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	2201      	movs	r2, #1
 800fafe:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800fb00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d10e      	bne.n	800fb26 <f_mkdir+0x202>
					res = sync_fs(fs);
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	f7fd fc32 	bl	800d374 <sync_fs>
 800fb10:	4603      	mov	r3, r0
 800fb12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fb16:	e006      	b.n	800fb26 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800fb18:	f107 0310 	add.w	r3, r7, #16
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fb20:	4618      	mov	r0, r3
 800fb22:	f7fd fe46 	bl	800d7b2 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800fb26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	3760      	adds	r7, #96	; 0x60
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	bd80      	pop	{r7, pc}
	...

0800fb34 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fb34:	b480      	push	{r7}
 800fb36:	b087      	sub	sp, #28
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	60f8      	str	r0, [r7, #12]
 800fb3c:	60b9      	str	r1, [r7, #8]
 800fb3e:	4613      	mov	r3, r2
 800fb40:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fb42:	2301      	movs	r3, #1
 800fb44:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fb46:	2300      	movs	r3, #0
 800fb48:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fb4a:	4b1f      	ldr	r3, [pc, #124]	; (800fbc8 <FATFS_LinkDriverEx+0x94>)
 800fb4c:	7a5b      	ldrb	r3, [r3, #9]
 800fb4e:	b2db      	uxtb	r3, r3
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d131      	bne.n	800fbb8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fb54:	4b1c      	ldr	r3, [pc, #112]	; (800fbc8 <FATFS_LinkDriverEx+0x94>)
 800fb56:	7a5b      	ldrb	r3, [r3, #9]
 800fb58:	b2db      	uxtb	r3, r3
 800fb5a:	461a      	mov	r2, r3
 800fb5c:	4b1a      	ldr	r3, [pc, #104]	; (800fbc8 <FATFS_LinkDriverEx+0x94>)
 800fb5e:	2100      	movs	r1, #0
 800fb60:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fb62:	4b19      	ldr	r3, [pc, #100]	; (800fbc8 <FATFS_LinkDriverEx+0x94>)
 800fb64:	7a5b      	ldrb	r3, [r3, #9]
 800fb66:	b2db      	uxtb	r3, r3
 800fb68:	4a17      	ldr	r2, [pc, #92]	; (800fbc8 <FATFS_LinkDriverEx+0x94>)
 800fb6a:	009b      	lsls	r3, r3, #2
 800fb6c:	4413      	add	r3, r2
 800fb6e:	68fa      	ldr	r2, [r7, #12]
 800fb70:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fb72:	4b15      	ldr	r3, [pc, #84]	; (800fbc8 <FATFS_LinkDriverEx+0x94>)
 800fb74:	7a5b      	ldrb	r3, [r3, #9]
 800fb76:	b2db      	uxtb	r3, r3
 800fb78:	461a      	mov	r2, r3
 800fb7a:	4b13      	ldr	r3, [pc, #76]	; (800fbc8 <FATFS_LinkDriverEx+0x94>)
 800fb7c:	4413      	add	r3, r2
 800fb7e:	79fa      	ldrb	r2, [r7, #7]
 800fb80:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fb82:	4b11      	ldr	r3, [pc, #68]	; (800fbc8 <FATFS_LinkDriverEx+0x94>)
 800fb84:	7a5b      	ldrb	r3, [r3, #9]
 800fb86:	b2db      	uxtb	r3, r3
 800fb88:	1c5a      	adds	r2, r3, #1
 800fb8a:	b2d1      	uxtb	r1, r2
 800fb8c:	4a0e      	ldr	r2, [pc, #56]	; (800fbc8 <FATFS_LinkDriverEx+0x94>)
 800fb8e:	7251      	strb	r1, [r2, #9]
 800fb90:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fb92:	7dbb      	ldrb	r3, [r7, #22]
 800fb94:	3330      	adds	r3, #48	; 0x30
 800fb96:	b2da      	uxtb	r2, r3
 800fb98:	68bb      	ldr	r3, [r7, #8]
 800fb9a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fb9c:	68bb      	ldr	r3, [r7, #8]
 800fb9e:	3301      	adds	r3, #1
 800fba0:	223a      	movs	r2, #58	; 0x3a
 800fba2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fba4:	68bb      	ldr	r3, [r7, #8]
 800fba6:	3302      	adds	r3, #2
 800fba8:	222f      	movs	r2, #47	; 0x2f
 800fbaa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fbac:	68bb      	ldr	r3, [r7, #8]
 800fbae:	3303      	adds	r3, #3
 800fbb0:	2200      	movs	r2, #0
 800fbb2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fbb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbba:	4618      	mov	r0, r3
 800fbbc:	371c      	adds	r7, #28
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc4:	4770      	bx	lr
 800fbc6:	bf00      	nop
 800fbc8:	2000182c 	.word	0x2000182c

0800fbcc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b082      	sub	sp, #8
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
 800fbd4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	6839      	ldr	r1, [r7, #0]
 800fbda:	6878      	ldr	r0, [r7, #4]
 800fbdc:	f7ff ffaa 	bl	800fb34 <FATFS_LinkDriverEx>
 800fbe0:	4603      	mov	r3, r0
}
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	3708      	adds	r7, #8
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	bd80      	pop	{r7, pc}
	...

0800fbec <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800fbec:	b480      	push	{r7}
 800fbee:	b085      	sub	sp, #20
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	6039      	str	r1, [r7, #0]
 800fbf6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800fbf8:	88fb      	ldrh	r3, [r7, #6]
 800fbfa:	2b7f      	cmp	r3, #127	; 0x7f
 800fbfc:	d802      	bhi.n	800fc04 <ff_convert+0x18>
		c = chr;
 800fbfe:	88fb      	ldrh	r3, [r7, #6]
 800fc00:	81fb      	strh	r3, [r7, #14]
 800fc02:	e025      	b.n	800fc50 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800fc04:	683b      	ldr	r3, [r7, #0]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d00b      	beq.n	800fc22 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800fc0a:	88fb      	ldrh	r3, [r7, #6]
 800fc0c:	2bff      	cmp	r3, #255	; 0xff
 800fc0e:	d805      	bhi.n	800fc1c <ff_convert+0x30>
 800fc10:	88fb      	ldrh	r3, [r7, #6]
 800fc12:	3b80      	subs	r3, #128	; 0x80
 800fc14:	4a12      	ldr	r2, [pc, #72]	; (800fc60 <ff_convert+0x74>)
 800fc16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc1a:	e000      	b.n	800fc1e <ff_convert+0x32>
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	81fb      	strh	r3, [r7, #14]
 800fc20:	e016      	b.n	800fc50 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800fc22:	2300      	movs	r3, #0
 800fc24:	81fb      	strh	r3, [r7, #14]
 800fc26:	e009      	b.n	800fc3c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800fc28:	89fb      	ldrh	r3, [r7, #14]
 800fc2a:	4a0d      	ldr	r2, [pc, #52]	; (800fc60 <ff_convert+0x74>)
 800fc2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc30:	88fa      	ldrh	r2, [r7, #6]
 800fc32:	429a      	cmp	r2, r3
 800fc34:	d006      	beq.n	800fc44 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800fc36:	89fb      	ldrh	r3, [r7, #14]
 800fc38:	3301      	adds	r3, #1
 800fc3a:	81fb      	strh	r3, [r7, #14]
 800fc3c:	89fb      	ldrh	r3, [r7, #14]
 800fc3e:	2b7f      	cmp	r3, #127	; 0x7f
 800fc40:	d9f2      	bls.n	800fc28 <ff_convert+0x3c>
 800fc42:	e000      	b.n	800fc46 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800fc44:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800fc46:	89fb      	ldrh	r3, [r7, #14]
 800fc48:	3380      	adds	r3, #128	; 0x80
 800fc4a:	b29b      	uxth	r3, r3
 800fc4c:	b2db      	uxtb	r3, r3
 800fc4e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800fc50:	89fb      	ldrh	r3, [r7, #14]
}
 800fc52:	4618      	mov	r0, r3
 800fc54:	3714      	adds	r7, #20
 800fc56:	46bd      	mov	sp, r7
 800fc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5c:	4770      	bx	lr
 800fc5e:	bf00      	nop
 800fc60:	0801202c 	.word	0x0801202c

0800fc64 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800fc64:	b480      	push	{r7}
 800fc66:	b087      	sub	sp, #28
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800fc6e:	88fb      	ldrh	r3, [r7, #6]
 800fc70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc74:	d201      	bcs.n	800fc7a <ff_wtoupper+0x16>
 800fc76:	4b3e      	ldr	r3, [pc, #248]	; (800fd70 <ff_wtoupper+0x10c>)
 800fc78:	e000      	b.n	800fc7c <ff_wtoupper+0x18>
 800fc7a:	4b3e      	ldr	r3, [pc, #248]	; (800fd74 <ff_wtoupper+0x110>)
 800fc7c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800fc7e:	697b      	ldr	r3, [r7, #20]
 800fc80:	1c9a      	adds	r2, r3, #2
 800fc82:	617a      	str	r2, [r7, #20]
 800fc84:	881b      	ldrh	r3, [r3, #0]
 800fc86:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800fc88:	8a7b      	ldrh	r3, [r7, #18]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d068      	beq.n	800fd60 <ff_wtoupper+0xfc>
 800fc8e:	88fa      	ldrh	r2, [r7, #6]
 800fc90:	8a7b      	ldrh	r3, [r7, #18]
 800fc92:	429a      	cmp	r2, r3
 800fc94:	d364      	bcc.n	800fd60 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800fc96:	697b      	ldr	r3, [r7, #20]
 800fc98:	1c9a      	adds	r2, r3, #2
 800fc9a:	617a      	str	r2, [r7, #20]
 800fc9c:	881b      	ldrh	r3, [r3, #0]
 800fc9e:	823b      	strh	r3, [r7, #16]
 800fca0:	8a3b      	ldrh	r3, [r7, #16]
 800fca2:	0a1b      	lsrs	r3, r3, #8
 800fca4:	81fb      	strh	r3, [r7, #14]
 800fca6:	8a3b      	ldrh	r3, [r7, #16]
 800fca8:	b2db      	uxtb	r3, r3
 800fcaa:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800fcac:	88fa      	ldrh	r2, [r7, #6]
 800fcae:	8a79      	ldrh	r1, [r7, #18]
 800fcb0:	8a3b      	ldrh	r3, [r7, #16]
 800fcb2:	440b      	add	r3, r1
 800fcb4:	429a      	cmp	r2, r3
 800fcb6:	da49      	bge.n	800fd4c <ff_wtoupper+0xe8>
			switch (cmd) {
 800fcb8:	89fb      	ldrh	r3, [r7, #14]
 800fcba:	2b08      	cmp	r3, #8
 800fcbc:	d84f      	bhi.n	800fd5e <ff_wtoupper+0xfa>
 800fcbe:	a201      	add	r2, pc, #4	; (adr r2, 800fcc4 <ff_wtoupper+0x60>)
 800fcc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcc4:	0800fce9 	.word	0x0800fce9
 800fcc8:	0800fcfb 	.word	0x0800fcfb
 800fccc:	0800fd11 	.word	0x0800fd11
 800fcd0:	0800fd19 	.word	0x0800fd19
 800fcd4:	0800fd21 	.word	0x0800fd21
 800fcd8:	0800fd29 	.word	0x0800fd29
 800fcdc:	0800fd31 	.word	0x0800fd31
 800fce0:	0800fd39 	.word	0x0800fd39
 800fce4:	0800fd41 	.word	0x0800fd41
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800fce8:	88fa      	ldrh	r2, [r7, #6]
 800fcea:	8a7b      	ldrh	r3, [r7, #18]
 800fcec:	1ad3      	subs	r3, r2, r3
 800fcee:	005b      	lsls	r3, r3, #1
 800fcf0:	697a      	ldr	r2, [r7, #20]
 800fcf2:	4413      	add	r3, r2
 800fcf4:	881b      	ldrh	r3, [r3, #0]
 800fcf6:	80fb      	strh	r3, [r7, #6]
 800fcf8:	e027      	b.n	800fd4a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800fcfa:	88fa      	ldrh	r2, [r7, #6]
 800fcfc:	8a7b      	ldrh	r3, [r7, #18]
 800fcfe:	1ad3      	subs	r3, r2, r3
 800fd00:	b29b      	uxth	r3, r3
 800fd02:	f003 0301 	and.w	r3, r3, #1
 800fd06:	b29b      	uxth	r3, r3
 800fd08:	88fa      	ldrh	r2, [r7, #6]
 800fd0a:	1ad3      	subs	r3, r2, r3
 800fd0c:	80fb      	strh	r3, [r7, #6]
 800fd0e:	e01c      	b.n	800fd4a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800fd10:	88fb      	ldrh	r3, [r7, #6]
 800fd12:	3b10      	subs	r3, #16
 800fd14:	80fb      	strh	r3, [r7, #6]
 800fd16:	e018      	b.n	800fd4a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800fd18:	88fb      	ldrh	r3, [r7, #6]
 800fd1a:	3b20      	subs	r3, #32
 800fd1c:	80fb      	strh	r3, [r7, #6]
 800fd1e:	e014      	b.n	800fd4a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800fd20:	88fb      	ldrh	r3, [r7, #6]
 800fd22:	3b30      	subs	r3, #48	; 0x30
 800fd24:	80fb      	strh	r3, [r7, #6]
 800fd26:	e010      	b.n	800fd4a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800fd28:	88fb      	ldrh	r3, [r7, #6]
 800fd2a:	3b1a      	subs	r3, #26
 800fd2c:	80fb      	strh	r3, [r7, #6]
 800fd2e:	e00c      	b.n	800fd4a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800fd30:	88fb      	ldrh	r3, [r7, #6]
 800fd32:	3308      	adds	r3, #8
 800fd34:	80fb      	strh	r3, [r7, #6]
 800fd36:	e008      	b.n	800fd4a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800fd38:	88fb      	ldrh	r3, [r7, #6]
 800fd3a:	3b50      	subs	r3, #80	; 0x50
 800fd3c:	80fb      	strh	r3, [r7, #6]
 800fd3e:	e004      	b.n	800fd4a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800fd40:	88fb      	ldrh	r3, [r7, #6]
 800fd42:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800fd46:	80fb      	strh	r3, [r7, #6]
 800fd48:	bf00      	nop
			}
			break;
 800fd4a:	e008      	b.n	800fd5e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800fd4c:	89fb      	ldrh	r3, [r7, #14]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d195      	bne.n	800fc7e <ff_wtoupper+0x1a>
 800fd52:	8a3b      	ldrh	r3, [r7, #16]
 800fd54:	005b      	lsls	r3, r3, #1
 800fd56:	697a      	ldr	r2, [r7, #20]
 800fd58:	4413      	add	r3, r2
 800fd5a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800fd5c:	e78f      	b.n	800fc7e <ff_wtoupper+0x1a>
			break;
 800fd5e:	bf00      	nop
	}

	return chr;
 800fd60:	88fb      	ldrh	r3, [r7, #6]
}
 800fd62:	4618      	mov	r0, r3
 800fd64:	371c      	adds	r7, #28
 800fd66:	46bd      	mov	sp, r7
 800fd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6c:	4770      	bx	lr
 800fd6e:	bf00      	nop
 800fd70:	0801212c 	.word	0x0801212c
 800fd74:	08012320 	.word	0x08012320

0800fd78 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	4912      	ldr	r1, [pc, #72]	; (800fdc8 <MX_USB_DEVICE_Init+0x50>)
 800fd80:	4812      	ldr	r0, [pc, #72]	; (800fdcc <MX_USB_DEVICE_Init+0x54>)
 800fd82:	f7fb fc5f 	bl	800b644 <USBD_Init>
 800fd86:	4603      	mov	r3, r0
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d001      	beq.n	800fd90 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fd8c:	f7f1 fa4c 	bl	8001228 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fd90:	490f      	ldr	r1, [pc, #60]	; (800fdd0 <MX_USB_DEVICE_Init+0x58>)
 800fd92:	480e      	ldr	r0, [pc, #56]	; (800fdcc <MX_USB_DEVICE_Init+0x54>)
 800fd94:	f7fb fc86 	bl	800b6a4 <USBD_RegisterClass>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d001      	beq.n	800fda2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fd9e:	f7f1 fa43 	bl	8001228 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fda2:	490c      	ldr	r1, [pc, #48]	; (800fdd4 <MX_USB_DEVICE_Init+0x5c>)
 800fda4:	4809      	ldr	r0, [pc, #36]	; (800fdcc <MX_USB_DEVICE_Init+0x54>)
 800fda6:	f7fb fb7d 	bl	800b4a4 <USBD_CDC_RegisterInterface>
 800fdaa:	4603      	mov	r3, r0
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d001      	beq.n	800fdb4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fdb0:	f7f1 fa3a 	bl	8001228 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fdb4:	4805      	ldr	r0, [pc, #20]	; (800fdcc <MX_USB_DEVICE_Init+0x54>)
 800fdb6:	f7fb fcab 	bl	800b710 <USBD_Start>
 800fdba:	4603      	mov	r3, r0
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d001      	beq.n	800fdc4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fdc0:	f7f1 fa32 	bl	8001228 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fdc4:	bf00      	nop
 800fdc6:	bd80      	pop	{r7, pc}
 800fdc8:	200000b0 	.word	0x200000b0
 800fdcc:	20001838 	.word	0x20001838
 800fdd0:	2000001c 	.word	0x2000001c
 800fdd4:	2000009c 	.word	0x2000009c

0800fdd8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fddc:	2200      	movs	r2, #0
 800fdde:	4905      	ldr	r1, [pc, #20]	; (800fdf4 <CDC_Init_FS+0x1c>)
 800fde0:	4805      	ldr	r0, [pc, #20]	; (800fdf8 <CDC_Init_FS+0x20>)
 800fde2:	f7fb fb79 	bl	800b4d8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fde6:	4905      	ldr	r1, [pc, #20]	; (800fdfc <CDC_Init_FS+0x24>)
 800fde8:	4803      	ldr	r0, [pc, #12]	; (800fdf8 <CDC_Init_FS+0x20>)
 800fdea:	f7fb fb97 	bl	800b51c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fdee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	bd80      	pop	{r7, pc}
 800fdf4:	20002314 	.word	0x20002314
 800fdf8:	20001838 	.word	0x20001838
 800fdfc:	20001b14 	.word	0x20001b14

0800fe00 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fe00:	b480      	push	{r7}
 800fe02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fe04:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fe06:	4618      	mov	r0, r3
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0e:	4770      	bx	lr

0800fe10 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fe10:	b480      	push	{r7}
 800fe12:	b083      	sub	sp, #12
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	4603      	mov	r3, r0
 800fe18:	6039      	str	r1, [r7, #0]
 800fe1a:	71fb      	strb	r3, [r7, #7]
 800fe1c:	4613      	mov	r3, r2
 800fe1e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fe20:	79fb      	ldrb	r3, [r7, #7]
 800fe22:	2b23      	cmp	r3, #35	; 0x23
 800fe24:	d84a      	bhi.n	800febc <CDC_Control_FS+0xac>
 800fe26:	a201      	add	r2, pc, #4	; (adr r2, 800fe2c <CDC_Control_FS+0x1c>)
 800fe28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe2c:	0800febd 	.word	0x0800febd
 800fe30:	0800febd 	.word	0x0800febd
 800fe34:	0800febd 	.word	0x0800febd
 800fe38:	0800febd 	.word	0x0800febd
 800fe3c:	0800febd 	.word	0x0800febd
 800fe40:	0800febd 	.word	0x0800febd
 800fe44:	0800febd 	.word	0x0800febd
 800fe48:	0800febd 	.word	0x0800febd
 800fe4c:	0800febd 	.word	0x0800febd
 800fe50:	0800febd 	.word	0x0800febd
 800fe54:	0800febd 	.word	0x0800febd
 800fe58:	0800febd 	.word	0x0800febd
 800fe5c:	0800febd 	.word	0x0800febd
 800fe60:	0800febd 	.word	0x0800febd
 800fe64:	0800febd 	.word	0x0800febd
 800fe68:	0800febd 	.word	0x0800febd
 800fe6c:	0800febd 	.word	0x0800febd
 800fe70:	0800febd 	.word	0x0800febd
 800fe74:	0800febd 	.word	0x0800febd
 800fe78:	0800febd 	.word	0x0800febd
 800fe7c:	0800febd 	.word	0x0800febd
 800fe80:	0800febd 	.word	0x0800febd
 800fe84:	0800febd 	.word	0x0800febd
 800fe88:	0800febd 	.word	0x0800febd
 800fe8c:	0800febd 	.word	0x0800febd
 800fe90:	0800febd 	.word	0x0800febd
 800fe94:	0800febd 	.word	0x0800febd
 800fe98:	0800febd 	.word	0x0800febd
 800fe9c:	0800febd 	.word	0x0800febd
 800fea0:	0800febd 	.word	0x0800febd
 800fea4:	0800febd 	.word	0x0800febd
 800fea8:	0800febd 	.word	0x0800febd
 800feac:	0800febd 	.word	0x0800febd
 800feb0:	0800febd 	.word	0x0800febd
 800feb4:	0800febd 	.word	0x0800febd
 800feb8:	0800febd 	.word	0x0800febd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800febc:	bf00      	nop
  }

  return (USBD_OK);
 800febe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fec0:	4618      	mov	r0, r3
 800fec2:	370c      	adds	r7, #12
 800fec4:	46bd      	mov	sp, r7
 800fec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feca:	4770      	bx	lr

0800fecc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	b082      	sub	sp, #8
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
 800fed4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fed6:	6879      	ldr	r1, [r7, #4]
 800fed8:	4805      	ldr	r0, [pc, #20]	; (800fef0 <CDC_Receive_FS+0x24>)
 800feda:	f7fb fb1f 	bl	800b51c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fede:	4804      	ldr	r0, [pc, #16]	; (800fef0 <CDC_Receive_FS+0x24>)
 800fee0:	f7fb fb7a 	bl	800b5d8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fee4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fee6:	4618      	mov	r0, r3
 800fee8:	3708      	adds	r7, #8
 800feea:	46bd      	mov	sp, r7
 800feec:	bd80      	pop	{r7, pc}
 800feee:	bf00      	nop
 800fef0:	20001838 	.word	0x20001838

0800fef4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b084      	sub	sp, #16
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
 800fefc:	460b      	mov	r3, r1
 800fefe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ff00:	2300      	movs	r3, #0
 800ff02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ff04:	4b0d      	ldr	r3, [pc, #52]	; (800ff3c <CDC_Transmit_FS+0x48>)
 800ff06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ff0a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ff0c:	68bb      	ldr	r3, [r7, #8]
 800ff0e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d001      	beq.n	800ff1a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ff16:	2301      	movs	r3, #1
 800ff18:	e00b      	b.n	800ff32 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ff1a:	887b      	ldrh	r3, [r7, #2]
 800ff1c:	461a      	mov	r2, r3
 800ff1e:	6879      	ldr	r1, [r7, #4]
 800ff20:	4806      	ldr	r0, [pc, #24]	; (800ff3c <CDC_Transmit_FS+0x48>)
 800ff22:	f7fb fad9 	bl	800b4d8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ff26:	4805      	ldr	r0, [pc, #20]	; (800ff3c <CDC_Transmit_FS+0x48>)
 800ff28:	f7fb fb16 	bl	800b558 <USBD_CDC_TransmitPacket>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ff30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff32:	4618      	mov	r0, r3
 800ff34:	3710      	adds	r7, #16
 800ff36:	46bd      	mov	sp, r7
 800ff38:	bd80      	pop	{r7, pc}
 800ff3a:	bf00      	nop
 800ff3c:	20001838 	.word	0x20001838

0800ff40 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ff40:	b480      	push	{r7}
 800ff42:	b087      	sub	sp, #28
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	60f8      	str	r0, [r7, #12]
 800ff48:	60b9      	str	r1, [r7, #8]
 800ff4a:	4613      	mov	r3, r2
 800ff4c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ff4e:	2300      	movs	r3, #0
 800ff50:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ff52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ff56:	4618      	mov	r0, r3
 800ff58:	371c      	adds	r7, #28
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff60:	4770      	bx	lr
	...

0800ff64 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff64:	b480      	push	{r7}
 800ff66:	b083      	sub	sp, #12
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	6039      	str	r1, [r7, #0]
 800ff6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ff70:	683b      	ldr	r3, [r7, #0]
 800ff72:	2212      	movs	r2, #18
 800ff74:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ff76:	4b03      	ldr	r3, [pc, #12]	; (800ff84 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ff78:	4618      	mov	r0, r3
 800ff7a:	370c      	adds	r7, #12
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff82:	4770      	bx	lr
 800ff84:	200000d0 	.word	0x200000d0

0800ff88 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff88:	b480      	push	{r7}
 800ff8a:	b083      	sub	sp, #12
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	4603      	mov	r3, r0
 800ff90:	6039      	str	r1, [r7, #0]
 800ff92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	2204      	movs	r2, #4
 800ff98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ff9a:	4b03      	ldr	r3, [pc, #12]	; (800ffa8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	370c      	adds	r7, #12
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa6:	4770      	bx	lr
 800ffa8:	200000f0 	.word	0x200000f0

0800ffac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b082      	sub	sp, #8
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	4603      	mov	r3, r0
 800ffb4:	6039      	str	r1, [r7, #0]
 800ffb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ffb8:	79fb      	ldrb	r3, [r7, #7]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d105      	bne.n	800ffca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ffbe:	683a      	ldr	r2, [r7, #0]
 800ffc0:	4907      	ldr	r1, [pc, #28]	; (800ffe0 <USBD_FS_ProductStrDescriptor+0x34>)
 800ffc2:	4808      	ldr	r0, [pc, #32]	; (800ffe4 <USBD_FS_ProductStrDescriptor+0x38>)
 800ffc4:	f7fc fd7a 	bl	800cabc <USBD_GetString>
 800ffc8:	e004      	b.n	800ffd4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ffca:	683a      	ldr	r2, [r7, #0]
 800ffcc:	4904      	ldr	r1, [pc, #16]	; (800ffe0 <USBD_FS_ProductStrDescriptor+0x34>)
 800ffce:	4805      	ldr	r0, [pc, #20]	; (800ffe4 <USBD_FS_ProductStrDescriptor+0x38>)
 800ffd0:	f7fc fd74 	bl	800cabc <USBD_GetString>
  }
  return USBD_StrDesc;
 800ffd4:	4b02      	ldr	r3, [pc, #8]	; (800ffe0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	3708      	adds	r7, #8
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	bd80      	pop	{r7, pc}
 800ffde:	bf00      	nop
 800ffe0:	20002b14 	.word	0x20002b14
 800ffe4:	08011f20 	.word	0x08011f20

0800ffe8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b082      	sub	sp, #8
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	4603      	mov	r3, r0
 800fff0:	6039      	str	r1, [r7, #0]
 800fff2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fff4:	683a      	ldr	r2, [r7, #0]
 800fff6:	4904      	ldr	r1, [pc, #16]	; (8010008 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fff8:	4804      	ldr	r0, [pc, #16]	; (801000c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fffa:	f7fc fd5f 	bl	800cabc <USBD_GetString>
  return USBD_StrDesc;
 800fffe:	4b02      	ldr	r3, [pc, #8]	; (8010008 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010000:	4618      	mov	r0, r3
 8010002:	3708      	adds	r7, #8
 8010004:	46bd      	mov	sp, r7
 8010006:	bd80      	pop	{r7, pc}
 8010008:	20002b14 	.word	0x20002b14
 801000c:	08011f38 	.word	0x08011f38

08010010 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010010:	b580      	push	{r7, lr}
 8010012:	b082      	sub	sp, #8
 8010014:	af00      	add	r7, sp, #0
 8010016:	4603      	mov	r3, r0
 8010018:	6039      	str	r1, [r7, #0]
 801001a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801001c:	683b      	ldr	r3, [r7, #0]
 801001e:	221a      	movs	r2, #26
 8010020:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010022:	f000 f855 	bl	80100d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010026:	4b02      	ldr	r3, [pc, #8]	; (8010030 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010028:	4618      	mov	r0, r3
 801002a:	3708      	adds	r7, #8
 801002c:	46bd      	mov	sp, r7
 801002e:	bd80      	pop	{r7, pc}
 8010030:	200000f4 	.word	0x200000f4

08010034 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b082      	sub	sp, #8
 8010038:	af00      	add	r7, sp, #0
 801003a:	4603      	mov	r3, r0
 801003c:	6039      	str	r1, [r7, #0]
 801003e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010040:	79fb      	ldrb	r3, [r7, #7]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d105      	bne.n	8010052 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010046:	683a      	ldr	r2, [r7, #0]
 8010048:	4907      	ldr	r1, [pc, #28]	; (8010068 <USBD_FS_ConfigStrDescriptor+0x34>)
 801004a:	4808      	ldr	r0, [pc, #32]	; (801006c <USBD_FS_ConfigStrDescriptor+0x38>)
 801004c:	f7fc fd36 	bl	800cabc <USBD_GetString>
 8010050:	e004      	b.n	801005c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010052:	683a      	ldr	r2, [r7, #0]
 8010054:	4904      	ldr	r1, [pc, #16]	; (8010068 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010056:	4805      	ldr	r0, [pc, #20]	; (801006c <USBD_FS_ConfigStrDescriptor+0x38>)
 8010058:	f7fc fd30 	bl	800cabc <USBD_GetString>
  }
  return USBD_StrDesc;
 801005c:	4b02      	ldr	r3, [pc, #8]	; (8010068 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801005e:	4618      	mov	r0, r3
 8010060:	3708      	adds	r7, #8
 8010062:	46bd      	mov	sp, r7
 8010064:	bd80      	pop	{r7, pc}
 8010066:	bf00      	nop
 8010068:	20002b14 	.word	0x20002b14
 801006c:	08011f4c 	.word	0x08011f4c

08010070 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b082      	sub	sp, #8
 8010074:	af00      	add	r7, sp, #0
 8010076:	4603      	mov	r3, r0
 8010078:	6039      	str	r1, [r7, #0]
 801007a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801007c:	79fb      	ldrb	r3, [r7, #7]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d105      	bne.n	801008e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010082:	683a      	ldr	r2, [r7, #0]
 8010084:	4907      	ldr	r1, [pc, #28]	; (80100a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010086:	4808      	ldr	r0, [pc, #32]	; (80100a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010088:	f7fc fd18 	bl	800cabc <USBD_GetString>
 801008c:	e004      	b.n	8010098 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801008e:	683a      	ldr	r2, [r7, #0]
 8010090:	4904      	ldr	r1, [pc, #16]	; (80100a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010092:	4805      	ldr	r0, [pc, #20]	; (80100a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010094:	f7fc fd12 	bl	800cabc <USBD_GetString>
  }
  return USBD_StrDesc;
 8010098:	4b02      	ldr	r3, [pc, #8]	; (80100a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801009a:	4618      	mov	r0, r3
 801009c:	3708      	adds	r7, #8
 801009e:	46bd      	mov	sp, r7
 80100a0:	bd80      	pop	{r7, pc}
 80100a2:	bf00      	nop
 80100a4:	20002b14 	.word	0x20002b14
 80100a8:	08011f58 	.word	0x08011f58

080100ac <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100ac:	b480      	push	{r7}
 80100ae:	b083      	sub	sp, #12
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	4603      	mov	r3, r0
 80100b4:	6039      	str	r1, [r7, #0]
 80100b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80100b8:	683b      	ldr	r3, [r7, #0]
 80100ba:	220c      	movs	r2, #12
 80100bc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80100be:	4b03      	ldr	r3, [pc, #12]	; (80100cc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80100c0:	4618      	mov	r0, r3
 80100c2:	370c      	adds	r7, #12
 80100c4:	46bd      	mov	sp, r7
 80100c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ca:	4770      	bx	lr
 80100cc:	200000e4 	.word	0x200000e4

080100d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b084      	sub	sp, #16
 80100d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80100d6:	4b0f      	ldr	r3, [pc, #60]	; (8010114 <Get_SerialNum+0x44>)
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80100dc:	4b0e      	ldr	r3, [pc, #56]	; (8010118 <Get_SerialNum+0x48>)
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80100e2:	4b0e      	ldr	r3, [pc, #56]	; (801011c <Get_SerialNum+0x4c>)
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80100e8:	68fa      	ldr	r2, [r7, #12]
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	4413      	add	r3, r2
 80100ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d009      	beq.n	801010a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80100f6:	2208      	movs	r2, #8
 80100f8:	4909      	ldr	r1, [pc, #36]	; (8010120 <Get_SerialNum+0x50>)
 80100fa:	68f8      	ldr	r0, [r7, #12]
 80100fc:	f000 f814 	bl	8010128 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010100:	2204      	movs	r2, #4
 8010102:	4908      	ldr	r1, [pc, #32]	; (8010124 <Get_SerialNum+0x54>)
 8010104:	68b8      	ldr	r0, [r7, #8]
 8010106:	f000 f80f 	bl	8010128 <IntToUnicode>
  }
}
 801010a:	bf00      	nop
 801010c:	3710      	adds	r7, #16
 801010e:	46bd      	mov	sp, r7
 8010110:	bd80      	pop	{r7, pc}
 8010112:	bf00      	nop
 8010114:	1ff0f420 	.word	0x1ff0f420
 8010118:	1ff0f424 	.word	0x1ff0f424
 801011c:	1ff0f428 	.word	0x1ff0f428
 8010120:	200000f6 	.word	0x200000f6
 8010124:	20000106 	.word	0x20000106

08010128 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010128:	b480      	push	{r7}
 801012a:	b087      	sub	sp, #28
 801012c:	af00      	add	r7, sp, #0
 801012e:	60f8      	str	r0, [r7, #12]
 8010130:	60b9      	str	r1, [r7, #8]
 8010132:	4613      	mov	r3, r2
 8010134:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010136:	2300      	movs	r3, #0
 8010138:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801013a:	2300      	movs	r3, #0
 801013c:	75fb      	strb	r3, [r7, #23]
 801013e:	e027      	b.n	8010190 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	0f1b      	lsrs	r3, r3, #28
 8010144:	2b09      	cmp	r3, #9
 8010146:	d80b      	bhi.n	8010160 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	0f1b      	lsrs	r3, r3, #28
 801014c:	b2da      	uxtb	r2, r3
 801014e:	7dfb      	ldrb	r3, [r7, #23]
 8010150:	005b      	lsls	r3, r3, #1
 8010152:	4619      	mov	r1, r3
 8010154:	68bb      	ldr	r3, [r7, #8]
 8010156:	440b      	add	r3, r1
 8010158:	3230      	adds	r2, #48	; 0x30
 801015a:	b2d2      	uxtb	r2, r2
 801015c:	701a      	strb	r2, [r3, #0]
 801015e:	e00a      	b.n	8010176 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	0f1b      	lsrs	r3, r3, #28
 8010164:	b2da      	uxtb	r2, r3
 8010166:	7dfb      	ldrb	r3, [r7, #23]
 8010168:	005b      	lsls	r3, r3, #1
 801016a:	4619      	mov	r1, r3
 801016c:	68bb      	ldr	r3, [r7, #8]
 801016e:	440b      	add	r3, r1
 8010170:	3237      	adds	r2, #55	; 0x37
 8010172:	b2d2      	uxtb	r2, r2
 8010174:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	011b      	lsls	r3, r3, #4
 801017a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801017c:	7dfb      	ldrb	r3, [r7, #23]
 801017e:	005b      	lsls	r3, r3, #1
 8010180:	3301      	adds	r3, #1
 8010182:	68ba      	ldr	r2, [r7, #8]
 8010184:	4413      	add	r3, r2
 8010186:	2200      	movs	r2, #0
 8010188:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801018a:	7dfb      	ldrb	r3, [r7, #23]
 801018c:	3301      	adds	r3, #1
 801018e:	75fb      	strb	r3, [r7, #23]
 8010190:	7dfa      	ldrb	r2, [r7, #23]
 8010192:	79fb      	ldrb	r3, [r7, #7]
 8010194:	429a      	cmp	r2, r3
 8010196:	d3d3      	bcc.n	8010140 <IntToUnicode+0x18>
  }
}
 8010198:	bf00      	nop
 801019a:	bf00      	nop
 801019c:	371c      	adds	r7, #28
 801019e:	46bd      	mov	sp, r7
 80101a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a4:	4770      	bx	lr
	...

080101a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b0ae      	sub	sp, #184	; 0xb8
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80101b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80101b4:	2200      	movs	r2, #0
 80101b6:	601a      	str	r2, [r3, #0]
 80101b8:	605a      	str	r2, [r3, #4]
 80101ba:	609a      	str	r2, [r3, #8]
 80101bc:	60da      	str	r2, [r3, #12]
 80101be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80101c0:	f107 0314 	add.w	r3, r7, #20
 80101c4:	2290      	movs	r2, #144	; 0x90
 80101c6:	2100      	movs	r1, #0
 80101c8:	4618      	mov	r0, r3
 80101ca:	f000 fd7b 	bl	8010cc4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80101d6:	d151      	bne.n	801027c <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80101d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80101dc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80101de:	2300      	movs	r3, #0
 80101e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80101e4:	f107 0314 	add.w	r3, r7, #20
 80101e8:	4618      	mov	r0, r3
 80101ea:	f7f5 ff4d 	bl	8006088 <HAL_RCCEx_PeriphCLKConfig>
 80101ee:	4603      	mov	r3, r0
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d001      	beq.n	80101f8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80101f4:	f7f1 f818 	bl	8001228 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80101f8:	4b22      	ldr	r3, [pc, #136]	; (8010284 <HAL_PCD_MspInit+0xdc>)
 80101fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101fc:	4a21      	ldr	r2, [pc, #132]	; (8010284 <HAL_PCD_MspInit+0xdc>)
 80101fe:	f043 0301 	orr.w	r3, r3, #1
 8010202:	6313      	str	r3, [r2, #48]	; 0x30
 8010204:	4b1f      	ldr	r3, [pc, #124]	; (8010284 <HAL_PCD_MspInit+0xdc>)
 8010206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010208:	f003 0301 	and.w	r3, r3, #1
 801020c:	613b      	str	r3, [r7, #16]
 801020e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010210:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010214:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010218:	2302      	movs	r3, #2
 801021a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801021e:	2300      	movs	r3, #0
 8010220:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010224:	2303      	movs	r3, #3
 8010226:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801022a:	230a      	movs	r3, #10
 801022c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010230:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010234:	4619      	mov	r1, r3
 8010236:	4814      	ldr	r0, [pc, #80]	; (8010288 <HAL_PCD_MspInit+0xe0>)
 8010238:	f7f3 f81a 	bl	8003270 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801023c:	4b11      	ldr	r3, [pc, #68]	; (8010284 <HAL_PCD_MspInit+0xdc>)
 801023e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010240:	4a10      	ldr	r2, [pc, #64]	; (8010284 <HAL_PCD_MspInit+0xdc>)
 8010242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010246:	6353      	str	r3, [r2, #52]	; 0x34
 8010248:	4b0e      	ldr	r3, [pc, #56]	; (8010284 <HAL_PCD_MspInit+0xdc>)
 801024a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801024c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010250:	60fb      	str	r3, [r7, #12]
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	4b0b      	ldr	r3, [pc, #44]	; (8010284 <HAL_PCD_MspInit+0xdc>)
 8010256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010258:	4a0a      	ldr	r2, [pc, #40]	; (8010284 <HAL_PCD_MspInit+0xdc>)
 801025a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801025e:	6453      	str	r3, [r2, #68]	; 0x44
 8010260:	4b08      	ldr	r3, [pc, #32]	; (8010284 <HAL_PCD_MspInit+0xdc>)
 8010262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010264:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010268:	60bb      	str	r3, [r7, #8]
 801026a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801026c:	2200      	movs	r2, #0
 801026e:	2100      	movs	r1, #0
 8010270:	2043      	movs	r0, #67	; 0x43
 8010272:	f7f2 fc20 	bl	8002ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010276:	2043      	movs	r0, #67	; 0x43
 8010278:	f7f2 fc39 	bl	8002aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801027c:	bf00      	nop
 801027e:	37b8      	adds	r7, #184	; 0xb8
 8010280:	46bd      	mov	sp, r7
 8010282:	bd80      	pop	{r7, pc}
 8010284:	40023800 	.word	0x40023800
 8010288:	40020000 	.word	0x40020000

0801028c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b082      	sub	sp, #8
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80102a0:	4619      	mov	r1, r3
 80102a2:	4610      	mov	r0, r2
 80102a4:	f7fb fa81 	bl	800b7aa <USBD_LL_SetupStage>
}
 80102a8:	bf00      	nop
 80102aa:	3708      	adds	r7, #8
 80102ac:	46bd      	mov	sp, r7
 80102ae:	bd80      	pop	{r7, pc}

080102b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b082      	sub	sp, #8
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
 80102b8:	460b      	mov	r3, r1
 80102ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 80102c2:	78fa      	ldrb	r2, [r7, #3]
 80102c4:	6879      	ldr	r1, [r7, #4]
 80102c6:	4613      	mov	r3, r2
 80102c8:	00db      	lsls	r3, r3, #3
 80102ca:	4413      	add	r3, r2
 80102cc:	009b      	lsls	r3, r3, #2
 80102ce:	440b      	add	r3, r1
 80102d0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80102d4:	681a      	ldr	r2, [r3, #0]
 80102d6:	78fb      	ldrb	r3, [r7, #3]
 80102d8:	4619      	mov	r1, r3
 80102da:	f7fb fabb 	bl	800b854 <USBD_LL_DataOutStage>
}
 80102de:	bf00      	nop
 80102e0:	3708      	adds	r7, #8
 80102e2:	46bd      	mov	sp, r7
 80102e4:	bd80      	pop	{r7, pc}

080102e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102e6:	b580      	push	{r7, lr}
 80102e8:	b082      	sub	sp, #8
 80102ea:	af00      	add	r7, sp, #0
 80102ec:	6078      	str	r0, [r7, #4]
 80102ee:	460b      	mov	r3, r1
 80102f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 80102f8:	78fa      	ldrb	r2, [r7, #3]
 80102fa:	6879      	ldr	r1, [r7, #4]
 80102fc:	4613      	mov	r3, r2
 80102fe:	00db      	lsls	r3, r3, #3
 8010300:	4413      	add	r3, r2
 8010302:	009b      	lsls	r3, r3, #2
 8010304:	440b      	add	r3, r1
 8010306:	334c      	adds	r3, #76	; 0x4c
 8010308:	681a      	ldr	r2, [r3, #0]
 801030a:	78fb      	ldrb	r3, [r7, #3]
 801030c:	4619      	mov	r1, r3
 801030e:	f7fb fb54 	bl	800b9ba <USBD_LL_DataInStage>
}
 8010312:	bf00      	nop
 8010314:	3708      	adds	r7, #8
 8010316:	46bd      	mov	sp, r7
 8010318:	bd80      	pop	{r7, pc}

0801031a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801031a:	b580      	push	{r7, lr}
 801031c:	b082      	sub	sp, #8
 801031e:	af00      	add	r7, sp, #0
 8010320:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010328:	4618      	mov	r0, r3
 801032a:	f7fb fc88 	bl	800bc3e <USBD_LL_SOF>
}
 801032e:	bf00      	nop
 8010330:	3708      	adds	r7, #8
 8010332:	46bd      	mov	sp, r7
 8010334:	bd80      	pop	{r7, pc}

08010336 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010336:	b580      	push	{r7, lr}
 8010338:	b084      	sub	sp, #16
 801033a:	af00      	add	r7, sp, #0
 801033c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801033e:	2301      	movs	r3, #1
 8010340:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	68db      	ldr	r3, [r3, #12]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d102      	bne.n	8010350 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801034a:	2300      	movs	r3, #0
 801034c:	73fb      	strb	r3, [r7, #15]
 801034e:	e008      	b.n	8010362 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	68db      	ldr	r3, [r3, #12]
 8010354:	2b02      	cmp	r3, #2
 8010356:	d102      	bne.n	801035e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010358:	2301      	movs	r3, #1
 801035a:	73fb      	strb	r3, [r7, #15]
 801035c:	e001      	b.n	8010362 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801035e:	f7f0 ff63 	bl	8001228 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010368:	7bfa      	ldrb	r2, [r7, #15]
 801036a:	4611      	mov	r1, r2
 801036c:	4618      	mov	r0, r3
 801036e:	f7fb fc28 	bl	800bbc2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010378:	4618      	mov	r0, r3
 801037a:	f7fb fbd0 	bl	800bb1e <USBD_LL_Reset>
}
 801037e:	bf00      	nop
 8010380:	3710      	adds	r7, #16
 8010382:	46bd      	mov	sp, r7
 8010384:	bd80      	pop	{r7, pc}
	...

08010388 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b082      	sub	sp, #8
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010396:	4618      	mov	r0, r3
 8010398:	f7fb fc23 	bl	800bbe2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	687a      	ldr	r2, [r7, #4]
 80103a8:	6812      	ldr	r2, [r2, #0]
 80103aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80103ae:	f043 0301 	orr.w	r3, r3, #1
 80103b2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	6a1b      	ldr	r3, [r3, #32]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d005      	beq.n	80103c8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80103bc:	4b04      	ldr	r3, [pc, #16]	; (80103d0 <HAL_PCD_SuspendCallback+0x48>)
 80103be:	691b      	ldr	r3, [r3, #16]
 80103c0:	4a03      	ldr	r2, [pc, #12]	; (80103d0 <HAL_PCD_SuspendCallback+0x48>)
 80103c2:	f043 0306 	orr.w	r3, r3, #6
 80103c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80103c8:	bf00      	nop
 80103ca:	3708      	adds	r7, #8
 80103cc:	46bd      	mov	sp, r7
 80103ce:	bd80      	pop	{r7, pc}
 80103d0:	e000ed00 	.word	0xe000ed00

080103d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b082      	sub	sp, #8
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80103e2:	4618      	mov	r0, r3
 80103e4:	f7fb fc13 	bl	800bc0e <USBD_LL_Resume>
}
 80103e8:	bf00      	nop
 80103ea:	3708      	adds	r7, #8
 80103ec:	46bd      	mov	sp, r7
 80103ee:	bd80      	pop	{r7, pc}

080103f0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b082      	sub	sp, #8
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
 80103f8:	460b      	mov	r3, r1
 80103fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010402:	78fa      	ldrb	r2, [r7, #3]
 8010404:	4611      	mov	r1, r2
 8010406:	4618      	mov	r0, r3
 8010408:	f7fb fc6b 	bl	800bce2 <USBD_LL_IsoOUTIncomplete>
}
 801040c:	bf00      	nop
 801040e:	3708      	adds	r7, #8
 8010410:	46bd      	mov	sp, r7
 8010412:	bd80      	pop	{r7, pc}

08010414 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b082      	sub	sp, #8
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
 801041c:	460b      	mov	r3, r1
 801041e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010426:	78fa      	ldrb	r2, [r7, #3]
 8010428:	4611      	mov	r1, r2
 801042a:	4618      	mov	r0, r3
 801042c:	f7fb fc27 	bl	800bc7e <USBD_LL_IsoINIncomplete>
}
 8010430:	bf00      	nop
 8010432:	3708      	adds	r7, #8
 8010434:	46bd      	mov	sp, r7
 8010436:	bd80      	pop	{r7, pc}

08010438 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b082      	sub	sp, #8
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010446:	4618      	mov	r0, r3
 8010448:	f7fb fc7d 	bl	800bd46 <USBD_LL_DevConnected>
}
 801044c:	bf00      	nop
 801044e:	3708      	adds	r7, #8
 8010450:	46bd      	mov	sp, r7
 8010452:	bd80      	pop	{r7, pc}

08010454 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010454:	b580      	push	{r7, lr}
 8010456:	b082      	sub	sp, #8
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010462:	4618      	mov	r0, r3
 8010464:	f7fb fc7a 	bl	800bd5c <USBD_LL_DevDisconnected>
}
 8010468:	bf00      	nop
 801046a:	3708      	adds	r7, #8
 801046c:	46bd      	mov	sp, r7
 801046e:	bd80      	pop	{r7, pc}

08010470 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b082      	sub	sp, #8
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	781b      	ldrb	r3, [r3, #0]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d13c      	bne.n	80104fa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010480:	4a20      	ldr	r2, [pc, #128]	; (8010504 <USBD_LL_Init+0x94>)
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	4a1e      	ldr	r2, [pc, #120]	; (8010504 <USBD_LL_Init+0x94>)
 801048c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010490:	4b1c      	ldr	r3, [pc, #112]	; (8010504 <USBD_LL_Init+0x94>)
 8010492:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010496:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8010498:	4b1a      	ldr	r3, [pc, #104]	; (8010504 <USBD_LL_Init+0x94>)
 801049a:	2206      	movs	r2, #6
 801049c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801049e:	4b19      	ldr	r3, [pc, #100]	; (8010504 <USBD_LL_Init+0x94>)
 80104a0:	2202      	movs	r2, #2
 80104a2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80104a4:	4b17      	ldr	r3, [pc, #92]	; (8010504 <USBD_LL_Init+0x94>)
 80104a6:	2200      	movs	r2, #0
 80104a8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80104aa:	4b16      	ldr	r3, [pc, #88]	; (8010504 <USBD_LL_Init+0x94>)
 80104ac:	2202      	movs	r2, #2
 80104ae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80104b0:	4b14      	ldr	r3, [pc, #80]	; (8010504 <USBD_LL_Init+0x94>)
 80104b2:	2200      	movs	r2, #0
 80104b4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80104b6:	4b13      	ldr	r3, [pc, #76]	; (8010504 <USBD_LL_Init+0x94>)
 80104b8:	2200      	movs	r2, #0
 80104ba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80104bc:	4b11      	ldr	r3, [pc, #68]	; (8010504 <USBD_LL_Init+0x94>)
 80104be:	2200      	movs	r2, #0
 80104c0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80104c2:	4b10      	ldr	r3, [pc, #64]	; (8010504 <USBD_LL_Init+0x94>)
 80104c4:	2200      	movs	r2, #0
 80104c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80104c8:	4b0e      	ldr	r3, [pc, #56]	; (8010504 <USBD_LL_Init+0x94>)
 80104ca:	2200      	movs	r2, #0
 80104cc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80104ce:	480d      	ldr	r0, [pc, #52]	; (8010504 <USBD_LL_Init+0x94>)
 80104d0:	f7f3 fe4d 	bl	800416e <HAL_PCD_Init>
 80104d4:	4603      	mov	r3, r0
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d001      	beq.n	80104de <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80104da:	f7f0 fea5 	bl	8001228 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80104de:	2180      	movs	r1, #128	; 0x80
 80104e0:	4808      	ldr	r0, [pc, #32]	; (8010504 <USBD_LL_Init+0x94>)
 80104e2:	f7f5 f8c8 	bl	8005676 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80104e6:	2240      	movs	r2, #64	; 0x40
 80104e8:	2100      	movs	r1, #0
 80104ea:	4806      	ldr	r0, [pc, #24]	; (8010504 <USBD_LL_Init+0x94>)
 80104ec:	f7f5 f87c 	bl	80055e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80104f0:	2280      	movs	r2, #128	; 0x80
 80104f2:	2101      	movs	r1, #1
 80104f4:	4803      	ldr	r0, [pc, #12]	; (8010504 <USBD_LL_Init+0x94>)
 80104f6:	f7f5 f877 	bl	80055e8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80104fa:	2300      	movs	r3, #0
}
 80104fc:	4618      	mov	r0, r3
 80104fe:	3708      	adds	r7, #8
 8010500:	46bd      	mov	sp, r7
 8010502:	bd80      	pop	{r7, pc}
 8010504:	20002d14 	.word	0x20002d14

08010508 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b084      	sub	sp, #16
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010510:	2300      	movs	r3, #0
 8010512:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010514:	2300      	movs	r3, #0
 8010516:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801051e:	4618      	mov	r0, r3
 8010520:	f7f3 ff49 	bl	80043b6 <HAL_PCD_Start>
 8010524:	4603      	mov	r3, r0
 8010526:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010528:	7bfb      	ldrb	r3, [r7, #15]
 801052a:	4618      	mov	r0, r3
 801052c:	f000 f97e 	bl	801082c <USBD_Get_USB_Status>
 8010530:	4603      	mov	r3, r0
 8010532:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010534:	7bbb      	ldrb	r3, [r7, #14]
}
 8010536:	4618      	mov	r0, r3
 8010538:	3710      	adds	r7, #16
 801053a:	46bd      	mov	sp, r7
 801053c:	bd80      	pop	{r7, pc}

0801053e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801053e:	b580      	push	{r7, lr}
 8010540:	b084      	sub	sp, #16
 8010542:	af00      	add	r7, sp, #0
 8010544:	6078      	str	r0, [r7, #4]
 8010546:	4608      	mov	r0, r1
 8010548:	4611      	mov	r1, r2
 801054a:	461a      	mov	r2, r3
 801054c:	4603      	mov	r3, r0
 801054e:	70fb      	strb	r3, [r7, #3]
 8010550:	460b      	mov	r3, r1
 8010552:	70bb      	strb	r3, [r7, #2]
 8010554:	4613      	mov	r3, r2
 8010556:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010558:	2300      	movs	r3, #0
 801055a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801055c:	2300      	movs	r3, #0
 801055e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010566:	78bb      	ldrb	r3, [r7, #2]
 8010568:	883a      	ldrh	r2, [r7, #0]
 801056a:	78f9      	ldrb	r1, [r7, #3]
 801056c:	f7f4 fc36 	bl	8004ddc <HAL_PCD_EP_Open>
 8010570:	4603      	mov	r3, r0
 8010572:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010574:	7bfb      	ldrb	r3, [r7, #15]
 8010576:	4618      	mov	r0, r3
 8010578:	f000 f958 	bl	801082c <USBD_Get_USB_Status>
 801057c:	4603      	mov	r3, r0
 801057e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010580:	7bbb      	ldrb	r3, [r7, #14]
}
 8010582:	4618      	mov	r0, r3
 8010584:	3710      	adds	r7, #16
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}

0801058a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801058a:	b580      	push	{r7, lr}
 801058c:	b084      	sub	sp, #16
 801058e:	af00      	add	r7, sp, #0
 8010590:	6078      	str	r0, [r7, #4]
 8010592:	460b      	mov	r3, r1
 8010594:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010596:	2300      	movs	r3, #0
 8010598:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801059a:	2300      	movs	r3, #0
 801059c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80105a4:	78fa      	ldrb	r2, [r7, #3]
 80105a6:	4611      	mov	r1, r2
 80105a8:	4618      	mov	r0, r3
 80105aa:	f7f4 fc7f 	bl	8004eac <HAL_PCD_EP_Close>
 80105ae:	4603      	mov	r3, r0
 80105b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80105b2:	7bfb      	ldrb	r3, [r7, #15]
 80105b4:	4618      	mov	r0, r3
 80105b6:	f000 f939 	bl	801082c <USBD_Get_USB_Status>
 80105ba:	4603      	mov	r3, r0
 80105bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80105be:	7bbb      	ldrb	r3, [r7, #14]
}
 80105c0:	4618      	mov	r0, r3
 80105c2:	3710      	adds	r7, #16
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}

080105c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b084      	sub	sp, #16
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
 80105d0:	460b      	mov	r3, r1
 80105d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105d4:	2300      	movs	r3, #0
 80105d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105d8:	2300      	movs	r3, #0
 80105da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80105e2:	78fa      	ldrb	r2, [r7, #3]
 80105e4:	4611      	mov	r1, r2
 80105e6:	4618      	mov	r0, r3
 80105e8:	f7f4 fd57 	bl	800509a <HAL_PCD_EP_SetStall>
 80105ec:	4603      	mov	r3, r0
 80105ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80105f0:	7bfb      	ldrb	r3, [r7, #15]
 80105f2:	4618      	mov	r0, r3
 80105f4:	f000 f91a 	bl	801082c <USBD_Get_USB_Status>
 80105f8:	4603      	mov	r3, r0
 80105fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80105fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80105fe:	4618      	mov	r0, r3
 8010600:	3710      	adds	r7, #16
 8010602:	46bd      	mov	sp, r7
 8010604:	bd80      	pop	{r7, pc}

08010606 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010606:	b580      	push	{r7, lr}
 8010608:	b084      	sub	sp, #16
 801060a:	af00      	add	r7, sp, #0
 801060c:	6078      	str	r0, [r7, #4]
 801060e:	460b      	mov	r3, r1
 8010610:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010612:	2300      	movs	r3, #0
 8010614:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010616:	2300      	movs	r3, #0
 8010618:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010620:	78fa      	ldrb	r2, [r7, #3]
 8010622:	4611      	mov	r1, r2
 8010624:	4618      	mov	r0, r3
 8010626:	f7f4 fd9c 	bl	8005162 <HAL_PCD_EP_ClrStall>
 801062a:	4603      	mov	r3, r0
 801062c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801062e:	7bfb      	ldrb	r3, [r7, #15]
 8010630:	4618      	mov	r0, r3
 8010632:	f000 f8fb 	bl	801082c <USBD_Get_USB_Status>
 8010636:	4603      	mov	r3, r0
 8010638:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801063a:	7bbb      	ldrb	r3, [r7, #14]
}
 801063c:	4618      	mov	r0, r3
 801063e:	3710      	adds	r7, #16
 8010640:	46bd      	mov	sp, r7
 8010642:	bd80      	pop	{r7, pc}

08010644 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010644:	b480      	push	{r7}
 8010646:	b085      	sub	sp, #20
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
 801064c:	460b      	mov	r3, r1
 801064e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010656:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010658:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801065c:	2b00      	cmp	r3, #0
 801065e:	da0b      	bge.n	8010678 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010660:	78fb      	ldrb	r3, [r7, #3]
 8010662:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010666:	68f9      	ldr	r1, [r7, #12]
 8010668:	4613      	mov	r3, r2
 801066a:	00db      	lsls	r3, r3, #3
 801066c:	4413      	add	r3, r2
 801066e:	009b      	lsls	r3, r3, #2
 8010670:	440b      	add	r3, r1
 8010672:	333e      	adds	r3, #62	; 0x3e
 8010674:	781b      	ldrb	r3, [r3, #0]
 8010676:	e00b      	b.n	8010690 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010678:	78fb      	ldrb	r3, [r7, #3]
 801067a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801067e:	68f9      	ldr	r1, [r7, #12]
 8010680:	4613      	mov	r3, r2
 8010682:	00db      	lsls	r3, r3, #3
 8010684:	4413      	add	r3, r2
 8010686:	009b      	lsls	r3, r3, #2
 8010688:	440b      	add	r3, r1
 801068a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801068e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010690:	4618      	mov	r0, r3
 8010692:	3714      	adds	r7, #20
 8010694:	46bd      	mov	sp, r7
 8010696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801069a:	4770      	bx	lr

0801069c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801069c:	b580      	push	{r7, lr}
 801069e:	b084      	sub	sp, #16
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
 80106a4:	460b      	mov	r3, r1
 80106a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106a8:	2300      	movs	r3, #0
 80106aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106ac:	2300      	movs	r3, #0
 80106ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80106b6:	78fa      	ldrb	r2, [r7, #3]
 80106b8:	4611      	mov	r1, r2
 80106ba:	4618      	mov	r0, r3
 80106bc:	f7f4 fb69 	bl	8004d92 <HAL_PCD_SetAddress>
 80106c0:	4603      	mov	r3, r0
 80106c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106c4:	7bfb      	ldrb	r3, [r7, #15]
 80106c6:	4618      	mov	r0, r3
 80106c8:	f000 f8b0 	bl	801082c <USBD_Get_USB_Status>
 80106cc:	4603      	mov	r3, r0
 80106ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80106d2:	4618      	mov	r0, r3
 80106d4:	3710      	adds	r7, #16
 80106d6:	46bd      	mov	sp, r7
 80106d8:	bd80      	pop	{r7, pc}

080106da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80106da:	b580      	push	{r7, lr}
 80106dc:	b086      	sub	sp, #24
 80106de:	af00      	add	r7, sp, #0
 80106e0:	60f8      	str	r0, [r7, #12]
 80106e2:	607a      	str	r2, [r7, #4]
 80106e4:	603b      	str	r3, [r7, #0]
 80106e6:	460b      	mov	r3, r1
 80106e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106ea:	2300      	movs	r3, #0
 80106ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106ee:	2300      	movs	r3, #0
 80106f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80106f8:	7af9      	ldrb	r1, [r7, #11]
 80106fa:	683b      	ldr	r3, [r7, #0]
 80106fc:	687a      	ldr	r2, [r7, #4]
 80106fe:	f7f4 fc82 	bl	8005006 <HAL_PCD_EP_Transmit>
 8010702:	4603      	mov	r3, r0
 8010704:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010706:	7dfb      	ldrb	r3, [r7, #23]
 8010708:	4618      	mov	r0, r3
 801070a:	f000 f88f 	bl	801082c <USBD_Get_USB_Status>
 801070e:	4603      	mov	r3, r0
 8010710:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010712:	7dbb      	ldrb	r3, [r7, #22]
}
 8010714:	4618      	mov	r0, r3
 8010716:	3718      	adds	r7, #24
 8010718:	46bd      	mov	sp, r7
 801071a:	bd80      	pop	{r7, pc}

0801071c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b086      	sub	sp, #24
 8010720:	af00      	add	r7, sp, #0
 8010722:	60f8      	str	r0, [r7, #12]
 8010724:	607a      	str	r2, [r7, #4]
 8010726:	603b      	str	r3, [r7, #0]
 8010728:	460b      	mov	r3, r1
 801072a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801072c:	2300      	movs	r3, #0
 801072e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010730:	2300      	movs	r3, #0
 8010732:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801073a:	7af9      	ldrb	r1, [r7, #11]
 801073c:	683b      	ldr	r3, [r7, #0]
 801073e:	687a      	ldr	r2, [r7, #4]
 8010740:	f7f4 fbfe 	bl	8004f40 <HAL_PCD_EP_Receive>
 8010744:	4603      	mov	r3, r0
 8010746:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010748:	7dfb      	ldrb	r3, [r7, #23]
 801074a:	4618      	mov	r0, r3
 801074c:	f000 f86e 	bl	801082c <USBD_Get_USB_Status>
 8010750:	4603      	mov	r3, r0
 8010752:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010754:	7dbb      	ldrb	r3, [r7, #22]
}
 8010756:	4618      	mov	r0, r3
 8010758:	3718      	adds	r7, #24
 801075a:	46bd      	mov	sp, r7
 801075c:	bd80      	pop	{r7, pc}

0801075e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801075e:	b580      	push	{r7, lr}
 8010760:	b082      	sub	sp, #8
 8010762:	af00      	add	r7, sp, #0
 8010764:	6078      	str	r0, [r7, #4]
 8010766:	460b      	mov	r3, r1
 8010768:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010770:	78fa      	ldrb	r2, [r7, #3]
 8010772:	4611      	mov	r1, r2
 8010774:	4618      	mov	r0, r3
 8010776:	f7f4 fc2e 	bl	8004fd6 <HAL_PCD_EP_GetRxCount>
 801077a:	4603      	mov	r3, r0
}
 801077c:	4618      	mov	r0, r3
 801077e:	3708      	adds	r7, #8
 8010780:	46bd      	mov	sp, r7
 8010782:	bd80      	pop	{r7, pc}

08010784 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b082      	sub	sp, #8
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
 801078c:	460b      	mov	r3, r1
 801078e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8010790:	78fb      	ldrb	r3, [r7, #3]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d002      	beq.n	801079c <HAL_PCDEx_LPM_Callback+0x18>
 8010796:	2b01      	cmp	r3, #1
 8010798:	d01f      	beq.n	80107da <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801079a:	e03b      	b.n	8010814 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	6a1b      	ldr	r3, [r3, #32]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d007      	beq.n	80107b4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80107a4:	f000 f83c 	bl	8010820 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80107a8:	4b1c      	ldr	r3, [pc, #112]	; (801081c <HAL_PCDEx_LPM_Callback+0x98>)
 80107aa:	691b      	ldr	r3, [r3, #16]
 80107ac:	4a1b      	ldr	r2, [pc, #108]	; (801081c <HAL_PCDEx_LPM_Callback+0x98>)
 80107ae:	f023 0306 	bic.w	r3, r3, #6
 80107b2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	687a      	ldr	r2, [r7, #4]
 80107c0:	6812      	ldr	r2, [r2, #0]
 80107c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80107c6:	f023 0301 	bic.w	r3, r3, #1
 80107ca:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80107d2:	4618      	mov	r0, r3
 80107d4:	f7fb fa1b 	bl	800bc0e <USBD_LL_Resume>
    break;
 80107d8:	e01c      	b.n	8010814 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	687a      	ldr	r2, [r7, #4]
 80107e6:	6812      	ldr	r2, [r2, #0]
 80107e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80107ec:	f043 0301 	orr.w	r3, r3, #1
 80107f0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80107f8:	4618      	mov	r0, r3
 80107fa:	f7fb f9f2 	bl	800bbe2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	6a1b      	ldr	r3, [r3, #32]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d005      	beq.n	8010812 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010806:	4b05      	ldr	r3, [pc, #20]	; (801081c <HAL_PCDEx_LPM_Callback+0x98>)
 8010808:	691b      	ldr	r3, [r3, #16]
 801080a:	4a04      	ldr	r2, [pc, #16]	; (801081c <HAL_PCDEx_LPM_Callback+0x98>)
 801080c:	f043 0306 	orr.w	r3, r3, #6
 8010810:	6113      	str	r3, [r2, #16]
    break;
 8010812:	bf00      	nop
}
 8010814:	bf00      	nop
 8010816:	3708      	adds	r7, #8
 8010818:	46bd      	mov	sp, r7
 801081a:	bd80      	pop	{r7, pc}
 801081c:	e000ed00 	.word	0xe000ed00

08010820 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010820:	b580      	push	{r7, lr}
 8010822:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010824:	f7f0 f9ac 	bl	8000b80 <SystemClock_Config>
}
 8010828:	bf00      	nop
 801082a:	bd80      	pop	{r7, pc}

0801082c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801082c:	b480      	push	{r7}
 801082e:	b085      	sub	sp, #20
 8010830:	af00      	add	r7, sp, #0
 8010832:	4603      	mov	r3, r0
 8010834:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010836:	2300      	movs	r3, #0
 8010838:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801083a:	79fb      	ldrb	r3, [r7, #7]
 801083c:	2b03      	cmp	r3, #3
 801083e:	d817      	bhi.n	8010870 <USBD_Get_USB_Status+0x44>
 8010840:	a201      	add	r2, pc, #4	; (adr r2, 8010848 <USBD_Get_USB_Status+0x1c>)
 8010842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010846:	bf00      	nop
 8010848:	08010859 	.word	0x08010859
 801084c:	0801085f 	.word	0x0801085f
 8010850:	08010865 	.word	0x08010865
 8010854:	0801086b 	.word	0x0801086b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010858:	2300      	movs	r3, #0
 801085a:	73fb      	strb	r3, [r7, #15]
    break;
 801085c:	e00b      	b.n	8010876 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801085e:	2303      	movs	r3, #3
 8010860:	73fb      	strb	r3, [r7, #15]
    break;
 8010862:	e008      	b.n	8010876 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010864:	2301      	movs	r3, #1
 8010866:	73fb      	strb	r3, [r7, #15]
    break;
 8010868:	e005      	b.n	8010876 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801086a:	2303      	movs	r3, #3
 801086c:	73fb      	strb	r3, [r7, #15]
    break;
 801086e:	e002      	b.n	8010876 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010870:	2303      	movs	r3, #3
 8010872:	73fb      	strb	r3, [r7, #15]
    break;
 8010874:	bf00      	nop
  }
  return usb_status;
 8010876:	7bfb      	ldrb	r3, [r7, #15]
}
 8010878:	4618      	mov	r0, r3
 801087a:	3714      	adds	r7, #20
 801087c:	46bd      	mov	sp, r7
 801087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010882:	4770      	bx	lr

08010884 <malloc>:
 8010884:	4b02      	ldr	r3, [pc, #8]	; (8010890 <malloc+0xc>)
 8010886:	4601      	mov	r1, r0
 8010888:	6818      	ldr	r0, [r3, #0]
 801088a:	f000 b82b 	b.w	80108e4 <_malloc_r>
 801088e:	bf00      	nop
 8010890:	20000168 	.word	0x20000168

08010894 <free>:
 8010894:	4b02      	ldr	r3, [pc, #8]	; (80108a0 <free+0xc>)
 8010896:	4601      	mov	r1, r0
 8010898:	6818      	ldr	r0, [r3, #0]
 801089a:	f000 ba59 	b.w	8010d50 <_free_r>
 801089e:	bf00      	nop
 80108a0:	20000168 	.word	0x20000168

080108a4 <sbrk_aligned>:
 80108a4:	b570      	push	{r4, r5, r6, lr}
 80108a6:	4e0e      	ldr	r6, [pc, #56]	; (80108e0 <sbrk_aligned+0x3c>)
 80108a8:	460c      	mov	r4, r1
 80108aa:	6831      	ldr	r1, [r6, #0]
 80108ac:	4605      	mov	r5, r0
 80108ae:	b911      	cbnz	r1, 80108b6 <sbrk_aligned+0x12>
 80108b0:	f000 fa10 	bl	8010cd4 <_sbrk_r>
 80108b4:	6030      	str	r0, [r6, #0]
 80108b6:	4621      	mov	r1, r4
 80108b8:	4628      	mov	r0, r5
 80108ba:	f000 fa0b 	bl	8010cd4 <_sbrk_r>
 80108be:	1c43      	adds	r3, r0, #1
 80108c0:	d00a      	beq.n	80108d8 <sbrk_aligned+0x34>
 80108c2:	1cc4      	adds	r4, r0, #3
 80108c4:	f024 0403 	bic.w	r4, r4, #3
 80108c8:	42a0      	cmp	r0, r4
 80108ca:	d007      	beq.n	80108dc <sbrk_aligned+0x38>
 80108cc:	1a21      	subs	r1, r4, r0
 80108ce:	4628      	mov	r0, r5
 80108d0:	f000 fa00 	bl	8010cd4 <_sbrk_r>
 80108d4:	3001      	adds	r0, #1
 80108d6:	d101      	bne.n	80108dc <sbrk_aligned+0x38>
 80108d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80108dc:	4620      	mov	r0, r4
 80108de:	bd70      	pop	{r4, r5, r6, pc}
 80108e0:	20003220 	.word	0x20003220

080108e4 <_malloc_r>:
 80108e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108e8:	1ccd      	adds	r5, r1, #3
 80108ea:	f025 0503 	bic.w	r5, r5, #3
 80108ee:	3508      	adds	r5, #8
 80108f0:	2d0c      	cmp	r5, #12
 80108f2:	bf38      	it	cc
 80108f4:	250c      	movcc	r5, #12
 80108f6:	2d00      	cmp	r5, #0
 80108f8:	4607      	mov	r7, r0
 80108fa:	db01      	blt.n	8010900 <_malloc_r+0x1c>
 80108fc:	42a9      	cmp	r1, r5
 80108fe:	d905      	bls.n	801090c <_malloc_r+0x28>
 8010900:	230c      	movs	r3, #12
 8010902:	603b      	str	r3, [r7, #0]
 8010904:	2600      	movs	r6, #0
 8010906:	4630      	mov	r0, r6
 8010908:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801090c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80109e0 <_malloc_r+0xfc>
 8010910:	f000 f89c 	bl	8010a4c <__malloc_lock>
 8010914:	f8d8 3000 	ldr.w	r3, [r8]
 8010918:	461c      	mov	r4, r3
 801091a:	bb5c      	cbnz	r4, 8010974 <_malloc_r+0x90>
 801091c:	4629      	mov	r1, r5
 801091e:	4638      	mov	r0, r7
 8010920:	f7ff ffc0 	bl	80108a4 <sbrk_aligned>
 8010924:	1c43      	adds	r3, r0, #1
 8010926:	4604      	mov	r4, r0
 8010928:	d155      	bne.n	80109d6 <_malloc_r+0xf2>
 801092a:	f8d8 4000 	ldr.w	r4, [r8]
 801092e:	4626      	mov	r6, r4
 8010930:	2e00      	cmp	r6, #0
 8010932:	d145      	bne.n	80109c0 <_malloc_r+0xdc>
 8010934:	2c00      	cmp	r4, #0
 8010936:	d048      	beq.n	80109ca <_malloc_r+0xe6>
 8010938:	6823      	ldr	r3, [r4, #0]
 801093a:	4631      	mov	r1, r6
 801093c:	4638      	mov	r0, r7
 801093e:	eb04 0903 	add.w	r9, r4, r3
 8010942:	f000 f9c7 	bl	8010cd4 <_sbrk_r>
 8010946:	4581      	cmp	r9, r0
 8010948:	d13f      	bne.n	80109ca <_malloc_r+0xe6>
 801094a:	6821      	ldr	r1, [r4, #0]
 801094c:	1a6d      	subs	r5, r5, r1
 801094e:	4629      	mov	r1, r5
 8010950:	4638      	mov	r0, r7
 8010952:	f7ff ffa7 	bl	80108a4 <sbrk_aligned>
 8010956:	3001      	adds	r0, #1
 8010958:	d037      	beq.n	80109ca <_malloc_r+0xe6>
 801095a:	6823      	ldr	r3, [r4, #0]
 801095c:	442b      	add	r3, r5
 801095e:	6023      	str	r3, [r4, #0]
 8010960:	f8d8 3000 	ldr.w	r3, [r8]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d038      	beq.n	80109da <_malloc_r+0xf6>
 8010968:	685a      	ldr	r2, [r3, #4]
 801096a:	42a2      	cmp	r2, r4
 801096c:	d12b      	bne.n	80109c6 <_malloc_r+0xe2>
 801096e:	2200      	movs	r2, #0
 8010970:	605a      	str	r2, [r3, #4]
 8010972:	e00f      	b.n	8010994 <_malloc_r+0xb0>
 8010974:	6822      	ldr	r2, [r4, #0]
 8010976:	1b52      	subs	r2, r2, r5
 8010978:	d41f      	bmi.n	80109ba <_malloc_r+0xd6>
 801097a:	2a0b      	cmp	r2, #11
 801097c:	d917      	bls.n	80109ae <_malloc_r+0xca>
 801097e:	1961      	adds	r1, r4, r5
 8010980:	42a3      	cmp	r3, r4
 8010982:	6025      	str	r5, [r4, #0]
 8010984:	bf18      	it	ne
 8010986:	6059      	strne	r1, [r3, #4]
 8010988:	6863      	ldr	r3, [r4, #4]
 801098a:	bf08      	it	eq
 801098c:	f8c8 1000 	streq.w	r1, [r8]
 8010990:	5162      	str	r2, [r4, r5]
 8010992:	604b      	str	r3, [r1, #4]
 8010994:	4638      	mov	r0, r7
 8010996:	f104 060b 	add.w	r6, r4, #11
 801099a:	f000 f85d 	bl	8010a58 <__malloc_unlock>
 801099e:	f026 0607 	bic.w	r6, r6, #7
 80109a2:	1d23      	adds	r3, r4, #4
 80109a4:	1af2      	subs	r2, r6, r3
 80109a6:	d0ae      	beq.n	8010906 <_malloc_r+0x22>
 80109a8:	1b9b      	subs	r3, r3, r6
 80109aa:	50a3      	str	r3, [r4, r2]
 80109ac:	e7ab      	b.n	8010906 <_malloc_r+0x22>
 80109ae:	42a3      	cmp	r3, r4
 80109b0:	6862      	ldr	r2, [r4, #4]
 80109b2:	d1dd      	bne.n	8010970 <_malloc_r+0x8c>
 80109b4:	f8c8 2000 	str.w	r2, [r8]
 80109b8:	e7ec      	b.n	8010994 <_malloc_r+0xb0>
 80109ba:	4623      	mov	r3, r4
 80109bc:	6864      	ldr	r4, [r4, #4]
 80109be:	e7ac      	b.n	801091a <_malloc_r+0x36>
 80109c0:	4634      	mov	r4, r6
 80109c2:	6876      	ldr	r6, [r6, #4]
 80109c4:	e7b4      	b.n	8010930 <_malloc_r+0x4c>
 80109c6:	4613      	mov	r3, r2
 80109c8:	e7cc      	b.n	8010964 <_malloc_r+0x80>
 80109ca:	230c      	movs	r3, #12
 80109cc:	603b      	str	r3, [r7, #0]
 80109ce:	4638      	mov	r0, r7
 80109d0:	f000 f842 	bl	8010a58 <__malloc_unlock>
 80109d4:	e797      	b.n	8010906 <_malloc_r+0x22>
 80109d6:	6025      	str	r5, [r4, #0]
 80109d8:	e7dc      	b.n	8010994 <_malloc_r+0xb0>
 80109da:	605b      	str	r3, [r3, #4]
 80109dc:	deff      	udf	#255	; 0xff
 80109de:	bf00      	nop
 80109e0:	2000321c 	.word	0x2000321c

080109e4 <sniprintf>:
 80109e4:	b40c      	push	{r2, r3}
 80109e6:	b530      	push	{r4, r5, lr}
 80109e8:	4b17      	ldr	r3, [pc, #92]	; (8010a48 <sniprintf+0x64>)
 80109ea:	1e0c      	subs	r4, r1, #0
 80109ec:	681d      	ldr	r5, [r3, #0]
 80109ee:	b09d      	sub	sp, #116	; 0x74
 80109f0:	da08      	bge.n	8010a04 <sniprintf+0x20>
 80109f2:	238b      	movs	r3, #139	; 0x8b
 80109f4:	602b      	str	r3, [r5, #0]
 80109f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80109fa:	b01d      	add	sp, #116	; 0x74
 80109fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010a00:	b002      	add	sp, #8
 8010a02:	4770      	bx	lr
 8010a04:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010a08:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010a0c:	bf14      	ite	ne
 8010a0e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8010a12:	4623      	moveq	r3, r4
 8010a14:	9304      	str	r3, [sp, #16]
 8010a16:	9307      	str	r3, [sp, #28]
 8010a18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010a1c:	9002      	str	r0, [sp, #8]
 8010a1e:	9006      	str	r0, [sp, #24]
 8010a20:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010a24:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010a26:	ab21      	add	r3, sp, #132	; 0x84
 8010a28:	a902      	add	r1, sp, #8
 8010a2a:	4628      	mov	r0, r5
 8010a2c:	9301      	str	r3, [sp, #4]
 8010a2e:	f000 fa35 	bl	8010e9c <_svfiprintf_r>
 8010a32:	1c43      	adds	r3, r0, #1
 8010a34:	bfbc      	itt	lt
 8010a36:	238b      	movlt	r3, #139	; 0x8b
 8010a38:	602b      	strlt	r3, [r5, #0]
 8010a3a:	2c00      	cmp	r4, #0
 8010a3c:	d0dd      	beq.n	80109fa <sniprintf+0x16>
 8010a3e:	9b02      	ldr	r3, [sp, #8]
 8010a40:	2200      	movs	r2, #0
 8010a42:	701a      	strb	r2, [r3, #0]
 8010a44:	e7d9      	b.n	80109fa <sniprintf+0x16>
 8010a46:	bf00      	nop
 8010a48:	20000168 	.word	0x20000168

08010a4c <__malloc_lock>:
 8010a4c:	4801      	ldr	r0, [pc, #4]	; (8010a54 <__malloc_lock+0x8>)
 8010a4e:	f000 b97c 	b.w	8010d4a <__retarget_lock_acquire_recursive>
 8010a52:	bf00      	nop
 8010a54:	20003360 	.word	0x20003360

08010a58 <__malloc_unlock>:
 8010a58:	4801      	ldr	r0, [pc, #4]	; (8010a60 <__malloc_unlock+0x8>)
 8010a5a:	f000 b977 	b.w	8010d4c <__retarget_lock_release_recursive>
 8010a5e:	bf00      	nop
 8010a60:	20003360 	.word	0x20003360

08010a64 <std>:
 8010a64:	2300      	movs	r3, #0
 8010a66:	b510      	push	{r4, lr}
 8010a68:	4604      	mov	r4, r0
 8010a6a:	e9c0 3300 	strd	r3, r3, [r0]
 8010a6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010a72:	6083      	str	r3, [r0, #8]
 8010a74:	8181      	strh	r1, [r0, #12]
 8010a76:	6643      	str	r3, [r0, #100]	; 0x64
 8010a78:	81c2      	strh	r2, [r0, #14]
 8010a7a:	6183      	str	r3, [r0, #24]
 8010a7c:	4619      	mov	r1, r3
 8010a7e:	2208      	movs	r2, #8
 8010a80:	305c      	adds	r0, #92	; 0x5c
 8010a82:	f000 f91f 	bl	8010cc4 <memset>
 8010a86:	4b0d      	ldr	r3, [pc, #52]	; (8010abc <std+0x58>)
 8010a88:	6263      	str	r3, [r4, #36]	; 0x24
 8010a8a:	4b0d      	ldr	r3, [pc, #52]	; (8010ac0 <std+0x5c>)
 8010a8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8010a8e:	4b0d      	ldr	r3, [pc, #52]	; (8010ac4 <std+0x60>)
 8010a90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010a92:	4b0d      	ldr	r3, [pc, #52]	; (8010ac8 <std+0x64>)
 8010a94:	6323      	str	r3, [r4, #48]	; 0x30
 8010a96:	4b0d      	ldr	r3, [pc, #52]	; (8010acc <std+0x68>)
 8010a98:	6224      	str	r4, [r4, #32]
 8010a9a:	429c      	cmp	r4, r3
 8010a9c:	d006      	beq.n	8010aac <std+0x48>
 8010a9e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8010aa2:	4294      	cmp	r4, r2
 8010aa4:	d002      	beq.n	8010aac <std+0x48>
 8010aa6:	33d0      	adds	r3, #208	; 0xd0
 8010aa8:	429c      	cmp	r4, r3
 8010aaa:	d105      	bne.n	8010ab8 <std+0x54>
 8010aac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ab4:	f000 b948 	b.w	8010d48 <__retarget_lock_init_recursive>
 8010ab8:	bd10      	pop	{r4, pc}
 8010aba:	bf00      	nop
 8010abc:	0801179d 	.word	0x0801179d
 8010ac0:	080117bf 	.word	0x080117bf
 8010ac4:	080117f7 	.word	0x080117f7
 8010ac8:	0801181b 	.word	0x0801181b
 8010acc:	20003224 	.word	0x20003224

08010ad0 <stdio_exit_handler>:
 8010ad0:	4a02      	ldr	r2, [pc, #8]	; (8010adc <stdio_exit_handler+0xc>)
 8010ad2:	4903      	ldr	r1, [pc, #12]	; (8010ae0 <stdio_exit_handler+0x10>)
 8010ad4:	4803      	ldr	r0, [pc, #12]	; (8010ae4 <stdio_exit_handler+0x14>)
 8010ad6:	f000 b869 	b.w	8010bac <_fwalk_sglue>
 8010ada:	bf00      	nop
 8010adc:	20000110 	.word	0x20000110
 8010ae0:	0801174d 	.word	0x0801174d
 8010ae4:	2000011c 	.word	0x2000011c

08010ae8 <cleanup_stdio>:
 8010ae8:	6841      	ldr	r1, [r0, #4]
 8010aea:	4b0c      	ldr	r3, [pc, #48]	; (8010b1c <cleanup_stdio+0x34>)
 8010aec:	4299      	cmp	r1, r3
 8010aee:	b510      	push	{r4, lr}
 8010af0:	4604      	mov	r4, r0
 8010af2:	d001      	beq.n	8010af8 <cleanup_stdio+0x10>
 8010af4:	f000 fe2a 	bl	801174c <_fflush_r>
 8010af8:	68a1      	ldr	r1, [r4, #8]
 8010afa:	4b09      	ldr	r3, [pc, #36]	; (8010b20 <cleanup_stdio+0x38>)
 8010afc:	4299      	cmp	r1, r3
 8010afe:	d002      	beq.n	8010b06 <cleanup_stdio+0x1e>
 8010b00:	4620      	mov	r0, r4
 8010b02:	f000 fe23 	bl	801174c <_fflush_r>
 8010b06:	68e1      	ldr	r1, [r4, #12]
 8010b08:	4b06      	ldr	r3, [pc, #24]	; (8010b24 <cleanup_stdio+0x3c>)
 8010b0a:	4299      	cmp	r1, r3
 8010b0c:	d004      	beq.n	8010b18 <cleanup_stdio+0x30>
 8010b0e:	4620      	mov	r0, r4
 8010b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b14:	f000 be1a 	b.w	801174c <_fflush_r>
 8010b18:	bd10      	pop	{r4, pc}
 8010b1a:	bf00      	nop
 8010b1c:	20003224 	.word	0x20003224
 8010b20:	2000328c 	.word	0x2000328c
 8010b24:	200032f4 	.word	0x200032f4

08010b28 <global_stdio_init.part.0>:
 8010b28:	b510      	push	{r4, lr}
 8010b2a:	4b0b      	ldr	r3, [pc, #44]	; (8010b58 <global_stdio_init.part.0+0x30>)
 8010b2c:	4c0b      	ldr	r4, [pc, #44]	; (8010b5c <global_stdio_init.part.0+0x34>)
 8010b2e:	4a0c      	ldr	r2, [pc, #48]	; (8010b60 <global_stdio_init.part.0+0x38>)
 8010b30:	601a      	str	r2, [r3, #0]
 8010b32:	4620      	mov	r0, r4
 8010b34:	2200      	movs	r2, #0
 8010b36:	2104      	movs	r1, #4
 8010b38:	f7ff ff94 	bl	8010a64 <std>
 8010b3c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8010b40:	2201      	movs	r2, #1
 8010b42:	2109      	movs	r1, #9
 8010b44:	f7ff ff8e 	bl	8010a64 <std>
 8010b48:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010b4c:	2202      	movs	r2, #2
 8010b4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b52:	2112      	movs	r1, #18
 8010b54:	f7ff bf86 	b.w	8010a64 <std>
 8010b58:	2000335c 	.word	0x2000335c
 8010b5c:	20003224 	.word	0x20003224
 8010b60:	08010ad1 	.word	0x08010ad1

08010b64 <__sfp_lock_acquire>:
 8010b64:	4801      	ldr	r0, [pc, #4]	; (8010b6c <__sfp_lock_acquire+0x8>)
 8010b66:	f000 b8f0 	b.w	8010d4a <__retarget_lock_acquire_recursive>
 8010b6a:	bf00      	nop
 8010b6c:	20003361 	.word	0x20003361

08010b70 <__sfp_lock_release>:
 8010b70:	4801      	ldr	r0, [pc, #4]	; (8010b78 <__sfp_lock_release+0x8>)
 8010b72:	f000 b8eb 	b.w	8010d4c <__retarget_lock_release_recursive>
 8010b76:	bf00      	nop
 8010b78:	20003361 	.word	0x20003361

08010b7c <__sinit>:
 8010b7c:	b510      	push	{r4, lr}
 8010b7e:	4604      	mov	r4, r0
 8010b80:	f7ff fff0 	bl	8010b64 <__sfp_lock_acquire>
 8010b84:	6a23      	ldr	r3, [r4, #32]
 8010b86:	b11b      	cbz	r3, 8010b90 <__sinit+0x14>
 8010b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b8c:	f7ff bff0 	b.w	8010b70 <__sfp_lock_release>
 8010b90:	4b04      	ldr	r3, [pc, #16]	; (8010ba4 <__sinit+0x28>)
 8010b92:	6223      	str	r3, [r4, #32]
 8010b94:	4b04      	ldr	r3, [pc, #16]	; (8010ba8 <__sinit+0x2c>)
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d1f5      	bne.n	8010b88 <__sinit+0xc>
 8010b9c:	f7ff ffc4 	bl	8010b28 <global_stdio_init.part.0>
 8010ba0:	e7f2      	b.n	8010b88 <__sinit+0xc>
 8010ba2:	bf00      	nop
 8010ba4:	08010ae9 	.word	0x08010ae9
 8010ba8:	2000335c 	.word	0x2000335c

08010bac <_fwalk_sglue>:
 8010bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bb0:	4607      	mov	r7, r0
 8010bb2:	4688      	mov	r8, r1
 8010bb4:	4614      	mov	r4, r2
 8010bb6:	2600      	movs	r6, #0
 8010bb8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010bbc:	f1b9 0901 	subs.w	r9, r9, #1
 8010bc0:	d505      	bpl.n	8010bce <_fwalk_sglue+0x22>
 8010bc2:	6824      	ldr	r4, [r4, #0]
 8010bc4:	2c00      	cmp	r4, #0
 8010bc6:	d1f7      	bne.n	8010bb8 <_fwalk_sglue+0xc>
 8010bc8:	4630      	mov	r0, r6
 8010bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bce:	89ab      	ldrh	r3, [r5, #12]
 8010bd0:	2b01      	cmp	r3, #1
 8010bd2:	d907      	bls.n	8010be4 <_fwalk_sglue+0x38>
 8010bd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010bd8:	3301      	adds	r3, #1
 8010bda:	d003      	beq.n	8010be4 <_fwalk_sglue+0x38>
 8010bdc:	4629      	mov	r1, r5
 8010bde:	4638      	mov	r0, r7
 8010be0:	47c0      	blx	r8
 8010be2:	4306      	orrs	r6, r0
 8010be4:	3568      	adds	r5, #104	; 0x68
 8010be6:	e7e9      	b.n	8010bbc <_fwalk_sglue+0x10>

08010be8 <iprintf>:
 8010be8:	b40f      	push	{r0, r1, r2, r3}
 8010bea:	b507      	push	{r0, r1, r2, lr}
 8010bec:	4906      	ldr	r1, [pc, #24]	; (8010c08 <iprintf+0x20>)
 8010bee:	ab04      	add	r3, sp, #16
 8010bf0:	6808      	ldr	r0, [r1, #0]
 8010bf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8010bf6:	6881      	ldr	r1, [r0, #8]
 8010bf8:	9301      	str	r3, [sp, #4]
 8010bfa:	f000 fa77 	bl	80110ec <_vfiprintf_r>
 8010bfe:	b003      	add	sp, #12
 8010c00:	f85d eb04 	ldr.w	lr, [sp], #4
 8010c04:	b004      	add	sp, #16
 8010c06:	4770      	bx	lr
 8010c08:	20000168 	.word	0x20000168

08010c0c <_puts_r>:
 8010c0c:	6a03      	ldr	r3, [r0, #32]
 8010c0e:	b570      	push	{r4, r5, r6, lr}
 8010c10:	6884      	ldr	r4, [r0, #8]
 8010c12:	4605      	mov	r5, r0
 8010c14:	460e      	mov	r6, r1
 8010c16:	b90b      	cbnz	r3, 8010c1c <_puts_r+0x10>
 8010c18:	f7ff ffb0 	bl	8010b7c <__sinit>
 8010c1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010c1e:	07db      	lsls	r3, r3, #31
 8010c20:	d405      	bmi.n	8010c2e <_puts_r+0x22>
 8010c22:	89a3      	ldrh	r3, [r4, #12]
 8010c24:	0598      	lsls	r0, r3, #22
 8010c26:	d402      	bmi.n	8010c2e <_puts_r+0x22>
 8010c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010c2a:	f000 f88e 	bl	8010d4a <__retarget_lock_acquire_recursive>
 8010c2e:	89a3      	ldrh	r3, [r4, #12]
 8010c30:	0719      	lsls	r1, r3, #28
 8010c32:	d513      	bpl.n	8010c5c <_puts_r+0x50>
 8010c34:	6923      	ldr	r3, [r4, #16]
 8010c36:	b18b      	cbz	r3, 8010c5c <_puts_r+0x50>
 8010c38:	3e01      	subs	r6, #1
 8010c3a:	68a3      	ldr	r3, [r4, #8]
 8010c3c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010c40:	3b01      	subs	r3, #1
 8010c42:	60a3      	str	r3, [r4, #8]
 8010c44:	b9e9      	cbnz	r1, 8010c82 <_puts_r+0x76>
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	da2e      	bge.n	8010ca8 <_puts_r+0x9c>
 8010c4a:	4622      	mov	r2, r4
 8010c4c:	210a      	movs	r1, #10
 8010c4e:	4628      	mov	r0, r5
 8010c50:	f000 fe16 	bl	8011880 <__swbuf_r>
 8010c54:	3001      	adds	r0, #1
 8010c56:	d007      	beq.n	8010c68 <_puts_r+0x5c>
 8010c58:	250a      	movs	r5, #10
 8010c5a:	e007      	b.n	8010c6c <_puts_r+0x60>
 8010c5c:	4621      	mov	r1, r4
 8010c5e:	4628      	mov	r0, r5
 8010c60:	f000 fe4c 	bl	80118fc <__swsetup_r>
 8010c64:	2800      	cmp	r0, #0
 8010c66:	d0e7      	beq.n	8010c38 <_puts_r+0x2c>
 8010c68:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8010c6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010c6e:	07da      	lsls	r2, r3, #31
 8010c70:	d405      	bmi.n	8010c7e <_puts_r+0x72>
 8010c72:	89a3      	ldrh	r3, [r4, #12]
 8010c74:	059b      	lsls	r3, r3, #22
 8010c76:	d402      	bmi.n	8010c7e <_puts_r+0x72>
 8010c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010c7a:	f000 f867 	bl	8010d4c <__retarget_lock_release_recursive>
 8010c7e:	4628      	mov	r0, r5
 8010c80:	bd70      	pop	{r4, r5, r6, pc}
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	da04      	bge.n	8010c90 <_puts_r+0x84>
 8010c86:	69a2      	ldr	r2, [r4, #24]
 8010c88:	429a      	cmp	r2, r3
 8010c8a:	dc06      	bgt.n	8010c9a <_puts_r+0x8e>
 8010c8c:	290a      	cmp	r1, #10
 8010c8e:	d004      	beq.n	8010c9a <_puts_r+0x8e>
 8010c90:	6823      	ldr	r3, [r4, #0]
 8010c92:	1c5a      	adds	r2, r3, #1
 8010c94:	6022      	str	r2, [r4, #0]
 8010c96:	7019      	strb	r1, [r3, #0]
 8010c98:	e7cf      	b.n	8010c3a <_puts_r+0x2e>
 8010c9a:	4622      	mov	r2, r4
 8010c9c:	4628      	mov	r0, r5
 8010c9e:	f000 fdef 	bl	8011880 <__swbuf_r>
 8010ca2:	3001      	adds	r0, #1
 8010ca4:	d1c9      	bne.n	8010c3a <_puts_r+0x2e>
 8010ca6:	e7df      	b.n	8010c68 <_puts_r+0x5c>
 8010ca8:	6823      	ldr	r3, [r4, #0]
 8010caa:	250a      	movs	r5, #10
 8010cac:	1c5a      	adds	r2, r3, #1
 8010cae:	6022      	str	r2, [r4, #0]
 8010cb0:	701d      	strb	r5, [r3, #0]
 8010cb2:	e7db      	b.n	8010c6c <_puts_r+0x60>

08010cb4 <puts>:
 8010cb4:	4b02      	ldr	r3, [pc, #8]	; (8010cc0 <puts+0xc>)
 8010cb6:	4601      	mov	r1, r0
 8010cb8:	6818      	ldr	r0, [r3, #0]
 8010cba:	f7ff bfa7 	b.w	8010c0c <_puts_r>
 8010cbe:	bf00      	nop
 8010cc0:	20000168 	.word	0x20000168

08010cc4 <memset>:
 8010cc4:	4402      	add	r2, r0
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	4293      	cmp	r3, r2
 8010cca:	d100      	bne.n	8010cce <memset+0xa>
 8010ccc:	4770      	bx	lr
 8010cce:	f803 1b01 	strb.w	r1, [r3], #1
 8010cd2:	e7f9      	b.n	8010cc8 <memset+0x4>

08010cd4 <_sbrk_r>:
 8010cd4:	b538      	push	{r3, r4, r5, lr}
 8010cd6:	4d06      	ldr	r5, [pc, #24]	; (8010cf0 <_sbrk_r+0x1c>)
 8010cd8:	2300      	movs	r3, #0
 8010cda:	4604      	mov	r4, r0
 8010cdc:	4608      	mov	r0, r1
 8010cde:	602b      	str	r3, [r5, #0]
 8010ce0:	f7f0 fe00 	bl	80018e4 <_sbrk>
 8010ce4:	1c43      	adds	r3, r0, #1
 8010ce6:	d102      	bne.n	8010cee <_sbrk_r+0x1a>
 8010ce8:	682b      	ldr	r3, [r5, #0]
 8010cea:	b103      	cbz	r3, 8010cee <_sbrk_r+0x1a>
 8010cec:	6023      	str	r3, [r4, #0]
 8010cee:	bd38      	pop	{r3, r4, r5, pc}
 8010cf0:	20003364 	.word	0x20003364

08010cf4 <__errno>:
 8010cf4:	4b01      	ldr	r3, [pc, #4]	; (8010cfc <__errno+0x8>)
 8010cf6:	6818      	ldr	r0, [r3, #0]
 8010cf8:	4770      	bx	lr
 8010cfa:	bf00      	nop
 8010cfc:	20000168 	.word	0x20000168

08010d00 <__libc_init_array>:
 8010d00:	b570      	push	{r4, r5, r6, lr}
 8010d02:	4d0d      	ldr	r5, [pc, #52]	; (8010d38 <__libc_init_array+0x38>)
 8010d04:	4c0d      	ldr	r4, [pc, #52]	; (8010d3c <__libc_init_array+0x3c>)
 8010d06:	1b64      	subs	r4, r4, r5
 8010d08:	10a4      	asrs	r4, r4, #2
 8010d0a:	2600      	movs	r6, #0
 8010d0c:	42a6      	cmp	r6, r4
 8010d0e:	d109      	bne.n	8010d24 <__libc_init_array+0x24>
 8010d10:	4d0b      	ldr	r5, [pc, #44]	; (8010d40 <__libc_init_array+0x40>)
 8010d12:	4c0c      	ldr	r4, [pc, #48]	; (8010d44 <__libc_init_array+0x44>)
 8010d14:	f000 ff44 	bl	8011ba0 <_init>
 8010d18:	1b64      	subs	r4, r4, r5
 8010d1a:	10a4      	asrs	r4, r4, #2
 8010d1c:	2600      	movs	r6, #0
 8010d1e:	42a6      	cmp	r6, r4
 8010d20:	d105      	bne.n	8010d2e <__libc_init_array+0x2e>
 8010d22:	bd70      	pop	{r4, r5, r6, pc}
 8010d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d28:	4798      	blx	r3
 8010d2a:	3601      	adds	r6, #1
 8010d2c:	e7ee      	b.n	8010d0c <__libc_init_array+0xc>
 8010d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d32:	4798      	blx	r3
 8010d34:	3601      	adds	r6, #1
 8010d36:	e7f2      	b.n	8010d1e <__libc_init_array+0x1e>
 8010d38:	08012418 	.word	0x08012418
 8010d3c:	08012418 	.word	0x08012418
 8010d40:	08012418 	.word	0x08012418
 8010d44:	0801241c 	.word	0x0801241c

08010d48 <__retarget_lock_init_recursive>:
 8010d48:	4770      	bx	lr

08010d4a <__retarget_lock_acquire_recursive>:
 8010d4a:	4770      	bx	lr

08010d4c <__retarget_lock_release_recursive>:
 8010d4c:	4770      	bx	lr
	...

08010d50 <_free_r>:
 8010d50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010d52:	2900      	cmp	r1, #0
 8010d54:	d044      	beq.n	8010de0 <_free_r+0x90>
 8010d56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d5a:	9001      	str	r0, [sp, #4]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	f1a1 0404 	sub.w	r4, r1, #4
 8010d62:	bfb8      	it	lt
 8010d64:	18e4      	addlt	r4, r4, r3
 8010d66:	f7ff fe71 	bl	8010a4c <__malloc_lock>
 8010d6a:	4a1e      	ldr	r2, [pc, #120]	; (8010de4 <_free_r+0x94>)
 8010d6c:	9801      	ldr	r0, [sp, #4]
 8010d6e:	6813      	ldr	r3, [r2, #0]
 8010d70:	b933      	cbnz	r3, 8010d80 <_free_r+0x30>
 8010d72:	6063      	str	r3, [r4, #4]
 8010d74:	6014      	str	r4, [r2, #0]
 8010d76:	b003      	add	sp, #12
 8010d78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010d7c:	f7ff be6c 	b.w	8010a58 <__malloc_unlock>
 8010d80:	42a3      	cmp	r3, r4
 8010d82:	d908      	bls.n	8010d96 <_free_r+0x46>
 8010d84:	6825      	ldr	r5, [r4, #0]
 8010d86:	1961      	adds	r1, r4, r5
 8010d88:	428b      	cmp	r3, r1
 8010d8a:	bf01      	itttt	eq
 8010d8c:	6819      	ldreq	r1, [r3, #0]
 8010d8e:	685b      	ldreq	r3, [r3, #4]
 8010d90:	1949      	addeq	r1, r1, r5
 8010d92:	6021      	streq	r1, [r4, #0]
 8010d94:	e7ed      	b.n	8010d72 <_free_r+0x22>
 8010d96:	461a      	mov	r2, r3
 8010d98:	685b      	ldr	r3, [r3, #4]
 8010d9a:	b10b      	cbz	r3, 8010da0 <_free_r+0x50>
 8010d9c:	42a3      	cmp	r3, r4
 8010d9e:	d9fa      	bls.n	8010d96 <_free_r+0x46>
 8010da0:	6811      	ldr	r1, [r2, #0]
 8010da2:	1855      	adds	r5, r2, r1
 8010da4:	42a5      	cmp	r5, r4
 8010da6:	d10b      	bne.n	8010dc0 <_free_r+0x70>
 8010da8:	6824      	ldr	r4, [r4, #0]
 8010daa:	4421      	add	r1, r4
 8010dac:	1854      	adds	r4, r2, r1
 8010dae:	42a3      	cmp	r3, r4
 8010db0:	6011      	str	r1, [r2, #0]
 8010db2:	d1e0      	bne.n	8010d76 <_free_r+0x26>
 8010db4:	681c      	ldr	r4, [r3, #0]
 8010db6:	685b      	ldr	r3, [r3, #4]
 8010db8:	6053      	str	r3, [r2, #4]
 8010dba:	440c      	add	r4, r1
 8010dbc:	6014      	str	r4, [r2, #0]
 8010dbe:	e7da      	b.n	8010d76 <_free_r+0x26>
 8010dc0:	d902      	bls.n	8010dc8 <_free_r+0x78>
 8010dc2:	230c      	movs	r3, #12
 8010dc4:	6003      	str	r3, [r0, #0]
 8010dc6:	e7d6      	b.n	8010d76 <_free_r+0x26>
 8010dc8:	6825      	ldr	r5, [r4, #0]
 8010dca:	1961      	adds	r1, r4, r5
 8010dcc:	428b      	cmp	r3, r1
 8010dce:	bf04      	itt	eq
 8010dd0:	6819      	ldreq	r1, [r3, #0]
 8010dd2:	685b      	ldreq	r3, [r3, #4]
 8010dd4:	6063      	str	r3, [r4, #4]
 8010dd6:	bf04      	itt	eq
 8010dd8:	1949      	addeq	r1, r1, r5
 8010dda:	6021      	streq	r1, [r4, #0]
 8010ddc:	6054      	str	r4, [r2, #4]
 8010dde:	e7ca      	b.n	8010d76 <_free_r+0x26>
 8010de0:	b003      	add	sp, #12
 8010de2:	bd30      	pop	{r4, r5, pc}
 8010de4:	2000321c 	.word	0x2000321c

08010de8 <__ssputs_r>:
 8010de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010dec:	688e      	ldr	r6, [r1, #8]
 8010dee:	461f      	mov	r7, r3
 8010df0:	42be      	cmp	r6, r7
 8010df2:	680b      	ldr	r3, [r1, #0]
 8010df4:	4682      	mov	sl, r0
 8010df6:	460c      	mov	r4, r1
 8010df8:	4690      	mov	r8, r2
 8010dfa:	d82c      	bhi.n	8010e56 <__ssputs_r+0x6e>
 8010dfc:	898a      	ldrh	r2, [r1, #12]
 8010dfe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010e02:	d026      	beq.n	8010e52 <__ssputs_r+0x6a>
 8010e04:	6965      	ldr	r5, [r4, #20]
 8010e06:	6909      	ldr	r1, [r1, #16]
 8010e08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010e0c:	eba3 0901 	sub.w	r9, r3, r1
 8010e10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010e14:	1c7b      	adds	r3, r7, #1
 8010e16:	444b      	add	r3, r9
 8010e18:	106d      	asrs	r5, r5, #1
 8010e1a:	429d      	cmp	r5, r3
 8010e1c:	bf38      	it	cc
 8010e1e:	461d      	movcc	r5, r3
 8010e20:	0553      	lsls	r3, r2, #21
 8010e22:	d527      	bpl.n	8010e74 <__ssputs_r+0x8c>
 8010e24:	4629      	mov	r1, r5
 8010e26:	f7ff fd5d 	bl	80108e4 <_malloc_r>
 8010e2a:	4606      	mov	r6, r0
 8010e2c:	b360      	cbz	r0, 8010e88 <__ssputs_r+0xa0>
 8010e2e:	6921      	ldr	r1, [r4, #16]
 8010e30:	464a      	mov	r2, r9
 8010e32:	f000 fe9f 	bl	8011b74 <memcpy>
 8010e36:	89a3      	ldrh	r3, [r4, #12]
 8010e38:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e40:	81a3      	strh	r3, [r4, #12]
 8010e42:	6126      	str	r6, [r4, #16]
 8010e44:	6165      	str	r5, [r4, #20]
 8010e46:	444e      	add	r6, r9
 8010e48:	eba5 0509 	sub.w	r5, r5, r9
 8010e4c:	6026      	str	r6, [r4, #0]
 8010e4e:	60a5      	str	r5, [r4, #8]
 8010e50:	463e      	mov	r6, r7
 8010e52:	42be      	cmp	r6, r7
 8010e54:	d900      	bls.n	8010e58 <__ssputs_r+0x70>
 8010e56:	463e      	mov	r6, r7
 8010e58:	6820      	ldr	r0, [r4, #0]
 8010e5a:	4632      	mov	r2, r6
 8010e5c:	4641      	mov	r1, r8
 8010e5e:	f000 fe07 	bl	8011a70 <memmove>
 8010e62:	68a3      	ldr	r3, [r4, #8]
 8010e64:	1b9b      	subs	r3, r3, r6
 8010e66:	60a3      	str	r3, [r4, #8]
 8010e68:	6823      	ldr	r3, [r4, #0]
 8010e6a:	4433      	add	r3, r6
 8010e6c:	6023      	str	r3, [r4, #0]
 8010e6e:	2000      	movs	r0, #0
 8010e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e74:	462a      	mov	r2, r5
 8010e76:	f000 fcd4 	bl	8011822 <_realloc_r>
 8010e7a:	4606      	mov	r6, r0
 8010e7c:	2800      	cmp	r0, #0
 8010e7e:	d1e0      	bne.n	8010e42 <__ssputs_r+0x5a>
 8010e80:	6921      	ldr	r1, [r4, #16]
 8010e82:	4650      	mov	r0, sl
 8010e84:	f7ff ff64 	bl	8010d50 <_free_r>
 8010e88:	230c      	movs	r3, #12
 8010e8a:	f8ca 3000 	str.w	r3, [sl]
 8010e8e:	89a3      	ldrh	r3, [r4, #12]
 8010e90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e94:	81a3      	strh	r3, [r4, #12]
 8010e96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010e9a:	e7e9      	b.n	8010e70 <__ssputs_r+0x88>

08010e9c <_svfiprintf_r>:
 8010e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ea0:	4698      	mov	r8, r3
 8010ea2:	898b      	ldrh	r3, [r1, #12]
 8010ea4:	061b      	lsls	r3, r3, #24
 8010ea6:	b09d      	sub	sp, #116	; 0x74
 8010ea8:	4607      	mov	r7, r0
 8010eaa:	460d      	mov	r5, r1
 8010eac:	4614      	mov	r4, r2
 8010eae:	d50e      	bpl.n	8010ece <_svfiprintf_r+0x32>
 8010eb0:	690b      	ldr	r3, [r1, #16]
 8010eb2:	b963      	cbnz	r3, 8010ece <_svfiprintf_r+0x32>
 8010eb4:	2140      	movs	r1, #64	; 0x40
 8010eb6:	f7ff fd15 	bl	80108e4 <_malloc_r>
 8010eba:	6028      	str	r0, [r5, #0]
 8010ebc:	6128      	str	r0, [r5, #16]
 8010ebe:	b920      	cbnz	r0, 8010eca <_svfiprintf_r+0x2e>
 8010ec0:	230c      	movs	r3, #12
 8010ec2:	603b      	str	r3, [r7, #0]
 8010ec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010ec8:	e0d0      	b.n	801106c <_svfiprintf_r+0x1d0>
 8010eca:	2340      	movs	r3, #64	; 0x40
 8010ecc:	616b      	str	r3, [r5, #20]
 8010ece:	2300      	movs	r3, #0
 8010ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8010ed2:	2320      	movs	r3, #32
 8010ed4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010ed8:	f8cd 800c 	str.w	r8, [sp, #12]
 8010edc:	2330      	movs	r3, #48	; 0x30
 8010ede:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011084 <_svfiprintf_r+0x1e8>
 8010ee2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010ee6:	f04f 0901 	mov.w	r9, #1
 8010eea:	4623      	mov	r3, r4
 8010eec:	469a      	mov	sl, r3
 8010eee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ef2:	b10a      	cbz	r2, 8010ef8 <_svfiprintf_r+0x5c>
 8010ef4:	2a25      	cmp	r2, #37	; 0x25
 8010ef6:	d1f9      	bne.n	8010eec <_svfiprintf_r+0x50>
 8010ef8:	ebba 0b04 	subs.w	fp, sl, r4
 8010efc:	d00b      	beq.n	8010f16 <_svfiprintf_r+0x7a>
 8010efe:	465b      	mov	r3, fp
 8010f00:	4622      	mov	r2, r4
 8010f02:	4629      	mov	r1, r5
 8010f04:	4638      	mov	r0, r7
 8010f06:	f7ff ff6f 	bl	8010de8 <__ssputs_r>
 8010f0a:	3001      	adds	r0, #1
 8010f0c:	f000 80a9 	beq.w	8011062 <_svfiprintf_r+0x1c6>
 8010f10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f12:	445a      	add	r2, fp
 8010f14:	9209      	str	r2, [sp, #36]	; 0x24
 8010f16:	f89a 3000 	ldrb.w	r3, [sl]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	f000 80a1 	beq.w	8011062 <_svfiprintf_r+0x1c6>
 8010f20:	2300      	movs	r3, #0
 8010f22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010f26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010f2a:	f10a 0a01 	add.w	sl, sl, #1
 8010f2e:	9304      	str	r3, [sp, #16]
 8010f30:	9307      	str	r3, [sp, #28]
 8010f32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010f36:	931a      	str	r3, [sp, #104]	; 0x68
 8010f38:	4654      	mov	r4, sl
 8010f3a:	2205      	movs	r2, #5
 8010f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f40:	4850      	ldr	r0, [pc, #320]	; (8011084 <_svfiprintf_r+0x1e8>)
 8010f42:	f7ef f97d 	bl	8000240 <memchr>
 8010f46:	9a04      	ldr	r2, [sp, #16]
 8010f48:	b9d8      	cbnz	r0, 8010f82 <_svfiprintf_r+0xe6>
 8010f4a:	06d0      	lsls	r0, r2, #27
 8010f4c:	bf44      	itt	mi
 8010f4e:	2320      	movmi	r3, #32
 8010f50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f54:	0711      	lsls	r1, r2, #28
 8010f56:	bf44      	itt	mi
 8010f58:	232b      	movmi	r3, #43	; 0x2b
 8010f5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f5e:	f89a 3000 	ldrb.w	r3, [sl]
 8010f62:	2b2a      	cmp	r3, #42	; 0x2a
 8010f64:	d015      	beq.n	8010f92 <_svfiprintf_r+0xf6>
 8010f66:	9a07      	ldr	r2, [sp, #28]
 8010f68:	4654      	mov	r4, sl
 8010f6a:	2000      	movs	r0, #0
 8010f6c:	f04f 0c0a 	mov.w	ip, #10
 8010f70:	4621      	mov	r1, r4
 8010f72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f76:	3b30      	subs	r3, #48	; 0x30
 8010f78:	2b09      	cmp	r3, #9
 8010f7a:	d94d      	bls.n	8011018 <_svfiprintf_r+0x17c>
 8010f7c:	b1b0      	cbz	r0, 8010fac <_svfiprintf_r+0x110>
 8010f7e:	9207      	str	r2, [sp, #28]
 8010f80:	e014      	b.n	8010fac <_svfiprintf_r+0x110>
 8010f82:	eba0 0308 	sub.w	r3, r0, r8
 8010f86:	fa09 f303 	lsl.w	r3, r9, r3
 8010f8a:	4313      	orrs	r3, r2
 8010f8c:	9304      	str	r3, [sp, #16]
 8010f8e:	46a2      	mov	sl, r4
 8010f90:	e7d2      	b.n	8010f38 <_svfiprintf_r+0x9c>
 8010f92:	9b03      	ldr	r3, [sp, #12]
 8010f94:	1d19      	adds	r1, r3, #4
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	9103      	str	r1, [sp, #12]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	bfbb      	ittet	lt
 8010f9e:	425b      	neglt	r3, r3
 8010fa0:	f042 0202 	orrlt.w	r2, r2, #2
 8010fa4:	9307      	strge	r3, [sp, #28]
 8010fa6:	9307      	strlt	r3, [sp, #28]
 8010fa8:	bfb8      	it	lt
 8010faa:	9204      	strlt	r2, [sp, #16]
 8010fac:	7823      	ldrb	r3, [r4, #0]
 8010fae:	2b2e      	cmp	r3, #46	; 0x2e
 8010fb0:	d10c      	bne.n	8010fcc <_svfiprintf_r+0x130>
 8010fb2:	7863      	ldrb	r3, [r4, #1]
 8010fb4:	2b2a      	cmp	r3, #42	; 0x2a
 8010fb6:	d134      	bne.n	8011022 <_svfiprintf_r+0x186>
 8010fb8:	9b03      	ldr	r3, [sp, #12]
 8010fba:	1d1a      	adds	r2, r3, #4
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	9203      	str	r2, [sp, #12]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	bfb8      	it	lt
 8010fc4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010fc8:	3402      	adds	r4, #2
 8010fca:	9305      	str	r3, [sp, #20]
 8010fcc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8011094 <_svfiprintf_r+0x1f8>
 8010fd0:	7821      	ldrb	r1, [r4, #0]
 8010fd2:	2203      	movs	r2, #3
 8010fd4:	4650      	mov	r0, sl
 8010fd6:	f7ef f933 	bl	8000240 <memchr>
 8010fda:	b138      	cbz	r0, 8010fec <_svfiprintf_r+0x150>
 8010fdc:	9b04      	ldr	r3, [sp, #16]
 8010fde:	eba0 000a 	sub.w	r0, r0, sl
 8010fe2:	2240      	movs	r2, #64	; 0x40
 8010fe4:	4082      	lsls	r2, r0
 8010fe6:	4313      	orrs	r3, r2
 8010fe8:	3401      	adds	r4, #1
 8010fea:	9304      	str	r3, [sp, #16]
 8010fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ff0:	4825      	ldr	r0, [pc, #148]	; (8011088 <_svfiprintf_r+0x1ec>)
 8010ff2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010ff6:	2206      	movs	r2, #6
 8010ff8:	f7ef f922 	bl	8000240 <memchr>
 8010ffc:	2800      	cmp	r0, #0
 8010ffe:	d038      	beq.n	8011072 <_svfiprintf_r+0x1d6>
 8011000:	4b22      	ldr	r3, [pc, #136]	; (801108c <_svfiprintf_r+0x1f0>)
 8011002:	bb1b      	cbnz	r3, 801104c <_svfiprintf_r+0x1b0>
 8011004:	9b03      	ldr	r3, [sp, #12]
 8011006:	3307      	adds	r3, #7
 8011008:	f023 0307 	bic.w	r3, r3, #7
 801100c:	3308      	adds	r3, #8
 801100e:	9303      	str	r3, [sp, #12]
 8011010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011012:	4433      	add	r3, r6
 8011014:	9309      	str	r3, [sp, #36]	; 0x24
 8011016:	e768      	b.n	8010eea <_svfiprintf_r+0x4e>
 8011018:	fb0c 3202 	mla	r2, ip, r2, r3
 801101c:	460c      	mov	r4, r1
 801101e:	2001      	movs	r0, #1
 8011020:	e7a6      	b.n	8010f70 <_svfiprintf_r+0xd4>
 8011022:	2300      	movs	r3, #0
 8011024:	3401      	adds	r4, #1
 8011026:	9305      	str	r3, [sp, #20]
 8011028:	4619      	mov	r1, r3
 801102a:	f04f 0c0a 	mov.w	ip, #10
 801102e:	4620      	mov	r0, r4
 8011030:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011034:	3a30      	subs	r2, #48	; 0x30
 8011036:	2a09      	cmp	r2, #9
 8011038:	d903      	bls.n	8011042 <_svfiprintf_r+0x1a6>
 801103a:	2b00      	cmp	r3, #0
 801103c:	d0c6      	beq.n	8010fcc <_svfiprintf_r+0x130>
 801103e:	9105      	str	r1, [sp, #20]
 8011040:	e7c4      	b.n	8010fcc <_svfiprintf_r+0x130>
 8011042:	fb0c 2101 	mla	r1, ip, r1, r2
 8011046:	4604      	mov	r4, r0
 8011048:	2301      	movs	r3, #1
 801104a:	e7f0      	b.n	801102e <_svfiprintf_r+0x192>
 801104c:	ab03      	add	r3, sp, #12
 801104e:	9300      	str	r3, [sp, #0]
 8011050:	462a      	mov	r2, r5
 8011052:	4b0f      	ldr	r3, [pc, #60]	; (8011090 <_svfiprintf_r+0x1f4>)
 8011054:	a904      	add	r1, sp, #16
 8011056:	4638      	mov	r0, r7
 8011058:	f3af 8000 	nop.w
 801105c:	1c42      	adds	r2, r0, #1
 801105e:	4606      	mov	r6, r0
 8011060:	d1d6      	bne.n	8011010 <_svfiprintf_r+0x174>
 8011062:	89ab      	ldrh	r3, [r5, #12]
 8011064:	065b      	lsls	r3, r3, #25
 8011066:	f53f af2d 	bmi.w	8010ec4 <_svfiprintf_r+0x28>
 801106a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801106c:	b01d      	add	sp, #116	; 0x74
 801106e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011072:	ab03      	add	r3, sp, #12
 8011074:	9300      	str	r3, [sp, #0]
 8011076:	462a      	mov	r2, r5
 8011078:	4b05      	ldr	r3, [pc, #20]	; (8011090 <_svfiprintf_r+0x1f4>)
 801107a:	a904      	add	r1, sp, #16
 801107c:	4638      	mov	r0, r7
 801107e:	f000 f9bd 	bl	80113fc <_printf_i>
 8011082:	e7eb      	b.n	801105c <_svfiprintf_r+0x1c0>
 8011084:	080123dc 	.word	0x080123dc
 8011088:	080123e6 	.word	0x080123e6
 801108c:	00000000 	.word	0x00000000
 8011090:	08010de9 	.word	0x08010de9
 8011094:	080123e2 	.word	0x080123e2

08011098 <__sfputc_r>:
 8011098:	6893      	ldr	r3, [r2, #8]
 801109a:	3b01      	subs	r3, #1
 801109c:	2b00      	cmp	r3, #0
 801109e:	b410      	push	{r4}
 80110a0:	6093      	str	r3, [r2, #8]
 80110a2:	da08      	bge.n	80110b6 <__sfputc_r+0x1e>
 80110a4:	6994      	ldr	r4, [r2, #24]
 80110a6:	42a3      	cmp	r3, r4
 80110a8:	db01      	blt.n	80110ae <__sfputc_r+0x16>
 80110aa:	290a      	cmp	r1, #10
 80110ac:	d103      	bne.n	80110b6 <__sfputc_r+0x1e>
 80110ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80110b2:	f000 bbe5 	b.w	8011880 <__swbuf_r>
 80110b6:	6813      	ldr	r3, [r2, #0]
 80110b8:	1c58      	adds	r0, r3, #1
 80110ba:	6010      	str	r0, [r2, #0]
 80110bc:	7019      	strb	r1, [r3, #0]
 80110be:	4608      	mov	r0, r1
 80110c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80110c4:	4770      	bx	lr

080110c6 <__sfputs_r>:
 80110c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110c8:	4606      	mov	r6, r0
 80110ca:	460f      	mov	r7, r1
 80110cc:	4614      	mov	r4, r2
 80110ce:	18d5      	adds	r5, r2, r3
 80110d0:	42ac      	cmp	r4, r5
 80110d2:	d101      	bne.n	80110d8 <__sfputs_r+0x12>
 80110d4:	2000      	movs	r0, #0
 80110d6:	e007      	b.n	80110e8 <__sfputs_r+0x22>
 80110d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110dc:	463a      	mov	r2, r7
 80110de:	4630      	mov	r0, r6
 80110e0:	f7ff ffda 	bl	8011098 <__sfputc_r>
 80110e4:	1c43      	adds	r3, r0, #1
 80110e6:	d1f3      	bne.n	80110d0 <__sfputs_r+0xa>
 80110e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080110ec <_vfiprintf_r>:
 80110ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110f0:	460d      	mov	r5, r1
 80110f2:	b09d      	sub	sp, #116	; 0x74
 80110f4:	4614      	mov	r4, r2
 80110f6:	4698      	mov	r8, r3
 80110f8:	4606      	mov	r6, r0
 80110fa:	b118      	cbz	r0, 8011104 <_vfiprintf_r+0x18>
 80110fc:	6a03      	ldr	r3, [r0, #32]
 80110fe:	b90b      	cbnz	r3, 8011104 <_vfiprintf_r+0x18>
 8011100:	f7ff fd3c 	bl	8010b7c <__sinit>
 8011104:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011106:	07d9      	lsls	r1, r3, #31
 8011108:	d405      	bmi.n	8011116 <_vfiprintf_r+0x2a>
 801110a:	89ab      	ldrh	r3, [r5, #12]
 801110c:	059a      	lsls	r2, r3, #22
 801110e:	d402      	bmi.n	8011116 <_vfiprintf_r+0x2a>
 8011110:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011112:	f7ff fe1a 	bl	8010d4a <__retarget_lock_acquire_recursive>
 8011116:	89ab      	ldrh	r3, [r5, #12]
 8011118:	071b      	lsls	r3, r3, #28
 801111a:	d501      	bpl.n	8011120 <_vfiprintf_r+0x34>
 801111c:	692b      	ldr	r3, [r5, #16]
 801111e:	b99b      	cbnz	r3, 8011148 <_vfiprintf_r+0x5c>
 8011120:	4629      	mov	r1, r5
 8011122:	4630      	mov	r0, r6
 8011124:	f000 fbea 	bl	80118fc <__swsetup_r>
 8011128:	b170      	cbz	r0, 8011148 <_vfiprintf_r+0x5c>
 801112a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801112c:	07dc      	lsls	r4, r3, #31
 801112e:	d504      	bpl.n	801113a <_vfiprintf_r+0x4e>
 8011130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011134:	b01d      	add	sp, #116	; 0x74
 8011136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801113a:	89ab      	ldrh	r3, [r5, #12]
 801113c:	0598      	lsls	r0, r3, #22
 801113e:	d4f7      	bmi.n	8011130 <_vfiprintf_r+0x44>
 8011140:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011142:	f7ff fe03 	bl	8010d4c <__retarget_lock_release_recursive>
 8011146:	e7f3      	b.n	8011130 <_vfiprintf_r+0x44>
 8011148:	2300      	movs	r3, #0
 801114a:	9309      	str	r3, [sp, #36]	; 0x24
 801114c:	2320      	movs	r3, #32
 801114e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011152:	f8cd 800c 	str.w	r8, [sp, #12]
 8011156:	2330      	movs	r3, #48	; 0x30
 8011158:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801130c <_vfiprintf_r+0x220>
 801115c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011160:	f04f 0901 	mov.w	r9, #1
 8011164:	4623      	mov	r3, r4
 8011166:	469a      	mov	sl, r3
 8011168:	f813 2b01 	ldrb.w	r2, [r3], #1
 801116c:	b10a      	cbz	r2, 8011172 <_vfiprintf_r+0x86>
 801116e:	2a25      	cmp	r2, #37	; 0x25
 8011170:	d1f9      	bne.n	8011166 <_vfiprintf_r+0x7a>
 8011172:	ebba 0b04 	subs.w	fp, sl, r4
 8011176:	d00b      	beq.n	8011190 <_vfiprintf_r+0xa4>
 8011178:	465b      	mov	r3, fp
 801117a:	4622      	mov	r2, r4
 801117c:	4629      	mov	r1, r5
 801117e:	4630      	mov	r0, r6
 8011180:	f7ff ffa1 	bl	80110c6 <__sfputs_r>
 8011184:	3001      	adds	r0, #1
 8011186:	f000 80a9 	beq.w	80112dc <_vfiprintf_r+0x1f0>
 801118a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801118c:	445a      	add	r2, fp
 801118e:	9209      	str	r2, [sp, #36]	; 0x24
 8011190:	f89a 3000 	ldrb.w	r3, [sl]
 8011194:	2b00      	cmp	r3, #0
 8011196:	f000 80a1 	beq.w	80112dc <_vfiprintf_r+0x1f0>
 801119a:	2300      	movs	r3, #0
 801119c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80111a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80111a4:	f10a 0a01 	add.w	sl, sl, #1
 80111a8:	9304      	str	r3, [sp, #16]
 80111aa:	9307      	str	r3, [sp, #28]
 80111ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80111b0:	931a      	str	r3, [sp, #104]	; 0x68
 80111b2:	4654      	mov	r4, sl
 80111b4:	2205      	movs	r2, #5
 80111b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111ba:	4854      	ldr	r0, [pc, #336]	; (801130c <_vfiprintf_r+0x220>)
 80111bc:	f7ef f840 	bl	8000240 <memchr>
 80111c0:	9a04      	ldr	r2, [sp, #16]
 80111c2:	b9d8      	cbnz	r0, 80111fc <_vfiprintf_r+0x110>
 80111c4:	06d1      	lsls	r1, r2, #27
 80111c6:	bf44      	itt	mi
 80111c8:	2320      	movmi	r3, #32
 80111ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80111ce:	0713      	lsls	r3, r2, #28
 80111d0:	bf44      	itt	mi
 80111d2:	232b      	movmi	r3, #43	; 0x2b
 80111d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80111d8:	f89a 3000 	ldrb.w	r3, [sl]
 80111dc:	2b2a      	cmp	r3, #42	; 0x2a
 80111de:	d015      	beq.n	801120c <_vfiprintf_r+0x120>
 80111e0:	9a07      	ldr	r2, [sp, #28]
 80111e2:	4654      	mov	r4, sl
 80111e4:	2000      	movs	r0, #0
 80111e6:	f04f 0c0a 	mov.w	ip, #10
 80111ea:	4621      	mov	r1, r4
 80111ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80111f0:	3b30      	subs	r3, #48	; 0x30
 80111f2:	2b09      	cmp	r3, #9
 80111f4:	d94d      	bls.n	8011292 <_vfiprintf_r+0x1a6>
 80111f6:	b1b0      	cbz	r0, 8011226 <_vfiprintf_r+0x13a>
 80111f8:	9207      	str	r2, [sp, #28]
 80111fa:	e014      	b.n	8011226 <_vfiprintf_r+0x13a>
 80111fc:	eba0 0308 	sub.w	r3, r0, r8
 8011200:	fa09 f303 	lsl.w	r3, r9, r3
 8011204:	4313      	orrs	r3, r2
 8011206:	9304      	str	r3, [sp, #16]
 8011208:	46a2      	mov	sl, r4
 801120a:	e7d2      	b.n	80111b2 <_vfiprintf_r+0xc6>
 801120c:	9b03      	ldr	r3, [sp, #12]
 801120e:	1d19      	adds	r1, r3, #4
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	9103      	str	r1, [sp, #12]
 8011214:	2b00      	cmp	r3, #0
 8011216:	bfbb      	ittet	lt
 8011218:	425b      	neglt	r3, r3
 801121a:	f042 0202 	orrlt.w	r2, r2, #2
 801121e:	9307      	strge	r3, [sp, #28]
 8011220:	9307      	strlt	r3, [sp, #28]
 8011222:	bfb8      	it	lt
 8011224:	9204      	strlt	r2, [sp, #16]
 8011226:	7823      	ldrb	r3, [r4, #0]
 8011228:	2b2e      	cmp	r3, #46	; 0x2e
 801122a:	d10c      	bne.n	8011246 <_vfiprintf_r+0x15a>
 801122c:	7863      	ldrb	r3, [r4, #1]
 801122e:	2b2a      	cmp	r3, #42	; 0x2a
 8011230:	d134      	bne.n	801129c <_vfiprintf_r+0x1b0>
 8011232:	9b03      	ldr	r3, [sp, #12]
 8011234:	1d1a      	adds	r2, r3, #4
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	9203      	str	r2, [sp, #12]
 801123a:	2b00      	cmp	r3, #0
 801123c:	bfb8      	it	lt
 801123e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011242:	3402      	adds	r4, #2
 8011244:	9305      	str	r3, [sp, #20]
 8011246:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801131c <_vfiprintf_r+0x230>
 801124a:	7821      	ldrb	r1, [r4, #0]
 801124c:	2203      	movs	r2, #3
 801124e:	4650      	mov	r0, sl
 8011250:	f7ee fff6 	bl	8000240 <memchr>
 8011254:	b138      	cbz	r0, 8011266 <_vfiprintf_r+0x17a>
 8011256:	9b04      	ldr	r3, [sp, #16]
 8011258:	eba0 000a 	sub.w	r0, r0, sl
 801125c:	2240      	movs	r2, #64	; 0x40
 801125e:	4082      	lsls	r2, r0
 8011260:	4313      	orrs	r3, r2
 8011262:	3401      	adds	r4, #1
 8011264:	9304      	str	r3, [sp, #16]
 8011266:	f814 1b01 	ldrb.w	r1, [r4], #1
 801126a:	4829      	ldr	r0, [pc, #164]	; (8011310 <_vfiprintf_r+0x224>)
 801126c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011270:	2206      	movs	r2, #6
 8011272:	f7ee ffe5 	bl	8000240 <memchr>
 8011276:	2800      	cmp	r0, #0
 8011278:	d03f      	beq.n	80112fa <_vfiprintf_r+0x20e>
 801127a:	4b26      	ldr	r3, [pc, #152]	; (8011314 <_vfiprintf_r+0x228>)
 801127c:	bb1b      	cbnz	r3, 80112c6 <_vfiprintf_r+0x1da>
 801127e:	9b03      	ldr	r3, [sp, #12]
 8011280:	3307      	adds	r3, #7
 8011282:	f023 0307 	bic.w	r3, r3, #7
 8011286:	3308      	adds	r3, #8
 8011288:	9303      	str	r3, [sp, #12]
 801128a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801128c:	443b      	add	r3, r7
 801128e:	9309      	str	r3, [sp, #36]	; 0x24
 8011290:	e768      	b.n	8011164 <_vfiprintf_r+0x78>
 8011292:	fb0c 3202 	mla	r2, ip, r2, r3
 8011296:	460c      	mov	r4, r1
 8011298:	2001      	movs	r0, #1
 801129a:	e7a6      	b.n	80111ea <_vfiprintf_r+0xfe>
 801129c:	2300      	movs	r3, #0
 801129e:	3401      	adds	r4, #1
 80112a0:	9305      	str	r3, [sp, #20]
 80112a2:	4619      	mov	r1, r3
 80112a4:	f04f 0c0a 	mov.w	ip, #10
 80112a8:	4620      	mov	r0, r4
 80112aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80112ae:	3a30      	subs	r2, #48	; 0x30
 80112b0:	2a09      	cmp	r2, #9
 80112b2:	d903      	bls.n	80112bc <_vfiprintf_r+0x1d0>
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d0c6      	beq.n	8011246 <_vfiprintf_r+0x15a>
 80112b8:	9105      	str	r1, [sp, #20]
 80112ba:	e7c4      	b.n	8011246 <_vfiprintf_r+0x15a>
 80112bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80112c0:	4604      	mov	r4, r0
 80112c2:	2301      	movs	r3, #1
 80112c4:	e7f0      	b.n	80112a8 <_vfiprintf_r+0x1bc>
 80112c6:	ab03      	add	r3, sp, #12
 80112c8:	9300      	str	r3, [sp, #0]
 80112ca:	462a      	mov	r2, r5
 80112cc:	4b12      	ldr	r3, [pc, #72]	; (8011318 <_vfiprintf_r+0x22c>)
 80112ce:	a904      	add	r1, sp, #16
 80112d0:	4630      	mov	r0, r6
 80112d2:	f3af 8000 	nop.w
 80112d6:	4607      	mov	r7, r0
 80112d8:	1c78      	adds	r0, r7, #1
 80112da:	d1d6      	bne.n	801128a <_vfiprintf_r+0x19e>
 80112dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80112de:	07d9      	lsls	r1, r3, #31
 80112e0:	d405      	bmi.n	80112ee <_vfiprintf_r+0x202>
 80112e2:	89ab      	ldrh	r3, [r5, #12]
 80112e4:	059a      	lsls	r2, r3, #22
 80112e6:	d402      	bmi.n	80112ee <_vfiprintf_r+0x202>
 80112e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80112ea:	f7ff fd2f 	bl	8010d4c <__retarget_lock_release_recursive>
 80112ee:	89ab      	ldrh	r3, [r5, #12]
 80112f0:	065b      	lsls	r3, r3, #25
 80112f2:	f53f af1d 	bmi.w	8011130 <_vfiprintf_r+0x44>
 80112f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80112f8:	e71c      	b.n	8011134 <_vfiprintf_r+0x48>
 80112fa:	ab03      	add	r3, sp, #12
 80112fc:	9300      	str	r3, [sp, #0]
 80112fe:	462a      	mov	r2, r5
 8011300:	4b05      	ldr	r3, [pc, #20]	; (8011318 <_vfiprintf_r+0x22c>)
 8011302:	a904      	add	r1, sp, #16
 8011304:	4630      	mov	r0, r6
 8011306:	f000 f879 	bl	80113fc <_printf_i>
 801130a:	e7e4      	b.n	80112d6 <_vfiprintf_r+0x1ea>
 801130c:	080123dc 	.word	0x080123dc
 8011310:	080123e6 	.word	0x080123e6
 8011314:	00000000 	.word	0x00000000
 8011318:	080110c7 	.word	0x080110c7
 801131c:	080123e2 	.word	0x080123e2

08011320 <_printf_common>:
 8011320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011324:	4616      	mov	r6, r2
 8011326:	4699      	mov	r9, r3
 8011328:	688a      	ldr	r2, [r1, #8]
 801132a:	690b      	ldr	r3, [r1, #16]
 801132c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011330:	4293      	cmp	r3, r2
 8011332:	bfb8      	it	lt
 8011334:	4613      	movlt	r3, r2
 8011336:	6033      	str	r3, [r6, #0]
 8011338:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801133c:	4607      	mov	r7, r0
 801133e:	460c      	mov	r4, r1
 8011340:	b10a      	cbz	r2, 8011346 <_printf_common+0x26>
 8011342:	3301      	adds	r3, #1
 8011344:	6033      	str	r3, [r6, #0]
 8011346:	6823      	ldr	r3, [r4, #0]
 8011348:	0699      	lsls	r1, r3, #26
 801134a:	bf42      	ittt	mi
 801134c:	6833      	ldrmi	r3, [r6, #0]
 801134e:	3302      	addmi	r3, #2
 8011350:	6033      	strmi	r3, [r6, #0]
 8011352:	6825      	ldr	r5, [r4, #0]
 8011354:	f015 0506 	ands.w	r5, r5, #6
 8011358:	d106      	bne.n	8011368 <_printf_common+0x48>
 801135a:	f104 0a19 	add.w	sl, r4, #25
 801135e:	68e3      	ldr	r3, [r4, #12]
 8011360:	6832      	ldr	r2, [r6, #0]
 8011362:	1a9b      	subs	r3, r3, r2
 8011364:	42ab      	cmp	r3, r5
 8011366:	dc26      	bgt.n	80113b6 <_printf_common+0x96>
 8011368:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801136c:	1e13      	subs	r3, r2, #0
 801136e:	6822      	ldr	r2, [r4, #0]
 8011370:	bf18      	it	ne
 8011372:	2301      	movne	r3, #1
 8011374:	0692      	lsls	r2, r2, #26
 8011376:	d42b      	bmi.n	80113d0 <_printf_common+0xb0>
 8011378:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801137c:	4649      	mov	r1, r9
 801137e:	4638      	mov	r0, r7
 8011380:	47c0      	blx	r8
 8011382:	3001      	adds	r0, #1
 8011384:	d01e      	beq.n	80113c4 <_printf_common+0xa4>
 8011386:	6823      	ldr	r3, [r4, #0]
 8011388:	6922      	ldr	r2, [r4, #16]
 801138a:	f003 0306 	and.w	r3, r3, #6
 801138e:	2b04      	cmp	r3, #4
 8011390:	bf02      	ittt	eq
 8011392:	68e5      	ldreq	r5, [r4, #12]
 8011394:	6833      	ldreq	r3, [r6, #0]
 8011396:	1aed      	subeq	r5, r5, r3
 8011398:	68a3      	ldr	r3, [r4, #8]
 801139a:	bf0c      	ite	eq
 801139c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80113a0:	2500      	movne	r5, #0
 80113a2:	4293      	cmp	r3, r2
 80113a4:	bfc4      	itt	gt
 80113a6:	1a9b      	subgt	r3, r3, r2
 80113a8:	18ed      	addgt	r5, r5, r3
 80113aa:	2600      	movs	r6, #0
 80113ac:	341a      	adds	r4, #26
 80113ae:	42b5      	cmp	r5, r6
 80113b0:	d11a      	bne.n	80113e8 <_printf_common+0xc8>
 80113b2:	2000      	movs	r0, #0
 80113b4:	e008      	b.n	80113c8 <_printf_common+0xa8>
 80113b6:	2301      	movs	r3, #1
 80113b8:	4652      	mov	r2, sl
 80113ba:	4649      	mov	r1, r9
 80113bc:	4638      	mov	r0, r7
 80113be:	47c0      	blx	r8
 80113c0:	3001      	adds	r0, #1
 80113c2:	d103      	bne.n	80113cc <_printf_common+0xac>
 80113c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80113c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113cc:	3501      	adds	r5, #1
 80113ce:	e7c6      	b.n	801135e <_printf_common+0x3e>
 80113d0:	18e1      	adds	r1, r4, r3
 80113d2:	1c5a      	adds	r2, r3, #1
 80113d4:	2030      	movs	r0, #48	; 0x30
 80113d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80113da:	4422      	add	r2, r4
 80113dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80113e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80113e4:	3302      	adds	r3, #2
 80113e6:	e7c7      	b.n	8011378 <_printf_common+0x58>
 80113e8:	2301      	movs	r3, #1
 80113ea:	4622      	mov	r2, r4
 80113ec:	4649      	mov	r1, r9
 80113ee:	4638      	mov	r0, r7
 80113f0:	47c0      	blx	r8
 80113f2:	3001      	adds	r0, #1
 80113f4:	d0e6      	beq.n	80113c4 <_printf_common+0xa4>
 80113f6:	3601      	adds	r6, #1
 80113f8:	e7d9      	b.n	80113ae <_printf_common+0x8e>
	...

080113fc <_printf_i>:
 80113fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011400:	7e0f      	ldrb	r7, [r1, #24]
 8011402:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011404:	2f78      	cmp	r7, #120	; 0x78
 8011406:	4691      	mov	r9, r2
 8011408:	4680      	mov	r8, r0
 801140a:	460c      	mov	r4, r1
 801140c:	469a      	mov	sl, r3
 801140e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011412:	d807      	bhi.n	8011424 <_printf_i+0x28>
 8011414:	2f62      	cmp	r7, #98	; 0x62
 8011416:	d80a      	bhi.n	801142e <_printf_i+0x32>
 8011418:	2f00      	cmp	r7, #0
 801141a:	f000 80d4 	beq.w	80115c6 <_printf_i+0x1ca>
 801141e:	2f58      	cmp	r7, #88	; 0x58
 8011420:	f000 80c0 	beq.w	80115a4 <_printf_i+0x1a8>
 8011424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011428:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801142c:	e03a      	b.n	80114a4 <_printf_i+0xa8>
 801142e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011432:	2b15      	cmp	r3, #21
 8011434:	d8f6      	bhi.n	8011424 <_printf_i+0x28>
 8011436:	a101      	add	r1, pc, #4	; (adr r1, 801143c <_printf_i+0x40>)
 8011438:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801143c:	08011495 	.word	0x08011495
 8011440:	080114a9 	.word	0x080114a9
 8011444:	08011425 	.word	0x08011425
 8011448:	08011425 	.word	0x08011425
 801144c:	08011425 	.word	0x08011425
 8011450:	08011425 	.word	0x08011425
 8011454:	080114a9 	.word	0x080114a9
 8011458:	08011425 	.word	0x08011425
 801145c:	08011425 	.word	0x08011425
 8011460:	08011425 	.word	0x08011425
 8011464:	08011425 	.word	0x08011425
 8011468:	080115ad 	.word	0x080115ad
 801146c:	080114d5 	.word	0x080114d5
 8011470:	08011567 	.word	0x08011567
 8011474:	08011425 	.word	0x08011425
 8011478:	08011425 	.word	0x08011425
 801147c:	080115cf 	.word	0x080115cf
 8011480:	08011425 	.word	0x08011425
 8011484:	080114d5 	.word	0x080114d5
 8011488:	08011425 	.word	0x08011425
 801148c:	08011425 	.word	0x08011425
 8011490:	0801156f 	.word	0x0801156f
 8011494:	682b      	ldr	r3, [r5, #0]
 8011496:	1d1a      	adds	r2, r3, #4
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	602a      	str	r2, [r5, #0]
 801149c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80114a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80114a4:	2301      	movs	r3, #1
 80114a6:	e09f      	b.n	80115e8 <_printf_i+0x1ec>
 80114a8:	6820      	ldr	r0, [r4, #0]
 80114aa:	682b      	ldr	r3, [r5, #0]
 80114ac:	0607      	lsls	r7, r0, #24
 80114ae:	f103 0104 	add.w	r1, r3, #4
 80114b2:	6029      	str	r1, [r5, #0]
 80114b4:	d501      	bpl.n	80114ba <_printf_i+0xbe>
 80114b6:	681e      	ldr	r6, [r3, #0]
 80114b8:	e003      	b.n	80114c2 <_printf_i+0xc6>
 80114ba:	0646      	lsls	r6, r0, #25
 80114bc:	d5fb      	bpl.n	80114b6 <_printf_i+0xba>
 80114be:	f9b3 6000 	ldrsh.w	r6, [r3]
 80114c2:	2e00      	cmp	r6, #0
 80114c4:	da03      	bge.n	80114ce <_printf_i+0xd2>
 80114c6:	232d      	movs	r3, #45	; 0x2d
 80114c8:	4276      	negs	r6, r6
 80114ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80114ce:	485a      	ldr	r0, [pc, #360]	; (8011638 <_printf_i+0x23c>)
 80114d0:	230a      	movs	r3, #10
 80114d2:	e012      	b.n	80114fa <_printf_i+0xfe>
 80114d4:	682b      	ldr	r3, [r5, #0]
 80114d6:	6820      	ldr	r0, [r4, #0]
 80114d8:	1d19      	adds	r1, r3, #4
 80114da:	6029      	str	r1, [r5, #0]
 80114dc:	0605      	lsls	r5, r0, #24
 80114de:	d501      	bpl.n	80114e4 <_printf_i+0xe8>
 80114e0:	681e      	ldr	r6, [r3, #0]
 80114e2:	e002      	b.n	80114ea <_printf_i+0xee>
 80114e4:	0641      	lsls	r1, r0, #25
 80114e6:	d5fb      	bpl.n	80114e0 <_printf_i+0xe4>
 80114e8:	881e      	ldrh	r6, [r3, #0]
 80114ea:	4853      	ldr	r0, [pc, #332]	; (8011638 <_printf_i+0x23c>)
 80114ec:	2f6f      	cmp	r7, #111	; 0x6f
 80114ee:	bf0c      	ite	eq
 80114f0:	2308      	moveq	r3, #8
 80114f2:	230a      	movne	r3, #10
 80114f4:	2100      	movs	r1, #0
 80114f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80114fa:	6865      	ldr	r5, [r4, #4]
 80114fc:	60a5      	str	r5, [r4, #8]
 80114fe:	2d00      	cmp	r5, #0
 8011500:	bfa2      	ittt	ge
 8011502:	6821      	ldrge	r1, [r4, #0]
 8011504:	f021 0104 	bicge.w	r1, r1, #4
 8011508:	6021      	strge	r1, [r4, #0]
 801150a:	b90e      	cbnz	r6, 8011510 <_printf_i+0x114>
 801150c:	2d00      	cmp	r5, #0
 801150e:	d04b      	beq.n	80115a8 <_printf_i+0x1ac>
 8011510:	4615      	mov	r5, r2
 8011512:	fbb6 f1f3 	udiv	r1, r6, r3
 8011516:	fb03 6711 	mls	r7, r3, r1, r6
 801151a:	5dc7      	ldrb	r7, [r0, r7]
 801151c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011520:	4637      	mov	r7, r6
 8011522:	42bb      	cmp	r3, r7
 8011524:	460e      	mov	r6, r1
 8011526:	d9f4      	bls.n	8011512 <_printf_i+0x116>
 8011528:	2b08      	cmp	r3, #8
 801152a:	d10b      	bne.n	8011544 <_printf_i+0x148>
 801152c:	6823      	ldr	r3, [r4, #0]
 801152e:	07de      	lsls	r6, r3, #31
 8011530:	d508      	bpl.n	8011544 <_printf_i+0x148>
 8011532:	6923      	ldr	r3, [r4, #16]
 8011534:	6861      	ldr	r1, [r4, #4]
 8011536:	4299      	cmp	r1, r3
 8011538:	bfde      	ittt	le
 801153a:	2330      	movle	r3, #48	; 0x30
 801153c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011540:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011544:	1b52      	subs	r2, r2, r5
 8011546:	6122      	str	r2, [r4, #16]
 8011548:	f8cd a000 	str.w	sl, [sp]
 801154c:	464b      	mov	r3, r9
 801154e:	aa03      	add	r2, sp, #12
 8011550:	4621      	mov	r1, r4
 8011552:	4640      	mov	r0, r8
 8011554:	f7ff fee4 	bl	8011320 <_printf_common>
 8011558:	3001      	adds	r0, #1
 801155a:	d14a      	bne.n	80115f2 <_printf_i+0x1f6>
 801155c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011560:	b004      	add	sp, #16
 8011562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011566:	6823      	ldr	r3, [r4, #0]
 8011568:	f043 0320 	orr.w	r3, r3, #32
 801156c:	6023      	str	r3, [r4, #0]
 801156e:	4833      	ldr	r0, [pc, #204]	; (801163c <_printf_i+0x240>)
 8011570:	2778      	movs	r7, #120	; 0x78
 8011572:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011576:	6823      	ldr	r3, [r4, #0]
 8011578:	6829      	ldr	r1, [r5, #0]
 801157a:	061f      	lsls	r7, r3, #24
 801157c:	f851 6b04 	ldr.w	r6, [r1], #4
 8011580:	d402      	bmi.n	8011588 <_printf_i+0x18c>
 8011582:	065f      	lsls	r7, r3, #25
 8011584:	bf48      	it	mi
 8011586:	b2b6      	uxthmi	r6, r6
 8011588:	07df      	lsls	r7, r3, #31
 801158a:	bf48      	it	mi
 801158c:	f043 0320 	orrmi.w	r3, r3, #32
 8011590:	6029      	str	r1, [r5, #0]
 8011592:	bf48      	it	mi
 8011594:	6023      	strmi	r3, [r4, #0]
 8011596:	b91e      	cbnz	r6, 80115a0 <_printf_i+0x1a4>
 8011598:	6823      	ldr	r3, [r4, #0]
 801159a:	f023 0320 	bic.w	r3, r3, #32
 801159e:	6023      	str	r3, [r4, #0]
 80115a0:	2310      	movs	r3, #16
 80115a2:	e7a7      	b.n	80114f4 <_printf_i+0xf8>
 80115a4:	4824      	ldr	r0, [pc, #144]	; (8011638 <_printf_i+0x23c>)
 80115a6:	e7e4      	b.n	8011572 <_printf_i+0x176>
 80115a8:	4615      	mov	r5, r2
 80115aa:	e7bd      	b.n	8011528 <_printf_i+0x12c>
 80115ac:	682b      	ldr	r3, [r5, #0]
 80115ae:	6826      	ldr	r6, [r4, #0]
 80115b0:	6961      	ldr	r1, [r4, #20]
 80115b2:	1d18      	adds	r0, r3, #4
 80115b4:	6028      	str	r0, [r5, #0]
 80115b6:	0635      	lsls	r5, r6, #24
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	d501      	bpl.n	80115c0 <_printf_i+0x1c4>
 80115bc:	6019      	str	r1, [r3, #0]
 80115be:	e002      	b.n	80115c6 <_printf_i+0x1ca>
 80115c0:	0670      	lsls	r0, r6, #25
 80115c2:	d5fb      	bpl.n	80115bc <_printf_i+0x1c0>
 80115c4:	8019      	strh	r1, [r3, #0]
 80115c6:	2300      	movs	r3, #0
 80115c8:	6123      	str	r3, [r4, #16]
 80115ca:	4615      	mov	r5, r2
 80115cc:	e7bc      	b.n	8011548 <_printf_i+0x14c>
 80115ce:	682b      	ldr	r3, [r5, #0]
 80115d0:	1d1a      	adds	r2, r3, #4
 80115d2:	602a      	str	r2, [r5, #0]
 80115d4:	681d      	ldr	r5, [r3, #0]
 80115d6:	6862      	ldr	r2, [r4, #4]
 80115d8:	2100      	movs	r1, #0
 80115da:	4628      	mov	r0, r5
 80115dc:	f7ee fe30 	bl	8000240 <memchr>
 80115e0:	b108      	cbz	r0, 80115e6 <_printf_i+0x1ea>
 80115e2:	1b40      	subs	r0, r0, r5
 80115e4:	6060      	str	r0, [r4, #4]
 80115e6:	6863      	ldr	r3, [r4, #4]
 80115e8:	6123      	str	r3, [r4, #16]
 80115ea:	2300      	movs	r3, #0
 80115ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80115f0:	e7aa      	b.n	8011548 <_printf_i+0x14c>
 80115f2:	6923      	ldr	r3, [r4, #16]
 80115f4:	462a      	mov	r2, r5
 80115f6:	4649      	mov	r1, r9
 80115f8:	4640      	mov	r0, r8
 80115fa:	47d0      	blx	sl
 80115fc:	3001      	adds	r0, #1
 80115fe:	d0ad      	beq.n	801155c <_printf_i+0x160>
 8011600:	6823      	ldr	r3, [r4, #0]
 8011602:	079b      	lsls	r3, r3, #30
 8011604:	d413      	bmi.n	801162e <_printf_i+0x232>
 8011606:	68e0      	ldr	r0, [r4, #12]
 8011608:	9b03      	ldr	r3, [sp, #12]
 801160a:	4298      	cmp	r0, r3
 801160c:	bfb8      	it	lt
 801160e:	4618      	movlt	r0, r3
 8011610:	e7a6      	b.n	8011560 <_printf_i+0x164>
 8011612:	2301      	movs	r3, #1
 8011614:	4632      	mov	r2, r6
 8011616:	4649      	mov	r1, r9
 8011618:	4640      	mov	r0, r8
 801161a:	47d0      	blx	sl
 801161c:	3001      	adds	r0, #1
 801161e:	d09d      	beq.n	801155c <_printf_i+0x160>
 8011620:	3501      	adds	r5, #1
 8011622:	68e3      	ldr	r3, [r4, #12]
 8011624:	9903      	ldr	r1, [sp, #12]
 8011626:	1a5b      	subs	r3, r3, r1
 8011628:	42ab      	cmp	r3, r5
 801162a:	dcf2      	bgt.n	8011612 <_printf_i+0x216>
 801162c:	e7eb      	b.n	8011606 <_printf_i+0x20a>
 801162e:	2500      	movs	r5, #0
 8011630:	f104 0619 	add.w	r6, r4, #25
 8011634:	e7f5      	b.n	8011622 <_printf_i+0x226>
 8011636:	bf00      	nop
 8011638:	080123ed 	.word	0x080123ed
 801163c:	080123fe 	.word	0x080123fe

08011640 <__sflush_r>:
 8011640:	898a      	ldrh	r2, [r1, #12]
 8011642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011646:	4605      	mov	r5, r0
 8011648:	0710      	lsls	r0, r2, #28
 801164a:	460c      	mov	r4, r1
 801164c:	d458      	bmi.n	8011700 <__sflush_r+0xc0>
 801164e:	684b      	ldr	r3, [r1, #4]
 8011650:	2b00      	cmp	r3, #0
 8011652:	dc05      	bgt.n	8011660 <__sflush_r+0x20>
 8011654:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011656:	2b00      	cmp	r3, #0
 8011658:	dc02      	bgt.n	8011660 <__sflush_r+0x20>
 801165a:	2000      	movs	r0, #0
 801165c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011660:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011662:	2e00      	cmp	r6, #0
 8011664:	d0f9      	beq.n	801165a <__sflush_r+0x1a>
 8011666:	2300      	movs	r3, #0
 8011668:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801166c:	682f      	ldr	r7, [r5, #0]
 801166e:	6a21      	ldr	r1, [r4, #32]
 8011670:	602b      	str	r3, [r5, #0]
 8011672:	d032      	beq.n	80116da <__sflush_r+0x9a>
 8011674:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011676:	89a3      	ldrh	r3, [r4, #12]
 8011678:	075a      	lsls	r2, r3, #29
 801167a:	d505      	bpl.n	8011688 <__sflush_r+0x48>
 801167c:	6863      	ldr	r3, [r4, #4]
 801167e:	1ac0      	subs	r0, r0, r3
 8011680:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011682:	b10b      	cbz	r3, 8011688 <__sflush_r+0x48>
 8011684:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011686:	1ac0      	subs	r0, r0, r3
 8011688:	2300      	movs	r3, #0
 801168a:	4602      	mov	r2, r0
 801168c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801168e:	6a21      	ldr	r1, [r4, #32]
 8011690:	4628      	mov	r0, r5
 8011692:	47b0      	blx	r6
 8011694:	1c43      	adds	r3, r0, #1
 8011696:	89a3      	ldrh	r3, [r4, #12]
 8011698:	d106      	bne.n	80116a8 <__sflush_r+0x68>
 801169a:	6829      	ldr	r1, [r5, #0]
 801169c:	291d      	cmp	r1, #29
 801169e:	d82b      	bhi.n	80116f8 <__sflush_r+0xb8>
 80116a0:	4a29      	ldr	r2, [pc, #164]	; (8011748 <__sflush_r+0x108>)
 80116a2:	410a      	asrs	r2, r1
 80116a4:	07d6      	lsls	r6, r2, #31
 80116a6:	d427      	bmi.n	80116f8 <__sflush_r+0xb8>
 80116a8:	2200      	movs	r2, #0
 80116aa:	6062      	str	r2, [r4, #4]
 80116ac:	04d9      	lsls	r1, r3, #19
 80116ae:	6922      	ldr	r2, [r4, #16]
 80116b0:	6022      	str	r2, [r4, #0]
 80116b2:	d504      	bpl.n	80116be <__sflush_r+0x7e>
 80116b4:	1c42      	adds	r2, r0, #1
 80116b6:	d101      	bne.n	80116bc <__sflush_r+0x7c>
 80116b8:	682b      	ldr	r3, [r5, #0]
 80116ba:	b903      	cbnz	r3, 80116be <__sflush_r+0x7e>
 80116bc:	6560      	str	r0, [r4, #84]	; 0x54
 80116be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80116c0:	602f      	str	r7, [r5, #0]
 80116c2:	2900      	cmp	r1, #0
 80116c4:	d0c9      	beq.n	801165a <__sflush_r+0x1a>
 80116c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80116ca:	4299      	cmp	r1, r3
 80116cc:	d002      	beq.n	80116d4 <__sflush_r+0x94>
 80116ce:	4628      	mov	r0, r5
 80116d0:	f7ff fb3e 	bl	8010d50 <_free_r>
 80116d4:	2000      	movs	r0, #0
 80116d6:	6360      	str	r0, [r4, #52]	; 0x34
 80116d8:	e7c0      	b.n	801165c <__sflush_r+0x1c>
 80116da:	2301      	movs	r3, #1
 80116dc:	4628      	mov	r0, r5
 80116de:	47b0      	blx	r6
 80116e0:	1c41      	adds	r1, r0, #1
 80116e2:	d1c8      	bne.n	8011676 <__sflush_r+0x36>
 80116e4:	682b      	ldr	r3, [r5, #0]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d0c5      	beq.n	8011676 <__sflush_r+0x36>
 80116ea:	2b1d      	cmp	r3, #29
 80116ec:	d001      	beq.n	80116f2 <__sflush_r+0xb2>
 80116ee:	2b16      	cmp	r3, #22
 80116f0:	d101      	bne.n	80116f6 <__sflush_r+0xb6>
 80116f2:	602f      	str	r7, [r5, #0]
 80116f4:	e7b1      	b.n	801165a <__sflush_r+0x1a>
 80116f6:	89a3      	ldrh	r3, [r4, #12]
 80116f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80116fc:	81a3      	strh	r3, [r4, #12]
 80116fe:	e7ad      	b.n	801165c <__sflush_r+0x1c>
 8011700:	690f      	ldr	r7, [r1, #16]
 8011702:	2f00      	cmp	r7, #0
 8011704:	d0a9      	beq.n	801165a <__sflush_r+0x1a>
 8011706:	0793      	lsls	r3, r2, #30
 8011708:	680e      	ldr	r6, [r1, #0]
 801170a:	bf08      	it	eq
 801170c:	694b      	ldreq	r3, [r1, #20]
 801170e:	600f      	str	r7, [r1, #0]
 8011710:	bf18      	it	ne
 8011712:	2300      	movne	r3, #0
 8011714:	eba6 0807 	sub.w	r8, r6, r7
 8011718:	608b      	str	r3, [r1, #8]
 801171a:	f1b8 0f00 	cmp.w	r8, #0
 801171e:	dd9c      	ble.n	801165a <__sflush_r+0x1a>
 8011720:	6a21      	ldr	r1, [r4, #32]
 8011722:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011724:	4643      	mov	r3, r8
 8011726:	463a      	mov	r2, r7
 8011728:	4628      	mov	r0, r5
 801172a:	47b0      	blx	r6
 801172c:	2800      	cmp	r0, #0
 801172e:	dc06      	bgt.n	801173e <__sflush_r+0xfe>
 8011730:	89a3      	ldrh	r3, [r4, #12]
 8011732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011736:	81a3      	strh	r3, [r4, #12]
 8011738:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801173c:	e78e      	b.n	801165c <__sflush_r+0x1c>
 801173e:	4407      	add	r7, r0
 8011740:	eba8 0800 	sub.w	r8, r8, r0
 8011744:	e7e9      	b.n	801171a <__sflush_r+0xda>
 8011746:	bf00      	nop
 8011748:	dfbffffe 	.word	0xdfbffffe

0801174c <_fflush_r>:
 801174c:	b538      	push	{r3, r4, r5, lr}
 801174e:	690b      	ldr	r3, [r1, #16]
 8011750:	4605      	mov	r5, r0
 8011752:	460c      	mov	r4, r1
 8011754:	b913      	cbnz	r3, 801175c <_fflush_r+0x10>
 8011756:	2500      	movs	r5, #0
 8011758:	4628      	mov	r0, r5
 801175a:	bd38      	pop	{r3, r4, r5, pc}
 801175c:	b118      	cbz	r0, 8011766 <_fflush_r+0x1a>
 801175e:	6a03      	ldr	r3, [r0, #32]
 8011760:	b90b      	cbnz	r3, 8011766 <_fflush_r+0x1a>
 8011762:	f7ff fa0b 	bl	8010b7c <__sinit>
 8011766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d0f3      	beq.n	8011756 <_fflush_r+0xa>
 801176e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011770:	07d0      	lsls	r0, r2, #31
 8011772:	d404      	bmi.n	801177e <_fflush_r+0x32>
 8011774:	0599      	lsls	r1, r3, #22
 8011776:	d402      	bmi.n	801177e <_fflush_r+0x32>
 8011778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801177a:	f7ff fae6 	bl	8010d4a <__retarget_lock_acquire_recursive>
 801177e:	4628      	mov	r0, r5
 8011780:	4621      	mov	r1, r4
 8011782:	f7ff ff5d 	bl	8011640 <__sflush_r>
 8011786:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011788:	07da      	lsls	r2, r3, #31
 801178a:	4605      	mov	r5, r0
 801178c:	d4e4      	bmi.n	8011758 <_fflush_r+0xc>
 801178e:	89a3      	ldrh	r3, [r4, #12]
 8011790:	059b      	lsls	r3, r3, #22
 8011792:	d4e1      	bmi.n	8011758 <_fflush_r+0xc>
 8011794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011796:	f7ff fad9 	bl	8010d4c <__retarget_lock_release_recursive>
 801179a:	e7dd      	b.n	8011758 <_fflush_r+0xc>

0801179c <__sread>:
 801179c:	b510      	push	{r4, lr}
 801179e:	460c      	mov	r4, r1
 80117a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117a4:	f000 f9c2 	bl	8011b2c <_read_r>
 80117a8:	2800      	cmp	r0, #0
 80117aa:	bfab      	itete	ge
 80117ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80117ae:	89a3      	ldrhlt	r3, [r4, #12]
 80117b0:	181b      	addge	r3, r3, r0
 80117b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80117b6:	bfac      	ite	ge
 80117b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80117ba:	81a3      	strhlt	r3, [r4, #12]
 80117bc:	bd10      	pop	{r4, pc}

080117be <__swrite>:
 80117be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117c2:	461f      	mov	r7, r3
 80117c4:	898b      	ldrh	r3, [r1, #12]
 80117c6:	05db      	lsls	r3, r3, #23
 80117c8:	4605      	mov	r5, r0
 80117ca:	460c      	mov	r4, r1
 80117cc:	4616      	mov	r6, r2
 80117ce:	d505      	bpl.n	80117dc <__swrite+0x1e>
 80117d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117d4:	2302      	movs	r3, #2
 80117d6:	2200      	movs	r2, #0
 80117d8:	f000 f996 	bl	8011b08 <_lseek_r>
 80117dc:	89a3      	ldrh	r3, [r4, #12]
 80117de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80117e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80117e6:	81a3      	strh	r3, [r4, #12]
 80117e8:	4632      	mov	r2, r6
 80117ea:	463b      	mov	r3, r7
 80117ec:	4628      	mov	r0, r5
 80117ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80117f2:	f000 b9ad 	b.w	8011b50 <_write_r>

080117f6 <__sseek>:
 80117f6:	b510      	push	{r4, lr}
 80117f8:	460c      	mov	r4, r1
 80117fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117fe:	f000 f983 	bl	8011b08 <_lseek_r>
 8011802:	1c43      	adds	r3, r0, #1
 8011804:	89a3      	ldrh	r3, [r4, #12]
 8011806:	bf15      	itete	ne
 8011808:	6560      	strne	r0, [r4, #84]	; 0x54
 801180a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801180e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011812:	81a3      	strheq	r3, [r4, #12]
 8011814:	bf18      	it	ne
 8011816:	81a3      	strhne	r3, [r4, #12]
 8011818:	bd10      	pop	{r4, pc}

0801181a <__sclose>:
 801181a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801181e:	f000 b941 	b.w	8011aa4 <_close_r>

08011822 <_realloc_r>:
 8011822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011826:	4680      	mov	r8, r0
 8011828:	4614      	mov	r4, r2
 801182a:	460e      	mov	r6, r1
 801182c:	b921      	cbnz	r1, 8011838 <_realloc_r+0x16>
 801182e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011832:	4611      	mov	r1, r2
 8011834:	f7ff b856 	b.w	80108e4 <_malloc_r>
 8011838:	b92a      	cbnz	r2, 8011846 <_realloc_r+0x24>
 801183a:	f7ff fa89 	bl	8010d50 <_free_r>
 801183e:	4625      	mov	r5, r4
 8011840:	4628      	mov	r0, r5
 8011842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011846:	f000 f9a3 	bl	8011b90 <_malloc_usable_size_r>
 801184a:	4284      	cmp	r4, r0
 801184c:	4607      	mov	r7, r0
 801184e:	d802      	bhi.n	8011856 <_realloc_r+0x34>
 8011850:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011854:	d812      	bhi.n	801187c <_realloc_r+0x5a>
 8011856:	4621      	mov	r1, r4
 8011858:	4640      	mov	r0, r8
 801185a:	f7ff f843 	bl	80108e4 <_malloc_r>
 801185e:	4605      	mov	r5, r0
 8011860:	2800      	cmp	r0, #0
 8011862:	d0ed      	beq.n	8011840 <_realloc_r+0x1e>
 8011864:	42bc      	cmp	r4, r7
 8011866:	4622      	mov	r2, r4
 8011868:	4631      	mov	r1, r6
 801186a:	bf28      	it	cs
 801186c:	463a      	movcs	r2, r7
 801186e:	f000 f981 	bl	8011b74 <memcpy>
 8011872:	4631      	mov	r1, r6
 8011874:	4640      	mov	r0, r8
 8011876:	f7ff fa6b 	bl	8010d50 <_free_r>
 801187a:	e7e1      	b.n	8011840 <_realloc_r+0x1e>
 801187c:	4635      	mov	r5, r6
 801187e:	e7df      	b.n	8011840 <_realloc_r+0x1e>

08011880 <__swbuf_r>:
 8011880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011882:	460e      	mov	r6, r1
 8011884:	4614      	mov	r4, r2
 8011886:	4605      	mov	r5, r0
 8011888:	b118      	cbz	r0, 8011892 <__swbuf_r+0x12>
 801188a:	6a03      	ldr	r3, [r0, #32]
 801188c:	b90b      	cbnz	r3, 8011892 <__swbuf_r+0x12>
 801188e:	f7ff f975 	bl	8010b7c <__sinit>
 8011892:	69a3      	ldr	r3, [r4, #24]
 8011894:	60a3      	str	r3, [r4, #8]
 8011896:	89a3      	ldrh	r3, [r4, #12]
 8011898:	071a      	lsls	r2, r3, #28
 801189a:	d525      	bpl.n	80118e8 <__swbuf_r+0x68>
 801189c:	6923      	ldr	r3, [r4, #16]
 801189e:	b31b      	cbz	r3, 80118e8 <__swbuf_r+0x68>
 80118a0:	6823      	ldr	r3, [r4, #0]
 80118a2:	6922      	ldr	r2, [r4, #16]
 80118a4:	1a98      	subs	r0, r3, r2
 80118a6:	6963      	ldr	r3, [r4, #20]
 80118a8:	b2f6      	uxtb	r6, r6
 80118aa:	4283      	cmp	r3, r0
 80118ac:	4637      	mov	r7, r6
 80118ae:	dc04      	bgt.n	80118ba <__swbuf_r+0x3a>
 80118b0:	4621      	mov	r1, r4
 80118b2:	4628      	mov	r0, r5
 80118b4:	f7ff ff4a 	bl	801174c <_fflush_r>
 80118b8:	b9e0      	cbnz	r0, 80118f4 <__swbuf_r+0x74>
 80118ba:	68a3      	ldr	r3, [r4, #8]
 80118bc:	3b01      	subs	r3, #1
 80118be:	60a3      	str	r3, [r4, #8]
 80118c0:	6823      	ldr	r3, [r4, #0]
 80118c2:	1c5a      	adds	r2, r3, #1
 80118c4:	6022      	str	r2, [r4, #0]
 80118c6:	701e      	strb	r6, [r3, #0]
 80118c8:	6962      	ldr	r2, [r4, #20]
 80118ca:	1c43      	adds	r3, r0, #1
 80118cc:	429a      	cmp	r2, r3
 80118ce:	d004      	beq.n	80118da <__swbuf_r+0x5a>
 80118d0:	89a3      	ldrh	r3, [r4, #12]
 80118d2:	07db      	lsls	r3, r3, #31
 80118d4:	d506      	bpl.n	80118e4 <__swbuf_r+0x64>
 80118d6:	2e0a      	cmp	r6, #10
 80118d8:	d104      	bne.n	80118e4 <__swbuf_r+0x64>
 80118da:	4621      	mov	r1, r4
 80118dc:	4628      	mov	r0, r5
 80118de:	f7ff ff35 	bl	801174c <_fflush_r>
 80118e2:	b938      	cbnz	r0, 80118f4 <__swbuf_r+0x74>
 80118e4:	4638      	mov	r0, r7
 80118e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118e8:	4621      	mov	r1, r4
 80118ea:	4628      	mov	r0, r5
 80118ec:	f000 f806 	bl	80118fc <__swsetup_r>
 80118f0:	2800      	cmp	r0, #0
 80118f2:	d0d5      	beq.n	80118a0 <__swbuf_r+0x20>
 80118f4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80118f8:	e7f4      	b.n	80118e4 <__swbuf_r+0x64>
	...

080118fc <__swsetup_r>:
 80118fc:	b538      	push	{r3, r4, r5, lr}
 80118fe:	4b2a      	ldr	r3, [pc, #168]	; (80119a8 <__swsetup_r+0xac>)
 8011900:	4605      	mov	r5, r0
 8011902:	6818      	ldr	r0, [r3, #0]
 8011904:	460c      	mov	r4, r1
 8011906:	b118      	cbz	r0, 8011910 <__swsetup_r+0x14>
 8011908:	6a03      	ldr	r3, [r0, #32]
 801190a:	b90b      	cbnz	r3, 8011910 <__swsetup_r+0x14>
 801190c:	f7ff f936 	bl	8010b7c <__sinit>
 8011910:	89a3      	ldrh	r3, [r4, #12]
 8011912:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011916:	0718      	lsls	r0, r3, #28
 8011918:	d422      	bmi.n	8011960 <__swsetup_r+0x64>
 801191a:	06d9      	lsls	r1, r3, #27
 801191c:	d407      	bmi.n	801192e <__swsetup_r+0x32>
 801191e:	2309      	movs	r3, #9
 8011920:	602b      	str	r3, [r5, #0]
 8011922:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011926:	81a3      	strh	r3, [r4, #12]
 8011928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801192c:	e034      	b.n	8011998 <__swsetup_r+0x9c>
 801192e:	0758      	lsls	r0, r3, #29
 8011930:	d512      	bpl.n	8011958 <__swsetup_r+0x5c>
 8011932:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011934:	b141      	cbz	r1, 8011948 <__swsetup_r+0x4c>
 8011936:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801193a:	4299      	cmp	r1, r3
 801193c:	d002      	beq.n	8011944 <__swsetup_r+0x48>
 801193e:	4628      	mov	r0, r5
 8011940:	f7ff fa06 	bl	8010d50 <_free_r>
 8011944:	2300      	movs	r3, #0
 8011946:	6363      	str	r3, [r4, #52]	; 0x34
 8011948:	89a3      	ldrh	r3, [r4, #12]
 801194a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801194e:	81a3      	strh	r3, [r4, #12]
 8011950:	2300      	movs	r3, #0
 8011952:	6063      	str	r3, [r4, #4]
 8011954:	6923      	ldr	r3, [r4, #16]
 8011956:	6023      	str	r3, [r4, #0]
 8011958:	89a3      	ldrh	r3, [r4, #12]
 801195a:	f043 0308 	orr.w	r3, r3, #8
 801195e:	81a3      	strh	r3, [r4, #12]
 8011960:	6923      	ldr	r3, [r4, #16]
 8011962:	b94b      	cbnz	r3, 8011978 <__swsetup_r+0x7c>
 8011964:	89a3      	ldrh	r3, [r4, #12]
 8011966:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801196a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801196e:	d003      	beq.n	8011978 <__swsetup_r+0x7c>
 8011970:	4621      	mov	r1, r4
 8011972:	4628      	mov	r0, r5
 8011974:	f000 f840 	bl	80119f8 <__smakebuf_r>
 8011978:	89a0      	ldrh	r0, [r4, #12]
 801197a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801197e:	f010 0301 	ands.w	r3, r0, #1
 8011982:	d00a      	beq.n	801199a <__swsetup_r+0x9e>
 8011984:	2300      	movs	r3, #0
 8011986:	60a3      	str	r3, [r4, #8]
 8011988:	6963      	ldr	r3, [r4, #20]
 801198a:	425b      	negs	r3, r3
 801198c:	61a3      	str	r3, [r4, #24]
 801198e:	6923      	ldr	r3, [r4, #16]
 8011990:	b943      	cbnz	r3, 80119a4 <__swsetup_r+0xa8>
 8011992:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011996:	d1c4      	bne.n	8011922 <__swsetup_r+0x26>
 8011998:	bd38      	pop	{r3, r4, r5, pc}
 801199a:	0781      	lsls	r1, r0, #30
 801199c:	bf58      	it	pl
 801199e:	6963      	ldrpl	r3, [r4, #20]
 80119a0:	60a3      	str	r3, [r4, #8]
 80119a2:	e7f4      	b.n	801198e <__swsetup_r+0x92>
 80119a4:	2000      	movs	r0, #0
 80119a6:	e7f7      	b.n	8011998 <__swsetup_r+0x9c>
 80119a8:	20000168 	.word	0x20000168

080119ac <__swhatbuf_r>:
 80119ac:	b570      	push	{r4, r5, r6, lr}
 80119ae:	460c      	mov	r4, r1
 80119b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119b4:	2900      	cmp	r1, #0
 80119b6:	b096      	sub	sp, #88	; 0x58
 80119b8:	4615      	mov	r5, r2
 80119ba:	461e      	mov	r6, r3
 80119bc:	da0d      	bge.n	80119da <__swhatbuf_r+0x2e>
 80119be:	89a3      	ldrh	r3, [r4, #12]
 80119c0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80119c4:	f04f 0100 	mov.w	r1, #0
 80119c8:	bf0c      	ite	eq
 80119ca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80119ce:	2340      	movne	r3, #64	; 0x40
 80119d0:	2000      	movs	r0, #0
 80119d2:	6031      	str	r1, [r6, #0]
 80119d4:	602b      	str	r3, [r5, #0]
 80119d6:	b016      	add	sp, #88	; 0x58
 80119d8:	bd70      	pop	{r4, r5, r6, pc}
 80119da:	466a      	mov	r2, sp
 80119dc:	f000 f872 	bl	8011ac4 <_fstat_r>
 80119e0:	2800      	cmp	r0, #0
 80119e2:	dbec      	blt.n	80119be <__swhatbuf_r+0x12>
 80119e4:	9901      	ldr	r1, [sp, #4]
 80119e6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80119ea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80119ee:	4259      	negs	r1, r3
 80119f0:	4159      	adcs	r1, r3
 80119f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80119f6:	e7eb      	b.n	80119d0 <__swhatbuf_r+0x24>

080119f8 <__smakebuf_r>:
 80119f8:	898b      	ldrh	r3, [r1, #12]
 80119fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80119fc:	079d      	lsls	r5, r3, #30
 80119fe:	4606      	mov	r6, r0
 8011a00:	460c      	mov	r4, r1
 8011a02:	d507      	bpl.n	8011a14 <__smakebuf_r+0x1c>
 8011a04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011a08:	6023      	str	r3, [r4, #0]
 8011a0a:	6123      	str	r3, [r4, #16]
 8011a0c:	2301      	movs	r3, #1
 8011a0e:	6163      	str	r3, [r4, #20]
 8011a10:	b002      	add	sp, #8
 8011a12:	bd70      	pop	{r4, r5, r6, pc}
 8011a14:	ab01      	add	r3, sp, #4
 8011a16:	466a      	mov	r2, sp
 8011a18:	f7ff ffc8 	bl	80119ac <__swhatbuf_r>
 8011a1c:	9900      	ldr	r1, [sp, #0]
 8011a1e:	4605      	mov	r5, r0
 8011a20:	4630      	mov	r0, r6
 8011a22:	f7fe ff5f 	bl	80108e4 <_malloc_r>
 8011a26:	b948      	cbnz	r0, 8011a3c <__smakebuf_r+0x44>
 8011a28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a2c:	059a      	lsls	r2, r3, #22
 8011a2e:	d4ef      	bmi.n	8011a10 <__smakebuf_r+0x18>
 8011a30:	f023 0303 	bic.w	r3, r3, #3
 8011a34:	f043 0302 	orr.w	r3, r3, #2
 8011a38:	81a3      	strh	r3, [r4, #12]
 8011a3a:	e7e3      	b.n	8011a04 <__smakebuf_r+0xc>
 8011a3c:	89a3      	ldrh	r3, [r4, #12]
 8011a3e:	6020      	str	r0, [r4, #0]
 8011a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a44:	81a3      	strh	r3, [r4, #12]
 8011a46:	9b00      	ldr	r3, [sp, #0]
 8011a48:	6163      	str	r3, [r4, #20]
 8011a4a:	9b01      	ldr	r3, [sp, #4]
 8011a4c:	6120      	str	r0, [r4, #16]
 8011a4e:	b15b      	cbz	r3, 8011a68 <__smakebuf_r+0x70>
 8011a50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a54:	4630      	mov	r0, r6
 8011a56:	f000 f847 	bl	8011ae8 <_isatty_r>
 8011a5a:	b128      	cbz	r0, 8011a68 <__smakebuf_r+0x70>
 8011a5c:	89a3      	ldrh	r3, [r4, #12]
 8011a5e:	f023 0303 	bic.w	r3, r3, #3
 8011a62:	f043 0301 	orr.w	r3, r3, #1
 8011a66:	81a3      	strh	r3, [r4, #12]
 8011a68:	89a3      	ldrh	r3, [r4, #12]
 8011a6a:	431d      	orrs	r5, r3
 8011a6c:	81a5      	strh	r5, [r4, #12]
 8011a6e:	e7cf      	b.n	8011a10 <__smakebuf_r+0x18>

08011a70 <memmove>:
 8011a70:	4288      	cmp	r0, r1
 8011a72:	b510      	push	{r4, lr}
 8011a74:	eb01 0402 	add.w	r4, r1, r2
 8011a78:	d902      	bls.n	8011a80 <memmove+0x10>
 8011a7a:	4284      	cmp	r4, r0
 8011a7c:	4623      	mov	r3, r4
 8011a7e:	d807      	bhi.n	8011a90 <memmove+0x20>
 8011a80:	1e43      	subs	r3, r0, #1
 8011a82:	42a1      	cmp	r1, r4
 8011a84:	d008      	beq.n	8011a98 <memmove+0x28>
 8011a86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011a8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011a8e:	e7f8      	b.n	8011a82 <memmove+0x12>
 8011a90:	4402      	add	r2, r0
 8011a92:	4601      	mov	r1, r0
 8011a94:	428a      	cmp	r2, r1
 8011a96:	d100      	bne.n	8011a9a <memmove+0x2a>
 8011a98:	bd10      	pop	{r4, pc}
 8011a9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011a9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011aa2:	e7f7      	b.n	8011a94 <memmove+0x24>

08011aa4 <_close_r>:
 8011aa4:	b538      	push	{r3, r4, r5, lr}
 8011aa6:	4d06      	ldr	r5, [pc, #24]	; (8011ac0 <_close_r+0x1c>)
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	4604      	mov	r4, r0
 8011aac:	4608      	mov	r0, r1
 8011aae:	602b      	str	r3, [r5, #0]
 8011ab0:	f7ef fee3 	bl	800187a <_close>
 8011ab4:	1c43      	adds	r3, r0, #1
 8011ab6:	d102      	bne.n	8011abe <_close_r+0x1a>
 8011ab8:	682b      	ldr	r3, [r5, #0]
 8011aba:	b103      	cbz	r3, 8011abe <_close_r+0x1a>
 8011abc:	6023      	str	r3, [r4, #0]
 8011abe:	bd38      	pop	{r3, r4, r5, pc}
 8011ac0:	20003364 	.word	0x20003364

08011ac4 <_fstat_r>:
 8011ac4:	b538      	push	{r3, r4, r5, lr}
 8011ac6:	4d07      	ldr	r5, [pc, #28]	; (8011ae4 <_fstat_r+0x20>)
 8011ac8:	2300      	movs	r3, #0
 8011aca:	4604      	mov	r4, r0
 8011acc:	4608      	mov	r0, r1
 8011ace:	4611      	mov	r1, r2
 8011ad0:	602b      	str	r3, [r5, #0]
 8011ad2:	f7ef fede 	bl	8001892 <_fstat>
 8011ad6:	1c43      	adds	r3, r0, #1
 8011ad8:	d102      	bne.n	8011ae0 <_fstat_r+0x1c>
 8011ada:	682b      	ldr	r3, [r5, #0]
 8011adc:	b103      	cbz	r3, 8011ae0 <_fstat_r+0x1c>
 8011ade:	6023      	str	r3, [r4, #0]
 8011ae0:	bd38      	pop	{r3, r4, r5, pc}
 8011ae2:	bf00      	nop
 8011ae4:	20003364 	.word	0x20003364

08011ae8 <_isatty_r>:
 8011ae8:	b538      	push	{r3, r4, r5, lr}
 8011aea:	4d06      	ldr	r5, [pc, #24]	; (8011b04 <_isatty_r+0x1c>)
 8011aec:	2300      	movs	r3, #0
 8011aee:	4604      	mov	r4, r0
 8011af0:	4608      	mov	r0, r1
 8011af2:	602b      	str	r3, [r5, #0]
 8011af4:	f7ef fedd 	bl	80018b2 <_isatty>
 8011af8:	1c43      	adds	r3, r0, #1
 8011afa:	d102      	bne.n	8011b02 <_isatty_r+0x1a>
 8011afc:	682b      	ldr	r3, [r5, #0]
 8011afe:	b103      	cbz	r3, 8011b02 <_isatty_r+0x1a>
 8011b00:	6023      	str	r3, [r4, #0]
 8011b02:	bd38      	pop	{r3, r4, r5, pc}
 8011b04:	20003364 	.word	0x20003364

08011b08 <_lseek_r>:
 8011b08:	b538      	push	{r3, r4, r5, lr}
 8011b0a:	4d07      	ldr	r5, [pc, #28]	; (8011b28 <_lseek_r+0x20>)
 8011b0c:	4604      	mov	r4, r0
 8011b0e:	4608      	mov	r0, r1
 8011b10:	4611      	mov	r1, r2
 8011b12:	2200      	movs	r2, #0
 8011b14:	602a      	str	r2, [r5, #0]
 8011b16:	461a      	mov	r2, r3
 8011b18:	f7ef fed6 	bl	80018c8 <_lseek>
 8011b1c:	1c43      	adds	r3, r0, #1
 8011b1e:	d102      	bne.n	8011b26 <_lseek_r+0x1e>
 8011b20:	682b      	ldr	r3, [r5, #0]
 8011b22:	b103      	cbz	r3, 8011b26 <_lseek_r+0x1e>
 8011b24:	6023      	str	r3, [r4, #0]
 8011b26:	bd38      	pop	{r3, r4, r5, pc}
 8011b28:	20003364 	.word	0x20003364

08011b2c <_read_r>:
 8011b2c:	b538      	push	{r3, r4, r5, lr}
 8011b2e:	4d07      	ldr	r5, [pc, #28]	; (8011b4c <_read_r+0x20>)
 8011b30:	4604      	mov	r4, r0
 8011b32:	4608      	mov	r0, r1
 8011b34:	4611      	mov	r1, r2
 8011b36:	2200      	movs	r2, #0
 8011b38:	602a      	str	r2, [r5, #0]
 8011b3a:	461a      	mov	r2, r3
 8011b3c:	f7ef fe64 	bl	8001808 <_read>
 8011b40:	1c43      	adds	r3, r0, #1
 8011b42:	d102      	bne.n	8011b4a <_read_r+0x1e>
 8011b44:	682b      	ldr	r3, [r5, #0]
 8011b46:	b103      	cbz	r3, 8011b4a <_read_r+0x1e>
 8011b48:	6023      	str	r3, [r4, #0]
 8011b4a:	bd38      	pop	{r3, r4, r5, pc}
 8011b4c:	20003364 	.word	0x20003364

08011b50 <_write_r>:
 8011b50:	b538      	push	{r3, r4, r5, lr}
 8011b52:	4d07      	ldr	r5, [pc, #28]	; (8011b70 <_write_r+0x20>)
 8011b54:	4604      	mov	r4, r0
 8011b56:	4608      	mov	r0, r1
 8011b58:	4611      	mov	r1, r2
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	602a      	str	r2, [r5, #0]
 8011b5e:	461a      	mov	r2, r3
 8011b60:	f7ef fe6f 	bl	8001842 <_write>
 8011b64:	1c43      	adds	r3, r0, #1
 8011b66:	d102      	bne.n	8011b6e <_write_r+0x1e>
 8011b68:	682b      	ldr	r3, [r5, #0]
 8011b6a:	b103      	cbz	r3, 8011b6e <_write_r+0x1e>
 8011b6c:	6023      	str	r3, [r4, #0]
 8011b6e:	bd38      	pop	{r3, r4, r5, pc}
 8011b70:	20003364 	.word	0x20003364

08011b74 <memcpy>:
 8011b74:	440a      	add	r2, r1
 8011b76:	4291      	cmp	r1, r2
 8011b78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011b7c:	d100      	bne.n	8011b80 <memcpy+0xc>
 8011b7e:	4770      	bx	lr
 8011b80:	b510      	push	{r4, lr}
 8011b82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011b86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011b8a:	4291      	cmp	r1, r2
 8011b8c:	d1f9      	bne.n	8011b82 <memcpy+0xe>
 8011b8e:	bd10      	pop	{r4, pc}

08011b90 <_malloc_usable_size_r>:
 8011b90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b94:	1f18      	subs	r0, r3, #4
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	bfbc      	itt	lt
 8011b9a:	580b      	ldrlt	r3, [r1, r0]
 8011b9c:	18c0      	addlt	r0, r0, r3
 8011b9e:	4770      	bx	lr

08011ba0 <_init>:
 8011ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ba2:	bf00      	nop
 8011ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011ba6:	bc08      	pop	{r3}
 8011ba8:	469e      	mov	lr, r3
 8011baa:	4770      	bx	lr

08011bac <_fini>:
 8011bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bae:	bf00      	nop
 8011bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011bb2:	bc08      	pop	{r3}
 8011bb4:	469e      	mov	lr, r3
 8011bb6:	4770      	bx	lr
